
CLIENT_NUCLEO_LB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee10  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  0800ef50  0800ef50  0001ef50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f378  0800f378  0001f378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f380  0800f380  0001f380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f384  0800f384  0001f384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001ec  20000004  0800f388  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  200001f0  0800f574  000201f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000039  2000028c  0800f60d  0002028c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  200002c8  0800f646  000202c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 000000a4  200002dc  0800f657  000202dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000ba4  20000380  0800f6fb  00020380  2**2
                  ALLOC
 12 ._user_heap_stack 00001004  20000f24  0800f6fb  00020f24  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020380  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000024  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       0000019f  20030024  20030024  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000880  200301c4  200301c4  00030000  2**2
                  ALLOC
 17 .debug_info   0003d6f5  00000000  00000000  000203b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 000074fe  00000000  00000000  0005daa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 00002838  00000000  00000000  00064fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 000024e0  00000000  00000000  000677e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_macro  0002e108  00000000  00000000  00069cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   00027b9d  00000000  00000000  00097dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    000f38a3  00000000  00000000  000bf965  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  001b3208  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000a7c4  00000000  00000000  001b3284  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000380 	.word	0x20000380
 800015c:	00000000 	.word	0x00000000
 8000160:	0800ef38 	.word	0x0800ef38

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000384 	.word	0x20000384
 800017c:	0800ef38 	.word	0x0800ef38

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000240:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000244:	f000 b972 	b.w	800052c <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	4688      	mov	r8, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14b      	bne.n	8000306 <__udivmoddi4+0xa6>
 800026e:	428a      	cmp	r2, r1
 8000270:	4615      	mov	r5, r2
 8000272:	d967      	bls.n	8000344 <__udivmoddi4+0xe4>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b14a      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027a:	f1c2 0720 	rsb	r7, r2, #32
 800027e:	fa01 f302 	lsl.w	r3, r1, r2
 8000282:	fa20 f707 	lsr.w	r7, r0, r7
 8000286:	4095      	lsls	r5, r2
 8000288:	ea47 0803 	orr.w	r8, r7, r3
 800028c:	4094      	lsls	r4, r2
 800028e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000292:	0c23      	lsrs	r3, r4, #16
 8000294:	fbb8 f7fe 	udiv	r7, r8, lr
 8000298:	fa1f fc85 	uxth.w	ip, r5
 800029c:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a4:	fb07 f10c 	mul.w	r1, r7, ip
 80002a8:	4299      	cmp	r1, r3
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x60>
 80002ac:	18eb      	adds	r3, r5, r3
 80002ae:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002b2:	f080 811b 	bcs.w	80004ec <__udivmoddi4+0x28c>
 80002b6:	4299      	cmp	r1, r3
 80002b8:	f240 8118 	bls.w	80004ec <__udivmoddi4+0x28c>
 80002bc:	3f02      	subs	r7, #2
 80002be:	442b      	add	r3, r5
 80002c0:	1a5b      	subs	r3, r3, r1
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002c8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d4:	45a4      	cmp	ip, r4
 80002d6:	d909      	bls.n	80002ec <__udivmoddi4+0x8c>
 80002d8:	192c      	adds	r4, r5, r4
 80002da:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002de:	f080 8107 	bcs.w	80004f0 <__udivmoddi4+0x290>
 80002e2:	45a4      	cmp	ip, r4
 80002e4:	f240 8104 	bls.w	80004f0 <__udivmoddi4+0x290>
 80002e8:	3802      	subs	r0, #2
 80002ea:	442c      	add	r4, r5
 80002ec:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f0:	eba4 040c 	sub.w	r4, r4, ip
 80002f4:	2700      	movs	r7, #0
 80002f6:	b11e      	cbz	r6, 8000300 <__udivmoddi4+0xa0>
 80002f8:	40d4      	lsrs	r4, r2
 80002fa:	2300      	movs	r3, #0
 80002fc:	e9c6 4300 	strd	r4, r3, [r6]
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d909      	bls.n	800031e <__udivmoddi4+0xbe>
 800030a:	2e00      	cmp	r6, #0
 800030c:	f000 80eb 	beq.w	80004e6 <__udivmoddi4+0x286>
 8000310:	2700      	movs	r7, #0
 8000312:	e9c6 0100 	strd	r0, r1, [r6]
 8000316:	4638      	mov	r0, r7
 8000318:	4639      	mov	r1, r7
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	fab3 f783 	clz	r7, r3
 8000322:	2f00      	cmp	r7, #0
 8000324:	d147      	bne.n	80003b6 <__udivmoddi4+0x156>
 8000326:	428b      	cmp	r3, r1
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xd0>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 80fa 	bhi.w	8000524 <__udivmoddi4+0x2c4>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb61 0303 	sbc.w	r3, r1, r3
 8000336:	2001      	movs	r0, #1
 8000338:	4698      	mov	r8, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d0e0      	beq.n	8000300 <__udivmoddi4+0xa0>
 800033e:	e9c6 4800 	strd	r4, r8, [r6]
 8000342:	e7dd      	b.n	8000300 <__udivmoddi4+0xa0>
 8000344:	b902      	cbnz	r2, 8000348 <__udivmoddi4+0xe8>
 8000346:	deff      	udf	#255	; 0xff
 8000348:	fab2 f282 	clz	r2, r2
 800034c:	2a00      	cmp	r2, #0
 800034e:	f040 808f 	bne.w	8000470 <__udivmoddi4+0x210>
 8000352:	1b49      	subs	r1, r1, r5
 8000354:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000358:	fa1f f885 	uxth.w	r8, r5
 800035c:	2701      	movs	r7, #1
 800035e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000362:	0c23      	lsrs	r3, r4, #16
 8000364:	fb0e 111c 	mls	r1, lr, ip, r1
 8000368:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800036c:	fb08 f10c 	mul.w	r1, r8, ip
 8000370:	4299      	cmp	r1, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x124>
 8000374:	18eb      	adds	r3, r5, r3
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x122>
 800037c:	4299      	cmp	r1, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2bc>
 8000382:	4684      	mov	ip, r0
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000390:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x14c>
 800039c:	192c      	adds	r4, r5, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x14a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80b6 	bhi.w	8000516 <__udivmoddi4+0x2b6>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e79f      	b.n	80002f6 <__udivmoddi4+0x96>
 80003b6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ba:	40bb      	lsls	r3, r7
 80003bc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003c4:	fa01 f407 	lsl.w	r4, r1, r7
 80003c8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003cc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003d4:	4325      	orrs	r5, r4
 80003d6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003da:	0c2c      	lsrs	r4, r5, #16
 80003dc:	fb08 3319 	mls	r3, r8, r9, r3
 80003e0:	fa1f fa8e 	uxth.w	sl, lr
 80003e4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003e8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ec:	429c      	cmp	r4, r3
 80003ee:	fa02 f207 	lsl.w	r2, r2, r7
 80003f2:	fa00 f107 	lsl.w	r1, r0, r7
 80003f6:	d90b      	bls.n	8000410 <__udivmoddi4+0x1b0>
 80003f8:	eb1e 0303 	adds.w	r3, lr, r3
 80003fc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000400:	f080 8087 	bcs.w	8000512 <__udivmoddi4+0x2b2>
 8000404:	429c      	cmp	r4, r3
 8000406:	f240 8084 	bls.w	8000512 <__udivmoddi4+0x2b2>
 800040a:	f1a9 0902 	sub.w	r9, r9, #2
 800040e:	4473      	add	r3, lr
 8000410:	1b1b      	subs	r3, r3, r4
 8000412:	b2ad      	uxth	r5, r5
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000420:	fb00 fa0a 	mul.w	sl, r0, sl
 8000424:	45a2      	cmp	sl, r4
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x1da>
 8000428:	eb1e 0404 	adds.w	r4, lr, r4
 800042c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000430:	d26b      	bcs.n	800050a <__udivmoddi4+0x2aa>
 8000432:	45a2      	cmp	sl, r4
 8000434:	d969      	bls.n	800050a <__udivmoddi4+0x2aa>
 8000436:	3802      	subs	r0, #2
 8000438:	4474      	add	r4, lr
 800043a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800043e:	fba0 8902 	umull	r8, r9, r0, r2
 8000442:	eba4 040a 	sub.w	r4, r4, sl
 8000446:	454c      	cmp	r4, r9
 8000448:	46c2      	mov	sl, r8
 800044a:	464b      	mov	r3, r9
 800044c:	d354      	bcc.n	80004f8 <__udivmoddi4+0x298>
 800044e:	d051      	beq.n	80004f4 <__udivmoddi4+0x294>
 8000450:	2e00      	cmp	r6, #0
 8000452:	d069      	beq.n	8000528 <__udivmoddi4+0x2c8>
 8000454:	ebb1 050a 	subs.w	r5, r1, sl
 8000458:	eb64 0403 	sbc.w	r4, r4, r3
 800045c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000460:	40fd      	lsrs	r5, r7
 8000462:	40fc      	lsrs	r4, r7
 8000464:	ea4c 0505 	orr.w	r5, ip, r5
 8000468:	e9c6 5400 	strd	r5, r4, [r6]
 800046c:	2700      	movs	r7, #0
 800046e:	e747      	b.n	8000300 <__udivmoddi4+0xa0>
 8000470:	f1c2 0320 	rsb	r3, r2, #32
 8000474:	fa20 f703 	lsr.w	r7, r0, r3
 8000478:	4095      	lsls	r5, r2
 800047a:	fa01 f002 	lsl.w	r0, r1, r2
 800047e:	fa21 f303 	lsr.w	r3, r1, r3
 8000482:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000486:	4338      	orrs	r0, r7
 8000488:	0c01      	lsrs	r1, r0, #16
 800048a:	fbb3 f7fe 	udiv	r7, r3, lr
 800048e:	fa1f f885 	uxth.w	r8, r5
 8000492:	fb0e 3317 	mls	r3, lr, r7, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb07 f308 	mul.w	r3, r7, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	fa04 f402 	lsl.w	r4, r4, r2
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x256>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ac:	d22f      	bcs.n	800050e <__udivmoddi4+0x2ae>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d92d      	bls.n	800050e <__udivmoddi4+0x2ae>
 80004b2:	3f02      	subs	r7, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1acb      	subs	r3, r1, r3
 80004b8:	b281      	uxth	r1, r0
 80004ba:	fbb3 f0fe 	udiv	r0, r3, lr
 80004be:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c6:	fb00 f308 	mul.w	r3, r0, r8
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x27e>
 80004ce:	1869      	adds	r1, r5, r1
 80004d0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004d4:	d217      	bcs.n	8000506 <__udivmoddi4+0x2a6>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d915      	bls.n	8000506 <__udivmoddi4+0x2a6>
 80004da:	3802      	subs	r0, #2
 80004dc:	4429      	add	r1, r5
 80004de:	1ac9      	subs	r1, r1, r3
 80004e0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004e4:	e73b      	b.n	800035e <__udivmoddi4+0xfe>
 80004e6:	4637      	mov	r7, r6
 80004e8:	4630      	mov	r0, r6
 80004ea:	e709      	b.n	8000300 <__udivmoddi4+0xa0>
 80004ec:	4607      	mov	r7, r0
 80004ee:	e6e7      	b.n	80002c0 <__udivmoddi4+0x60>
 80004f0:	4618      	mov	r0, r3
 80004f2:	e6fb      	b.n	80002ec <__udivmoddi4+0x8c>
 80004f4:	4541      	cmp	r1, r8
 80004f6:	d2ab      	bcs.n	8000450 <__udivmoddi4+0x1f0>
 80004f8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004fc:	eb69 020e 	sbc.w	r2, r9, lr
 8000500:	3801      	subs	r0, #1
 8000502:	4613      	mov	r3, r2
 8000504:	e7a4      	b.n	8000450 <__udivmoddi4+0x1f0>
 8000506:	4660      	mov	r0, ip
 8000508:	e7e9      	b.n	80004de <__udivmoddi4+0x27e>
 800050a:	4618      	mov	r0, r3
 800050c:	e795      	b.n	800043a <__udivmoddi4+0x1da>
 800050e:	4667      	mov	r7, ip
 8000510:	e7d1      	b.n	80004b6 <__udivmoddi4+0x256>
 8000512:	4681      	mov	r9, r0
 8000514:	e77c      	b.n	8000410 <__udivmoddi4+0x1b0>
 8000516:	3802      	subs	r0, #2
 8000518:	442c      	add	r4, r5
 800051a:	e747      	b.n	80003ac <__udivmoddi4+0x14c>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	442b      	add	r3, r5
 8000522:	e72f      	b.n	8000384 <__udivmoddi4+0x124>
 8000524:	4638      	mov	r0, r7
 8000526:	e708      	b.n	800033a <__udivmoddi4+0xda>
 8000528:	4637      	mov	r7, r6
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0xa0>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800053c:	689b      	ldr	r3, [r3, #8]
 800053e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000542:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4313      	orrs	r3, r2
 800054a:	608b      	str	r3, [r1, #8]
}
 800054c:	bf00      	nop
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr

08000558 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 800055c:	f000 f80e 	bl	800057c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000560:	4905      	ldr	r1, [pc, #20]	; (8000578 <APPE_Init+0x20>)
 8000562:	2000      	movs	r0, #0
 8000564:	f000 fd84 	bl	8001070 <HW_TS_Init>

  /* Initialize the debug interface */
  Init_Debug();
#endif

  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000568:	2101      	movs	r1, #1
 800056a:	2001      	movs	r0, #1
 800056c:	f001 fb8a 	bl	8001c84 <UTIL_LPM_SetOffMode>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000570:	f000 f80e 	bl	8000590 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000574:	bf00      	nop
}
 8000576:	bd80      	pop	{r7, pc}
 8000578:	200006fc 	.word	0x200006fc

0800057c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000580:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000584:	f7ff ffd4 	bl	8000530 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 8000588:	f001 fb6a 	bl	8001c60 <UTIL_LPM_Init>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 800058c:	bf00      	nop
}
 800058e:	bd80      	pop	{r7, pc}

08000590 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000596:	f00b ff4f 	bl	800c438 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 800059a:	4a11      	ldr	r2, [pc, #68]	; (80005e0 <appe_Tl_Init+0x50>)
 800059c:	2100      	movs	r1, #0
 800059e:	2040      	movs	r0, #64	; 0x40
 80005a0:	f001 fcd8 	bl	8001f54 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80005a4:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <appe_Tl_Init+0x54>)
 80005a6:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80005a8:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <appe_Tl_Init+0x58>)
 80005aa:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80005ac:	463b      	mov	r3, r7
 80005ae:	4619      	mov	r1, r3
 80005b0:	480e      	ldr	r0, [pc, #56]	; (80005ec <appe_Tl_Init+0x5c>)
 80005b2:	f00b fe0b 	bl	800c1cc <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80005b6:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <appe_Tl_Init+0x60>)
 80005b8:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <appe_Tl_Init+0x64>)
 80005bc:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80005be:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <appe_Tl_Init+0x68>)
 80005c0:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80005c2:	f240 533c 	movw	r3, #1340	; 0x53c
 80005c6:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 80005c8:	f107 0308 	add.w	r3, r7, #8
 80005cc:	4618      	mov	r0, r3
 80005ce:	f00c f841 	bl	800c654 <TL_MM_Init>

  TL_Enable();
 80005d2:	f00b ff2b 	bl	800c42c <TL_Enable>

  return;
 80005d6:	bf00      	nop
}
 80005d8:	3720      	adds	r7, #32
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	0800c205 	.word	0x0800c205
 80005e4:	20030700 	.word	0x20030700
 80005e8:	080005fd 	.word	0x080005fd
 80005ec:	08000613 	.word	0x08000613
 80005f0:	20030918 	.word	0x20030918
 80005f4:	2003080c 	.word	0x2003080c
 80005f8:	200301c4 	.word	0x200301c4

080005fc <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000606:	bf00      	nop
}
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr

08000612 <APPE_SysUserEvtRx>:

static void APPE_SysUserEvtRx( void * pPayload )
{
 8000612:	b580      	push	{r7, lr}
 8000614:	b082      	sub	sp, #8
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  TL_TRACES_Init( );
 800061a:	f00c f88b 	bl	800c734 <TL_TRACES_Init>

  APP_BLE_Init( );
 800061e:	f00c f9bf 	bl	800c9a0 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000622:	2100      	movs	r1, #0
 8000624:	2001      	movs	r0, #1
 8000626:	f001 fb2d 	bl	8001c84 <UTIL_LPM_SetOffMode>
  return;
 800062a:	bf00      	nop
}
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 8000632:	b580      	push	{r7, lr}
 8000634:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
 8000636:	f001 fb53 	bl	8001ce0 <UTIL_LPM_EnterLowPower>
#endif
  return;
 800063a:	bf00      	nop
}
 800063c:	bd80      	pop	{r7, pc}

0800063e <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b082      	sub	sp, #8
 8000642:	af00      	add	r7, sp, #0
 8000644:	6078      	str	r0, [r7, #4]
 8000646:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800064c:	f001 fba6 	bl	8001d9c <UTIL_SEQ_Run>
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000660:	2100      	movs	r1, #0
 8000662:	2040      	movs	r0, #64	; 0x40
 8000664:	f001 fc96 	bl	8001f94 <UTIL_SEQ_SetTask>
  return;
 8000668:	bf00      	nop
}
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000678:	2002      	movs	r0, #2
 800067a:	f001 fcf1 	bl	8002060 <UTIL_SEQ_SetEvt>
  return;
 800067e:	bf00      	nop
}
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}

08000686 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000686:	b580      	push	{r7, lr}
 8000688:	b082      	sub	sp, #8
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 800068e:	2002      	movs	r0, #2
 8000690:	f001 fd04 	bl	800209c <UTIL_SEQ_WaitEvt>
  return;
 8000694:	bf00      	nop
}
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80006a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4313      	orrs	r3, r2
 80006b2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80006b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4013      	ands	r3, r2
 80006be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006c0:	68fb      	ldr	r3, [r7, #12]
}
 80006c2:	bf00      	nop
 80006c4:	3714      	adds	r7, #20
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
	...

080006d0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e4:	2004      	movs	r0, #4
 80006e6:	f7ff ffd9 	bl	800069c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ea:	2080      	movs	r0, #128	; 0x80
 80006ec:	f7ff ffd6 	bl	800069c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f0:	2002      	movs	r0, #2
 80006f2:	f7ff ffd3 	bl	800069c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	2001      	movs	r0, #1
 80006f8:	f7ff ffd0 	bl	800069c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006fc:	2010      	movs	r0, #16
 80006fe:	f7ff ffcd 	bl	800069c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000702:	2008      	movs	r0, #8
 8000704:	f7ff ffca 	bl	800069c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TEST_Pin|LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	f640 0123 	movw	r1, #2083	; 0x823
 800070e:	483f      	ldr	r0, [pc, #252]	; (800080c <MX_GPIO_Init+0x13c>)
 8000710:	f002 fcca 	bl	80030a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000714:	2308      	movs	r3, #8
 8000716:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000718:	2303      	movs	r3, #3
 800071a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	4619      	mov	r1, r3
 8000724:	483a      	ldr	r0, [pc, #232]	; (8000810 <MX_GPIO_Init+0x140>)
 8000726:	f002 fa83 	bl	8002c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 PB2 PB10 
                           PB12 PB13 PB14 PB15 
                           PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_2|GPIO_PIN_10 
 800072a:	f24f 7314 	movw	r3, #63252	; 0xf714
 800072e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000730:	2303      	movs	r3, #3
 8000732:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	4619      	mov	r1, r3
 800073c:	4833      	ldr	r0, [pc, #204]	; (800080c <MX_GPIO_Init+0x13c>)
 800073e:	f002 fa77 	bl	8002c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 
                           PC5 PC6 PC10 PC11 
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000742:	f641 436f 	movw	r3, #7279	; 0x1c6f
 8000746:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000748:	2303      	movs	r3, #3
 800074a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	4619      	mov	r1, r3
 8000754:	482f      	ldr	r0, [pc, #188]	; (8000814 <MX_GPIO_Init+0x144>)
 8000756:	f002 fa6b 	bl	8002c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA5 PA6 PA7 
                           PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800075a:	f248 73ff 	movw	r3, #34815	; 0x87ff
 800075e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000760:	2303      	movs	r3, #3
 8000762:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	4619      	mov	r1, r3
 800076c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000770:	f002 fa5e 	bl	8002c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8000774:	2310      	movs	r3, #16
 8000776:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000778:	4b27      	ldr	r3, [pc, #156]	; (8000818 <MX_GPIO_Init+0x148>)
 800077a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800077c:	2301      	movs	r3, #1
 800077e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	4619      	mov	r1, r3
 8000784:	4823      	ldr	r0, [pc, #140]	; (8000814 <MX_GPIO_Init+0x144>)
 8000786:	f002 fa53 	bl	8002c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TEST_Pin|LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin;
 800078a:	f640 0323 	movw	r3, #2083	; 0x823
 800078e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000790:	2301      	movs	r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	4619      	mov	r1, r3
 80007a0:	481a      	ldr	r0, [pc, #104]	; (800080c <MX_GPIO_Init+0x13c>)
 80007a2:	f002 fa45 	bl	8002c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007a6:	2310      	movs	r3, #16
 80007a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007aa:	2303      	movs	r3, #3
 80007ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	4619      	mov	r1, r3
 80007b6:	4819      	ldr	r0, [pc, #100]	; (800081c <MX_GPIO_Init+0x14c>)
 80007b8:	f002 fa3a 	bl	8002c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = SW2_Pin|SW3_Pin;
 80007bc:	2303      	movs	r3, #3
 80007be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007c0:	4b15      	ldr	r3, [pc, #84]	; (8000818 <MX_GPIO_Init+0x148>)
 80007c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007c4:	2301      	movs	r3, #1
 80007c6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	4619      	mov	r1, r3
 80007cc:	4814      	ldr	r0, [pc, #80]	; (8000820 <MX_GPIO_Init+0x150>)
 80007ce:	f002 fa2f 	bl	8002c30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2100      	movs	r1, #0
 80007d6:	2006      	movs	r0, #6
 80007d8:	f002 f990 	bl	8002afc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007dc:	2006      	movs	r0, #6
 80007de:	f002 f9b7 	bl	8002b50 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2100      	movs	r1, #0
 80007e6:	2007      	movs	r0, #7
 80007e8:	f002 f988 	bl	8002afc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80007ec:	2007      	movs	r0, #7
 80007ee:	f002 f9af 	bl	8002b50 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2100      	movs	r1, #0
 80007f6:	200a      	movs	r0, #10
 80007f8:	f002 f980 	bl	8002afc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80007fc:	200a      	movs	r0, #10
 80007fe:	f002 f9a7 	bl	8002b50 <HAL_NVIC_EnableIRQ>

}
 8000802:	bf00      	nop
 8000804:	3718      	adds	r7, #24
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	48000400 	.word	0x48000400
 8000810:	48001c00 	.word	0x48001c00
 8000814:	48000800 	.word	0x48000800
 8000818:	10110000 	.word	0x10110000
 800081c:	48001000 	.word	0x48001000
 8000820:	48000c00 	.word	0x48000c00

08000824 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <LL_EXTI_EnableIT_0_31+0x24>)
 800082e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000832:	4905      	ldr	r1, [pc, #20]	; (8000848 <LL_EXTI_EnableIT_0_31+0x24>)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4313      	orrs	r3, r2
 8000838:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	58000800 	.word	0x58000800

0800084c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	4904      	ldr	r1, [pc, #16]	; (800086c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4313      	orrs	r3, r2
 800085e:	600b      	str	r3, [r1, #0]

}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	58000800 	.word	0x58000800

08000870 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000876:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <ReadRtcSsrValue+0x3c>)
 8000878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800087a:	b29b      	uxth	r3, r3
 800087c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <ReadRtcSsrValue+0x3c>)
 8000880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000882:	b29b      	uxth	r3, r3
 8000884:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000886:	e005      	b.n	8000894 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800088c:	4b07      	ldr	r3, [pc, #28]	; (80008ac <ReadRtcSsrValue+0x3c>)
 800088e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000890:	b29b      	uxth	r3, r3
 8000892:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	429a      	cmp	r2, r3
 800089a:	d1f5      	bne.n	8000888 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 800089c:	683b      	ldr	r3, [r7, #0]
}
 800089e:	4618      	mov	r0, r3
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	40002800 	.word	0x40002800

080008b0 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	460a      	mov	r2, r1
 80008ba:	71fb      	strb	r3, [r7, #7]
 80008bc:	4613      	mov	r3, r2
 80008be:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80008c0:	79ba      	ldrb	r2, [r7, #6]
 80008c2:	491d      	ldr	r1, [pc, #116]	; (8000938 <LinkTimerAfter+0x88>)
 80008c4:	4613      	mov	r3, r2
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	4413      	add	r3, r2
 80008ca:	00db      	lsls	r3, r3, #3
 80008cc:	440b      	add	r3, r1
 80008ce:	3315      	adds	r3, #21
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
 80008d6:	2b06      	cmp	r3, #6
 80008d8:	d009      	beq.n	80008ee <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80008da:	7bfa      	ldrb	r2, [r7, #15]
 80008dc:	4916      	ldr	r1, [pc, #88]	; (8000938 <LinkTimerAfter+0x88>)
 80008de:	4613      	mov	r3, r2
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	4413      	add	r3, r2
 80008e4:	00db      	lsls	r3, r3, #3
 80008e6:	440b      	add	r3, r1
 80008e8:	3314      	adds	r3, #20
 80008ea:	79fa      	ldrb	r2, [r7, #7]
 80008ec:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80008ee:	79fa      	ldrb	r2, [r7, #7]
 80008f0:	4911      	ldr	r1, [pc, #68]	; (8000938 <LinkTimerAfter+0x88>)
 80008f2:	4613      	mov	r3, r2
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	4413      	add	r3, r2
 80008f8:	00db      	lsls	r3, r3, #3
 80008fa:	440b      	add	r3, r1
 80008fc:	3315      	adds	r3, #21
 80008fe:	7bfa      	ldrb	r2, [r7, #15]
 8000900:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000902:	79fa      	ldrb	r2, [r7, #7]
 8000904:	490c      	ldr	r1, [pc, #48]	; (8000938 <LinkTimerAfter+0x88>)
 8000906:	4613      	mov	r3, r2
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	4413      	add	r3, r2
 800090c:	00db      	lsls	r3, r3, #3
 800090e:	440b      	add	r3, r1
 8000910:	3314      	adds	r3, #20
 8000912:	79ba      	ldrb	r2, [r7, #6]
 8000914:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000916:	79ba      	ldrb	r2, [r7, #6]
 8000918:	4907      	ldr	r1, [pc, #28]	; (8000938 <LinkTimerAfter+0x88>)
 800091a:	4613      	mov	r3, r2
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	4413      	add	r3, r2
 8000920:	00db      	lsls	r3, r3, #3
 8000922:	440b      	add	r3, r1
 8000924:	3315      	adds	r3, #21
 8000926:	79fa      	ldrb	r2, [r7, #7]
 8000928:	701a      	strb	r2, [r3, #0]

  return;
 800092a:	bf00      	nop
}
 800092c:	3714      	adds	r7, #20
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	200001f0 	.word	0x200001f0

0800093c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	460a      	mov	r2, r1
 8000946:	71fb      	strb	r3, [r7, #7]
 8000948:	4613      	mov	r3, r2
 800094a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 800094c:	4b29      	ldr	r3, [pc, #164]	; (80009f4 <LinkTimerBefore+0xb8>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	79ba      	ldrb	r2, [r7, #6]
 8000954:	429a      	cmp	r2, r3
 8000956:	d032      	beq.n	80009be <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000958:	79ba      	ldrb	r2, [r7, #6]
 800095a:	4927      	ldr	r1, [pc, #156]	; (80009f8 <LinkTimerBefore+0xbc>)
 800095c:	4613      	mov	r3, r2
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	4413      	add	r3, r2
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	440b      	add	r3, r1
 8000966:	3314      	adds	r3, #20
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 800096c:	7bfa      	ldrb	r2, [r7, #15]
 800096e:	4922      	ldr	r1, [pc, #136]	; (80009f8 <LinkTimerBefore+0xbc>)
 8000970:	4613      	mov	r3, r2
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	4413      	add	r3, r2
 8000976:	00db      	lsls	r3, r3, #3
 8000978:	440b      	add	r3, r1
 800097a:	3315      	adds	r3, #21
 800097c:	79fa      	ldrb	r2, [r7, #7]
 800097e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000980:	79fa      	ldrb	r2, [r7, #7]
 8000982:	491d      	ldr	r1, [pc, #116]	; (80009f8 <LinkTimerBefore+0xbc>)
 8000984:	4613      	mov	r3, r2
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	4413      	add	r3, r2
 800098a:	00db      	lsls	r3, r3, #3
 800098c:	440b      	add	r3, r1
 800098e:	3315      	adds	r3, #21
 8000990:	79ba      	ldrb	r2, [r7, #6]
 8000992:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000994:	79fa      	ldrb	r2, [r7, #7]
 8000996:	4918      	ldr	r1, [pc, #96]	; (80009f8 <LinkTimerBefore+0xbc>)
 8000998:	4613      	mov	r3, r2
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	4413      	add	r3, r2
 800099e:	00db      	lsls	r3, r3, #3
 80009a0:	440b      	add	r3, r1
 80009a2:	3314      	adds	r3, #20
 80009a4:	7bfa      	ldrb	r2, [r7, #15]
 80009a6:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80009a8:	79ba      	ldrb	r2, [r7, #6]
 80009aa:	4913      	ldr	r1, [pc, #76]	; (80009f8 <LinkTimerBefore+0xbc>)
 80009ac:	4613      	mov	r3, r2
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	4413      	add	r3, r2
 80009b2:	00db      	lsls	r3, r3, #3
 80009b4:	440b      	add	r3, r1
 80009b6:	3314      	adds	r3, #20
 80009b8:	79fa      	ldrb	r2, [r7, #7]
 80009ba:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80009bc:	e014      	b.n	80009e8 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80009be:	79fa      	ldrb	r2, [r7, #7]
 80009c0:	490d      	ldr	r1, [pc, #52]	; (80009f8 <LinkTimerBefore+0xbc>)
 80009c2:	4613      	mov	r3, r2
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	4413      	add	r3, r2
 80009c8:	00db      	lsls	r3, r3, #3
 80009ca:	440b      	add	r3, r1
 80009cc:	3315      	adds	r3, #21
 80009ce:	79ba      	ldrb	r2, [r7, #6]
 80009d0:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80009d2:	79ba      	ldrb	r2, [r7, #6]
 80009d4:	4908      	ldr	r1, [pc, #32]	; (80009f8 <LinkTimerBefore+0xbc>)
 80009d6:	4613      	mov	r3, r2
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	4413      	add	r3, r2
 80009dc:	00db      	lsls	r3, r3, #3
 80009de:	440b      	add	r3, r1
 80009e0:	3314      	adds	r3, #20
 80009e2:	79fa      	ldrb	r2, [r7, #7]
 80009e4:	701a      	strb	r2, [r3, #0]
  return;
 80009e6:	bf00      	nop
}
 80009e8:	3714      	adds	r7, #20
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20000280 	.word	0x20000280
 80009f8:	200001f0 	.word	0x200001f0

080009fc <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000a06:	4b4e      	ldr	r3, [pc, #312]	; (8000b40 <linkTimer+0x144>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	2b06      	cmp	r3, #6
 8000a0e:	d118      	bne.n	8000a42 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000a10:	4b4b      	ldr	r3, [pc, #300]	; (8000b40 <linkTimer+0x144>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4b4b      	ldr	r3, [pc, #300]	; (8000b44 <linkTimer+0x148>)
 8000a18:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000a1a:	4a49      	ldr	r2, [pc, #292]	; (8000b40 <linkTimer+0x144>)
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000a20:	79fa      	ldrb	r2, [r7, #7]
 8000a22:	4949      	ldr	r1, [pc, #292]	; (8000b48 <linkTimer+0x14c>)
 8000a24:	4613      	mov	r3, r2
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	4413      	add	r3, r2
 8000a2a:	00db      	lsls	r3, r3, #3
 8000a2c:	440b      	add	r3, r1
 8000a2e:	3315      	adds	r3, #21
 8000a30:	2206      	movs	r2, #6
 8000a32:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000a34:	4b45      	ldr	r3, [pc, #276]	; (8000b4c <linkTimer+0x150>)
 8000a36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a3a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	81fb      	strh	r3, [r7, #14]
 8000a40:	e078      	b.n	8000b34 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000a42:	f000 f909 	bl	8000c58 <ReturnTimeElapsed>
 8000a46:	4603      	mov	r3, r0
 8000a48:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000a4a:	79fa      	ldrb	r2, [r7, #7]
 8000a4c:	493e      	ldr	r1, [pc, #248]	; (8000b48 <linkTimer+0x14c>)
 8000a4e:	4613      	mov	r3, r2
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	4413      	add	r3, r2
 8000a54:	00db      	lsls	r3, r3, #3
 8000a56:	440b      	add	r3, r1
 8000a58:	3308      	adds	r3, #8
 8000a5a:	6819      	ldr	r1, [r3, #0]
 8000a5c:	89fb      	ldrh	r3, [r7, #14]
 8000a5e:	79fa      	ldrb	r2, [r7, #7]
 8000a60:	4419      	add	r1, r3
 8000a62:	4839      	ldr	r0, [pc, #228]	; (8000b48 <linkTimer+0x14c>)
 8000a64:	4613      	mov	r3, r2
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	4413      	add	r3, r2
 8000a6a:	00db      	lsls	r3, r3, #3
 8000a6c:	4403      	add	r3, r0
 8000a6e:	3308      	adds	r3, #8
 8000a70:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000a72:	79fa      	ldrb	r2, [r7, #7]
 8000a74:	4934      	ldr	r1, [pc, #208]	; (8000b48 <linkTimer+0x14c>)
 8000a76:	4613      	mov	r3, r2
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	4413      	add	r3, r2
 8000a7c:	00db      	lsls	r3, r3, #3
 8000a7e:	440b      	add	r3, r1
 8000a80:	3308      	adds	r3, #8
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000a86:	4b2e      	ldr	r3, [pc, #184]	; (8000b40 <linkTimer+0x144>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4a2e      	ldr	r2, [pc, #184]	; (8000b48 <linkTimer+0x14c>)
 8000a90:	460b      	mov	r3, r1
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	440b      	add	r3, r1
 8000a96:	00db      	lsls	r3, r3, #3
 8000a98:	4413      	add	r3, r2
 8000a9a:	3308      	adds	r3, #8
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d337      	bcc.n	8000b14 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000aa4:	4b26      	ldr	r3, [pc, #152]	; (8000b40 <linkTimer+0x144>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000aaa:	7b7a      	ldrb	r2, [r7, #13]
 8000aac:	4926      	ldr	r1, [pc, #152]	; (8000b48 <linkTimer+0x14c>)
 8000aae:	4613      	mov	r3, r2
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	4413      	add	r3, r2
 8000ab4:	00db      	lsls	r3, r3, #3
 8000ab6:	440b      	add	r3, r1
 8000ab8:	3315      	adds	r3, #21
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000abe:	e013      	b.n	8000ae8 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000ac0:	7b7a      	ldrb	r2, [r7, #13]
 8000ac2:	4921      	ldr	r1, [pc, #132]	; (8000b48 <linkTimer+0x14c>)
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	4413      	add	r3, r2
 8000aca:	00db      	lsls	r3, r3, #3
 8000acc:	440b      	add	r3, r1
 8000ace:	3315      	adds	r3, #21
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000ad4:	7b7a      	ldrb	r2, [r7, #13]
 8000ad6:	491c      	ldr	r1, [pc, #112]	; (8000b48 <linkTimer+0x14c>)
 8000ad8:	4613      	mov	r3, r2
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	4413      	add	r3, r2
 8000ade:	00db      	lsls	r3, r3, #3
 8000ae0:	440b      	add	r3, r1
 8000ae2:	3315      	adds	r3, #21
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000ae8:	7b3b      	ldrb	r3, [r7, #12]
 8000aea:	2b06      	cmp	r3, #6
 8000aec:	d00b      	beq.n	8000b06 <linkTimer+0x10a>
 8000aee:	7b3a      	ldrb	r2, [r7, #12]
 8000af0:	4915      	ldr	r1, [pc, #84]	; (8000b48 <linkTimer+0x14c>)
 8000af2:	4613      	mov	r3, r2
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	4413      	add	r3, r2
 8000af8:	00db      	lsls	r3, r3, #3
 8000afa:	440b      	add	r3, r1
 8000afc:	3308      	adds	r3, #8
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	68ba      	ldr	r2, [r7, #8]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d2dc      	bcs.n	8000ac0 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000b06:	7b7a      	ldrb	r2, [r7, #13]
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	4611      	mov	r1, r2
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fecf 	bl	80008b0 <LinkTimerAfter>
 8000b12:	e00f      	b.n	8000b34 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000b14:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <linkTimer+0x144>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	4611      	mov	r1, r2
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff ff0c 	bl	800093c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <linkTimer+0x144>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <linkTimer+0x148>)
 8000b2c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000b2e:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <linkTimer+0x144>)
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000b34:	89fb      	ldrh	r3, [r7, #14]
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000280 	.word	0x20000280
 8000b44:	20000281 	.word	0x20000281
 8000b48:	200001f0 	.word	0x200001f0
 8000b4c:	20000284 	.word	0x20000284

08000b50 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	460a      	mov	r2, r1
 8000b5a:	71fb      	strb	r3, [r7, #7]
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000b60:	4b39      	ldr	r3, [pc, #228]	; (8000c48 <UnlinkTimer+0xf8>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	79fa      	ldrb	r2, [r7, #7]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d111      	bne.n	8000b90 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000b6c:	4b36      	ldr	r3, [pc, #216]	; (8000c48 <UnlinkTimer+0xf8>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	4b36      	ldr	r3, [pc, #216]	; (8000c4c <UnlinkTimer+0xfc>)
 8000b74:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000b76:	79fa      	ldrb	r2, [r7, #7]
 8000b78:	4935      	ldr	r1, [pc, #212]	; (8000c50 <UnlinkTimer+0x100>)
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	4413      	add	r3, r2
 8000b80:	00db      	lsls	r3, r3, #3
 8000b82:	440b      	add	r3, r1
 8000b84:	3315      	adds	r3, #21
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	4b2f      	ldr	r3, [pc, #188]	; (8000c48 <UnlinkTimer+0xf8>)
 8000b8c:	701a      	strb	r2, [r3, #0]
 8000b8e:	e03e      	b.n	8000c0e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000b90:	79fa      	ldrb	r2, [r7, #7]
 8000b92:	492f      	ldr	r1, [pc, #188]	; (8000c50 <UnlinkTimer+0x100>)
 8000b94:	4613      	mov	r3, r2
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	4413      	add	r3, r2
 8000b9a:	00db      	lsls	r3, r3, #3
 8000b9c:	440b      	add	r3, r1
 8000b9e:	3314      	adds	r3, #20
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000ba4:	79fa      	ldrb	r2, [r7, #7]
 8000ba6:	492a      	ldr	r1, [pc, #168]	; (8000c50 <UnlinkTimer+0x100>)
 8000ba8:	4613      	mov	r3, r2
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	4413      	add	r3, r2
 8000bae:	00db      	lsls	r3, r3, #3
 8000bb0:	440b      	add	r3, r1
 8000bb2:	3315      	adds	r3, #21
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000bb8:	79f9      	ldrb	r1, [r7, #7]
 8000bba:	7bfa      	ldrb	r2, [r7, #15]
 8000bbc:	4824      	ldr	r0, [pc, #144]	; (8000c50 <UnlinkTimer+0x100>)
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	440b      	add	r3, r1
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	4403      	add	r3, r0
 8000bc8:	3315      	adds	r3, #21
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	b2d8      	uxtb	r0, r3
 8000bce:	4920      	ldr	r1, [pc, #128]	; (8000c50 <UnlinkTimer+0x100>)
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	4413      	add	r3, r2
 8000bd6:	00db      	lsls	r3, r3, #3
 8000bd8:	440b      	add	r3, r1
 8000bda:	3315      	adds	r3, #21
 8000bdc:	4602      	mov	r2, r0
 8000bde:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000be0:	7bbb      	ldrb	r3, [r7, #14]
 8000be2:	2b06      	cmp	r3, #6
 8000be4:	d013      	beq.n	8000c0e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000be6:	79f9      	ldrb	r1, [r7, #7]
 8000be8:	7bba      	ldrb	r2, [r7, #14]
 8000bea:	4819      	ldr	r0, [pc, #100]	; (8000c50 <UnlinkTimer+0x100>)
 8000bec:	460b      	mov	r3, r1
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	440b      	add	r3, r1
 8000bf2:	00db      	lsls	r3, r3, #3
 8000bf4:	4403      	add	r3, r0
 8000bf6:	3314      	adds	r3, #20
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	b2d8      	uxtb	r0, r3
 8000bfc:	4914      	ldr	r1, [pc, #80]	; (8000c50 <UnlinkTimer+0x100>)
 8000bfe:	4613      	mov	r3, r2
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	4413      	add	r3, r2
 8000c04:	00db      	lsls	r3, r3, #3
 8000c06:	440b      	add	r3, r1
 8000c08:	3314      	adds	r3, #20
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000c0e:	79fa      	ldrb	r2, [r7, #7]
 8000c10:	490f      	ldr	r1, [pc, #60]	; (8000c50 <UnlinkTimer+0x100>)
 8000c12:	4613      	mov	r3, r2
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	4413      	add	r3, r2
 8000c18:	00db      	lsls	r3, r3, #3
 8000c1a:	440b      	add	r3, r1
 8000c1c:	330c      	adds	r3, #12
 8000c1e:	2201      	movs	r2, #1
 8000c20:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <UnlinkTimer+0xf8>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	2b06      	cmp	r3, #6
 8000c2a:	d107      	bne.n	8000c3c <UnlinkTimer+0xec>
 8000c2c:	79bb      	ldrb	r3, [r7, #6]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d104      	bne.n	8000c3c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <UnlinkTimer+0x104>)
 8000c34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c38:	601a      	str	r2, [r3, #0]
  }

  return;
 8000c3a:	bf00      	nop
 8000c3c:	bf00      	nop
}
 8000c3e:	3714      	adds	r7, #20
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	20000280 	.word	0x20000280
 8000c4c:	20000281 	.word	0x20000281
 8000c50:	200001f0 	.word	0x200001f0
 8000c54:	20000284 	.word	0x20000284

08000c58 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <ReturnTimeElapsed+0x70>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c66:	d026      	beq.n	8000cb6 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000c68:	f7ff fe02 	bl	8000870 <ReadRtcSsrValue>
 8000c6c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000c6e:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <ReturnTimeElapsed+0x70>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d805      	bhi.n	8000c84 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <ReturnTimeElapsed+0x70>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	e00a      	b.n	8000c9a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <ReturnTimeElapsed+0x74>)
 8000c86:	881b      	ldrh	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000c90:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <ReturnTimeElapsed+0x70>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	683a      	ldr	r2, [r7, #0]
 8000c96:	4413      	add	r3, r2
 8000c98:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <ReturnTimeElapsed+0x78>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	fb02 f303 	mul.w	r3, r2, r3
 8000ca6:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <ReturnTimeElapsed+0x7c>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	40d3      	lsrs	r3, r2
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	e001      	b.n	8000cba <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	b29b      	uxth	r3, r3
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000284 	.word	0x20000284
 8000ccc:	200003a2 	.word	0x200003a2
 8000cd0:	200003a1 	.word	0x200003a1
 8000cd4:	200003a0 	.word	0x200003a0

08000cd8 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000ce2:	88fb      	ldrh	r3, [r7, #6]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d108      	bne.n	8000cfa <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000ce8:	f7ff fdc2 	bl	8000870 <ReadRtcSsrValue>
 8000cec:	4602      	mov	r2, r0
 8000cee:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <RestartWakeupCounter+0xa8>)
 8000cf0:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000cf2:	2003      	movs	r0, #3
 8000cf4:	f001 ff68 	bl	8002bc8 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000cf8:	e03e      	b.n	8000d78 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d803      	bhi.n	8000d08 <RestartWakeupCounter+0x30>
 8000d00:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <RestartWakeupCounter+0xac>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d002      	beq.n	8000d0e <RestartWakeupCounter+0x36>
      Value -= 1;
 8000d08:	88fb      	ldrh	r3, [r7, #6]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000d0e:	bf00      	nop
 8000d10:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <RestartWakeupCounter+0xb0>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	f003 0304 	and.w	r3, r3, #4
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d0f7      	beq.n	8000d10 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000d20:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <RestartWakeupCounter+0xb0>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <RestartWakeupCounter+0xb0>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000d34:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <RestartWakeupCounter+0xb4>)
 8000d38:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d3c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000d3e:	2003      	movs	r0, #3
 8000d40:	f001 ff5c 	bl	8002bfc <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <RestartWakeupCounter+0xb8>)
 8000d46:	695b      	ldr	r3, [r3, #20]
 8000d48:	0c1b      	lsrs	r3, r3, #16
 8000d4a:	041b      	lsls	r3, r3, #16
 8000d4c:	88fa      	ldrh	r2, [r7, #6]
 8000d4e:	4910      	ldr	r1, [pc, #64]	; (8000d90 <RestartWakeupCounter+0xb8>)
 8000d50:	4313      	orrs	r3, r2
 8000d52:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000d54:	f7ff fd8c 	bl	8000870 <ReadRtcSsrValue>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <RestartWakeupCounter+0xa8>)
 8000d5c:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <RestartWakeupCounter+0xb0>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	689a      	ldr	r2, [r3, #8]
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <RestartWakeupCounter+0xb0>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d70:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000d72:	f3af 8000 	nop.w
  return ;
 8000d76:	bf00      	nop
}
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000284 	.word	0x20000284
 8000d84:	200003a0 	.word	0x200003a0
 8000d88:	2000039c 	.word	0x2000039c
 8000d8c:	58000800 	.word	0x58000800
 8000d90:	40002800 	.word	0x40002800

08000d94 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000d9a:	4b47      	ldr	r3, [pc, #284]	; (8000eb8 <RescheduleTimerList+0x124>)
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000da6:	d108      	bne.n	8000dba <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000da8:	bf00      	nop
 8000daa:	4b44      	ldr	r3, [pc, #272]	; (8000ebc <RescheduleTimerList+0x128>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	68db      	ldr	r3, [r3, #12]
 8000db2:	f003 0304 	and.w	r3, r3, #4
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d1f7      	bne.n	8000daa <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000dba:	4b40      	ldr	r3, [pc, #256]	; (8000ebc <RescheduleTimerList+0x128>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	689a      	ldr	r2, [r3, #8]
 8000dc2:	4b3e      	ldr	r3, [pc, #248]	; (8000ebc <RescheduleTimerList+0x128>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000dcc:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000dce:	4b3c      	ldr	r3, [pc, #240]	; (8000ec0 <RescheduleTimerList+0x12c>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000dd4:	7bfa      	ldrb	r2, [r7, #15]
 8000dd6:	493b      	ldr	r1, [pc, #236]	; (8000ec4 <RescheduleTimerList+0x130>)
 8000dd8:	4613      	mov	r3, r2
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	4413      	add	r3, r2
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	440b      	add	r3, r1
 8000de2:	3308      	adds	r3, #8
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000de8:	f7ff ff36 	bl	8000c58 <ReturnTimeElapsed>
 8000dec:	4603      	mov	r3, r0
 8000dee:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000df0:	88fb      	ldrh	r3, [r7, #6]
 8000df2:	68ba      	ldr	r2, [r7, #8]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d205      	bcs.n	8000e04 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000dfc:	4b32      	ldr	r3, [pc, #200]	; (8000ec8 <RescheduleTimerList+0x134>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	701a      	strb	r2, [r3, #0]
 8000e02:	e04d      	b.n	8000ea0 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000e04:	88fb      	ldrh	r3, [r7, #6]
 8000e06:	4a31      	ldr	r2, [pc, #196]	; (8000ecc <RescheduleTimerList+0x138>)
 8000e08:	8812      	ldrh	r2, [r2, #0]
 8000e0a:	b292      	uxth	r2, r2
 8000e0c:	4413      	add	r3, r2
 8000e0e:	461a      	mov	r2, r3
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d906      	bls.n	8000e24 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000e16:	4b2d      	ldr	r3, [pc, #180]	; (8000ecc <RescheduleTimerList+0x138>)
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000e1c:	4b2a      	ldr	r3, [pc, #168]	; (8000ec8 <RescheduleTimerList+0x134>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	701a      	strb	r2, [r3, #0]
 8000e22:	e03d      	b.n	8000ea0 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	b29a      	uxth	r2, r3
 8000e28:	88fb      	ldrh	r3, [r7, #6]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000e2e:	4b26      	ldr	r3, [pc, #152]	; (8000ec8 <RescheduleTimerList+0x134>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000e34:	e034      	b.n	8000ea0 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000e36:	7bfa      	ldrb	r2, [r7, #15]
 8000e38:	4922      	ldr	r1, [pc, #136]	; (8000ec4 <RescheduleTimerList+0x130>)
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	4413      	add	r3, r2
 8000e40:	00db      	lsls	r3, r3, #3
 8000e42:	440b      	add	r3, r1
 8000e44:	3308      	adds	r3, #8
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	88fb      	ldrh	r3, [r7, #6]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d20a      	bcs.n	8000e64 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000e4e:	7bfa      	ldrb	r2, [r7, #15]
 8000e50:	491c      	ldr	r1, [pc, #112]	; (8000ec4 <RescheduleTimerList+0x130>)
 8000e52:	4613      	mov	r3, r2
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	4413      	add	r3, r2
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	440b      	add	r3, r1
 8000e5c:	3308      	adds	r3, #8
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	e013      	b.n	8000e8c <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000e64:	7bfa      	ldrb	r2, [r7, #15]
 8000e66:	4917      	ldr	r1, [pc, #92]	; (8000ec4 <RescheduleTimerList+0x130>)
 8000e68:	4613      	mov	r3, r2
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	4413      	add	r3, r2
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	440b      	add	r3, r1
 8000e72:	3308      	adds	r3, #8
 8000e74:	6819      	ldr	r1, [r3, #0]
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	7bfa      	ldrb	r2, [r7, #15]
 8000e7a:	1ac9      	subs	r1, r1, r3
 8000e7c:	4811      	ldr	r0, [pc, #68]	; (8000ec4 <RescheduleTimerList+0x130>)
 8000e7e:	4613      	mov	r3, r2
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	4413      	add	r3, r2
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	4403      	add	r3, r0
 8000e88:	3308      	adds	r3, #8
 8000e8a:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000e8c:	7bfa      	ldrb	r2, [r7, #15]
 8000e8e:	490d      	ldr	r1, [pc, #52]	; (8000ec4 <RescheduleTimerList+0x130>)
 8000e90:	4613      	mov	r3, r2
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	4413      	add	r3, r2
 8000e96:	00db      	lsls	r3, r3, #3
 8000e98:	440b      	add	r3, r1
 8000e9a:	3315      	adds	r3, #21
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	2b06      	cmp	r3, #6
 8000ea4:	d1c7      	bne.n	8000e36 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000ea6:	89bb      	ldrh	r3, [r7, #12]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff15 	bl	8000cd8 <RestartWakeupCounter>

  return ;
 8000eae:	bf00      	nop
}
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40002800 	.word	0x40002800
 8000ebc:	2000039c 	.word	0x2000039c
 8000ec0:	20000280 	.word	0x20000280
 8000ec4:	200001f0 	.word	0x200001f0
 8000ec8:	20000288 	.word	0x20000288
 8000ecc:	200003a4 	.word	0x200003a4

08000ed0 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8000eda:	617b      	str	r3, [r7, #20]
  return(result);
 8000edc:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee0:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000ee2:	4b5e      	ldr	r3, [pc, #376]	; (800105c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	22ca      	movs	r2, #202	; 0xca
 8000eea:	625a      	str	r2, [r3, #36]	; 0x24
 8000eec:	4b5b      	ldr	r3, [pc, #364]	; (800105c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2253      	movs	r2, #83	; 0x53
 8000ef4:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000ef6:	4b59      	ldr	r3, [pc, #356]	; (800105c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	689a      	ldr	r2, [r3, #8]
 8000efe:	4b57      	ldr	r3, [pc, #348]	; (800105c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f08:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000f0a:	4b55      	ldr	r3, [pc, #340]	; (8001060 <HW_TS_RTC_Wakeup_Handler+0x190>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000f12:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f16:	4953      	ldr	r1, [pc, #332]	; (8001064 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f18:	4613      	mov	r3, r2
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	4413      	add	r3, r2
 8000f1e:	00db      	lsls	r3, r3, #3
 8000f20:	440b      	add	r3, r1
 8000f22:	330c      	adds	r3, #12
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d170      	bne.n	800100e <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000f2c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f30:	494c      	ldr	r1, [pc, #304]	; (8001064 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f32:	4613      	mov	r3, r2
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	4413      	add	r3, r2
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	440b      	add	r3, r1
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000f40:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f44:	4947      	ldr	r1, [pc, #284]	; (8001064 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f46:	4613      	mov	r3, r2
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	4413      	add	r3, r2
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	440b      	add	r3, r1
 8000f50:	3310      	adds	r3, #16
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000f56:	4b44      	ldr	r3, [pc, #272]	; (8001068 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d04e      	beq.n	8000ffe <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000f60:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f64:	493f      	ldr	r1, [pc, #252]	; (8001064 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f66:	4613      	mov	r3, r2
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	4413      	add	r3, r2
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	440b      	add	r3, r1
 8000f70:	330d      	adds	r3, #13
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d125      	bne.n	8000fc6 <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000f7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f7e:	2101      	movs	r1, #1
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fde5 	bl	8000b50 <UnlinkTimer>
 8000f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f88:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000f90:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f94:	4933      	ldr	r1, [pc, #204]	; (8001064 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f96:	4613      	mov	r3, r2
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	4413      	add	r3, r2
 8000f9c:	00db      	lsls	r3, r3, #3
 8000f9e:	440b      	add	r3, r1
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000fa8:	4611      	mov	r1, r2
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 fa40 	bl	8001430 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000fb0:	4b2a      	ldr	r3, [pc, #168]	; (800105c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	22ca      	movs	r2, #202	; 0xca
 8000fb8:	625a      	str	r2, [r3, #36]	; 0x24
 8000fba:	4b28      	ldr	r3, [pc, #160]	; (800105c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2253      	movs	r2, #83	; 0x53
 8000fc2:	625a      	str	r2, [r3, #36]	; 0x24
 8000fc4:	e013      	b.n	8000fee <HW_TS_RTC_Wakeup_Handler+0x11e>
 8000fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000fd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 f9a1 	bl	800131c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000fda:	4b20      	ldr	r3, [pc, #128]	; (800105c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	22ca      	movs	r2, #202	; 0xca
 8000fe2:	625a      	str	r2, [r3, #36]	; 0x24
 8000fe4:	4b1d      	ldr	r3, [pc, #116]	; (800105c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2253      	movs	r2, #83	; 0x53
 8000fec:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000fee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ff2:	69fa      	ldr	r2, [r7, #28]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	69b8      	ldr	r0, [r7, #24]
 8000ff8:	f000 faa0 	bl	800153c <HW_TS_RTC_Int_AppNot>
 8000ffc:	e024      	b.n	8001048 <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 8000ffe:	f7ff fec9 	bl	8000d94 <RescheduleTimerList>
 8001002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	f383 8810 	msr	PRIMASK, r3
 800100c:	e01c      	b.n	8001048 <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800100e:	bf00      	nop
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	f003 0304 	and.w	r3, r3, #4
 800101c:	2b00      	cmp	r3, #0
 800101e:	d0f7      	beq.n	8001010 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001020:	4b0e      	ldr	r3, [pc, #56]	; (800105c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4b0c      	ldr	r3, [pc, #48]	; (800105c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001034:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001036:	4b0d      	ldr	r3, [pc, #52]	; (800106c <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001038:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001048:	4b04      	ldr	r3, [pc, #16]	; (800105c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	22ff      	movs	r2, #255	; 0xff
 8001050:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001052:	bf00      	nop
}
 8001054:	3728      	adds	r7, #40	; 0x28
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	2000039c 	.word	0x2000039c
 8001060:	20000280 	.word	0x20000280
 8001064:	200001f0 	.word	0x200001f0
 8001068:	20000288 	.word	0x20000288
 800106c:	58000800 	.word	0x58000800

08001070 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 800107c:	4a61      	ldr	r2, [pc, #388]	; (8001204 <HW_TS_Init+0x194>)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001082:	4b60      	ldr	r3, [pc, #384]	; (8001204 <HW_TS_Init+0x194>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	22ca      	movs	r2, #202	; 0xca
 800108a:	625a      	str	r2, [r3, #36]	; 0x24
 800108c:	4b5d      	ldr	r3, [pc, #372]	; (8001204 <HW_TS_Init+0x194>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2253      	movs	r2, #83	; 0x53
 8001094:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001096:	4b5c      	ldr	r3, [pc, #368]	; (8001208 <HW_TS_Init+0x198>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	4a5b      	ldr	r2, [pc, #364]	; (8001208 <HW_TS_Init+0x198>)
 800109c:	f043 0320 	orr.w	r3, r3, #32
 80010a0:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80010a2:	4b59      	ldr	r3, [pc, #356]	; (8001208 <HW_TS_Init+0x198>)
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	f003 0307 	and.w	r3, r3, #7
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	f1c3 0304 	rsb	r3, r3, #4
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	4b55      	ldr	r3, [pc, #340]	; (800120c <HW_TS_Init+0x19c>)
 80010b6:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80010b8:	4b53      	ldr	r3, [pc, #332]	; (8001208 <HW_TS_Init+0x198>)
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80010c0:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80010c4:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	fa92 f2a2 	rbit	r2, r2
 80010cc:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	fab2 f282 	clz	r2, r2
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	40d3      	lsrs	r3, r2
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	3301      	adds	r3, #1
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4b4c      	ldr	r3, [pc, #304]	; (8001210 <HW_TS_Init+0x1a0>)
 80010e0:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80010e2:	4b49      	ldr	r3, [pc, #292]	; (8001208 <HW_TS_Init+0x198>)
 80010e4:	691b      	ldr	r3, [r3, #16]
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	3301      	adds	r3, #1
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	4b48      	ldr	r3, [pc, #288]	; (8001214 <HW_TS_Init+0x1a4>)
 80010f4:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80010f6:	4b47      	ldr	r3, [pc, #284]	; (8001214 <HW_TS_Init+0x1a4>)
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	4a44      	ldr	r2, [pc, #272]	; (8001210 <HW_TS_Init+0x1a0>)
 80010fe:	7812      	ldrb	r2, [r2, #0]
 8001100:	fb02 f303 	mul.w	r3, r2, r3
 8001104:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001108:	4a40      	ldr	r2, [pc, #256]	; (800120c <HW_TS_Init+0x19c>)
 800110a:	7812      	ldrb	r2, [r2, #0]
 800110c:	40d3      	lsrs	r3, r2
 800110e:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001116:	4293      	cmp	r3, r2
 8001118:	d904      	bls.n	8001124 <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800111a:	4b3f      	ldr	r3, [pc, #252]	; (8001218 <HW_TS_Init+0x1a8>)
 800111c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001120:	801a      	strh	r2, [r3, #0]
 8001122:	e003      	b.n	800112c <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	b29a      	uxth	r2, r3
 8001128:	4b3b      	ldr	r3, [pc, #236]	; (8001218 <HW_TS_Init+0x1a8>)
 800112a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800112c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001130:	f7ff fb8c 	bl	800084c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001134:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001138:	f7ff fb74 	bl	8000824 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d143      	bne.n	80011ca <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001142:	4b36      	ldr	r3, [pc, #216]	; (800121c <HW_TS_Init+0x1ac>)
 8001144:	2201      	movs	r2, #1
 8001146:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001148:	4b35      	ldr	r3, [pc, #212]	; (8001220 <HW_TS_Init+0x1b0>)
 800114a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800114e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001150:	2300      	movs	r3, #0
 8001152:	75fb      	strb	r3, [r7, #23]
 8001154:	e00c      	b.n	8001170 <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001156:	7dfa      	ldrb	r2, [r7, #23]
 8001158:	4932      	ldr	r1, [pc, #200]	; (8001224 <HW_TS_Init+0x1b4>)
 800115a:	4613      	mov	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4413      	add	r3, r2
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	440b      	add	r3, r1
 8001164:	330c      	adds	r3, #12
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800116a:	7dfb      	ldrb	r3, [r7, #23]
 800116c:	3301      	adds	r3, #1
 800116e:	75fb      	strb	r3, [r7, #23]
 8001170:	7dfb      	ldrb	r3, [r7, #23]
 8001172:	2b05      	cmp	r3, #5
 8001174:	d9ef      	bls.n	8001156 <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001176:	4b2c      	ldr	r3, [pc, #176]	; (8001228 <HW_TS_Init+0x1b8>)
 8001178:	2206      	movs	r2, #6
 800117a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 800117c:	4b21      	ldr	r3, [pc, #132]	; (8001204 <HW_TS_Init+0x194>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <HW_TS_Init+0x194>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800118e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001190:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <HW_TS_Init+0x194>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <HW_TS_Init+0x194>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80011a4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80011a6:	4b21      	ldr	r3, [pc, #132]	; (800122c <HW_TS_Init+0x1bc>)
 80011a8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011ac:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80011ae:	2003      	movs	r0, #3
 80011b0:	f001 fd24 	bl	8002bfc <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <HW_TS_Init+0x194>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <HW_TS_Init+0x194>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	e00a      	b.n	80011e0 <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <HW_TS_Init+0x194>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d002      	beq.n	80011e0 <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80011da:	2003      	movs	r0, #3
 80011dc:	f001 fcf4 	bl	8002bc8 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <HW_TS_Init+0x194>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	22ff      	movs	r2, #255	; 0xff
 80011e8:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80011ea:	2200      	movs	r2, #0
 80011ec:	2103      	movs	r1, #3
 80011ee:	2003      	movs	r0, #3
 80011f0:	f001 fc84 	bl	8002afc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80011f4:	2003      	movs	r0, #3
 80011f6:	f001 fcab 	bl	8002b50 <HAL_NVIC_EnableIRQ>

  return;
 80011fa:	bf00      	nop
}
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	2000039c 	.word	0x2000039c
 8001208:	40002800 	.word	0x40002800
 800120c:	200003a0 	.word	0x200003a0
 8001210:	200003a1 	.word	0x200003a1
 8001214:	200003a2 	.word	0x200003a2
 8001218:	200003a4 	.word	0x200003a4
 800121c:	20000288 	.word	0x20000288
 8001220:	20000284 	.word	0x20000284
 8001224:	200001f0 	.word	0x200001f0
 8001228:	20000280 	.word	0x20000280
 800122c:	58000800 	.word	0x58000800

08001230 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001230:	b480      	push	{r7}
 8001232:	b08b      	sub	sp, #44	; 0x2c
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	4613      	mov	r3, r2
 800123e:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001246:	f3ef 8310 	mrs	r3, PRIMASK
 800124a:	61fb      	str	r3, [r7, #28]
  return(result);
 800124c:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800124e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001250:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001252:	e004      	b.n	800125e <HW_TS_Create+0x2e>
  {
    loop++;
 8001254:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001258:	3301      	adds	r3, #1
 800125a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800125e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001262:	2b05      	cmp	r3, #5
 8001264:	d80c      	bhi.n	8001280 <HW_TS_Create+0x50>
 8001266:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800126a:	492b      	ldr	r1, [pc, #172]	; (8001318 <HW_TS_Create+0xe8>)
 800126c:	4613      	mov	r3, r2
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	4413      	add	r3, r2
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	440b      	add	r3, r1
 8001276:	330c      	adds	r3, #12
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1e9      	bne.n	8001254 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001280:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001284:	2b06      	cmp	r3, #6
 8001286:	d037      	beq.n	80012f8 <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001288:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800128c:	4922      	ldr	r1, [pc, #136]	; (8001318 <HW_TS_Create+0xe8>)
 800128e:	4613      	mov	r3, r2
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	4413      	add	r3, r2
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	440b      	add	r3, r1
 8001298:	330c      	adds	r3, #12
 800129a:	2201      	movs	r2, #1
 800129c:	701a      	strb	r2, [r3, #0]
 800129e:	6a3b      	ldr	r3, [r7, #32]
 80012a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80012a8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80012ac:	491a      	ldr	r1, [pc, #104]	; (8001318 <HW_TS_Create+0xe8>)
 80012ae:	4613      	mov	r3, r2
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	4413      	add	r3, r2
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	440b      	add	r3, r1
 80012b8:	3310      	adds	r3, #16
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80012be:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80012c2:	4915      	ldr	r1, [pc, #84]	; (8001318 <HW_TS_Create+0xe8>)
 80012c4:	4613      	mov	r3, r2
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	4413      	add	r3, r2
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	440b      	add	r3, r1
 80012ce:	330d      	adds	r3, #13
 80012d0:	79fa      	ldrb	r2, [r7, #7]
 80012d2:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80012d4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80012d8:	490f      	ldr	r1, [pc, #60]	; (8001318 <HW_TS_Create+0xe8>)
 80012da:	4613      	mov	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	4413      	add	r3, r2
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	440b      	add	r3, r1
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80012ee:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80012f0:	2300      	movs	r3, #0
 80012f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012f6:	e007      	b.n	8001308 <HW_TS_Create+0xd8>
 80012f8:	6a3b      	ldr	r3, [r7, #32]
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8001302:	2301      	movs	r3, #1
 8001304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8001308:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800130c:	4618      	mov	r0, r3
 800130e:	372c      	adds	r7, #44	; 0x2c
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	200001f0 	.word	0x200001f0

0800131c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001326:	f3ef 8310 	mrs	r3, PRIMASK
 800132a:	60fb      	str	r3, [r7, #12]
  return(result);
 800132c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800132e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001330:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001332:	2003      	movs	r0, #3
 8001334:	f001 fc24 	bl	8002b80 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001338:	4b37      	ldr	r3, [pc, #220]	; (8001418 <HW_TS_Stop+0xfc>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	22ca      	movs	r2, #202	; 0xca
 8001340:	625a      	str	r2, [r3, #36]	; 0x24
 8001342:	4b35      	ldr	r3, [pc, #212]	; (8001418 <HW_TS_Stop+0xfc>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2253      	movs	r2, #83	; 0x53
 800134a:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800134c:	79fa      	ldrb	r2, [r7, #7]
 800134e:	4933      	ldr	r1, [pc, #204]	; (800141c <HW_TS_Stop+0x100>)
 8001350:	4613      	mov	r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4413      	add	r3, r2
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	440b      	add	r3, r1
 800135a:	330c      	adds	r3, #12
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	b2db      	uxtb	r3, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d148      	bne.n	80013f6 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	2100      	movs	r1, #0
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fbf1 	bl	8000b50 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800136e:	4b2c      	ldr	r3, [pc, #176]	; (8001420 <HW_TS_Stop+0x104>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001374:	7cfb      	ldrb	r3, [r7, #19]
 8001376:	2b06      	cmp	r3, #6
 8001378:	d135      	bne.n	80013e6 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800137a:	4b2a      	ldr	r3, [pc, #168]	; (8001424 <HW_TS_Stop+0x108>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001386:	d108      	bne.n	800139a <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001388:	bf00      	nop
 800138a:	4b23      	ldr	r3, [pc, #140]	; (8001418 <HW_TS_Stop+0xfc>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	f003 0304 	and.w	r3, r3, #4
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f7      	bne.n	800138a <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800139a:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <HW_TS_Stop+0xfc>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <HW_TS_Stop+0xfc>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013ac:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80013ae:	bf00      	nop
 80013b0:	4b19      	ldr	r3, [pc, #100]	; (8001418 <HW_TS_Stop+0xfc>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d0f7      	beq.n	80013b0 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80013c0:	4b15      	ldr	r3, [pc, #84]	; (8001418 <HW_TS_Stop+0xfc>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4b13      	ldr	r3, [pc, #76]	; (8001418 <HW_TS_Stop+0xfc>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80013d4:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80013d6:	4b14      	ldr	r3, [pc, #80]	; (8001428 <HW_TS_Stop+0x10c>)
 80013d8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013dc:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80013de:	2003      	movs	r0, #3
 80013e0:	f001 fc0c 	bl	8002bfc <HAL_NVIC_ClearPendingIRQ>
 80013e4:	e007      	b.n	80013f6 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <HW_TS_Stop+0x110>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	7cfa      	ldrb	r2, [r7, #19]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d001      	beq.n	80013f6 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 80013f2:	f7ff fccf 	bl	8000d94 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <HW_TS_Stop+0xfc>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	22ff      	movs	r2, #255	; 0xff
 80013fe:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001400:	2003      	movs	r0, #3
 8001402:	f001 fba5 	bl	8002b50 <HAL_NVIC_EnableIRQ>
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001410:	bf00      	nop
}
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	2000039c 	.word	0x2000039c
 800141c:	200001f0 	.word	0x200001f0
 8001420:	20000280 	.word	0x20000280
 8001424:	40002800 	.word	0x40002800
 8001428:	58000800 	.word	0x58000800
 800142c:	20000281 	.word	0x20000281

08001430 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	6039      	str	r1, [r7, #0]
 800143a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800143c:	79fa      	ldrb	r2, [r7, #7]
 800143e:	493b      	ldr	r1, [pc, #236]	; (800152c <HW_TS_Start+0xfc>)
 8001440:	4613      	mov	r3, r2
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	4413      	add	r3, r2
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	440b      	add	r3, r1
 800144a:	330c      	adds	r3, #12
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d103      	bne.n	800145c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff ff60 	bl	800131c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800145c:	f3ef 8310 	mrs	r3, PRIMASK
 8001460:	60fb      	str	r3, [r7, #12]
  return(result);
 8001462:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001464:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001466:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001468:	2003      	movs	r0, #3
 800146a:	f001 fb89 	bl	8002b80 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800146e:	4b30      	ldr	r3, [pc, #192]	; (8001530 <HW_TS_Start+0x100>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	22ca      	movs	r2, #202	; 0xca
 8001476:	625a      	str	r2, [r3, #36]	; 0x24
 8001478:	4b2d      	ldr	r3, [pc, #180]	; (8001530 <HW_TS_Start+0x100>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2253      	movs	r2, #83	; 0x53
 8001480:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001482:	79fa      	ldrb	r2, [r7, #7]
 8001484:	4929      	ldr	r1, [pc, #164]	; (800152c <HW_TS_Start+0xfc>)
 8001486:	4613      	mov	r3, r2
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	4413      	add	r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	440b      	add	r3, r1
 8001490:	330c      	adds	r3, #12
 8001492:	2202      	movs	r2, #2
 8001494:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001496:	79fa      	ldrb	r2, [r7, #7]
 8001498:	4924      	ldr	r1, [pc, #144]	; (800152c <HW_TS_Start+0xfc>)
 800149a:	4613      	mov	r3, r2
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	4413      	add	r3, r2
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	440b      	add	r3, r1
 80014a4:	3308      	adds	r3, #8
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80014aa:	79fa      	ldrb	r2, [r7, #7]
 80014ac:	491f      	ldr	r1, [pc, #124]	; (800152c <HW_TS_Start+0xfc>)
 80014ae:	4613      	mov	r3, r2
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	4413      	add	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	440b      	add	r3, r1
 80014b8:	3304      	adds	r3, #4
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fa9b 	bl	80009fc <linkTimer>
 80014c6:	4603      	mov	r3, r0
 80014c8:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80014ca:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <HW_TS_Start+0x104>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80014d0:	4b19      	ldr	r3, [pc, #100]	; (8001538 <HW_TS_Start+0x108>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	7c7a      	ldrb	r2, [r7, #17]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d002      	beq.n	80014e2 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 80014dc:	f7ff fc5a 	bl	8000d94 <RescheduleTimerList>
 80014e0:	e013      	b.n	800150a <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80014e2:	79fa      	ldrb	r2, [r7, #7]
 80014e4:	4911      	ldr	r1, [pc, #68]	; (800152c <HW_TS_Start+0xfc>)
 80014e6:	4613      	mov	r3, r2
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	4413      	add	r3, r2
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	440b      	add	r3, r1
 80014f0:	3308      	adds	r3, #8
 80014f2:	6819      	ldr	r1, [r3, #0]
 80014f4:	8a7b      	ldrh	r3, [r7, #18]
 80014f6:	79fa      	ldrb	r2, [r7, #7]
 80014f8:	1ac9      	subs	r1, r1, r3
 80014fa:	480c      	ldr	r0, [pc, #48]	; (800152c <HW_TS_Start+0xfc>)
 80014fc:	4613      	mov	r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4413      	add	r3, r2
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	4403      	add	r3, r0
 8001506:	3308      	adds	r3, #8
 8001508:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <HW_TS_Start+0x100>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	22ff      	movs	r2, #255	; 0xff
 8001512:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001514:	2003      	movs	r0, #3
 8001516:	f001 fb1b 	bl	8002b50 <HAL_NVIC_EnableIRQ>
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001524:	bf00      	nop
}
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	200001f0 	.word	0x200001f0
 8001530:	2000039c 	.word	0x2000039c
 8001534:	20000280 	.word	0x20000280
 8001538:	20000281 	.word	0x20000281

0800153c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	460b      	mov	r3, r1
 8001546:	607a      	str	r2, [r7, #4]
 8001548:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4798      	blx	r3

  return;
 800154e:	bf00      	nop
}
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <LL_RCC_LSE_SetDriveCapability>:
{
 8001556:	b480      	push	{r7}
 8001558:	b083      	sub	sp, #12
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800155e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001566:	f023 0218 	bic.w	r2, r3, #24
 800156a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4313      	orrs	r3, r2
 8001572:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001588:	f001 f8c4 	bl	8002714 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800158c:	f000 f828 	bl	80015e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001590:	f7ff f89e 	bl	80006d0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001594:	f001 f80a 	bl	80025ac <MX_USART1_UART_Init>
  MX_RF_Init();
 8001598:	f000 fb19 	bl	8001bce <MX_RF_Init>
  MX_RTC_Init();
 800159c:	f000 fb30 	bl	8001c00 <MX_RTC_Init>
  MX_USB_Device_Init();
 80015a0:	f00c fb56 	bl	800dc50 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  while(!VCPInitialized) {
 80015a4:	e007      	b.n	80015b6 <main+0x32>
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin); // led red pisca se USB off
 80015a6:	2102      	movs	r1, #2
 80015a8:	480b      	ldr	r0, [pc, #44]	; (80015d8 <main+0x54>)
 80015aa:	f001 fdad 	bl	8003108 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80015ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015b2:	f001 f933 	bl	800281c <HAL_Delay>
  while(!VCPInitialized) {
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <main+0x58>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0f3      	beq.n	80015a6 <main+0x22>
  }
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	2102      	movs	r1, #2
 80015c2:	4805      	ldr	r0, [pc, #20]	; (80015d8 <main+0x54>)
 80015c4:	f001 fd70 	bl	80030a8 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */  
  APPE_Init();
 80015c8:	f7fe ffc6 	bl	8000558 <APPE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80015cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015d0:	f000 fbe4 	bl	8001d9c <UTIL_SEQ_Run>
 80015d4:	e7fa      	b.n	80015cc <main+0x48>
 80015d6:	bf00      	nop
 80015d8:	48000400 	.word	0x48000400
 80015dc:	200004d0 	.word	0x200004d0

080015e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b0ae      	sub	sp, #184	; 0xb8
 80015e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80015ea:	2248      	movs	r2, #72	; 0x48
 80015ec:	2100      	movs	r1, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f00d f88d 	bl	800e70e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
 8001604:	615a      	str	r2, [r3, #20]
 8001606:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	2250      	movs	r2, #80	; 0x50
 800160c:	2100      	movs	r1, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f00d f87d 	bl	800e70e <memset>

  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001614:	2000      	movs	r0, #0
 8001616:	f7ff ff9e 	bl	8001556 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800161a:	4b31      	ldr	r3, [pc, #196]	; (80016e0 <SystemClock_Config+0x100>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001622:	4a2f      	ldr	r2, [pc, #188]	; (80016e0 <SystemClock_Config+0x100>)
 8001624:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	4b2d      	ldr	r3, [pc, #180]	; (80016e0 <SystemClock_Config+0x100>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001632:	603b      	str	r3, [r7, #0]
 8001634:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001636:	2347      	movs	r3, #71	; 0x47
 8001638:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800163a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800163e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001640:	2301      	movs	r3, #1
 8001642:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001644:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001648:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800164a:	2301      	movs	r3, #1
 800164c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001650:	2340      	movs	r3, #64	; 0x40
 8001652:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001656:	2300      	movs	r3, #0
 8001658:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800165c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001660:	4618      	mov	r0, r3
 8001662:	f003 f87b 	bl	800475c <HAL_RCC_OscConfig>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800166c:	f000 fa98 	bl	8001ba0 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001670:	236f      	movs	r3, #111	; 0x6f
 8001672:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001674:	2302      	movs	r3, #2
 8001676:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001678:	2300      	movs	r3, #0
 800167a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800167c:	2300      	movs	r3, #0
 800167e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001680:	2300      	movs	r3, #0
 8001682:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001684:	2300      	movs	r3, #0
 8001686:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001688:	2300      	movs	r3, #0
 800168a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800168c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001690:	2101      	movs	r1, #1
 8001692:	4618      	mov	r0, r3
 8001694:	f003 fd2c 	bl	80050f0 <HAL_RCC_ClockConfig>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800169e:	f000 fa7f 	bl	8001ba0 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80016a2:	f643 1301 	movw	r3, #14593	; 0x3901
 80016a6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80016ac:	2300      	movs	r3, #0
 80016ae:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80016b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016b4:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80016b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016ba:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80016bc:	2302      	movs	r3, #2
 80016be:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80016c0:	2310      	movs	r3, #16
 80016c2:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	4618      	mov	r0, r3
 80016c8:	f004 faa2 	bl	8005c10 <HAL_RCCEx_PeriphCLKConfig>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80016d2:	f000 fa65 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80016d6:	bf00      	nop
 80016d8:	37b8      	adds	r7, #184	; 0xb8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	58000400 	.word	0x58000400

080016e4 <transmit_CDC_messege>:

/* USER CODE BEGIN 4 */
void transmit_CDC_messege(uint8_t* Buff, uint16_t Len){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	f5ad 6dee 	sub.w	sp, sp, #1904	; 0x770
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	1d3b      	adds	r3, r7, #4
 80016ee:	6018      	str	r0, [r3, #0]
 80016f0:	460a      	mov	r2, r1
 80016f2:	1cbb      	adds	r3, r7, #2
 80016f4:	801a      	strh	r2, [r3, #0]

	uint8_t buffer_receive[PAYLOAD_LENGTH-3] = {0};
 80016f6:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 80016fa:	2278      	movs	r2, #120	; 0x78
 80016fc:	2100      	movs	r1, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	f00d f805 	bl	800e70e <memset>

	uint8_t result = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	f887 374f 	strb.w	r3, [r7, #1871]	; 0x74f
	char t[800];
	uint8_t t_i[800];
	char aux[12];
	uint16_t dest[60] = {0};
 800170a:	f107 030c 	add.w	r3, r7, #12
 800170e:	4618      	mov	r0, r3
 8001710:	2378      	movs	r3, #120	; 0x78
 8001712:	461a      	mov	r2, r3
 8001714:	2100      	movs	r1, #0
 8001716:	f00c fffa 	bl	800e70e <memset>
	unsigned size;

	memset(t,0,800);
 800171a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800171e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001722:	2100      	movs	r1, #0
 8001724:	4618      	mov	r0, r3
 8001726:	f00c fff2 	bl	800e70e <memset>
	memset(t_i,0,800);
 800172a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800172e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001732:	2100      	movs	r1, #0
 8001734:	4618      	mov	r0, r3
 8001736:	f00c ffea 	bl	800e70e <memset>
	memset(aux,0,10);
 800173a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800173e:	220a      	movs	r2, #10
 8001740:	2100      	movs	r1, #0
 8001742:	4618      	mov	r0, r3
 8001744:	f00c ffe3 	bl	800e70e <memset>

	for(int i=0;i<PAYLOAD_LENGTH-3;i++)
 8001748:	2300      	movs	r3, #0
 800174a:	f8c7 376c 	str.w	r3, [r7, #1900]	; 0x76c
 800174e:	e012      	b.n	8001776 <transmit_CDC_messege+0x92>
		buffer_receive[i] = Buff[i+3];
 8001750:	f8d7 376c 	ldr.w	r3, [r7, #1900]	; 0x76c
 8001754:	3303      	adds	r3, #3
 8001756:	1d3a      	adds	r2, r7, #4
 8001758:	6812      	ldr	r2, [r2, #0]
 800175a:	4413      	add	r3, r2
 800175c:	7819      	ldrb	r1, [r3, #0]
 800175e:	f507 62da 	add.w	r2, r7, #1744	; 0x6d0
 8001762:	f8d7 376c 	ldr.w	r3, [r7, #1900]	; 0x76c
 8001766:	4413      	add	r3, r2
 8001768:	460a      	mov	r2, r1
 800176a:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<PAYLOAD_LENGTH-3;i++)
 800176c:	f8d7 376c 	ldr.w	r3, [r7, #1900]	; 0x76c
 8001770:	3301      	adds	r3, #1
 8001772:	f8c7 376c 	str.w	r3, [r7, #1900]	; 0x76c
 8001776:	f8d7 376c 	ldr.w	r3, [r7, #1900]	; 0x76c
 800177a:	2b77      	cmp	r3, #119	; 0x77
 800177c:	dde8      	ble.n	8001750 <transmit_CDC_messege+0x6c>

	/*
	 * 	FSR - 10 samples
	 * */
	if((Buff[0]==BLE_PACK_ID)&&(Buff[1]==BLE_FSR_PACK)&&(Buff[2]==0x01)){
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b28      	cmp	r3, #40	; 0x28
 8001786:	f040 8090 	bne.w	80018aa <transmit_CDC_messege+0x1c6>
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	3301      	adds	r3, #1
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b01      	cmp	r3, #1
 8001794:	f040 8089 	bne.w	80018aa <transmit_CDC_messege+0x1c6>
 8001798:	1d3b      	adds	r3, r7, #4
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	3302      	adds	r3, #2
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	f040 8082 	bne.w	80018aa <transmit_CDC_messege+0x1c6>
		for(int i=0; i<10; i++){
 80017a6:	2300      	movs	r3, #0
 80017a8:	f8c7 3768 	str.w	r3, [r7, #1896]	; 0x768
 80017ac:	e021      	b.n	80017f2 <transmit_CDC_messege+0x10e>
			dest[i] = (uint16_t)(((uint16_t)buffer_receive[(2*i+1)] << 8) | buffer_receive[2*i]);  // Turn the MSB and LSB into a signed 16-bit value
 80017ae:	f8d7 3768 	ldr.w	r3, [r7, #1896]	; 0x768
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	3301      	adds	r3, #1
 80017b6:	f507 62ee 	add.w	r2, r7, #1904	; 0x770
 80017ba:	4413      	add	r3, r2
 80017bc:	f813 3ca0 	ldrb.w	r3, [r3, #-160]
 80017c0:	021b      	lsls	r3, r3, #8
 80017c2:	b21a      	sxth	r2, r3
 80017c4:	f8d7 3768 	ldr.w	r3, [r7, #1896]	; 0x768
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	f507 61ee 	add.w	r1, r7, #1904	; 0x770
 80017ce:	440b      	add	r3, r1
 80017d0:	f813 3ca0 	ldrb.w	r3, [r3, #-160]
 80017d4:	b21b      	sxth	r3, r3
 80017d6:	4313      	orrs	r3, r2
 80017d8:	b21b      	sxth	r3, r3
 80017da:	b299      	uxth	r1, r3
 80017dc:	f107 030c 	add.w	r3, r7, #12
 80017e0:	f8d7 2768 	ldr.w	r2, [r7, #1896]	; 0x768
 80017e4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(int i=0; i<10; i++){
 80017e8:	f8d7 3768 	ldr.w	r3, [r7, #1896]	; 0x768
 80017ec:	3301      	adds	r3, #1
 80017ee:	f8c7 3768 	str.w	r3, [r7, #1896]	; 0x768
 80017f2:	f8d7 3768 	ldr.w	r3, [r7, #1896]	; 0x768
 80017f6:	2b09      	cmp	r3, #9
 80017f8:	ddd9      	ble.n	80017ae <transmit_CDC_messege+0xca>
		}
		sprintf(aux,"28,%u,%u,",Buff[1],Buff[2]);
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	3301      	adds	r3, #1
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	3302      	adds	r3, #2
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8001810:	49d9      	ldr	r1, [pc, #868]	; (8001b78 <transmit_CDC_messege+0x494>)
 8001812:	f00c ff85 	bl	800e720 <siprintf>
		strcat(t,aux);
 8001816:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800181a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800181e:	4611      	mov	r1, r2
 8001820:	4618      	mov	r0, r3
 8001822:	f00c ff9d 	bl	800e760 <strcat>
		memset(aux,0,10);
 8001826:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800182a:	220a      	movs	r2, #10
 800182c:	2100      	movs	r1, #0
 800182e:	4618      	mov	r0, r3
 8001830:	f00c ff6d 	bl	800e70e <memset>
		for(int i=0;i<9;i++){
 8001834:	2300      	movs	r3, #0
 8001836:	f8c7 3764 	str.w	r3, [r7, #1892]	; 0x764
 800183a:	e020      	b.n	800187e <transmit_CDC_messege+0x19a>
			sprintf(aux,"%u,",dest[i]);
 800183c:	f107 030c 	add.w	r3, r7, #12
 8001840:	f8d7 2764 	ldr.w	r2, [r7, #1892]	; 0x764
 8001844:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001848:	461a      	mov	r2, r3
 800184a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800184e:	49cb      	ldr	r1, [pc, #812]	; (8001b7c <transmit_CDC_messege+0x498>)
 8001850:	4618      	mov	r0, r3
 8001852:	f00c ff65 	bl	800e720 <siprintf>
			strcat(t,aux);
 8001856:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800185a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800185e:	4611      	mov	r1, r2
 8001860:	4618      	mov	r0, r3
 8001862:	f00c ff7d 	bl	800e760 <strcat>
			memset(aux,0,10);
 8001866:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800186a:	220a      	movs	r2, #10
 800186c:	2100      	movs	r1, #0
 800186e:	4618      	mov	r0, r3
 8001870:	f00c ff4d 	bl	800e70e <memset>
		for(int i=0;i<9;i++){
 8001874:	f8d7 3764 	ldr.w	r3, [r7, #1892]	; 0x764
 8001878:	3301      	adds	r3, #1
 800187a:	f8c7 3764 	str.w	r3, [r7, #1892]	; 0x764
 800187e:	f8d7 3764 	ldr.w	r3, [r7, #1892]	; 0x764
 8001882:	2b08      	cmp	r3, #8
 8001884:	ddda      	ble.n	800183c <transmit_CDC_messege+0x158>
		}
		sprintf(aux,"%u\n",dest[9]);
 8001886:	f107 030c 	add.w	r3, r7, #12
 800188a:	8a5b      	ldrh	r3, [r3, #18]
 800188c:	461a      	mov	r2, r3
 800188e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001892:	49bb      	ldr	r1, [pc, #748]	; (8001b80 <transmit_CDC_messege+0x49c>)
 8001894:	4618      	mov	r0, r3
 8001896:	f00c ff43 	bl	800e720 <siprintf>
		strcat(t,aux);
 800189a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800189e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80018a2:	4611      	mov	r1, r2
 80018a4:	4618      	mov	r0, r3
 80018a6:	f00c ff5b 	bl	800e760 <strcat>
	}
	/*
	 * 	ACC - 60 samples - 15 samples of each acc
	 * */
	if((Buff[0]==BLE_PACK_ID)&&(Buff[1]==BLE_ACC_PACK)){
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b28      	cmp	r3, #40	; 0x28
 80018b2:	f040 808a 	bne.w	80019ca <transmit_CDC_messege+0x2e6>
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	3301      	adds	r3, #1
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b02      	cmp	r3, #2
 80018c0:	f040 8083 	bne.w	80019ca <transmit_CDC_messege+0x2e6>
		for(int i=0; i<60; i++){
 80018c4:	2300      	movs	r3, #0
 80018c6:	f8c7 3760 	str.w	r3, [r7, #1888]	; 0x760
 80018ca:	e021      	b.n	8001910 <transmit_CDC_messege+0x22c>
			dest[i] = (uint16_t)(((uint16_t)buffer_receive[(2*i+1)] << 8) | buffer_receive[2*i]);  // Turn the MSB and LSB into a signed 16-bit value
 80018cc:	f8d7 3760 	ldr.w	r3, [r7, #1888]	; 0x760
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	3301      	adds	r3, #1
 80018d4:	f507 62ee 	add.w	r2, r7, #1904	; 0x770
 80018d8:	4413      	add	r3, r2
 80018da:	f813 3ca0 	ldrb.w	r3, [r3, #-160]
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	b21a      	sxth	r2, r3
 80018e2:	f8d7 3760 	ldr.w	r3, [r7, #1888]	; 0x760
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	f507 61ee 	add.w	r1, r7, #1904	; 0x770
 80018ec:	440b      	add	r3, r1
 80018ee:	f813 3ca0 	ldrb.w	r3, [r3, #-160]
 80018f2:	b21b      	sxth	r3, r3
 80018f4:	4313      	orrs	r3, r2
 80018f6:	b21b      	sxth	r3, r3
 80018f8:	b299      	uxth	r1, r3
 80018fa:	f107 030c 	add.w	r3, r7, #12
 80018fe:	f8d7 2760 	ldr.w	r2, [r7, #1888]	; 0x760
 8001902:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(int i=0; i<60; i++){
 8001906:	f8d7 3760 	ldr.w	r3, [r7, #1888]	; 0x760
 800190a:	3301      	adds	r3, #1
 800190c:	f8c7 3760 	str.w	r3, [r7, #1888]	; 0x760
 8001910:	f8d7 3760 	ldr.w	r3, [r7, #1888]	; 0x760
 8001914:	2b3b      	cmp	r3, #59	; 0x3b
 8001916:	ddd9      	ble.n	80018cc <transmit_CDC_messege+0x1e8>
		}
		sprintf(aux,"28,%u,%u,",Buff[1],Buff[2]);
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	3301      	adds	r3, #1
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	461a      	mov	r2, r3
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	3302      	adds	r3, #2
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	f107 0084 	add.w	r0, r7, #132	; 0x84
 800192e:	4992      	ldr	r1, [pc, #584]	; (8001b78 <transmit_CDC_messege+0x494>)
 8001930:	f00c fef6 	bl	800e720 <siprintf>
		strcat(t,aux);
 8001934:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001938:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800193c:	4611      	mov	r1, r2
 800193e:	4618      	mov	r0, r3
 8001940:	f00c ff0e 	bl	800e760 <strcat>
		memset(aux,0,10);
 8001944:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001948:	220a      	movs	r2, #10
 800194a:	2100      	movs	r1, #0
 800194c:	4618      	mov	r0, r3
 800194e:	f00c fede 	bl	800e70e <memset>
		for(int i=0;i<59;i++){
 8001952:	2300      	movs	r3, #0
 8001954:	f8c7 375c 	str.w	r3, [r7, #1884]	; 0x75c
 8001958:	e020      	b.n	800199c <transmit_CDC_messege+0x2b8>
			sprintf(aux,"%u,",dest[i]);
 800195a:	f107 030c 	add.w	r3, r7, #12
 800195e:	f8d7 275c 	ldr.w	r2, [r7, #1884]	; 0x75c
 8001962:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001966:	461a      	mov	r2, r3
 8001968:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800196c:	4983      	ldr	r1, [pc, #524]	; (8001b7c <transmit_CDC_messege+0x498>)
 800196e:	4618      	mov	r0, r3
 8001970:	f00c fed6 	bl	800e720 <siprintf>
			strcat(t,aux);
 8001974:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001978:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800197c:	4611      	mov	r1, r2
 800197e:	4618      	mov	r0, r3
 8001980:	f00c feee 	bl	800e760 <strcat>
			memset(aux,0,10);
 8001984:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001988:	220a      	movs	r2, #10
 800198a:	2100      	movs	r1, #0
 800198c:	4618      	mov	r0, r3
 800198e:	f00c febe 	bl	800e70e <memset>
		for(int i=0;i<59;i++){
 8001992:	f8d7 375c 	ldr.w	r3, [r7, #1884]	; 0x75c
 8001996:	3301      	adds	r3, #1
 8001998:	f8c7 375c 	str.w	r3, [r7, #1884]	; 0x75c
 800199c:	f8d7 375c 	ldr.w	r3, [r7, #1884]	; 0x75c
 80019a0:	2b3a      	cmp	r3, #58	; 0x3a
 80019a2:	ddda      	ble.n	800195a <transmit_CDC_messege+0x276>
		}
		sprintf(aux,"%u\n",dest[59]);
 80019a4:	f107 030c 	add.w	r3, r7, #12
 80019a8:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 80019ac:	461a      	mov	r2, r3
 80019ae:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80019b2:	4973      	ldr	r1, [pc, #460]	; (8001b80 <transmit_CDC_messege+0x49c>)
 80019b4:	4618      	mov	r0, r3
 80019b6:	f00c feb3 	bl	800e720 <siprintf>
		strcat(t,aux);
 80019ba:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80019be:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80019c2:	4611      	mov	r1, r2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f00c fecb 	bl	800e760 <strcat>
	}
	/*
	 * 	PPG - 50 samples - 25 samples of each led
	 * */
	if((Buff[0]==BLE_PACK_ID)&&(Buff[1]==BLE_PPG_PACK)){
 80019ca:	1d3b      	adds	r3, r7, #4
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b28      	cmp	r3, #40	; 0x28
 80019d2:	f040 808a 	bne.w	8001aea <transmit_CDC_messege+0x406>
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	3301      	adds	r3, #1
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b03      	cmp	r3, #3
 80019e0:	f040 8083 	bne.w	8001aea <transmit_CDC_messege+0x406>
		for(int i=0; i<50; i++){
 80019e4:	2300      	movs	r3, #0
 80019e6:	f8c7 3758 	str.w	r3, [r7, #1880]	; 0x758
 80019ea:	e021      	b.n	8001a30 <transmit_CDC_messege+0x34c>
			dest[i] = (uint16_t)(((uint16_t)buffer_receive[(2*i+1)] << 8) | buffer_receive[2*i]);  // Turn the MSB and LSB into a signed 16-bit value
 80019ec:	f8d7 3758 	ldr.w	r3, [r7, #1880]	; 0x758
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	3301      	adds	r3, #1
 80019f4:	f507 62ee 	add.w	r2, r7, #1904	; 0x770
 80019f8:	4413      	add	r3, r2
 80019fa:	f813 3ca0 	ldrb.w	r3, [r3, #-160]
 80019fe:	021b      	lsls	r3, r3, #8
 8001a00:	b21a      	sxth	r2, r3
 8001a02:	f8d7 3758 	ldr.w	r3, [r7, #1880]	; 0x758
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	f507 61ee 	add.w	r1, r7, #1904	; 0x770
 8001a0c:	440b      	add	r3, r1
 8001a0e:	f813 3ca0 	ldrb.w	r3, [r3, #-160]
 8001a12:	b21b      	sxth	r3, r3
 8001a14:	4313      	orrs	r3, r2
 8001a16:	b21b      	sxth	r3, r3
 8001a18:	b299      	uxth	r1, r3
 8001a1a:	f107 030c 	add.w	r3, r7, #12
 8001a1e:	f8d7 2758 	ldr.w	r2, [r7, #1880]	; 0x758
 8001a22:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(int i=0; i<50; i++){
 8001a26:	f8d7 3758 	ldr.w	r3, [r7, #1880]	; 0x758
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	f8c7 3758 	str.w	r3, [r7, #1880]	; 0x758
 8001a30:	f8d7 3758 	ldr.w	r3, [r7, #1880]	; 0x758
 8001a34:	2b31      	cmp	r3, #49	; 0x31
 8001a36:	ddd9      	ble.n	80019ec <transmit_CDC_messege+0x308>
		}
		sprintf(aux,"28,%u,%u,",Buff[1],Buff[2]);
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	461a      	mov	r2, r3
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	3302      	adds	r3, #2
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8001a4e:	494a      	ldr	r1, [pc, #296]	; (8001b78 <transmit_CDC_messege+0x494>)
 8001a50:	f00c fe66 	bl	800e720 <siprintf>
		strcat(t,aux);
 8001a54:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001a58:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8001a5c:	4611      	mov	r1, r2
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f00c fe7e 	bl	800e760 <strcat>
		memset(aux,0,10);
 8001a64:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001a68:	220a      	movs	r2, #10
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f00c fe4e 	bl	800e70e <memset>
		for(int i=0;i<49;i++){
 8001a72:	2300      	movs	r3, #0
 8001a74:	f8c7 3754 	str.w	r3, [r7, #1876]	; 0x754
 8001a78:	e020      	b.n	8001abc <transmit_CDC_messege+0x3d8>
			sprintf(aux,"%u,",dest[i]);
 8001a7a:	f107 030c 	add.w	r3, r7, #12
 8001a7e:	f8d7 2754 	ldr.w	r2, [r7, #1876]	; 0x754
 8001a82:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001a86:	461a      	mov	r2, r3
 8001a88:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001a8c:	493b      	ldr	r1, [pc, #236]	; (8001b7c <transmit_CDC_messege+0x498>)
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f00c fe46 	bl	800e720 <siprintf>
			strcat(t,aux);
 8001a94:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001a98:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8001a9c:	4611      	mov	r1, r2
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f00c fe5e 	bl	800e760 <strcat>
			memset(aux,0,10);
 8001aa4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001aa8:	220a      	movs	r2, #10
 8001aaa:	2100      	movs	r1, #0
 8001aac:	4618      	mov	r0, r3
 8001aae:	f00c fe2e 	bl	800e70e <memset>
		for(int i=0;i<49;i++){
 8001ab2:	f8d7 3754 	ldr.w	r3, [r7, #1876]	; 0x754
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	f8c7 3754 	str.w	r3, [r7, #1876]	; 0x754
 8001abc:	f8d7 3754 	ldr.w	r3, [r7, #1876]	; 0x754
 8001ac0:	2b30      	cmp	r3, #48	; 0x30
 8001ac2:	ddda      	ble.n	8001a7a <transmit_CDC_messege+0x396>
		}
		sprintf(aux,"%u\n",dest[49]);
 8001ac4:	f107 030c 	add.w	r3, r7, #12
 8001ac8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8001acc:	461a      	mov	r2, r3
 8001ace:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001ad2:	492b      	ldr	r1, [pc, #172]	; (8001b80 <transmit_CDC_messege+0x49c>)
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f00c fe23 	bl	800e720 <siprintf>
		strcat(t,aux);
 8001ada:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001ade:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f00c fe3b 	bl	800e760 <strcat>
	}

	for(int i=0;i<strlen(t);i++){
 8001aea:	2300      	movs	r3, #0
 8001aec:	f8c7 3750 	str.w	r3, [r7, #1872]	; 0x750
 8001af0:	e011      	b.n	8001b16 <transmit_CDC_messege+0x432>
		t_i[i] = (uint8_t)t[i];
 8001af2:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 8001af6:	f8d7 3750 	ldr.w	r3, [r7, #1872]	; 0x750
 8001afa:	4413      	add	r3, r2
 8001afc:	7819      	ldrb	r1, [r3, #0]
 8001afe:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001b02:	f8d7 3750 	ldr.w	r3, [r7, #1872]	; 0x750
 8001b06:	4413      	add	r3, r2
 8001b08:	460a      	mov	r2, r1
 8001b0a:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<strlen(t);i++){
 8001b0c:	f8d7 3750 	ldr.w	r3, [r7, #1872]	; 0x750
 8001b10:	3301      	adds	r3, #1
 8001b12:	f8c7 3750 	str.w	r3, [r7, #1872]	; 0x750
 8001b16:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fb30 	bl	8000180 <strlen>
 8001b20:	4602      	mov	r2, r0
 8001b22:	f8d7 3750 	ldr.w	r3, [r7, #1872]	; 0x750
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d8e3      	bhi.n	8001af2 <transmit_CDC_messege+0x40e>
	}

	size = (unsigned)strlen(t_i);
 8001b2a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7fe fb26 	bl	8000180 <strlen>
 8001b34:	f8c7 0748 	str.w	r0, [r7, #1864]	; 0x748
	result = CDC_Transmit_FS(t_i, size);
 8001b38:	f8d7 3748 	ldr.w	r3, [r7, #1864]	; 0x748
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b42:	4611      	mov	r1, r2
 8001b44:	4618      	mov	r0, r3
 8001b46:	f00c f94d 	bl	800dde4 <CDC_Transmit_FS>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	f887 374f 	strb.w	r3, [r7, #1871]	; 0x74f


	if (result == 1)
 8001b50:	f897 374f 	ldrb.w	r3, [r7, #1871]	; 0x74f
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d105      	bne.n	8001b64 <transmit_CDC_messege+0x480>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 8001b58:	2201      	movs	r2, #1
 8001b5a:	2120      	movs	r1, #32
 8001b5c:	4809      	ldr	r0, [pc, #36]	; (8001b84 <transmit_CDC_messege+0x4a0>)
 8001b5e:	f001 faa3 	bl	80030a8 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);


}
 8001b62:	e004      	b.n	8001b6e <transmit_CDC_messege+0x48a>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8001b64:	2200      	movs	r2, #0
 8001b66:	2120      	movs	r1, #32
 8001b68:	4806      	ldr	r0, [pc, #24]	; (8001b84 <transmit_CDC_messege+0x4a0>)
 8001b6a:	f001 fa9d 	bl	80030a8 <HAL_GPIO_WritePin>
}
 8001b6e:	bf00      	nop
 8001b70:	f507 67ee 	add.w	r7, r7, #1904	; 0x770
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	0800ef50 	.word	0x0800ef50
 8001b7c:	0800ef5c 	.word	0x0800ef5c
 8001b80:	0800ef60 	.word	0x0800ef60
 8001b84:	48000400 	.word	0x48000400

08001b88 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == SW2_Pin){}
  if(GPIO_Pin == SW3_Pin){}
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
	...

08001ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	2102      	movs	r1, #2
 8001ba8:	4802      	ldr	r0, [pc, #8]	; (8001bb4 <Error_Handler+0x14>)
 8001baa:	f001 fa7d 	bl	80030a8 <HAL_GPIO_WritePin>
	while(1){
		__NOP();
 8001bae:	bf00      	nop
 8001bb0:	e7fd      	b.n	8001bae <Error_Handler+0xe>
 8001bb2:	bf00      	nop
 8001bb4:	48000400 	.word	0x48000400

08001bb8 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0

}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
	...

08001c00 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001c04:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <MX_RTC_Init+0x34>)
 8001c06:	4a0c      	ldr	r2, [pc, #48]	; (8001c38 <MX_RTC_Init+0x38>)
 8001c08:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <MX_RTC_Init+0x34>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001c10:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <MX_RTC_Init+0x34>)
 8001c12:	220f      	movs	r2, #15
 8001c14:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001c16:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <MX_RTC_Init+0x34>)
 8001c18:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001c1c:	60da      	str	r2, [r3, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c1e:	4805      	ldr	r0, [pc, #20]	; (8001c34 <MX_RTC_Init+0x34>)
 8001c20:	f004 fce2 	bl	80065e8 <HAL_RTC_Init>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_RTC_Init+0x2e>
  {
    Error_Handler();
 8001c2a:	f7ff ffb9 	bl	8001ba0 <Error_Handler>
  }

}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	200006fc 	.word	0x200006fc
 8001c38:	40002800 	.word	0x40002800

08001c3c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a04      	ldr	r2, [pc, #16]	; (8001c5c <HAL_RTC_MspInit+0x20>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d101      	bne.n	8001c52 <HAL_RTC_MspInit+0x16>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c4e:	f7ff ffc5 	bl	8001bdc <LL_RCC_EnableRTC>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40002800 	.word	0x40002800

08001c60 <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8001c64:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <UTIL_LPM_Init+0x1c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8001c6a:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <UTIL_LPM_Init+0x20>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	200003a8 	.word	0x200003a8
 8001c80:	200003ac 	.word	0x200003ac

08001c84 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8001c84:	b480      	push	{r7}
 8001c86:	b087      	sub	sp, #28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c90:	f3ef 8310 	mrs	r3, PRIMASK
 8001c94:	613b      	str	r3, [r7, #16]
  return(result);
 8001c96:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8001c98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c9a:	b672      	cpsid	i
  
  switch(state)
 8001c9c:	78fb      	ldrb	r3, [r7, #3]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d009      	beq.n	8001cb6 <UTIL_LPM_SetOffMode+0x32>
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d000      	beq.n	8001ca8 <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 8001ca6:	e00e      	b.n	8001cc6 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <UTIL_LPM_SetOffMode+0x58>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	4a0a      	ldr	r2, [pc, #40]	; (8001cdc <UTIL_LPM_SetOffMode+0x58>)
 8001cb2:	6013      	str	r3, [r2, #0]
      break;
 8001cb4:	e007      	b.n	8001cc6 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	43da      	mvns	r2, r3
 8001cba:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <UTIL_LPM_SetOffMode+0x58>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	4a06      	ldr	r2, [pc, #24]	; (8001cdc <UTIL_LPM_SetOffMode+0x58>)
 8001cc2:	6013      	str	r3, [r2, #0]
      break;
 8001cc4:	bf00      	nop
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8001cd0:	bf00      	nop
 8001cd2:	371c      	adds	r7, #28
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	200003ac 	.word	0x200003ac

08001ce0 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ce6:	f3ef 8310 	mrs	r3, PRIMASK
 8001cea:	60bb      	str	r3, [r7, #8]
  return(result);
 8001cec:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8001cee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf0:	b672      	cpsid	i

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8001cf2:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <UTIL_LPM_EnterLowPower+0x5c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d006      	beq.n	8001d08 <UTIL_LPM_EnterLowPower+0x28>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8001cfa:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <UTIL_LPM_EnterLowPower+0x60>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8001d00:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <UTIL_LPM_EnterLowPower+0x60>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	4798      	blx	r3
 8001d06:	e010      	b.n	8001d2a <UTIL_LPM_EnterLowPower+0x4a>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8001d08:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <UTIL_LPM_EnterLowPower+0x64>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d006      	beq.n	8001d1e <UTIL_LPM_EnterLowPower+0x3e>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8001d10:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <UTIL_LPM_EnterLowPower+0x60>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8001d16:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <UTIL_LPM_EnterLowPower+0x60>)
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	4798      	blx	r3
 8001d1c:	e005      	b.n	8001d2a <UTIL_LPM_EnterLowPower+0x4a>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8001d1e:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <UTIL_LPM_EnterLowPower+0x60>)
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8001d24:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <UTIL_LPM_EnterLowPower+0x60>)
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	4798      	blx	r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8001d34:	bf00      	nop
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	200003a8 	.word	0x200003a8
 8001d40:	0800f1f4 	.word	0x0800f1f4
 8001d44:	200003ac 	.word	0x200003ac

08001d48 <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode( void )
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterOffMode */

/* USER CODE END PWR_EnterOffMode */
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode( void )
{
 8001d56:	b480      	push	{r7}
 8001d58:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitOffMode */

/* USER CODE END PWR_ExitOffMode */
}
 8001d5a:	bf00      	nop
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode( void )
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterStopMode */

/* USER CODE END PWR_EnterStopMode */
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode( void )
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitStopMode */

/* USER CODE END PWR_ExitStopMode */
}
 8001d76:	bf00      	nop
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode( void )
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode */

/* USER CODE END PWR_EnterSleepMode */
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode( void )
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode */

/* USER CODE END PWR_ExitSleepMode */
}
 8001d92:	bf00      	nop
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t mask_bm )
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08c      	sub	sp, #48	; 0x30
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8001da4:	4b63      	ldr	r3, [pc, #396]	; (8001f34 <UTIL_SEQ_Run+0x198>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= mask_bm;
 8001daa:	4b62      	ldr	r3, [pc, #392]	; (8001f34 <UTIL_SEQ_Run+0x198>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4013      	ands	r3, r2
 8001db2:	4a60      	ldr	r2, [pc, #384]	; (8001f34 <UTIL_SEQ_Run+0x198>)
 8001db4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 8001db6:	e082      	b.n	8001ebe <UTIL_SEQ_Run+0x122>
  {
    counter = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 8001dbc:	e002      	b.n	8001dc4 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 8001dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 8001dc4:	4a5c      	ldr	r2, [pc, #368]	; (8001f38 <UTIL_SEQ_Run+0x19c>)
 8001dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001dcc:	4b5b      	ldr	r3, [pc, #364]	; (8001f3c <UTIL_SEQ_Run+0x1a0>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	401a      	ands	r2, r3
 8001dd2:	4b58      	ldr	r3, [pc, #352]	; (8001f34 <UTIL_SEQ_Run+0x198>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0f0      	beq.n	8001dbe <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 8001ddc:	4a56      	ldr	r2, [pc, #344]	; (8001f38 <UTIL_SEQ_Run+0x19c>)
 8001dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001de4:	4b55      	ldr	r3, [pc, #340]	; (8001f3c <UTIL_SEQ_Run+0x1a0>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	401a      	ands	r2, r3
 8001dea:	4b52      	ldr	r3, [pc, #328]	; (8001f34 <UTIL_SEQ_Run+0x198>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4013      	ands	r3, r2
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if (!(TaskPrio[counter].round_robin & current_task_set))
 8001df2:	4a51      	ldr	r2, [pc, #324]	; (8001f38 <UTIL_SEQ_Run+0x19c>)
 8001df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	4413      	add	r3, r2
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	4013      	ands	r3, r2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d106      	bne.n	8001e12 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8001e04:	4a4c      	ldr	r2, [pc, #304]	; (8001f38 <UTIL_SEQ_Run+0x19c>)
 8001e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e10:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = bit_position(current_task_set & TaskPrio[counter].round_robin);
 8001e12:	4a49      	ldr	r2, [pc, #292]	; (8001f38 <UTIL_SEQ_Run+0x19c>)
 8001e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	4413      	add	r3, r2
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	4013      	ands	r3, r2
 8001e20:	4618      	mov	r0, r3
 8001e22:	f000 f97d 	bl	8002120 <bit_position>
 8001e26:	4602      	mov	r2, r0
 8001e28:	4b45      	ldr	r3, [pc, #276]	; (8001f40 <UTIL_SEQ_Run+0x1a4>)
 8001e2a:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1 << (CurrentTaskIdx));
 8001e2c:	4a42      	ldr	r2, [pc, #264]	; (8001f38 <UTIL_SEQ_Run+0x19c>)
 8001e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	4413      	add	r3, r2
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	4a42      	ldr	r2, [pc, #264]	; (8001f40 <UTIL_SEQ_Run+0x1a4>)
 8001e38:	6812      	ldr	r2, [r2, #0]
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e40:	43d2      	mvns	r2, r2
 8001e42:	401a      	ands	r2, r3
 8001e44:	493c      	ldr	r1, [pc, #240]	; (8001f38 <UTIL_SEQ_Run+0x19c>)
 8001e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	440b      	add	r3, r1
 8001e4c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e4e:	f3ef 8310 	mrs	r3, PRIMASK
 8001e52:	61bb      	str	r3, [r7, #24]
  return(result);
 8001e54:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8001e56:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e58:	b672      	cpsid	i
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1 << (CurrentTaskIdx));
 8001e5a:	4b39      	ldr	r3, [pc, #228]	; (8001f40 <UTIL_SEQ_Run+0x1a4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	461a      	mov	r2, r3
 8001e68:	4b36      	ldr	r3, [pc, #216]	; (8001f44 <UTIL_SEQ_Run+0x1a8>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	4a35      	ldr	r2, [pc, #212]	; (8001f44 <UTIL_SEQ_Run+0x1a8>)
 8001e70:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter; counter--)
 8001e72:	2302      	movs	r3, #2
 8001e74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e76:	e014      	b.n	8001ea2 <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1].priority &= ~(1 << (CurrentTaskIdx));
 8001e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	4a2e      	ldr	r2, [pc, #184]	; (8001f38 <UTIL_SEQ_Run+0x19c>)
 8001e7e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001e82:	4b2f      	ldr	r3, [pc, #188]	; (8001f40 <UTIL_SEQ_Run+0x1a4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2101      	movs	r1, #1
 8001e88:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	4619      	mov	r1, r3
 8001e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e92:	3b01      	subs	r3, #1
 8001e94:	400a      	ands	r2, r1
 8001e96:	4928      	ldr	r1, [pc, #160]	; (8001f38 <UTIL_SEQ_Run+0x19c>)
 8001e98:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter; counter--)
 8001e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1e7      	bne.n	8001e78 <UTIL_SEQ_Run+0xdc>
 8001ea8:	6a3b      	ldr	r3, [r7, #32]
 8001eaa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	f383 8810 	msr	PRIMASK, r3
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8001eb2:	4b23      	ldr	r3, [pc, #140]	; (8001f40 <UTIL_SEQ_Run+0x1a4>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a24      	ldr	r2, [pc, #144]	; (8001f48 <UTIL_SEQ_Run+0x1ac>)
 8001eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ebc:	4798      	blx	r3
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 8001ebe:	4b21      	ldr	r3, [pc, #132]	; (8001f44 <UTIL_SEQ_Run+0x1a8>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	4b1e      	ldr	r3, [pc, #120]	; (8001f3c <UTIL_SEQ_Run+0x1a0>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	4b1a      	ldr	r3, [pc, #104]	; (8001f34 <UTIL_SEQ_Run+0x198>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d007      	beq.n	8001ee2 <UTIL_SEQ_Run+0x146>
 8001ed2:	4b1e      	ldr	r3, [pc, #120]	; (8001f4c <UTIL_SEQ_Run+0x1b0>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	4b1e      	ldr	r3, [pc, #120]	; (8001f50 <UTIL_SEQ_Run+0x1b4>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f43f af6b 	beq.w	8001db8 <UTIL_SEQ_Run+0x1c>
  }

  UTIL_SEQ_PreIdle( );
 8001ee2:	f000 f90f 	bl	8002104 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ee6:	f3ef 8310 	mrs	r3, PRIMASK
 8001eea:	613b      	str	r3, [r7, #16]
  return(result);
 8001eec:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8001eee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ef0:	b672      	cpsid	i
  if (!((TaskSet & TaskMask & SuperMask) || (EvtSet & EvtWaited)))
 8001ef2:	4b14      	ldr	r3, [pc, #80]	; (8001f44 <UTIL_SEQ_Run+0x1a8>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <UTIL_SEQ_Run+0x1a0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	401a      	ands	r2, r3
 8001efc:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <UTIL_SEQ_Run+0x198>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4013      	ands	r3, r2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d108      	bne.n	8001f18 <UTIL_SEQ_Run+0x17c>
 8001f06:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <UTIL_SEQ_Run+0x1b0>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <UTIL_SEQ_Run+0x1b4>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <UTIL_SEQ_Run+0x17c>
  {
    UTIL_SEQ_Idle( );
 8001f14:	f7fe fb8d 	bl	8000632 <UTIL_SEQ_Idle>
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f383 8810 	msr	PRIMASK, r3
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  
  UTIL_SEQ_PostIdle( );
 8001f22:	f000 f8f6 	bl	8002112 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8001f26:	4a03      	ldr	r2, [pc, #12]	; (8001f34 <UTIL_SEQ_Run+0x198>)
 8001f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f2a:	6013      	str	r3, [r2, #0]

  return;
 8001f2c:	bf00      	nop
}
 8001f2e:	3730      	adds	r7, #48	; 0x30
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20000008 	.word	0x20000008
 8001f38:	20000440 	.word	0x20000440
 8001f3c:	20000004 	.word	0x20000004
 8001f40:	200003bc 	.word	0x200003bc
 8001f44:	200003b0 	.word	0x200003b0
 8001f48:	200003c0 	.word	0x200003c0
 8001f4c:	200003b4 	.word	0x200003b4
 8001f50:	200003b8 	.word	0x200003b8

08001f54 <UTIL_SEQ_RegTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_RegTask( UTIL_SEQ_bm_t task_id_bm , uint32_t flags, void (*task)( void ) )
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f60:	f3ef 8310 	mrs	r3, PRIMASK
 8001f64:	617b      	str	r3, [r7, #20]
  return(result);
 8001f66:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8001f68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f6a:	b672      	cpsid	i

  TaskCb[bit_position(task_id_bm)] = task;
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f000 f8d7 	bl	8002120 <bit_position>
 8001f72:	4601      	mov	r1, r0
 8001f74:	4a06      	ldr	r2, [pc, #24]	; (8001f90 <UTIL_SEQ_RegTask+0x3c>)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8001f86:	bf00      	nop
}
 8001f88:	3720      	adds	r7, #32
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	200003c0 	.word	0x200003c0

08001f94 <UTIL_SEQ_SetTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t task_id_bm , uint32_t task_prio )
{
 8001f94:	b480      	push	{r7}
 8001f96:	b087      	sub	sp, #28
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f9e:	f3ef 8310 	mrs	r3, PRIMASK
 8001fa2:	60fb      	str	r3, [r7, #12]
  return(result);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8001fa6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001fa8:	b672      	cpsid	i

  TaskSet |= task_id_bm;
 8001faa:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <UTIL_SEQ_SetTask+0x4c>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	4a0b      	ldr	r2, [pc, #44]	; (8001fe0 <UTIL_SEQ_SetTask+0x4c>)
 8001fb4:	6013      	str	r3, [r2, #0]
  TaskPrio[task_prio].priority |= task_id_bm;
 8001fb6:	4a0b      	ldr	r2, [pc, #44]	; (8001fe4 <UTIL_SEQ_SetTask+0x50>)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	431a      	orrs	r2, r3
 8001fc2:	4908      	ldr	r1, [pc, #32]	; (8001fe4 <UTIL_SEQ_SetTask+0x50>)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8001fd4:	bf00      	nop
}
 8001fd6:	371c      	adds	r7, #28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	200003b0 	.word	0x200003b0
 8001fe4:	20000440 	.word	0x20000440

08001fe8 <UTIL_SEQ_PauseTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t task_id_bm )
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b087      	sub	sp, #28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ff0:	f3ef 8310 	mrs	r3, PRIMASK
 8001ff4:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8001ff8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ffa:	b672      	cpsid	i

  TaskMask &= (~task_id_bm);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	43da      	mvns	r2, r3
 8002000:	4b07      	ldr	r3, [pc, #28]	; (8002020 <UTIL_SEQ_PauseTask+0x38>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4013      	ands	r3, r2
 8002006:	4a06      	ldr	r2, [pc, #24]	; (8002020 <UTIL_SEQ_PauseTask+0x38>)
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8002014:	bf00      	nop
}
 8002016:	371c      	adds	r7, #28
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	20000004 	.word	0x20000004

08002024 <UTIL_SEQ_ResumeTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t task_id_bm )
{
 8002024:	b480      	push	{r7}
 8002026:	b087      	sub	sp, #28
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800202c:	f3ef 8310 	mrs	r3, PRIMASK
 8002030:	60fb      	str	r3, [r7, #12]
  return(result);
 8002032:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8002034:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002036:	b672      	cpsid	i

  TaskMask |= task_id_bm;
 8002038:	4b08      	ldr	r3, [pc, #32]	; (800205c <UTIL_SEQ_ResumeTask+0x38>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4313      	orrs	r3, r2
 8002040:	4a06      	ldr	r2, [pc, #24]	; (800205c <UTIL_SEQ_ResumeTask+0x38>)
 8002042:	6013      	str	r3, [r2, #0]
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800204e:	bf00      	nop
}
 8002050:	371c      	adds	r7, #28
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	20000004 	.word	0x20000004

08002060 <UTIL_SEQ_SetEvt>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t evt_id_bm )
{
 8002060:	b480      	push	{r7}
 8002062:	b087      	sub	sp, #28
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002068:	f3ef 8310 	mrs	r3, PRIMASK
 800206c:	60fb      	str	r3, [r7, #12]
  return(result);
 800206e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8002070:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002072:	b672      	cpsid	i

  EvtSet |= evt_id_bm;
 8002074:	4b08      	ldr	r3, [pc, #32]	; (8002098 <UTIL_SEQ_SetEvt+0x38>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4313      	orrs	r3, r2
 800207c:	4a06      	ldr	r2, [pc, #24]	; (8002098 <UTIL_SEQ_SetEvt+0x38>)
 800207e:	6013      	str	r3, [r2, #0]
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800208a:	bf00      	nop
}
 800208c:	371c      	adds	r7, #28
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	200003b4 	.word	0x200003b4

0800209c <UTIL_SEQ_WaitEvt>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_WaitEvt( UTIL_SEQ_bm_t evt_id_bm )
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_id_bm;

  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_id_bm = (1 << CurrentTaskIdx);
 80020a4:	4b14      	ldr	r3, [pc, #80]	; (80020f8 <UTIL_SEQ_WaitEvt+0x5c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2201      	movs	r2, #1
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	60fb      	str	r3, [r7, #12]

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80020b0:	4b12      	ldr	r3, [pc, #72]	; (80020fc <UTIL_SEQ_WaitEvt+0x60>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	60bb      	str	r3, [r7, #8]
  EvtWaited = evt_id_bm;
 80020b6:	4a11      	ldr	r2, [pc, #68]	; (80020fc <UTIL_SEQ_WaitEvt+0x60>)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again fro the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while((EvtSet & EvtWaited) == 0)
 80020bc:	e005      	b.n	80020ca <UTIL_SEQ_WaitEvt+0x2e>
  {
    UTIL_SEQ_EvtIdle(current_task_id_bm, EvtWaited);
 80020be:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <UTIL_SEQ_WaitEvt+0x60>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4619      	mov	r1, r3
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f7fe faba 	bl	800063e <UTIL_SEQ_EvtIdle>
  while((EvtSet & EvtWaited) == 0)
 80020ca:	4b0d      	ldr	r3, [pc, #52]	; (8002100 <UTIL_SEQ_WaitEvt+0x64>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <UTIL_SEQ_WaitEvt+0x60>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4013      	ands	r3, r2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0f2      	beq.n	80020be <UTIL_SEQ_WaitEvt+0x22>
  }
  EvtSet &= (~EvtWaited);
 80020d8:	4b08      	ldr	r3, [pc, #32]	; (80020fc <UTIL_SEQ_WaitEvt+0x60>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	43da      	mvns	r2, r3
 80020de:	4b08      	ldr	r3, [pc, #32]	; (8002100 <UTIL_SEQ_WaitEvt+0x64>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4013      	ands	r3, r2
 80020e4:	4a06      	ldr	r2, [pc, #24]	; (8002100 <UTIL_SEQ_WaitEvt+0x64>)
 80020e6:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 80020e8:	4a04      	ldr	r2, [pc, #16]	; (80020fc <UTIL_SEQ_WaitEvt+0x60>)
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	6013      	str	r3, [r2, #0]

  return;
 80020ee:	bf00      	nop
}
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	200003bc 	.word	0x200003bc
 80020fc:	200003b8 	.word	0x200003b8
 8002100:	200003b4 	.word	0x200003b4

08002104 <UTIL_SEQ_PreIdle>:
   */
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8002108:	bf00      	nop
}
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8002112:	b480      	push	{r7}
 8002114:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8002116:	bf00      	nop
}
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <bit_position>:

#if( __CORTEX_M == 0)
static const uint8_t clz_table_4bit[16] = { 4, 3, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 };	
static uint32_t bit_position(uint32_t value)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]

  uint32_t n = 0;
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]

  if ((value & 0xFFFF0000) == 0)  { n  = 16; value <<= 16;  }
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	0c1b      	lsrs	r3, r3, #16
 8002130:	041b      	lsls	r3, r3, #16
 8002132:	2b00      	cmp	r3, #0
 8002134:	d104      	bne.n	8002140 <bit_position+0x20>
 8002136:	2310      	movs	r3, #16
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	041b      	lsls	r3, r3, #16
 800213e:	607b      	str	r3, [r7, #4]
  if ((value & 0xFF000000) == 0)  { n +=  8; value <<=  8;  }
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d105      	bne.n	8002156 <bit_position+0x36>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	3308      	adds	r3, #8
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	021b      	lsls	r3, r3, #8
 8002154:	607b      	str	r3, [r7, #4]
  if ((value & 0xF0000000) == 0)  { n +=  4; value <<=  4;  }
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d105      	bne.n	800216c <bit_position+0x4c>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	3304      	adds	r3, #4
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	011b      	lsls	r3, r3, #4
 800216a:	607b      	str	r3, [r7, #4]

  n += (uint32_t)clz_table_4bit[value >> (32-4)];
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	0f1b      	lsrs	r3, r3, #28
 8002170:	4a07      	ldr	r2, [pc, #28]	; (8002190 <bit_position+0x70>)
 8002172:	5cd3      	ldrb	r3, [r2, r3]
 8002174:	461a      	mov	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	4413      	add	r3, r2
 800217a:	60fb      	str	r3, [r7, #12]

  return (31-n);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f1c3 031f 	rsb	r3, r3, #31
}
 8002182:	4618      	mov	r0, r3
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	0800f20c 	.word	0x0800f20c

08002194 <LL_RCC_HSE_SetCapacitorTuning>:
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 800219c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a0:	4a0a      	ldr	r2, [pc, #40]	; (80021cc <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80021a2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80021a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80021ae:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	021b      	lsls	r3, r3, #8
 80021b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021ba:	4313      	orrs	r3, r2
 80021bc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	cafecafe 	.word	0xcafecafe

080021d0 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80021d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80021e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4013      	ands	r3, r2
 80021f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021f4:	68fb      	ldr	r3, [r7, #12]
}
 80021f6:	bf00      	nop
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0

	OTP_ID0_t * p_otp;
	/**
	* Read HSE_Tuning from OTP
	*/
	p_otp = (OTP_ID0_t *) OTP_Read(0);
 8002208:	2000      	movs	r0, #0
 800220a:	f00a fac9 	bl	800c7a0 <OTP_Read>
 800220e:	6078      	str	r0, [r7, #4]
	if (p_otp)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d004      	beq.n	8002220 <HAL_MspInit+0x1e>
	{
		LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	799b      	ldrb	r3, [r3, #6]
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff ffba 	bl	8002194 <LL_RCC_HSE_SetCapacitorTuning>
	}
  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002220:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002224:	f7ff ffd4 	bl	80021d0 <LL_AHB3_GRP1_EnableClock>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002228:	bf00      	nop
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
	...

08002240 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 8002244:	2102      	movs	r1, #2
 8002246:	4802      	ldr	r0, [pc, #8]	; (8002250 <HardFault_Handler+0x10>)
 8002248:	f000 ff5e 	bl	8003108 <HAL_GPIO_TogglePin>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800224c:	e7fe      	b.n	800224c <HardFault_Handler+0xc>
 800224e:	bf00      	nop
 8002250:	48000400 	.word	0x48000400

08002254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002258:	e7fe      	b.n	8002258 <MemManage_Handler+0x4>

0800225a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800225a:	b480      	push	{r7}
 800225c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800225e:	e7fe      	b.n	800225e <BusFault_Handler+0x4>

08002260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002264:	e7fe      	b.n	8002264 <UsageFault_Handler+0x4>

08002266 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002266:	b480      	push	{r7}
 8002268:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800226a:	bf00      	nop
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002282:	b480      	push	{r7}
 8002284:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002294:	f000 fa98 	bl	80027c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002298:	bf00      	nop
 800229a:	bd80      	pop	{r7, pc}

0800229c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80022a0:	2001      	movs	r0, #1
 80022a2:	f000 ff57 	bl	8003154 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}

080022aa <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80022ae:	2002      	movs	r0, #2
 80022b0:	f000 ff50 	bl	8003154 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80022b4:	bf00      	nop
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80022bc:	2010      	movs	r0, #16
 80022be:	f000 ff49 	bl	8003154 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80022cc:	4802      	ldr	r0, [pc, #8]	; (80022d8 <USB_LP_IRQHandler+0x10>)
 80022ce:	f001 f843 	bl	8003358 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000cac 	.word	0x20000cac

080022dc <RTC_WKUP_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
* @brief This function handles RTC wake-up interrupt through EXTI line 19.
*/
void RTC_WKUP_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
	HW_TS_RTC_Wakeup_Handler();
 80022e0:	f7fe fdf6 	bl	8000ed0 <HW_TS_RTC_Wakeup_Handler>
}
 80022e4:	bf00      	nop
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <IPCC_C1_RX_IRQHandler>:
/**
* @brief This function handles IPCC RX occupied interrupt.
*/
void IPCC_C1_RX_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
	HW_IPCC_Rx_Handler();
 80022ec:	f00b fb68 	bl	800d9c0 <HW_IPCC_Rx_Handler>
}
 80022f0:	bf00      	nop
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <IPCC_C1_TX_IRQHandler>:
/**
* @brief This function handles IPCC TX free interrupt.
*/
void IPCC_C1_TX_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
	HW_IPCC_Tx_Handler();
 80022f8:	f00b fb9a 	bl	800da30 <HW_IPCC_Tx_Handler>
}
 80022fc:	bf00      	nop
 80022fe:	bd80      	pop	{r7, pc}

08002300 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002308:	4b11      	ldr	r3, [pc, #68]	; (8002350 <_sbrk+0x50>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d102      	bne.n	8002316 <_sbrk+0x16>
		heap_end = &end;
 8002310:	4b0f      	ldr	r3, [pc, #60]	; (8002350 <_sbrk+0x50>)
 8002312:	4a10      	ldr	r2, [pc, #64]	; (8002354 <_sbrk+0x54>)
 8002314:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002316:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <_sbrk+0x50>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800231c:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <_sbrk+0x50>)
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4413      	add	r3, r2
 8002324:	466a      	mov	r2, sp
 8002326:	4293      	cmp	r3, r2
 8002328:	d907      	bls.n	800233a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800232a:	f00c f9bb 	bl	800e6a4 <__errno>
 800232e:	4602      	mov	r2, r0
 8002330:	230c      	movs	r3, #12
 8002332:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002334:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002338:	e006      	b.n	8002348 <_sbrk+0x48>
	}

	heap_end += incr;
 800233a:	4b05      	ldr	r3, [pc, #20]	; (8002350 <_sbrk+0x50>)
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4413      	add	r3, r2
 8002342:	4a03      	ldr	r2, [pc, #12]	; (8002350 <_sbrk+0x50>)
 8002344:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002346:	68fb      	ldr	r3, [r7, #12]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	20000450 	.word	0x20000450
 8002354:	20000f28 	.word	0x20000f28

08002358 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 800235c:	4b26      	ldr	r3, [pc, #152]	; (80023f8 <SystemInit+0xa0>)
 800235e:	2200      	movs	r2, #0
 8002360:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8002362:	4b25      	ldr	r3, [pc, #148]	; (80023f8 <SystemInit+0xa0>)
 8002364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002368:	4a23      	ldr	r2, [pc, #140]	; (80023f8 <SystemInit+0xa0>)
 800236a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800236e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002386:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800238a:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800238c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002396:	4b19      	ldr	r3, [pc, #100]	; (80023fc <SystemInit+0xa4>)
 8002398:	4013      	ands	r3, r2
 800239a:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800239c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023a8:	f023 0305 	bic.w	r3, r3, #5
 80023ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80023b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023bc:	f023 0301 	bic.w	r3, r3, #1
 80023c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80023c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c8:	4a0d      	ldr	r2, [pc, #52]	; (8002400 <SystemInit+0xa8>)
 80023ca:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80023cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d0:	4a0b      	ldr	r2, [pc, #44]	; (8002400 <SystemInit+0xa8>)
 80023d2:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80023e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e8:	2200      	movs	r2, #0
 80023ea:	619a      	str	r2, [r3, #24]
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	e000ed00 	.word	0xe000ed00
 80023fc:	faf6fefb 	.word	0xfaf6fefb
 8002400:	22041000 	.word	0x22041000

08002404 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002404:	b480      	push	{r7}
 8002406:	b087      	sub	sp, #28
 8002408:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 800240a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	091b      	lsrs	r3, r3, #4
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	4a47      	ldr	r2, [pc, #284]	; (8002534 <SystemCoreClockUpdate+0x130>)
 8002418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800241c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800241e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f003 030c 	and.w	r3, r3, #12
 8002428:	2b0c      	cmp	r3, #12
 800242a:	d867      	bhi.n	80024fc <SystemCoreClockUpdate+0xf8>
 800242c:	a201      	add	r2, pc, #4	; (adr r2, 8002434 <SystemCoreClockUpdate+0x30>)
 800242e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002432:	bf00      	nop
 8002434:	08002469 	.word	0x08002469
 8002438:	080024fd 	.word	0x080024fd
 800243c:	080024fd 	.word	0x080024fd
 8002440:	080024fd 	.word	0x080024fd
 8002444:	08002471 	.word	0x08002471
 8002448:	080024fd 	.word	0x080024fd
 800244c:	080024fd 	.word	0x080024fd
 8002450:	080024fd 	.word	0x080024fd
 8002454:	08002479 	.word	0x08002479
 8002458:	080024fd 	.word	0x080024fd
 800245c:	080024fd 	.word	0x080024fd
 8002460:	080024fd 	.word	0x080024fd
 8002464:	08002481 	.word	0x08002481
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8002468:	4a33      	ldr	r2, [pc, #204]	; (8002538 <SystemCoreClockUpdate+0x134>)
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	6013      	str	r3, [r2, #0]
      break;
 800246e:	e049      	b.n	8002504 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8002470:	4b31      	ldr	r3, [pc, #196]	; (8002538 <SystemCoreClockUpdate+0x134>)
 8002472:	4a32      	ldr	r2, [pc, #200]	; (800253c <SystemCoreClockUpdate+0x138>)
 8002474:	601a      	str	r2, [r3, #0]
      break;
 8002476:	e045      	b.n	8002504 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002478:	4b2f      	ldr	r3, [pc, #188]	; (8002538 <SystemCoreClockUpdate+0x134>)
 800247a:	4a31      	ldr	r2, [pc, #196]	; (8002540 <SystemCoreClockUpdate+0x13c>)
 800247c:	601a      	str	r2, [r3, #0]
      break;
 800247e:	e041      	b.n	8002504 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 800248c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	091b      	lsrs	r3, r3, #4
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	3301      	adds	r3, #1
 800249a:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d105      	bne.n	80024ae <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 80024a2:	4a26      	ldr	r2, [pc, #152]	; (800253c <SystemCoreClockUpdate+0x138>)
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	e00d      	b.n	80024ca <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2b03      	cmp	r3, #3
 80024b2:	d105      	bne.n	80024c0 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 80024b4:	4a22      	ldr	r2, [pc, #136]	; (8002540 <SystemCoreClockUpdate+0x13c>)
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024bc:	617b      	str	r3, [r7, #20]
 80024be:	e004      	b.n	80024ca <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c8:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	0a1b      	lsrs	r3, r3, #8
 80024d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	fb02 f303 	mul.w	r3, r2, r3
 80024dc:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 80024de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	0f5b      	lsrs	r3, r3, #29
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	3301      	adds	r3, #1
 80024ec:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f6:	4a10      	ldr	r2, [pc, #64]	; (8002538 <SystemCoreClockUpdate+0x134>)
 80024f8:	6013      	str	r3, [r2, #0]
      break;
 80024fa:	e003      	b.n	8002504 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 80024fc:	4a0e      	ldr	r2, [pc, #56]	; (8002538 <SystemCoreClockUpdate+0x134>)
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	6013      	str	r3, [r2, #0]
      break;
 8002502:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	091b      	lsrs	r3, r3, #4
 800250c:	f003 030f 	and.w	r3, r3, #15
 8002510:	4a0c      	ldr	r2, [pc, #48]	; (8002544 <SystemCoreClockUpdate+0x140>)
 8002512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002516:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8002518:	4b07      	ldr	r3, [pc, #28]	; (8002538 <SystemCoreClockUpdate+0x134>)
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002522:	4a05      	ldr	r2, [pc, #20]	; (8002538 <SystemCoreClockUpdate+0x134>)
 8002524:	6013      	str	r3, [r2, #0]

}
 8002526:	bf00      	nop
 8002528:	371c      	adds	r7, #28
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	0800f27c 	.word	0x0800f27c
 8002538:	2000000c 	.word	0x2000000c
 800253c:	00f42400 	.word	0x00f42400
 8002540:	01e84800 	.word	0x01e84800
 8002544:	0800f21c 	.word	0x0800f21c

08002548 <LL_AHB2_GRP1_EnableClock>:
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002554:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002556:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4313      	orrs	r3, r2
 800255e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002564:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4013      	ands	r3, r2
 800256a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800256c:	68fb      	ldr	r3, [r7, #12]
}
 800256e:	bf00      	nop
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800257a:	b480      	push	{r7}
 800257c:	b085      	sub	sp, #20
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002586:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002588:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4313      	orrs	r3, r2
 8002590:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002596:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4013      	ands	r3, r2
 800259c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800259e:	68fb      	ldr	r3, [r7, #12]
}
 80025a0:	bf00      	nop
 80025a2:	3714      	adds	r7, #20
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80025b0:	4b22      	ldr	r3, [pc, #136]	; (800263c <MX_USART1_UART_Init+0x90>)
 80025b2:	4a23      	ldr	r2, [pc, #140]	; (8002640 <MX_USART1_UART_Init+0x94>)
 80025b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80025b6:	4b21      	ldr	r3, [pc, #132]	; (800263c <MX_USART1_UART_Init+0x90>)
 80025b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025be:	4b1f      	ldr	r3, [pc, #124]	; (800263c <MX_USART1_UART_Init+0x90>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025c4:	4b1d      	ldr	r3, [pc, #116]	; (800263c <MX_USART1_UART_Init+0x90>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025ca:	4b1c      	ldr	r3, [pc, #112]	; (800263c <MX_USART1_UART_Init+0x90>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025d0:	4b1a      	ldr	r3, [pc, #104]	; (800263c <MX_USART1_UART_Init+0x90>)
 80025d2:	220c      	movs	r2, #12
 80025d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025d6:	4b19      	ldr	r3, [pc, #100]	; (800263c <MX_USART1_UART_Init+0x90>)
 80025d8:	2200      	movs	r2, #0
 80025da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025dc:	4b17      	ldr	r3, [pc, #92]	; (800263c <MX_USART1_UART_Init+0x90>)
 80025de:	2200      	movs	r2, #0
 80025e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025e2:	4b16      	ldr	r3, [pc, #88]	; (800263c <MX_USART1_UART_Init+0x90>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025e8:	4b14      	ldr	r3, [pc, #80]	; (800263c <MX_USART1_UART_Init+0x90>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025ee:	4b13      	ldr	r3, [pc, #76]	; (800263c <MX_USART1_UART_Init+0x90>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025f4:	4811      	ldr	r0, [pc, #68]	; (800263c <MX_USART1_UART_Init+0x90>)
 80025f6:	f004 f96b 	bl	80068d0 <HAL_UART_Init>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002600:	f7ff face 	bl	8001ba0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002604:	2100      	movs	r1, #0
 8002606:	480d      	ldr	r0, [pc, #52]	; (800263c <MX_USART1_UART_Init+0x90>)
 8002608:	f005 fd6e 	bl	80080e8 <HAL_UARTEx_SetTxFifoThreshold>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002612:	f7ff fac5 	bl	8001ba0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002616:	2100      	movs	r1, #0
 8002618:	4808      	ldr	r0, [pc, #32]	; (800263c <MX_USART1_UART_Init+0x90>)
 800261a:	f005 fdd5 	bl	80081c8 <HAL_UARTEx_SetRxFifoThreshold>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002624:	f7ff fabc 	bl	8001ba0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002628:	4804      	ldr	r0, [pc, #16]	; (800263c <MX_USART1_UART_Init+0x90>)
 800262a:	f005 fd11 	bl	8008050 <HAL_UARTEx_DisableFifoMode>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002634:	f7ff fab4 	bl	8001ba0 <Error_Handler>
  }

}
 8002638:	bf00      	nop
 800263a:	bd80      	pop	{r7, pc}
 800263c:	20000720 	.word	0x20000720
 8002640:	40013800 	.word	0x40013800

08002644 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264c:	f107 030c 	add.w	r3, r7, #12
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	60da      	str	r2, [r3, #12]
 800265a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a0e      	ldr	r2, [pc, #56]	; (800269c <HAL_UART_MspInit+0x58>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d116      	bne.n	8002694 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002666:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800266a:	f7ff ff86 	bl	800257a <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800266e:	2002      	movs	r0, #2
 8002670:	f7ff ff6a 	bl	8002548 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002674:	23c0      	movs	r3, #192	; 0xc0
 8002676:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002678:	2302      	movs	r3, #2
 800267a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002680:	2300      	movs	r3, #0
 8002682:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002684:	2307      	movs	r3, #7
 8002686:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002688:	f107 030c 	add.w	r3, r7, #12
 800268c:	4619      	mov	r1, r3
 800268e:	4804      	ldr	r0, [pc, #16]	; (80026a0 <HAL_UART_MspInit+0x5c>)
 8002690:	f000 face 	bl	8002c30 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002694:	bf00      	nop
 8002696:	3720      	adds	r7, #32
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40013800 	.word	0x40013800
 80026a0:	48000400 	.word	0x48000400

080026a4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80026a4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026a6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026a8:	3304      	adds	r3, #4

080026aa <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026aa:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ac:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80026ae:	d3f9      	bcc.n	80026a4 <CopyDataInit>
  bx lr
 80026b0:	4770      	bx	lr

080026b2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80026b2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80026b4:	3004      	adds	r0, #4

080026b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80026b6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80026b8:	d3fb      	bcc.n	80026b2 <FillZerobss>
  bx lr
 80026ba:	4770      	bx	lr

080026bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026bc:	480c      	ldr	r0, [pc, #48]	; (80026f0 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80026be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80026c0:	480c      	ldr	r0, [pc, #48]	; (80026f4 <LoopForever+0x8>)
 80026c2:	490d      	ldr	r1, [pc, #52]	; (80026f8 <LoopForever+0xc>)
 80026c4:	4a0d      	ldr	r2, [pc, #52]	; (80026fc <LoopForever+0x10>)
 80026c6:	2300      	movs	r3, #0
 80026c8:	f7ff ffef 	bl	80026aa <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80026cc:	480c      	ldr	r0, [pc, #48]	; (8002700 <LoopForever+0x14>)
 80026ce:	490d      	ldr	r1, [pc, #52]	; (8002704 <LoopForever+0x18>)
 80026d0:	2300      	movs	r3, #0
 80026d2:	f7ff fff0 	bl	80026b6 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80026d6:	480c      	ldr	r0, [pc, #48]	; (8002708 <LoopForever+0x1c>)
 80026d8:	490c      	ldr	r1, [pc, #48]	; (800270c <LoopForever+0x20>)
 80026da:	2300      	movs	r3, #0
 80026dc:	f7ff ffeb 	bl	80026b6 <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80026e0:	f7ff fe3a 	bl	8002358 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80026e4:	f00b ffe4 	bl	800e6b0 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80026e8:	f7fe ff4c 	bl	8001584 <main>

080026ec <LoopForever>:

LoopForever:
  b LoopForever
 80026ec:	e7fe      	b.n	80026ec <LoopForever>
 80026ee:	0000      	.short	0x0000
  ldr   r0, =_estack
 80026f0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80026f4:	20000004 	.word	0x20000004
 80026f8:	200001f0 	.word	0x200001f0
 80026fc:	0800f388 	.word	0x0800f388
  INIT_BSS _sbss, _ebss
 8002700:	20000380 	.word	0x20000380
 8002704:	20000f24 	.word	0x20000f24
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002708:	200301c4 	.word	0x200301c4
 800270c:	20030a44 	.word	0x20030a44

08002710 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002710:	e7fe      	b.n	8002710 <ADC1_IRQHandler>
	...

08002714 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800271a:	2300      	movs	r3, #0
 800271c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800271e:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <HAL_Init+0x3c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a0b      	ldr	r2, [pc, #44]	; (8002750 <HAL_Init+0x3c>)
 8002724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002728:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800272a:	2003      	movs	r0, #3
 800272c:	f000 f9c6 	bl	8002abc <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002730:	2000      	movs	r0, #0
 8002732:	f000 f80f 	bl	8002754 <HAL_InitTick>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d002      	beq.n	8002742 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	71fb      	strb	r3, [r7, #7]
 8002740:	e001      	b.n	8002746 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002742:	f7ff fd5e 	bl	8002202 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002746:	79fb      	ldrb	r3, [r7, #7]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	58004000 	.word	0x58004000

08002754 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800275c:	2300      	movs	r3, #0
 800275e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002760:	4b17      	ldr	r3, [pc, #92]	; (80027c0 <HAL_InitTick+0x6c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d023      	beq.n	80027b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 8002768:	f002 ff92 	bl	8005690 <HAL_RCC_GetHCLKFreq>
 800276c:	4601      	mov	r1, r0
 800276e:	4b14      	ldr	r3, [pc, #80]	; (80027c0 <HAL_InitTick+0x6c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002776:	fbb2 f3f3 	udiv	r3, r2, r3
 800277a:	fbb1 f3f3 	udiv	r3, r1, r3
 800277e:	4618      	mov	r0, r3
 8002780:	f000 fa16 	bl	8002bb0 <HAL_SYSTICK_Config>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10f      	bne.n	80027aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b0f      	cmp	r3, #15
 800278e:	d809      	bhi.n	80027a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002790:	2200      	movs	r2, #0
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002798:	f000 f9b0 	bl	8002afc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800279c:	4a09      	ldr	r2, [pc, #36]	; (80027c4 <HAL_InitTick+0x70>)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6013      	str	r3, [r2, #0]
 80027a2:	e007      	b.n	80027b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	73fb      	strb	r3, [r7, #15]
 80027a8:	e004      	b.n	80027b4 <HAL_InitTick+0x60>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	73fb      	strb	r3, [r7, #15]
 80027ae:	e001      	b.n	80027b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80027b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	20000014 	.word	0x20000014
 80027c4:	20000010 	.word	0x20000010

080027c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027cc:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <HAL_IncTick+0x1c>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <HAL_IncTick+0x20>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4413      	add	r3, r2
 80027d6:	4a03      	ldr	r2, [pc, #12]	; (80027e4 <HAL_IncTick+0x1c>)
 80027d8:	6013      	str	r3, [r2, #0]
}
 80027da:	bf00      	nop
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	200007ac 	.word	0x200007ac
 80027e8:	20000014 	.word	0x20000014

080027ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  return uwTick;
 80027f0:	4b03      	ldr	r3, [pc, #12]	; (8002800 <HAL_GetTick+0x14>)
 80027f2:	681b      	ldr	r3, [r3, #0]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	200007ac 	.word	0x200007ac

08002804 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002808:	4b03      	ldr	r3, [pc, #12]	; (8002818 <HAL_GetTickPrio+0x14>)
 800280a:	681b      	ldr	r3, [r3, #0]
}
 800280c:	4618      	mov	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	20000010 	.word	0x20000010

0800281c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8002824:	f7ff ffe2 	bl	80027ec <HAL_GetTick>
 8002828:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002834:	d004      	beq.n	8002840 <HAL_Delay+0x24>
    {
      wait += (uint32_t)(uwTickFreq);
 8002836:	4b09      	ldr	r3, [pc, #36]	; (800285c <HAL_Delay+0x40>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	4413      	add	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8002840:	bf00      	nop
 8002842:	f7ff ffd3 	bl	80027ec <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	429a      	cmp	r2, r3
 8002850:	d8f7      	bhi.n	8002842 <HAL_Delay+0x26>
    {
    }
  }
 8002852:	bf00      	nop
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000014 	.word	0x20000014

08002860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002870:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800287c:	4013      	ands	r3, r2
 800287e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002888:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800288c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002892:	4a04      	ldr	r2, [pc, #16]	; (80028a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	60d3      	str	r3, [r2, #12]
}
 8002898:	bf00      	nop
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	e000ed00 	.word	0xe000ed00

080028a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028ac:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <__NVIC_GetPriorityGrouping+0x18>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	0a1b      	lsrs	r3, r3, #8
 80028b2:	f003 0307 	and.w	r3, r3, #7
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	e000ed00 	.word	0xe000ed00

080028c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	db0b      	blt.n	80028ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	f003 021f 	and.w	r2, r3, #31
 80028dc:	4907      	ldr	r1, [pc, #28]	; (80028fc <__NVIC_EnableIRQ+0x38>)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	095b      	lsrs	r3, r3, #5
 80028e4:	2001      	movs	r0, #1
 80028e6:	fa00 f202 	lsl.w	r2, r0, r2
 80028ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	e000e100 	.word	0xe000e100

08002900 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	4603      	mov	r3, r0
 8002908:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800290a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290e:	2b00      	cmp	r3, #0
 8002910:	db10      	blt.n	8002934 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	f003 021f 	and.w	r2, r3, #31
 8002918:	4909      	ldr	r1, [pc, #36]	; (8002940 <__NVIC_DisableIRQ+0x40>)
 800291a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291e:	095b      	lsrs	r3, r3, #5
 8002920:	2001      	movs	r0, #1
 8002922:	fa00 f202 	lsl.w	r2, r0, r2
 8002926:	3320      	adds	r3, #32
 8002928:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800292c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002930:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	e000e100 	.word	0xe000e100

08002944 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800294e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002952:	2b00      	cmp	r3, #0
 8002954:	db0c      	blt.n	8002970 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002956:	79fb      	ldrb	r3, [r7, #7]
 8002958:	f003 021f 	and.w	r2, r3, #31
 800295c:	4907      	ldr	r1, [pc, #28]	; (800297c <__NVIC_SetPendingIRQ+0x38>)
 800295e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002962:	095b      	lsrs	r3, r3, #5
 8002964:	2001      	movs	r0, #1
 8002966:	fa00 f202 	lsl.w	r2, r0, r2
 800296a:	3340      	adds	r3, #64	; 0x40
 800296c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	e000e100 	.word	0xe000e100

08002980 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298e:	2b00      	cmp	r3, #0
 8002990:	db0c      	blt.n	80029ac <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	f003 021f 	and.w	r2, r3, #31
 8002998:	4907      	ldr	r1, [pc, #28]	; (80029b8 <__NVIC_ClearPendingIRQ+0x38>)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	095b      	lsrs	r3, r3, #5
 80029a0:	2001      	movs	r0, #1
 80029a2:	fa00 f202 	lsl.w	r2, r0, r2
 80029a6:	3360      	adds	r3, #96	; 0x60
 80029a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	e000e100 	.word	0xe000e100

080029bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	6039      	str	r1, [r7, #0]
 80029c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	db0a      	blt.n	80029e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	490c      	ldr	r1, [pc, #48]	; (8002a08 <__NVIC_SetPriority+0x4c>)
 80029d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029da:	0112      	lsls	r2, r2, #4
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	440b      	add	r3, r1
 80029e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029e4:	e00a      	b.n	80029fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	4908      	ldr	r1, [pc, #32]	; (8002a0c <__NVIC_SetPriority+0x50>)
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	3b04      	subs	r3, #4
 80029f4:	0112      	lsls	r2, r2, #4
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	440b      	add	r3, r1
 80029fa:	761a      	strb	r2, [r3, #24]
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	e000e100 	.word	0xe000e100
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b089      	sub	sp, #36	; 0x24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f1c3 0307 	rsb	r3, r3, #7
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	bf28      	it	cs
 8002a2e:	2304      	movcs	r3, #4
 8002a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3304      	adds	r3, #4
 8002a36:	2b06      	cmp	r3, #6
 8002a38:	d902      	bls.n	8002a40 <NVIC_EncodePriority+0x30>
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	3b03      	subs	r3, #3
 8002a3e:	e000      	b.n	8002a42 <NVIC_EncodePriority+0x32>
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	43da      	mvns	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	401a      	ands	r2, r3
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a62:	43d9      	mvns	r1, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a68:	4313      	orrs	r3, r2
         );
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3724      	adds	r7, #36	; 0x24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
	...

08002a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a88:	d301      	bcc.n	8002a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e00f      	b.n	8002aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a8e:	4a0a      	ldr	r2, [pc, #40]	; (8002ab8 <SysTick_Config+0x40>)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a96:	210f      	movs	r1, #15
 8002a98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a9c:	f7ff ff8e 	bl	80029bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aa0:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <SysTick_Config+0x40>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aa6:	4b04      	ldr	r3, [pc, #16]	; (8002ab8 <SysTick_Config+0x40>)
 8002aa8:	2207      	movs	r2, #7
 8002aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	e000e010 	.word	0xe000e010

08002abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b07      	cmp	r3, #7
 8002ac8:	d00f      	beq.n	8002aea <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b06      	cmp	r3, #6
 8002ace:	d00c      	beq.n	8002aea <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b05      	cmp	r3, #5
 8002ad4:	d009      	beq.n	8002aea <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d006      	beq.n	8002aea <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b03      	cmp	r3, #3
 8002ae0:	d003      	beq.n	8002aea <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002ae2:	218d      	movs	r1, #141	; 0x8d
 8002ae4:	4804      	ldr	r0, [pc, #16]	; (8002af8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002ae6:	f7ff f867 	bl	8001bb8 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff feb8 	bl	8002860 <__NVIC_SetPriorityGrouping>
}
 8002af0:	bf00      	nop
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	0800ef64 	.word	0x0800ef64

08002afc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
 8002b08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b0f      	cmp	r3, #15
 8002b0e:	d903      	bls.n	8002b18 <HAL_NVIC_SetPriority+0x1c>
 8002b10:	21a5      	movs	r1, #165	; 0xa5
 8002b12:	480e      	ldr	r0, [pc, #56]	; (8002b4c <HAL_NVIC_SetPriority+0x50>)
 8002b14:	f7ff f850 	bl	8001bb8 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	2b0f      	cmp	r3, #15
 8002b1c:	d903      	bls.n	8002b26 <HAL_NVIC_SetPriority+0x2a>
 8002b1e:	21a6      	movs	r1, #166	; 0xa6
 8002b20:	480a      	ldr	r0, [pc, #40]	; (8002b4c <HAL_NVIC_SetPriority+0x50>)
 8002b22:	f7ff f849 	bl	8001bb8 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b26:	f7ff febf 	bl	80028a8 <__NVIC_GetPriorityGrouping>
 8002b2a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	68b9      	ldr	r1, [r7, #8]
 8002b30:	6978      	ldr	r0, [r7, #20]
 8002b32:	f7ff ff6d 	bl	8002a10 <NVIC_EncodePriority>
 8002b36:	4602      	mov	r2, r0
 8002b38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b3c:	4611      	mov	r1, r2
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff ff3c 	bl	80029bc <__NVIC_SetPriority>
}
 8002b44:	bf00      	nop
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	0800ef64 	.word	0x0800ef64

08002b50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	da03      	bge.n	8002b6a <HAL_NVIC_EnableIRQ+0x1a>
 8002b62:	21b7      	movs	r1, #183	; 0xb7
 8002b64:	4805      	ldr	r0, [pc, #20]	; (8002b7c <HAL_NVIC_EnableIRQ+0x2c>)
 8002b66:	f7ff f827 	bl	8001bb8 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fea8 	bl	80028c4 <__NVIC_EnableIRQ>
}
 8002b74:	bf00      	nop
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	0800ef64 	.word	0x0800ef64

08002b80 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	da03      	bge.n	8002b9a <HAL_NVIC_DisableIRQ+0x1a>
 8002b92:	21c7      	movs	r1, #199	; 0xc7
 8002b94:	4805      	ldr	r0, [pc, #20]	; (8002bac <HAL_NVIC_DisableIRQ+0x2c>)
 8002b96:	f7ff f80f 	bl	8001bb8 <assert_failed>
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff feae 	bl	8002900 <__NVIC_DisableIRQ>
}
 8002ba4:	bf00      	nop
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	0800ef64 	.word	0x0800ef64

08002bb0 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f7ff ff5d 	bl	8002a78 <SysTick_Config>
 8002bbe:	4603      	mov	r3, r0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	da04      	bge.n	8002be4 <HAL_NVIC_SetPendingIRQ+0x1c>
 8002bda:	f44f 7194 	mov.w	r1, #296	; 0x128
 8002bde:	4806      	ldr	r0, [pc, #24]	; (8002bf8 <HAL_NVIC_SetPendingIRQ+0x30>)
 8002be0:	f7fe ffea 	bl	8001bb8 <assert_failed>
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff feab 	bl	8002944 <__NVIC_SetPendingIRQ>
}
 8002bee:	bf00      	nop
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	0800ef64 	.word	0x0800ef64

08002bfc <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	da04      	bge.n	8002c18 <HAL_NVIC_ClearPendingIRQ+0x1c>
 8002c0e:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8002c12:	4806      	ldr	r0, [pc, #24]	; (8002c2c <HAL_NVIC_ClearPendingIRQ+0x30>)
 8002c14:	f7fe ffd0 	bl	8001bb8 <assert_failed>
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff feaf 	bl	8002980 <__NVIC_ClearPendingIRQ>
}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	0800ef64 	.word	0x0800ef64

08002c30 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c44:	d017      	beq.n	8002c76 <HAL_GPIO_Init+0x46>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a39      	ldr	r2, [pc, #228]	; (8002d30 <HAL_GPIO_Init+0x100>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d013      	beq.n	8002c76 <HAL_GPIO_Init+0x46>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a38      	ldr	r2, [pc, #224]	; (8002d34 <HAL_GPIO_Init+0x104>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d00f      	beq.n	8002c76 <HAL_GPIO_Init+0x46>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a37      	ldr	r2, [pc, #220]	; (8002d38 <HAL_GPIO_Init+0x108>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d00b      	beq.n	8002c76 <HAL_GPIO_Init+0x46>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a36      	ldr	r2, [pc, #216]	; (8002d3c <HAL_GPIO_Init+0x10c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d007      	beq.n	8002c76 <HAL_GPIO_Init+0x46>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a35      	ldr	r2, [pc, #212]	; (8002d40 <HAL_GPIO_Init+0x110>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d003      	beq.n	8002c76 <HAL_GPIO_Init+0x46>
 8002c6e:	21b1      	movs	r1, #177	; 0xb1
 8002c70:	4834      	ldr	r0, [pc, #208]	; (8002d44 <HAL_GPIO_Init+0x114>)
 8002c72:	f7fe ffa1 	bl	8001bb8 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d005      	beq.n	8002c8c <HAL_GPIO_Init+0x5c>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	0c1b      	lsrs	r3, r3, #16
 8002c86:	041b      	lsls	r3, r3, #16
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d003      	beq.n	8002c94 <HAL_GPIO_Init+0x64>
 8002c8c:	21b2      	movs	r1, #178	; 0xb2
 8002c8e:	482d      	ldr	r0, [pc, #180]	; (8002d44 <HAL_GPIO_Init+0x114>)
 8002c90:	f7fe ff92 	bl	8001bb8 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d035      	beq.n	8002d08 <HAL_GPIO_Init+0xd8>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d031      	beq.n	8002d08 <HAL_GPIO_Init+0xd8>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2b11      	cmp	r3, #17
 8002caa:	d02d      	beq.n	8002d08 <HAL_GPIO_Init+0xd8>
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d029      	beq.n	8002d08 <HAL_GPIO_Init+0xd8>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	2b12      	cmp	r3, #18
 8002cba:	d025      	beq.n	8002d08 <HAL_GPIO_Init+0xd8>
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	4a21      	ldr	r2, [pc, #132]	; (8002d48 <HAL_GPIO_Init+0x118>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d020      	beq.n	8002d08 <HAL_GPIO_Init+0xd8>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	4a20      	ldr	r2, [pc, #128]	; (8002d4c <HAL_GPIO_Init+0x11c>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d01b      	beq.n	8002d08 <HAL_GPIO_Init+0xd8>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	4a1e      	ldr	r2, [pc, #120]	; (8002d50 <HAL_GPIO_Init+0x120>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d016      	beq.n	8002d08 <HAL_GPIO_Init+0xd8>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	4a1d      	ldr	r2, [pc, #116]	; (8002d54 <HAL_GPIO_Init+0x124>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d011      	beq.n	8002d08 <HAL_GPIO_Init+0xd8>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	4a1b      	ldr	r2, [pc, #108]	; (8002d58 <HAL_GPIO_Init+0x128>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d00c      	beq.n	8002d08 <HAL_GPIO_Init+0xd8>
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	4a1a      	ldr	r2, [pc, #104]	; (8002d5c <HAL_GPIO_Init+0x12c>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d007      	beq.n	8002d08 <HAL_GPIO_Init+0xd8>
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	d003      	beq.n	8002d08 <HAL_GPIO_Init+0xd8>
 8002d00:	21b3      	movs	r1, #179	; 0xb3
 8002d02:	4810      	ldr	r0, [pc, #64]	; (8002d44 <HAL_GPIO_Init+0x114>)
 8002d04:	f7fe ff58 	bl	8001bb8 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 81ba 	beq.w	8003086 <HAL_GPIO_Init+0x456>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	f000 81b5 	beq.w	8003086 <HAL_GPIO_Init+0x456>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	f000 81b0 	beq.w	8003086 <HAL_GPIO_Init+0x456>
 8002d26:	21b4      	movs	r1, #180	; 0xb4
 8002d28:	4806      	ldr	r0, [pc, #24]	; (8002d44 <HAL_GPIO_Init+0x114>)
 8002d2a:	f7fe ff45 	bl	8001bb8 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d2e:	e1aa      	b.n	8003086 <HAL_GPIO_Init+0x456>
 8002d30:	48000400 	.word	0x48000400
 8002d34:	48000800 	.word	0x48000800
 8002d38:	48000c00 	.word	0x48000c00
 8002d3c:	48001000 	.word	0x48001000
 8002d40:	48001c00 	.word	0x48001c00
 8002d44:	0800efa0 	.word	0x0800efa0
 8002d48:	10110000 	.word	0x10110000
 8002d4c:	10210000 	.word	0x10210000
 8002d50:	10310000 	.word	0x10310000
 8002d54:	10120000 	.word	0x10120000
 8002d58:	10220000 	.word	0x10220000
 8002d5c:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	2101      	movs	r1, #1
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 8184 	beq.w	8003080 <HAL_GPIO_Init+0x450>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d003      	beq.n	8002d88 <HAL_GPIO_Init+0x158>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2b12      	cmp	r3, #18
 8002d86:	d147      	bne.n	8002e18 <HAL_GPIO_Init+0x1e8>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d8e:	d017      	beq.n	8002dc0 <HAL_GPIO_Init+0x190>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a80      	ldr	r2, [pc, #512]	; (8002f94 <HAL_GPIO_Init+0x364>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d013      	beq.n	8002dc0 <HAL_GPIO_Init+0x190>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a7f      	ldr	r2, [pc, #508]	; (8002f98 <HAL_GPIO_Init+0x368>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d00f      	beq.n	8002dc0 <HAL_GPIO_Init+0x190>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a7e      	ldr	r2, [pc, #504]	; (8002f9c <HAL_GPIO_Init+0x36c>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d00b      	beq.n	8002dc0 <HAL_GPIO_Init+0x190>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a7d      	ldr	r2, [pc, #500]	; (8002fa0 <HAL_GPIO_Init+0x370>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d007      	beq.n	8002dc0 <HAL_GPIO_Init+0x190>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a7c      	ldr	r2, [pc, #496]	; (8002fa4 <HAL_GPIO_Init+0x374>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d003      	beq.n	8002dc0 <HAL_GPIO_Init+0x190>
 8002db8:	21c3      	movs	r1, #195	; 0xc3
 8002dba:	487b      	ldr	r0, [pc, #492]	; (8002fa8 <HAL_GPIO_Init+0x378>)
 8002dbc:	f7fe fefc 	bl	8001bb8 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	2b0f      	cmp	r3, #15
 8002dc6:	d903      	bls.n	8002dd0 <HAL_GPIO_Init+0x1a0>
 8002dc8:	21c4      	movs	r1, #196	; 0xc4
 8002dca:	4877      	ldr	r0, [pc, #476]	; (8002fa8 <HAL_GPIO_Init+0x378>)
 8002dcc:	f7fe fef4 	bl	8001bb8 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	08da      	lsrs	r2, r3, #3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3208      	adds	r2, #8
 8002dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	220f      	movs	r2, #15
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	43db      	mvns	r3, r3
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	4013      	ands	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	08da      	lsrs	r2, r3, #3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3208      	adds	r2, #8
 8002e12:	6939      	ldr	r1, [r7, #16]
 8002e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	2203      	movs	r2, #3
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f003 0203 	and.w	r2, r3, #3
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d00b      	beq.n	8002e6c <HAL_GPIO_Init+0x23c>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d007      	beq.n	8002e6c <HAL_GPIO_Init+0x23c>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e60:	2b11      	cmp	r3, #17
 8002e62:	d003      	beq.n	8002e6c <HAL_GPIO_Init+0x23c>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	2b12      	cmp	r3, #18
 8002e6a:	d144      	bne.n	8002ef6 <HAL_GPIO_Init+0x2c6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00f      	beq.n	8002e94 <HAL_GPIO_Init+0x264>
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d00b      	beq.n	8002e94 <HAL_GPIO_Init+0x264>
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d007      	beq.n	8002e94 <HAL_GPIO_Init+0x264>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	2b03      	cmp	r3, #3
 8002e8a:	d003      	beq.n	8002e94 <HAL_GPIO_Init+0x264>
 8002e8c:	21d8      	movs	r1, #216	; 0xd8
 8002e8e:	4846      	ldr	r0, [pc, #280]	; (8002fa8 <HAL_GPIO_Init+0x378>)
 8002e90:	f7fe fe92 	bl	8001bb8 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	2203      	movs	r2, #3
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002eca:	2201      	movs	r2, #1
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	091b      	lsrs	r3, r3, #4
 8002ee0:	f003 0201 	and.w	r2, r3, #1
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	2203      	movs	r2, #3
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	43db      	mvns	r3, r3
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	689a      	ldr	r2, [r3, #8]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 80a6 	beq.w	8003080 <HAL_GPIO_Init+0x450>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002f34:	4a1d      	ldr	r2, [pc, #116]	; (8002fac <HAL_GPIO_Init+0x37c>)
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	089b      	lsrs	r3, r3, #2
 8002f3a:	3302      	adds	r3, #2
 8002f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f003 0303 	and.w	r3, r3, #3
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	220f      	movs	r2, #15
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	43db      	mvns	r3, r3
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	4013      	ands	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f5e:	d027      	beq.n	8002fb0 <HAL_GPIO_Init+0x380>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a0c      	ldr	r2, [pc, #48]	; (8002f94 <HAL_GPIO_Init+0x364>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d013      	beq.n	8002f90 <HAL_GPIO_Init+0x360>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a0b      	ldr	r2, [pc, #44]	; (8002f98 <HAL_GPIO_Init+0x368>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d00d      	beq.n	8002f8c <HAL_GPIO_Init+0x35c>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a0a      	ldr	r2, [pc, #40]	; (8002f9c <HAL_GPIO_Init+0x36c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d007      	beq.n	8002f88 <HAL_GPIO_Init+0x358>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a09      	ldr	r2, [pc, #36]	; (8002fa0 <HAL_GPIO_Init+0x370>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d101      	bne.n	8002f84 <HAL_GPIO_Init+0x354>
 8002f80:	2304      	movs	r3, #4
 8002f82:	e016      	b.n	8002fb2 <HAL_GPIO_Init+0x382>
 8002f84:	2307      	movs	r3, #7
 8002f86:	e014      	b.n	8002fb2 <HAL_GPIO_Init+0x382>
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e012      	b.n	8002fb2 <HAL_GPIO_Init+0x382>
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	e010      	b.n	8002fb2 <HAL_GPIO_Init+0x382>
 8002f90:	2301      	movs	r3, #1
 8002f92:	e00e      	b.n	8002fb2 <HAL_GPIO_Init+0x382>
 8002f94:	48000400 	.word	0x48000400
 8002f98:	48000800 	.word	0x48000800
 8002f9c:	48000c00 	.word	0x48000c00
 8002fa0:	48001000 	.word	0x48001000
 8002fa4:	48001c00 	.word	0x48001c00
 8002fa8:	0800efa0 	.word	0x0800efa0
 8002fac:	40010000 	.word	0x40010000
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	f002 0203 	and.w	r2, r2, #3
 8002fb8:	0092      	lsls	r2, r2, #2
 8002fba:	4093      	lsls	r3, r2
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fc2:	4937      	ldr	r1, [pc, #220]	; (80030a0 <HAL_GPIO_Init+0x470>)
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	089b      	lsrs	r3, r3, #2
 8002fc8:	3302      	adds	r3, #2
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002fd0:	4b34      	ldr	r3, [pc, #208]	; (80030a4 <HAL_GPIO_Init+0x474>)
 8002fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_GPIO_Init+0x3c6>
        {
          temp |= iocurrent;
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ff6:	4a2b      	ldr	r2, [pc, #172]	; (80030a4 <HAL_GPIO_Init+0x474>)
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002ffe:	4b29      	ldr	r3, [pc, #164]	; (80030a4 <HAL_GPIO_Init+0x474>)
 8003000:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003004:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	43db      	mvns	r3, r3
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	4013      	ands	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <HAL_GPIO_Init+0x3f4>
        {
          temp |= iocurrent;
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	4313      	orrs	r3, r2
 8003022:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003024:	4a1f      	ldr	r2, [pc, #124]	; (80030a4 <HAL_GPIO_Init+0x474>)
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800302c:	4b1d      	ldr	r3, [pc, #116]	; (80030a4 <HAL_GPIO_Init+0x474>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	43db      	mvns	r3, r3
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4013      	ands	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <HAL_GPIO_Init+0x420>
        {
          temp |= iocurrent;
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4313      	orrs	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003050:	4a14      	ldr	r2, [pc, #80]	; (80030a4 <HAL_GPIO_Init+0x474>)
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003056:	4b13      	ldr	r3, [pc, #76]	; (80030a4 <HAL_GPIO_Init+0x474>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	43db      	mvns	r3, r3
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	4013      	ands	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_GPIO_Init+0x44a>
        {
          temp |= iocurrent;
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4313      	orrs	r3, r2
 8003078:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800307a:	4a0a      	ldr	r2, [pc, #40]	; (80030a4 <HAL_GPIO_Init+0x474>)
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	3301      	adds	r3, #1
 8003084:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	fa22 f303 	lsr.w	r3, r2, r3
 8003090:	2b00      	cmp	r3, #0
 8003092:	f47f ae65 	bne.w	8002d60 <HAL_GPIO_Init+0x130>
  }
}
 8003096:	bf00      	nop
 8003098:	3718      	adds	r7, #24
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	40010000 	.word	0x40010000
 80030a4:	58000800 	.word	0x58000800

080030a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	460b      	mov	r3, r1
 80030b2:	807b      	strh	r3, [r7, #2]
 80030b4:	4613      	mov	r3, r2
 80030b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80030b8:	887b      	ldrh	r3, [r7, #2]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d004      	beq.n	80030c8 <HAL_GPIO_WritePin+0x20>
 80030be:	887b      	ldrh	r3, [r7, #2]
 80030c0:	0c1b      	lsrs	r3, r3, #16
 80030c2:	041b      	lsls	r3, r3, #16
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d004      	beq.n	80030d2 <HAL_GPIO_WritePin+0x2a>
 80030c8:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 80030cc:	480d      	ldr	r0, [pc, #52]	; (8003104 <HAL_GPIO_WritePin+0x5c>)
 80030ce:	f7fe fd73 	bl	8001bb8 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80030d2:	787b      	ldrb	r3, [r7, #1]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d007      	beq.n	80030e8 <HAL_GPIO_WritePin+0x40>
 80030d8:	787b      	ldrb	r3, [r7, #1]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d004      	beq.n	80030e8 <HAL_GPIO_WritePin+0x40>
 80030de:	f240 119b 	movw	r1, #411	; 0x19b
 80030e2:	4808      	ldr	r0, [pc, #32]	; (8003104 <HAL_GPIO_WritePin+0x5c>)
 80030e4:	f7fe fd68 	bl	8001bb8 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80030e8:	787b      	ldrb	r3, [r7, #1]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030ee:	887a      	ldrh	r2, [r7, #2]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030f4:	e002      	b.n	80030fc <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030f6:	887a      	ldrh	r2, [r7, #2]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030fc:	bf00      	nop
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	0800efa0 	.word	0x0800efa0

08003108 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	460b      	mov	r3, r1
 8003112:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003114:	887b      	ldrh	r3, [r7, #2]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d004      	beq.n	8003124 <HAL_GPIO_TogglePin+0x1c>
 800311a:	887b      	ldrh	r3, [r7, #2]
 800311c:	0c1b      	lsrs	r3, r3, #16
 800311e:	041b      	lsls	r3, r3, #16
 8003120:	2b00      	cmp	r3, #0
 8003122:	d004      	beq.n	800312e <HAL_GPIO_TogglePin+0x26>
 8003124:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8003128:	4809      	ldr	r0, [pc, #36]	; (8003150 <HAL_GPIO_TogglePin+0x48>)
 800312a:	f7fe fd45 	bl	8001bb8 <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	695a      	ldr	r2, [r3, #20]
 8003132:	887b      	ldrh	r3, [r7, #2]
 8003134:	4013      	ands	r3, r2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_GPIO_TogglePin+0x3a>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800313a:	887a      	ldrh	r2, [r7, #2]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003140:	e002      	b.n	8003148 <HAL_GPIO_TogglePin+0x40>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003142:	887a      	ldrh	r2, [r7, #2]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	619a      	str	r2, [r3, #24]
}
 8003148:	bf00      	nop
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	0800efa0 	.word	0x0800efa0

08003154 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	4603      	mov	r3, r0
 800315c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800315e:	4b08      	ldr	r3, [pc, #32]	; (8003180 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003160:	68da      	ldr	r2, [r3, #12]
 8003162:	88fb      	ldrh	r3, [r7, #6]
 8003164:	4013      	ands	r3, r2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d006      	beq.n	8003178 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800316a:	4a05      	ldr	r2, [pc, #20]	; (8003180 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800316c:	88fb      	ldrh	r3, [r7, #6]
 800316e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003170:	88fb      	ldrh	r3, [r7, #6]
 8003172:	4618      	mov	r0, r3
 8003174:	f7fe fd08 	bl	8001b88 <HAL_GPIO_EXTI_Callback>
  }
}
 8003178:	bf00      	nop
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	58000800 	.word	0x58000800

08003184 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003186:	b08b      	sub	sp, #44	; 0x2c
 8003188:	af06      	add	r7, sp, #24
 800318a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e0b6      	b.n	8003304 <HAL_PCD_Init+0x180>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a5c      	ldr	r2, [pc, #368]	; (800330c <HAL_PCD_Init+0x188>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d003      	beq.n	80031a8 <HAL_PCD_Init+0x24>
 80031a0:	2183      	movs	r1, #131	; 0x83
 80031a2:	485b      	ldr	r0, [pc, #364]	; (8003310 <HAL_PCD_Init+0x18c>)
 80031a4:	f7fe fd08 	bl	8001bb8 <assert_failed>

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d106      	bne.n	80031c2 <HAL_PCD_Init+0x3e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f00a ff77 	bl	800e0b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2203      	movs	r2, #3
 80031c6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f005 f8ea 	bl	80083a8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031d4:	2300      	movs	r3, #0
 80031d6:	73fb      	strb	r3, [r7, #15]
 80031d8:	e035      	b.n	8003246 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80031da:	7bfb      	ldrb	r3, [r7, #15]
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	015b      	lsls	r3, r3, #5
 80031e0:	4413      	add	r3, r2
 80031e2:	3329      	adds	r3, #41	; 0x29
 80031e4:	2201      	movs	r2, #1
 80031e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	015b      	lsls	r3, r3, #5
 80031ee:	4413      	add	r3, r2
 80031f0:	3328      	adds	r3, #40	; 0x28
 80031f2:	7bfa      	ldrb	r2, [r7, #15]
 80031f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
 80031f8:	7bfa      	ldrb	r2, [r7, #15]
 80031fa:	b291      	uxth	r1, r2
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	015b      	lsls	r3, r3, #5
 8003200:	4413      	add	r3, r2
 8003202:	3336      	adds	r3, #54	; 0x36
 8003204:	460a      	mov	r2, r1
 8003206:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	015b      	lsls	r3, r3, #5
 800320e:	4413      	add	r3, r2
 8003210:	332b      	adds	r3, #43	; 0x2b
 8003212:	2200      	movs	r2, #0
 8003214:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003216:	7bfb      	ldrb	r3, [r7, #15]
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	015b      	lsls	r3, r3, #5
 800321c:	4413      	add	r3, r2
 800321e:	3338      	adds	r3, #56	; 0x38
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003224:	7bfb      	ldrb	r3, [r7, #15]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	015b      	lsls	r3, r3, #5
 800322a:	4413      	add	r3, r2
 800322c:	333c      	adds	r3, #60	; 0x3c
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003232:	7bfb      	ldrb	r3, [r7, #15]
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	3302      	adds	r3, #2
 8003238:	015b      	lsls	r3, r3, #5
 800323a:	4413      	add	r3, r2
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003240:	7bfb      	ldrb	r3, [r7, #15]
 8003242:	3301      	adds	r3, #1
 8003244:	73fb      	strb	r3, [r7, #15]
 8003246:	7bfa      	ldrb	r2, [r7, #15]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	429a      	cmp	r2, r3
 800324e:	d3c4      	bcc.n	80031da <HAL_PCD_Init+0x56>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003250:	2300      	movs	r3, #0
 8003252:	73fb      	strb	r3, [r7, #15]
 8003254:	e031      	b.n	80032ba <HAL_PCD_Init+0x136>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003256:	7bfb      	ldrb	r3, [r7, #15]
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	015b      	lsls	r3, r3, #5
 800325c:	4413      	add	r3, r2
 800325e:	f203 1329 	addw	r3, r3, #297	; 0x129
 8003262:	2200      	movs	r2, #0
 8003264:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003266:	7bfb      	ldrb	r3, [r7, #15]
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	015b      	lsls	r3, r3, #5
 800326c:	4413      	add	r3, r2
 800326e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003272:	7bfa      	ldrb	r2, [r7, #15]
 8003274:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003276:	7bfb      	ldrb	r3, [r7, #15]
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	015b      	lsls	r3, r3, #5
 800327c:	4413      	add	r3, r2
 800327e:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8003282:	2200      	movs	r2, #0
 8003284:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003286:	7bfb      	ldrb	r3, [r7, #15]
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	015b      	lsls	r3, r3, #5
 800328c:	4413      	add	r3, r2
 800328e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	015b      	lsls	r3, r3, #5
 800329c:	4413      	add	r3, r2
 800329e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032a6:	7bfb      	ldrb	r3, [r7, #15]
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	330a      	adds	r3, #10
 80032ac:	015b      	lsls	r3, r3, #5
 80032ae:	4413      	add	r3, r2
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
 80032b6:	3301      	adds	r3, #1
 80032b8:	73fb      	strb	r3, [r7, #15]
 80032ba:	7bfa      	ldrb	r2, [r7, #15]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d3c8      	bcc.n	8003256 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	603b      	str	r3, [r7, #0]
 80032ca:	687e      	ldr	r6, [r7, #4]
 80032cc:	466d      	mov	r5, sp
 80032ce:	f106 0410 	add.w	r4, r6, #16
 80032d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032d6:	6823      	ldr	r3, [r4, #0]
 80032d8:	602b      	str	r3, [r5, #0]
 80032da:	1d33      	adds	r3, r6, #4
 80032dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032de:	6838      	ldr	r0, [r7, #0]
 80032e0:	f005 f87f 	bl	80083e2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	69db      	ldr	r3, [r3, #28]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d102      	bne.n	8003302 <HAL_PCD_Init+0x17e>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 fe40 	bl	8003f82 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3714      	adds	r7, #20
 8003308:	46bd      	mov	sp, r7
 800330a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800330c:	40006800 	.word	0x40006800
 8003310:	0800efdc 	.word	0x0800efdc

08003314 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003322:	2b01      	cmp	r3, #1
 8003324:	d101      	bne.n	800332a <HAL_PCD_Start+0x16>
 8003326:	2302      	movs	r3, #2
 8003328:	e012      	b.n	8003350 <HAL_PCD_Start+0x3c>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f006 f88e 	bl	8009458 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f005 f819 	bl	8008378 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f006 f88e 	bl	8009486 <USB_ReadInterrupts>
 800336a:	4603      	mov	r3, r0
 800336c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003374:	d102      	bne.n	800337c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 fb3e 	bl	80039f8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f006 f880 	bl	8009486 <USB_ReadInterrupts>
 8003386:	4603      	mov	r3, r0
 8003388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800338c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003390:	d112      	bne.n	80033b8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800339a:	b29a      	uxth	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033a4:	b292      	uxth	r2, r2
 80033a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f00a ff07 	bl	800e1be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80033b0:	2100      	movs	r1, #0
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f929 	bl	800360a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4618      	mov	r0, r3
 80033be:	f006 f862 	bl	8009486 <USB_ReadInterrupts>
 80033c2:	4603      	mov	r3, r0
 80033c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033cc:	d10b      	bne.n	80033e6 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033e0:	b292      	uxth	r2, r2
 80033e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f006 f84b 	bl	8009486 <USB_ReadInterrupts>
 80033f0:	4603      	mov	r3, r0
 80033f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033fa:	d10b      	bne.n	8003414 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003404:	b29a      	uxth	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800340e:	b292      	uxth	r2, r2
 8003410:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f006 f834 	bl	8009486 <USB_ReadInterrupts>
 800341e:	4603      	mov	r3, r0
 8003420:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003428:	d133      	bne.n	8003492 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003432:	b29a      	uxth	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 0204 	bic.w	r2, r2, #4
 800343c:	b292      	uxth	r2, r2
 800343e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800344a:	b29a      	uxth	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 0208 	bic.w	r2, r2, #8
 8003454:	b292      	uxth	r2, r2
 8003456:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8003460:	2b01      	cmp	r3, #1
 8003462:	d107      	bne.n	8003474 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800346c:	2100      	movs	r1, #0
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f00b f898 	bl	800e5a4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f00a fedb 	bl	800e230 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003482:	b29a      	uxth	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800348c:	b292      	uxth	r2, r2
 800348e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f005 fff5 	bl	8009486 <USB_ReadInterrupts>
 800349c:	4603      	mov	r3, r0
 800349e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034a6:	d131      	bne.n	800350c <HAL_PCD_IRQHandler+0x1b4>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0208 	orr.w	r2, r2, #8
 80034ba:	b292      	uxth	r2, r2
 80034bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034d2:	b292      	uxth	r2, r2
 80034d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0204 	orr.w	r2, r2, #4
 80034ea:	b292      	uxth	r2, r2
 80034ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f005 ffc6 	bl	8009486 <USB_ReadInterrupts>
 80034fa:	4603      	mov	r3, r0
 80034fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003504:	d002      	beq.n	800350c <HAL_PCD_IRQHandler+0x1b4>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f00a fe78 	bl	800e1fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f005 ffb8 	bl	8009486 <USB_ReadInterrupts>
 8003516:	4603      	mov	r3, r0
 8003518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351c:	2b80      	cmp	r3, #128	; 0x80
 800351e:	d13f      	bne.n	80035a0 <HAL_PCD_IRQHandler+0x248>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003528:	b29a      	uxth	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003532:	b292      	uxth	r2, r2
 8003534:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800353e:	2b00      	cmp	r3, #0
 8003540:	d12b      	bne.n	800359a <HAL_PCD_IRQHandler+0x242>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800354a:	b29a      	uxth	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f042 0204 	orr.w	r2, r2, #4
 8003554:	b292      	uxth	r2, r2
 8003556:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003562:	b29a      	uxth	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f042 0208 	orr.w	r2, r2, #8
 800356c:	b292      	uxth	r2, r2
 800356e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003582:	b29b      	uxth	r3, r3
 8003584:	089b      	lsrs	r3, r3, #2
 8003586:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003590:	2101      	movs	r1, #1
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f00b f806 	bl	800e5a4 <HAL_PCDEx_LPM_Callback>
 8003598:	e002      	b.n	80035a0 <HAL_PCD_IRQHandler+0x248>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f00a fe2e 	bl	800e1fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f005 ff6e 	bl	8009486 <USB_ReadInterrupts>
 80035aa:	4603      	mov	r3, r0
 80035ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035b4:	d10e      	bne.n	80035d4 <HAL_PCD_IRQHandler+0x27c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035be:	b29a      	uxth	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035c8:	b292      	uxth	r2, r2
 80035ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f00a fde7 	bl	800e1a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4618      	mov	r0, r3
 80035da:	f005 ff54 	bl	8009486 <USB_ReadInterrupts>
 80035de:	4603      	mov	r3, r0
 80035e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035e8:	d10b      	bne.n	8003602 <HAL_PCD_IRQHandler+0x2aa>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035fc:	b292      	uxth	r2, r2
 80035fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003602:	bf00      	nop
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b082      	sub	sp, #8
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
 8003612:	460b      	mov	r3, r1
 8003614:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800361c:	2b01      	cmp	r3, #1
 800361e:	d101      	bne.n	8003624 <HAL_PCD_SetAddress+0x1a>
 8003620:	2302      	movs	r3, #2
 8003622:	e013      	b.n	800364c <HAL_PCD_SetAddress+0x42>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	78fa      	ldrb	r2, [r7, #3]
 8003630:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	78fa      	ldrb	r2, [r7, #3]
 800363a:	4611      	mov	r1, r2
 800363c:	4618      	mov	r0, r3
 800363e:	f005 fef7 	bl	8009430 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	4608      	mov	r0, r1
 800365e:	4611      	mov	r1, r2
 8003660:	461a      	mov	r2, r3
 8003662:	4603      	mov	r3, r0
 8003664:	70fb      	strb	r3, [r7, #3]
 8003666:	460b      	mov	r3, r1
 8003668:	803b      	strh	r3, [r7, #0]
 800366a:	4613      	mov	r3, r2
 800366c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800366e:	2300      	movs	r3, #0
 8003670:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003672:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003676:	2b00      	cmp	r3, #0
 8003678:	da0b      	bge.n	8003692 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800367a:	78fb      	ldrb	r3, [r7, #3]
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	015b      	lsls	r3, r3, #5
 8003682:	3328      	adds	r3, #40	; 0x28
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	4413      	add	r3, r2
 8003688:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2201      	movs	r2, #1
 800368e:	705a      	strb	r2, [r3, #1]
 8003690:	e00b      	b.n	80036aa <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003692:	78fb      	ldrb	r3, [r7, #3]
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	015b      	lsls	r3, r3, #5
 800369a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	4413      	add	r3, r2
 80036a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80036aa:	78fb      	ldrb	r3, [r7, #3]
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80036b6:	883a      	ldrh	r2, [r7, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	78ba      	ldrb	r2, [r7, #2]
 80036c0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	785b      	ldrb	r3, [r3, #1]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d004      	beq.n	80036d4 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80036d4:	78bb      	ldrb	r3, [r7, #2]
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d102      	bne.n	80036e0 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d101      	bne.n	80036ee <HAL_PCD_EP_Open+0x9a>
 80036ea:	2302      	movs	r3, #2
 80036ec:	e00e      	b.n	800370c <HAL_PCD_EP_Open+0xb8>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68f9      	ldr	r1, [r7, #12]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f004 fe95 	bl	800842c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 800370a:	7afb      	ldrb	r3, [r7, #11]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	460b      	mov	r3, r1
 800371e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003720:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003724:	2b00      	cmp	r3, #0
 8003726:	da0b      	bge.n	8003740 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003728:	78fb      	ldrb	r3, [r7, #3]
 800372a:	f003 0307 	and.w	r3, r3, #7
 800372e:	015b      	lsls	r3, r3, #5
 8003730:	3328      	adds	r3, #40	; 0x28
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	4413      	add	r3, r2
 8003736:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2201      	movs	r2, #1
 800373c:	705a      	strb	r2, [r3, #1]
 800373e:	e00b      	b.n	8003758 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003740:	78fb      	ldrb	r3, [r7, #3]
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	015b      	lsls	r3, r3, #5
 8003748:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	4413      	add	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003758:	78fb      	ldrb	r3, [r7, #3]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	b2da      	uxtb	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800376a:	2b01      	cmp	r3, #1
 800376c:	d101      	bne.n	8003772 <HAL_PCD_EP_Close+0x5e>
 800376e:	2302      	movs	r3, #2
 8003770:	e00e      	b.n	8003790 <HAL_PCD_EP_Close+0x7c>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68f9      	ldr	r1, [r7, #12]
 8003780:	4618      	mov	r0, r3
 8003782:	f005 f93d 	bl	8008a00 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	607a      	str	r2, [r7, #4]
 80037a2:	603b      	str	r3, [r7, #0]
 80037a4:	460b      	mov	r3, r1
 80037a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037a8:	7afb      	ldrb	r3, [r7, #11]
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	015b      	lsls	r3, r3, #5
 80037b0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	4413      	add	r3, r2
 80037b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	2200      	movs	r2, #0
 80037ca:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	2200      	movs	r2, #0
 80037d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037d2:	7afb      	ldrb	r3, [r7, #11]
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037de:	7afb      	ldrb	r3, [r7, #11]
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d106      	bne.n	80037f6 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6979      	ldr	r1, [r7, #20]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f005 fa9c 	bl	8008d2c <USB_EPStartXfer>
 80037f4:	e005      	b.n	8003802 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6979      	ldr	r1, [r7, #20]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f005 fa95 	bl	8008d2c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3718      	adds	r7, #24
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	460b      	mov	r3, r1
 8003816:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003818:	78fb      	ldrb	r3, [r7, #3]
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	330a      	adds	r3, #10
 8003822:	015b      	lsls	r3, r3, #5
 8003824:	4413      	add	r3, r2
 8003826:	3304      	adds	r3, #4
 8003828:	681b      	ldr	r3, [r3, #0]
}
 800382a:	4618      	mov	r0, r3
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b086      	sub	sp, #24
 800383a:	af00      	add	r7, sp, #0
 800383c:	60f8      	str	r0, [r7, #12]
 800383e:	607a      	str	r2, [r7, #4]
 8003840:	603b      	str	r3, [r7, #0]
 8003842:	460b      	mov	r3, r1
 8003844:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003846:	7afb      	ldrb	r3, [r7, #11]
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	015b      	lsls	r3, r3, #5
 800384e:	3328      	adds	r3, #40	; 0x28
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	4413      	add	r3, r2
 8003854:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	2200      	movs	r2, #0
 8003866:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	2201      	movs	r2, #1
 800386c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800386e:	7afb      	ldrb	r3, [r7, #11]
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	b2da      	uxtb	r2, r3
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800387a:	7afb      	ldrb	r3, [r7, #11]
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	2b00      	cmp	r3, #0
 8003882:	d106      	bne.n	8003892 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6979      	ldr	r1, [r7, #20]
 800388a:	4618      	mov	r0, r3
 800388c:	f005 fa4e 	bl	8008d2c <USB_EPStartXfer>
 8003890:	e005      	b.n	800389e <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6979      	ldr	r1, [r7, #20]
 8003898:	4618      	mov	r0, r3
 800389a:	f005 fa47 	bl	8008d2c <USB_EPStartXfer>
  }

  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3718      	adds	r7, #24
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	460b      	mov	r3, r1
 80038b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80038b4:	78fb      	ldrb	r3, [r7, #3]
 80038b6:	f003 0207 	and.w	r2, r3, #7
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d901      	bls.n	80038c6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e046      	b.n	8003954 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80038c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	da0b      	bge.n	80038e6 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038ce:	78fb      	ldrb	r3, [r7, #3]
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	015b      	lsls	r3, r3, #5
 80038d6:	3328      	adds	r3, #40	; 0x28
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	4413      	add	r3, r2
 80038dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2201      	movs	r2, #1
 80038e2:	705a      	strb	r2, [r3, #1]
 80038e4:	e009      	b.n	80038fa <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80038e6:	78fb      	ldrb	r3, [r7, #3]
 80038e8:	015b      	lsls	r3, r3, #5
 80038ea:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	4413      	add	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2201      	movs	r2, #1
 80038fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003900:	78fb      	ldrb	r3, [r7, #3]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	b2da      	uxtb	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003912:	2b01      	cmp	r3, #1
 8003914:	d101      	bne.n	800391a <HAL_PCD_EP_SetStall+0x72>
 8003916:	2302      	movs	r3, #2
 8003918:	e01c      	b.n	8003954 <HAL_PCD_EP_SetStall+0xac>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68f9      	ldr	r1, [r7, #12]
 8003928:	4618      	mov	r0, r3
 800392a:	f005 fcab 	bl	8009284 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800392e:	78fb      	ldrb	r3, [r7, #3]
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	2b00      	cmp	r3, #0
 8003936:	d108      	bne.n	800394a <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8003942:	4619      	mov	r1, r3
 8003944:	4610      	mov	r0, r2
 8003946:	f005 fdae 	bl	80094a6 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	460b      	mov	r3, r1
 8003966:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003968:	78fb      	ldrb	r3, [r7, #3]
 800396a:	f003 020f 	and.w	r2, r3, #15
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	429a      	cmp	r2, r3
 8003974:	d901      	bls.n	800397a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e03a      	b.n	80039f0 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800397a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800397e:	2b00      	cmp	r3, #0
 8003980:	da0b      	bge.n	800399a <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003982:	78fb      	ldrb	r3, [r7, #3]
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	015b      	lsls	r3, r3, #5
 800398a:	3328      	adds	r3, #40	; 0x28
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	4413      	add	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2201      	movs	r2, #1
 8003996:	705a      	strb	r2, [r3, #1]
 8003998:	e00b      	b.n	80039b2 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800399a:	78fb      	ldrb	r3, [r7, #3]
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	015b      	lsls	r3, r3, #5
 80039a2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	4413      	add	r3, r2
 80039aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039b8:	78fb      	ldrb	r3, [r7, #3]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d101      	bne.n	80039d2 <HAL_PCD_EP_ClrStall+0x76>
 80039ce:	2302      	movs	r3, #2
 80039d0:	e00e      	b.n	80039f0 <HAL_PCD_EP_ClrStall+0x94>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68f9      	ldr	r1, [r7, #12]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f005 fc91 	bl	8009308 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80039f8:	b590      	push	{r4, r7, lr}
 80039fa:	b089      	sub	sp, #36	; 0x24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003a00:	e26f      	b.n	8003ee2 <PCD_EP_ISR_Handler+0x4ea>
  {
    wIstr = hpcd->Instance->ISTR;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a0a:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003a0c:	8afb      	ldrh	r3, [r7, #22]
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	f003 030f 	and.w	r3, r3, #15
 8003a14:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8003a16:	7d7b      	ldrb	r3, [r7, #21]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f040 8137 	bne.w	8003c8c <PCD_EP_ISR_Handler+0x294>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003a1e:	8afb      	ldrh	r3, [r7, #22]
 8003a20:	f003 0310 	and.w	r3, r3, #16
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d14f      	bne.n	8003ac8 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a38:	b29c      	uxth	r4, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8003a42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	3328      	adds	r3, #40	; 0x28
 8003a4e:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	00db      	lsls	r3, r3, #3
 8003a62:	4413      	add	r3, r2
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6812      	ldr	r2, [r2, #0]
 8003a68:	4413      	add	r3, r2
 8003a6a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003a6e:	881b      	ldrh	r3, [r3, #0]
 8003a70:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	695a      	ldr	r2, [r3, #20]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	69db      	ldr	r3, [r3, #28]
 8003a80:	441a      	add	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003a86:	2100      	movs	r1, #0
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f00a fb73 	bl	800e174 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 8223 	beq.w	8003ee2 <PCD_EP_ISR_Handler+0x4ea>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f040 821e 	bne.w	8003ee2 <PCD_EP_ISR_Handler+0x4ea>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	b292      	uxth	r2, r2
 8003aba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003ac6:	e20c      	b.n	8003ee2 <PCD_EP_ISR_Handler+0x4ea>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003ace:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	881b      	ldrh	r3, [r3, #0]
 8003ad6:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003ad8:	8a7b      	ldrh	r3, [r7, #18]
 8003ada:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d031      	beq.n	8003b46 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	461a      	mov	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	4413      	add	r3, r2
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6812      	ldr	r2, [r2, #0]
 8003afa:	4413      	add	r3, r2
 8003afc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003b00:	881b      	ldrh	r3, [r3, #0]
 8003b02:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6818      	ldr	r0, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	f005 fd0f 	bl	8009540 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	881b      	ldrh	r3, [r3, #0]
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003b2e:	4013      	ands	r3, r2
 8003b30:	b29c      	uxth	r4, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003b3a:	b292      	uxth	r2, r2
 8003b3c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f00a faee 	bl	800e120 <HAL_PCD_SetupStageCallback>
 8003b44:	e1cd      	b.n	8003ee2 <PCD_EP_ISR_Handler+0x4ea>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003b46:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f280 81c9 	bge.w	8003ee2 <PCD_EP_ISR_Handler+0x4ea>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	881b      	ldrh	r3, [r3, #0]
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	b29c      	uxth	r4, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003b68:	b292      	uxth	r2, r2
 8003b6a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	461a      	mov	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	4413      	add	r3, r2
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6812      	ldr	r2, [r2, #0]
 8003b84:	4413      	add	r3, r2
 8003b86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003b8a:	881b      	ldrh	r3, [r3, #0]
 8003b8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d019      	beq.n	8003bd0 <PCD_EP_ISR_Handler+0x1d8>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d015      	beq.n	8003bd0 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6818      	ldr	r0, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6959      	ldr	r1, [r3, #20]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	f005 fcc3 	bl	8009540 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	695a      	ldr	r2, [r3, #20]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	441a      	add	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003bc8:	2100      	movs	r1, #0
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f00a faba 	bl	800e144 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	461c      	mov	r4, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	441c      	add	r4, r3
 8003be2:	f204 4306 	addw	r3, r4, #1030	; 0x406
 8003be6:	60bb      	str	r3, [r7, #8]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d110      	bne.n	8003c12 <PCD_EP_ISR_Handler+0x21a>
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	881b      	ldrh	r3, [r3, #0]
 8003bf4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	801a      	strh	r2, [r3, #0]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	881b      	ldrh	r3, [r3, #0]
 8003c02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	801a      	strh	r2, [r3, #0]
 8003c10:	e026      	b.n	8003c60 <PCD_EP_ISR_Handler+0x268>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	2b3d      	cmp	r3, #61	; 0x3d
 8003c18:	d813      	bhi.n	8003c42 <PCD_EP_ISR_Handler+0x24a>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	085b      	lsrs	r3, r3, #1
 8003c20:	61bb      	str	r3, [r7, #24]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d002      	beq.n	8003c34 <PCD_EP_ISR_Handler+0x23c>
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	3301      	adds	r3, #1
 8003c32:	61bb      	str	r3, [r7, #24]
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	029b      	lsls	r3, r3, #10
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	801a      	strh	r2, [r3, #0]
 8003c40:	e00e      	b.n	8003c60 <PCD_EP_ISR_Handler+0x268>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	095b      	lsrs	r3, r3, #5
 8003c48:	61bb      	str	r3, [r7, #24]
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	029b      	lsls	r3, r3, #10
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	881b      	ldrh	r3, [r3, #0]
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c70:	b29c      	uxth	r4, r3
 8003c72:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003c76:	b29c      	uxth	r4, r3
 8003c78:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003c7c:	b29c      	uxth	r4, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	4b9f      	ldr	r3, [pc, #636]	; (8003f00 <PCD_EP_ISR_Handler+0x508>)
 8003c84:	4323      	orrs	r3, r4
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	8013      	strh	r3, [r2, #0]
 8003c8a:	e12a      	b.n	8003ee2 <PCD_EP_ISR_Handler+0x4ea>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	461a      	mov	r2, r3
 8003c92:	7d7b      	ldrb	r3, [r7, #21]
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4413      	add	r3, r2
 8003c98:	881b      	ldrh	r3, [r3, #0]
 8003c9a:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003c9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f280 80cb 	bge.w	8003e3c <PCD_EP_ISR_Handler+0x444>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	461a      	mov	r2, r3
 8003cac:	7d7b      	ldrb	r3, [r7, #21]
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	881b      	ldrh	r3, [r3, #0]
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003cba:	4013      	ands	r3, r2
 8003cbc:	b29c      	uxth	r4, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	7d7b      	ldrb	r3, [r7, #21]
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4413      	add	r3, r2
 8003cca:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003cce:	b292      	uxth	r2, r2
 8003cd0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003cd2:	7d7b      	ldrb	r3, [r7, #21]
 8003cd4:	015b      	lsls	r3, r3, #5
 8003cd6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	4413      	add	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	7b1b      	ldrb	r3, [r3, #12]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d11f      	bne.n	8003d28 <PCD_EP_ISR_Handler+0x330>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	4413      	add	r3, r2
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6812      	ldr	r2, [r2, #0]
 8003d00:	4413      	add	r3, r2
 8003d02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003d06:	881b      	ldrh	r3, [r3, #0]
 8003d08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d0c:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8003d0e:	8bfb      	ldrh	r3, [r7, #30]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d06e      	beq.n	8003df2 <PCD_EP_ISR_Handler+0x3fa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6818      	ldr	r0, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6959      	ldr	r1, [r3, #20]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	88da      	ldrh	r2, [r3, #6]
 8003d20:	8bfb      	ldrh	r3, [r7, #30]
 8003d22:	f005 fc0d 	bl	8009540 <USB_ReadPMA>
 8003d26:	e064      	b.n	8003df2 <PCD_EP_ISR_Handler+0x3fa>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	881b      	ldrh	r3, [r3, #0]
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d01f      	beq.n	8003d82 <PCD_EP_ISR_Handler+0x38a>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	4413      	add	r3, r2
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	6812      	ldr	r2, [r2, #0]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003d60:	881b      	ldrh	r3, [r3, #0]
 8003d62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d66:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003d68:	8bfb      	ldrh	r3, [r7, #30]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d028      	beq.n	8003dc0 <PCD_EP_ISR_Handler+0x3c8>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6818      	ldr	r0, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6959      	ldr	r1, [r3, #20]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	891a      	ldrh	r2, [r3, #8]
 8003d7a:	8bfb      	ldrh	r3, [r7, #30]
 8003d7c:	f005 fbe0 	bl	8009540 <USB_ReadPMA>
 8003d80:	e01e      	b.n	8003dc0 <PCD_EP_ISR_Handler+0x3c8>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	4413      	add	r3, r2
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6812      	ldr	r2, [r2, #0]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003da6:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003da8:	8bfb      	ldrh	r3, [r7, #30]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d008      	beq.n	8003dc0 <PCD_EP_ISR_Handler+0x3c8>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6818      	ldr	r0, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6959      	ldr	r1, [r3, #20]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	895a      	ldrh	r2, [r3, #10]
 8003dba:	8bfb      	ldrh	r3, [r7, #30]
 8003dbc:	f005 fbc0 	bl	8009540 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	4413      	add	r3, r2
 8003dce:	881b      	ldrh	r3, [r3, #0]
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dda:	b29c      	uxth	r4, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	461a      	mov	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	441a      	add	r2, r3
 8003dea:	4b46      	ldr	r3, [pc, #280]	; (8003f04 <PCD_EP_ISR_Handler+0x50c>)
 8003dec:	4323      	orrs	r3, r4
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	69da      	ldr	r2, [r3, #28]
 8003df6:	8bfb      	ldrh	r3, [r7, #30]
 8003df8:	441a      	add	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	695a      	ldr	r2, [r3, #20]
 8003e02:	8bfb      	ldrh	r3, [r7, #30]
 8003e04:	441a      	add	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d004      	beq.n	8003e1c <PCD_EP_ISR_Handler+0x424>
 8003e12:	8bfa      	ldrh	r2, [r7, #30]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d206      	bcs.n	8003e2a <PCD_EP_ISR_Handler+0x432>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	4619      	mov	r1, r3
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f00a f98e 	bl	800e144 <HAL_PCD_DataOutStageCallback>
 8003e28:	e008      	b.n	8003e3c <PCD_EP_ISR_Handler+0x444>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	7819      	ldrb	r1, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	695a      	ldr	r2, [r3, #20]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7ff fcae 	bl	8003798 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003e3c:	8a7b      	ldrh	r3, [r7, #18]
 8003e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d04d      	beq.n	8003ee2 <PCD_EP_ISR_Handler+0x4ea>
      {
        ep = &hpcd->IN_ep[epindex];
 8003e46:	7d7b      	ldrb	r3, [r7, #21]
 8003e48:	015b      	lsls	r3, r3, #5
 8003e4a:	3328      	adds	r3, #40	; 0x28
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	4413      	add	r3, r2
 8003e50:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	461a      	mov	r2, r3
 8003e58:	7d7b      	ldrb	r3, [r7, #21]
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	4413      	add	r3, r2
 8003e5e:	881b      	ldrh	r3, [r3, #0]
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e6a:	b29c      	uxth	r4, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	461a      	mov	r2, r3
 8003e72:	7d7b      	ldrb	r3, [r7, #21]
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	441a      	add	r2, r3
 8003e78:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8003e7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	461a      	mov	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	4413      	add	r3, r2
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6812      	ldr	r2, [r2, #0]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003ea2:	881b      	ldrh	r3, [r3, #0]
 8003ea4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	695a      	ldr	r2, [r3, #20]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	69db      	ldr	r3, [r3, #28]
 8003eb4:	441a      	add	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d106      	bne.n	8003ed0 <PCD_EP_ISR_Handler+0x4d8>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f00a f953 	bl	800e174 <HAL_PCD_DataInStageCallback>
 8003ece:	e008      	b.n	8003ee2 <PCD_EP_ISR_Handler+0x4ea>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	7819      	ldrb	r1, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	695a      	ldr	r2, [r3, #20]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7ff fcaa 	bl	8003836 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	b21b      	sxth	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f6ff ad87 	blt.w	8003a02 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3724      	adds	r7, #36	; 0x24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd90      	pop	{r4, r7, pc}
 8003efe:	bf00      	nop
 8003f00:	ffff8080 	.word	0xffff8080
 8003f04:	ffff80c0 	.word	0xffff80c0

08003f08 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	607b      	str	r3, [r7, #4]
 8003f12:	460b      	mov	r3, r1
 8003f14:	817b      	strh	r3, [r7, #10]
 8003f16:	4613      	mov	r3, r2
 8003f18:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003f1a:	897b      	ldrh	r3, [r7, #10]
 8003f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d008      	beq.n	8003f38 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f26:	897b      	ldrh	r3, [r7, #10]
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	015b      	lsls	r3, r3, #5
 8003f2e:	3328      	adds	r3, #40	; 0x28
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	4413      	add	r3, r2
 8003f34:	617b      	str	r3, [r7, #20]
 8003f36:	e006      	b.n	8003f46 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f38:	897b      	ldrh	r3, [r7, #10]
 8003f3a:	015b      	lsls	r3, r3, #5
 8003f3c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	4413      	add	r3, r2
 8003f44:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003f46:	893b      	ldrh	r3, [r7, #8]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d107      	bne.n	8003f5c <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	80da      	strh	r2, [r3, #6]
 8003f5a:	e00b      	b.n	8003f74 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	0c1b      	lsrs	r3, r3, #16
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	371c      	adds	r7, #28
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b085      	sub	sp, #20
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	f043 0301 	orr.w	r3, r3, #1
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	f043 0302 	orr.w	r3, r3, #2
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
	...

08003fd8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fdc:	4b05      	ldr	r3, [pc, #20]	; (8003ff4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a04      	ldr	r2, [pc, #16]	; (8003ff4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe6:	6013      	str	r3, [r2, #0]
}
 8003fe8:	bf00      	nop
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	58000400 	.word	0x58000400

08003ff8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003ffc:	4b04      	ldr	r3, [pc, #16]	; (8004010 <HAL_PWREx_GetVoltageRange+0x18>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004004:	4618      	mov	r0, r3
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	58000400 	.word	0x58000400

08004014 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004018:	4b05      	ldr	r3, [pc, #20]	; (8004030 <HAL_PWREx_EnableVddUSB+0x1c>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	4a04      	ldr	r2, [pc, #16]	; (8004030 <HAL_PWREx_EnableVddUSB+0x1c>)
 800401e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004022:	6053      	str	r3, [r2, #4]
}
 8004024:	bf00      	nop
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	58000400 	.word	0x58000400

08004034 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004034:	b480      	push	{r7}
 8004036:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004042:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004046:	d101      	bne.n	800404c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004048:	2301      	movs	r3, #1
 800404a:	e000      	b.n	800404e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <LL_RCC_HSE_EnableBypass>:
{
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 800405c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004066:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800406a:	6013      	str	r3, [r2, #0]
}
 800406c:	bf00      	nop
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <LL_RCC_HSE_DisableBypass>:
{
 8004076:	b480      	push	{r7}
 8004078:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800407a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004084:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004088:	6013      	str	r3, [r2, #0]
}
 800408a:	bf00      	nop
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <LL_RCC_HSE_Enable>:
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a6:	6013      	str	r3, [r2, #0]
}
 80040a8:	bf00      	nop
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <LL_RCC_HSE_Disable>:
{
 80040b2:	b480      	push	{r7}
 80040b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80040b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c4:	6013      	str	r3, [r2, #0]
}
 80040c6:	bf00      	nop
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <LL_RCC_HSE_IsReady>:
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80040d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040e2:	d101      	bne.n	80040e8 <LL_RCC_HSE_IsReady+0x18>
 80040e4:	2301      	movs	r3, #1
 80040e6:	e000      	b.n	80040ea <LL_RCC_HSE_IsReady+0x1a>
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <LL_RCC_HSI_Enable>:
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80040f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004106:	6013      	str	r3, [r2, #0]
}
 8004108:	bf00      	nop
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <LL_RCC_HSI_Disable>:
{
 8004112:	b480      	push	{r7}
 8004114:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004120:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004124:	6013      	str	r3, [r2, #0]
}
 8004126:	bf00      	nop
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <LL_RCC_HSI_IsReady>:
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800413e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004142:	d101      	bne.n	8004148 <LL_RCC_HSI_IsReady+0x18>
 8004144:	2301      	movs	r3, #1
 8004146:	e000      	b.n	800414a <LL_RCC_HSI_IsReady+0x1a>
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800415c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	061b      	lsls	r3, r3, #24
 800416a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800416e:	4313      	orrs	r3, r2
 8004170:	604b      	str	r3, [r1, #4]
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <LL_RCC_HSI48_Enable>:
{
 800417e:	b480      	push	{r7}
 8004180:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004186:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800418a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800418e:	f043 0301 	orr.w	r3, r3, #1
 8004192:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004196:	bf00      	nop
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <LL_RCC_HSI48_Disable>:
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80041a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041b0:	f023 0301 	bic.w	r3, r3, #1
 80041b4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80041b8:	bf00      	nop
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <LL_RCC_HSI48_IsReady>:
{
 80041c2:	b480      	push	{r7}
 80041c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80041c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d101      	bne.n	80041da <LL_RCC_HSI48_IsReady+0x18>
 80041d6:	2301      	movs	r3, #1
 80041d8:	e000      	b.n	80041dc <LL_RCC_HSI48_IsReady+0x1a>
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <LL_RCC_LSE_Enable>:
{
 80041e6:	b480      	push	{r7}
 80041e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80041ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041f6:	f043 0301 	orr.w	r3, r3, #1
 80041fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80041fe:	bf00      	nop
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <LL_RCC_LSE_Disable>:
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800420c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004214:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004218:	f023 0301 	bic.w	r3, r3, #1
 800421c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004220:	bf00      	nop
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <LL_RCC_LSE_EnableBypass>:
{
 800422a:	b480      	push	{r7}
 800422c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800422e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004236:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800423a:	f043 0304 	orr.w	r3, r3, #4
 800423e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004242:	bf00      	nop
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <LL_RCC_LSE_DisableBypass>:
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004258:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800425c:	f023 0304 	bic.w	r3, r3, #4
 8004260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004264:	bf00      	nop
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <LL_RCC_LSE_IsReady>:
{
 800426e:	b480      	push	{r7}
 8004270:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b02      	cmp	r3, #2
 8004280:	d101      	bne.n	8004286 <LL_RCC_LSE_IsReady+0x18>
 8004282:	2301      	movs	r3, #1
 8004284:	e000      	b.n	8004288 <LL_RCC_LSE_IsReady+0x1a>
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <LL_RCC_LSI1_Enable>:
{
 8004292:	b480      	push	{r7}
 8004294:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800429a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800429e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042a2:	f043 0301 	orr.w	r3, r3, #1
 80042a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80042aa:	bf00      	nop
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <LL_RCC_LSI1_Disable>:
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80042b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042c4:	f023 0301 	bic.w	r3, r3, #1
 80042c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80042cc:	bf00      	nop
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <LL_RCC_LSI1_IsReady>:
{
 80042d6:	b480      	push	{r7}
 80042d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80042da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d101      	bne.n	80042ee <LL_RCC_LSI1_IsReady+0x18>
 80042ea:	2301      	movs	r3, #1
 80042ec:	e000      	b.n	80042f0 <LL_RCC_LSI1_IsReady+0x1a>
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <LL_RCC_LSI2_Enable>:
{
 80042fa:	b480      	push	{r7}
 80042fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80042fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004302:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004306:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800430a:	f043 0304 	orr.w	r3, r3, #4
 800430e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004312:	bf00      	nop
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <LL_RCC_LSI2_Disable>:
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004324:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004328:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800432c:	f023 0304 	bic.w	r3, r3, #4
 8004330:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004334:	bf00      	nop
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <LL_RCC_LSI2_IsReady>:
{
 800433e:	b480      	push	{r7}
 8004340:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004346:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800434a:	f003 0308 	and.w	r3, r3, #8
 800434e:	2b08      	cmp	r3, #8
 8004350:	d101      	bne.n	8004356 <LL_RCC_LSI2_IsReady+0x18>
 8004352:	2301      	movs	r3, #1
 8004354:	e000      	b.n	8004358 <LL_RCC_LSI2_IsReady+0x1a>
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <LL_RCC_LSI2_SetTrimming>:
{
 8004362:	b480      	push	{r7}
 8004364:	b083      	sub	sp, #12
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800436a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800436e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004372:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	021b      	lsls	r3, r3, #8
 800437a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800437e:	4313      	orrs	r3, r2
 8004380:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <LL_RCC_MSI_Enable>:
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800439e:	f043 0301 	orr.w	r3, r3, #1
 80043a2:	6013      	str	r3, [r2, #0]
}
 80043a4:	bf00      	nop
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <LL_RCC_MSI_Disable>:
{
 80043ae:	b480      	push	{r7}
 80043b0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80043b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043bc:	f023 0301 	bic.w	r3, r3, #1
 80043c0:	6013      	str	r3, [r2, #0]
}
 80043c2:	bf00      	nop
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <LL_RCC_MSI_IsReady>:
{
 80043cc:	b480      	push	{r7}
 80043ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80043d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d101      	bne.n	80043e2 <LL_RCC_MSI_IsReady+0x16>
 80043de:	2301      	movs	r3, #1
 80043e0:	e000      	b.n	80043e4 <LL_RCC_MSI_IsReady+0x18>
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <LL_RCC_MSI_SetRange>:
{
 80043ee:	b480      	push	{r7}
 80043f0:	b083      	sub	sp, #12
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80043f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004400:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4313      	orrs	r3, r2
 8004408:	600b      	str	r3, [r1, #0]
}
 800440a:	bf00      	nop
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <LL_RCC_MSI_GetRange>:
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800441c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004426:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2bb0      	cmp	r3, #176	; 0xb0
 800442c:	d901      	bls.n	8004432 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800442e:	23b0      	movs	r3, #176	; 0xb0
 8004430:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004432:	687b      	ldr	r3, [r7, #4]
}
 8004434:	4618      	mov	r0, r3
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	021b      	lsls	r3, r3, #8
 8004456:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800445a:	4313      	orrs	r3, r2
 800445c:	604b      	str	r3, [r1, #4]
}
 800445e:	bf00      	nop
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <LL_RCC_SetSysClkSource>:
{
 800446a:	b480      	push	{r7}
 800446c:	b083      	sub	sp, #12
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f023 0203 	bic.w	r2, r3, #3
 800447c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4313      	orrs	r3, r2
 8004484:	608b      	str	r3, [r1, #8]
}
 8004486:	bf00      	nop
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <LL_RCC_GetSysClkSource>:
{
 8004492:	b480      	push	{r7}
 8004494:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f003 030c 	and.w	r3, r3, #12
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <LL_RCC_SetAHBPrescaler>:
{
 80044aa:	b480      	push	{r7}
 80044ac:	b083      	sub	sp, #12
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80044b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	608b      	str	r3, [r1, #8]
}
 80044c6:	bf00      	nop
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr

080044d2 <LL_C2_RCC_SetAHBPrescaler>:
{
 80044d2:	b480      	push	{r7}
 80044d4:	b083      	sub	sp, #12
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80044da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80044e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80044f2:	bf00      	nop
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <LL_RCC_SetAHB4Prescaler>:
{
 80044fe:	b480      	push	{r7}
 8004500:	b083      	sub	sp, #12
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800450a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800450e:	f023 020f 	bic.w	r2, r3, #15
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	091b      	lsrs	r3, r3, #4
 8004516:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800451a:	4313      	orrs	r3, r2
 800451c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <LL_RCC_SetAPB1Prescaler>:
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800453e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4313      	orrs	r3, r2
 8004546:	608b      	str	r3, [r1, #8]
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <LL_RCC_SetAPB2Prescaler>:
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800455c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004566:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4313      	orrs	r3, r2
 800456e:	608b      	str	r3, [r1, #8]
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <LL_RCC_GetAHBPrescaler>:
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800458a:	4618      	mov	r0, r3
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <LL_RCC_GetAHB4Prescaler>:
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800459c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80045a0:	011b      	lsls	r3, r3, #4
 80045a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <LL_RCC_GetAPB1Prescaler>:
{
 80045b0:	b480      	push	{r7}
 80045b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80045b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80045be:	4618      	mov	r0, r3
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <LL_RCC_GetAPB2Prescaler>:
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80045cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80045e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045f2:	6013      	str	r3, [r2, #0]
}
 80045f4:	bf00      	nop
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80045fe:	b480      	push	{r7}
 8004600:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800460c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004610:	6013      	str	r3, [r2, #0]
}
 8004612:	bf00      	nop
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800462a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800462e:	d101      	bne.n	8004634 <LL_RCC_PLL_IsReady+0x18>
 8004630:	2301      	movs	r3, #1
 8004632:	e000      	b.n	8004636 <LL_RCC_PLL_IsReady+0x1a>
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	0a1b      	lsrs	r3, r3, #8
 800464c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004650:	4618      	mov	r0, r3
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800465a:	b480      	push	{r7}
 800465c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800465e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004668:	4618      	mov	r0, r3
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004672:	b480      	push	{r7}
 8004674:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004680:	4618      	mov	r0, r3
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800468a:	b480      	push	{r7}
 800468c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800468e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	f003 0303 	and.w	r3, r3, #3
}
 8004698:	4618      	mov	r0, r3
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80046a2:	b480      	push	{r7}
 80046a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80046a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046b4:	d101      	bne.n	80046ba <LL_RCC_IsActiveFlag_HPRE+0x18>
 80046b6:	2301      	movs	r3, #1
 80046b8:	e000      	b.n	80046bc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80046c6:	b480      	push	{r7}
 80046c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80046ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80046d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046da:	d101      	bne.n	80046e0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80046dc:	2301      	movs	r3, #1
 80046de:	e000      	b.n	80046e2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80046f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80046f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004700:	d101      	bne.n	8004706 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004702:	2301      	movs	r3, #1
 8004704:	e000      	b.n	8004708 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004712:	b480      	push	{r7}
 8004714:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004720:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004724:	d101      	bne.n	800472a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004726:	2301      	movs	r3, #1
 8004728:	e000      	b.n	800472c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004736:	b480      	push	{r7}
 8004738:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800473a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004744:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004748:	d101      	bne.n	800474e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800474a:	2301      	movs	r3, #1
 800474c:	e000      	b.n	8004750 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
	...

0800475c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800475c:	b590      	push	{r4, r7, lr}
 800475e:	b08b      	sub	sp, #44	; 0x2c
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d102      	bne.n	8004770 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	f000 bcbc 	b.w	80050e8 <HAL_RCC_OscConfig+0x98c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d02e      	beq.n	80047d6 <HAL_RCC_OscConfig+0x7a>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	2b00      	cmp	r3, #0
 8004782:	d128      	bne.n	80047d6 <HAL_RCC_OscConfig+0x7a>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d122      	bne.n	80047d6 <HAL_RCC_OscConfig+0x7a>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004798:	2b00      	cmp	r3, #0
 800479a:	d11c      	bne.n	80047d6 <HAL_RCC_OscConfig+0x7a>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0320 	and.w	r3, r3, #32
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d116      	bne.n	80047d6 <HAL_RCC_OscConfig+0x7a>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0308 	and.w	r3, r3, #8
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d110      	bne.n	80047d6 <HAL_RCC_OscConfig+0x7a>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0310 	and.w	r3, r3, #16
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10a      	bne.n	80047d6 <HAL_RCC_OscConfig+0x7a>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0304 	and.w	r3, r3, #4
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d104      	bne.n	80047d6 <HAL_RCC_OscConfig+0x7a>
 80047cc:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80047d0:	48ac      	ldr	r0, [pc, #688]	; (8004a84 <HAL_RCC_OscConfig+0x328>)
 80047d2:	f7fd f9f1 	bl	8001bb8 <assert_failed>

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0320 	and.w	r3, r3, #32
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f000 80dc 	beq.w	800499c <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	69db      	ldr	r3, [r3, #28]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d008      	beq.n	80047fe <HAL_RCC_OscConfig+0xa2>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	69db      	ldr	r3, [r3, #28]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d004      	beq.n	80047fe <HAL_RCC_OscConfig+0xa2>
 80047f4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80047f8:	48a2      	ldr	r0, [pc, #648]	; (8004a84 <HAL_RCC_OscConfig+0x328>)
 80047fa:	f7fd f9dd 	bl	8001bb8 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	2bff      	cmp	r3, #255	; 0xff
 8004804:	d904      	bls.n	8004810 <HAL_RCC_OscConfig+0xb4>
 8004806:	f240 1191 	movw	r1, #401	; 0x191
 800480a:	489e      	ldr	r0, [pc, #632]	; (8004a84 <HAL_RCC_OscConfig+0x328>)
 800480c:	f7fd f9d4 	bl	8001bb8 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004814:	2b00      	cmp	r3, #0
 8004816:	d030      	beq.n	800487a <HAL_RCC_OscConfig+0x11e>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481c:	2b10      	cmp	r3, #16
 800481e:	d02c      	beq.n	800487a <HAL_RCC_OscConfig+0x11e>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	2b20      	cmp	r3, #32
 8004826:	d028      	beq.n	800487a <HAL_RCC_OscConfig+0x11e>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	2b30      	cmp	r3, #48	; 0x30
 800482e:	d024      	beq.n	800487a <HAL_RCC_OscConfig+0x11e>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004834:	2b40      	cmp	r3, #64	; 0x40
 8004836:	d020      	beq.n	800487a <HAL_RCC_OscConfig+0x11e>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	2b50      	cmp	r3, #80	; 0x50
 800483e:	d01c      	beq.n	800487a <HAL_RCC_OscConfig+0x11e>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	2b60      	cmp	r3, #96	; 0x60
 8004846:	d018      	beq.n	800487a <HAL_RCC_OscConfig+0x11e>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484c:	2b70      	cmp	r3, #112	; 0x70
 800484e:	d014      	beq.n	800487a <HAL_RCC_OscConfig+0x11e>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	2b80      	cmp	r3, #128	; 0x80
 8004856:	d010      	beq.n	800487a <HAL_RCC_OscConfig+0x11e>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485c:	2b90      	cmp	r3, #144	; 0x90
 800485e:	d00c      	beq.n	800487a <HAL_RCC_OscConfig+0x11e>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004864:	2ba0      	cmp	r3, #160	; 0xa0
 8004866:	d008      	beq.n	800487a <HAL_RCC_OscConfig+0x11e>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486c:	2bb0      	cmp	r3, #176	; 0xb0
 800486e:	d004      	beq.n	800487a <HAL_RCC_OscConfig+0x11e>
 8004870:	f44f 71c9 	mov.w	r1, #402	; 0x192
 8004874:	4883      	ldr	r0, [pc, #524]	; (8004a84 <HAL_RCC_OscConfig+0x328>)
 8004876:	f7fd f99f 	bl	8001bb8 <assert_failed>

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800487a:	f7ff fe0a 	bl	8004492 <LL_RCC_GetSysClkSource>
 800487e:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004880:	f7ff ff03 	bl	800468a <LL_RCC_PLL_GetMainSource>
 8004884:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	2b00      	cmp	r3, #0
 800488a:	d005      	beq.n	8004898 <HAL_RCC_OscConfig+0x13c>
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	2b0c      	cmp	r3, #12
 8004890:	d14b      	bne.n	800492a <HAL_RCC_OscConfig+0x1ce>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d148      	bne.n	800492a <HAL_RCC_OscConfig+0x1ce>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004898:	f7ff fd98 	bl	80043cc <LL_RCC_MSI_IsReady>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d006      	beq.n	80048b0 <HAL_RCC_OscConfig+0x154>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d102      	bne.n	80048b0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	f000 bc1c 	b.w	80050e8 <HAL_RCC_OscConfig+0x98c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80048b4:	f7ff fdaf 	bl	8004416 <LL_RCC_MSI_GetRange>
 80048b8:	4603      	mov	r3, r0
 80048ba:	429c      	cmp	r4, r3
 80048bc:	d915      	bls.n	80048ea <HAL_RCC_OscConfig+0x18e>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 ff24 	bl	8005710 <RCC_SetFlashLatencyFromMSIRange>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d002      	beq.n	80048d4 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	f000 bc0a 	b.w	80050e8 <HAL_RCC_OscConfig+0x98c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d8:	4618      	mov	r0, r3
 80048da:	f7ff fd88 	bl	80043ee <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7ff fdac 	bl	8004440 <LL_RCC_MSI_SetCalibTrimming>
 80048e8:	e013      	b.n	8004912 <HAL_RCC_OscConfig+0x1b6>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7ff fd7d 	bl	80043ee <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7ff fda1 	bl	8004440 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	4618      	mov	r0, r3
 8004904:	f000 ff04 	bl	8005710 <RCC_SetFlashLatencyFromMSIRange>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <HAL_RCC_OscConfig+0x1b6>
          {
            return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e3ea      	b.n	80050e8 <HAL_RCC_OscConfig+0x98c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 8004912:	f7fd fd77 	bl	8002404 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004916:	4b5c      	ldr	r3, [pc, #368]	; (8004a88 <HAL_RCC_OscConfig+0x32c>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4618      	mov	r0, r3
 800491c:	f7fd ff1a 	bl	8002754 <HAL_InitTick>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d039      	beq.n	800499a <HAL_RCC_OscConfig+0x23e>
        {
          return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e3de      	b.n	80050e8 <HAL_RCC_OscConfig+0x98c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d01e      	beq.n	8004970 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004932:	f7ff fd2d 	bl	8004390 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004936:	f7fd ff59 	bl	80027ec <HAL_GetTick>
 800493a:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800493c:	e008      	b.n	8004950 <HAL_RCC_OscConfig+0x1f4>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800493e:	f7fd ff55 	bl	80027ec <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d901      	bls.n	8004950 <HAL_RCC_OscConfig+0x1f4>
          {
            return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e3cb      	b.n	80050e8 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004950:	f7ff fd3c 	bl	80043cc <LL_RCC_MSI_IsReady>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0f1      	beq.n	800493e <HAL_RCC_OscConfig+0x1e2>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	4618      	mov	r0, r3
 8004960:	f7ff fd45 	bl	80043ee <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	4618      	mov	r0, r3
 800496a:	f7ff fd69 	bl	8004440 <LL_RCC_MSI_SetCalibTrimming>
 800496e:	e015      	b.n	800499c <HAL_RCC_OscConfig+0x240>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004970:	f7ff fd1d 	bl	80043ae <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004974:	f7fd ff3a 	bl	80027ec <HAL_GetTick>
 8004978:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0x232>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800497c:	f7fd ff36 	bl	80027ec <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x232>
          {
            return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e3ac      	b.n	80050e8 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_MSI_IsReady() != 0U)
 800498e:	f7ff fd1d 	bl	80043cc <LL_RCC_MSI_IsReady>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1f1      	bne.n	800497c <HAL_RCC_OscConfig+0x220>
 8004998:	e000      	b.n	800499c <HAL_RCC_OscConfig+0x240>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800499a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d072      	beq.n	8004a8e <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00e      	beq.n	80049ce <HAL_RCC_OscConfig+0x272>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b8:	d009      	beq.n	80049ce <HAL_RCC_OscConfig+0x272>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049c2:	d004      	beq.n	80049ce <HAL_RCC_OscConfig+0x272>
 80049c4:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 80049c8:	482e      	ldr	r0, [pc, #184]	; (8004a84 <HAL_RCC_OscConfig+0x328>)
 80049ca:	f7fd f8f5 	bl	8001bb8 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049ce:	f7ff fd60 	bl	8004492 <LL_RCC_GetSysClkSource>
 80049d2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049d4:	f7ff fe59 	bl	800468a <LL_RCC_PLL_GetMainSource>
 80049d8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	2b08      	cmp	r3, #8
 80049de:	d005      	beq.n	80049ec <HAL_RCC_OscConfig+0x290>
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	2b0c      	cmp	r3, #12
 80049e4:	d10d      	bne.n	8004a02 <HAL_RCC_OscConfig+0x2a6>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	2b03      	cmp	r3, #3
 80049ea:	d10a      	bne.n	8004a02 <HAL_RCC_OscConfig+0x2a6>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049ec:	f7ff fb70 	bl	80040d0 <LL_RCC_HSE_IsReady>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d04a      	beq.n	8004a8c <HAL_RCC_OscConfig+0x330>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d146      	bne.n	8004a8c <HAL_RCC_OscConfig+0x330>
      {
        return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e372      	b.n	80050e8 <HAL_RCC_OscConfig+0x98c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a0a:	d102      	bne.n	8004a12 <HAL_RCC_OscConfig+0x2b6>
 8004a0c:	f7ff fb42 	bl	8004094 <LL_RCC_HSE_Enable>
 8004a10:	e00d      	b.n	8004a2e <HAL_RCC_OscConfig+0x2d2>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a1a:	d104      	bne.n	8004a26 <HAL_RCC_OscConfig+0x2ca>
 8004a1c:	f7ff fb1c 	bl	8004058 <LL_RCC_HSE_EnableBypass>
 8004a20:	f7ff fb38 	bl	8004094 <LL_RCC_HSE_Enable>
 8004a24:	e003      	b.n	8004a2e <HAL_RCC_OscConfig+0x2d2>
 8004a26:	f7ff fb44 	bl	80040b2 <LL_RCC_HSE_Disable>
 8004a2a:	f7ff fb24 	bl	8004076 <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d012      	beq.n	8004a5c <HAL_RCC_OscConfig+0x300>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a36:	f7fd fed9 	bl	80027ec <HAL_GetTick>
 8004a3a:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004a3c:	e008      	b.n	8004a50 <HAL_RCC_OscConfig+0x2f4>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a3e:	f7fd fed5 	bl	80027ec <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b64      	cmp	r3, #100	; 0x64
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCC_OscConfig+0x2f4>
          {
            return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e34b      	b.n	80050e8 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004a50:	f7ff fb3e 	bl	80040d0 <LL_RCC_HSE_IsReady>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d0f1      	beq.n	8004a3e <HAL_RCC_OscConfig+0x2e2>
 8004a5a:	e018      	b.n	8004a8e <HAL_RCC_OscConfig+0x332>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a5c:	f7fd fec6 	bl	80027ec <HAL_GetTick>
 8004a60:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004a62:	e008      	b.n	8004a76 <HAL_RCC_OscConfig+0x31a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a64:	f7fd fec2 	bl	80027ec <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b64      	cmp	r3, #100	; 0x64
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e338      	b.n	80050e8 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004a76:	f7ff fb2b 	bl	80040d0 <LL_RCC_HSE_IsReady>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1f1      	bne.n	8004a64 <HAL_RCC_OscConfig+0x308>
 8004a80:	e005      	b.n	8004a8e <HAL_RCC_OscConfig+0x332>
 8004a82:	bf00      	nop
 8004a84:	0800f014 	.word	0x0800f014
 8004a88:	20000010 	.word	0x20000010
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d068      	beq.n	8004b6c <HAL_RCC_OscConfig+0x410>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d009      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x35a>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aaa:	d004      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x35a>
 8004aac:	f240 212d 	movw	r1, #557	; 0x22d
 8004ab0:	48b0      	ldr	r0, [pc, #704]	; (8004d74 <HAL_RCC_OscConfig+0x618>)
 8004ab2:	f7fd f881 	bl	8001bb8 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	2b7f      	cmp	r3, #127	; 0x7f
 8004abc:	d904      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x36c>
 8004abe:	f240 212e 	movw	r1, #558	; 0x22e
 8004ac2:	48ac      	ldr	r0, [pc, #688]	; (8004d74 <HAL_RCC_OscConfig+0x618>)
 8004ac4:	f7fd f878 	bl	8001bb8 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ac8:	f7ff fce3 	bl	8004492 <LL_RCC_GetSysClkSource>
 8004acc:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ace:	f7ff fddc 	bl	800468a <LL_RCC_PLL_GetMainSource>
 8004ad2:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	d005      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x38a>
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	2b0c      	cmp	r3, #12
 8004ade:	d113      	bne.n	8004b08 <HAL_RCC_OscConfig+0x3ac>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d110      	bne.n	8004b08 <HAL_RCC_OscConfig+0x3ac>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ae6:	f7ff fb23 	bl	8004130 <LL_RCC_HSI_IsReady>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d005      	beq.n	8004afc <HAL_RCC_OscConfig+0x3a0>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <HAL_RCC_OscConfig+0x3a0>
      {
        return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e2f5      	b.n	80050e8 <HAL_RCC_OscConfig+0x98c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7ff fb27 	bl	8004154 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b06:	e031      	b.n	8004b6c <HAL_RCC_OscConfig+0x410>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d019      	beq.n	8004b44 <HAL_RCC_OscConfig+0x3e8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b10:	f7ff faf0 	bl	80040f4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b14:	f7fd fe6a 	bl	80027ec <HAL_GetTick>
 8004b18:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004b1a:	e008      	b.n	8004b2e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b1c:	f7fd fe66 	bl	80027ec <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e2dc      	b.n	80050e8 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004b2e:	f7ff faff 	bl	8004130 <LL_RCC_HSI_IsReady>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d0f1      	beq.n	8004b1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7ff fb09 	bl	8004154 <LL_RCC_HSI_SetCalibTrimming>
 8004b42:	e013      	b.n	8004b6c <HAL_RCC_OscConfig+0x410>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b44:	f7ff fae5 	bl	8004112 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b48:	f7fd fe50 	bl	80027ec <HAL_GetTick>
 8004b4c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b50:	f7fd fe4c 	bl	80027ec <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e2c2      	b.n	80050e8 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004b62:	f7ff fae5 	bl	8004130 <LL_RCC_HSI_IsReady>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1f1      	bne.n	8004b50 <HAL_RCC_OscConfig+0x3f4>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0308 	and.w	r3, r3, #8
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d106      	bne.n	8004b86 <HAL_RCC_OscConfig+0x42a>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 80b5 	beq.w	8004cf0 <HAL_RCC_OscConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d008      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x444>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	2b05      	cmp	r3, #5
 8004b94:	d004      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x444>
 8004b96:	f240 2172 	movw	r1, #626	; 0x272
 8004b9a:	4876      	ldr	r0, [pc, #472]	; (8004d74 <HAL_RCC_OscConfig+0x618>)
 8004b9c:	f7fd f80c 	bl	8001bb8 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d07b      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x544>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0310 	and.w	r3, r3, #16
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d04f      	beq.n	8004c54 <HAL_RCC_OscConfig+0x4f8>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	2b0f      	cmp	r3, #15
 8004bba:	d904      	bls.n	8004bc6 <HAL_RCC_OscConfig+0x46a>
 8004bbc:	f240 217a 	movw	r1, #634	; 0x27a
 8004bc0:	486c      	ldr	r0, [pc, #432]	; (8004d74 <HAL_RCC_OscConfig+0x618>)
 8004bc2:	f7fc fff9 	bl	8001bb8 <assert_failed>

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004bc6:	f7ff fb86 	bl	80042d6 <LL_RCC_LSI1_IsReady>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d113      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x49c>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004bd0:	f7ff fb5f 	bl	8004292 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004bd4:	f7fd fe0a 	bl	80027ec <HAL_GetTick>
 8004bd8:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004bda:	e008      	b.n	8004bee <HAL_RCC_OscConfig+0x492>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004bdc:	f7fd fe06 	bl	80027ec <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_OscConfig+0x492>
            {
              return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e27c      	b.n	80050e8 <HAL_RCC_OscConfig+0x98c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004bee:	f7ff fb72 	bl	80042d6 <LL_RCC_LSI1_IsReady>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d0f1      	beq.n	8004bdc <HAL_RCC_OscConfig+0x480>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004bf8:	f7ff fb7f 	bl	80042fa <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bfc:	f7fd fdf6 	bl	80027ec <HAL_GetTick>
 8004c00:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0x4ba>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004c04:	f7fd fdf2 	bl	80027ec <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b03      	cmp	r3, #3
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x4ba>
          {
            return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e268      	b.n	80050e8 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004c16:	f7ff fb92 	bl	800433e <LL_RCC_LSI2_IsReady>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d0f1      	beq.n	8004c04 <HAL_RCC_OscConfig+0x4a8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7ff fb9c 	bl	8004362 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004c2a:	f7ff fb43 	bl	80042b4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2e:	f7fd fddd 	bl	80027ec <HAL_GetTick>
 8004c32:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004c34:	e008      	b.n	8004c48 <HAL_RCC_OscConfig+0x4ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004c36:	f7fd fdd9 	bl	80027ec <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d901      	bls.n	8004c48 <HAL_RCC_OscConfig+0x4ec>
          {
            return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e24f      	b.n	80050e8 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004c48:	f7ff fb45 	bl	80042d6 <LL_RCC_LSI1_IsReady>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1f1      	bne.n	8004c36 <HAL_RCC_OscConfig+0x4da>
 8004c52:	e04d      	b.n	8004cf0 <HAL_RCC_OscConfig+0x594>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004c54:	f7ff fb1d 	bl	8004292 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c58:	f7fd fdc8 	bl	80027ec <HAL_GetTick>
 8004c5c:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0x516>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004c60:	f7fd fdc4 	bl	80027ec <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x516>
          {
            return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e23a      	b.n	80050e8 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004c72:	f7ff fb30 	bl	80042d6 <LL_RCC_LSI1_IsReady>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d0f1      	beq.n	8004c60 <HAL_RCC_OscConfig+0x504>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004c7c:	f7ff fb4e 	bl	800431c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004c80:	e008      	b.n	8004c94 <HAL_RCC_OscConfig+0x538>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004c82:	f7fd fdb3 	bl	80027ec <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	2b03      	cmp	r3, #3
 8004c8e:	d901      	bls.n	8004c94 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e229      	b.n	80050e8 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004c94:	f7ff fb53 	bl	800433e <LL_RCC_LSI2_IsReady>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1f1      	bne.n	8004c82 <HAL_RCC_OscConfig+0x526>
 8004c9e:	e027      	b.n	8004cf0 <HAL_RCC_OscConfig+0x594>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004ca0:	f7ff fb3c 	bl	800431c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca4:	f7fd fda2 	bl	80027ec <HAL_GetTick>
 8004ca8:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004caa:	e008      	b.n	8004cbe <HAL_RCC_OscConfig+0x562>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004cac:	f7fd fd9e 	bl	80027ec <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b03      	cmp	r3, #3
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x562>
        {
          return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e214      	b.n	80050e8 <HAL_RCC_OscConfig+0x98c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004cbe:	f7ff fb3e 	bl	800433e <LL_RCC_LSI2_IsReady>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1f1      	bne.n	8004cac <HAL_RCC_OscConfig+0x550>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004cc8:	f7ff faf4 	bl	80042b4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ccc:	f7fd fd8e 	bl	80027ec <HAL_GetTick>
 8004cd0:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004cd2:	e008      	b.n	8004ce6 <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004cd4:	f7fd fd8a 	bl	80027ec <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e200      	b.n	80050e8 <HAL_RCC_OscConfig+0x98c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004ce6:	f7ff faf6 	bl	80042d6 <LL_RCC_LSI1_IsReady>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1f1      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x578>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0304 	and.w	r3, r3, #4
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d070      	beq.n	8004dde <HAL_RCC_OscConfig+0x682>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00c      	beq.n	8004d1e <HAL_RCC_OscConfig+0x5c2>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d008      	beq.n	8004d1e <HAL_RCC_OscConfig+0x5c2>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	2b05      	cmp	r3, #5
 8004d12:	d004      	beq.n	8004d1e <HAL_RCC_OscConfig+0x5c2>
 8004d14:	f240 21f9 	movw	r1, #761	; 0x2f9
 8004d18:	4816      	ldr	r0, [pc, #88]	; (8004d74 <HAL_RCC_OscConfig+0x618>)
 8004d1a:	f7fc ff4d 	bl	8001bb8 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d1e:	4b16      	ldr	r3, [pc, #88]	; (8004d78 <HAL_RCC_OscConfig+0x61c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d114      	bne.n	8004d54 <HAL_RCC_OscConfig+0x5f8>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004d2a:	f7ff f955 	bl	8003fd8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d2e:	f7fd fd5d 	bl	80027ec <HAL_GetTick>
 8004d32:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d34:	e008      	b.n	8004d48 <HAL_RCC_OscConfig+0x5ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d36:	f7fd fd59 	bl	80027ec <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d901      	bls.n	8004d48 <HAL_RCC_OscConfig+0x5ec>
        {
          return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e1cf      	b.n	80050e8 <HAL_RCC_OscConfig+0x98c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d48:	4b0b      	ldr	r3, [pc, #44]	; (8004d78 <HAL_RCC_OscConfig+0x61c>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d0f0      	beq.n	8004d36 <HAL_RCC_OscConfig+0x5da>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d102      	bne.n	8004d62 <HAL_RCC_OscConfig+0x606>
 8004d5c:	f7ff fa43 	bl	80041e6 <LL_RCC_LSE_Enable>
 8004d60:	e010      	b.n	8004d84 <HAL_RCC_OscConfig+0x628>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	2b05      	cmp	r3, #5
 8004d68:	d108      	bne.n	8004d7c <HAL_RCC_OscConfig+0x620>
 8004d6a:	f7ff fa5e 	bl	800422a <LL_RCC_LSE_EnableBypass>
 8004d6e:	f7ff fa3a 	bl	80041e6 <LL_RCC_LSE_Enable>
 8004d72:	e007      	b.n	8004d84 <HAL_RCC_OscConfig+0x628>
 8004d74:	0800f014 	.word	0x0800f014
 8004d78:	58000400 	.word	0x58000400
 8004d7c:	f7ff fa44 	bl	8004208 <LL_RCC_LSE_Disable>
 8004d80:	f7ff fa64 	bl	800424c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d014      	beq.n	8004db6 <HAL_RCC_OscConfig+0x65a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d8c:	f7fd fd2e 	bl	80027ec <HAL_GetTick>
 8004d90:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004d92:	e00a      	b.n	8004daa <HAL_RCC_OscConfig+0x64e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d94:	f7fd fd2a 	bl	80027ec <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d901      	bls.n	8004daa <HAL_RCC_OscConfig+0x64e>
        {
          return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e19e      	b.n	80050e8 <HAL_RCC_OscConfig+0x98c>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004daa:	f7ff fa60 	bl	800426e <LL_RCC_LSE_IsReady>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d0ef      	beq.n	8004d94 <HAL_RCC_OscConfig+0x638>
 8004db4:	e013      	b.n	8004dde <HAL_RCC_OscConfig+0x682>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db6:	f7fd fd19 	bl	80027ec <HAL_GetTick>
 8004dba:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004dbc:	e00a      	b.n	8004dd4 <HAL_RCC_OscConfig+0x678>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dbe:	f7fd fd15 	bl	80027ec <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d901      	bls.n	8004dd4 <HAL_RCC_OscConfig+0x678>
        {
          return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e189      	b.n	80050e8 <HAL_RCC_OscConfig+0x98c>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004dd4:	f7ff fa4b 	bl	800426e <LL_RCC_LSE_IsReady>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1ef      	bne.n	8004dbe <HAL_RCC_OscConfig+0x662>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d039      	beq.n	8004e5e <HAL_RCC_OscConfig+0x702>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d008      	beq.n	8004e04 <HAL_RCC_OscConfig+0x6a8>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d004      	beq.n	8004e04 <HAL_RCC_OscConfig+0x6a8>
 8004dfa:	f240 3135 	movw	r1, #821	; 0x335
 8004dfe:	489f      	ldr	r0, [pc, #636]	; (800507c <HAL_RCC_OscConfig+0x920>)
 8004e00:	f7fc feda 	bl	8001bb8 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d014      	beq.n	8004e36 <HAL_RCC_OscConfig+0x6da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e0c:	f7ff f9b7 	bl	800417e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e10:	f7fd fcec 	bl	80027ec <HAL_GetTick>
 8004e14:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004e16:	e008      	b.n	8004e2a <HAL_RCC_OscConfig+0x6ce>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e18:	f7fd fce8 	bl	80027ec <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d901      	bls.n	8004e2a <HAL_RCC_OscConfig+0x6ce>
        {
          return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e15e      	b.n	80050e8 <HAL_RCC_OscConfig+0x98c>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004e2a:	f7ff f9ca 	bl	80041c2 <LL_RCC_HSI48_IsReady>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d0f1      	beq.n	8004e18 <HAL_RCC_OscConfig+0x6bc>
 8004e34:	e013      	b.n	8004e5e <HAL_RCC_OscConfig+0x702>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e36:	f7ff f9b3 	bl	80041a0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e3a:	f7fd fcd7 	bl	80027ec <HAL_GetTick>
 8004e3e:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004e40:	e008      	b.n	8004e54 <HAL_RCC_OscConfig+0x6f8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e42:	f7fd fcd3 	bl	80027ec <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d901      	bls.n	8004e54 <HAL_RCC_OscConfig+0x6f8>
        {
          return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e149      	b.n	80050e8 <HAL_RCC_OscConfig+0x98c>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004e54:	f7ff f9b5 	bl	80041c2 <LL_RCC_HSI48_IsReady>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1f1      	bne.n	8004e42 <HAL_RCC_OscConfig+0x6e6>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00c      	beq.n	8004e80 <HAL_RCC_OscConfig+0x724>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d008      	beq.n	8004e80 <HAL_RCC_OscConfig+0x724>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d004      	beq.n	8004e80 <HAL_RCC_OscConfig+0x724>
 8004e76:	f240 315d 	movw	r1, #861	; 0x35d
 8004e7a:	4880      	ldr	r0, [pc, #512]	; (800507c <HAL_RCC_OscConfig+0x920>)
 8004e7c:	f7fc fe9c 	bl	8001bb8 <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f000 812e 	beq.w	80050e6 <HAL_RCC_OscConfig+0x98a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e8a:	f7ff fb02 	bl	8004492 <LL_RCC_GetSysClkSource>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b0c      	cmp	r3, #12
 8004e92:	f000 80ec 	beq.w	800506e <HAL_RCC_OscConfig+0x912>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	f040 80c0 	bne.w	8005020 <HAL_RCC_OscConfig+0x8c4>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d010      	beq.n	8004eca <HAL_RCC_OscConfig+0x76e>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d00c      	beq.n	8004eca <HAL_RCC_OscConfig+0x76e>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d008      	beq.n	8004eca <HAL_RCC_OscConfig+0x76e>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebc:	2b03      	cmp	r3, #3
 8004ebe:	d004      	beq.n	8004eca <HAL_RCC_OscConfig+0x76e>
 8004ec0:	f240 3167 	movw	r1, #871	; 0x367
 8004ec4:	486d      	ldr	r0, [pc, #436]	; (800507c <HAL_RCC_OscConfig+0x920>)
 8004ec6:	f7fc fe77 	bl	8001bb8 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d020      	beq.n	8004f14 <HAL_RCC_OscConfig+0x7b8>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed6:	2b10      	cmp	r3, #16
 8004ed8:	d01c      	beq.n	8004f14 <HAL_RCC_OscConfig+0x7b8>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ede:	2b20      	cmp	r3, #32
 8004ee0:	d018      	beq.n	8004f14 <HAL_RCC_OscConfig+0x7b8>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee6:	2b30      	cmp	r3, #48	; 0x30
 8004ee8:	d014      	beq.n	8004f14 <HAL_RCC_OscConfig+0x7b8>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eee:	2b40      	cmp	r3, #64	; 0x40
 8004ef0:	d010      	beq.n	8004f14 <HAL_RCC_OscConfig+0x7b8>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef6:	2b50      	cmp	r3, #80	; 0x50
 8004ef8:	d00c      	beq.n	8004f14 <HAL_RCC_OscConfig+0x7b8>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004efe:	2b60      	cmp	r3, #96	; 0x60
 8004f00:	d008      	beq.n	8004f14 <HAL_RCC_OscConfig+0x7b8>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f06:	2b70      	cmp	r3, #112	; 0x70
 8004f08:	d004      	beq.n	8004f14 <HAL_RCC_OscConfig+0x7b8>
 8004f0a:	f44f 715a 	mov.w	r1, #872	; 0x368
 8004f0e:	485b      	ldr	r0, [pc, #364]	; (800507c <HAL_RCC_OscConfig+0x920>)
 8004f10:	f7fc fe52 	bl	8001bb8 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f18:	2b05      	cmp	r3, #5
 8004f1a:	d903      	bls.n	8004f24 <HAL_RCC_OscConfig+0x7c8>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f20:	2b7f      	cmp	r3, #127	; 0x7f
 8004f22:	d904      	bls.n	8004f2e <HAL_RCC_OscConfig+0x7d2>
 8004f24:	f240 3169 	movw	r1, #873	; 0x369
 8004f28:	4854      	ldr	r0, [pc, #336]	; (800507c <HAL_RCC_OscConfig+0x920>)
 8004f2a:	f7fc fe45 	bl	8001bb8 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f36:	d304      	bcc.n	8004f42 <HAL_RCC_OscConfig+0x7e6>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f3c:	f5b3 1f78 	cmp.w	r3, #4063232	; 0x3e0000
 8004f40:	d904      	bls.n	8004f4c <HAL_RCC_OscConfig+0x7f0>
 8004f42:	f240 316a 	movw	r1, #874	; 0x36a
 8004f46:	484d      	ldr	r0, [pc, #308]	; (800507c <HAL_RCC_OscConfig+0x920>)
 8004f48:	f7fc fe36 	bl	8001bb8 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f54:	d304      	bcc.n	8004f60 <HAL_RCC_OscConfig+0x804>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5a:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8004f5e:	d904      	bls.n	8004f6a <HAL_RCC_OscConfig+0x80e>
 8004f60:	f240 316b 	movw	r1, #875	; 0x36b
 8004f64:	4845      	ldr	r0, [pc, #276]	; (800507c <HAL_RCC_OscConfig+0x920>)
 8004f66:	f7fc fe27 	bl	8001bb8 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f72:	d304      	bcc.n	8004f7e <HAL_RCC_OscConfig+0x822>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f78:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8004f7c:	d904      	bls.n	8004f88 <HAL_RCC_OscConfig+0x82c>
 8004f7e:	f44f 715b 	mov.w	r1, #876	; 0x36c
 8004f82:	483e      	ldr	r0, [pc, #248]	; (800507c <HAL_RCC_OscConfig+0x920>)
 8004f84:	f7fc fe18 	bl	8001bb8 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f88:	f7ff fb39 	bl	80045fe <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f8c:	f7fd fc2e 	bl	80027ec <HAL_GetTick>
 8004f90:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004f92:	e008      	b.n	8004fa6 <HAL_RCC_OscConfig+0x84a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f94:	f7fd fc2a 	bl	80027ec <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x84a>
          {
            return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e0a0      	b.n	80050e8 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004fa6:	f7ff fb39 	bl	800461c <LL_RCC_PLL_IsReady>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1f1      	bne.n	8004f94 <HAL_RCC_OscConfig+0x838>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fb4:	68da      	ldr	r2, [r3, #12]
 8004fb6:	4b32      	ldr	r3, [pc, #200]	; (8005080 <HAL_RCC_OscConfig+0x924>)
 8004fb8:	4013      	ands	r3, r2
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004fc2:	4311      	orrs	r1, r2
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004fc8:	0212      	lsls	r2, r2, #8
 8004fca:	4311      	orrs	r1, r2
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004fd0:	4311      	orrs	r1, r2
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004fd6:	4311      	orrs	r1, r2
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fe6:	f7ff fafb 	bl	80045e0 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ff8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ffa:	f7fd fbf7 	bl	80027ec <HAL_GetTick>
 8004ffe:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8005000:	e008      	b.n	8005014 <HAL_RCC_OscConfig+0x8b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005002:	f7fd fbf3 	bl	80027ec <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d901      	bls.n	8005014 <HAL_RCC_OscConfig+0x8b8>
          {
            return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e069      	b.n	80050e8 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_PLL_IsReady() == 0U)
 8005014:	f7ff fb02 	bl	800461c <LL_RCC_PLL_IsReady>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d0f1      	beq.n	8005002 <HAL_RCC_OscConfig+0x8a6>
 800501e:	e062      	b.n	80050e6 <HAL_RCC_OscConfig+0x98a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005020:	f7ff faed 	bl	80045fe <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800502e:	f023 0303 	bic.w	r3, r3, #3
 8005032:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8005034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800503e:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005042:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005046:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005048:	f7fd fbd0 	bl	80027ec <HAL_GetTick>
 800504c:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800504e:	e008      	b.n	8005062 <HAL_RCC_OscConfig+0x906>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005050:	f7fd fbcc 	bl	80027ec <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0x906>
          {
            return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e042      	b.n	80050e8 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005062:	f7ff fadb 	bl	800461c <LL_RCC_PLL_IsReady>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1f1      	bne.n	8005050 <HAL_RCC_OscConfig+0x8f4>
 800506c:	e03b      	b.n	80050e6 <HAL_RCC_OscConfig+0x98a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005072:	2b01      	cmp	r3, #1
 8005074:	d106      	bne.n	8005084 <HAL_RCC_OscConfig+0x928>
      {
        return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e036      	b.n	80050e8 <HAL_RCC_OscConfig+0x98c>
 800507a:	bf00      	nop
 800507c:	0800f014 	.word	0x0800f014
 8005080:	11c1808c 	.word	0x11c1808c
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8005084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	f003 0203 	and.w	r2, r3, #3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005096:	429a      	cmp	r2, r3
 8005098:	d123      	bne.n	80050e2 <HAL_RCC_OscConfig+0x986>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d11c      	bne.n	80050e2 <HAL_RCC_OscConfig+0x986>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	0a1b      	lsrs	r3, r3, #8
 80050ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d114      	bne.n	80050e2 <HAL_RCC_OscConfig+0x986>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d10d      	bne.n	80050e2 <HAL_RCC_OscConfig+0x986>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d106      	bne.n	80050e2 <HAL_RCC_OscConfig+0x986>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80050de:	429a      	cmp	r2, r3
 80050e0:	d001      	beq.n	80050e6 <HAL_RCC_OscConfig+0x98a>
        {
          return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e000      	b.n	80050e8 <HAL_RCC_OscConfig+0x98c>
        }
      }
    }
  }
  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	372c      	adds	r7, #44	; 0x2c
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd90      	pop	{r4, r7, pc}

080050f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d101      	bne.n	8005104 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e253      	b.n	80055ac <HAL_RCC_ClockConfig+0x4bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d003      	beq.n	8005114 <HAL_RCC_ClockConfig+0x24>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2b6f      	cmp	r3, #111	; 0x6f
 8005112:	d904      	bls.n	800511e <HAL_RCC_ClockConfig+0x2e>
 8005114:	f240 31fd 	movw	r1, #1021	; 0x3fd
 8005118:	489b      	ldr	r0, [pc, #620]	; (8005388 <HAL_RCC_ClockConfig+0x298>)
 800511a:	f7fc fd4d 	bl	8001bb8 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00d      	beq.n	8005140 <HAL_RCC_ClockConfig+0x50>
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d00a      	beq.n	8005140 <HAL_RCC_ClockConfig+0x50>
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	2b02      	cmp	r3, #2
 800512e:	d007      	beq.n	8005140 <HAL_RCC_ClockConfig+0x50>
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	2b03      	cmp	r3, #3
 8005134:	d004      	beq.n	8005140 <HAL_RCC_ClockConfig+0x50>
 8005136:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800513a:	4893      	ldr	r0, [pc, #588]	; (8005388 <HAL_RCC_ClockConfig+0x298>)
 800513c:	f7fc fd3c 	bl	8001bb8 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005140:	4b92      	ldr	r3, [pc, #584]	; (800538c <HAL_RCC_ClockConfig+0x29c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	683a      	ldr	r2, [r7, #0]
 800514a:	429a      	cmp	r2, r3
 800514c:	d91b      	bls.n	8005186 <HAL_RCC_ClockConfig+0x96>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800514e:	4b8f      	ldr	r3, [pc, #572]	; (800538c <HAL_RCC_ClockConfig+0x29c>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f023 0207 	bic.w	r2, r3, #7
 8005156:	498d      	ldr	r1, [pc, #564]	; (800538c <HAL_RCC_ClockConfig+0x29c>)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	4313      	orrs	r3, r2
 800515c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800515e:	f7fd fb45 	bl	80027ec <HAL_GetTick>
 8005162:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005164:	e008      	b.n	8005178 <HAL_RCC_ClockConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005166:	f7fd fb41 	bl	80027ec <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	2b02      	cmp	r3, #2
 8005172:	d901      	bls.n	8005178 <HAL_RCC_ClockConfig+0x88>
      {
        return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e219      	b.n	80055ac <HAL_RCC_ClockConfig+0x4bc>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005178:	4b84      	ldr	r3, [pc, #528]	; (800538c <HAL_RCC_ClockConfig+0x29c>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0307 	and.w	r3, r3, #7
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	429a      	cmp	r2, r3
 8005184:	d1ef      	bne.n	8005166 <HAL_RCC_ClockConfig+0x76>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d053      	beq.n	800523a <HAL_RCC_ClockConfig+0x14a>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d038      	beq.n	800520c <HAL_RCC_ClockConfig+0x11c>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	2b80      	cmp	r3, #128	; 0x80
 80051a0:	d034      	beq.n	800520c <HAL_RCC_ClockConfig+0x11c>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	2b10      	cmp	r3, #16
 80051a8:	d030      	beq.n	800520c <HAL_RCC_ClockConfig+0x11c>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	2b90      	cmp	r3, #144	; 0x90
 80051b0:	d02c      	beq.n	800520c <HAL_RCC_ClockConfig+0x11c>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	2b20      	cmp	r3, #32
 80051b8:	d028      	beq.n	800520c <HAL_RCC_ClockConfig+0x11c>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	2b50      	cmp	r3, #80	; 0x50
 80051c0:	d024      	beq.n	800520c <HAL_RCC_ClockConfig+0x11c>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	2ba0      	cmp	r3, #160	; 0xa0
 80051c8:	d020      	beq.n	800520c <HAL_RCC_ClockConfig+0x11c>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	2b60      	cmp	r3, #96	; 0x60
 80051d0:	d01c      	beq.n	800520c <HAL_RCC_ClockConfig+0x11c>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	2bb0      	cmp	r3, #176	; 0xb0
 80051d8:	d018      	beq.n	800520c <HAL_RCC_ClockConfig+0x11c>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	2b70      	cmp	r3, #112	; 0x70
 80051e0:	d014      	beq.n	800520c <HAL_RCC_ClockConfig+0x11c>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	2bc0      	cmp	r3, #192	; 0xc0
 80051e8:	d010      	beq.n	800520c <HAL_RCC_ClockConfig+0x11c>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	2bd0      	cmp	r3, #208	; 0xd0
 80051f0:	d00c      	beq.n	800520c <HAL_RCC_ClockConfig+0x11c>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	2be0      	cmp	r3, #224	; 0xe0
 80051f8:	d008      	beq.n	800520c <HAL_RCC_ClockConfig+0x11c>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	2bf0      	cmp	r3, #240	; 0xf0
 8005200:	d004      	beq.n	800520c <HAL_RCC_ClockConfig+0x11c>
 8005202:	f240 411b 	movw	r1, #1051	; 0x41b
 8005206:	4860      	ldr	r0, [pc, #384]	; (8005388 <HAL_RCC_ClockConfig+0x298>)
 8005208:	f7fc fcd6 	bl	8001bb8 <assert_failed>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	4618      	mov	r0, r3
 8005212:	f7ff f94a 	bl	80044aa <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005216:	f7fd fae9 	bl	80027ec <HAL_GetTick>
 800521a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800521c:	e008      	b.n	8005230 <HAL_RCC_ClockConfig+0x140>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800521e:	f7fd fae5 	bl	80027ec <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	2b02      	cmp	r3, #2
 800522a:	d901      	bls.n	8005230 <HAL_RCC_ClockConfig+0x140>
      {
        return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e1bd      	b.n	80055ac <HAL_RCC_ClockConfig+0x4bc>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005230:	f7ff fa37 	bl	80046a2 <LL_RCC_IsActiveFlag_HPRE>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d0f1      	beq.n	800521e <HAL_RCC_ClockConfig+0x12e>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0320 	and.w	r3, r3, #32
 8005242:	2b00      	cmp	r3, #0
 8005244:	d053      	beq.n	80052ee <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d038      	beq.n	80052c0 <HAL_RCC_ClockConfig+0x1d0>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	2b80      	cmp	r3, #128	; 0x80
 8005254:	d034      	beq.n	80052c0 <HAL_RCC_ClockConfig+0x1d0>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	2b10      	cmp	r3, #16
 800525c:	d030      	beq.n	80052c0 <HAL_RCC_ClockConfig+0x1d0>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	2b90      	cmp	r3, #144	; 0x90
 8005264:	d02c      	beq.n	80052c0 <HAL_RCC_ClockConfig+0x1d0>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	2b20      	cmp	r3, #32
 800526c:	d028      	beq.n	80052c0 <HAL_RCC_ClockConfig+0x1d0>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	2b50      	cmp	r3, #80	; 0x50
 8005274:	d024      	beq.n	80052c0 <HAL_RCC_ClockConfig+0x1d0>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	2ba0      	cmp	r3, #160	; 0xa0
 800527c:	d020      	beq.n	80052c0 <HAL_RCC_ClockConfig+0x1d0>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	2b60      	cmp	r3, #96	; 0x60
 8005284:	d01c      	beq.n	80052c0 <HAL_RCC_ClockConfig+0x1d0>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	2bb0      	cmp	r3, #176	; 0xb0
 800528c:	d018      	beq.n	80052c0 <HAL_RCC_ClockConfig+0x1d0>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	2b70      	cmp	r3, #112	; 0x70
 8005294:	d014      	beq.n	80052c0 <HAL_RCC_ClockConfig+0x1d0>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	2bc0      	cmp	r3, #192	; 0xc0
 800529c:	d010      	beq.n	80052c0 <HAL_RCC_ClockConfig+0x1d0>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	2bd0      	cmp	r3, #208	; 0xd0
 80052a4:	d00c      	beq.n	80052c0 <HAL_RCC_ClockConfig+0x1d0>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	2be0      	cmp	r3, #224	; 0xe0
 80052ac:	d008      	beq.n	80052c0 <HAL_RCC_ClockConfig+0x1d0>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	2bf0      	cmp	r3, #240	; 0xf0
 80052b4:	d004      	beq.n	80052c0 <HAL_RCC_ClockConfig+0x1d0>
 80052b6:	f240 412c 	movw	r1, #1068	; 0x42c
 80052ba:	4833      	ldr	r0, [pc, #204]	; (8005388 <HAL_RCC_ClockConfig+0x298>)
 80052bc:	f7fc fc7c 	bl	8001bb8 <assert_failed>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7ff f904 	bl	80044d2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80052ca:	f7fd fa8f 	bl	80027ec <HAL_GetTick>
 80052ce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80052d0:	e008      	b.n	80052e4 <HAL_RCC_ClockConfig+0x1f4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80052d2:	f7fd fa8b 	bl	80027ec <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d901      	bls.n	80052e4 <HAL_RCC_ClockConfig+0x1f4>
      {
        return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e163      	b.n	80055ac <HAL_RCC_ClockConfig+0x4bc>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80052e4:	f7ff f9ef 	bl	80046c6 <LL_RCC_IsActiveFlag_C2HPRE>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d0f1      	beq.n	80052d2 <HAL_RCC_ClockConfig+0x1e2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d058      	beq.n	80053ac <HAL_RCC_ClockConfig+0x2bc>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d038      	beq.n	8005374 <HAL_RCC_ClockConfig+0x284>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	2b80      	cmp	r3, #128	; 0x80
 8005308:	d034      	beq.n	8005374 <HAL_RCC_ClockConfig+0x284>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	2b10      	cmp	r3, #16
 8005310:	d030      	beq.n	8005374 <HAL_RCC_ClockConfig+0x284>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	2b90      	cmp	r3, #144	; 0x90
 8005318:	d02c      	beq.n	8005374 <HAL_RCC_ClockConfig+0x284>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	2b20      	cmp	r3, #32
 8005320:	d028      	beq.n	8005374 <HAL_RCC_ClockConfig+0x284>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	2b50      	cmp	r3, #80	; 0x50
 8005328:	d024      	beq.n	8005374 <HAL_RCC_ClockConfig+0x284>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	2ba0      	cmp	r3, #160	; 0xa0
 8005330:	d020      	beq.n	8005374 <HAL_RCC_ClockConfig+0x284>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	2b60      	cmp	r3, #96	; 0x60
 8005338:	d01c      	beq.n	8005374 <HAL_RCC_ClockConfig+0x284>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	2bb0      	cmp	r3, #176	; 0xb0
 8005340:	d018      	beq.n	8005374 <HAL_RCC_ClockConfig+0x284>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	2b70      	cmp	r3, #112	; 0x70
 8005348:	d014      	beq.n	8005374 <HAL_RCC_ClockConfig+0x284>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	2bc0      	cmp	r3, #192	; 0xc0
 8005350:	d010      	beq.n	8005374 <HAL_RCC_ClockConfig+0x284>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	2bd0      	cmp	r3, #208	; 0xd0
 8005358:	d00c      	beq.n	8005374 <HAL_RCC_ClockConfig+0x284>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	2be0      	cmp	r3, #224	; 0xe0
 8005360:	d008      	beq.n	8005374 <HAL_RCC_ClockConfig+0x284>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	2bf0      	cmp	r3, #240	; 0xf0
 8005368:	d004      	beq.n	8005374 <HAL_RCC_ClockConfig+0x284>
 800536a:	f240 413c 	movw	r1, #1084	; 0x43c
 800536e:	4806      	ldr	r0, [pc, #24]	; (8005388 <HAL_RCC_ClockConfig+0x298>)
 8005370:	f7fc fc22 	bl	8001bb8 <assert_failed>
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	4618      	mov	r0, r3
 800537a:	f7ff f8c0 	bl	80044fe <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800537e:	f7fd fa35 	bl	80027ec <HAL_GetTick>
 8005382:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005384:	e00d      	b.n	80053a2 <HAL_RCC_ClockConfig+0x2b2>
 8005386:	bf00      	nop
 8005388:	0800f014 	.word	0x0800f014
 800538c:	58004000 	.word	0x58004000
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005390:	f7fd fa2c 	bl	80027ec <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	2b02      	cmp	r3, #2
 800539c:	d901      	bls.n	80053a2 <HAL_RCC_ClockConfig+0x2b2>
      {
        return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e104      	b.n	80055ac <HAL_RCC_ClockConfig+0x4bc>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80053a2:	f7ff f9a3 	bl	80046ec <LL_RCC_IsActiveFlag_SHDHPRE>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d0f1      	beq.n	8005390 <HAL_RCC_ClockConfig+0x2a0>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0304 	and.w	r3, r3, #4
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d033      	beq.n	8005420 <HAL_RCC_ClockConfig+0x330>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d018      	beq.n	80053f2 <HAL_RCC_ClockConfig+0x302>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053c8:	d013      	beq.n	80053f2 <HAL_RCC_ClockConfig+0x302>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80053d2:	d00e      	beq.n	80053f2 <HAL_RCC_ClockConfig+0x302>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80053dc:	d009      	beq.n	80053f2 <HAL_RCC_ClockConfig+0x302>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053e6:	d004      	beq.n	80053f2 <HAL_RCC_ClockConfig+0x302>
 80053e8:	f240 414d 	movw	r1, #1101	; 0x44d
 80053ec:	4871      	ldr	r0, [pc, #452]	; (80055b4 <HAL_RCC_ClockConfig+0x4c4>)
 80053ee:	f7fc fbe3 	bl	8001bb8 <assert_failed>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7ff f898 	bl	800452c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80053fc:	f7fd f9f6 	bl	80027ec <HAL_GetTick>
 8005400:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005402:	e008      	b.n	8005416 <HAL_RCC_ClockConfig+0x326>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005404:	f7fd f9f2 	bl	80027ec <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b02      	cmp	r3, #2
 8005410:	d901      	bls.n	8005416 <HAL_RCC_ClockConfig+0x326>
      {
        return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e0ca      	b.n	80055ac <HAL_RCC_ClockConfig+0x4bc>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005416:	f7ff f97c 	bl	8004712 <LL_RCC_IsActiveFlag_PPRE1>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d0f1      	beq.n	8005404 <HAL_RCC_ClockConfig+0x314>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0308 	and.w	r3, r3, #8
 8005428:	2b00      	cmp	r3, #0
 800542a:	d034      	beq.n	8005496 <HAL_RCC_ClockConfig+0x3a6>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d018      	beq.n	8005466 <HAL_RCC_ClockConfig+0x376>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800543c:	d013      	beq.n	8005466 <HAL_RCC_ClockConfig+0x376>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005446:	d00e      	beq.n	8005466 <HAL_RCC_ClockConfig+0x376>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005450:	d009      	beq.n	8005466 <HAL_RCC_ClockConfig+0x376>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800545a:	d004      	beq.n	8005466 <HAL_RCC_ClockConfig+0x376>
 800545c:	f240 415e 	movw	r1, #1118	; 0x45e
 8005460:	4854      	ldr	r0, [pc, #336]	; (80055b4 <HAL_RCC_ClockConfig+0x4c4>)
 8005462:	f7fc fba9 	bl	8001bb8 <assert_failed>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	00db      	lsls	r3, r3, #3
 800546c:	4618      	mov	r0, r3
 800546e:	f7ff f871 	bl	8004554 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005472:	f7fd f9bb 	bl	80027ec <HAL_GetTick>
 8005476:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005478:	e008      	b.n	800548c <HAL_RCC_ClockConfig+0x39c>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800547a:	f7fd f9b7 	bl	80027ec <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	2b02      	cmp	r3, #2
 8005486:	d901      	bls.n	800548c <HAL_RCC_ClockConfig+0x39c>
      {
        return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e08f      	b.n	80055ac <HAL_RCC_ClockConfig+0x4bc>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800548c:	f7ff f953 	bl	8004736 <LL_RCC_IsActiveFlag_PPRE2>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d0f1      	beq.n	800547a <HAL_RCC_ClockConfig+0x38a>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d058      	beq.n	8005554 <HAL_RCC_ClockConfig+0x464>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d010      	beq.n	80054cc <HAL_RCC_ClockConfig+0x3dc>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d00c      	beq.n	80054cc <HAL_RCC_ClockConfig+0x3dc>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d008      	beq.n	80054cc <HAL_RCC_ClockConfig+0x3dc>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	2b03      	cmp	r3, #3
 80054c0:	d004      	beq.n	80054cc <HAL_RCC_ClockConfig+0x3dc>
 80054c2:	f240 416f 	movw	r1, #1135	; 0x46f
 80054c6:	483b      	ldr	r0, [pc, #236]	; (80055b4 <HAL_RCC_ClockConfig+0x4c4>)
 80054c8:	f7fc fb76 	bl	8001bb8 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d106      	bne.n	80054e2 <HAL_RCC_ClockConfig+0x3f2>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80054d4:	f7fe fdfc 	bl	80040d0 <LL_RCC_HSE_IsReady>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d11e      	bne.n	800551c <HAL_RCC_ClockConfig+0x42c>
      {
        return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e064      	b.n	80055ac <HAL_RCC_ClockConfig+0x4bc>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	2b03      	cmp	r3, #3
 80054e8:	d106      	bne.n	80054f8 <HAL_RCC_ClockConfig+0x408>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80054ea:	f7ff f897 	bl	800461c <LL_RCC_PLL_IsReady>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d113      	bne.n	800551c <HAL_RCC_ClockConfig+0x42c>
      {
        return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e059      	b.n	80055ac <HAL_RCC_ClockConfig+0x4bc>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d106      	bne.n	800550e <HAL_RCC_ClockConfig+0x41e>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005500:	f7fe ff64 	bl	80043cc <LL_RCC_MSI_IsReady>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d108      	bne.n	800551c <HAL_RCC_ClockConfig+0x42c>
      {
        return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e04e      	b.n	80055ac <HAL_RCC_ClockConfig+0x4bc>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800550e:	f7fe fe0f 	bl	8004130 <LL_RCC_HSI_IsReady>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <HAL_RCC_ClockConfig+0x42c>
      {
        return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e047      	b.n	80055ac <HAL_RCC_ClockConfig+0x4bc>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	4618      	mov	r0, r3
 8005522:	f7fe ffa2 	bl	800446a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005526:	f7fd f961 	bl	80027ec <HAL_GetTick>
 800552a:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800552c:	e00a      	b.n	8005544 <HAL_RCC_ClockConfig+0x454>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800552e:	f7fd f95d 	bl	80027ec <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	f241 3288 	movw	r2, #5000	; 0x1388
 800553c:	4293      	cmp	r3, r2
 800553e:	d901      	bls.n	8005544 <HAL_RCC_ClockConfig+0x454>
      {
        return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e033      	b.n	80055ac <HAL_RCC_ClockConfig+0x4bc>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005544:	f7fe ffa5 	bl	8004492 <LL_RCC_GetSysClkSource>
 8005548:	4602      	mov	r2, r0
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	429a      	cmp	r2, r3
 8005552:	d1ec      	bne.n	800552e <HAL_RCC_ClockConfig+0x43e>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005554:	4b18      	ldr	r3, [pc, #96]	; (80055b8 <HAL_RCC_ClockConfig+0x4c8>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0307 	and.w	r3, r3, #7
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	429a      	cmp	r2, r3
 8005560:	d21b      	bcs.n	800559a <HAL_RCC_ClockConfig+0x4aa>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005562:	4b15      	ldr	r3, [pc, #84]	; (80055b8 <HAL_RCC_ClockConfig+0x4c8>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f023 0207 	bic.w	r2, r3, #7
 800556a:	4913      	ldr	r1, [pc, #76]	; (80055b8 <HAL_RCC_ClockConfig+0x4c8>)
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	4313      	orrs	r3, r2
 8005570:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005572:	f7fd f93b 	bl	80027ec <HAL_GetTick>
 8005576:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005578:	e008      	b.n	800558c <HAL_RCC_ClockConfig+0x49c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800557a:	f7fd f937 	bl	80027ec <HAL_GetTick>
 800557e:	4602      	mov	r2, r0
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	2b02      	cmp	r3, #2
 8005586:	d901      	bls.n	800558c <HAL_RCC_ClockConfig+0x49c>
      {
        return HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	e00f      	b.n	80055ac <HAL_RCC_ClockConfig+0x4bc>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800558c:	4b0a      	ldr	r3, [pc, #40]	; (80055b8 <HAL_RCC_ClockConfig+0x4c8>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0307 	and.w	r3, r3, #7
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	429a      	cmp	r2, r3
 8005598:	d1ef      	bne.n	800557a <HAL_RCC_ClockConfig+0x48a>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 800559a:	f7fc ff33 	bl	8002404 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800559e:	f7fd f931 	bl	8002804 <HAL_GetTickPrio>
 80055a2:	4603      	mov	r3, r0
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7fd f8d5 	bl	8002754 <HAL_InitTick>
 80055aa:	4603      	mov	r3, r0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3710      	adds	r7, #16
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	0800f014 	.word	0x0800f014
 80055b8:	58004000 	.word	0x58004000

080055bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055bc:	b590      	push	{r4, r7, lr}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055c2:	f7fe ff66 	bl	8004492 <LL_RCC_GetSysClkSource>
 80055c6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10a      	bne.n	80055e4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80055ce:	f7fe ff22 	bl	8004416 <LL_RCC_MSI_GetRange>
 80055d2:	4603      	mov	r3, r0
 80055d4:	091b      	lsrs	r3, r3, #4
 80055d6:	f003 030f 	and.w	r3, r3, #15
 80055da:	4a2a      	ldr	r2, [pc, #168]	; (8005684 <HAL_RCC_GetSysClockFreq+0xc8>)
 80055dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055e0:	60fb      	str	r3, [r7, #12]
 80055e2:	e04a      	b.n	800567a <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b04      	cmp	r3, #4
 80055e8:	d102      	bne.n	80055f0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80055ea:	4b27      	ldr	r3, [pc, #156]	; (8005688 <HAL_RCC_GetSysClockFreq+0xcc>)
 80055ec:	60fb      	str	r3, [r7, #12]
 80055ee:	e044      	b.n	800567a <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b08      	cmp	r3, #8
 80055f4:	d10a      	bne.n	800560c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80055f6:	f7fe fd1d 	bl	8004034 <LL_RCC_HSE_IsEnabledDiv2>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d102      	bne.n	8005606 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005600:	4b21      	ldr	r3, [pc, #132]	; (8005688 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005602:	60fb      	str	r3, [r7, #12]
 8005604:	e039      	b.n	800567a <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005606:	4b21      	ldr	r3, [pc, #132]	; (800568c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005608:	60fb      	str	r3, [r7, #12]
 800560a:	e036      	b.n	800567a <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800560c:	f7ff f83d 	bl	800468a <LL_RCC_PLL_GetMainSource>
 8005610:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	2b02      	cmp	r3, #2
 8005616:	d002      	beq.n	800561e <HAL_RCC_GetSysClockFreq+0x62>
 8005618:	2b03      	cmp	r3, #3
 800561a:	d003      	beq.n	8005624 <HAL_RCC_GetSysClockFreq+0x68>
 800561c:	e00d      	b.n	800563a <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800561e:	4b1a      	ldr	r3, [pc, #104]	; (8005688 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005620:	60bb      	str	r3, [r7, #8]
        break;
 8005622:	e015      	b.n	8005650 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005624:	f7fe fd06 	bl	8004034 <LL_RCC_HSE_IsEnabledDiv2>
 8005628:	4603      	mov	r3, r0
 800562a:	2b01      	cmp	r3, #1
 800562c:	d102      	bne.n	8005634 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800562e:	4b16      	ldr	r3, [pc, #88]	; (8005688 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005630:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005632:	e00d      	b.n	8005650 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8005634:	4b15      	ldr	r3, [pc, #84]	; (800568c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005636:	60bb      	str	r3, [r7, #8]
        break;
 8005638:	e00a      	b.n	8005650 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800563a:	f7fe feec 	bl	8004416 <LL_RCC_MSI_GetRange>
 800563e:	4603      	mov	r3, r0
 8005640:	091b      	lsrs	r3, r3, #4
 8005642:	f003 030f 	and.w	r3, r3, #15
 8005646:	4a0f      	ldr	r2, [pc, #60]	; (8005684 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800564c:	60bb      	str	r3, [r7, #8]
        break;
 800564e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8005650:	f7fe fff6 	bl	8004640 <LL_RCC_PLL_GetN>
 8005654:	4602      	mov	r2, r0
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	fb03 f402 	mul.w	r4, r3, r2
 800565c:	f7ff f809 	bl	8004672 <LL_RCC_PLL_GetDivider>
 8005660:	4603      	mov	r3, r0
 8005662:	091b      	lsrs	r3, r3, #4
 8005664:	3301      	adds	r3, #1
 8005666:	fbb4 f4f3 	udiv	r4, r4, r3
 800566a:	f7fe fff6 	bl	800465a <LL_RCC_PLL_GetR>
 800566e:	4603      	mov	r3, r0
 8005670:	0f5b      	lsrs	r3, r3, #29
 8005672:	3301      	adds	r3, #1
 8005674:	fbb4 f3f3 	udiv	r3, r4, r3
 8005678:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 800567a:	68fb      	ldr	r3, [r7, #12]
}
 800567c:	4618      	mov	r0, r3
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	bd90      	pop	{r4, r7, pc}
 8005684:	0800f27c 	.word	0x0800f27c
 8005688:	00f42400 	.word	0x00f42400
 800568c:	01e84800 	.word	0x01e84800

08005690 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005690:	b598      	push	{r3, r4, r7, lr}
 8005692:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005694:	f7ff ff92 	bl	80055bc <HAL_RCC_GetSysClockFreq>
 8005698:	4604      	mov	r4, r0
 800569a:	f7fe ff6f 	bl	800457c <LL_RCC_GetAHBPrescaler>
 800569e:	4603      	mov	r3, r0
 80056a0:	091b      	lsrs	r3, r3, #4
 80056a2:	f003 030f 	and.w	r3, r3, #15
 80056a6:	4a03      	ldr	r2, [pc, #12]	; (80056b4 <HAL_RCC_GetHCLKFreq+0x24>)
 80056a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056ac:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	bd98      	pop	{r3, r4, r7, pc}
 80056b4:	0800f21c 	.word	0x0800f21c

080056b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056b8:	b598      	push	{r3, r4, r7, lr}
 80056ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80056bc:	f7ff ffe8 	bl	8005690 <HAL_RCC_GetHCLKFreq>
 80056c0:	4604      	mov	r4, r0
 80056c2:	f7fe ff75 	bl	80045b0 <LL_RCC_GetAPB1Prescaler>
 80056c6:	4603      	mov	r3, r0
 80056c8:	0a1b      	lsrs	r3, r3, #8
 80056ca:	f003 0307 	and.w	r3, r3, #7
 80056ce:	4a04      	ldr	r2, [pc, #16]	; (80056e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80056d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056d4:	f003 031f 	and.w	r3, r3, #31
 80056d8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80056dc:	4618      	mov	r0, r3
 80056de:	bd98      	pop	{r3, r4, r7, pc}
 80056e0:	0800f25c 	.word	0x0800f25c

080056e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056e4:	b598      	push	{r3, r4, r7, lr}
 80056e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80056e8:	f7ff ffd2 	bl	8005690 <HAL_RCC_GetHCLKFreq>
 80056ec:	4604      	mov	r4, r0
 80056ee:	f7fe ff6b 	bl	80045c8 <LL_RCC_GetAPB2Prescaler>
 80056f2:	4603      	mov	r3, r0
 80056f4:	0adb      	lsrs	r3, r3, #11
 80056f6:	f003 0307 	and.w	r3, r3, #7
 80056fa:	4a04      	ldr	r2, [pc, #16]	; (800570c <HAL_RCC_GetPCLK2Freq+0x28>)
 80056fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005700:	f003 031f 	and.w	r3, r3, #31
 8005704:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005708:	4618      	mov	r0, r3
 800570a:	bd98      	pop	{r3, r4, r7, pc}
 800570c:	0800f25c 	.word	0x0800f25c

08005710 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005710:	b590      	push	{r4, r7, lr}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq, msifreq;

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d025      	beq.n	800576a <RCC_SetFlashLatencyFromMSIRange+0x5a>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2b10      	cmp	r3, #16
 8005722:	d022      	beq.n	800576a <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b20      	cmp	r3, #32
 8005728:	d01f      	beq.n	800576a <RCC_SetFlashLatencyFromMSIRange+0x5a>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b30      	cmp	r3, #48	; 0x30
 800572e:	d01c      	beq.n	800576a <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b40      	cmp	r3, #64	; 0x40
 8005734:	d019      	beq.n	800576a <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2b50      	cmp	r3, #80	; 0x50
 800573a:	d016      	beq.n	800576a <RCC_SetFlashLatencyFromMSIRange+0x5a>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b60      	cmp	r3, #96	; 0x60
 8005740:	d013      	beq.n	800576a <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b70      	cmp	r3, #112	; 0x70
 8005746:	d010      	beq.n	800576a <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b80      	cmp	r3, #128	; 0x80
 800574c:	d00d      	beq.n	800576a <RCC_SetFlashLatencyFromMSIRange+0x5a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b90      	cmp	r3, #144	; 0x90
 8005752:	d00a      	beq.n	800576a <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2ba0      	cmp	r3, #160	; 0xa0
 8005758:	d007      	beq.n	800576a <RCC_SetFlashLatencyFromMSIRange+0x5a>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2bb0      	cmp	r3, #176	; 0xb0
 800575e:	d004      	beq.n	800576a <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8005760:	f240 6191 	movw	r1, #1681	; 0x691
 8005764:	4817      	ldr	r0, [pc, #92]	; (80057c4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005766:	f7fc fa27 	bl	8001bb8 <assert_failed>

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2bb0      	cmp	r3, #176	; 0xb0
 800576e:	d903      	bls.n	8005778 <RCC_SetFlashLatencyFromMSIRange+0x68>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005770:	4b15      	ldr	r3, [pc, #84]	; (80057c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	e007      	b.n	8005788 <RCC_SetFlashLatencyFromMSIRange+0x78>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	091b      	lsrs	r3, r3, #4
 800577c:	f003 030f 	and.w	r3, r3, #15
 8005780:	4a11      	ldr	r2, [pc, #68]	; (80057c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005786:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005788:	f7fe ff04 	bl	8004594 <LL_RCC_GetAHB4Prescaler>
 800578c:	4603      	mov	r3, r0
 800578e:	091b      	lsrs	r3, r3, #4
 8005790:	f003 030f 	and.w	r3, r3, #15
 8005794:	4a0d      	ldr	r2, [pc, #52]	; (80057cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a0:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	4a0a      	ldr	r2, [pc, #40]	; (80057d0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80057a6:	fba2 2303 	umull	r2, r3, r2, r3
 80057aa:	0c9c      	lsrs	r4, r3, #18
 80057ac:	f7fe fc24 	bl	8003ff8 <HAL_PWREx_GetVoltageRange>
 80057b0:	4603      	mov	r3, r0
 80057b2:	4619      	mov	r1, r3
 80057b4:	4620      	mov	r0, r4
 80057b6:	f000 f80d 	bl	80057d4 <RCC_SetFlashLatency>
 80057ba:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3714      	adds	r7, #20
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd90      	pop	{r4, r7, pc}
 80057c4:	0800f014 	.word	0x0800f014
 80057c8:	0800f27c 	.word	0x0800f27c
 80057cc:	0800f21c 	.word	0x0800f21c
 80057d0:	431bde83 	.word	0x431bde83

080057d4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80057d4:	b590      	push	{r4, r7, lr}
 80057d6:	b093      	sub	sp, #76	; 0x4c
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80057de:	4b39      	ldr	r3, [pc, #228]	; (80058c4 <RCC_SetFlashLatency+0xf0>)
 80057e0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80057e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80057e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80057ea:	4a37      	ldr	r2, [pc, #220]	; (80058c8 <RCC_SetFlashLatency+0xf4>)
 80057ec:	f107 031c 	add.w	r3, r7, #28
 80057f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80057f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80057f6:	4b35      	ldr	r3, [pc, #212]	; (80058cc <RCC_SetFlashLatency+0xf8>)
 80057f8:	f107 040c 	add.w	r4, r7, #12
 80057fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80057fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005802:	2300      	movs	r3, #0
 8005804:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800580c:	d11c      	bne.n	8005848 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800580e:	2300      	movs	r3, #0
 8005810:	643b      	str	r3, [r7, #64]	; 0x40
 8005812:	e015      	b.n	8005840 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800581c:	4413      	add	r3, r2
 800581e:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	429a      	cmp	r2, r3
 8005826:	d808      	bhi.n	800583a <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005830:	4413      	add	r3, r2
 8005832:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005836:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005838:	e022      	b.n	8005880 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800583a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800583c:	3301      	adds	r3, #1
 800583e:	643b      	str	r3, [r7, #64]	; 0x40
 8005840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005842:	2b03      	cmp	r3, #3
 8005844:	d9e6      	bls.n	8005814 <RCC_SetFlashLatency+0x40>
 8005846:	e01b      	b.n	8005880 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005848:	2300      	movs	r3, #0
 800584a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800584c:	e015      	b.n	800587a <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800584e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005856:	4413      	add	r3, r2
 8005858:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	429a      	cmp	r2, r3
 8005860:	d808      	bhi.n	8005874 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800586a:	4413      	add	r3, r2
 800586c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005870:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005872:	e005      	b.n	8005880 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005876:	3301      	adds	r3, #1
 8005878:	63fb      	str	r3, [r7, #60]	; 0x3c
 800587a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800587c:	2b02      	cmp	r3, #2
 800587e:	d9e6      	bls.n	800584e <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8005880:	4b13      	ldr	r3, [pc, #76]	; (80058d0 <RCC_SetFlashLatency+0xfc>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f023 0207 	bic.w	r2, r3, #7
 8005888:	4911      	ldr	r1, [pc, #68]	; (80058d0 <RCC_SetFlashLatency+0xfc>)
 800588a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800588c:	4313      	orrs	r3, r2
 800588e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005890:	f7fc ffac 	bl	80027ec <HAL_GetTick>
 8005894:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005896:	e008      	b.n	80058aa <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005898:	f7fc ffa8 	bl	80027ec <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d901      	bls.n	80058aa <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e007      	b.n	80058ba <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80058aa:	4b09      	ldr	r3, [pc, #36]	; (80058d0 <RCC_SetFlashLatency+0xfc>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0307 	and.w	r3, r3, #7
 80058b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d1ef      	bne.n	8005898 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	374c      	adds	r7, #76	; 0x4c
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd90      	pop	{r4, r7, pc}
 80058c2:	bf00      	nop
 80058c4:	0800f04c 	.word	0x0800f04c
 80058c8:	0800f05c 	.word	0x0800f05c
 80058cc:	0800f068 	.word	0x0800f068
 80058d0:	58004000 	.word	0x58004000

080058d4 <LL_RCC_LSE_IsEnabled>:
{
 80058d4:	b480      	push	{r7}
 80058d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80058d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e0:	f003 0301 	and.w	r3, r3, #1
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d101      	bne.n	80058ec <LL_RCC_LSE_IsEnabled+0x18>
 80058e8:	2301      	movs	r3, #1
 80058ea:	e000      	b.n	80058ee <LL_RCC_LSE_IsEnabled+0x1a>
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <LL_RCC_LSE_IsReady>:
{
 80058f8:	b480      	push	{r7}
 80058fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80058fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b02      	cmp	r3, #2
 800590a:	d101      	bne.n	8005910 <LL_RCC_LSE_IsReady+0x18>
 800590c:	2301      	movs	r3, #1
 800590e:	e000      	b.n	8005912 <LL_RCC_LSE_IsReady+0x1a>
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <LL_RCC_SetRFWKPClockSource>:
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005928:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800592c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005930:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4313      	orrs	r3, r2
 8005938:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <LL_RCC_SetSMPSClockSource>:
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005956:	f023 0203 	bic.w	r2, r3, #3
 800595a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4313      	orrs	r3, r2
 8005962:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <LL_RCC_SetSMPSPrescaler>:
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005982:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4313      	orrs	r3, r2
 800598a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <LL_RCC_SetUSARTClockSource>:
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80059a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a8:	f023 0203 	bic.w	r2, r3, #3
 80059ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <LL_RCC_SetLPUARTClockSource>:
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80059cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80059d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4313      	orrs	r3, r2
 80059e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80059e4:	bf00      	nop
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <LL_RCC_SetI2CClockSource>:
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80059f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	091b      	lsrs	r3, r3, #4
 8005a04:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005a08:	43db      	mvns	r3, r3
 8005a0a:	401a      	ands	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	011b      	lsls	r3, r3, #4
 8005a10:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005a14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a1e:	bf00      	nop
 8005a20:	370c      	adds	r7, #12
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr

08005a2a <LL_RCC_SetLPTIMClockSource>:
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b083      	sub	sp, #12
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a36:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	0c1b      	lsrs	r3, r3, #16
 8005a3e:	041b      	lsls	r3, r3, #16
 8005a40:	43db      	mvns	r3, r3
 8005a42:	401a      	ands	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	041b      	lsls	r3, r3, #16
 8005a48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a52:	bf00      	nop
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <LL_RCC_SetSAIClockSource>:
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a7e:	bf00      	nop
 8005a80:	370c      	adds	r7, #12
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <LL_RCC_SetRNGClockSource>:
{
 8005a8a:	b480      	push	{r7}
 8005a8c:	b083      	sub	sp, #12
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005a9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005aaa:	bf00      	nop
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <LL_RCC_SetCLK48ClockSource>:
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b083      	sub	sp, #12
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005aca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ad6:	bf00      	nop
 8005ad8:	370c      	adds	r7, #12
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <LL_RCC_SetUSBClockSource>:
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b082      	sub	sp, #8
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7ff ffe3 	bl	8005ab6 <LL_RCC_SetCLK48ClockSource>
}
 8005af0:	bf00      	nop
 8005af2:	3708      	adds	r7, #8
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <LL_RCC_SetADCClockSource>:
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b08:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005b0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <LL_RCC_SetRTCClockSource>:
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <LL_RCC_GetRTCClockSource>:
{
 8005b50:	b480      	push	{r7}
 8005b52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <LL_RCC_ForceBackupDomainReset>:
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005b82:	bf00      	nop
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <LL_RCC_ReleaseBackupDomainReset>:
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005ba4:	bf00      	nop
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <LL_RCC_PLLSAI1_Enable>:
{
 8005bae:	b480      	push	{r7}
 8005bb0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005bc0:	6013      	str	r3, [r2, #0]
}
 8005bc2:	bf00      	nop
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <LL_RCC_PLLSAI1_Disable>:
{
 8005bcc:	b480      	push	{r7}
 8005bce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005bde:	6013      	str	r3, [r2, #0]
}
 8005be0:	bf00      	nop
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <LL_RCC_PLLSAI1_IsReady>:
{
 8005bea:	b480      	push	{r7}
 8005bec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bfc:	d101      	bne.n	8005c02 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e000      	b.n	8005c04 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
	...

08005c10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b088      	sub	sp, #32
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005c18:	2300      	movs	r3, #0
 8005c1a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d14b      	bne.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0302 	and.w	r3, r3, #2
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d145      	bne.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0304 	and.w	r3, r3, #4
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d13f      	bne.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0308 	and.w	r3, r3, #8
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d139      	bne.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0310 	and.w	r3, r3, #16
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d133      	bne.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0320 	and.w	r3, r3, #32
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d12d      	bne.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d127      	bne.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d121      	bne.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d11b      	bne.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d115      	bne.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10f      	bne.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d109      	bne.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d103      	bne.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005cbc:	219b      	movs	r1, #155	; 0x9b
 8005cbe:	485b      	ldr	r0, [pc, #364]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8005cc0:	f7fb ff7a 	bl	8001bb8 <assert_failed>

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d04a      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d012      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xee>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ce0:	d00d      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xee>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005cea:	d008      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xee>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005cf4:	d003      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xee>
 8005cf6:	21a2      	movs	r1, #162	; 0xa2
 8005cf8:	484c      	ldr	r0, [pc, #304]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8005cfa:	f7fb ff5d 	bl	8001bb8 <assert_failed>

    switch (PeriphClkInit->Sai1ClockSelection)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d06:	d00c      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005d08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d0c:	d802      	bhi.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d010      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8005d12:	e017      	b.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8005d14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d18:	d017      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x13a>
 8005d1a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005d1e:	d016      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8005d20:	e010      	b.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x134>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d30:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005d32:	e00d      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	3304      	adds	r3, #4
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f000 fa8d 	bl	8006258 <RCCEx_PLLSAI1_ConfigNP>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005d42:	e005      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x140>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	77fb      	strb	r3, [r7, #31]
        break;
 8005d48:	e002      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005d4a:	bf00      	nop
 8005d4c:	e000      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005d4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d50:	7ffb      	ldrb	r3, [r7, #31]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d105      	bne.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x152>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7ff fe7f 	bl	8005a5e <LL_RCC_SetSAIClockSource>
 8005d60:	e001      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x156>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d62:	7ffb      	ldrb	r3, [r7, #31]
 8005d64:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d060      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005d72:	f7ff feed 	bl	8005b50 <LL_RCC_GetRTCClockSource>
 8005d76:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d012      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d88:	d00d      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d92:	d008      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d9c:	d003      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005d9e:	21d4      	movs	r1, #212	; 0xd4
 8005da0:	4822      	ldr	r0, [pc, #136]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8005da2:	f7fb ff09 	bl	8001bb8 <assert_failed>

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005daa:	69ba      	ldr	r2, [r7, #24]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d03f      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x220>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005db0:	f7fe f912 	bl	8003fd8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d105      	bne.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7ff feb0 	bl	8005b24 <LL_RCC_SetRTCClockSource>
 8005dc4:	e02e      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x214>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dce:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005dd0:	f7ff fecb 	bl	8005b6a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005dd4:	f7ff feda 	bl	8005b8c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de2:	4313      	orrs	r3, r2
 8005de4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005de6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005df0:	f7ff fd70 	bl	80058d4 <LL_RCC_LSE_IsEnabled>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d114      	bne.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x214>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005dfa:	f7fc fcf7 	bl	80027ec <HAL_GetTick>
 8005dfe:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005e00:	e00b      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e02:	f7fc fcf3 	bl	80027ec <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d902      	bls.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x20a>
            {
              ret = HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	77fb      	strb	r3, [r7, #31]
              break;
 8005e18:	e004      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x214>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005e1a:	f7ff fd6d 	bl	80058f8 <LL_RCC_LSE_IsReady>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d1ee      	bne.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005e24:	7ffb      	ldrb	r3, [r7, #31]
 8005e26:	77bb      	strb	r3, [r7, #30]
 8005e28:	e004      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x224>
 8005e2a:	bf00      	nop
 8005e2c:	0800f078 	.word	0x0800f078
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e30:	7ffb      	ldrb	r3, [r7, #31]
 8005e32:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d019      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x264>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d010      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d00c      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	2b03      	cmp	r3, #3
 8005e56:	d008      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d004      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8005e60:	f44f 7189 	mov.w	r1, #274	; 0x112
 8005e64:	4896      	ldr	r0, [pc, #600]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8005e66:	f7fb fea7 	bl	8001bb8 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7ff fd92 	bl	8005998 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 0302 	and.w	r3, r3, #2
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d01c      	beq.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	69db      	ldr	r3, [r3, #28]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d013      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	69db      	ldr	r3, [r3, #28]
 8005e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e90:	d00e      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	69db      	ldr	r3, [r3, #28]
 8005e96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e9a:	d009      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	69db      	ldr	r3, [r3, #28]
 8005ea0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ea4:	d004      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8005ea6:	f240 111d 	movw	r1, #285	; 0x11d
 8005eaa:	4885      	ldr	r0, [pc, #532]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8005eac:	f7fb fe84 	bl	8001bb8 <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	69db      	ldr	r3, [r3, #28]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7ff fd85 	bl	80059c4 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0310 	and.w	r3, r3, #16
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d01d      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eca:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005ece:	d013      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed4:	4a7b      	ldr	r2, [pc, #492]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d00e      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ede:	4a7a      	ldr	r2, [pc, #488]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d009      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee8:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8005eec:	d004      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8005eee:	f240 1127 	movw	r1, #295	; 0x127
 8005ef2:	4873      	ldr	r0, [pc, #460]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8005ef4:	f7fb fe60 	bl	8001bb8 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7ff fd94 	bl	8005a2a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0320 	and.w	r3, r3, #32
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d01d      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x33a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f12:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f16:	d013      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1c:	4a6b      	ldr	r2, [pc, #428]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d00e      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f26:	4a6a      	ldr	r2, [pc, #424]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x4c0>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d009      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f30:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8005f34:	d004      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005f36:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8005f3a:	4861      	ldr	r0, [pc, #388]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8005f3c:	f7fb fe3c 	bl	8001bb8 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7ff fd70 	bl	8005a2a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0304 	and.w	r3, r3, #4
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d018      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x378>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f5e:	d00e      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	4a5b      	ldr	r2, [pc, #364]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x4c4>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d009      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	4a5a      	ldr	r2, [pc, #360]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d004      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005f74:	f44f 719b 	mov.w	r1, #310	; 0x136
 8005f78:	4851      	ldr	r0, [pc, #324]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8005f7a:	f7fb fe1d 	bl	8001bb8 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7ff fd34 	bl	80059f0 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0308 	and.w	r3, r3, #8
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d018      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f9c:	d00e      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa2:	4a4e      	ldr	r2, [pc, #312]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d009      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fac:	4a4c      	ldr	r2, [pc, #304]	; (80060e0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d004      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005fb2:	f240 1141 	movw	r1, #321	; 0x141
 8005fb6:	4842      	ldr	r0, [pc, #264]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8005fb8:	f7fb fdfe 	bl	8001bb8 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7ff fd15 	bl	80059f0 <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d03a      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d013      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fde:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005fe2:	d00e      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fe8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fec:	d009      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005ff6:	d004      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005ff8:	f240 114b 	movw	r1, #331	; 0x14b
 8005ffc:	4830      	ldr	r0, [pc, #192]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8005ffe:	f7fb fddb 	bl	8001bb8 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006006:	4618      	mov	r0, r3
 8006008:	f7ff fd6b 	bl	8005ae2 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006010:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006014:	d107      	bne.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x416>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8006016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006020:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006024:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800602a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800602e:	d10b      	bne.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x438>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	3304      	adds	r3, #4
 8006034:	4618      	mov	r0, r3
 8006036:	f000 f9a7 	bl	8006388 <RCCEx_PLLSAI1_ConfigNQ>
 800603a:	4603      	mov	r3, r0
 800603c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800603e:	7ffb      	ldrb	r3, [r7, #31]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d001      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x438>
      {
        /* set overall return value */
        status = ret;
 8006044:	7ffb      	ldrb	r3, [r7, #31]
 8006046:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006050:	2b00      	cmp	r3, #0
 8006052:	d05f      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x504>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006058:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800605c:	d01c      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006062:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006066:	d017      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606c:	f1b3 5fe0 	cmp.w	r3, #469762048	; 0x1c000000
 8006070:	d012      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00e      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006082:	d009      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006088:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800608c:	d004      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800608e:	f240 1167 	movw	r1, #359	; 0x167
 8006092:	480b      	ldr	r0, [pc, #44]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8006094:	f7fb fd90 	bl	8001bb8 <assert_failed>

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060a0:	d008      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060aa:	d003      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d117      	bne.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7ff fce6 	bl	8005a8a <LL_RCC_SetRNGClockSource>
 80060be:	e01c      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 80060c0:	0800f078 	.word	0x0800f078
 80060c4:	000c0004 	.word	0x000c0004
 80060c8:	000c0008 	.word	0x000c0008
 80060cc:	00300010 	.word	0x00300010
 80060d0:	00300020 	.word	0x00300020
 80060d4:	00030100 	.word	0x00030100
 80060d8:	00030200 	.word	0x00030200
 80060dc:	00301000 	.word	0x00301000
 80060e0:	00302000 	.word	0x00302000
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060ec:	60fb      	str	r3, [r7, #12]
 80060ee:	2000      	movs	r0, #0
 80060f0:	f7ff fccb 	bl	8005a8a <LL_RCC_SetRNGClockSource>
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f7ff fcde 	bl	8005ab6 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fe:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006102:	d107      	bne.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800610e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006112:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800611c:	2b00      	cmp	r3, #0
 800611e:	d03a      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x586>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006124:	2b00      	cmp	r3, #0
 8006126:	d013      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x540>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800612c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006130:	d00e      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x540>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006136:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800613a:	d009      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x540>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006140:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006144:	d004      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x540>
 8006146:	f240 1177 	movw	r1, #375	; 0x177
 800614a:	4842      	ldr	r0, [pc, #264]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800614c:	f7fb fd34 	bl	8001bb8 <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006154:	4618      	mov	r0, r3
 8006156:	f7ff fccf 	bl	8005af8 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800615e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006162:	d107      	bne.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x564>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800616e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006172:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006178:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800617c:	d10b      	bne.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x586>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	3304      	adds	r3, #4
 8006182:	4618      	mov	r0, r3
 8006184:	f000 f998 	bl	80064b8 <RCCEx_PLLSAI1_ConfigNR>
 8006188:	4603      	mov	r3, r0
 800618a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800618c:	7ffb      	ldrb	r3, [r7, #31]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d001      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x586>
      {
        /* set overall return value */
        status = ret;
 8006192:	7ffb      	ldrb	r3, [r7, #31]
 8006194:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d01c      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d013      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061b2:	d00e      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061bc:	d009      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061c2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80061c6:	d004      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
 80061c8:	f240 1195 	movw	r1, #405	; 0x195
 80061cc:	4821      	ldr	r0, [pc, #132]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80061ce:	f7fb fcf3 	bl	8001bb8 <assert_failed>

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d6:	4618      	mov	r0, r3
 80061d8:	f7ff fba0 	bl	800591c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d02f      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x638>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d010      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x602>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061f4:	2b10      	cmp	r3, #16
 80061f6:	d00c      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x602>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061fc:	2b20      	cmp	r3, #32
 80061fe:	d008      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x602>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006204:	2b30      	cmp	r3, #48	; 0x30
 8006206:	d004      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x602>
 8006208:	f240 11a1 	movw	r1, #417	; 0x1a1
 800620c:	4811      	ldr	r0, [pc, #68]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800620e:	f7fb fcd3 	bl	8001bb8 <assert_failed>
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00c      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x624>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800621e:	2b01      	cmp	r3, #1
 8006220:	d008      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006226:	2b02      	cmp	r3, #2
 8006228:	d004      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x624>
 800622a:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 800622e:	4809      	ldr	r0, [pc, #36]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006230:	f7fb fcc2 	bl	8001bb8 <assert_failed>

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006238:	4618      	mov	r0, r3
 800623a:	f7ff fb99 	bl	8005970 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006242:	4618      	mov	r0, r3
 8006244:	f7ff fb80 	bl	8005948 <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 8006248:	7fbb      	ldrb	r3, [r7, #30]
}
 800624a:	4618      	mov	r0, r3
 800624c:	3720      	adds	r7, #32
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	0800f078 	.word	0x0800f078

08006258 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006260:	2300      	movs	r3, #0
 8006262:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2b05      	cmp	r3, #5
 800626a:	d903      	bls.n	8006274 <RCCEx_PLLSAI1_ConfigNP+0x1c>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2b7f      	cmp	r3, #127	; 0x7f
 8006272:	d904      	bls.n	800627e <RCCEx_PLLSAI1_ConfigNP+0x26>
 8006274:	f240 718d 	movw	r1, #1933	; 0x78d
 8006278:	4842      	ldr	r0, [pc, #264]	; (8006384 <RCCEx_PLLSAI1_ConfigNP+0x12c>)
 800627a:	f7fb fc9d 	bl	8001bb8 <assert_failed>
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006286:	d304      	bcc.n	8006292 <RCCEx_PLLSAI1_ConfigNP+0x3a>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f5b3 1f78 	cmp.w	r3, #4063232	; 0x3e0000
 8006290:	d904      	bls.n	800629c <RCCEx_PLLSAI1_ConfigNP+0x44>
 8006292:	f240 718e 	movw	r1, #1934	; 0x78e
 8006296:	483b      	ldr	r0, [pc, #236]	; (8006384 <RCCEx_PLLSAI1_ConfigNP+0x12c>)
 8006298:	f7fb fc8e 	bl	8001bb8 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10b      	bne.n	80062c0 <RCCEx_PLLSAI1_ConfigNP+0x68>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d105      	bne.n	80062c0 <RCCEx_PLLSAI1_ConfigNP+0x68>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d007      	beq.n	80062d0 <RCCEx_PLLSAI1_ConfigNP+0x78>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80062c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d004      	beq.n	80062da <RCCEx_PLLSAI1_ConfigNP+0x82>
 80062d0:	f240 718f 	movw	r1, #1935	; 0x78f
 80062d4:	482b      	ldr	r0, [pc, #172]	; (8006384 <RCCEx_PLLSAI1_ConfigNP+0x12c>)
 80062d6:	f7fb fc6f 	bl	8001bb8 <assert_failed>

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80062da:	f7ff fc77 	bl	8005bcc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80062de:	f7fc fa85 	bl	80027ec <HAL_GetTick>
 80062e2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80062e4:	e009      	b.n	80062fa <RCCEx_PLLSAI1_ConfigNP+0xa2>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80062e6:	f7fc fa81 	bl	80027ec <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d902      	bls.n	80062fa <RCCEx_PLLSAI1_ConfigNP+0xa2>
    {
      status = HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	73fb      	strb	r3, [r7, #15]
      break;
 80062f8:	e004      	b.n	8006304 <RCCEx_PLLSAI1_ConfigNP+0xac>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80062fa:	f7ff fc76 	bl	8005bea <LL_RCC_PLLSAI1_IsReady>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1f0      	bne.n	80062e6 <RCCEx_PLLSAI1_ConfigNP+0x8e>
    }
  }

  if (status == HAL_OK)
 8006304:	7bfb      	ldrb	r3, [r7, #15]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d137      	bne.n	800637a <RCCEx_PLLSAI1_ConfigNP+0x122>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800630a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	021b      	lsls	r3, r3, #8
 800631a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800631e:	4313      	orrs	r3, r2
 8006320:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006334:	4313      	orrs	r3, r2
 8006336:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006338:	f7ff fc39 	bl	8005bae <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800633c:	f7fc fa56 	bl	80027ec <HAL_GetTick>
 8006340:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006342:	e009      	b.n	8006358 <RCCEx_PLLSAI1_ConfigNP+0x100>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006344:	f7fc fa52 	bl	80027ec <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	2b02      	cmp	r3, #2
 8006350:	d902      	bls.n	8006358 <RCCEx_PLLSAI1_ConfigNP+0x100>
      {
        status = HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	73fb      	strb	r3, [r7, #15]
        break;
 8006356:	e004      	b.n	8006362 <RCCEx_PLLSAI1_ConfigNP+0x10a>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006358:	f7ff fc47 	bl	8005bea <LL_RCC_PLLSAI1_IsReady>
 800635c:	4603      	mov	r3, r0
 800635e:	2b01      	cmp	r3, #1
 8006360:	d1f0      	bne.n	8006344 <RCCEx_PLLSAI1_ConfigNP+0xec>
      }
    }

    if (status == HAL_OK)
 8006362:	7bfb      	ldrb	r3, [r7, #15]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d108      	bne.n	800637a <RCCEx_PLLSAI1_ConfigNP+0x122>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800636c:	691a      	ldr	r2, [r3, #16]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006376:	4313      	orrs	r3, r2
 8006378:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800637a:	7bfb      	ldrb	r3, [r7, #15]
}
 800637c:	4618      	mov	r0, r3
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	0800f078 	.word	0x0800f078

08006388 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006390:	2300      	movs	r3, #0
 8006392:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2b05      	cmp	r3, #5
 800639a:	d903      	bls.n	80063a4 <RCCEx_PLLSAI1_ConfigNQ+0x1c>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2b7f      	cmp	r3, #127	; 0x7f
 80063a2:	d904      	bls.n	80063ae <RCCEx_PLLSAI1_ConfigNQ+0x26>
 80063a4:	f240 71d2 	movw	r1, #2002	; 0x7d2
 80063a8:	4842      	ldr	r0, [pc, #264]	; (80064b4 <RCCEx_PLLSAI1_ConfigNQ+0x12c>)
 80063aa:	f7fb fc05 	bl	8001bb8 <assert_failed>
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063b6:	d304      	bcc.n	80063c2 <RCCEx_PLLSAI1_ConfigNQ+0x3a>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80063c0:	d904      	bls.n	80063cc <RCCEx_PLLSAI1_ConfigNQ+0x44>
 80063c2:	f240 71d3 	movw	r1, #2003	; 0x7d3
 80063c6:	483b      	ldr	r0, [pc, #236]	; (80064b4 <RCCEx_PLLSAI1_ConfigNQ+0x12c>)
 80063c8:	f7fb fbf6 	bl	8001bb8 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10b      	bne.n	80063f0 <RCCEx_PLLSAI1_ConfigNQ+0x68>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d105      	bne.n	80063f0 <RCCEx_PLLSAI1_ConfigNQ+0x68>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d007      	beq.n	8006400 <RCCEx_PLLSAI1_ConfigNQ+0x78>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80063f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d004      	beq.n	800640a <RCCEx_PLLSAI1_ConfigNQ+0x82>
 8006400:	f240 71d4 	movw	r1, #2004	; 0x7d4
 8006404:	482b      	ldr	r0, [pc, #172]	; (80064b4 <RCCEx_PLLSAI1_ConfigNQ+0x12c>)
 8006406:	f7fb fbd7 	bl	8001bb8 <assert_failed>

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800640a:	f7ff fbdf 	bl	8005bcc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800640e:	f7fc f9ed 	bl	80027ec <HAL_GetTick>
 8006412:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006414:	e009      	b.n	800642a <RCCEx_PLLSAI1_ConfigNQ+0xa2>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006416:	f7fc f9e9 	bl	80027ec <HAL_GetTick>
 800641a:	4602      	mov	r2, r0
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	2b02      	cmp	r3, #2
 8006422:	d902      	bls.n	800642a <RCCEx_PLLSAI1_ConfigNQ+0xa2>
    {
      status = HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	73fb      	strb	r3, [r7, #15]
      break;
 8006428:	e004      	b.n	8006434 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800642a:	f7ff fbde 	bl	8005bea <LL_RCC_PLLSAI1_IsReady>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1f0      	bne.n	8006416 <RCCEx_PLLSAI1_ConfigNQ+0x8e>
    }
  }

  if (status == HAL_OK)
 8006434:	7bfb      	ldrb	r3, [r7, #15]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d137      	bne.n	80064aa <RCCEx_PLLSAI1_ConfigNQ+0x122>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800643a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	021b      	lsls	r3, r3, #8
 800644a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800644e:	4313      	orrs	r3, r2
 8006450:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006464:	4313      	orrs	r3, r2
 8006466:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006468:	f7ff fba1 	bl	8005bae <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800646c:	f7fc f9be 	bl	80027ec <HAL_GetTick>
 8006470:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006472:	e009      	b.n	8006488 <RCCEx_PLLSAI1_ConfigNQ+0x100>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006474:	f7fc f9ba 	bl	80027ec <HAL_GetTick>
 8006478:	4602      	mov	r2, r0
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	2b02      	cmp	r3, #2
 8006480:	d902      	bls.n	8006488 <RCCEx_PLLSAI1_ConfigNQ+0x100>
      {
        status = HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	73fb      	strb	r3, [r7, #15]
        break;
 8006486:	e004      	b.n	8006492 <RCCEx_PLLSAI1_ConfigNQ+0x10a>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006488:	f7ff fbaf 	bl	8005bea <LL_RCC_PLLSAI1_IsReady>
 800648c:	4603      	mov	r3, r0
 800648e:	2b01      	cmp	r3, #1
 8006490:	d1f0      	bne.n	8006474 <RCCEx_PLLSAI1_ConfigNQ+0xec>
      }
    }

    if (status == HAL_OK)
 8006492:	7bfb      	ldrb	r3, [r7, #15]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d108      	bne.n	80064aa <RCCEx_PLLSAI1_ConfigNQ+0x122>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800649c:	691a      	ldr	r2, [r3, #16]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064a6:	4313      	orrs	r3, r2
 80064a8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80064aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	0800f078 	.word	0x0800f078

080064b8 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064c0:	2300      	movs	r3, #0
 80064c2:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2b05      	cmp	r3, #5
 80064ca:	d903      	bls.n	80064d4 <RCCEx_PLLSAI1_ConfigNR+0x1c>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2b7f      	cmp	r3, #127	; 0x7f
 80064d2:	d904      	bls.n	80064de <RCCEx_PLLSAI1_ConfigNR+0x26>
 80064d4:	f640 0116 	movw	r1, #2070	; 0x816
 80064d8:	4842      	ldr	r0, [pc, #264]	; (80065e4 <RCCEx_PLLSAI1_ConfigNR+0x12c>)
 80064da:	f7fb fb6d 	bl	8001bb8 <assert_failed>
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064e6:	d304      	bcc.n	80064f2 <RCCEx_PLLSAI1_ConfigNR+0x3a>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 80064f0:	d904      	bls.n	80064fc <RCCEx_PLLSAI1_ConfigNR+0x44>
 80064f2:	f640 0117 	movw	r1, #2071	; 0x817
 80064f6:	483b      	ldr	r0, [pc, #236]	; (80065e4 <RCCEx_PLLSAI1_ConfigNR+0x12c>)
 80064f8:	f7fb fb5e 	bl	8001bb8 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d10b      	bne.n	8006520 <RCCEx_PLLSAI1_ConfigNR+0x68>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d105      	bne.n	8006520 <RCCEx_PLLSAI1_ConfigNR+0x68>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d007      	beq.n	8006530 <RCCEx_PLLSAI1_ConfigNR+0x78>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8006528:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d004      	beq.n	800653a <RCCEx_PLLSAI1_ConfigNR+0x82>
 8006530:	f640 0118 	movw	r1, #2072	; 0x818
 8006534:	482b      	ldr	r0, [pc, #172]	; (80065e4 <RCCEx_PLLSAI1_ConfigNR+0x12c>)
 8006536:	f7fb fb3f 	bl	8001bb8 <assert_failed>

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800653a:	f7ff fb47 	bl	8005bcc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800653e:	f7fc f955 	bl	80027ec <HAL_GetTick>
 8006542:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006544:	e009      	b.n	800655a <RCCEx_PLLSAI1_ConfigNR+0xa2>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006546:	f7fc f951 	bl	80027ec <HAL_GetTick>
 800654a:	4602      	mov	r2, r0
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	2b02      	cmp	r3, #2
 8006552:	d902      	bls.n	800655a <RCCEx_PLLSAI1_ConfigNR+0xa2>
    {
      status = HAL_TIMEOUT;
 8006554:	2303      	movs	r3, #3
 8006556:	73fb      	strb	r3, [r7, #15]
      break;
 8006558:	e004      	b.n	8006564 <RCCEx_PLLSAI1_ConfigNR+0xac>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800655a:	f7ff fb46 	bl	8005bea <LL_RCC_PLLSAI1_IsReady>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1f0      	bne.n	8006546 <RCCEx_PLLSAI1_ConfigNR+0x8e>
    }
  }

  if (status == HAL_OK)
 8006564:	7bfb      	ldrb	r3, [r7, #15]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d137      	bne.n	80065da <RCCEx_PLLSAI1_ConfigNR+0x122>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800656a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	021b      	lsls	r3, r3, #8
 800657a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800657e:	4313      	orrs	r3, r2
 8006580:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006594:	4313      	orrs	r3, r2
 8006596:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006598:	f7ff fb09 	bl	8005bae <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800659c:	f7fc f926 	bl	80027ec <HAL_GetTick>
 80065a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80065a2:	e009      	b.n	80065b8 <RCCEx_PLLSAI1_ConfigNR+0x100>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80065a4:	f7fc f922 	bl	80027ec <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d902      	bls.n	80065b8 <RCCEx_PLLSAI1_ConfigNR+0x100>
      {
        status = HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	73fb      	strb	r3, [r7, #15]
        break;
 80065b6:	e004      	b.n	80065c2 <RCCEx_PLLSAI1_ConfigNR+0x10a>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80065b8:	f7ff fb17 	bl	8005bea <LL_RCC_PLLSAI1_IsReady>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d1f0      	bne.n	80065a4 <RCCEx_PLLSAI1_ConfigNR+0xec>
      }
    }

    if (status == HAL_OK)
 80065c2:	7bfb      	ldrb	r3, [r7, #15]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d108      	bne.n	80065da <RCCEx_PLLSAI1_ConfigNR+0x122>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80065c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065cc:	691a      	ldr	r2, [r3, #16]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065d6:	4313      	orrs	r3, r2
 80065d8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80065da:	7bfb      	ldrb	r3, [r7, #15]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	0800f078 	.word	0x0800f078

080065e8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d101      	bne.n	80065fa <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e0f2      	b.n	80067e0 <HAL_RTC_Init+0x1f8>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a7a      	ldr	r2, [pc, #488]	; (80067e8 <HAL_RTC_Init+0x200>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d003      	beq.n	800660c <HAL_RTC_Init+0x24>
 8006604:	21f0      	movs	r1, #240	; 0xf0
 8006606:	4879      	ldr	r0, [pc, #484]	; (80067ec <HAL_RTC_Init+0x204>)
 8006608:	f7fb fad6 	bl	8001bb8 <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	2b40      	cmp	r3, #64	; 0x40
 8006612:	d007      	beq.n	8006624 <HAL_RTC_Init+0x3c>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d003      	beq.n	8006624 <HAL_RTC_Init+0x3c>
 800661c:	21f1      	movs	r1, #241	; 0xf1
 800661e:	4873      	ldr	r0, [pc, #460]	; (80067ec <HAL_RTC_Init+0x204>)
 8006620:	f7fb faca 	bl	8001bb8 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	2b7f      	cmp	r3, #127	; 0x7f
 800662a:	d903      	bls.n	8006634 <HAL_RTC_Init+0x4c>
 800662c:	21f2      	movs	r1, #242	; 0xf2
 800662e:	486f      	ldr	r0, [pc, #444]	; (80067ec <HAL_RTC_Init+0x204>)
 8006630:	f7fb fac2 	bl	8001bb8 <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800663c:	d303      	bcc.n	8006646 <HAL_RTC_Init+0x5e>
 800663e:	21f3      	movs	r1, #243	; 0xf3
 8006640:	486a      	ldr	r0, [pc, #424]	; (80067ec <HAL_RTC_Init+0x204>)
 8006642:	f7fb fab9 	bl	8001bb8 <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d012      	beq.n	8006674 <HAL_RTC_Init+0x8c>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006656:	d00d      	beq.n	8006674 <HAL_RTC_Init+0x8c>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006660:	d008      	beq.n	8006674 <HAL_RTC_Init+0x8c>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800666a:	d003      	beq.n	8006674 <HAL_RTC_Init+0x8c>
 800666c:	21f4      	movs	r1, #244	; 0xf4
 800666e:	485f      	ldr	r0, [pc, #380]	; (80067ec <HAL_RTC_Init+0x204>)
 8006670:	f7fb faa2 	bl	8001bb8 <assert_failed>
  assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	695b      	ldr	r3, [r3, #20]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d007      	beq.n	800668c <HAL_RTC_Init+0xa4>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	695b      	ldr	r3, [r3, #20]
 8006680:	2b02      	cmp	r3, #2
 8006682:	d003      	beq.n	800668c <HAL_RTC_Init+0xa4>
 8006684:	21f5      	movs	r1, #245	; 0xf5
 8006686:	4859      	ldr	r0, [pc, #356]	; (80067ec <HAL_RTC_Init+0x204>)
 8006688:	f7fb fa96 	bl	8001bb8 <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	699b      	ldr	r3, [r3, #24]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d008      	beq.n	80066a6 <HAL_RTC_Init+0xbe>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800669c:	d003      	beq.n	80066a6 <HAL_RTC_Init+0xbe>
 800669e:	21f6      	movs	r1, #246	; 0xf6
 80066a0:	4852      	ldr	r0, [pc, #328]	; (80067ec <HAL_RTC_Init+0x204>)
 80066a2:	f7fb fa89 	bl	8001bb8 <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d007      	beq.n	80066be <HAL_RTC_Init+0xd6>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d003      	beq.n	80066be <HAL_RTC_Init+0xd6>
 80066b6:	21f7      	movs	r1, #247	; 0xf7
 80066b8:	484c      	ldr	r0, [pc, #304]	; (80067ec <HAL_RTC_Init+0x204>)
 80066ba:	f7fb fa7d 	bl	8001bb8 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d106      	bne.n	80066d8 <HAL_RTC_Init+0xf0>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f7fb fab2 	bl	8001c3c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2202      	movs	r2, #2
 80066dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	22ca      	movs	r2, #202	; 0xca
 80066e6:	625a      	str	r2, [r3, #36]	; 0x24
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2253      	movs	r2, #83	; 0x53
 80066ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 f8a3 	bl	800683c <RTC_EnterInitMode>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d009      	beq.n	8006710 <HAL_RTC_Init+0x128>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	22ff      	movs	r2, #255	; 0xff
 8006702:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2204      	movs	r2, #4
 8006708:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e067      	b.n	80067e0 <HAL_RTC_Init+0x1f8>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	6812      	ldr	r2, [r2, #0]
 800671a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800671e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006722:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	6899      	ldr	r1, [r3, #8]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685a      	ldr	r2, [r3, #4]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	431a      	orrs	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	431a      	orrs	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	430a      	orrs	r2, r1
 8006740:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	68d2      	ldr	r2, [r2, #12]
 800674a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6919      	ldr	r1, [r3, #16]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	041a      	lsls	r2, r3, #16
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	430a      	orrs	r2, r1
 800675e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68da      	ldr	r2, [r3, #12]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800676e:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f022 0203 	bic.w	r2, r2, #3
 800677e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	69da      	ldr	r2, [r3, #28]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	695b      	ldr	r3, [r3, #20]
 800678e:	431a      	orrs	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	430a      	orrs	r2, r1
 8006796:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f003 0320 	and.w	r3, r3, #32
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d113      	bne.n	80067ce <HAL_RTC_Init+0x1e6>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f822 	bl	80067f0 <HAL_RTC_WaitForSynchro>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00d      	beq.n	80067ce <HAL_RTC_Init+0x1e6>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	22ff      	movs	r2, #255	; 0xff
 80067b8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2204      	movs	r2, #4
 80067be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e008      	b.n	80067e0 <HAL_RTC_Init+0x1f8>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	22ff      	movs	r2, #255	; 0xff
 80067d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 80067de:	2300      	movs	r3, #0
  }
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3708      	adds	r7, #8
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	40002800 	.word	0x40002800
 80067ec:	0800f0b4 	.word	0x0800f0b4

080067f0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68da      	ldr	r2, [r3, #12]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006806:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006808:	f7fb fff0 	bl	80027ec <HAL_GetTick>
 800680c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800680e:	e009      	b.n	8006824 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006810:	f7fb ffec 	bl	80027ec <HAL_GetTick>
 8006814:	4602      	mov	r2, r0
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800681e:	d901      	bls.n	8006824 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	e007      	b.n	8006834 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	f003 0320 	and.w	r3, r3, #32
 800682e:	2b00      	cmp	r3, #0
 8006830:	d0ee      	beq.n	8006810 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3710      	adds	r7, #16
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800684e:	2b00      	cmp	r3, #0
 8006850:	d119      	bne.n	8006886 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800685a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800685c:	f7fb ffc6 	bl	80027ec <HAL_GetTick>
 8006860:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006862:	e009      	b.n	8006878 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8006864:	f7fb ffc2 	bl	80027ec <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006872:	d901      	bls.n	8006878 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006874:	2303      	movs	r3, #3
 8006876:	e007      	b.n	8006888 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006882:	2b00      	cmp	r3, #0
 8006884:	d0ee      	beq.n	8006864 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <LL_RCC_GetUSARTClockSource>:
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800689c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4013      	ands	r3, r2
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <LL_RCC_GetLPUARTClockSource>:
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80068b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4013      	ands	r3, r2
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d101      	bne.n	80068e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e065      	b.n	80069ae <HAL_UART_Init+0xde>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00f      	beq.n	800690a <HAL_UART_Init+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a32      	ldr	r2, [pc, #200]	; (80069b8 <HAL_UART_Init+0xe8>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d019      	beq.n	8006928 <HAL_UART_Init+0x58>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a30      	ldr	r2, [pc, #192]	; (80069bc <HAL_UART_Init+0xec>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d014      	beq.n	8006928 <HAL_UART_Init+0x58>
 80068fe:	f44f 719a 	mov.w	r1, #308	; 0x134
 8006902:	482f      	ldr	r0, [pc, #188]	; (80069c0 <HAL_UART_Init+0xf0>)
 8006904:	f7fb f958 	bl	8001bb8 <assert_failed>
 8006908:	e00e      	b.n	8006928 <HAL_UART_Init+0x58>
  }
  else
  {
    /* Check the parameters */
#if defined(LPUART1)
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a2a      	ldr	r2, [pc, #168]	; (80069b8 <HAL_UART_Init+0xe8>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d009      	beq.n	8006928 <HAL_UART_Init+0x58>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a28      	ldr	r2, [pc, #160]	; (80069bc <HAL_UART_Init+0xec>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d004      	beq.n	8006928 <HAL_UART_Init+0x58>
 800691e:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8006922:	4827      	ldr	r0, [pc, #156]	; (80069c0 <HAL_UART_Init+0xf0>)
 8006924:	f7fb f948 	bl	8001bb8 <assert_failed>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800692e:	2b00      	cmp	r3, #0
 8006930:	d106      	bne.n	8006940 <HAL_UART_Init+0x70>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f7fb fe82 	bl	8002644 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2224      	movs	r2, #36	; 0x24
 8006944:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f022 0201 	bic.w	r2, r2, #1
 8006956:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 f835 	bl	80069c8 <UART_SetConfig>
 800695e:	4603      	mov	r3, r0
 8006960:	2b01      	cmp	r3, #1
 8006962:	d101      	bne.n	8006968 <HAL_UART_Init+0x98>
  {
    return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e022      	b.n	80069ae <HAL_UART_Init+0xde>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800696c:	2b00      	cmp	r3, #0
 800696e:	d002      	beq.n	8006976 <HAL_UART_Init+0xa6>
  {
    UART_AdvFeatureConfig(huart);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f001 f965 	bl	8007c40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006984:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	689a      	ldr	r2, [r3, #8]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006994:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f042 0201 	orr.w	r2, r2, #1
 80069a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f001 fa8a 	bl	8007ec0 <UART_CheckIdleState>
 80069ac:	4603      	mov	r3, r0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3708      	adds	r7, #8
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	40013800 	.word	0x40013800
 80069bc:	40008000 	.word	0x40008000
 80069c0:	0800f0ec 	.word	0x0800f0ec
 80069c4:	00000000 	.word	0x00000000

080069c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069c8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80069cc:	b08a      	sub	sp, #40	; 0x28
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80069d2:	2300      	movs	r3, #0
 80069d4:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80069d6:	2300      	movs	r3, #0
 80069d8:	76fb      	strb	r3, [r7, #27]
#if defined(LPUART1)
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80069da:	2300      	movs	r3, #0
 80069dc:	617b      	str	r3, [r7, #20]
#endif
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	4a9f      	ldr	r2, [pc, #636]	; (8006c60 <UART_SetConfig+0x298>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d904      	bls.n	80069f2 <UART_SetConfig+0x2a>
 80069e8:	f640 313e 	movw	r1, #2878	; 0xb3e
 80069ec:	489d      	ldr	r0, [pc, #628]	; (8006c64 <UART_SetConfig+0x29c>)
 80069ee:	f7fb f8e3 	bl	8001bb8 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069fa:	d00d      	beq.n	8006a18 <UART_SetConfig+0x50>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d009      	beq.n	8006a18 <UART_SetConfig+0x50>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a0c:	d004      	beq.n	8006a18 <UART_SetConfig+0x50>
 8006a0e:	f640 313f 	movw	r1, #2879	; 0xb3f
 8006a12:	4894      	ldr	r0, [pc, #592]	; (8006c64 <UART_SetConfig+0x29c>)
 8006a14:	f7fb f8d0 	bl	8001bb8 <assert_failed>
#if defined(LPUART1)
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a92      	ldr	r2, [pc, #584]	; (8006c68 <UART_SetConfig+0x2a0>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d10e      	bne.n	8006a40 <UART_SetConfig+0x78>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d030      	beq.n	8006a8c <UART_SetConfig+0xc4>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a32:	d02b      	beq.n	8006a8c <UART_SetConfig+0xc4>
 8006a34:	f640 3143 	movw	r1, #2883	; 0xb43
 8006a38:	488a      	ldr	r0, [pc, #552]	; (8006c64 <UART_SetConfig+0x29c>)
 8006a3a:	f7fb f8bd 	bl	8001bb8 <assert_failed>
 8006a3e:	e025      	b.n	8006a8c <UART_SetConfig+0xc4>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a48:	d012      	beq.n	8006a70 <UART_SetConfig+0xa8>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00e      	beq.n	8006a70 <UART_SetConfig+0xa8>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a5a:	d009      	beq.n	8006a70 <UART_SetConfig+0xa8>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a64:	d004      	beq.n	8006a70 <UART_SetConfig+0xa8>
 8006a66:	f640 3147 	movw	r1, #2887	; 0xb47
 8006a6a:	487e      	ldr	r0, [pc, #504]	; (8006c64 <UART_SetConfig+0x29c>)
 8006a6c:	f7fb f8a4 	bl	8001bb8 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a1b      	ldr	r3, [r3, #32]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d009      	beq.n	8006a8c <UART_SetConfig+0xc4>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6a1b      	ldr	r3, [r3, #32]
 8006a7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a80:	d004      	beq.n	8006a8c <UART_SetConfig+0xc4>
 8006a82:	f640 3148 	movw	r1, #2888	; 0xb48
 8006a86:	4877      	ldr	r0, [pc, #476]	; (8006c64 <UART_SetConfig+0x29c>)
 8006a88:	f7fb f896 	bl	8001bb8 <assert_failed>
#else
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
#endif

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00e      	beq.n	8006ab2 <UART_SetConfig+0xea>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a9c:	d009      	beq.n	8006ab2 <UART_SetConfig+0xea>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006aa6:	d004      	beq.n	8006ab2 <UART_SetConfig+0xea>
 8006aa8:	f640 314f 	movw	r1, #2895	; 0xb4f
 8006aac:	486d      	ldr	r0, [pc, #436]	; (8006c64 <UART_SetConfig+0x29c>)
 8006aae:	f7fb f883 	bl	8001bb8 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	695b      	ldr	r3, [r3, #20]
 8006ab6:	f023 030c 	bic.w	r3, r3, #12
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d103      	bne.n	8006ac6 <UART_SetConfig+0xfe>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	695b      	ldr	r3, [r3, #20]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d104      	bne.n	8006ad0 <UART_SetConfig+0x108>
 8006ac6:	f44f 6135 	mov.w	r1, #2896	; 0xb50
 8006aca:	4866      	ldr	r0, [pc, #408]	; (8006c64 <UART_SetConfig+0x29c>)
 8006acc:	f7fb f874 	bl	8001bb8 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d013      	beq.n	8006b00 <UART_SetConfig+0x138>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ae0:	d00e      	beq.n	8006b00 <UART_SetConfig+0x138>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006aea:	d009      	beq.n	8006b00 <UART_SetConfig+0x138>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	699b      	ldr	r3, [r3, #24]
 8006af0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006af4:	d004      	beq.n	8006b00 <UART_SetConfig+0x138>
 8006af6:	f640 3151 	movw	r1, #2897	; 0xb51
 8006afa:	485a      	ldr	r0, [pc, #360]	; (8006c64 <UART_SetConfig+0x29c>)
 8006afc:	f7fb f85c 	bl	8001bb8 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	69db      	ldr	r3, [r3, #28]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d009      	beq.n	8006b1c <UART_SetConfig+0x154>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	69db      	ldr	r3, [r3, #28]
 8006b0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b10:	d004      	beq.n	8006b1c <UART_SetConfig+0x154>
 8006b12:	f640 3152 	movw	r1, #2898	; 0xb52
 8006b16:	4853      	ldr	r0, [pc, #332]	; (8006c64 <UART_SetConfig+0x29c>)
 8006b18:	f7fb f84e 	bl	8001bb8 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d030      	beq.n	8006b86 <UART_SetConfig+0x1be>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d02c      	beq.n	8006b86 <UART_SetConfig+0x1be>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d028      	beq.n	8006b86 <UART_SetConfig+0x1be>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b38:	2b03      	cmp	r3, #3
 8006b3a:	d024      	beq.n	8006b86 <UART_SetConfig+0x1be>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b40:	2b04      	cmp	r3, #4
 8006b42:	d020      	beq.n	8006b86 <UART_SetConfig+0x1be>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b48:	2b05      	cmp	r3, #5
 8006b4a:	d01c      	beq.n	8006b86 <UART_SetConfig+0x1be>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b50:	2b06      	cmp	r3, #6
 8006b52:	d018      	beq.n	8006b86 <UART_SetConfig+0x1be>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b58:	2b07      	cmp	r3, #7
 8006b5a:	d014      	beq.n	8006b86 <UART_SetConfig+0x1be>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b60:	2b08      	cmp	r3, #8
 8006b62:	d010      	beq.n	8006b86 <UART_SetConfig+0x1be>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b68:	2b09      	cmp	r3, #9
 8006b6a:	d00c      	beq.n	8006b86 <UART_SetConfig+0x1be>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b70:	2b0a      	cmp	r3, #10
 8006b72:	d008      	beq.n	8006b86 <UART_SetConfig+0x1be>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b78:	2b0b      	cmp	r3, #11
 8006b7a:	d004      	beq.n	8006b86 <UART_SetConfig+0x1be>
 8006b7c:	f640 3153 	movw	r1, #2899	; 0xb53
 8006b80:	4838      	ldr	r0, [pc, #224]	; (8006c64 <UART_SetConfig+0x29c>)
 8006b82:	f7fb f819 	bl	8001bb8 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	689a      	ldr	r2, [r3, #8]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	431a      	orrs	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	695b      	ldr	r3, [r3, #20]
 8006b94:	431a      	orrs	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	69db      	ldr	r3, [r3, #28]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	4b2f      	ldr	r3, [pc, #188]	; (8006c6c <UART_SetConfig+0x2a4>)
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	6812      	ldr	r2, [r2, #0]
 8006bb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006bb8:	430b      	orrs	r3, r1
 8006bba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68da      	ldr	r2, [r3, #12]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	430a      	orrs	r2, r1
 8006bd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	699b      	ldr	r3, [r3, #24]
 8006bd6:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a22      	ldr	r2, [pc, #136]	; (8006c68 <UART_SetConfig+0x2a0>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d004      	beq.n	8006bec <UART_SetConfig+0x224>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006be8:	4313      	orrs	r3, r2
 8006bea:	627b      	str	r3, [r7, #36]	; 0x24
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006bf6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	6812      	ldr	r2, [r2, #0]
 8006bfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c00:	430b      	orrs	r3, r1
 8006c02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c0a:	f023 010f 	bic.w	r1, r3, #15
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	430a      	orrs	r2, r1
 8006c18:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a14      	ldr	r2, [pc, #80]	; (8006c70 <UART_SetConfig+0x2a8>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d130      	bne.n	8006c86 <UART_SetConfig+0x2be>
 8006c24:	2003      	movs	r0, #3
 8006c26:	f7ff fe33 	bl	8006890 <LL_RCC_GetUSARTClockSource>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b03      	cmp	r3, #3
 8006c2e:	d825      	bhi.n	8006c7c <UART_SetConfig+0x2b4>
 8006c30:	a201      	add	r2, pc, #4	; (adr r2, 8006c38 <UART_SetConfig+0x270>)
 8006c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c36:	bf00      	nop
 8006c38:	08006c49 	.word	0x08006c49
 8006c3c:	08006c59 	.word	0x08006c59
 8006c40:	08006c51 	.word	0x08006c51
 8006c44:	08006c75 	.word	0x08006c75
 8006c48:	2301      	movs	r3, #1
 8006c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c4e:	e04c      	b.n	8006cea <UART_SetConfig+0x322>
 8006c50:	2302      	movs	r3, #2
 8006c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c56:	e048      	b.n	8006cea <UART_SetConfig+0x322>
 8006c58:	2304      	movs	r3, #4
 8006c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c5e:	e044      	b.n	8006cea <UART_SetConfig+0x322>
 8006c60:	007a1200 	.word	0x007a1200
 8006c64:	0800f0ec 	.word	0x0800f0ec
 8006c68:	40008000 	.word	0x40008000
 8006c6c:	cfff69f3 	.word	0xcfff69f3
 8006c70:	40013800 	.word	0x40013800
 8006c74:	2308      	movs	r3, #8
 8006c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c7a:	e036      	b.n	8006cea <UART_SetConfig+0x322>
 8006c7c:	2310      	movs	r3, #16
 8006c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c82:	bf00      	nop
 8006c84:	e031      	b.n	8006cea <UART_SetConfig+0x322>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a9f      	ldr	r2, [pc, #636]	; (8006f08 <UART_SetConfig+0x540>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d129      	bne.n	8006ce4 <UART_SetConfig+0x31c>
 8006c90:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8006c94:	f7ff fe0c 	bl	80068b0 <LL_RCC_GetLPUARTClockSource>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c9e:	d014      	beq.n	8006cca <UART_SetConfig+0x302>
 8006ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ca4:	d802      	bhi.n	8006cac <UART_SetConfig+0x2e4>
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d007      	beq.n	8006cba <UART_SetConfig+0x2f2>
 8006caa:	e016      	b.n	8006cda <UART_SetConfig+0x312>
 8006cac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cb0:	d007      	beq.n	8006cc2 <UART_SetConfig+0x2fa>
 8006cb2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cb6:	d00c      	beq.n	8006cd2 <UART_SetConfig+0x30a>
 8006cb8:	e00f      	b.n	8006cda <UART_SetConfig+0x312>
 8006cba:	2300      	movs	r3, #0
 8006cbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cc0:	e013      	b.n	8006cea <UART_SetConfig+0x322>
 8006cc2:	2302      	movs	r3, #2
 8006cc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cc8:	e00f      	b.n	8006cea <UART_SetConfig+0x322>
 8006cca:	2304      	movs	r3, #4
 8006ccc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cd0:	e00b      	b.n	8006cea <UART_SetConfig+0x322>
 8006cd2:	2308      	movs	r3, #8
 8006cd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cd8:	e007      	b.n	8006cea <UART_SetConfig+0x322>
 8006cda:	2310      	movs	r3, #16
 8006cdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ce0:	bf00      	nop
 8006ce2:	e002      	b.n	8006cea <UART_SetConfig+0x322>
 8006ce4:	2310      	movs	r3, #16
 8006ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a86      	ldr	r2, [pc, #536]	; (8006f08 <UART_SetConfig+0x540>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	f040 8422 	bne.w	800753a <UART_SetConfig+0xb72>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006cf6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006cfa:	2b08      	cmp	r3, #8
 8006cfc:	f200 8173 	bhi.w	8006fe6 <UART_SetConfig+0x61e>
 8006d00:	a201      	add	r2, pc, #4	; (adr r2, 8006d08 <UART_SetConfig+0x340>)
 8006d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d06:	bf00      	nop
 8006d08:	08006d2d 	.word	0x08006d2d
 8006d0c:	08006fe7 	.word	0x08006fe7
 8006d10:	08006dcf 	.word	0x08006dcf
 8006d14:	08006fe7 	.word	0x08006fe7
 8006d18:	08006e67 	.word	0x08006e67
 8006d1c:	08006fe7 	.word	0x08006fe7
 8006d20:	08006fe7 	.word	0x08006fe7
 8006d24:	08006fe7 	.word	0x08006fe7
 8006d28:	08006f39 	.word	0x08006f39
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006d2c:	f7fe fcc4 	bl	80056b8 <HAL_RCC_GetPCLK1Freq>
 8006d30:	4602      	mov	r2, r0
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d044      	beq.n	8006dc4 <UART_SetConfig+0x3fc>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d03e      	beq.n	8006dc0 <UART_SetConfig+0x3f8>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d038      	beq.n	8006dbc <UART_SetConfig+0x3f4>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4e:	2b03      	cmp	r3, #3
 8006d50:	d032      	beq.n	8006db8 <UART_SetConfig+0x3f0>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d56:	2b04      	cmp	r3, #4
 8006d58:	d02c      	beq.n	8006db4 <UART_SetConfig+0x3ec>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5e:	2b05      	cmp	r3, #5
 8006d60:	d026      	beq.n	8006db0 <UART_SetConfig+0x3e8>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d66:	2b06      	cmp	r3, #6
 8006d68:	d020      	beq.n	8006dac <UART_SetConfig+0x3e4>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6e:	2b07      	cmp	r3, #7
 8006d70:	d01a      	beq.n	8006da8 <UART_SetConfig+0x3e0>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d76:	2b08      	cmp	r3, #8
 8006d78:	d014      	beq.n	8006da4 <UART_SetConfig+0x3dc>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7e:	2b09      	cmp	r3, #9
 8006d80:	d00e      	beq.n	8006da0 <UART_SetConfig+0x3d8>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d86:	2b0a      	cmp	r3, #10
 8006d88:	d008      	beq.n	8006d9c <UART_SetConfig+0x3d4>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8e:	2b0b      	cmp	r3, #11
 8006d90:	d102      	bne.n	8006d98 <UART_SetConfig+0x3d0>
 8006d92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d96:	e016      	b.n	8006dc6 <UART_SetConfig+0x3fe>
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e014      	b.n	8006dc6 <UART_SetConfig+0x3fe>
 8006d9c:	2380      	movs	r3, #128	; 0x80
 8006d9e:	e012      	b.n	8006dc6 <UART_SetConfig+0x3fe>
 8006da0:	2340      	movs	r3, #64	; 0x40
 8006da2:	e010      	b.n	8006dc6 <UART_SetConfig+0x3fe>
 8006da4:	2320      	movs	r3, #32
 8006da6:	e00e      	b.n	8006dc6 <UART_SetConfig+0x3fe>
 8006da8:	2310      	movs	r3, #16
 8006daa:	e00c      	b.n	8006dc6 <UART_SetConfig+0x3fe>
 8006dac:	230c      	movs	r3, #12
 8006dae:	e00a      	b.n	8006dc6 <UART_SetConfig+0x3fe>
 8006db0:	230a      	movs	r3, #10
 8006db2:	e008      	b.n	8006dc6 <UART_SetConfig+0x3fe>
 8006db4:	2308      	movs	r3, #8
 8006db6:	e006      	b.n	8006dc6 <UART_SetConfig+0x3fe>
 8006db8:	2306      	movs	r3, #6
 8006dba:	e004      	b.n	8006dc6 <UART_SetConfig+0x3fe>
 8006dbc:	2304      	movs	r3, #4
 8006dbe:	e002      	b.n	8006dc6 <UART_SetConfig+0x3fe>
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	e000      	b.n	8006dc6 <UART_SetConfig+0x3fe>
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dca:	617b      	str	r3, [r7, #20]
        break;
 8006dcc:	e10e      	b.n	8006fec <UART_SetConfig+0x624>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d044      	beq.n	8006e60 <UART_SetConfig+0x498>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d03e      	beq.n	8006e5c <UART_SetConfig+0x494>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d038      	beq.n	8006e58 <UART_SetConfig+0x490>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dea:	2b03      	cmp	r3, #3
 8006dec:	d032      	beq.n	8006e54 <UART_SetConfig+0x48c>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df2:	2b04      	cmp	r3, #4
 8006df4:	d02c      	beq.n	8006e50 <UART_SetConfig+0x488>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfa:	2b05      	cmp	r3, #5
 8006dfc:	d026      	beq.n	8006e4c <UART_SetConfig+0x484>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e02:	2b06      	cmp	r3, #6
 8006e04:	d020      	beq.n	8006e48 <UART_SetConfig+0x480>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0a:	2b07      	cmp	r3, #7
 8006e0c:	d01a      	beq.n	8006e44 <UART_SetConfig+0x47c>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e12:	2b08      	cmp	r3, #8
 8006e14:	d014      	beq.n	8006e40 <UART_SetConfig+0x478>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1a:	2b09      	cmp	r3, #9
 8006e1c:	d00e      	beq.n	8006e3c <UART_SetConfig+0x474>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e22:	2b0a      	cmp	r3, #10
 8006e24:	d008      	beq.n	8006e38 <UART_SetConfig+0x470>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2a:	2b0b      	cmp	r3, #11
 8006e2c:	d102      	bne.n	8006e34 <UART_SetConfig+0x46c>
 8006e2e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006e32:	e016      	b.n	8006e62 <UART_SetConfig+0x49a>
 8006e34:	4b35      	ldr	r3, [pc, #212]	; (8006f0c <UART_SetConfig+0x544>)
 8006e36:	e014      	b.n	8006e62 <UART_SetConfig+0x49a>
 8006e38:	4b35      	ldr	r3, [pc, #212]	; (8006f10 <UART_SetConfig+0x548>)
 8006e3a:	e012      	b.n	8006e62 <UART_SetConfig+0x49a>
 8006e3c:	4b35      	ldr	r3, [pc, #212]	; (8006f14 <UART_SetConfig+0x54c>)
 8006e3e:	e010      	b.n	8006e62 <UART_SetConfig+0x49a>
 8006e40:	4b35      	ldr	r3, [pc, #212]	; (8006f18 <UART_SetConfig+0x550>)
 8006e42:	e00e      	b.n	8006e62 <UART_SetConfig+0x49a>
 8006e44:	4b35      	ldr	r3, [pc, #212]	; (8006f1c <UART_SetConfig+0x554>)
 8006e46:	e00c      	b.n	8006e62 <UART_SetConfig+0x49a>
 8006e48:	4b35      	ldr	r3, [pc, #212]	; (8006f20 <UART_SetConfig+0x558>)
 8006e4a:	e00a      	b.n	8006e62 <UART_SetConfig+0x49a>
 8006e4c:	4b35      	ldr	r3, [pc, #212]	; (8006f24 <UART_SetConfig+0x55c>)
 8006e4e:	e008      	b.n	8006e62 <UART_SetConfig+0x49a>
 8006e50:	4b35      	ldr	r3, [pc, #212]	; (8006f28 <UART_SetConfig+0x560>)
 8006e52:	e006      	b.n	8006e62 <UART_SetConfig+0x49a>
 8006e54:	4b35      	ldr	r3, [pc, #212]	; (8006f2c <UART_SetConfig+0x564>)
 8006e56:	e004      	b.n	8006e62 <UART_SetConfig+0x49a>
 8006e58:	4b35      	ldr	r3, [pc, #212]	; (8006f30 <UART_SetConfig+0x568>)
 8006e5a:	e002      	b.n	8006e62 <UART_SetConfig+0x49a>
 8006e5c:	4b35      	ldr	r3, [pc, #212]	; (8006f34 <UART_SetConfig+0x56c>)
 8006e5e:	e000      	b.n	8006e62 <UART_SetConfig+0x49a>
 8006e60:	4b2a      	ldr	r3, [pc, #168]	; (8006f0c <UART_SetConfig+0x544>)
 8006e62:	617b      	str	r3, [r7, #20]
        break;
 8006e64:	e0c2      	b.n	8006fec <UART_SetConfig+0x624>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006e66:	f7fe fba9 	bl	80055bc <HAL_RCC_GetSysClockFreq>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d044      	beq.n	8006efe <UART_SetConfig+0x536>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d03e      	beq.n	8006efa <UART_SetConfig+0x532>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d038      	beq.n	8006ef6 <UART_SetConfig+0x52e>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e88:	2b03      	cmp	r3, #3
 8006e8a:	d032      	beq.n	8006ef2 <UART_SetConfig+0x52a>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e90:	2b04      	cmp	r3, #4
 8006e92:	d02c      	beq.n	8006eee <UART_SetConfig+0x526>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e98:	2b05      	cmp	r3, #5
 8006e9a:	d026      	beq.n	8006eea <UART_SetConfig+0x522>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea0:	2b06      	cmp	r3, #6
 8006ea2:	d020      	beq.n	8006ee6 <UART_SetConfig+0x51e>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea8:	2b07      	cmp	r3, #7
 8006eaa:	d01a      	beq.n	8006ee2 <UART_SetConfig+0x51a>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb0:	2b08      	cmp	r3, #8
 8006eb2:	d014      	beq.n	8006ede <UART_SetConfig+0x516>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb8:	2b09      	cmp	r3, #9
 8006eba:	d00e      	beq.n	8006eda <UART_SetConfig+0x512>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec0:	2b0a      	cmp	r3, #10
 8006ec2:	d008      	beq.n	8006ed6 <UART_SetConfig+0x50e>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec8:	2b0b      	cmp	r3, #11
 8006eca:	d102      	bne.n	8006ed2 <UART_SetConfig+0x50a>
 8006ecc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ed0:	e016      	b.n	8006f00 <UART_SetConfig+0x538>
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e014      	b.n	8006f00 <UART_SetConfig+0x538>
 8006ed6:	2380      	movs	r3, #128	; 0x80
 8006ed8:	e012      	b.n	8006f00 <UART_SetConfig+0x538>
 8006eda:	2340      	movs	r3, #64	; 0x40
 8006edc:	e010      	b.n	8006f00 <UART_SetConfig+0x538>
 8006ede:	2320      	movs	r3, #32
 8006ee0:	e00e      	b.n	8006f00 <UART_SetConfig+0x538>
 8006ee2:	2310      	movs	r3, #16
 8006ee4:	e00c      	b.n	8006f00 <UART_SetConfig+0x538>
 8006ee6:	230c      	movs	r3, #12
 8006ee8:	e00a      	b.n	8006f00 <UART_SetConfig+0x538>
 8006eea:	230a      	movs	r3, #10
 8006eec:	e008      	b.n	8006f00 <UART_SetConfig+0x538>
 8006eee:	2308      	movs	r3, #8
 8006ef0:	e006      	b.n	8006f00 <UART_SetConfig+0x538>
 8006ef2:	2306      	movs	r3, #6
 8006ef4:	e004      	b.n	8006f00 <UART_SetConfig+0x538>
 8006ef6:	2304      	movs	r3, #4
 8006ef8:	e002      	b.n	8006f00 <UART_SetConfig+0x538>
 8006efa:	2302      	movs	r3, #2
 8006efc:	e000      	b.n	8006f00 <UART_SetConfig+0x538>
 8006efe:	2301      	movs	r3, #1
 8006f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f04:	617b      	str	r3, [r7, #20]
        break;
 8006f06:	e071      	b.n	8006fec <UART_SetConfig+0x624>
 8006f08:	40008000 	.word	0x40008000
 8006f0c:	00f42400 	.word	0x00f42400
 8006f10:	0001e848 	.word	0x0001e848
 8006f14:	0003d090 	.word	0x0003d090
 8006f18:	0007a120 	.word	0x0007a120
 8006f1c:	000f4240 	.word	0x000f4240
 8006f20:	00145855 	.word	0x00145855
 8006f24:	00186a00 	.word	0x00186a00
 8006f28:	001e8480 	.word	0x001e8480
 8006f2c:	0028b0aa 	.word	0x0028b0aa
 8006f30:	003d0900 	.word	0x003d0900
 8006f34:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d04e      	beq.n	8006fde <UART_SetConfig+0x616>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d047      	beq.n	8006fd8 <UART_SetConfig+0x610>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d040      	beq.n	8006fd2 <UART_SetConfig+0x60a>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f54:	2b03      	cmp	r3, #3
 8006f56:	d039      	beq.n	8006fcc <UART_SetConfig+0x604>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5c:	2b04      	cmp	r3, #4
 8006f5e:	d032      	beq.n	8006fc6 <UART_SetConfig+0x5fe>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f64:	2b05      	cmp	r3, #5
 8006f66:	d02b      	beq.n	8006fc0 <UART_SetConfig+0x5f8>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6c:	2b06      	cmp	r3, #6
 8006f6e:	d024      	beq.n	8006fba <UART_SetConfig+0x5f2>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f74:	2b07      	cmp	r3, #7
 8006f76:	d01d      	beq.n	8006fb4 <UART_SetConfig+0x5ec>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7c:	2b08      	cmp	r3, #8
 8006f7e:	d016      	beq.n	8006fae <UART_SetConfig+0x5e6>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f84:	2b09      	cmp	r3, #9
 8006f86:	d00f      	beq.n	8006fa8 <UART_SetConfig+0x5e0>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8c:	2b0a      	cmp	r3, #10
 8006f8e:	d008      	beq.n	8006fa2 <UART_SetConfig+0x5da>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f94:	2b0b      	cmp	r3, #11
 8006f96:	d101      	bne.n	8006f9c <UART_SetConfig+0x5d4>
 8006f98:	2380      	movs	r3, #128	; 0x80
 8006f9a:	e022      	b.n	8006fe2 <UART_SetConfig+0x61a>
 8006f9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fa0:	e01f      	b.n	8006fe2 <UART_SetConfig+0x61a>
 8006fa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fa6:	e01c      	b.n	8006fe2 <UART_SetConfig+0x61a>
 8006fa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fac:	e019      	b.n	8006fe2 <UART_SetConfig+0x61a>
 8006fae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fb2:	e016      	b.n	8006fe2 <UART_SetConfig+0x61a>
 8006fb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006fb8:	e013      	b.n	8006fe2 <UART_SetConfig+0x61a>
 8006fba:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8006fbe:	e010      	b.n	8006fe2 <UART_SetConfig+0x61a>
 8006fc0:	f640 43cc 	movw	r3, #3276	; 0xccc
 8006fc4:	e00d      	b.n	8006fe2 <UART_SetConfig+0x61a>
 8006fc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006fca:	e00a      	b.n	8006fe2 <UART_SetConfig+0x61a>
 8006fcc:	f241 5355 	movw	r3, #5461	; 0x1555
 8006fd0:	e007      	b.n	8006fe2 <UART_SetConfig+0x61a>
 8006fd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006fd6:	e004      	b.n	8006fe2 <UART_SetConfig+0x61a>
 8006fd8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006fdc:	e001      	b.n	8006fe2 <UART_SetConfig+0x61a>
 8006fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fe2:	617b      	str	r3, [r7, #20]
        break;
 8006fe4:	e002      	b.n	8006fec <UART_SetConfig+0x624>
      default:
        ret = HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	76fb      	strb	r3, [r7, #27]
        break;
 8006fea:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	f000 85fc 	beq.w	8007bec <UART_SetConfig+0x1224>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	685a      	ldr	r2, [r3, #4]
 8006ff8:	4613      	mov	r3, r2
 8006ffa:	005b      	lsls	r3, r3, #1
 8006ffc:	4413      	add	r3, r2
 8006ffe:	697a      	ldr	r2, [r7, #20]
 8007000:	429a      	cmp	r2, r3
 8007002:	d305      	bcc.n	8007010 <UART_SetConfig+0x648>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800700a:	697a      	ldr	r2, [r7, #20]
 800700c:	429a      	cmp	r2, r3
 800700e:	d903      	bls.n	8007018 <UART_SetConfig+0x650>
      {
        ret = HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	76fb      	strb	r3, [r7, #27]
 8007014:	f000 bdea 	b.w	8007bec <UART_SetConfig+0x1224>
      }
      else
      {
        switch (clocksource)
 8007018:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800701c:	2b08      	cmp	r3, #8
 800701e:	f200 8279 	bhi.w	8007514 <UART_SetConfig+0xb4c>
 8007022:	a201      	add	r2, pc, #4	; (adr r2, 8007028 <UART_SetConfig+0x660>)
 8007024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007028:	0800704d 	.word	0x0800704d
 800702c:	08007515 	.word	0x08007515
 8007030:	0800718b 	.word	0x0800718b
 8007034:	08007515 	.word	0x08007515
 8007038:	08007281 	.word	0x08007281
 800703c:	08007515 	.word	0x08007515
 8007040:	08007515 	.word	0x08007515
 8007044:	08007515 	.word	0x08007515
 8007048:	080073bf 	.word	0x080073bf
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800704c:	f7fe fb34 	bl	80056b8 <HAL_RCC_GetPCLK1Freq>
 8007050:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	4618      	mov	r0, r3
 8007056:	f04f 0100 	mov.w	r1, #0
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705e:	2b00      	cmp	r3, #0
 8007060:	d067      	beq.n	8007132 <UART_SetConfig+0x76a>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007066:	2b01      	cmp	r3, #1
 8007068:	d05e      	beq.n	8007128 <UART_SetConfig+0x760>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706e:	2b02      	cmp	r3, #2
 8007070:	d055      	beq.n	800711e <UART_SetConfig+0x756>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007076:	2b03      	cmp	r3, #3
 8007078:	d04c      	beq.n	8007114 <UART_SetConfig+0x74c>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707e:	2b04      	cmp	r3, #4
 8007080:	d043      	beq.n	800710a <UART_SetConfig+0x742>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007086:	2b05      	cmp	r3, #5
 8007088:	d03a      	beq.n	8007100 <UART_SetConfig+0x738>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708e:	2b06      	cmp	r3, #6
 8007090:	d031      	beq.n	80070f6 <UART_SetConfig+0x72e>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007096:	2b07      	cmp	r3, #7
 8007098:	d028      	beq.n	80070ec <UART_SetConfig+0x724>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709e:	2b08      	cmp	r3, #8
 80070a0:	d01f      	beq.n	80070e2 <UART_SetConfig+0x71a>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a6:	2b09      	cmp	r3, #9
 80070a8:	d016      	beq.n	80070d8 <UART_SetConfig+0x710>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ae:	2b0a      	cmp	r3, #10
 80070b0:	d00d      	beq.n	80070ce <UART_SetConfig+0x706>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b6:	2b0b      	cmp	r3, #11
 80070b8:	d104      	bne.n	80070c4 <UART_SetConfig+0x6fc>
 80070ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070be:	f04f 0400 	mov.w	r4, #0
 80070c2:	e03a      	b.n	800713a <UART_SetConfig+0x772>
 80070c4:	f04f 0301 	mov.w	r3, #1
 80070c8:	f04f 0400 	mov.w	r4, #0
 80070cc:	e035      	b.n	800713a <UART_SetConfig+0x772>
 80070ce:	f04f 0380 	mov.w	r3, #128	; 0x80
 80070d2:	f04f 0400 	mov.w	r4, #0
 80070d6:	e030      	b.n	800713a <UART_SetConfig+0x772>
 80070d8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80070dc:	f04f 0400 	mov.w	r4, #0
 80070e0:	e02b      	b.n	800713a <UART_SetConfig+0x772>
 80070e2:	f04f 0320 	mov.w	r3, #32
 80070e6:	f04f 0400 	mov.w	r4, #0
 80070ea:	e026      	b.n	800713a <UART_SetConfig+0x772>
 80070ec:	f04f 0310 	mov.w	r3, #16
 80070f0:	f04f 0400 	mov.w	r4, #0
 80070f4:	e021      	b.n	800713a <UART_SetConfig+0x772>
 80070f6:	f04f 030c 	mov.w	r3, #12
 80070fa:	f04f 0400 	mov.w	r4, #0
 80070fe:	e01c      	b.n	800713a <UART_SetConfig+0x772>
 8007100:	f04f 030a 	mov.w	r3, #10
 8007104:	f04f 0400 	mov.w	r4, #0
 8007108:	e017      	b.n	800713a <UART_SetConfig+0x772>
 800710a:	f04f 0308 	mov.w	r3, #8
 800710e:	f04f 0400 	mov.w	r4, #0
 8007112:	e012      	b.n	800713a <UART_SetConfig+0x772>
 8007114:	f04f 0306 	mov.w	r3, #6
 8007118:	f04f 0400 	mov.w	r4, #0
 800711c:	e00d      	b.n	800713a <UART_SetConfig+0x772>
 800711e:	f04f 0304 	mov.w	r3, #4
 8007122:	f04f 0400 	mov.w	r4, #0
 8007126:	e008      	b.n	800713a <UART_SetConfig+0x772>
 8007128:	f04f 0302 	mov.w	r3, #2
 800712c:	f04f 0400 	mov.w	r4, #0
 8007130:	e003      	b.n	800713a <UART_SetConfig+0x772>
 8007132:	f04f 0301 	mov.w	r3, #1
 8007136:	f04f 0400 	mov.w	r4, #0
 800713a:	461a      	mov	r2, r3
 800713c:	4623      	mov	r3, r4
 800713e:	f7f9 f877 	bl	8000230 <__aeabi_uldivmod>
 8007142:	4603      	mov	r3, r0
 8007144:	460c      	mov	r4, r1
 8007146:	4619      	mov	r1, r3
 8007148:	4622      	mov	r2, r4
 800714a:	f04f 0300 	mov.w	r3, #0
 800714e:	f04f 0400 	mov.w	r4, #0
 8007152:	0214      	lsls	r4, r2, #8
 8007154:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007158:	020b      	lsls	r3, r1, #8
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	6852      	ldr	r2, [r2, #4]
 800715e:	0852      	lsrs	r2, r2, #1
 8007160:	4611      	mov	r1, r2
 8007162:	f04f 0200 	mov.w	r2, #0
 8007166:	eb13 0b01 	adds.w	fp, r3, r1
 800716a:	eb44 0c02 	adc.w	ip, r4, r2
 800716e:	4658      	mov	r0, fp
 8007170:	4661      	mov	r1, ip
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	f04f 0400 	mov.w	r4, #0
 800717a:	461a      	mov	r2, r3
 800717c:	4623      	mov	r3, r4
 800717e:	f7f9 f857 	bl	8000230 <__aeabi_uldivmod>
 8007182:	4603      	mov	r3, r0
 8007184:	460c      	mov	r4, r1
 8007186:	61fb      	str	r3, [r7, #28]
            break;
 8007188:	e1c7      	b.n	800751a <UART_SetConfig+0xb52>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718e:	2b00      	cmp	r3, #0
 8007190:	d05b      	beq.n	800724a <UART_SetConfig+0x882>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007196:	2b01      	cmp	r3, #1
 8007198:	d053      	beq.n	8007242 <UART_SetConfig+0x87a>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d04b      	beq.n	800723a <UART_SetConfig+0x872>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a6:	2b03      	cmp	r3, #3
 80071a8:	d043      	beq.n	8007232 <UART_SetConfig+0x86a>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ae:	2b04      	cmp	r3, #4
 80071b0:	d03b      	beq.n	800722a <UART_SetConfig+0x862>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b6:	2b05      	cmp	r3, #5
 80071b8:	d033      	beq.n	8007222 <UART_SetConfig+0x85a>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071be:	2b06      	cmp	r3, #6
 80071c0:	d02b      	beq.n	800721a <UART_SetConfig+0x852>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c6:	2b07      	cmp	r3, #7
 80071c8:	d023      	beq.n	8007212 <UART_SetConfig+0x84a>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ce:	2b08      	cmp	r3, #8
 80071d0:	d01b      	beq.n	800720a <UART_SetConfig+0x842>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d6:	2b09      	cmp	r3, #9
 80071d8:	d013      	beq.n	8007202 <UART_SetConfig+0x83a>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071de:	2b0a      	cmp	r3, #10
 80071e0:	d00b      	beq.n	80071fa <UART_SetConfig+0x832>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e6:	2b0b      	cmp	r3, #11
 80071e8:	d103      	bne.n	80071f2 <UART_SetConfig+0x82a>
 80071ea:	4baf      	ldr	r3, [pc, #700]	; (80074a8 <UART_SetConfig+0xae0>)
 80071ec:	f04f 0400 	mov.w	r4, #0
 80071f0:	e02e      	b.n	8007250 <UART_SetConfig+0x888>
 80071f2:	4bae      	ldr	r3, [pc, #696]	; (80074ac <UART_SetConfig+0xae4>)
 80071f4:	f04f 0400 	mov.w	r4, #0
 80071f8:	e02a      	b.n	8007250 <UART_SetConfig+0x888>
 80071fa:	4bad      	ldr	r3, [pc, #692]	; (80074b0 <UART_SetConfig+0xae8>)
 80071fc:	f04f 0400 	mov.w	r4, #0
 8007200:	e026      	b.n	8007250 <UART_SetConfig+0x888>
 8007202:	4bac      	ldr	r3, [pc, #688]	; (80074b4 <UART_SetConfig+0xaec>)
 8007204:	f04f 0400 	mov.w	r4, #0
 8007208:	e022      	b.n	8007250 <UART_SetConfig+0x888>
 800720a:	4bab      	ldr	r3, [pc, #684]	; (80074b8 <UART_SetConfig+0xaf0>)
 800720c:	f04f 0400 	mov.w	r4, #0
 8007210:	e01e      	b.n	8007250 <UART_SetConfig+0x888>
 8007212:	4baa      	ldr	r3, [pc, #680]	; (80074bc <UART_SetConfig+0xaf4>)
 8007214:	f04f 0400 	mov.w	r4, #0
 8007218:	e01a      	b.n	8007250 <UART_SetConfig+0x888>
 800721a:	a49f      	add	r4, pc, #636	; (adr r4, 8007498 <UART_SetConfig+0xad0>)
 800721c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007220:	e016      	b.n	8007250 <UART_SetConfig+0x888>
 8007222:	4ba7      	ldr	r3, [pc, #668]	; (80074c0 <UART_SetConfig+0xaf8>)
 8007224:	f04f 0400 	mov.w	r4, #0
 8007228:	e012      	b.n	8007250 <UART_SetConfig+0x888>
 800722a:	4ba6      	ldr	r3, [pc, #664]	; (80074c4 <UART_SetConfig+0xafc>)
 800722c:	f04f 0400 	mov.w	r4, #0
 8007230:	e00e      	b.n	8007250 <UART_SetConfig+0x888>
 8007232:	a49b      	add	r4, pc, #620	; (adr r4, 80074a0 <UART_SetConfig+0xad8>)
 8007234:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007238:	e00a      	b.n	8007250 <UART_SetConfig+0x888>
 800723a:	4ba3      	ldr	r3, [pc, #652]	; (80074c8 <UART_SetConfig+0xb00>)
 800723c:	f04f 0400 	mov.w	r4, #0
 8007240:	e006      	b.n	8007250 <UART_SetConfig+0x888>
 8007242:	4ba2      	ldr	r3, [pc, #648]	; (80074cc <UART_SetConfig+0xb04>)
 8007244:	f04f 0400 	mov.w	r4, #0
 8007248:	e002      	b.n	8007250 <UART_SetConfig+0x888>
 800724a:	4b98      	ldr	r3, [pc, #608]	; (80074ac <UART_SetConfig+0xae4>)
 800724c:	f04f 0400 	mov.w	r4, #0
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	6852      	ldr	r2, [r2, #4]
 8007254:	0852      	lsrs	r2, r2, #1
 8007256:	4611      	mov	r1, r2
 8007258:	f04f 0200 	mov.w	r2, #0
 800725c:	eb13 0b01 	adds.w	fp, r3, r1
 8007260:	eb44 0c02 	adc.w	ip, r4, r2
 8007264:	4658      	mov	r0, fp
 8007266:	4661      	mov	r1, ip
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	f04f 0400 	mov.w	r4, #0
 8007270:	461a      	mov	r2, r3
 8007272:	4623      	mov	r3, r4
 8007274:	f7f8 ffdc 	bl	8000230 <__aeabi_uldivmod>
 8007278:	4603      	mov	r3, r0
 800727a:	460c      	mov	r4, r1
 800727c:	61fb      	str	r3, [r7, #28]
            break;
 800727e:	e14c      	b.n	800751a <UART_SetConfig+0xb52>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8007280:	f7fe f99c 	bl	80055bc <HAL_RCC_GetSysClockFreq>
 8007284:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	4618      	mov	r0, r3
 800728a:	f04f 0100 	mov.w	r1, #0
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007292:	2b00      	cmp	r3, #0
 8007294:	d067      	beq.n	8007366 <UART_SetConfig+0x99e>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729a:	2b01      	cmp	r3, #1
 800729c:	d05e      	beq.n	800735c <UART_SetConfig+0x994>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d055      	beq.n	8007352 <UART_SetConfig+0x98a>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	d04c      	beq.n	8007348 <UART_SetConfig+0x980>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b2:	2b04      	cmp	r3, #4
 80072b4:	d043      	beq.n	800733e <UART_SetConfig+0x976>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ba:	2b05      	cmp	r3, #5
 80072bc:	d03a      	beq.n	8007334 <UART_SetConfig+0x96c>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c2:	2b06      	cmp	r3, #6
 80072c4:	d031      	beq.n	800732a <UART_SetConfig+0x962>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ca:	2b07      	cmp	r3, #7
 80072cc:	d028      	beq.n	8007320 <UART_SetConfig+0x958>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d2:	2b08      	cmp	r3, #8
 80072d4:	d01f      	beq.n	8007316 <UART_SetConfig+0x94e>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072da:	2b09      	cmp	r3, #9
 80072dc:	d016      	beq.n	800730c <UART_SetConfig+0x944>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e2:	2b0a      	cmp	r3, #10
 80072e4:	d00d      	beq.n	8007302 <UART_SetConfig+0x93a>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ea:	2b0b      	cmp	r3, #11
 80072ec:	d104      	bne.n	80072f8 <UART_SetConfig+0x930>
 80072ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072f2:	f04f 0400 	mov.w	r4, #0
 80072f6:	e03a      	b.n	800736e <UART_SetConfig+0x9a6>
 80072f8:	f04f 0301 	mov.w	r3, #1
 80072fc:	f04f 0400 	mov.w	r4, #0
 8007300:	e035      	b.n	800736e <UART_SetConfig+0x9a6>
 8007302:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007306:	f04f 0400 	mov.w	r4, #0
 800730a:	e030      	b.n	800736e <UART_SetConfig+0x9a6>
 800730c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007310:	f04f 0400 	mov.w	r4, #0
 8007314:	e02b      	b.n	800736e <UART_SetConfig+0x9a6>
 8007316:	f04f 0320 	mov.w	r3, #32
 800731a:	f04f 0400 	mov.w	r4, #0
 800731e:	e026      	b.n	800736e <UART_SetConfig+0x9a6>
 8007320:	f04f 0310 	mov.w	r3, #16
 8007324:	f04f 0400 	mov.w	r4, #0
 8007328:	e021      	b.n	800736e <UART_SetConfig+0x9a6>
 800732a:	f04f 030c 	mov.w	r3, #12
 800732e:	f04f 0400 	mov.w	r4, #0
 8007332:	e01c      	b.n	800736e <UART_SetConfig+0x9a6>
 8007334:	f04f 030a 	mov.w	r3, #10
 8007338:	f04f 0400 	mov.w	r4, #0
 800733c:	e017      	b.n	800736e <UART_SetConfig+0x9a6>
 800733e:	f04f 0308 	mov.w	r3, #8
 8007342:	f04f 0400 	mov.w	r4, #0
 8007346:	e012      	b.n	800736e <UART_SetConfig+0x9a6>
 8007348:	f04f 0306 	mov.w	r3, #6
 800734c:	f04f 0400 	mov.w	r4, #0
 8007350:	e00d      	b.n	800736e <UART_SetConfig+0x9a6>
 8007352:	f04f 0304 	mov.w	r3, #4
 8007356:	f04f 0400 	mov.w	r4, #0
 800735a:	e008      	b.n	800736e <UART_SetConfig+0x9a6>
 800735c:	f04f 0302 	mov.w	r3, #2
 8007360:	f04f 0400 	mov.w	r4, #0
 8007364:	e003      	b.n	800736e <UART_SetConfig+0x9a6>
 8007366:	f04f 0301 	mov.w	r3, #1
 800736a:	f04f 0400 	mov.w	r4, #0
 800736e:	461a      	mov	r2, r3
 8007370:	4623      	mov	r3, r4
 8007372:	f7f8 ff5d 	bl	8000230 <__aeabi_uldivmod>
 8007376:	4603      	mov	r3, r0
 8007378:	460c      	mov	r4, r1
 800737a:	4619      	mov	r1, r3
 800737c:	4622      	mov	r2, r4
 800737e:	f04f 0300 	mov.w	r3, #0
 8007382:	f04f 0400 	mov.w	r4, #0
 8007386:	0214      	lsls	r4, r2, #8
 8007388:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800738c:	020b      	lsls	r3, r1, #8
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	6852      	ldr	r2, [r2, #4]
 8007392:	0852      	lsrs	r2, r2, #1
 8007394:	4611      	mov	r1, r2
 8007396:	f04f 0200 	mov.w	r2, #0
 800739a:	eb13 0b01 	adds.w	fp, r3, r1
 800739e:	eb44 0c02 	adc.w	ip, r4, r2
 80073a2:	4658      	mov	r0, fp
 80073a4:	4661      	mov	r1, ip
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	f04f 0400 	mov.w	r4, #0
 80073ae:	461a      	mov	r2, r3
 80073b0:	4623      	mov	r3, r4
 80073b2:	f7f8 ff3d 	bl	8000230 <__aeabi_uldivmod>
 80073b6:	4603      	mov	r3, r0
 80073b8:	460c      	mov	r4, r1
 80073ba:	61fb      	str	r3, [r7, #28]
            break;
 80073bc:	e0ad      	b.n	800751a <UART_SetConfig+0xb52>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	f000 808a 	beq.w	80074dc <UART_SetConfig+0xb14>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d05b      	beq.n	8007488 <UART_SetConfig+0xac0>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d052      	beq.n	800747e <UART_SetConfig+0xab6>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073dc:	2b03      	cmp	r3, #3
 80073de:	d04a      	beq.n	8007476 <UART_SetConfig+0xaae>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e4:	2b04      	cmp	r3, #4
 80073e6:	d041      	beq.n	800746c <UART_SetConfig+0xaa4>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ec:	2b05      	cmp	r3, #5
 80073ee:	d039      	beq.n	8007464 <UART_SetConfig+0xa9c>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f4:	2b06      	cmp	r3, #6
 80073f6:	d031      	beq.n	800745c <UART_SetConfig+0xa94>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fc:	2b07      	cmp	r3, #7
 80073fe:	d028      	beq.n	8007452 <UART_SetConfig+0xa8a>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007404:	2b08      	cmp	r3, #8
 8007406:	d01f      	beq.n	8007448 <UART_SetConfig+0xa80>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740c:	2b09      	cmp	r3, #9
 800740e:	d016      	beq.n	800743e <UART_SetConfig+0xa76>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007414:	2b0a      	cmp	r3, #10
 8007416:	d00d      	beq.n	8007434 <UART_SetConfig+0xa6c>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741c:	2b0b      	cmp	r3, #11
 800741e:	d104      	bne.n	800742a <UART_SetConfig+0xa62>
 8007420:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007424:	f04f 0400 	mov.w	r4, #0
 8007428:	e05c      	b.n	80074e4 <UART_SetConfig+0xb1c>
 800742a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800742e:	f04f 0400 	mov.w	r4, #0
 8007432:	e057      	b.n	80074e4 <UART_SetConfig+0xb1c>
 8007434:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007438:	f04f 0400 	mov.w	r4, #0
 800743c:	e052      	b.n	80074e4 <UART_SetConfig+0xb1c>
 800743e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007442:	f04f 0400 	mov.w	r4, #0
 8007446:	e04d      	b.n	80074e4 <UART_SetConfig+0xb1c>
 8007448:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800744c:	f04f 0400 	mov.w	r4, #0
 8007450:	e048      	b.n	80074e4 <UART_SetConfig+0xb1c>
 8007452:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007456:	f04f 0400 	mov.w	r4, #0
 800745a:	e043      	b.n	80074e4 <UART_SetConfig+0xb1c>
 800745c:	4b1c      	ldr	r3, [pc, #112]	; (80074d0 <UART_SetConfig+0xb08>)
 800745e:	f04f 0400 	mov.w	r4, #0
 8007462:	e03f      	b.n	80074e4 <UART_SetConfig+0xb1c>
 8007464:	4b1b      	ldr	r3, [pc, #108]	; (80074d4 <UART_SetConfig+0xb0c>)
 8007466:	f04f 0400 	mov.w	r4, #0
 800746a:	e03b      	b.n	80074e4 <UART_SetConfig+0xb1c>
 800746c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007470:	f04f 0400 	mov.w	r4, #0
 8007474:	e036      	b.n	80074e4 <UART_SetConfig+0xb1c>
 8007476:	4b18      	ldr	r3, [pc, #96]	; (80074d8 <UART_SetConfig+0xb10>)
 8007478:	f04f 0400 	mov.w	r4, #0
 800747c:	e032      	b.n	80074e4 <UART_SetConfig+0xb1c>
 800747e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007482:	f04f 0400 	mov.w	r4, #0
 8007486:	e02d      	b.n	80074e4 <UART_SetConfig+0xb1c>
 8007488:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800748c:	f04f 0400 	mov.w	r4, #0
 8007490:	e028      	b.n	80074e4 <UART_SetConfig+0xb1c>
 8007492:	bf00      	nop
 8007494:	f3af 8000 	nop.w
 8007498:	14585500 	.word	0x14585500
 800749c:	00000000 	.word	0x00000000
 80074a0:	28b0aa00 	.word	0x28b0aa00
 80074a4:	00000000 	.word	0x00000000
 80074a8:	00f42400 	.word	0x00f42400
 80074ac:	f4240000 	.word	0xf4240000
 80074b0:	01e84800 	.word	0x01e84800
 80074b4:	03d09000 	.word	0x03d09000
 80074b8:	07a12000 	.word	0x07a12000
 80074bc:	0f424000 	.word	0x0f424000
 80074c0:	186a0000 	.word	0x186a0000
 80074c4:	1e848000 	.word	0x1e848000
 80074c8:	3d090000 	.word	0x3d090000
 80074cc:	7a120000 	.word	0x7a120000
 80074d0:	000aaa00 	.word	0x000aaa00
 80074d4:	000ccc00 	.word	0x000ccc00
 80074d8:	00155500 	.word	0x00155500
 80074dc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80074e0:	f04f 0400 	mov.w	r4, #0
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	6852      	ldr	r2, [r2, #4]
 80074e8:	0852      	lsrs	r2, r2, #1
 80074ea:	4611      	mov	r1, r2
 80074ec:	f04f 0200 	mov.w	r2, #0
 80074f0:	eb13 0b01 	adds.w	fp, r3, r1
 80074f4:	eb44 0c02 	adc.w	ip, r4, r2
 80074f8:	4658      	mov	r0, fp
 80074fa:	4661      	mov	r1, ip
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	f04f 0400 	mov.w	r4, #0
 8007504:	461a      	mov	r2, r3
 8007506:	4623      	mov	r3, r4
 8007508:	f7f8 fe92 	bl	8000230 <__aeabi_uldivmod>
 800750c:	4603      	mov	r3, r0
 800750e:	460c      	mov	r4, r1
 8007510:	61fb      	str	r3, [r7, #28]
            break;
 8007512:	e002      	b.n	800751a <UART_SetConfig+0xb52>
          default:
            ret = HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	76fb      	strb	r3, [r7, #27]
            break;
 8007518:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007520:	d308      	bcc.n	8007534 <UART_SetConfig+0xb6c>
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007528:	d204      	bcs.n	8007534 <UART_SetConfig+0xb6c>
        {
          huart->Instance->BRR = usartdiv;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	69fa      	ldr	r2, [r7, #28]
 8007530:	60da      	str	r2, [r3, #12]
 8007532:	e35b      	b.n	8007bec <UART_SetConfig+0x1224>
        }
        else
        {
          ret = HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	76fb      	strb	r3, [r7, #27]
 8007538:	e358      	b.n	8007bec <UART_SetConfig+0x1224>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	69db      	ldr	r3, [r3, #28]
 800753e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007542:	f040 81a6 	bne.w	8007892 <UART_SetConfig+0xeca>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007546:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800754a:	3b01      	subs	r3, #1
 800754c:	2b07      	cmp	r3, #7
 800754e:	f200 8180 	bhi.w	8007852 <UART_SetConfig+0xe8a>
 8007552:	a201      	add	r2, pc, #4	; (adr r2, 8007558 <UART_SetConfig+0xb90>)
 8007554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007558:	08007579 	.word	0x08007579
 800755c:	08007631 	.word	0x08007631
 8007560:	08007853 	.word	0x08007853
 8007564:	080076d9 	.word	0x080076d9
 8007568:	08007853 	.word	0x08007853
 800756c:	08007853 	.word	0x08007853
 8007570:	08007853 	.word	0x08007853
 8007574:	08007791 	.word	0x08007791
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007578:	f7fe f8b4 	bl	80056e4 <HAL_RCC_GetPCLK2Freq>
 800757c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007582:	2b00      	cmp	r3, #0
 8007584:	d044      	beq.n	8007610 <UART_SetConfig+0xc48>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758a:	2b01      	cmp	r3, #1
 800758c:	d03e      	beq.n	800760c <UART_SetConfig+0xc44>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007592:	2b02      	cmp	r3, #2
 8007594:	d038      	beq.n	8007608 <UART_SetConfig+0xc40>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759a:	2b03      	cmp	r3, #3
 800759c:	d032      	beq.n	8007604 <UART_SetConfig+0xc3c>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a2:	2b04      	cmp	r3, #4
 80075a4:	d02c      	beq.n	8007600 <UART_SetConfig+0xc38>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075aa:	2b05      	cmp	r3, #5
 80075ac:	d026      	beq.n	80075fc <UART_SetConfig+0xc34>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b2:	2b06      	cmp	r3, #6
 80075b4:	d020      	beq.n	80075f8 <UART_SetConfig+0xc30>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ba:	2b07      	cmp	r3, #7
 80075bc:	d01a      	beq.n	80075f4 <UART_SetConfig+0xc2c>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c2:	2b08      	cmp	r3, #8
 80075c4:	d014      	beq.n	80075f0 <UART_SetConfig+0xc28>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ca:	2b09      	cmp	r3, #9
 80075cc:	d00e      	beq.n	80075ec <UART_SetConfig+0xc24>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d2:	2b0a      	cmp	r3, #10
 80075d4:	d008      	beq.n	80075e8 <UART_SetConfig+0xc20>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075da:	2b0b      	cmp	r3, #11
 80075dc:	d102      	bne.n	80075e4 <UART_SetConfig+0xc1c>
 80075de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80075e2:	e016      	b.n	8007612 <UART_SetConfig+0xc4a>
 80075e4:	2301      	movs	r3, #1
 80075e6:	e014      	b.n	8007612 <UART_SetConfig+0xc4a>
 80075e8:	2380      	movs	r3, #128	; 0x80
 80075ea:	e012      	b.n	8007612 <UART_SetConfig+0xc4a>
 80075ec:	2340      	movs	r3, #64	; 0x40
 80075ee:	e010      	b.n	8007612 <UART_SetConfig+0xc4a>
 80075f0:	2320      	movs	r3, #32
 80075f2:	e00e      	b.n	8007612 <UART_SetConfig+0xc4a>
 80075f4:	2310      	movs	r3, #16
 80075f6:	e00c      	b.n	8007612 <UART_SetConfig+0xc4a>
 80075f8:	230c      	movs	r3, #12
 80075fa:	e00a      	b.n	8007612 <UART_SetConfig+0xc4a>
 80075fc:	230a      	movs	r3, #10
 80075fe:	e008      	b.n	8007612 <UART_SetConfig+0xc4a>
 8007600:	2308      	movs	r3, #8
 8007602:	e006      	b.n	8007612 <UART_SetConfig+0xc4a>
 8007604:	2306      	movs	r3, #6
 8007606:	e004      	b.n	8007612 <UART_SetConfig+0xc4a>
 8007608:	2304      	movs	r3, #4
 800760a:	e002      	b.n	8007612 <UART_SetConfig+0xc4a>
 800760c:	2302      	movs	r3, #2
 800760e:	e000      	b.n	8007612 <UART_SetConfig+0xc4a>
 8007610:	2301      	movs	r3, #1
 8007612:	693a      	ldr	r2, [r7, #16]
 8007614:	fbb2 f3f3 	udiv	r3, r2, r3
 8007618:	005a      	lsls	r2, r3, #1
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	085b      	lsrs	r3, r3, #1
 8007620:	441a      	add	r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	fbb2 f3f3 	udiv	r3, r2, r3
 800762a:	b29b      	uxth	r3, r3
 800762c:	61fb      	str	r3, [r7, #28]
        break;
 800762e:	e113      	b.n	8007858 <UART_SetConfig+0xe90>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007634:	2b00      	cmp	r3, #0
 8007636:	d043      	beq.n	80076c0 <UART_SetConfig+0xcf8>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763c:	2b01      	cmp	r3, #1
 800763e:	d03d      	beq.n	80076bc <UART_SetConfig+0xcf4>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007644:	2b02      	cmp	r3, #2
 8007646:	d037      	beq.n	80076b8 <UART_SetConfig+0xcf0>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764c:	2b03      	cmp	r3, #3
 800764e:	d031      	beq.n	80076b4 <UART_SetConfig+0xcec>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007654:	2b04      	cmp	r3, #4
 8007656:	d02b      	beq.n	80076b0 <UART_SetConfig+0xce8>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765c:	2b05      	cmp	r3, #5
 800765e:	d025      	beq.n	80076ac <UART_SetConfig+0xce4>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007664:	2b06      	cmp	r3, #6
 8007666:	d01f      	beq.n	80076a8 <UART_SetConfig+0xce0>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766c:	2b07      	cmp	r3, #7
 800766e:	d019      	beq.n	80076a4 <UART_SetConfig+0xcdc>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007674:	2b08      	cmp	r3, #8
 8007676:	d013      	beq.n	80076a0 <UART_SetConfig+0xcd8>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767c:	2b09      	cmp	r3, #9
 800767e:	d00d      	beq.n	800769c <UART_SetConfig+0xcd4>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007684:	2b0a      	cmp	r3, #10
 8007686:	d007      	beq.n	8007698 <UART_SetConfig+0xcd0>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768c:	2b0b      	cmp	r3, #11
 800768e:	d101      	bne.n	8007694 <UART_SetConfig+0xccc>
 8007690:	4b8c      	ldr	r3, [pc, #560]	; (80078c4 <UART_SetConfig+0xefc>)
 8007692:	e016      	b.n	80076c2 <UART_SetConfig+0xcfa>
 8007694:	4b8c      	ldr	r3, [pc, #560]	; (80078c8 <UART_SetConfig+0xf00>)
 8007696:	e014      	b.n	80076c2 <UART_SetConfig+0xcfa>
 8007698:	4b8c      	ldr	r3, [pc, #560]	; (80078cc <UART_SetConfig+0xf04>)
 800769a:	e012      	b.n	80076c2 <UART_SetConfig+0xcfa>
 800769c:	4b8c      	ldr	r3, [pc, #560]	; (80078d0 <UART_SetConfig+0xf08>)
 800769e:	e010      	b.n	80076c2 <UART_SetConfig+0xcfa>
 80076a0:	4b8c      	ldr	r3, [pc, #560]	; (80078d4 <UART_SetConfig+0xf0c>)
 80076a2:	e00e      	b.n	80076c2 <UART_SetConfig+0xcfa>
 80076a4:	4b8c      	ldr	r3, [pc, #560]	; (80078d8 <UART_SetConfig+0xf10>)
 80076a6:	e00c      	b.n	80076c2 <UART_SetConfig+0xcfa>
 80076a8:	4b8c      	ldr	r3, [pc, #560]	; (80078dc <UART_SetConfig+0xf14>)
 80076aa:	e00a      	b.n	80076c2 <UART_SetConfig+0xcfa>
 80076ac:	4b8c      	ldr	r3, [pc, #560]	; (80078e0 <UART_SetConfig+0xf18>)
 80076ae:	e008      	b.n	80076c2 <UART_SetConfig+0xcfa>
 80076b0:	4b8c      	ldr	r3, [pc, #560]	; (80078e4 <UART_SetConfig+0xf1c>)
 80076b2:	e006      	b.n	80076c2 <UART_SetConfig+0xcfa>
 80076b4:	4b8c      	ldr	r3, [pc, #560]	; (80078e8 <UART_SetConfig+0xf20>)
 80076b6:	e004      	b.n	80076c2 <UART_SetConfig+0xcfa>
 80076b8:	4b8c      	ldr	r3, [pc, #560]	; (80078ec <UART_SetConfig+0xf24>)
 80076ba:	e002      	b.n	80076c2 <UART_SetConfig+0xcfa>
 80076bc:	4b8c      	ldr	r3, [pc, #560]	; (80078f0 <UART_SetConfig+0xf28>)
 80076be:	e000      	b.n	80076c2 <UART_SetConfig+0xcfa>
 80076c0:	4b81      	ldr	r3, [pc, #516]	; (80078c8 <UART_SetConfig+0xf00>)
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	6852      	ldr	r2, [r2, #4]
 80076c6:	0852      	lsrs	r2, r2, #1
 80076c8:	441a      	add	r2, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	61fb      	str	r3, [r7, #28]
        break;
 80076d6:	e0bf      	b.n	8007858 <UART_SetConfig+0xe90>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076d8:	f7fd ff70 	bl	80055bc <HAL_RCC_GetSysClockFreq>
 80076dc:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d044      	beq.n	8007770 <UART_SetConfig+0xda8>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d03e      	beq.n	800776c <UART_SetConfig+0xda4>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d038      	beq.n	8007768 <UART_SetConfig+0xda0>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fa:	2b03      	cmp	r3, #3
 80076fc:	d032      	beq.n	8007764 <UART_SetConfig+0xd9c>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007702:	2b04      	cmp	r3, #4
 8007704:	d02c      	beq.n	8007760 <UART_SetConfig+0xd98>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770a:	2b05      	cmp	r3, #5
 800770c:	d026      	beq.n	800775c <UART_SetConfig+0xd94>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007712:	2b06      	cmp	r3, #6
 8007714:	d020      	beq.n	8007758 <UART_SetConfig+0xd90>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771a:	2b07      	cmp	r3, #7
 800771c:	d01a      	beq.n	8007754 <UART_SetConfig+0xd8c>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007722:	2b08      	cmp	r3, #8
 8007724:	d014      	beq.n	8007750 <UART_SetConfig+0xd88>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772a:	2b09      	cmp	r3, #9
 800772c:	d00e      	beq.n	800774c <UART_SetConfig+0xd84>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007732:	2b0a      	cmp	r3, #10
 8007734:	d008      	beq.n	8007748 <UART_SetConfig+0xd80>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773a:	2b0b      	cmp	r3, #11
 800773c:	d102      	bne.n	8007744 <UART_SetConfig+0xd7c>
 800773e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007742:	e016      	b.n	8007772 <UART_SetConfig+0xdaa>
 8007744:	2301      	movs	r3, #1
 8007746:	e014      	b.n	8007772 <UART_SetConfig+0xdaa>
 8007748:	2380      	movs	r3, #128	; 0x80
 800774a:	e012      	b.n	8007772 <UART_SetConfig+0xdaa>
 800774c:	2340      	movs	r3, #64	; 0x40
 800774e:	e010      	b.n	8007772 <UART_SetConfig+0xdaa>
 8007750:	2320      	movs	r3, #32
 8007752:	e00e      	b.n	8007772 <UART_SetConfig+0xdaa>
 8007754:	2310      	movs	r3, #16
 8007756:	e00c      	b.n	8007772 <UART_SetConfig+0xdaa>
 8007758:	230c      	movs	r3, #12
 800775a:	e00a      	b.n	8007772 <UART_SetConfig+0xdaa>
 800775c:	230a      	movs	r3, #10
 800775e:	e008      	b.n	8007772 <UART_SetConfig+0xdaa>
 8007760:	2308      	movs	r3, #8
 8007762:	e006      	b.n	8007772 <UART_SetConfig+0xdaa>
 8007764:	2306      	movs	r3, #6
 8007766:	e004      	b.n	8007772 <UART_SetConfig+0xdaa>
 8007768:	2304      	movs	r3, #4
 800776a:	e002      	b.n	8007772 <UART_SetConfig+0xdaa>
 800776c:	2302      	movs	r3, #2
 800776e:	e000      	b.n	8007772 <UART_SetConfig+0xdaa>
 8007770:	2301      	movs	r3, #1
 8007772:	693a      	ldr	r2, [r7, #16]
 8007774:	fbb2 f3f3 	udiv	r3, r2, r3
 8007778:	005a      	lsls	r2, r3, #1
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	085b      	lsrs	r3, r3, #1
 8007780:	441a      	add	r2, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	fbb2 f3f3 	udiv	r3, r2, r3
 800778a:	b29b      	uxth	r3, r3
 800778c:	61fb      	str	r3, [r7, #28]
        break;
 800778e:	e063      	b.n	8007858 <UART_SetConfig+0xe90>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007794:	2b00      	cmp	r3, #0
 8007796:	d04f      	beq.n	8007838 <UART_SetConfig+0xe70>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779c:	2b01      	cmp	r3, #1
 800779e:	d048      	beq.n	8007832 <UART_SetConfig+0xe6a>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d041      	beq.n	800782c <UART_SetConfig+0xe64>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ac:	2b03      	cmp	r3, #3
 80077ae:	d03a      	beq.n	8007826 <UART_SetConfig+0xe5e>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b4:	2b04      	cmp	r3, #4
 80077b6:	d033      	beq.n	8007820 <UART_SetConfig+0xe58>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077bc:	2b05      	cmp	r3, #5
 80077be:	d02c      	beq.n	800781a <UART_SetConfig+0xe52>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c4:	2b06      	cmp	r3, #6
 80077c6:	d025      	beq.n	8007814 <UART_SetConfig+0xe4c>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077cc:	2b07      	cmp	r3, #7
 80077ce:	d01e      	beq.n	800780e <UART_SetConfig+0xe46>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d4:	2b08      	cmp	r3, #8
 80077d6:	d017      	beq.n	8007808 <UART_SetConfig+0xe40>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077dc:	2b09      	cmp	r3, #9
 80077de:	d010      	beq.n	8007802 <UART_SetConfig+0xe3a>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e4:	2b0a      	cmp	r3, #10
 80077e6:	d009      	beq.n	80077fc <UART_SetConfig+0xe34>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ec:	2b0b      	cmp	r3, #11
 80077ee:	d102      	bne.n	80077f6 <UART_SetConfig+0xe2e>
 80077f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077f4:	e022      	b.n	800783c <UART_SetConfig+0xe74>
 80077f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80077fa:	e01f      	b.n	800783c <UART_SetConfig+0xe74>
 80077fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007800:	e01c      	b.n	800783c <UART_SetConfig+0xe74>
 8007802:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007806:	e019      	b.n	800783c <UART_SetConfig+0xe74>
 8007808:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800780c:	e016      	b.n	800783c <UART_SetConfig+0xe74>
 800780e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007812:	e013      	b.n	800783c <UART_SetConfig+0xe74>
 8007814:	f241 5354 	movw	r3, #5460	; 0x1554
 8007818:	e010      	b.n	800783c <UART_SetConfig+0xe74>
 800781a:	f641 1398 	movw	r3, #6552	; 0x1998
 800781e:	e00d      	b.n	800783c <UART_SetConfig+0xe74>
 8007820:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007824:	e00a      	b.n	800783c <UART_SetConfig+0xe74>
 8007826:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800782a:	e007      	b.n	800783c <UART_SetConfig+0xe74>
 800782c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007830:	e004      	b.n	800783c <UART_SetConfig+0xe74>
 8007832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007836:	e001      	b.n	800783c <UART_SetConfig+0xe74>
 8007838:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	6852      	ldr	r2, [r2, #4]
 8007840:	0852      	lsrs	r2, r2, #1
 8007842:	441a      	add	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	fbb2 f3f3 	udiv	r3, r2, r3
 800784c:	b29b      	uxth	r3, r3
 800784e:	61fb      	str	r3, [r7, #28]
        break;
 8007850:	e002      	b.n	8007858 <UART_SetConfig+0xe90>
      default:
        ret = HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	76fb      	strb	r3, [r7, #27]
        break;
 8007856:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	2b0f      	cmp	r3, #15
 800785c:	d916      	bls.n	800788c <UART_SetConfig+0xec4>
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007864:	d212      	bcs.n	800788c <UART_SetConfig+0xec4>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	b29b      	uxth	r3, r3
 800786a:	f023 030f 	bic.w	r3, r3, #15
 800786e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	085b      	lsrs	r3, r3, #1
 8007874:	b29b      	uxth	r3, r3
 8007876:	f003 0307 	and.w	r3, r3, #7
 800787a:	b29a      	uxth	r2, r3
 800787c:	89fb      	ldrh	r3, [r7, #14]
 800787e:	4313      	orrs	r3, r2
 8007880:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	89fa      	ldrh	r2, [r7, #14]
 8007888:	60da      	str	r2, [r3, #12]
 800788a:	e1af      	b.n	8007bec <UART_SetConfig+0x1224>
    }
    else
    {
      ret = HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	76fb      	strb	r3, [r7, #27]
 8007890:	e1ac      	b.n	8007bec <UART_SetConfig+0x1224>
    }
  }
  else
  {
    switch (clocksource)
 8007892:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007896:	3b01      	subs	r3, #1
 8007898:	2b07      	cmp	r3, #7
 800789a:	f200 8196 	bhi.w	8007bca <UART_SetConfig+0x1202>
 800789e:	a201      	add	r2, pc, #4	; (adr r2, 80078a4 <UART_SetConfig+0xedc>)
 80078a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a4:	080078f5 	.word	0x080078f5
 80078a8:	080079ab 	.word	0x080079ab
 80078ac:	08007bcb 	.word	0x08007bcb
 80078b0:	08007a55 	.word	0x08007a55
 80078b4:	08007bcb 	.word	0x08007bcb
 80078b8:	08007bcb 	.word	0x08007bcb
 80078bc:	08007bcb 	.word	0x08007bcb
 80078c0:	08007b0b 	.word	0x08007b0b
 80078c4:	0001e848 	.word	0x0001e848
 80078c8:	01e84800 	.word	0x01e84800
 80078cc:	0003d090 	.word	0x0003d090
 80078d0:	0007a120 	.word	0x0007a120
 80078d4:	000f4240 	.word	0x000f4240
 80078d8:	001e8480 	.word	0x001e8480
 80078dc:	0028b0aa 	.word	0x0028b0aa
 80078e0:	0030d400 	.word	0x0030d400
 80078e4:	003d0900 	.word	0x003d0900
 80078e8:	00516154 	.word	0x00516154
 80078ec:	007a1200 	.word	0x007a1200
 80078f0:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078f4:	f7fd fef6 	bl	80056e4 <HAL_RCC_GetPCLK2Freq>
 80078f8:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d044      	beq.n	800798c <UART_SetConfig+0xfc4>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007906:	2b01      	cmp	r3, #1
 8007908:	d03e      	beq.n	8007988 <UART_SetConfig+0xfc0>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790e:	2b02      	cmp	r3, #2
 8007910:	d038      	beq.n	8007984 <UART_SetConfig+0xfbc>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007916:	2b03      	cmp	r3, #3
 8007918:	d032      	beq.n	8007980 <UART_SetConfig+0xfb8>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791e:	2b04      	cmp	r3, #4
 8007920:	d02c      	beq.n	800797c <UART_SetConfig+0xfb4>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007926:	2b05      	cmp	r3, #5
 8007928:	d026      	beq.n	8007978 <UART_SetConfig+0xfb0>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792e:	2b06      	cmp	r3, #6
 8007930:	d020      	beq.n	8007974 <UART_SetConfig+0xfac>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007936:	2b07      	cmp	r3, #7
 8007938:	d01a      	beq.n	8007970 <UART_SetConfig+0xfa8>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793e:	2b08      	cmp	r3, #8
 8007940:	d014      	beq.n	800796c <UART_SetConfig+0xfa4>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007946:	2b09      	cmp	r3, #9
 8007948:	d00e      	beq.n	8007968 <UART_SetConfig+0xfa0>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794e:	2b0a      	cmp	r3, #10
 8007950:	d008      	beq.n	8007964 <UART_SetConfig+0xf9c>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007956:	2b0b      	cmp	r3, #11
 8007958:	d102      	bne.n	8007960 <UART_SetConfig+0xf98>
 800795a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800795e:	e016      	b.n	800798e <UART_SetConfig+0xfc6>
 8007960:	2301      	movs	r3, #1
 8007962:	e014      	b.n	800798e <UART_SetConfig+0xfc6>
 8007964:	2380      	movs	r3, #128	; 0x80
 8007966:	e012      	b.n	800798e <UART_SetConfig+0xfc6>
 8007968:	2340      	movs	r3, #64	; 0x40
 800796a:	e010      	b.n	800798e <UART_SetConfig+0xfc6>
 800796c:	2320      	movs	r3, #32
 800796e:	e00e      	b.n	800798e <UART_SetConfig+0xfc6>
 8007970:	2310      	movs	r3, #16
 8007972:	e00c      	b.n	800798e <UART_SetConfig+0xfc6>
 8007974:	230c      	movs	r3, #12
 8007976:	e00a      	b.n	800798e <UART_SetConfig+0xfc6>
 8007978:	230a      	movs	r3, #10
 800797a:	e008      	b.n	800798e <UART_SetConfig+0xfc6>
 800797c:	2308      	movs	r3, #8
 800797e:	e006      	b.n	800798e <UART_SetConfig+0xfc6>
 8007980:	2306      	movs	r3, #6
 8007982:	e004      	b.n	800798e <UART_SetConfig+0xfc6>
 8007984:	2304      	movs	r3, #4
 8007986:	e002      	b.n	800798e <UART_SetConfig+0xfc6>
 8007988:	2302      	movs	r3, #2
 800798a:	e000      	b.n	800798e <UART_SetConfig+0xfc6>
 800798c:	2301      	movs	r3, #1
 800798e:	693a      	ldr	r2, [r7, #16]
 8007990:	fbb2 f2f3 	udiv	r2, r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	085b      	lsrs	r3, r3, #1
 800799a:	441a      	add	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	61fb      	str	r3, [r7, #28]
        break;
 80079a8:	e112      	b.n	8007bd0 <UART_SetConfig+0x1208>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d044      	beq.n	8007a3c <UART_SetConfig+0x1074>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d03e      	beq.n	8007a38 <UART_SetConfig+0x1070>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d038      	beq.n	8007a34 <UART_SetConfig+0x106c>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c6:	2b03      	cmp	r3, #3
 80079c8:	d032      	beq.n	8007a30 <UART_SetConfig+0x1068>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ce:	2b04      	cmp	r3, #4
 80079d0:	d02c      	beq.n	8007a2c <UART_SetConfig+0x1064>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d6:	2b05      	cmp	r3, #5
 80079d8:	d026      	beq.n	8007a28 <UART_SetConfig+0x1060>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079de:	2b06      	cmp	r3, #6
 80079e0:	d020      	beq.n	8007a24 <UART_SetConfig+0x105c>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e6:	2b07      	cmp	r3, #7
 80079e8:	d01a      	beq.n	8007a20 <UART_SetConfig+0x1058>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ee:	2b08      	cmp	r3, #8
 80079f0:	d014      	beq.n	8007a1c <UART_SetConfig+0x1054>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f6:	2b09      	cmp	r3, #9
 80079f8:	d00e      	beq.n	8007a18 <UART_SetConfig+0x1050>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fe:	2b0a      	cmp	r3, #10
 8007a00:	d008      	beq.n	8007a14 <UART_SetConfig+0x104c>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a06:	2b0b      	cmp	r3, #11
 8007a08:	d102      	bne.n	8007a10 <UART_SetConfig+0x1048>
 8007a0a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007a0e:	e016      	b.n	8007a3e <UART_SetConfig+0x1076>
 8007a10:	4b80      	ldr	r3, [pc, #512]	; (8007c14 <UART_SetConfig+0x124c>)
 8007a12:	e014      	b.n	8007a3e <UART_SetConfig+0x1076>
 8007a14:	4b80      	ldr	r3, [pc, #512]	; (8007c18 <UART_SetConfig+0x1250>)
 8007a16:	e012      	b.n	8007a3e <UART_SetConfig+0x1076>
 8007a18:	4b80      	ldr	r3, [pc, #512]	; (8007c1c <UART_SetConfig+0x1254>)
 8007a1a:	e010      	b.n	8007a3e <UART_SetConfig+0x1076>
 8007a1c:	4b80      	ldr	r3, [pc, #512]	; (8007c20 <UART_SetConfig+0x1258>)
 8007a1e:	e00e      	b.n	8007a3e <UART_SetConfig+0x1076>
 8007a20:	4b80      	ldr	r3, [pc, #512]	; (8007c24 <UART_SetConfig+0x125c>)
 8007a22:	e00c      	b.n	8007a3e <UART_SetConfig+0x1076>
 8007a24:	4b80      	ldr	r3, [pc, #512]	; (8007c28 <UART_SetConfig+0x1260>)
 8007a26:	e00a      	b.n	8007a3e <UART_SetConfig+0x1076>
 8007a28:	4b80      	ldr	r3, [pc, #512]	; (8007c2c <UART_SetConfig+0x1264>)
 8007a2a:	e008      	b.n	8007a3e <UART_SetConfig+0x1076>
 8007a2c:	4b80      	ldr	r3, [pc, #512]	; (8007c30 <UART_SetConfig+0x1268>)
 8007a2e:	e006      	b.n	8007a3e <UART_SetConfig+0x1076>
 8007a30:	4b80      	ldr	r3, [pc, #512]	; (8007c34 <UART_SetConfig+0x126c>)
 8007a32:	e004      	b.n	8007a3e <UART_SetConfig+0x1076>
 8007a34:	4b80      	ldr	r3, [pc, #512]	; (8007c38 <UART_SetConfig+0x1270>)
 8007a36:	e002      	b.n	8007a3e <UART_SetConfig+0x1076>
 8007a38:	4b80      	ldr	r3, [pc, #512]	; (8007c3c <UART_SetConfig+0x1274>)
 8007a3a:	e000      	b.n	8007a3e <UART_SetConfig+0x1076>
 8007a3c:	4b75      	ldr	r3, [pc, #468]	; (8007c14 <UART_SetConfig+0x124c>)
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	6852      	ldr	r2, [r2, #4]
 8007a42:	0852      	lsrs	r2, r2, #1
 8007a44:	441a      	add	r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	61fb      	str	r3, [r7, #28]
        break;
 8007a52:	e0bd      	b.n	8007bd0 <UART_SetConfig+0x1208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a54:	f7fd fdb2 	bl	80055bc <HAL_RCC_GetSysClockFreq>
 8007a58:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d044      	beq.n	8007aec <UART_SetConfig+0x1124>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d03e      	beq.n	8007ae8 <UART_SetConfig+0x1120>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	d038      	beq.n	8007ae4 <UART_SetConfig+0x111c>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a76:	2b03      	cmp	r3, #3
 8007a78:	d032      	beq.n	8007ae0 <UART_SetConfig+0x1118>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7e:	2b04      	cmp	r3, #4
 8007a80:	d02c      	beq.n	8007adc <UART_SetConfig+0x1114>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a86:	2b05      	cmp	r3, #5
 8007a88:	d026      	beq.n	8007ad8 <UART_SetConfig+0x1110>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8e:	2b06      	cmp	r3, #6
 8007a90:	d020      	beq.n	8007ad4 <UART_SetConfig+0x110c>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a96:	2b07      	cmp	r3, #7
 8007a98:	d01a      	beq.n	8007ad0 <UART_SetConfig+0x1108>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9e:	2b08      	cmp	r3, #8
 8007aa0:	d014      	beq.n	8007acc <UART_SetConfig+0x1104>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa6:	2b09      	cmp	r3, #9
 8007aa8:	d00e      	beq.n	8007ac8 <UART_SetConfig+0x1100>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aae:	2b0a      	cmp	r3, #10
 8007ab0:	d008      	beq.n	8007ac4 <UART_SetConfig+0x10fc>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab6:	2b0b      	cmp	r3, #11
 8007ab8:	d102      	bne.n	8007ac0 <UART_SetConfig+0x10f8>
 8007aba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007abe:	e016      	b.n	8007aee <UART_SetConfig+0x1126>
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e014      	b.n	8007aee <UART_SetConfig+0x1126>
 8007ac4:	2380      	movs	r3, #128	; 0x80
 8007ac6:	e012      	b.n	8007aee <UART_SetConfig+0x1126>
 8007ac8:	2340      	movs	r3, #64	; 0x40
 8007aca:	e010      	b.n	8007aee <UART_SetConfig+0x1126>
 8007acc:	2320      	movs	r3, #32
 8007ace:	e00e      	b.n	8007aee <UART_SetConfig+0x1126>
 8007ad0:	2310      	movs	r3, #16
 8007ad2:	e00c      	b.n	8007aee <UART_SetConfig+0x1126>
 8007ad4:	230c      	movs	r3, #12
 8007ad6:	e00a      	b.n	8007aee <UART_SetConfig+0x1126>
 8007ad8:	230a      	movs	r3, #10
 8007ada:	e008      	b.n	8007aee <UART_SetConfig+0x1126>
 8007adc:	2308      	movs	r3, #8
 8007ade:	e006      	b.n	8007aee <UART_SetConfig+0x1126>
 8007ae0:	2306      	movs	r3, #6
 8007ae2:	e004      	b.n	8007aee <UART_SetConfig+0x1126>
 8007ae4:	2304      	movs	r3, #4
 8007ae6:	e002      	b.n	8007aee <UART_SetConfig+0x1126>
 8007ae8:	2302      	movs	r3, #2
 8007aea:	e000      	b.n	8007aee <UART_SetConfig+0x1126>
 8007aec:	2301      	movs	r3, #1
 8007aee:	693a      	ldr	r2, [r7, #16]
 8007af0:	fbb2 f2f3 	udiv	r2, r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	085b      	lsrs	r3, r3, #1
 8007afa:	441a      	add	r2, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	61fb      	str	r3, [r7, #28]
        break;
 8007b08:	e062      	b.n	8007bd0 <UART_SetConfig+0x1208>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d04e      	beq.n	8007bb0 <UART_SetConfig+0x11e8>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d047      	beq.n	8007baa <UART_SetConfig+0x11e2>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d040      	beq.n	8007ba4 <UART_SetConfig+0x11dc>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b26:	2b03      	cmp	r3, #3
 8007b28:	d039      	beq.n	8007b9e <UART_SetConfig+0x11d6>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2e:	2b04      	cmp	r3, #4
 8007b30:	d032      	beq.n	8007b98 <UART_SetConfig+0x11d0>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b36:	2b05      	cmp	r3, #5
 8007b38:	d02b      	beq.n	8007b92 <UART_SetConfig+0x11ca>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3e:	2b06      	cmp	r3, #6
 8007b40:	d024      	beq.n	8007b8c <UART_SetConfig+0x11c4>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b46:	2b07      	cmp	r3, #7
 8007b48:	d01d      	beq.n	8007b86 <UART_SetConfig+0x11be>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4e:	2b08      	cmp	r3, #8
 8007b50:	d016      	beq.n	8007b80 <UART_SetConfig+0x11b8>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b56:	2b09      	cmp	r3, #9
 8007b58:	d00f      	beq.n	8007b7a <UART_SetConfig+0x11b2>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5e:	2b0a      	cmp	r3, #10
 8007b60:	d008      	beq.n	8007b74 <UART_SetConfig+0x11ac>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b66:	2b0b      	cmp	r3, #11
 8007b68:	d101      	bne.n	8007b6e <UART_SetConfig+0x11a6>
 8007b6a:	2380      	movs	r3, #128	; 0x80
 8007b6c:	e022      	b.n	8007bb4 <UART_SetConfig+0x11ec>
 8007b6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b72:	e01f      	b.n	8007bb4 <UART_SetConfig+0x11ec>
 8007b74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b78:	e01c      	b.n	8007bb4 <UART_SetConfig+0x11ec>
 8007b7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b7e:	e019      	b.n	8007bb4 <UART_SetConfig+0x11ec>
 8007b80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b84:	e016      	b.n	8007bb4 <UART_SetConfig+0x11ec>
 8007b86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b8a:	e013      	b.n	8007bb4 <UART_SetConfig+0x11ec>
 8007b8c:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8007b90:	e010      	b.n	8007bb4 <UART_SetConfig+0x11ec>
 8007b92:	f640 43cc 	movw	r3, #3276	; 0xccc
 8007b96:	e00d      	b.n	8007bb4 <UART_SetConfig+0x11ec>
 8007b98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b9c:	e00a      	b.n	8007bb4 <UART_SetConfig+0x11ec>
 8007b9e:	f241 5355 	movw	r3, #5461	; 0x1555
 8007ba2:	e007      	b.n	8007bb4 <UART_SetConfig+0x11ec>
 8007ba4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007ba8:	e004      	b.n	8007bb4 <UART_SetConfig+0x11ec>
 8007baa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007bae:	e001      	b.n	8007bb4 <UART_SetConfig+0x11ec>
 8007bb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	6852      	ldr	r2, [r2, #4]
 8007bb8:	0852      	lsrs	r2, r2, #1
 8007bba:	441a      	add	r2, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	61fb      	str	r3, [r7, #28]
        break;
 8007bc8:	e002      	b.n	8007bd0 <UART_SetConfig+0x1208>
      default:
        ret = HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	76fb      	strb	r3, [r7, #27]
        break;
 8007bce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	2b0f      	cmp	r3, #15
 8007bd4:	d908      	bls.n	8007be8 <UART_SetConfig+0x1220>
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bdc:	d204      	bcs.n	8007be8 <UART_SetConfig+0x1220>
    {
      huart->Instance->BRR = usartdiv;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	69fa      	ldr	r2, [r7, #28]
 8007be4:	60da      	str	r2, [r3, #12]
 8007be6:	e001      	b.n	8007bec <UART_SetConfig+0x1224>
    }
    else
    {
      ret = HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8007c08:	7efb      	ldrb	r3, [r7, #27]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3728      	adds	r7, #40	; 0x28
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007c14:	00f42400 	.word	0x00f42400
 8007c18:	0001e848 	.word	0x0001e848
 8007c1c:	0003d090 	.word	0x0003d090
 8007c20:	0007a120 	.word	0x0007a120
 8007c24:	000f4240 	.word	0x000f4240
 8007c28:	00145855 	.word	0x00145855
 8007c2c:	00186a00 	.word	0x00186a00
 8007c30:	001e8480 	.word	0x001e8480
 8007c34:	0028b0aa 	.word	0x0028b0aa
 8007c38:	003d0900 	.word	0x003d0900
 8007c3c:	007a1200 	.word	0x007a1200

08007c40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4c:	2bff      	cmp	r3, #255	; 0xff
 8007c4e:	d904      	bls.n	8007c5a <UART_AdvFeatureConfig+0x1a>
 8007c50:	f640 411f 	movw	r1, #3103	; 0xc1f
 8007c54:	4898      	ldr	r0, [pc, #608]	; (8007eb8 <UART_AdvFeatureConfig+0x278>)
 8007c56:	f7f9 ffaf 	bl	8001bb8 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c5e:	f003 0301 	and.w	r3, r3, #1
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d018      	beq.n	8007c98 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d009      	beq.n	8007c82 <UART_AdvFeatureConfig+0x42>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c76:	d004      	beq.n	8007c82 <UART_AdvFeatureConfig+0x42>
 8007c78:	f640 4124 	movw	r1, #3108	; 0xc24
 8007c7c:	488e      	ldr	r0, [pc, #568]	; (8007eb8 <UART_AdvFeatureConfig+0x278>)
 8007c7e:	f7f9 ff9b 	bl	8001bb8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	430a      	orrs	r2, r1
 8007c96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9c:	f003 0302 	and.w	r3, r3, #2
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d018      	beq.n	8007cd6 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d009      	beq.n	8007cc0 <UART_AdvFeatureConfig+0x80>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cb4:	d004      	beq.n	8007cc0 <UART_AdvFeatureConfig+0x80>
 8007cb6:	f640 412b 	movw	r1, #3115	; 0xc2b
 8007cba:	487f      	ldr	r0, [pc, #508]	; (8007eb8 <UART_AdvFeatureConfig+0x278>)
 8007cbc:	f7f9 ff7c 	bl	8001bb8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	430a      	orrs	r2, r1
 8007cd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cda:	f003 0304 	and.w	r3, r3, #4
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d018      	beq.n	8007d14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d009      	beq.n	8007cfe <UART_AdvFeatureConfig+0xbe>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007cf2:	d004      	beq.n	8007cfe <UART_AdvFeatureConfig+0xbe>
 8007cf4:	f640 4132 	movw	r1, #3122	; 0xc32
 8007cf8:	486f      	ldr	r0, [pc, #444]	; (8007eb8 <UART_AdvFeatureConfig+0x278>)
 8007cfa:	f7f9 ff5d 	bl	8001bb8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	430a      	orrs	r2, r1
 8007d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d18:	f003 0308 	and.w	r3, r3, #8
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d018      	beq.n	8007d52 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d009      	beq.n	8007d3c <UART_AdvFeatureConfig+0xfc>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d30:	d004      	beq.n	8007d3c <UART_AdvFeatureConfig+0xfc>
 8007d32:	f640 4139 	movw	r1, #3129	; 0xc39
 8007d36:	4860      	ldr	r0, [pc, #384]	; (8007eb8 <UART_AdvFeatureConfig+0x278>)
 8007d38:	f7f9 ff3e 	bl	8001bb8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	430a      	orrs	r2, r1
 8007d50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d56:	f003 0310 	and.w	r3, r3, #16
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d018      	beq.n	8007d90 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d009      	beq.n	8007d7a <UART_AdvFeatureConfig+0x13a>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d6e:	d004      	beq.n	8007d7a <UART_AdvFeatureConfig+0x13a>
 8007d70:	f44f 6144 	mov.w	r1, #3136	; 0xc40
 8007d74:	4850      	ldr	r0, [pc, #320]	; (8007eb8 <UART_AdvFeatureConfig+0x278>)
 8007d76:	f7f9 ff1f 	bl	8001bb8 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	430a      	orrs	r2, r1
 8007d8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d94:	f003 0320 	and.w	r3, r3, #32
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d018      	beq.n	8007dce <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d009      	beq.n	8007db8 <UART_AdvFeatureConfig+0x178>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dac:	d004      	beq.n	8007db8 <UART_AdvFeatureConfig+0x178>
 8007dae:	f640 4147 	movw	r1, #3143	; 0xc47
 8007db2:	4841      	ldr	r0, [pc, #260]	; (8007eb8 <UART_AdvFeatureConfig+0x278>)
 8007db4:	f7f9 ff00 	bl	8001bb8 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	430a      	orrs	r2, r1
 8007dcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d04a      	beq.n	8007e70 <UART_AdvFeatureConfig+0x230>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a37      	ldr	r2, [pc, #220]	; (8007ebc <UART_AdvFeatureConfig+0x27c>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d004      	beq.n	8007dee <UART_AdvFeatureConfig+0x1ae>
 8007de4:	f640 414e 	movw	r1, #3150	; 0xc4e
 8007de8:	4833      	ldr	r0, [pc, #204]	; (8007eb8 <UART_AdvFeatureConfig+0x278>)
 8007dea:	f7f9 fee5 	bl	8001bb8 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d009      	beq.n	8007e0a <UART_AdvFeatureConfig+0x1ca>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dfe:	d004      	beq.n	8007e0a <UART_AdvFeatureConfig+0x1ca>
 8007e00:	f640 414f 	movw	r1, #3151	; 0xc4f
 8007e04:	482c      	ldr	r0, [pc, #176]	; (8007eb8 <UART_AdvFeatureConfig+0x278>)
 8007e06:	f7f9 fed7 	bl	8001bb8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	430a      	orrs	r2, r1
 8007e1e:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e28:	d122      	bne.n	8007e70 <UART_AdvFeatureConfig+0x230>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d013      	beq.n	8007e5a <UART_AdvFeatureConfig+0x21a>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e3a:	d00e      	beq.n	8007e5a <UART_AdvFeatureConfig+0x21a>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e44:	d009      	beq.n	8007e5a <UART_AdvFeatureConfig+0x21a>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e4a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007e4e:	d004      	beq.n	8007e5a <UART_AdvFeatureConfig+0x21a>
 8007e50:	f640 4154 	movw	r1, #3156	; 0xc54
 8007e54:	4818      	ldr	r0, [pc, #96]	; (8007eb8 <UART_AdvFeatureConfig+0x278>)
 8007e56:	f7f9 feaf 	bl	8001bb8 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	430a      	orrs	r2, r1
 8007e6e:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d018      	beq.n	8007eae <UART_AdvFeatureConfig+0x26e>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d009      	beq.n	8007e98 <UART_AdvFeatureConfig+0x258>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e88:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007e8c:	d004      	beq.n	8007e98 <UART_AdvFeatureConfig+0x258>
 8007e8e:	f640 415c 	movw	r1, #3164	; 0xc5c
 8007e92:	4809      	ldr	r0, [pc, #36]	; (8007eb8 <UART_AdvFeatureConfig+0x278>)
 8007e94:	f7f9 fe90 	bl	8001bb8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	430a      	orrs	r2, r1
 8007eac:	605a      	str	r2, [r3, #4]
  }
}
 8007eae:	bf00      	nop
 8007eb0:	3708      	adds	r7, #8
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	0800f0ec 	.word	0x0800f0ec
 8007ebc:	40013800 	.word	0x40013800

08007ec0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af02      	add	r7, sp, #8
 8007ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007ed0:	f7fa fc8c 	bl	80027ec <HAL_GetTick>
 8007ed4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f003 0308 	and.w	r3, r3, #8
 8007ee0:	2b08      	cmp	r3, #8
 8007ee2:	d10e      	bne.n	8007f02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ee4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ee8:	9300      	str	r3, [sp, #0]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 f82c 	bl	8007f50 <UART_WaitOnFlagUntilTimeout>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d001      	beq.n	8007f02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007efe:	2303      	movs	r3, #3
 8007f00:	e022      	b.n	8007f48 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 0304 	and.w	r3, r3, #4
 8007f0c:	2b04      	cmp	r3, #4
 8007f0e:	d10e      	bne.n	8007f2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f14:	9300      	str	r3, [sp, #0]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 f816 	bl	8007f50 <UART_WaitOnFlagUntilTimeout>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d001      	beq.n	8007f2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f2a:	2303      	movs	r3, #3
 8007f2c:	e00c      	b.n	8007f48 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2220      	movs	r2, #32
 8007f32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2220      	movs	r2, #32
 8007f3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007f46:	2300      	movs	r3, #0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3710      	adds	r7, #16
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	603b      	str	r3, [r7, #0]
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f60:	e062      	b.n	8008028 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f68:	d05e      	beq.n	8008028 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f6a:	f7fa fc3f 	bl	80027ec <HAL_GetTick>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	1ad3      	subs	r3, r2, r3
 8007f74:	69ba      	ldr	r2, [r7, #24]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d302      	bcc.n	8007f80 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d11d      	bne.n	8007fbc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007f8e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	689a      	ldr	r2, [r3, #8]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f022 0201 	bic.w	r2, r2, #1
 8007f9e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2220      	movs	r2, #32
 8007fa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2220      	movs	r2, #32
 8007fac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007fb8:	2303      	movs	r3, #3
 8007fba:	e045      	b.n	8008048 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f003 0304 	and.w	r3, r3, #4
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d02e      	beq.n	8008028 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	69db      	ldr	r3, [r3, #28]
 8007fd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fd8:	d126      	bne.n	8008028 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007fe2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007ff2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	689a      	ldr	r2, [r3, #8]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f022 0201 	bic.w	r2, r2, #1
 8008002:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2220      	movs	r2, #32
 8008008:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2220      	movs	r2, #32
 8008010:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2220      	movs	r2, #32
 8008018:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2200      	movs	r2, #0
 8008020:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8008024:	2303      	movs	r3, #3
 8008026:	e00f      	b.n	8008048 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	69da      	ldr	r2, [r3, #28]
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	4013      	ands	r3, r2
 8008032:	68ba      	ldr	r2, [r7, #8]
 8008034:	429a      	cmp	r2, r3
 8008036:	bf0c      	ite	eq
 8008038:	2301      	moveq	r3, #1
 800803a:	2300      	movne	r3, #0
 800803c:	b2db      	uxtb	r3, r3
 800803e:	461a      	mov	r2, r3
 8008040:	79fb      	ldrb	r3, [r7, #7]
 8008042:	429a      	cmp	r2, r3
 8008044:	d08d      	beq.n	8007f62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008046:	2300      	movs	r3, #0
}
 8008048:	4618      	mov	r0, r3
 800804a:	3710      	adds	r7, #16
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a1f      	ldr	r2, [pc, #124]	; (80080dc <HAL_UARTEx_DisableFifoMode+0x8c>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d009      	beq.n	8008076 <HAL_UARTEx_DisableFifoMode+0x26>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a1e      	ldr	r2, [pc, #120]	; (80080e0 <HAL_UARTEx_DisableFifoMode+0x90>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d004      	beq.n	8008076 <HAL_UARTEx_DisableFifoMode+0x26>
 800806c:	f240 2111 	movw	r1, #529	; 0x211
 8008070:	481c      	ldr	r0, [pc, #112]	; (80080e4 <HAL_UARTEx_DisableFifoMode+0x94>)
 8008072:	f7f9 fda1 	bl	8001bb8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800807c:	2b01      	cmp	r3, #1
 800807e:	d101      	bne.n	8008084 <HAL_UARTEx_DisableFifoMode+0x34>
 8008080:	2302      	movs	r3, #2
 8008082:	e027      	b.n	80080d4 <HAL_UARTEx_DisableFifoMode+0x84>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2224      	movs	r2, #36	; 0x24
 8008090:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f022 0201 	bic.w	r2, r2, #1
 80080aa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80080b2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	68fa      	ldr	r2, [r7, #12]
 80080c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2220      	movs	r2, #32
 80080c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80080d2:	2300      	movs	r3, #0
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3710      	adds	r7, #16
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	40013800 	.word	0x40013800
 80080e0:	40008000 	.word	0x40008000
 80080e4:	0800f128 	.word	0x0800f128

080080e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a31      	ldr	r2, [pc, #196]	; (80081bc <HAL_UARTEx_SetTxFifoThreshold+0xd4>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d009      	beq.n	8008110 <HAL_UARTEx_SetTxFifoThreshold+0x28>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a2f      	ldr	r2, [pc, #188]	; (80081c0 <HAL_UARTEx_SetTxFifoThreshold+0xd8>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d004      	beq.n	8008110 <HAL_UARTEx_SetTxFifoThreshold+0x28>
 8008106:	f240 213f 	movw	r1, #575	; 0x23f
 800810a:	482e      	ldr	r0, [pc, #184]	; (80081c4 <HAL_UARTEx_SetTxFifoThreshold+0xdc>)
 800810c:	f7f9 fd54 	bl	8001bb8 <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d018      	beq.n	8008148 <HAL_UARTEx_SetTxFifoThreshold+0x60>
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800811c:	d014      	beq.n	8008148 <HAL_UARTEx_SetTxFifoThreshold+0x60>
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008124:	d010      	beq.n	8008148 <HAL_UARTEx_SetTxFifoThreshold+0x60>
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800812c:	d00c      	beq.n	8008148 <HAL_UARTEx_SetTxFifoThreshold+0x60>
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008134:	d008      	beq.n	8008148 <HAL_UARTEx_SetTxFifoThreshold+0x60>
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 800813c:	d004      	beq.n	8008148 <HAL_UARTEx_SetTxFifoThreshold+0x60>
 800813e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008142:	4820      	ldr	r0, [pc, #128]	; (80081c4 <HAL_UARTEx_SetTxFifoThreshold+0xdc>)
 8008144:	f7f9 fd38 	bl	8001bb8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800814e:	2b01      	cmp	r3, #1
 8008150:	d101      	bne.n	8008156 <HAL_UARTEx_SetTxFifoThreshold+0x6e>
 8008152:	2302      	movs	r3, #2
 8008154:	e02d      	b.n	80081b2 <HAL_UARTEx_SetTxFifoThreshold+0xca>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2201      	movs	r2, #1
 800815a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2224      	movs	r2, #36	; 0x24
 8008162:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f022 0201 	bic.w	r2, r2, #1
 800817c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	683a      	ldr	r2, [r7, #0]
 800818e:	430a      	orrs	r2, r1
 8008190:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 f888 	bl	80082a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	68fa      	ldr	r2, [r7, #12]
 800819e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2220      	movs	r2, #32
 80081a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	40013800 	.word	0x40013800
 80081c0:	40008000 	.word	0x40008000
 80081c4:	0800f128 	.word	0x0800f128

080081c8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a31      	ldr	r2, [pc, #196]	; (800829c <HAL_UARTEx_SetRxFifoThreshold+0xd4>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d009      	beq.n	80081f0 <HAL_UARTEx_SetRxFifoThreshold+0x28>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a2f      	ldr	r2, [pc, #188]	; (80082a0 <HAL_UARTEx_SetRxFifoThreshold+0xd8>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d004      	beq.n	80081f0 <HAL_UARTEx_SetRxFifoThreshold+0x28>
 80081e6:	f44f 711c 	mov.w	r1, #624	; 0x270
 80081ea:	482e      	ldr	r0, [pc, #184]	; (80082a4 <HAL_UARTEx_SetRxFifoThreshold+0xdc>)
 80081ec:	f7f9 fce4 	bl	8001bb8 <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d018      	beq.n	8008228 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081fc:	d014      	beq.n	8008228 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008204:	d010      	beq.n	8008228 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800820c:	d00c      	beq.n	8008228 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008214:	d008      	beq.n	8008228 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800821c:	d004      	beq.n	8008228 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 800821e:	f240 2171 	movw	r1, #625	; 0x271
 8008222:	4820      	ldr	r0, [pc, #128]	; (80082a4 <HAL_UARTEx_SetRxFifoThreshold+0xdc>)
 8008224:	f7f9 fcc8 	bl	8001bb8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800822e:	2b01      	cmp	r3, #1
 8008230:	d101      	bne.n	8008236 <HAL_UARTEx_SetRxFifoThreshold+0x6e>
 8008232:	2302      	movs	r3, #2
 8008234:	e02d      	b.n	8008292 <HAL_UARTEx_SetRxFifoThreshold+0xca>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2201      	movs	r2, #1
 800823a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2224      	movs	r2, #36	; 0x24
 8008242:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f022 0201 	bic.w	r2, r2, #1
 800825c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	683a      	ldr	r2, [r7, #0]
 800826e:	430a      	orrs	r2, r1
 8008270:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 f818 	bl	80082a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	68fa      	ldr	r2, [r7, #12]
 800827e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2220      	movs	r2, #32
 8008284:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008290:	2300      	movs	r3, #0
}
 8008292:	4618      	mov	r0, r3
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	40013800 	.word	0x40013800
 80082a0:	40008000 	.word	0x40008000
 80082a4:	0800f128 	.word	0x0800f128

080082a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b089      	sub	sp, #36	; 0x24
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80082b0:	4a2f      	ldr	r2, [pc, #188]	; (8008370 <UARTEx_SetNbDataToProcess+0xc8>)
 80082b2:	f107 0314 	add.w	r3, r7, #20
 80082b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80082ba:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80082be:	4a2d      	ldr	r2, [pc, #180]	; (8008374 <UARTEx_SetNbDataToProcess+0xcc>)
 80082c0:	f107 030c 	add.w	r3, r7, #12
 80082c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80082c8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d108      	bne.n	80082e6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80082e4:	e03d      	b.n	8008362 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80082e6:	2308      	movs	r3, #8
 80082e8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80082ea:	2308      	movs	r3, #8
 80082ec:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	0e5b      	lsrs	r3, r3, #25
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	f003 0307 	and.w	r3, r3, #7
 80082fc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	0f5b      	lsrs	r3, r3, #29
 8008306:	b2db      	uxtb	r3, r3
 8008308:	f003 0307 	and.w	r3, r3, #7
 800830c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800830e:	7fbb      	ldrb	r3, [r7, #30]
 8008310:	7f3a      	ldrb	r2, [r7, #28]
 8008312:	f107 0120 	add.w	r1, r7, #32
 8008316:	440a      	add	r2, r1
 8008318:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800831c:	fb02 f303 	mul.w	r3, r2, r3
 8008320:	7f3a      	ldrb	r2, [r7, #28]
 8008322:	f107 0120 	add.w	r1, r7, #32
 8008326:	440a      	add	r2, r1
 8008328:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800832c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008330:	b29a      	uxth	r2, r3
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008338:	7ffb      	ldrb	r3, [r7, #31]
 800833a:	7f7a      	ldrb	r2, [r7, #29]
 800833c:	f107 0120 	add.w	r1, r7, #32
 8008340:	440a      	add	r2, r1
 8008342:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008346:	fb02 f303 	mul.w	r3, r2, r3
 800834a:	7f7a      	ldrb	r2, [r7, #29]
 800834c:	f107 0120 	add.w	r1, r7, #32
 8008350:	440a      	add	r2, r1
 8008352:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008356:	fb93 f3f2 	sdiv	r3, r3, r2
 800835a:	b29a      	uxth	r2, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008362:	bf00      	nop
 8008364:	3724      	adds	r7, #36	; 0x24
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr
 800836e:	bf00      	nop
 8008370:	0800f164 	.word	0x0800f164
 8008374:	0800f16c 	.word	0x0800f16c

08008378 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008380:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008384:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800838c:	b29a      	uxth	r2, r3
 800838e:	89fb      	ldrh	r3, [r7, #14]
 8008390:	4313      	orrs	r3, r2
 8008392:	b29a      	uxth	r2, r3
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3714      	adds	r7, #20
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80083b0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80083b4:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80083bc:	b29b      	uxth	r3, r3
 80083be:	b21a      	sxth	r2, r3
 80083c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80083c4:	43db      	mvns	r3, r3
 80083c6:	b21b      	sxth	r3, r3
 80083c8:	4013      	ands	r3, r2
 80083ca:	b21b      	sxth	r3, r3
 80083cc:	b29a      	uxth	r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80083d4:	2300      	movs	r3, #0
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3714      	adds	r7, #20
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr

080083e2 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80083e2:	b084      	sub	sp, #16
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	f107 0014 	add.w	r0, r7, #20
 80083f0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f7ff ffaf 	bl	8008378 <USB_EnableGlobalInt>

  return HAL_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3708      	adds	r7, #8
 8008420:	46bd      	mov	sp, r7
 8008422:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008426:	b004      	add	sp, #16
 8008428:	4770      	bx	lr
	...

0800842c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800842c:	b490      	push	{r4, r7}
 800842e:	b086      	sub	sp, #24
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008436:	2300      	movs	r3, #0
 8008438:	75fb      	strb	r3, [r7, #23]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	4413      	add	r3, r2
 8008444:	881b      	ldrh	r3, [r3, #0]
 8008446:	b29b      	uxth	r3, r3
 8008448:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800844c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008450:	82bb      	strh	r3, [r7, #20]

  /* initialize Endpoint */
  switch (ep->type)
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	78db      	ldrb	r3, [r3, #3]
 8008456:	2b03      	cmp	r3, #3
 8008458:	d819      	bhi.n	800848e <USB_ActivateEndpoint+0x62>
 800845a:	a201      	add	r2, pc, #4	; (adr r2, 8008460 <USB_ActivateEndpoint+0x34>)
 800845c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008460:	08008471 	.word	0x08008471
 8008464:	08008485 	.word	0x08008485
 8008468:	08008495 	.word	0x08008495
 800846c:	0800847b 	.word	0x0800847b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008470:	8abb      	ldrh	r3, [r7, #20]
 8008472:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008476:	82bb      	strh	r3, [r7, #20]
      break;
 8008478:	e00d      	b.n	8008496 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800847a:	8abb      	ldrh	r3, [r7, #20]
 800847c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008480:	82bb      	strh	r3, [r7, #20]
      break;
 8008482:	e008      	b.n	8008496 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008484:	8abb      	ldrh	r3, [r7, #20]
 8008486:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800848a:	82bb      	strh	r3, [r7, #20]
      break;
 800848c:	e003      	b.n	8008496 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	75fb      	strb	r3, [r7, #23]
      break;
 8008492:	e000      	b.n	8008496 <USB_ActivateEndpoint+0x6a>
      break;
 8008494:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	441a      	add	r2, r3
 80084a0:	8abb      	ldrh	r3, [r7, #20]
 80084a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	4413      	add	r3, r2
 80084c0:	881b      	ldrh	r3, [r3, #0]
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	b21b      	sxth	r3, r3
 80084c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ce:	b21a      	sxth	r2, r3
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	b21b      	sxth	r3, r3
 80084d6:	4313      	orrs	r3, r2
 80084d8:	b21b      	sxth	r3, r3
 80084da:	b29c      	uxth	r4, r3
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	441a      	add	r2, r3
 80084e6:	4b87      	ldr	r3, [pc, #540]	; (8008704 <USB_ActivateEndpoint+0x2d8>)
 80084e8:	4323      	orrs	r3, r4
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	7b1b      	ldrb	r3, [r3, #12]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	f040 810c 	bne.w	8008710 <USB_ActivateEndpoint+0x2e4>
  {
    if (ep->is_in != 0U)
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	785b      	ldrb	r3, [r3, #1]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d067      	beq.n	80085d0 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008500:	687c      	ldr	r4, [r7, #4]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008508:	b29b      	uxth	r3, r3
 800850a:	441c      	add	r4, r3
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	00db      	lsls	r3, r3, #3
 8008512:	4423      	add	r3, r4
 8008514:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008518:	461c      	mov	r4, r3
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	88db      	ldrh	r3, [r3, #6]
 800851e:	085b      	lsrs	r3, r3, #1
 8008520:	b29b      	uxth	r3, r3
 8008522:	005b      	lsls	r3, r3, #1
 8008524:	b29b      	uxth	r3, r3
 8008526:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	4413      	add	r3, r2
 8008532:	881b      	ldrh	r3, [r3, #0]
 8008534:	b29c      	uxth	r4, r3
 8008536:	4623      	mov	r3, r4
 8008538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800853c:	2b00      	cmp	r3, #0
 800853e:	d014      	beq.n	800856a <USB_ActivateEndpoint+0x13e>
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	4413      	add	r3, r2
 800854a:	881b      	ldrh	r3, [r3, #0]
 800854c:	b29b      	uxth	r3, r3
 800854e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008556:	b29c      	uxth	r4, r3
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	441a      	add	r2, r3
 8008562:	4b69      	ldr	r3, [pc, #420]	; (8008708 <USB_ActivateEndpoint+0x2dc>)
 8008564:	4323      	orrs	r3, r4
 8008566:	b29b      	uxth	r3, r3
 8008568:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	78db      	ldrb	r3, [r3, #3]
 800856e:	2b01      	cmp	r3, #1
 8008570:	d018      	beq.n	80085a4 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	4413      	add	r3, r2
 800857c:	881b      	ldrh	r3, [r3, #0]
 800857e:	b29b      	uxth	r3, r3
 8008580:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008584:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008588:	b29c      	uxth	r4, r3
 800858a:	f084 0320 	eor.w	r3, r4, #32
 800858e:	b29c      	uxth	r4, r3
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	441a      	add	r2, r3
 800859a:	4b5a      	ldr	r3, [pc, #360]	; (8008704 <USB_ActivateEndpoint+0x2d8>)
 800859c:	4323      	orrs	r3, r4
 800859e:	b29b      	uxth	r3, r3
 80085a0:	8013      	strh	r3, [r2, #0]
 80085a2:	e225      	b.n	80089f0 <USB_ActivateEndpoint+0x5c4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	4413      	add	r3, r2
 80085ae:	881b      	ldrh	r3, [r3, #0]
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085ba:	b29c      	uxth	r4, r3
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	441a      	add	r2, r3
 80085c6:	4b4f      	ldr	r3, [pc, #316]	; (8008704 <USB_ActivateEndpoint+0x2d8>)
 80085c8:	4323      	orrs	r3, r4
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	8013      	strh	r3, [r2, #0]
 80085ce:	e20f      	b.n	80089f0 <USB_ActivateEndpoint+0x5c4>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80085d0:	687c      	ldr	r4, [r7, #4]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085d8:	b29b      	uxth	r3, r3
 80085da:	441c      	add	r4, r3
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	00db      	lsls	r3, r3, #3
 80085e2:	4423      	add	r3, r4
 80085e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80085e8:	461c      	mov	r4, r3
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	88db      	ldrh	r3, [r3, #6]
 80085ee:	085b      	lsrs	r3, r3, #1
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	005b      	lsls	r3, r3, #1
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80085f8:	687c      	ldr	r4, [r7, #4]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008600:	b29b      	uxth	r3, r3
 8008602:	441c      	add	r4, r3
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	00db      	lsls	r3, r3, #3
 800860a:	4423      	add	r3, r4
 800860c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008610:	60fb      	str	r3, [r7, #12]
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	691b      	ldr	r3, [r3, #16]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d110      	bne.n	800863c <USB_ActivateEndpoint+0x210>
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	881b      	ldrh	r3, [r3, #0]
 800861e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008622:	b29a      	uxth	r2, r3
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	801a      	strh	r2, [r3, #0]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	881b      	ldrh	r3, [r3, #0]
 800862c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008630:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008634:	b29a      	uxth	r2, r3
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	801a      	strh	r2, [r3, #0]
 800863a:	e026      	b.n	800868a <USB_ActivateEndpoint+0x25e>
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	691b      	ldr	r3, [r3, #16]
 8008640:	2b3d      	cmp	r3, #61	; 0x3d
 8008642:	d813      	bhi.n	800866c <USB_ActivateEndpoint+0x240>
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	085b      	lsrs	r3, r3, #1
 800864a:	613b      	str	r3, [r7, #16]
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	691b      	ldr	r3, [r3, #16]
 8008650:	f003 0301 	and.w	r3, r3, #1
 8008654:	2b00      	cmp	r3, #0
 8008656:	d002      	beq.n	800865e <USB_ActivateEndpoint+0x232>
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	3301      	adds	r3, #1
 800865c:	613b      	str	r3, [r7, #16]
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	b29b      	uxth	r3, r3
 8008662:	029b      	lsls	r3, r3, #10
 8008664:	b29a      	uxth	r2, r3
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	801a      	strh	r2, [r3, #0]
 800866a:	e00e      	b.n	800868a <USB_ActivateEndpoint+0x25e>
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	691b      	ldr	r3, [r3, #16]
 8008670:	095b      	lsrs	r3, r3, #5
 8008672:	613b      	str	r3, [r7, #16]
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	b29b      	uxth	r3, r3
 8008678:	029b      	lsls	r3, r3, #10
 800867a:	b29b      	uxth	r3, r3
 800867c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008680:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008684:	b29a      	uxth	r2, r3
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	4413      	add	r3, r2
 8008694:	881b      	ldrh	r3, [r3, #0]
 8008696:	b29c      	uxth	r4, r3
 8008698:	4623      	mov	r3, r4
 800869a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d014      	beq.n	80086cc <USB_ActivateEndpoint+0x2a0>
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	4413      	add	r3, r2
 80086ac:	881b      	ldrh	r3, [r3, #0]
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086b8:	b29c      	uxth	r4, r3
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	441a      	add	r2, r3
 80086c4:	4b11      	ldr	r3, [pc, #68]	; (800870c <USB_ActivateEndpoint+0x2e0>)
 80086c6:	4323      	orrs	r3, r4
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	4413      	add	r3, r2
 80086d6:	881b      	ldrh	r3, [r3, #0]
 80086d8:	b29b      	uxth	r3, r3
 80086da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086e2:	b29c      	uxth	r4, r3
 80086e4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80086e8:	b29c      	uxth	r4, r3
 80086ea:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80086ee:	b29c      	uxth	r4, r3
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	441a      	add	r2, r3
 80086fa:	4b02      	ldr	r3, [pc, #8]	; (8008704 <USB_ActivateEndpoint+0x2d8>)
 80086fc:	4323      	orrs	r3, r4
 80086fe:	b29b      	uxth	r3, r3
 8008700:	8013      	strh	r3, [r2, #0]
 8008702:	e175      	b.n	80089f0 <USB_ActivateEndpoint+0x5c4>
 8008704:	ffff8080 	.word	0xffff8080
 8008708:	ffff80c0 	.word	0xffff80c0
 800870c:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	4413      	add	r3, r2
 800871a:	881b      	ldrh	r3, [r3, #0]
 800871c:	b29b      	uxth	r3, r3
 800871e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008726:	b29c      	uxth	r4, r3
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	441a      	add	r2, r3
 8008732:	4b96      	ldr	r3, [pc, #600]	; (800898c <USB_ActivateEndpoint+0x560>)
 8008734:	4323      	orrs	r3, r4
 8008736:	b29b      	uxth	r3, r3
 8008738:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800873a:	687c      	ldr	r4, [r7, #4]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008742:	b29b      	uxth	r3, r3
 8008744:	441c      	add	r4, r3
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	00db      	lsls	r3, r3, #3
 800874c:	4423      	add	r3, r4
 800874e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008752:	461c      	mov	r4, r3
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	891b      	ldrh	r3, [r3, #8]
 8008758:	085b      	lsrs	r3, r3, #1
 800875a:	b29b      	uxth	r3, r3
 800875c:	005b      	lsls	r3, r3, #1
 800875e:	b29b      	uxth	r3, r3
 8008760:	8023      	strh	r3, [r4, #0]
 8008762:	687c      	ldr	r4, [r7, #4]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800876a:	b29b      	uxth	r3, r3
 800876c:	441c      	add	r4, r3
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	00db      	lsls	r3, r3, #3
 8008774:	4423      	add	r3, r4
 8008776:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800877a:	461c      	mov	r4, r3
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	895b      	ldrh	r3, [r3, #10]
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	b29b      	uxth	r3, r3
 8008784:	005b      	lsls	r3, r3, #1
 8008786:	b29b      	uxth	r3, r3
 8008788:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	785b      	ldrb	r3, [r3, #1]
 800878e:	2b00      	cmp	r3, #0
 8008790:	f040 8088 	bne.w	80088a4 <USB_ActivateEndpoint+0x478>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	4413      	add	r3, r2
 800879e:	881b      	ldrh	r3, [r3, #0]
 80087a0:	b29c      	uxth	r4, r3
 80087a2:	4623      	mov	r3, r4
 80087a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d014      	beq.n	80087d6 <USB_ActivateEndpoint+0x3aa>
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	4413      	add	r3, r2
 80087b6:	881b      	ldrh	r3, [r3, #0]
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087c2:	b29c      	uxth	r4, r3
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	441a      	add	r2, r3
 80087ce:	4b70      	ldr	r3, [pc, #448]	; (8008990 <USB_ActivateEndpoint+0x564>)
 80087d0:	4323      	orrs	r3, r4
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	4413      	add	r3, r2
 80087e0:	881b      	ldrh	r3, [r3, #0]
 80087e2:	b29c      	uxth	r4, r3
 80087e4:	4623      	mov	r3, r4
 80087e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d014      	beq.n	8008818 <USB_ActivateEndpoint+0x3ec>
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	4413      	add	r3, r2
 80087f8:	881b      	ldrh	r3, [r3, #0]
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008804:	b29c      	uxth	r4, r3
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	441a      	add	r2, r3
 8008810:	4b60      	ldr	r3, [pc, #384]	; (8008994 <USB_ActivateEndpoint+0x568>)
 8008812:	4323      	orrs	r3, r4
 8008814:	b29b      	uxth	r3, r3
 8008816:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	4413      	add	r3, r2
 8008822:	881b      	ldrh	r3, [r3, #0]
 8008824:	b29b      	uxth	r3, r3
 8008826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800882a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800882e:	b29c      	uxth	r4, r3
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	441a      	add	r2, r3
 800883a:	4b56      	ldr	r3, [pc, #344]	; (8008994 <USB_ActivateEndpoint+0x568>)
 800883c:	4323      	orrs	r3, r4
 800883e:	b29b      	uxth	r3, r3
 8008840:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	4413      	add	r3, r2
 800884c:	881b      	ldrh	r3, [r3, #0]
 800884e:	b29b      	uxth	r3, r3
 8008850:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008858:	b29c      	uxth	r4, r3
 800885a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800885e:	b29c      	uxth	r4, r3
 8008860:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8008864:	b29c      	uxth	r4, r3
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	441a      	add	r2, r3
 8008870:	4b49      	ldr	r3, [pc, #292]	; (8008998 <USB_ActivateEndpoint+0x56c>)
 8008872:	4323      	orrs	r3, r4
 8008874:	b29b      	uxth	r3, r3
 8008876:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	4413      	add	r3, r2
 8008882:	881b      	ldrh	r3, [r3, #0]
 8008884:	b29b      	uxth	r3, r3
 8008886:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800888a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800888e:	b29c      	uxth	r4, r3
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	441a      	add	r2, r3
 800889a:	4b3f      	ldr	r3, [pc, #252]	; (8008998 <USB_ActivateEndpoint+0x56c>)
 800889c:	4323      	orrs	r3, r4
 800889e:	b29b      	uxth	r3, r3
 80088a0:	8013      	strh	r3, [r2, #0]
 80088a2:	e0a5      	b.n	80089f0 <USB_ActivateEndpoint+0x5c4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	4413      	add	r3, r2
 80088ae:	881b      	ldrh	r3, [r3, #0]
 80088b0:	b29c      	uxth	r4, r3
 80088b2:	4623      	mov	r3, r4
 80088b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d014      	beq.n	80088e6 <USB_ActivateEndpoint+0x4ba>
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	4413      	add	r3, r2
 80088c6:	881b      	ldrh	r3, [r3, #0]
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088d2:	b29c      	uxth	r4, r3
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	441a      	add	r2, r3
 80088de:	4b2c      	ldr	r3, [pc, #176]	; (8008990 <USB_ActivateEndpoint+0x564>)
 80088e0:	4323      	orrs	r3, r4
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	4413      	add	r3, r2
 80088f0:	881b      	ldrh	r3, [r3, #0]
 80088f2:	b29c      	uxth	r4, r3
 80088f4:	4623      	mov	r3, r4
 80088f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d014      	beq.n	8008928 <USB_ActivateEndpoint+0x4fc>
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	4413      	add	r3, r2
 8008908:	881b      	ldrh	r3, [r3, #0]
 800890a:	b29b      	uxth	r3, r3
 800890c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008914:	b29c      	uxth	r4, r3
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	441a      	add	r2, r3
 8008920:	4b1c      	ldr	r3, [pc, #112]	; (8008994 <USB_ActivateEndpoint+0x568>)
 8008922:	4323      	orrs	r3, r4
 8008924:	b29b      	uxth	r3, r3
 8008926:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	4413      	add	r3, r2
 8008932:	881b      	ldrh	r3, [r3, #0]
 8008934:	b29b      	uxth	r3, r3
 8008936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800893a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800893e:	b29c      	uxth	r4, r3
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	441a      	add	r2, r3
 800894a:	4b11      	ldr	r3, [pc, #68]	; (8008990 <USB_ActivateEndpoint+0x564>)
 800894c:	4323      	orrs	r3, r4
 800894e:	b29b      	uxth	r3, r3
 8008950:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	78db      	ldrb	r3, [r3, #3]
 8008956:	2b01      	cmp	r3, #1
 8008958:	d020      	beq.n	800899c <USB_ActivateEndpoint+0x570>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	4413      	add	r3, r2
 8008964:	881b      	ldrh	r3, [r3, #0]
 8008966:	b29b      	uxth	r3, r3
 8008968:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800896c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008970:	b29c      	uxth	r4, r3
 8008972:	f084 0320 	eor.w	r3, r4, #32
 8008976:	b29c      	uxth	r4, r3
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	441a      	add	r2, r3
 8008982:	4b05      	ldr	r3, [pc, #20]	; (8008998 <USB_ActivateEndpoint+0x56c>)
 8008984:	4323      	orrs	r3, r4
 8008986:	b29b      	uxth	r3, r3
 8008988:	8013      	strh	r3, [r2, #0]
 800898a:	e01c      	b.n	80089c6 <USB_ActivateEndpoint+0x59a>
 800898c:	ffff8180 	.word	0xffff8180
 8008990:	ffffc080 	.word	0xffffc080
 8008994:	ffff80c0 	.word	0xffff80c0
 8008998:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	4413      	add	r3, r2
 80089a6:	881b      	ldrh	r3, [r3, #0]
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089b2:	b29c      	uxth	r4, r3
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	441a      	add	r2, r3
 80089be:	4b0f      	ldr	r3, [pc, #60]	; (80089fc <USB_ActivateEndpoint+0x5d0>)
 80089c0:	4323      	orrs	r3, r4
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	4413      	add	r3, r2
 80089d0:	881b      	ldrh	r3, [r3, #0]
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089dc:	b29c      	uxth	r4, r3
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	441a      	add	r2, r3
 80089e8:	4b04      	ldr	r3, [pc, #16]	; (80089fc <USB_ActivateEndpoint+0x5d0>)
 80089ea:	4323      	orrs	r3, r4
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80089f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3718      	adds	r7, #24
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bc90      	pop	{r4, r7}
 80089fa:	4770      	bx	lr
 80089fc:	ffff8080 	.word	0xffff8080

08008a00 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008a00:	b490      	push	{r4, r7}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	7b1b      	ldrb	r3, [r3, #12]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d171      	bne.n	8008af6 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	785b      	ldrb	r3, [r3, #1]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d036      	beq.n	8008a88 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	4413      	add	r3, r2
 8008a24:	881b      	ldrh	r3, [r3, #0]
 8008a26:	b29c      	uxth	r4, r3
 8008a28:	4623      	mov	r3, r4
 8008a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d014      	beq.n	8008a5c <USB_DeactivateEndpoint+0x5c>
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	4413      	add	r3, r2
 8008a3c:	881b      	ldrh	r3, [r3, #0]
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a48:	b29c      	uxth	r4, r3
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	441a      	add	r2, r3
 8008a54:	4b6b      	ldr	r3, [pc, #428]	; (8008c04 <USB_DeactivateEndpoint+0x204>)
 8008a56:	4323      	orrs	r3, r4
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	4413      	add	r3, r2
 8008a66:	881b      	ldrh	r3, [r3, #0]
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a72:	b29c      	uxth	r4, r3
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	441a      	add	r2, r3
 8008a7e:	4b62      	ldr	r3, [pc, #392]	; (8008c08 <USB_DeactivateEndpoint+0x208>)
 8008a80:	4323      	orrs	r3, r4
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	8013      	strh	r3, [r2, #0]
 8008a86:	e144      	b.n	8008d12 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	4413      	add	r3, r2
 8008a92:	881b      	ldrh	r3, [r3, #0]
 8008a94:	b29c      	uxth	r4, r3
 8008a96:	4623      	mov	r3, r4
 8008a98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d014      	beq.n	8008aca <USB_DeactivateEndpoint+0xca>
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	4413      	add	r3, r2
 8008aaa:	881b      	ldrh	r3, [r3, #0]
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ab6:	b29c      	uxth	r4, r3
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	441a      	add	r2, r3
 8008ac2:	4b52      	ldr	r3, [pc, #328]	; (8008c0c <USB_DeactivateEndpoint+0x20c>)
 8008ac4:	4323      	orrs	r3, r4
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4413      	add	r3, r2
 8008ad4:	881b      	ldrh	r3, [r3, #0]
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ae0:	b29c      	uxth	r4, r3
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	441a      	add	r2, r3
 8008aec:	4b46      	ldr	r3, [pc, #280]	; (8008c08 <USB_DeactivateEndpoint+0x208>)
 8008aee:	4323      	orrs	r3, r4
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	8013      	strh	r3, [r2, #0]
 8008af4:	e10d      	b.n	8008d12 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	785b      	ldrb	r3, [r3, #1]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	f040 8088 	bne.w	8008c10 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	4413      	add	r3, r2
 8008b0a:	881b      	ldrh	r3, [r3, #0]
 8008b0c:	b29c      	uxth	r4, r3
 8008b0e:	4623      	mov	r3, r4
 8008b10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d014      	beq.n	8008b42 <USB_DeactivateEndpoint+0x142>
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	4413      	add	r3, r2
 8008b22:	881b      	ldrh	r3, [r3, #0]
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b2e:	b29c      	uxth	r4, r3
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	441a      	add	r2, r3
 8008b3a:	4b34      	ldr	r3, [pc, #208]	; (8008c0c <USB_DeactivateEndpoint+0x20c>)
 8008b3c:	4323      	orrs	r3, r4
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	4413      	add	r3, r2
 8008b4c:	881b      	ldrh	r3, [r3, #0]
 8008b4e:	b29c      	uxth	r4, r3
 8008b50:	4623      	mov	r3, r4
 8008b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d014      	beq.n	8008b84 <USB_DeactivateEndpoint+0x184>
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	4413      	add	r3, r2
 8008b64:	881b      	ldrh	r3, [r3, #0]
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b70:	b29c      	uxth	r4, r3
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	441a      	add	r2, r3
 8008b7c:	4b21      	ldr	r3, [pc, #132]	; (8008c04 <USB_DeactivateEndpoint+0x204>)
 8008b7e:	4323      	orrs	r3, r4
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	4413      	add	r3, r2
 8008b8e:	881b      	ldrh	r3, [r3, #0]
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b9a:	b29c      	uxth	r4, r3
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	441a      	add	r2, r3
 8008ba6:	4b17      	ldr	r3, [pc, #92]	; (8008c04 <USB_DeactivateEndpoint+0x204>)
 8008ba8:	4323      	orrs	r3, r4
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	4413      	add	r3, r2
 8008bb8:	881b      	ldrh	r3, [r3, #0]
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bc4:	b29c      	uxth	r4, r3
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	441a      	add	r2, r3
 8008bd0:	4b0d      	ldr	r3, [pc, #52]	; (8008c08 <USB_DeactivateEndpoint+0x208>)
 8008bd2:	4323      	orrs	r3, r4
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	4413      	add	r3, r2
 8008be2:	881b      	ldrh	r3, [r3, #0]
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bee:	b29c      	uxth	r4, r3
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	441a      	add	r2, r3
 8008bfa:	4b03      	ldr	r3, [pc, #12]	; (8008c08 <USB_DeactivateEndpoint+0x208>)
 8008bfc:	4323      	orrs	r3, r4
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	8013      	strh	r3, [r2, #0]
 8008c02:	e086      	b.n	8008d12 <USB_DeactivateEndpoint+0x312>
 8008c04:	ffff80c0 	.word	0xffff80c0
 8008c08:	ffff8080 	.word	0xffff8080
 8008c0c:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	009b      	lsls	r3, r3, #2
 8008c18:	4413      	add	r3, r2
 8008c1a:	881b      	ldrh	r3, [r3, #0]
 8008c1c:	b29c      	uxth	r4, r3
 8008c1e:	4623      	mov	r3, r4
 8008c20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d014      	beq.n	8008c52 <USB_DeactivateEndpoint+0x252>
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	4413      	add	r3, r2
 8008c32:	881b      	ldrh	r3, [r3, #0]
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c3e:	b29c      	uxth	r4, r3
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	441a      	add	r2, r3
 8008c4a:	4b35      	ldr	r3, [pc, #212]	; (8008d20 <USB_DeactivateEndpoint+0x320>)
 8008c4c:	4323      	orrs	r3, r4
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	4413      	add	r3, r2
 8008c5c:	881b      	ldrh	r3, [r3, #0]
 8008c5e:	b29c      	uxth	r4, r3
 8008c60:	4623      	mov	r3, r4
 8008c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d014      	beq.n	8008c94 <USB_DeactivateEndpoint+0x294>
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	4413      	add	r3, r2
 8008c74:	881b      	ldrh	r3, [r3, #0]
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c80:	b29c      	uxth	r4, r3
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	441a      	add	r2, r3
 8008c8c:	4b25      	ldr	r3, [pc, #148]	; (8008d24 <USB_DeactivateEndpoint+0x324>)
 8008c8e:	4323      	orrs	r3, r4
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	4413      	add	r3, r2
 8008c9e:	881b      	ldrh	r3, [r3, #0]
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008caa:	b29c      	uxth	r4, r3
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	441a      	add	r2, r3
 8008cb6:	4b1a      	ldr	r3, [pc, #104]	; (8008d20 <USB_DeactivateEndpoint+0x320>)
 8008cb8:	4323      	orrs	r3, r4
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	4413      	add	r3, r2
 8008cc8:	881b      	ldrh	r3, [r3, #0]
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cd4:	b29c      	uxth	r4, r3
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	441a      	add	r2, r3
 8008ce0:	4b11      	ldr	r3, [pc, #68]	; (8008d28 <USB_DeactivateEndpoint+0x328>)
 8008ce2:	4323      	orrs	r3, r4
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	4413      	add	r3, r2
 8008cf2:	881b      	ldrh	r3, [r3, #0]
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cfe:	b29c      	uxth	r4, r3
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	441a      	add	r2, r3
 8008d0a:	4b07      	ldr	r3, [pc, #28]	; (8008d28 <USB_DeactivateEndpoint+0x328>)
 8008d0c:	4323      	orrs	r3, r4
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3708      	adds	r7, #8
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bc90      	pop	{r4, r7}
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop
 8008d20:	ffffc080 	.word	0xffffc080
 8008d24:	ffff80c0 	.word	0xffff80c0
 8008d28:	ffff8080 	.word	0xffff8080

08008d2c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d2c:	b590      	push	{r4, r7, lr}
 8008d2e:	b095      	sub	sp, #84	; 0x54
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	785b      	ldrb	r3, [r3, #1]
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	f040 815d 	bne.w	8008ffa <USB_EPStartXfer+0x2ce>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	699a      	ldr	r2, [r3, #24]
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	691b      	ldr	r3, [r3, #16]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d909      	bls.n	8008d60 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	691b      	ldr	r3, [r3, #16]
 8008d50:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	699a      	ldr	r2, [r3, #24]
 8008d56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d58:	1ad2      	subs	r2, r2, r3
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	619a      	str	r2, [r3, #24]
 8008d5e:	e005      	b.n	8008d6c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	699b      	ldr	r3, [r3, #24]
 8008d64:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	7b1b      	ldrb	r3, [r3, #12]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d11a      	bne.n	8008daa <USB_EPStartXfer+0x7e>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	6959      	ldr	r1, [r3, #20]
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	88da      	ldrh	r2, [r3, #6]
 8008d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 fb9c 	bl	80094be <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008d86:	687c      	ldr	r4, [r7, #4]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	441c      	add	r4, r3
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	00db      	lsls	r3, r3, #3
 8008d98:	4423      	add	r3, r4
 8008d9a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008d9e:	60fb      	str	r3, [r7, #12]
 8008da0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008da2:	b29a      	uxth	r2, r3
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	801a      	strh	r2, [r3, #0]
 8008da8:	e10b      	b.n	8008fc2 <USB_EPStartXfer+0x296>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	4413      	add	r3, r2
 8008db4:	881b      	ldrh	r3, [r3, #0]
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d062      	beq.n	8008e86 <USB_EPStartXfer+0x15a>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008dc0:	687c      	ldr	r4, [r7, #4]
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	785b      	ldrb	r3, [r3, #1]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d144      	bne.n	8008e54 <USB_EPStartXfer+0x128>
 8008dca:	687c      	ldr	r4, [r7, #4]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	441c      	add	r4, r3
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	00db      	lsls	r3, r3, #3
 8008ddc:	4423      	add	r3, r4
 8008dde:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008de2:	613b      	str	r3, [r7, #16]
 8008de4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d110      	bne.n	8008e0c <USB_EPStartXfer+0xe0>
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	881b      	ldrh	r3, [r3, #0]
 8008dee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008df2:	b29a      	uxth	r2, r3
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	801a      	strh	r2, [r3, #0]
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	881b      	ldrh	r3, [r3, #0]
 8008dfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e04:	b29a      	uxth	r2, r3
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	801a      	strh	r2, [r3, #0]
 8008e0a:	e037      	b.n	8008e7c <USB_EPStartXfer+0x150>
 8008e0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e0e:	2b3d      	cmp	r3, #61	; 0x3d
 8008e10:	d811      	bhi.n	8008e36 <USB_EPStartXfer+0x10a>
 8008e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e14:	085b      	lsrs	r3, r3, #1
 8008e16:	647b      	str	r3, [r7, #68]	; 0x44
 8008e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e1a:	f003 0301 	and.w	r3, r3, #1
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d002      	beq.n	8008e28 <USB_EPStartXfer+0xfc>
 8008e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e24:	3301      	adds	r3, #1
 8008e26:	647b      	str	r3, [r7, #68]	; 0x44
 8008e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	029b      	lsls	r3, r3, #10
 8008e2e:	b29a      	uxth	r2, r3
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	801a      	strh	r2, [r3, #0]
 8008e34:	e022      	b.n	8008e7c <USB_EPStartXfer+0x150>
 8008e36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e38:	095b      	lsrs	r3, r3, #5
 8008e3a:	647b      	str	r3, [r7, #68]	; 0x44
 8008e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	029b      	lsls	r3, r3, #10
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e4c:	b29a      	uxth	r2, r3
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	801a      	strh	r2, [r3, #0]
 8008e52:	e013      	b.n	8008e7c <USB_EPStartXfer+0x150>
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	785b      	ldrb	r3, [r3, #1]
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d10f      	bne.n	8008e7c <USB_EPStartXfer+0x150>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	441c      	add	r4, r3
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	00db      	lsls	r3, r3, #3
 8008e6c:	4423      	add	r3, r4
 8008e6e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008e72:	617b      	str	r3, [r7, #20]
 8008e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e76:	b29a      	uxth	r2, r3
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	895b      	ldrh	r3, [r3, #10]
 8008e80:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008e84:	e061      	b.n	8008f4a <USB_EPStartXfer+0x21e>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	785b      	ldrb	r3, [r3, #1]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d144      	bne.n	8008f18 <USB_EPStartXfer+0x1ec>
 8008e8e:	687c      	ldr	r4, [r7, #4]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	441c      	add	r4, r3
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	00db      	lsls	r3, r3, #3
 8008ea0:	4423      	add	r3, r4
 8008ea2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008ea6:	61bb      	str	r3, [r7, #24]
 8008ea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d110      	bne.n	8008ed0 <USB_EPStartXfer+0x1a4>
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	881b      	ldrh	r3, [r3, #0]
 8008eb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008eb6:	b29a      	uxth	r2, r3
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	801a      	strh	r2, [r3, #0]
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	881b      	ldrh	r3, [r3, #0]
 8008ec0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ec4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ec8:	b29a      	uxth	r2, r3
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	801a      	strh	r2, [r3, #0]
 8008ece:	e038      	b.n	8008f42 <USB_EPStartXfer+0x216>
 8008ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ed2:	2b3d      	cmp	r3, #61	; 0x3d
 8008ed4:	d811      	bhi.n	8008efa <USB_EPStartXfer+0x1ce>
 8008ed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ed8:	085b      	lsrs	r3, r3, #1
 8008eda:	643b      	str	r3, [r7, #64]	; 0x40
 8008edc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ede:	f003 0301 	and.w	r3, r3, #1
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d002      	beq.n	8008eec <USB_EPStartXfer+0x1c0>
 8008ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ee8:	3301      	adds	r3, #1
 8008eea:	643b      	str	r3, [r7, #64]	; 0x40
 8008eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	029b      	lsls	r3, r3, #10
 8008ef2:	b29a      	uxth	r2, r3
 8008ef4:	69bb      	ldr	r3, [r7, #24]
 8008ef6:	801a      	strh	r2, [r3, #0]
 8008ef8:	e023      	b.n	8008f42 <USB_EPStartXfer+0x216>
 8008efa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008efc:	095b      	lsrs	r3, r3, #5
 8008efe:	643b      	str	r3, [r7, #64]	; 0x40
 8008f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	029b      	lsls	r3, r3, #10
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f10:	b29a      	uxth	r2, r3
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	801a      	strh	r2, [r3, #0]
 8008f16:	e014      	b.n	8008f42 <USB_EPStartXfer+0x216>
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	785b      	ldrb	r3, [r3, #1]
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d110      	bne.n	8008f42 <USB_EPStartXfer+0x216>
 8008f20:	687c      	ldr	r4, [r7, #4]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	441c      	add	r4, r3
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	00db      	lsls	r3, r3, #3
 8008f32:	4423      	add	r3, r4
 8008f34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008f38:	61fb      	str	r3, [r7, #28]
 8008f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f3c:	b29a      	uxth	r2, r3
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	891b      	ldrh	r3, [r3, #8]
 8008f46:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	6959      	ldr	r1, [r3, #20]
 8008f4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 fab1 	bl	80094be <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	785b      	ldrb	r3, [r3, #1]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d115      	bne.n	8008f90 <USB_EPStartXfer+0x264>
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	009b      	lsls	r3, r3, #2
 8008f6c:	4413      	add	r3, r2
 8008f6e:	881b      	ldrh	r3, [r3, #0]
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f7a:	b29c      	uxth	r4, r3
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	441a      	add	r2, r3
 8008f86:	4b99      	ldr	r3, [pc, #612]	; (80091ec <USB_EPStartXfer+0x4c0>)
 8008f88:	4323      	orrs	r3, r4
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	8013      	strh	r3, [r2, #0]
 8008f8e:	e018      	b.n	8008fc2 <USB_EPStartXfer+0x296>
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	785b      	ldrb	r3, [r3, #1]
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d114      	bne.n	8008fc2 <USB_EPStartXfer+0x296>
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	4413      	add	r3, r2
 8008fa2:	881b      	ldrh	r3, [r3, #0]
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fae:	b29c      	uxth	r4, r3
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	441a      	add	r2, r3
 8008fba:	4b8d      	ldr	r3, [pc, #564]	; (80091f0 <USB_EPStartXfer+0x4c4>)
 8008fbc:	4323      	orrs	r3, r4
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	4413      	add	r3, r2
 8008fcc:	881b      	ldrh	r3, [r3, #0]
 8008fce:	b29b      	uxth	r3, r3
 8008fd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fd8:	b29c      	uxth	r4, r3
 8008fda:	f084 0310 	eor.w	r3, r4, #16
 8008fde:	b29c      	uxth	r4, r3
 8008fe0:	f084 0320 	eor.w	r3, r4, #32
 8008fe4:	b29c      	uxth	r4, r3
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	441a      	add	r2, r3
 8008ff0:	4b80      	ldr	r3, [pc, #512]	; (80091f4 <USB_EPStartXfer+0x4c8>)
 8008ff2:	4323      	orrs	r3, r4
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	8013      	strh	r3, [r2, #0]
 8008ff8:	e13c      	b.n	8009274 <USB_EPStartXfer+0x548>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	699a      	ldr	r2, [r3, #24]
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	691b      	ldr	r3, [r3, #16]
 8009002:	429a      	cmp	r2, r3
 8009004:	d909      	bls.n	800901a <USB_EPStartXfer+0x2ee>
    {
      len = ep->maxpacket;
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	691b      	ldr	r3, [r3, #16]
 800900a:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	699a      	ldr	r2, [r3, #24]
 8009010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009012:	1ad2      	subs	r2, r2, r3
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	619a      	str	r2, [r3, #24]
 8009018:	e005      	b.n	8009026 <USB_EPStartXfer+0x2fa>
    }
    else
    {
      len = ep->xfer_len;
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	699b      	ldr	r3, [r3, #24]
 800901e:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	2200      	movs	r2, #0
 8009024:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	7b1b      	ldrb	r3, [r3, #12]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d144      	bne.n	80090b8 <USB_EPStartXfer+0x38c>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800902e:	687c      	ldr	r4, [r7, #4]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009036:	b29b      	uxth	r3, r3
 8009038:	441c      	add	r4, r3
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	00db      	lsls	r3, r3, #3
 8009040:	4423      	add	r3, r4
 8009042:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009046:	623b      	str	r3, [r7, #32]
 8009048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800904a:	2b00      	cmp	r3, #0
 800904c:	d110      	bne.n	8009070 <USB_EPStartXfer+0x344>
 800904e:	6a3b      	ldr	r3, [r7, #32]
 8009050:	881b      	ldrh	r3, [r3, #0]
 8009052:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009056:	b29a      	uxth	r2, r3
 8009058:	6a3b      	ldr	r3, [r7, #32]
 800905a:	801a      	strh	r2, [r3, #0]
 800905c:	6a3b      	ldr	r3, [r7, #32]
 800905e:	881b      	ldrh	r3, [r3, #0]
 8009060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009068:	b29a      	uxth	r2, r3
 800906a:	6a3b      	ldr	r3, [r7, #32]
 800906c:	801a      	strh	r2, [r3, #0]
 800906e:	e0e6      	b.n	800923e <USB_EPStartXfer+0x512>
 8009070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009072:	2b3d      	cmp	r3, #61	; 0x3d
 8009074:	d811      	bhi.n	800909a <USB_EPStartXfer+0x36e>
 8009076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009078:	085b      	lsrs	r3, r3, #1
 800907a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800907c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800907e:	f003 0301 	and.w	r3, r3, #1
 8009082:	2b00      	cmp	r3, #0
 8009084:	d002      	beq.n	800908c <USB_EPStartXfer+0x360>
 8009086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009088:	3301      	adds	r3, #1
 800908a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800908c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800908e:	b29b      	uxth	r3, r3
 8009090:	029b      	lsls	r3, r3, #10
 8009092:	b29a      	uxth	r2, r3
 8009094:	6a3b      	ldr	r3, [r7, #32]
 8009096:	801a      	strh	r2, [r3, #0]
 8009098:	e0d1      	b.n	800923e <USB_EPStartXfer+0x512>
 800909a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800909c:	095b      	lsrs	r3, r3, #5
 800909e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	029b      	lsls	r3, r3, #10
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	6a3b      	ldr	r3, [r7, #32]
 80090b4:	801a      	strh	r2, [r3, #0]
 80090b6:	e0c2      	b.n	800923e <USB_EPStartXfer+0x512>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	785b      	ldrb	r3, [r3, #1]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d144      	bne.n	800914a <USB_EPStartXfer+0x41e>
 80090c0:	687c      	ldr	r4, [r7, #4]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	441c      	add	r4, r3
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	00db      	lsls	r3, r3, #3
 80090d2:	4423      	add	r3, r4
 80090d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80090d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d110      	bne.n	8009102 <USB_EPStartXfer+0x3d6>
 80090e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e2:	881b      	ldrh	r3, [r3, #0]
 80090e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80090e8:	b29a      	uxth	r2, r3
 80090ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ec:	801a      	strh	r2, [r3, #0]
 80090ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f0:	881b      	ldrh	r3, [r3, #0]
 80090f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090fa:	b29a      	uxth	r2, r3
 80090fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090fe:	801a      	strh	r2, [r3, #0]
 8009100:	e038      	b.n	8009174 <USB_EPStartXfer+0x448>
 8009102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009104:	2b3d      	cmp	r3, #61	; 0x3d
 8009106:	d811      	bhi.n	800912c <USB_EPStartXfer+0x400>
 8009108:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800910a:	085b      	lsrs	r3, r3, #1
 800910c:	63bb      	str	r3, [r7, #56]	; 0x38
 800910e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009110:	f003 0301 	and.w	r3, r3, #1
 8009114:	2b00      	cmp	r3, #0
 8009116:	d002      	beq.n	800911e <USB_EPStartXfer+0x3f2>
 8009118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800911a:	3301      	adds	r3, #1
 800911c:	63bb      	str	r3, [r7, #56]	; 0x38
 800911e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009120:	b29b      	uxth	r3, r3
 8009122:	029b      	lsls	r3, r3, #10
 8009124:	b29a      	uxth	r2, r3
 8009126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009128:	801a      	strh	r2, [r3, #0]
 800912a:	e023      	b.n	8009174 <USB_EPStartXfer+0x448>
 800912c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800912e:	095b      	lsrs	r3, r3, #5
 8009130:	63bb      	str	r3, [r7, #56]	; 0x38
 8009132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009134:	b29b      	uxth	r3, r3
 8009136:	029b      	lsls	r3, r3, #10
 8009138:	b29b      	uxth	r3, r3
 800913a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800913e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009142:	b29a      	uxth	r2, r3
 8009144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009146:	801a      	strh	r2, [r3, #0]
 8009148:	e014      	b.n	8009174 <USB_EPStartXfer+0x448>
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	785b      	ldrb	r3, [r3, #1]
 800914e:	2b01      	cmp	r3, #1
 8009150:	d110      	bne.n	8009174 <USB_EPStartXfer+0x448>
 8009152:	687c      	ldr	r4, [r7, #4]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800915a:	b29b      	uxth	r3, r3
 800915c:	441c      	add	r4, r3
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	00db      	lsls	r3, r3, #3
 8009164:	4423      	add	r3, r4
 8009166:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800916a:	633b      	str	r3, [r7, #48]	; 0x30
 800916c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800916e:	b29a      	uxth	r2, r3
 8009170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009172:	801a      	strh	r2, [r3, #0]
 8009174:	687c      	ldr	r4, [r7, #4]
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	785b      	ldrb	r3, [r3, #1]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d14b      	bne.n	8009216 <USB_EPStartXfer+0x4ea>
 800917e:	687c      	ldr	r4, [r7, #4]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009186:	b29b      	uxth	r3, r3
 8009188:	441c      	add	r4, r3
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	00db      	lsls	r3, r3, #3
 8009190:	4423      	add	r3, r4
 8009192:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009196:	627b      	str	r3, [r7, #36]	; 0x24
 8009198:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800919a:	2b00      	cmp	r3, #0
 800919c:	d110      	bne.n	80091c0 <USB_EPStartXfer+0x494>
 800919e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a0:	881b      	ldrh	r3, [r3, #0]
 80091a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80091a6:	b29a      	uxth	r2, r3
 80091a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091aa:	801a      	strh	r2, [r3, #0]
 80091ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ae:	881b      	ldrh	r3, [r3, #0]
 80091b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091b8:	b29a      	uxth	r2, r3
 80091ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091bc:	801a      	strh	r2, [r3, #0]
 80091be:	e03e      	b.n	800923e <USB_EPStartXfer+0x512>
 80091c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091c2:	2b3d      	cmp	r3, #61	; 0x3d
 80091c4:	d818      	bhi.n	80091f8 <USB_EPStartXfer+0x4cc>
 80091c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091c8:	085b      	lsrs	r3, r3, #1
 80091ca:	637b      	str	r3, [r7, #52]	; 0x34
 80091cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091ce:	f003 0301 	and.w	r3, r3, #1
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d002      	beq.n	80091dc <USB_EPStartXfer+0x4b0>
 80091d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091d8:	3301      	adds	r3, #1
 80091da:	637b      	str	r3, [r7, #52]	; 0x34
 80091dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091de:	b29b      	uxth	r3, r3
 80091e0:	029b      	lsls	r3, r3, #10
 80091e2:	b29a      	uxth	r2, r3
 80091e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e6:	801a      	strh	r2, [r3, #0]
 80091e8:	e029      	b.n	800923e <USB_EPStartXfer+0x512>
 80091ea:	bf00      	nop
 80091ec:	ffff80c0 	.word	0xffff80c0
 80091f0:	ffffc080 	.word	0xffffc080
 80091f4:	ffff8080 	.word	0xffff8080
 80091f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091fa:	095b      	lsrs	r3, r3, #5
 80091fc:	637b      	str	r3, [r7, #52]	; 0x34
 80091fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009200:	b29b      	uxth	r3, r3
 8009202:	029b      	lsls	r3, r3, #10
 8009204:	b29b      	uxth	r3, r3
 8009206:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800920a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800920e:	b29a      	uxth	r2, r3
 8009210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009212:	801a      	strh	r2, [r3, #0]
 8009214:	e013      	b.n	800923e <USB_EPStartXfer+0x512>
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	785b      	ldrb	r3, [r3, #1]
 800921a:	2b01      	cmp	r3, #1
 800921c:	d10f      	bne.n	800923e <USB_EPStartXfer+0x512>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009224:	b29b      	uxth	r3, r3
 8009226:	441c      	add	r4, r3
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	00db      	lsls	r3, r3, #3
 800922e:	4423      	add	r3, r4
 8009230:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009234:	62bb      	str	r3, [r7, #40]	; 0x28
 8009236:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009238:	b29a      	uxth	r2, r3
 800923a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923c:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	4413      	add	r3, r2
 8009248:	881b      	ldrh	r3, [r3, #0]
 800924a:	b29b      	uxth	r3, r3
 800924c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009254:	b29c      	uxth	r4, r3
 8009256:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800925a:	b29c      	uxth	r4, r3
 800925c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8009260:	b29c      	uxth	r4, r3
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	441a      	add	r2, r3
 800926c:	4b04      	ldr	r3, [pc, #16]	; (8009280 <USB_EPStartXfer+0x554>)
 800926e:	4323      	orrs	r3, r4
 8009270:	b29b      	uxth	r3, r3
 8009272:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	3754      	adds	r7, #84	; 0x54
 800927a:	46bd      	mov	sp, r7
 800927c:	bd90      	pop	{r4, r7, pc}
 800927e:	bf00      	nop
 8009280:	ffff8080 	.word	0xffff8080

08009284 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009284:	b490      	push	{r4, r7}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	785b      	ldrb	r3, [r3, #1]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d018      	beq.n	80092c8 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009296:	687a      	ldr	r2, [r7, #4]
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	4413      	add	r3, r2
 80092a0:	881b      	ldrh	r3, [r3, #0]
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092ac:	b29c      	uxth	r4, r3
 80092ae:	f084 0310 	eor.w	r3, r4, #16
 80092b2:	b29c      	uxth	r4, r3
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	441a      	add	r2, r3
 80092be:	4b11      	ldr	r3, [pc, #68]	; (8009304 <USB_EPSetStall+0x80>)
 80092c0:	4323      	orrs	r3, r4
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	8013      	strh	r3, [r2, #0]
 80092c6:	e017      	b.n	80092f8 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	4413      	add	r3, r2
 80092d2:	881b      	ldrh	r3, [r3, #0]
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092de:	b29c      	uxth	r4, r3
 80092e0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80092e4:	b29c      	uxth	r4, r3
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	441a      	add	r2, r3
 80092f0:	4b04      	ldr	r3, [pc, #16]	; (8009304 <USB_EPSetStall+0x80>)
 80092f2:	4323      	orrs	r3, r4
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bc90      	pop	{r4, r7}
 8009302:	4770      	bx	lr
 8009304:	ffff8080 	.word	0xffff8080

08009308 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009308:	b490      	push	{r4, r7}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	7b1b      	ldrb	r3, [r3, #12]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d17d      	bne.n	8009416 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	785b      	ldrb	r3, [r3, #1]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d03d      	beq.n	800939e <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	009b      	lsls	r3, r3, #2
 800932a:	4413      	add	r3, r2
 800932c:	881b      	ldrh	r3, [r3, #0]
 800932e:	b29c      	uxth	r4, r3
 8009330:	4623      	mov	r3, r4
 8009332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009336:	2b00      	cmp	r3, #0
 8009338:	d014      	beq.n	8009364 <USB_EPClearStall+0x5c>
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	009b      	lsls	r3, r3, #2
 8009342:	4413      	add	r3, r2
 8009344:	881b      	ldrh	r3, [r3, #0]
 8009346:	b29b      	uxth	r3, r3
 8009348:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800934c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009350:	b29c      	uxth	r4, r3
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	441a      	add	r2, r3
 800935c:	4b31      	ldr	r3, [pc, #196]	; (8009424 <USB_EPClearStall+0x11c>)
 800935e:	4323      	orrs	r3, r4
 8009360:	b29b      	uxth	r3, r3
 8009362:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	78db      	ldrb	r3, [r3, #3]
 8009368:	2b01      	cmp	r3, #1
 800936a:	d054      	beq.n	8009416 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	4413      	add	r3, r2
 8009376:	881b      	ldrh	r3, [r3, #0]
 8009378:	b29b      	uxth	r3, r3
 800937a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800937e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009382:	b29c      	uxth	r4, r3
 8009384:	f084 0320 	eor.w	r3, r4, #32
 8009388:	b29c      	uxth	r4, r3
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	441a      	add	r2, r3
 8009394:	4b24      	ldr	r3, [pc, #144]	; (8009428 <USB_EPClearStall+0x120>)
 8009396:	4323      	orrs	r3, r4
 8009398:	b29b      	uxth	r3, r3
 800939a:	8013      	strh	r3, [r2, #0]
 800939c:	e03b      	b.n	8009416 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	4413      	add	r3, r2
 80093a8:	881b      	ldrh	r3, [r3, #0]
 80093aa:	b29c      	uxth	r4, r3
 80093ac:	4623      	mov	r3, r4
 80093ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d014      	beq.n	80093e0 <USB_EPClearStall+0xd8>
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	4413      	add	r3, r2
 80093c0:	881b      	ldrh	r3, [r3, #0]
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093cc:	b29c      	uxth	r4, r3
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	009b      	lsls	r3, r3, #2
 80093d6:	441a      	add	r2, r3
 80093d8:	4b14      	ldr	r3, [pc, #80]	; (800942c <USB_EPClearStall+0x124>)
 80093da:	4323      	orrs	r3, r4
 80093dc:	b29b      	uxth	r3, r3
 80093de:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	4413      	add	r3, r2
 80093ea:	881b      	ldrh	r3, [r3, #0]
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80093f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093f6:	b29c      	uxth	r4, r3
 80093f8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80093fc:	b29c      	uxth	r4, r3
 80093fe:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8009402:	b29c      	uxth	r4, r3
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	441a      	add	r2, r3
 800940e:	4b06      	ldr	r3, [pc, #24]	; (8009428 <USB_EPClearStall+0x120>)
 8009410:	4323      	orrs	r3, r4
 8009412:	b29b      	uxth	r3, r3
 8009414:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009416:	2300      	movs	r3, #0
}
 8009418:	4618      	mov	r0, r3
 800941a:	3708      	adds	r7, #8
 800941c:	46bd      	mov	sp, r7
 800941e:	bc90      	pop	{r4, r7}
 8009420:	4770      	bx	lr
 8009422:	bf00      	nop
 8009424:	ffff80c0 	.word	0xffff80c0
 8009428:	ffff8080 	.word	0xffff8080
 800942c:	ffffc080 	.word	0xffffc080

08009430 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	460b      	mov	r3, r1
 800943a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800943c:	78fb      	ldrb	r3, [r7, #3]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d103      	bne.n	800944a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2280      	movs	r2, #128	; 0x80
 8009446:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800944a:	2300      	movs	r3, #0
}
 800944c:	4618      	mov	r0, r3
 800944e:	370c      	adds	r7, #12
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009458:	b480      	push	{r7}
 800945a:	b083      	sub	sp, #12
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009466:	b29b      	uxth	r3, r3
 8009468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800946c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009470:	b29a      	uxth	r2, r3
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	370c      	adds	r7, #12
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr

08009486 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009486:	b480      	push	{r7}
 8009488:	b085      	sub	sp, #20
 800948a:	af00      	add	r7, sp, #0
 800948c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009494:	b29b      	uxth	r3, r3
 8009496:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009498:	68fb      	ldr	r3, [r7, #12]
}
 800949a:	4618      	mov	r0, r3
 800949c:	3714      	adds	r7, #20
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr

080094a6 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80094a6:	b480      	push	{r7}
 80094a8:	b083      	sub	sp, #12
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
 80094ae:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80094b0:	2300      	movs	r3, #0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	370c      	adds	r7, #12
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr

080094be <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80094be:	b480      	push	{r7}
 80094c0:	b08d      	sub	sp, #52	; 0x34
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	60f8      	str	r0, [r7, #12]
 80094c6:	60b9      	str	r1, [r7, #8]
 80094c8:	4611      	mov	r1, r2
 80094ca:	461a      	mov	r2, r3
 80094cc:	460b      	mov	r3, r1
 80094ce:	80fb      	strh	r3, [r7, #6]
 80094d0:	4613      	mov	r3, r2
 80094d2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80094d4:	88bb      	ldrh	r3, [r7, #4]
 80094d6:	3301      	adds	r3, #1
 80094d8:	085b      	lsrs	r3, r3, #1
 80094da:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80094e4:	88fa      	ldrh	r2, [r7, #6]
 80094e6:	69fb      	ldr	r3, [r7, #28]
 80094e8:	4413      	add	r3, r2
 80094ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094ee:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80094f0:	6a3b      	ldr	r3, [r7, #32]
 80094f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094f4:	e01b      	b.n	800952e <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80094f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80094fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fe:	3301      	adds	r3, #1
 8009500:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	b29b      	uxth	r3, r3
 8009508:	021b      	lsls	r3, r3, #8
 800950a:	b29b      	uxth	r3, r3
 800950c:	461a      	mov	r2, r3
 800950e:	69bb      	ldr	r3, [r7, #24]
 8009510:	4313      	orrs	r3, r2
 8009512:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	b29a      	uxth	r2, r3
 8009518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800951a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800951c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800951e:	3302      	adds	r3, #2
 8009520:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8009522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009524:	3301      	adds	r3, #1
 8009526:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800952a:	3b01      	subs	r3, #1
 800952c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800952e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009530:	2b00      	cmp	r3, #0
 8009532:	d1e0      	bne.n	80094f6 <USB_WritePMA+0x38>
  }
}
 8009534:	bf00      	nop
 8009536:	3734      	adds	r7, #52	; 0x34
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009540:	b480      	push	{r7}
 8009542:	b08b      	sub	sp, #44	; 0x2c
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	4611      	mov	r1, r2
 800954c:	461a      	mov	r2, r3
 800954e:	460b      	mov	r3, r1
 8009550:	80fb      	strh	r3, [r7, #6]
 8009552:	4613      	mov	r3, r2
 8009554:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009556:	88bb      	ldrh	r3, [r7, #4]
 8009558:	085b      	lsrs	r3, r3, #1
 800955a:	b29b      	uxth	r3, r3
 800955c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009566:	88fa      	ldrh	r2, [r7, #6]
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	4413      	add	r3, r2
 800956c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009570:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009572:	69bb      	ldr	r3, [r7, #24]
 8009574:	627b      	str	r3, [r7, #36]	; 0x24
 8009576:	e018      	b.n	80095aa <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009578:	6a3b      	ldr	r3, [r7, #32]
 800957a:	881b      	ldrh	r3, [r3, #0]
 800957c:	b29b      	uxth	r3, r3
 800957e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009580:	6a3b      	ldr	r3, [r7, #32]
 8009582:	3302      	adds	r3, #2
 8009584:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	b2da      	uxtb	r2, r3
 800958a:	69fb      	ldr	r3, [r7, #28]
 800958c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	3301      	adds	r3, #1
 8009592:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	0a1b      	lsrs	r3, r3, #8
 8009598:	b2da      	uxtb	r2, r3
 800959a:	69fb      	ldr	r3, [r7, #28]
 800959c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800959e:	69fb      	ldr	r3, [r7, #28]
 80095a0:	3301      	adds	r3, #1
 80095a2:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80095a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a6:	3b01      	subs	r3, #1
 80095a8:	627b      	str	r3, [r7, #36]	; 0x24
 80095aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d1e3      	bne.n	8009578 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80095b0:	88bb      	ldrh	r3, [r7, #4]
 80095b2:	f003 0301 	and.w	r3, r3, #1
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d007      	beq.n	80095cc <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80095bc:	6a3b      	ldr	r3, [r7, #32]
 80095be:	881b      	ldrh	r3, [r3, #0]
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	b2da      	uxtb	r2, r3
 80095c8:	69fb      	ldr	r3, [r7, #28]
 80095ca:	701a      	strb	r2, [r3, #0]
  }
}
 80095cc:	bf00      	nop
 80095ce:	372c      	adds	r7, #44	; 0x2c
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr

080095d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	460b      	mov	r3, r1
 80095e2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80095e4:	2300      	movs	r3, #0
 80095e6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	7c1b      	ldrb	r3, [r3, #16]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d115      	bne.n	800961c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80095f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80095f4:	2202      	movs	r2, #2
 80095f6:	2181      	movs	r1, #129	; 0x81
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f004 feb2 	bl	800e362 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2201      	movs	r2, #1
 8009602:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009604:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009608:	2202      	movs	r2, #2
 800960a:	2101      	movs	r1, #1
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f004 fea8 	bl	800e362 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2201      	movs	r2, #1
 8009616:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800961a:	e012      	b.n	8009642 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800961c:	2340      	movs	r3, #64	; 0x40
 800961e:	2202      	movs	r2, #2
 8009620:	2181      	movs	r1, #129	; 0x81
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f004 fe9d 	bl	800e362 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2201      	movs	r2, #1
 800962c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800962e:	2340      	movs	r3, #64	; 0x40
 8009630:	2202      	movs	r2, #2
 8009632:	2101      	movs	r1, #1
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f004 fe94 	bl	800e362 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2201      	movs	r2, #1
 800963e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009642:	2308      	movs	r3, #8
 8009644:	2203      	movs	r2, #3
 8009646:	2182      	movs	r1, #130	; 0x82
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f004 fe8a 	bl	800e362 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2201      	movs	r2, #1
 8009652:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009654:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009658:	f004 ffda 	bl	800e610 <USBD_static_malloc>
 800965c:	4602      	mov	r2, r0
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800966a:	2b00      	cmp	r3, #0
 800966c:	d102      	bne.n	8009674 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800966e:	2301      	movs	r3, #1
 8009670:	73fb      	strb	r3, [r7, #15]
 8009672:	e026      	b.n	80096c2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800967a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	2200      	movs	r2, #0
 800968a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	2200      	movs	r2, #0
 8009692:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	7c1b      	ldrb	r3, [r3, #16]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d109      	bne.n	80096b2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80096a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096a8:	2101      	movs	r1, #1
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f004 ff44 	bl	800e538 <USBD_LL_PrepareReceive>
 80096b0:	e007      	b.n	80096c2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80096b8:	2340      	movs	r3, #64	; 0x40
 80096ba:	2101      	movs	r1, #1
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f004 ff3b 	bl	800e538 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80096c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3710      	adds	r7, #16
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	460b      	mov	r3, r1
 80096d6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80096d8:	2300      	movs	r3, #0
 80096da:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80096dc:	2181      	movs	r1, #129	; 0x81
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f004 fe65 	bl	800e3ae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80096ea:	2101      	movs	r1, #1
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f004 fe5e 	bl	800e3ae <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80096fa:	2182      	movs	r1, #130	; 0x82
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f004 fe56 	bl	800e3ae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2200      	movs	r2, #0
 8009706:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800970e:	2b00      	cmp	r3, #0
 8009710:	d00e      	beq.n	8009730 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009722:	4618      	mov	r0, r3
 8009724:	f004 ff82 	bl	800e62c <USBD_static_free>
    pdev->pClassData = NULL;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2200      	movs	r2, #0
 800972c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009730:	7bfb      	ldrb	r3, [r7, #15]
}
 8009732:	4618      	mov	r0, r3
 8009734:	3710      	adds	r7, #16
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b086      	sub	sp, #24
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
 8009742:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800974a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800974c:	2300      	movs	r3, #0
 800974e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009750:	2300      	movs	r3, #0
 8009752:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009754:	2300      	movs	r3, #0
 8009756:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009760:	2b00      	cmp	r3, #0
 8009762:	d039      	beq.n	80097d8 <USBD_CDC_Setup+0x9e>
 8009764:	2b20      	cmp	r3, #32
 8009766:	d17c      	bne.n	8009862 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	88db      	ldrh	r3, [r3, #6]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d029      	beq.n	80097c4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	b25b      	sxtb	r3, r3
 8009776:	2b00      	cmp	r3, #0
 8009778:	da11      	bge.n	800979e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009780:	689b      	ldr	r3, [r3, #8]
 8009782:	683a      	ldr	r2, [r7, #0]
 8009784:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009786:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009788:	683a      	ldr	r2, [r7, #0]
 800978a:	88d2      	ldrh	r2, [r2, #6]
 800978c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800978e:	6939      	ldr	r1, [r7, #16]
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	88db      	ldrh	r3, [r3, #6]
 8009794:	461a      	mov	r2, r3
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f001 fa2a 	bl	800abf0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800979c:	e068      	b.n	8009870 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	785a      	ldrb	r2, [r3, #1]
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	88db      	ldrh	r3, [r3, #6]
 80097ac:	b2da      	uxtb	r2, r3
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80097b4:	6939      	ldr	r1, [r7, #16]
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	88db      	ldrh	r3, [r3, #6]
 80097ba:	461a      	mov	r2, r3
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f001 fa45 	bl	800ac4c <USBD_CtlPrepareRx>
      break;
 80097c2:	e055      	b.n	8009870 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	683a      	ldr	r2, [r7, #0]
 80097ce:	7850      	ldrb	r0, [r2, #1]
 80097d0:	2200      	movs	r2, #0
 80097d2:	6839      	ldr	r1, [r7, #0]
 80097d4:	4798      	blx	r3
      break;
 80097d6:	e04b      	b.n	8009870 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	785b      	ldrb	r3, [r3, #1]
 80097dc:	2b0a      	cmp	r3, #10
 80097de:	d017      	beq.n	8009810 <USBD_CDC_Setup+0xd6>
 80097e0:	2b0b      	cmp	r3, #11
 80097e2:	d029      	beq.n	8009838 <USBD_CDC_Setup+0xfe>
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d133      	bne.n	8009850 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097ee:	2b03      	cmp	r3, #3
 80097f0:	d107      	bne.n	8009802 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80097f2:	f107 030c 	add.w	r3, r7, #12
 80097f6:	2202      	movs	r2, #2
 80097f8:	4619      	mov	r1, r3
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f001 f9f8 	bl	800abf0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009800:	e02e      	b.n	8009860 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8009802:	6839      	ldr	r1, [r7, #0]
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f001 f988 	bl	800ab1a <USBD_CtlError>
            ret = USBD_FAIL;
 800980a:	2302      	movs	r3, #2
 800980c:	75fb      	strb	r3, [r7, #23]
          break;
 800980e:	e027      	b.n	8009860 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009816:	2b03      	cmp	r3, #3
 8009818:	d107      	bne.n	800982a <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800981a:	f107 030f 	add.w	r3, r7, #15
 800981e:	2201      	movs	r2, #1
 8009820:	4619      	mov	r1, r3
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f001 f9e4 	bl	800abf0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009828:	e01a      	b.n	8009860 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800982a:	6839      	ldr	r1, [r7, #0]
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f001 f974 	bl	800ab1a <USBD_CtlError>
            ret = USBD_FAIL;
 8009832:	2302      	movs	r3, #2
 8009834:	75fb      	strb	r3, [r7, #23]
          break;
 8009836:	e013      	b.n	8009860 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800983e:	2b03      	cmp	r3, #3
 8009840:	d00d      	beq.n	800985e <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8009842:	6839      	ldr	r1, [r7, #0]
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f001 f968 	bl	800ab1a <USBD_CtlError>
            ret = USBD_FAIL;
 800984a:	2302      	movs	r3, #2
 800984c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800984e:	e006      	b.n	800985e <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8009850:	6839      	ldr	r1, [r7, #0]
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f001 f961 	bl	800ab1a <USBD_CtlError>
          ret = USBD_FAIL;
 8009858:	2302      	movs	r3, #2
 800985a:	75fb      	strb	r3, [r7, #23]
          break;
 800985c:	e000      	b.n	8009860 <USBD_CDC_Setup+0x126>
          break;
 800985e:	bf00      	nop
      }
      break;
 8009860:	e006      	b.n	8009870 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8009862:	6839      	ldr	r1, [r7, #0]
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f001 f958 	bl	800ab1a <USBD_CtlError>
      ret = USBD_FAIL;
 800986a:	2302      	movs	r3, #2
 800986c:	75fb      	strb	r3, [r7, #23]
      break;
 800986e:	bf00      	nop
  }

  return ret;
 8009870:	7dfb      	ldrb	r3, [r7, #23]
}
 8009872:	4618      	mov	r0, r3
 8009874:	3718      	adds	r7, #24
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}

0800987a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800987a:	b580      	push	{r7, lr}
 800987c:	b084      	sub	sp, #16
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
 8009882:	460b      	mov	r3, r1
 8009884:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800988c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009894:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800989c:	2b00      	cmp	r3, #0
 800989e:	d037      	beq.n	8009910 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80098a0:	78fa      	ldrb	r2, [r7, #3]
 80098a2:	6879      	ldr	r1, [r7, #4]
 80098a4:	4613      	mov	r3, r2
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	4413      	add	r3, r2
 80098aa:	009b      	lsls	r3, r3, #2
 80098ac:	440b      	add	r3, r1
 80098ae:	331c      	adds	r3, #28
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d026      	beq.n	8009904 <USBD_CDC_DataIn+0x8a>
 80098b6:	78fa      	ldrb	r2, [r7, #3]
 80098b8:	6879      	ldr	r1, [r7, #4]
 80098ba:	4613      	mov	r3, r2
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	4413      	add	r3, r2
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	440b      	add	r3, r1
 80098c4:	331c      	adds	r3, #28
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	78fa      	ldrb	r2, [r7, #3]
 80098ca:	68b9      	ldr	r1, [r7, #8]
 80098cc:	0152      	lsls	r2, r2, #5
 80098ce:	440a      	add	r2, r1
 80098d0:	3238      	adds	r2, #56	; 0x38
 80098d2:	6812      	ldr	r2, [r2, #0]
 80098d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80098d8:	fb02 f201 	mul.w	r2, r2, r1
 80098dc:	1a9b      	subs	r3, r3, r2
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d110      	bne.n	8009904 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80098e2:	78fa      	ldrb	r2, [r7, #3]
 80098e4:	6879      	ldr	r1, [r7, #4]
 80098e6:	4613      	mov	r3, r2
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	4413      	add	r3, r2
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	440b      	add	r3, r1
 80098f0:	331c      	adds	r3, #28
 80098f2:	2200      	movs	r2, #0
 80098f4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80098f6:	78f9      	ldrb	r1, [r7, #3]
 80098f8:	2300      	movs	r3, #0
 80098fa:	2200      	movs	r2, #0
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f004 fdf8 	bl	800e4f2 <USBD_LL_Transmit>
 8009902:	e003      	b.n	800990c <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2200      	movs	r2, #0
 8009908:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800990c:	2300      	movs	r3, #0
 800990e:	e000      	b.n	8009912 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8009910:	2302      	movs	r3, #2
  }
}
 8009912:	4618      	mov	r0, r3
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}

0800991a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800991a:	b580      	push	{r7, lr}
 800991c:	b084      	sub	sp, #16
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
 8009922:	460b      	mov	r3, r1
 8009924:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800992c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800992e:	78fb      	ldrb	r3, [r7, #3]
 8009930:	4619      	mov	r1, r3
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f004 fe23 	bl	800e57e <USBD_LL_GetRxDataSize>
 8009938:	4602      	mov	r2, r0
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009946:	2b00      	cmp	r3, #0
 8009948:	d00d      	beq.n	8009966 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009950:	68db      	ldr	r3, [r3, #12]
 8009952:	68fa      	ldr	r2, [r7, #12]
 8009954:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009958:	68fa      	ldr	r2, [r7, #12]
 800995a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800995e:	4611      	mov	r1, r2
 8009960:	4798      	blx	r3

    return USBD_OK;
 8009962:	2300      	movs	r3, #0
 8009964:	e000      	b.n	8009968 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009966:	2302      	movs	r3, #2
  }
}
 8009968:	4618      	mov	r0, r3
 800996a:	3710      	adds	r7, #16
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800997e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009986:	2b00      	cmp	r3, #0
 8009988:	d015      	beq.n	80099b6 <USBD_CDC_EP0_RxReady+0x46>
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009990:	2bff      	cmp	r3, #255	; 0xff
 8009992:	d010      	beq.n	80099b6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800999a:	689b      	ldr	r3, [r3, #8]
 800999c:	68fa      	ldr	r2, [r7, #12]
 800999e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80099a2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80099a4:	68fa      	ldr	r2, [r7, #12]
 80099a6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80099aa:	b292      	uxth	r2, r2
 80099ac:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	22ff      	movs	r2, #255	; 0xff
 80099b2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80099b6:	2300      	movs	r3, #0
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3710      	adds	r7, #16
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b083      	sub	sp, #12
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2243      	movs	r2, #67	; 0x43
 80099cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80099ce:	4b03      	ldr	r3, [pc, #12]	; (80099dc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr
 80099dc:	200000a0 	.word	0x200000a0

080099e0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b083      	sub	sp, #12
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2243      	movs	r2, #67	; 0x43
 80099ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80099ee:	4b03      	ldr	r3, [pc, #12]	; (80099fc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	370c      	adds	r7, #12
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr
 80099fc:	2000005c 	.word	0x2000005c

08009a00 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b083      	sub	sp, #12
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2243      	movs	r2, #67	; 0x43
 8009a0c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009a0e:	4b03      	ldr	r3, [pc, #12]	; (8009a1c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	370c      	adds	r7, #12
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr
 8009a1c:	200000e4 	.word	0x200000e4

08009a20 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b083      	sub	sp, #12
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	220a      	movs	r2, #10
 8009a2c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009a2e:	4b03      	ldr	r3, [pc, #12]	; (8009a3c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr
 8009a3c:	20000018 	.word	0x20000018

08009a40 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b085      	sub	sp, #20
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009a4a:	2302      	movs	r3, #2
 8009a4c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d005      	beq.n	8009a60 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	683a      	ldr	r2, [r7, #0]
 8009a58:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3714      	adds	r7, #20
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr

08009a6e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009a6e:	b480      	push	{r7}
 8009a70:	b087      	sub	sp, #28
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	60f8      	str	r0, [r7, #12]
 8009a76:	60b9      	str	r1, [r7, #8]
 8009a78:	4613      	mov	r3, r2
 8009a7a:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a82:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	68ba      	ldr	r2, [r7, #8]
 8009a88:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009a8c:	88fa      	ldrh	r2, [r7, #6]
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009a94:	2300      	movs	r3, #0
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	371c      	adds	r7, #28
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr

08009aa2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009aa2:	b480      	push	{r7}
 8009aa4:	b085      	sub	sp, #20
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
 8009aaa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ab2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	683a      	ldr	r2, [r7, #0]
 8009ab8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3714      	adds	r7, #20
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr

08009aca <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009aca:	b580      	push	{r7, lr}
 8009acc:	b084      	sub	sp, #16
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ad8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d01c      	beq.n	8009b1e <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d115      	bne.n	8009b1a <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2201      	movs	r2, #1
 8009af2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	2181      	movs	r1, #129	; 0x81
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f004 fcee 	bl	800e4f2 <USBD_LL_Transmit>

      return USBD_OK;
 8009b16:	2300      	movs	r3, #0
 8009b18:	e002      	b.n	8009b20 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e000      	b.n	8009b20 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009b1e:	2302      	movs	r3, #2
  }
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3710      	adds	r7, #16
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b36:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d017      	beq.n	8009b72 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	7c1b      	ldrb	r3, [r3, #16]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d109      	bne.n	8009b5e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009b50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b54:	2101      	movs	r1, #1
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f004 fcee 	bl	800e538 <USBD_LL_PrepareReceive>
 8009b5c:	e007      	b.n	8009b6e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009b64:	2340      	movs	r3, #64	; 0x40
 8009b66:	2101      	movs	r1, #1
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f004 fce5 	bl	800e538 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	e000      	b.n	8009b74 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009b72:	2302      	movs	r3, #2
  }
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3710      	adds	r7, #16
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}

08009b7c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b084      	sub	sp, #16
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	60f8      	str	r0, [r7, #12]
 8009b84:	60b9      	str	r1, [r7, #8]
 8009b86:	4613      	mov	r3, r2
 8009b88:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d101      	bne.n	8009b94 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009b90:	2302      	movs	r3, #2
 8009b92:	e01a      	b.n	8009bca <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d003      	beq.n	8009ba6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d003      	beq.n	8009bb4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	68ba      	ldr	r2, [r7, #8]
 8009bb0:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	79fa      	ldrb	r2, [r7, #7]
 8009bc0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009bc2:	68f8      	ldr	r0, [r7, #12]
 8009bc4:	f004 fb50 	bl	800e268 <USBD_LL_Init>

  return USBD_OK;
 8009bc8:	2300      	movs	r3, #0
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3710      	adds	r7, #16
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}

08009bd2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009bd2:	b480      	push	{r7}
 8009bd4:	b085      	sub	sp, #20
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
 8009bda:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d006      	beq.n	8009bf4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	683a      	ldr	r2, [r7, #0]
 8009bea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	73fb      	strb	r3, [r7, #15]
 8009bf2:	e001      	b.n	8009bf8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009bf4:	2302      	movs	r3, #2
 8009bf6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3714      	adds	r7, #20
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr

08009c06 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009c06:	b580      	push	{r7, lr}
 8009c08:	b082      	sub	sp, #8
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f004 fb8c 	bl	800e32c <USBD_LL_Start>

  return USBD_OK;
 8009c14:	2300      	movs	r3, #0
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3708      	adds	r7, #8
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}

08009c1e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009c1e:	b480      	push	{r7}
 8009c20:	b083      	sub	sp, #12
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009c26:	2300      	movs	r3, #0
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	370c      	adds	r7, #12
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr

08009c34 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009c40:	2302      	movs	r3, #2
 8009c42:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d00c      	beq.n	8009c68 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	78fa      	ldrb	r2, [r7, #3]
 8009c58:	4611      	mov	r1, r2
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	4798      	blx	r3
 8009c5e:	4603      	mov	r3, r0
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d101      	bne.n	8009c68 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009c64:	2300      	movs	r3, #0
 8009c66:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3710      	adds	r7, #16
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}

08009c72 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009c72:	b580      	push	{r7, lr}
 8009c74:	b082      	sub	sp, #8
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
 8009c7a:	460b      	mov	r3, r1
 8009c7c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	78fa      	ldrb	r2, [r7, #3]
 8009c88:	4611      	mov	r1, r2
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	4798      	blx	r3

  return USBD_OK;
 8009c8e:	2300      	movs	r3, #0
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3708      	adds	r7, #8
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009ca8:	6839      	ldr	r1, [r7, #0]
 8009caa:	4618      	mov	r0, r3
 8009cac:	f000 fef8 	bl	800aaa0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009ccc:	f003 031f 	and.w	r3, r3, #31
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d00c      	beq.n	8009cee <USBD_LL_SetupStage+0x56>
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d302      	bcc.n	8009cde <USBD_LL_SetupStage+0x46>
 8009cd8:	2b02      	cmp	r3, #2
 8009cda:	d010      	beq.n	8009cfe <USBD_LL_SetupStage+0x66>
 8009cdc:	e017      	b.n	8009d0e <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 f9ce 	bl	800a088 <USBD_StdDevReq>
      break;
 8009cec:	e01a      	b.n	8009d24 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 fa30 	bl	800a15c <USBD_StdItfReq>
      break;
 8009cfc:	e012      	b.n	8009d24 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009d04:	4619      	mov	r1, r3
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 fa6e 	bl	800a1e8 <USBD_StdEPReq>
      break;
 8009d0c:	e00a      	b.n	8009d24 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009d14:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f004 fb65 	bl	800e3ec <USBD_LL_StallEP>
      break;
 8009d22:	bf00      	nop
  }

  return USBD_OK;
 8009d24:	2300      	movs	r3, #0
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3708      	adds	r7, #8
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}

08009d2e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b086      	sub	sp, #24
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	60f8      	str	r0, [r7, #12]
 8009d36:	460b      	mov	r3, r1
 8009d38:	607a      	str	r2, [r7, #4]
 8009d3a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009d3c:	7afb      	ldrb	r3, [r7, #11]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d14b      	bne.n	8009dda <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009d48:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009d50:	2b03      	cmp	r3, #3
 8009d52:	d134      	bne.n	8009dbe <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	68da      	ldr	r2, [r3, #12]
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	691b      	ldr	r3, [r3, #16]
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d919      	bls.n	8009d94 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	68da      	ldr	r2, [r3, #12]
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	691b      	ldr	r3, [r3, #16]
 8009d68:	1ad2      	subs	r2, r2, r3
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	68da      	ldr	r2, [r3, #12]
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009d76:	429a      	cmp	r2, r3
 8009d78:	d203      	bcs.n	8009d82 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	e002      	b.n	8009d88 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	461a      	mov	r2, r3
 8009d8a:	6879      	ldr	r1, [r7, #4]
 8009d8c:	68f8      	ldr	r0, [r7, #12]
 8009d8e:	f000 ff7b 	bl	800ac88 <USBD_CtlContinueRx>
 8009d92:	e038      	b.n	8009e06 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d9a:	691b      	ldr	r3, [r3, #16]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d00a      	beq.n	8009db6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009da6:	2b03      	cmp	r3, #3
 8009da8:	d105      	bne.n	8009db6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009db0:	691b      	ldr	r3, [r3, #16]
 8009db2:	68f8      	ldr	r0, [r7, #12]
 8009db4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009db6:	68f8      	ldr	r0, [r7, #12]
 8009db8:	f000 ff78 	bl	800acac <USBD_CtlSendStatus>
 8009dbc:	e023      	b.n	8009e06 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009dc4:	2b05      	cmp	r3, #5
 8009dc6:	d11e      	bne.n	8009e06 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009dd0:	2100      	movs	r1, #0
 8009dd2:	68f8      	ldr	r0, [r7, #12]
 8009dd4:	f004 fb0a 	bl	800e3ec <USBD_LL_StallEP>
 8009dd8:	e015      	b.n	8009e06 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009de0:	699b      	ldr	r3, [r3, #24]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d00d      	beq.n	8009e02 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009dec:	2b03      	cmp	r3, #3
 8009dee:	d108      	bne.n	8009e02 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009df6:	699b      	ldr	r3, [r3, #24]
 8009df8:	7afa      	ldrb	r2, [r7, #11]
 8009dfa:	4611      	mov	r1, r2
 8009dfc:	68f8      	ldr	r0, [r7, #12]
 8009dfe:	4798      	blx	r3
 8009e00:	e001      	b.n	8009e06 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009e02:	2302      	movs	r3, #2
 8009e04:	e000      	b.n	8009e08 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009e06:	2300      	movs	r3, #0
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3718      	adds	r7, #24
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b086      	sub	sp, #24
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	460b      	mov	r3, r1
 8009e1a:	607a      	str	r2, [r7, #4]
 8009e1c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009e1e:	7afb      	ldrb	r3, [r7, #11]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d17f      	bne.n	8009f24 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	3314      	adds	r3, #20
 8009e28:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009e30:	2b02      	cmp	r3, #2
 8009e32:	d15c      	bne.n	8009eee <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	68da      	ldr	r2, [r3, #12]
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	691b      	ldr	r3, [r3, #16]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d915      	bls.n	8009e6c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	68da      	ldr	r2, [r3, #12]
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	691b      	ldr	r3, [r3, #16]
 8009e48:	1ad2      	subs	r2, r2, r3
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	68db      	ldr	r3, [r3, #12]
 8009e52:	b29b      	uxth	r3, r3
 8009e54:	461a      	mov	r2, r3
 8009e56:	6879      	ldr	r1, [r7, #4]
 8009e58:	68f8      	ldr	r0, [r7, #12]
 8009e5a:	f000 fee5 	bl	800ac28 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e5e:	2300      	movs	r3, #0
 8009e60:	2200      	movs	r2, #0
 8009e62:	2100      	movs	r1, #0
 8009e64:	68f8      	ldr	r0, [r7, #12]
 8009e66:	f004 fb67 	bl	800e538 <USBD_LL_PrepareReceive>
 8009e6a:	e04e      	b.n	8009f0a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	697a      	ldr	r2, [r7, #20]
 8009e72:	6912      	ldr	r2, [r2, #16]
 8009e74:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e78:	fb02 f201 	mul.w	r2, r2, r1
 8009e7c:	1a9b      	subs	r3, r3, r2
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d11c      	bne.n	8009ebc <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	689a      	ldr	r2, [r3, #8]
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d316      	bcc.n	8009ebc <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	689a      	ldr	r2, [r3, #8]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d20f      	bcs.n	8009ebc <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	68f8      	ldr	r0, [r7, #12]
 8009ea2:	f000 fec1 	bl	800ac28 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009eae:	2300      	movs	r3, #0
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	2100      	movs	r1, #0
 8009eb4:	68f8      	ldr	r0, [r7, #12]
 8009eb6:	f004 fb3f 	bl	800e538 <USBD_LL_PrepareReceive>
 8009eba:	e026      	b.n	8009f0a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d00a      	beq.n	8009ede <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009ece:	2b03      	cmp	r3, #3
 8009ed0:	d105      	bne.n	8009ede <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	68f8      	ldr	r0, [r7, #12]
 8009edc:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009ede:	2180      	movs	r1, #128	; 0x80
 8009ee0:	68f8      	ldr	r0, [r7, #12]
 8009ee2:	f004 fa83 	bl	800e3ec <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009ee6:	68f8      	ldr	r0, [r7, #12]
 8009ee8:	f000 fef3 	bl	800acd2 <USBD_CtlReceiveStatus>
 8009eec:	e00d      	b.n	8009f0a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009ef4:	2b04      	cmp	r3, #4
 8009ef6:	d004      	beq.n	8009f02 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d103      	bne.n	8009f0a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009f02:	2180      	movs	r1, #128	; 0x80
 8009f04:	68f8      	ldr	r0, [r7, #12]
 8009f06:	f004 fa71 	bl	800e3ec <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d11d      	bne.n	8009f50 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009f14:	68f8      	ldr	r0, [r7, #12]
 8009f16:	f7ff fe82 	bl	8009c1e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009f22:	e015      	b.n	8009f50 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f2a:	695b      	ldr	r3, [r3, #20]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d00d      	beq.n	8009f4c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009f36:	2b03      	cmp	r3, #3
 8009f38:	d108      	bne.n	8009f4c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f40:	695b      	ldr	r3, [r3, #20]
 8009f42:	7afa      	ldrb	r2, [r7, #11]
 8009f44:	4611      	mov	r1, r2
 8009f46:	68f8      	ldr	r0, [r7, #12]
 8009f48:	4798      	blx	r3
 8009f4a:	e001      	b.n	8009f50 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009f4c:	2302      	movs	r3, #2
 8009f4e:	e000      	b.n	8009f52 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009f50:	2300      	movs	r3, #0
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3718      	adds	r7, #24
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}

08009f5a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009f5a:	b580      	push	{r7, lr}
 8009f5c:	b082      	sub	sp, #8
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009f62:	2340      	movs	r3, #64	; 0x40
 8009f64:	2200      	movs	r2, #0
 8009f66:	2100      	movs	r1, #0
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f004 f9fa 	bl	800e362 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2201      	movs	r2, #1
 8009f72:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2240      	movs	r2, #64	; 0x40
 8009f7a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009f7e:	2340      	movs	r3, #64	; 0x40
 8009f80:	2200      	movs	r2, #0
 8009f82:	2180      	movs	r1, #128	; 0x80
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f004 f9ec 	bl	800e362 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2240      	movs	r2, #64	; 0x40
 8009f94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2201      	movs	r2, #1
 8009f9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d009      	beq.n	8009fd2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	6852      	ldr	r2, [r2, #4]
 8009fca:	b2d2      	uxtb	r2, r2
 8009fcc:	4611      	mov	r1, r2
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	4798      	blx	r3
  }

  return USBD_OK;
 8009fd2:	2300      	movs	r3, #0
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3708      	adds	r7, #8
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b083      	sub	sp, #12
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	78fa      	ldrb	r2, [r7, #3]
 8009fec:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009fee:	2300      	movs	r3, #0
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	370c      	adds	r7, #12
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr

08009ffc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b083      	sub	sp, #12
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2204      	movs	r2, #4
 800a014:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a018:	2300      	movs	r3, #0
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	370c      	adds	r7, #12
 800a01e:	46bd      	mov	sp, r7
 800a020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a024:	4770      	bx	lr

0800a026 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a026:	b480      	push	{r7}
 800a028:	b083      	sub	sp, #12
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a034:	2b04      	cmp	r3, #4
 800a036:	d105      	bne.n	800a044 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a044:	2300      	movs	r3, #0
}
 800a046:	4618      	mov	r0, r3
 800a048:	370c      	adds	r7, #12
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr

0800a052 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a052:	b580      	push	{r7, lr}
 800a054:	b082      	sub	sp, #8
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a060:	2b03      	cmp	r3, #3
 800a062:	d10b      	bne.n	800a07c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a06a:	69db      	ldr	r3, [r3, #28]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d005      	beq.n	800a07c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a076:	69db      	ldr	r3, [r3, #28]
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a07c:	2300      	movs	r3, #0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3708      	adds	r7, #8
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
	...

0800a088 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a092:	2300      	movs	r3, #0
 800a094:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a09e:	2b20      	cmp	r3, #32
 800a0a0:	d004      	beq.n	800a0ac <USBD_StdDevReq+0x24>
 800a0a2:	2b40      	cmp	r3, #64	; 0x40
 800a0a4:	d002      	beq.n	800a0ac <USBD_StdDevReq+0x24>
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d008      	beq.n	800a0bc <USBD_StdDevReq+0x34>
 800a0aa:	e04c      	b.n	800a146 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0b2:	689b      	ldr	r3, [r3, #8]
 800a0b4:	6839      	ldr	r1, [r7, #0]
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	4798      	blx	r3
      break;
 800a0ba:	e049      	b.n	800a150 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	785b      	ldrb	r3, [r3, #1]
 800a0c0:	2b09      	cmp	r3, #9
 800a0c2:	d83a      	bhi.n	800a13a <USBD_StdDevReq+0xb2>
 800a0c4:	a201      	add	r2, pc, #4	; (adr r2, 800a0cc <USBD_StdDevReq+0x44>)
 800a0c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ca:	bf00      	nop
 800a0cc:	0800a11d 	.word	0x0800a11d
 800a0d0:	0800a131 	.word	0x0800a131
 800a0d4:	0800a13b 	.word	0x0800a13b
 800a0d8:	0800a127 	.word	0x0800a127
 800a0dc:	0800a13b 	.word	0x0800a13b
 800a0e0:	0800a0ff 	.word	0x0800a0ff
 800a0e4:	0800a0f5 	.word	0x0800a0f5
 800a0e8:	0800a13b 	.word	0x0800a13b
 800a0ec:	0800a113 	.word	0x0800a113
 800a0f0:	0800a109 	.word	0x0800a109
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a0f4:	6839      	ldr	r1, [r7, #0]
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f000 f9d4 	bl	800a4a4 <USBD_GetDescriptor>
          break;
 800a0fc:	e022      	b.n	800a144 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a0fe:	6839      	ldr	r1, [r7, #0]
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f000 fb61 	bl	800a7c8 <USBD_SetAddress>
          break;
 800a106:	e01d      	b.n	800a144 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a108:	6839      	ldr	r1, [r7, #0]
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 fb9e 	bl	800a84c <USBD_SetConfig>
          break;
 800a110:	e018      	b.n	800a144 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a112:	6839      	ldr	r1, [r7, #0]
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 fc27 	bl	800a968 <USBD_GetConfig>
          break;
 800a11a:	e013      	b.n	800a144 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a11c:	6839      	ldr	r1, [r7, #0]
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 fc56 	bl	800a9d0 <USBD_GetStatus>
          break;
 800a124:	e00e      	b.n	800a144 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a126:	6839      	ldr	r1, [r7, #0]
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f000 fc84 	bl	800aa36 <USBD_SetFeature>
          break;
 800a12e:	e009      	b.n	800a144 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a130:	6839      	ldr	r1, [r7, #0]
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 fc93 	bl	800aa5e <USBD_ClrFeature>
          break;
 800a138:	e004      	b.n	800a144 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a13a:	6839      	ldr	r1, [r7, #0]
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f000 fcec 	bl	800ab1a <USBD_CtlError>
          break;
 800a142:	bf00      	nop
      }
      break;
 800a144:	e004      	b.n	800a150 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a146:	6839      	ldr	r1, [r7, #0]
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f000 fce6 	bl	800ab1a <USBD_CtlError>
      break;
 800a14e:	bf00      	nop
  }

  return ret;
 800a150:	7bfb      	ldrb	r3, [r7, #15]
}
 800a152:	4618      	mov	r0, r3
 800a154:	3710      	adds	r7, #16
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop

0800a15c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b084      	sub	sp, #16
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a166:	2300      	movs	r3, #0
 800a168:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a172:	2b20      	cmp	r3, #32
 800a174:	d003      	beq.n	800a17e <USBD_StdItfReq+0x22>
 800a176:	2b40      	cmp	r3, #64	; 0x40
 800a178:	d001      	beq.n	800a17e <USBD_StdItfReq+0x22>
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d12a      	bne.n	800a1d4 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a184:	3b01      	subs	r3, #1
 800a186:	2b02      	cmp	r3, #2
 800a188:	d81d      	bhi.n	800a1c6 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	889b      	ldrh	r3, [r3, #4]
 800a18e:	b2db      	uxtb	r3, r3
 800a190:	2b01      	cmp	r3, #1
 800a192:	d813      	bhi.n	800a1bc <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a19a:	689b      	ldr	r3, [r3, #8]
 800a19c:	6839      	ldr	r1, [r7, #0]
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	4798      	blx	r3
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	88db      	ldrh	r3, [r3, #6]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d110      	bne.n	800a1d0 <USBD_StdItfReq+0x74>
 800a1ae:	7bfb      	ldrb	r3, [r7, #15]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d10d      	bne.n	800a1d0 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 fd79 	bl	800acac <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a1ba:	e009      	b.n	800a1d0 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800a1bc:	6839      	ldr	r1, [r7, #0]
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 fcab 	bl	800ab1a <USBD_CtlError>
          break;
 800a1c4:	e004      	b.n	800a1d0 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800a1c6:	6839      	ldr	r1, [r7, #0]
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 fca6 	bl	800ab1a <USBD_CtlError>
          break;
 800a1ce:	e000      	b.n	800a1d2 <USBD_StdItfReq+0x76>
          break;
 800a1d0:	bf00      	nop
      }
      break;
 800a1d2:	e004      	b.n	800a1de <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800a1d4:	6839      	ldr	r1, [r7, #0]
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f000 fc9f 	bl	800ab1a <USBD_CtlError>
      break;
 800a1dc:	bf00      	nop
  }

  return USBD_OK;
 800a1de:	2300      	movs	r3, #0
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3710      	adds	r7, #16
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	889b      	ldrh	r3, [r3, #4]
 800a1fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a204:	2b20      	cmp	r3, #32
 800a206:	d004      	beq.n	800a212 <USBD_StdEPReq+0x2a>
 800a208:	2b40      	cmp	r3, #64	; 0x40
 800a20a:	d002      	beq.n	800a212 <USBD_StdEPReq+0x2a>
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d008      	beq.n	800a222 <USBD_StdEPReq+0x3a>
 800a210:	e13d      	b.n	800a48e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	6839      	ldr	r1, [r7, #0]
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	4798      	blx	r3
      break;
 800a220:	e13a      	b.n	800a498 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	781b      	ldrb	r3, [r3, #0]
 800a226:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a22a:	2b20      	cmp	r3, #32
 800a22c:	d10a      	bne.n	800a244 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a234:	689b      	ldr	r3, [r3, #8]
 800a236:	6839      	ldr	r1, [r7, #0]
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	4798      	blx	r3
 800a23c:	4603      	mov	r3, r0
 800a23e:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a240:	7bfb      	ldrb	r3, [r7, #15]
 800a242:	e12a      	b.n	800a49a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	785b      	ldrb	r3, [r3, #1]
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d03e      	beq.n	800a2ca <USBD_StdEPReq+0xe2>
 800a24c:	2b03      	cmp	r3, #3
 800a24e:	d002      	beq.n	800a256 <USBD_StdEPReq+0x6e>
 800a250:	2b00      	cmp	r3, #0
 800a252:	d070      	beq.n	800a336 <USBD_StdEPReq+0x14e>
 800a254:	e115      	b.n	800a482 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a25c:	2b02      	cmp	r3, #2
 800a25e:	d002      	beq.n	800a266 <USBD_StdEPReq+0x7e>
 800a260:	2b03      	cmp	r3, #3
 800a262:	d015      	beq.n	800a290 <USBD_StdEPReq+0xa8>
 800a264:	e02b      	b.n	800a2be <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a266:	7bbb      	ldrb	r3, [r7, #14]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d00c      	beq.n	800a286 <USBD_StdEPReq+0x9e>
 800a26c:	7bbb      	ldrb	r3, [r7, #14]
 800a26e:	2b80      	cmp	r3, #128	; 0x80
 800a270:	d009      	beq.n	800a286 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a272:	7bbb      	ldrb	r3, [r7, #14]
 800a274:	4619      	mov	r1, r3
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f004 f8b8 	bl	800e3ec <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a27c:	2180      	movs	r1, #128	; 0x80
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f004 f8b4 	bl	800e3ec <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a284:	e020      	b.n	800a2c8 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800a286:	6839      	ldr	r1, [r7, #0]
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f000 fc46 	bl	800ab1a <USBD_CtlError>
              break;
 800a28e:	e01b      	b.n	800a2c8 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	885b      	ldrh	r3, [r3, #2]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d10e      	bne.n	800a2b6 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800a298:	7bbb      	ldrb	r3, [r7, #14]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d00b      	beq.n	800a2b6 <USBD_StdEPReq+0xce>
 800a29e:	7bbb      	ldrb	r3, [r7, #14]
 800a2a0:	2b80      	cmp	r3, #128	; 0x80
 800a2a2:	d008      	beq.n	800a2b6 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	88db      	ldrh	r3, [r3, #6]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d104      	bne.n	800a2b6 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a2ac:	7bbb      	ldrb	r3, [r7, #14]
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f004 f89b 	bl	800e3ec <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 fcf8 	bl	800acac <USBD_CtlSendStatus>

              break;
 800a2bc:	e004      	b.n	800a2c8 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800a2be:	6839      	ldr	r1, [r7, #0]
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f000 fc2a 	bl	800ab1a <USBD_CtlError>
              break;
 800a2c6:	bf00      	nop
          }
          break;
 800a2c8:	e0e0      	b.n	800a48c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2d0:	2b02      	cmp	r3, #2
 800a2d2:	d002      	beq.n	800a2da <USBD_StdEPReq+0xf2>
 800a2d4:	2b03      	cmp	r3, #3
 800a2d6:	d015      	beq.n	800a304 <USBD_StdEPReq+0x11c>
 800a2d8:	e026      	b.n	800a328 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a2da:	7bbb      	ldrb	r3, [r7, #14]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d00c      	beq.n	800a2fa <USBD_StdEPReq+0x112>
 800a2e0:	7bbb      	ldrb	r3, [r7, #14]
 800a2e2:	2b80      	cmp	r3, #128	; 0x80
 800a2e4:	d009      	beq.n	800a2fa <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a2e6:	7bbb      	ldrb	r3, [r7, #14]
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f004 f87e 	bl	800e3ec <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a2f0:	2180      	movs	r1, #128	; 0x80
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f004 f87a 	bl	800e3ec <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a2f8:	e01c      	b.n	800a334 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800a2fa:	6839      	ldr	r1, [r7, #0]
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 fc0c 	bl	800ab1a <USBD_CtlError>
              break;
 800a302:	e017      	b.n	800a334 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	885b      	ldrh	r3, [r3, #2]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d112      	bne.n	800a332 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a30c:	7bbb      	ldrb	r3, [r7, #14]
 800a30e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a312:	2b00      	cmp	r3, #0
 800a314:	d004      	beq.n	800a320 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a316:	7bbb      	ldrb	r3, [r7, #14]
 800a318:	4619      	mov	r1, r3
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f004 f885 	bl	800e42a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f000 fcc3 	bl	800acac <USBD_CtlSendStatus>
              }
              break;
 800a326:	e004      	b.n	800a332 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800a328:	6839      	ldr	r1, [r7, #0]
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f000 fbf5 	bl	800ab1a <USBD_CtlError>
              break;
 800a330:	e000      	b.n	800a334 <USBD_StdEPReq+0x14c>
              break;
 800a332:	bf00      	nop
          }
          break;
 800a334:	e0aa      	b.n	800a48c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a33c:	2b02      	cmp	r3, #2
 800a33e:	d002      	beq.n	800a346 <USBD_StdEPReq+0x15e>
 800a340:	2b03      	cmp	r3, #3
 800a342:	d032      	beq.n	800a3aa <USBD_StdEPReq+0x1c2>
 800a344:	e097      	b.n	800a476 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a346:	7bbb      	ldrb	r3, [r7, #14]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d007      	beq.n	800a35c <USBD_StdEPReq+0x174>
 800a34c:	7bbb      	ldrb	r3, [r7, #14]
 800a34e:	2b80      	cmp	r3, #128	; 0x80
 800a350:	d004      	beq.n	800a35c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800a352:	6839      	ldr	r1, [r7, #0]
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f000 fbe0 	bl	800ab1a <USBD_CtlError>
                break;
 800a35a:	e091      	b.n	800a480 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a35c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a360:	2b00      	cmp	r3, #0
 800a362:	da0b      	bge.n	800a37c <USBD_StdEPReq+0x194>
 800a364:	7bbb      	ldrb	r3, [r7, #14]
 800a366:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a36a:	4613      	mov	r3, r2
 800a36c:	009b      	lsls	r3, r3, #2
 800a36e:	4413      	add	r3, r2
 800a370:	009b      	lsls	r3, r3, #2
 800a372:	3310      	adds	r3, #16
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	4413      	add	r3, r2
 800a378:	3304      	adds	r3, #4
 800a37a:	e00b      	b.n	800a394 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a37c:	7bbb      	ldrb	r3, [r7, #14]
 800a37e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a382:	4613      	mov	r3, r2
 800a384:	009b      	lsls	r3, r3, #2
 800a386:	4413      	add	r3, r2
 800a388:	009b      	lsls	r3, r3, #2
 800a38a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	4413      	add	r3, r2
 800a392:	3304      	adds	r3, #4
 800a394:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	2200      	movs	r2, #0
 800a39a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	2202      	movs	r2, #2
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 fc24 	bl	800abf0 <USBD_CtlSendData>
              break;
 800a3a8:	e06a      	b.n	800a480 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a3aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	da11      	bge.n	800a3d6 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a3b2:	7bbb      	ldrb	r3, [r7, #14]
 800a3b4:	f003 020f 	and.w	r2, r3, #15
 800a3b8:	6879      	ldr	r1, [r7, #4]
 800a3ba:	4613      	mov	r3, r2
 800a3bc:	009b      	lsls	r3, r3, #2
 800a3be:	4413      	add	r3, r2
 800a3c0:	009b      	lsls	r3, r3, #2
 800a3c2:	440b      	add	r3, r1
 800a3c4:	3318      	adds	r3, #24
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d117      	bne.n	800a3fc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800a3cc:	6839      	ldr	r1, [r7, #0]
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 fba3 	bl	800ab1a <USBD_CtlError>
                  break;
 800a3d4:	e054      	b.n	800a480 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a3d6:	7bbb      	ldrb	r3, [r7, #14]
 800a3d8:	f003 020f 	and.w	r2, r3, #15
 800a3dc:	6879      	ldr	r1, [r7, #4]
 800a3de:	4613      	mov	r3, r2
 800a3e0:	009b      	lsls	r3, r3, #2
 800a3e2:	4413      	add	r3, r2
 800a3e4:	009b      	lsls	r3, r3, #2
 800a3e6:	440b      	add	r3, r1
 800a3e8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d104      	bne.n	800a3fc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800a3f2:	6839      	ldr	r1, [r7, #0]
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f000 fb90 	bl	800ab1a <USBD_CtlError>
                  break;
 800a3fa:	e041      	b.n	800a480 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a3fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a400:	2b00      	cmp	r3, #0
 800a402:	da0b      	bge.n	800a41c <USBD_StdEPReq+0x234>
 800a404:	7bbb      	ldrb	r3, [r7, #14]
 800a406:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a40a:	4613      	mov	r3, r2
 800a40c:	009b      	lsls	r3, r3, #2
 800a40e:	4413      	add	r3, r2
 800a410:	009b      	lsls	r3, r3, #2
 800a412:	3310      	adds	r3, #16
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	4413      	add	r3, r2
 800a418:	3304      	adds	r3, #4
 800a41a:	e00b      	b.n	800a434 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a41c:	7bbb      	ldrb	r3, [r7, #14]
 800a41e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a422:	4613      	mov	r3, r2
 800a424:	009b      	lsls	r3, r3, #2
 800a426:	4413      	add	r3, r2
 800a428:	009b      	lsls	r3, r3, #2
 800a42a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	4413      	add	r3, r2
 800a432:	3304      	adds	r3, #4
 800a434:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a436:	7bbb      	ldrb	r3, [r7, #14]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d002      	beq.n	800a442 <USBD_StdEPReq+0x25a>
 800a43c:	7bbb      	ldrb	r3, [r7, #14]
 800a43e:	2b80      	cmp	r3, #128	; 0x80
 800a440:	d103      	bne.n	800a44a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	2200      	movs	r2, #0
 800a446:	601a      	str	r2, [r3, #0]
 800a448:	e00e      	b.n	800a468 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a44a:	7bbb      	ldrb	r3, [r7, #14]
 800a44c:	4619      	mov	r1, r3
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f004 f80a 	bl	800e468 <USBD_LL_IsStallEP>
 800a454:	4603      	mov	r3, r0
 800a456:	2b00      	cmp	r3, #0
 800a458:	d003      	beq.n	800a462 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	2201      	movs	r2, #1
 800a45e:	601a      	str	r2, [r3, #0]
 800a460:	e002      	b.n	800a468 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	2200      	movs	r2, #0
 800a466:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	2202      	movs	r2, #2
 800a46c:	4619      	mov	r1, r3
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f000 fbbe 	bl	800abf0 <USBD_CtlSendData>
              break;
 800a474:	e004      	b.n	800a480 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800a476:	6839      	ldr	r1, [r7, #0]
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f000 fb4e 	bl	800ab1a <USBD_CtlError>
              break;
 800a47e:	bf00      	nop
          }
          break;
 800a480:	e004      	b.n	800a48c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800a482:	6839      	ldr	r1, [r7, #0]
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f000 fb48 	bl	800ab1a <USBD_CtlError>
          break;
 800a48a:	bf00      	nop
      }
      break;
 800a48c:	e004      	b.n	800a498 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800a48e:	6839      	ldr	r1, [r7, #0]
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 fb42 	bl	800ab1a <USBD_CtlError>
      break;
 800a496:	bf00      	nop
  }

  return ret;
 800a498:	7bfb      	ldrb	r3, [r7, #15]
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3710      	adds	r7, #16
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
	...

0800a4a4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	885b      	ldrh	r3, [r3, #2]
 800a4be:	0a1b      	lsrs	r3, r3, #8
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	3b01      	subs	r3, #1
 800a4c4:	2b0e      	cmp	r3, #14
 800a4c6:	f200 8152 	bhi.w	800a76e <USBD_GetDescriptor+0x2ca>
 800a4ca:	a201      	add	r2, pc, #4	; (adr r2, 800a4d0 <USBD_GetDescriptor+0x2c>)
 800a4cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4d0:	0800a541 	.word	0x0800a541
 800a4d4:	0800a559 	.word	0x0800a559
 800a4d8:	0800a599 	.word	0x0800a599
 800a4dc:	0800a76f 	.word	0x0800a76f
 800a4e0:	0800a76f 	.word	0x0800a76f
 800a4e4:	0800a70f 	.word	0x0800a70f
 800a4e8:	0800a73b 	.word	0x0800a73b
 800a4ec:	0800a76f 	.word	0x0800a76f
 800a4f0:	0800a76f 	.word	0x0800a76f
 800a4f4:	0800a76f 	.word	0x0800a76f
 800a4f8:	0800a76f 	.word	0x0800a76f
 800a4fc:	0800a76f 	.word	0x0800a76f
 800a500:	0800a76f 	.word	0x0800a76f
 800a504:	0800a76f 	.word	0x0800a76f
 800a508:	0800a50d 	.word	0x0800a50d
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a512:	69db      	ldr	r3, [r3, #28]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d00b      	beq.n	800a530 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a51e:	69db      	ldr	r3, [r3, #28]
 800a520:	687a      	ldr	r2, [r7, #4]
 800a522:	7c12      	ldrb	r2, [r2, #16]
 800a524:	f107 0108 	add.w	r1, r7, #8
 800a528:	4610      	mov	r0, r2
 800a52a:	4798      	blx	r3
 800a52c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a52e:	e126      	b.n	800a77e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a530:	6839      	ldr	r1, [r7, #0]
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f000 faf1 	bl	800ab1a <USBD_CtlError>
        err++;
 800a538:	7afb      	ldrb	r3, [r7, #11]
 800a53a:	3301      	adds	r3, #1
 800a53c:	72fb      	strb	r3, [r7, #11]
      break;
 800a53e:	e11e      	b.n	800a77e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	687a      	ldr	r2, [r7, #4]
 800a54a:	7c12      	ldrb	r2, [r2, #16]
 800a54c:	f107 0108 	add.w	r1, r7, #8
 800a550:	4610      	mov	r0, r2
 800a552:	4798      	blx	r3
 800a554:	60f8      	str	r0, [r7, #12]
      break;
 800a556:	e112      	b.n	800a77e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	7c1b      	ldrb	r3, [r3, #16]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d10d      	bne.n	800a57c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a568:	f107 0208 	add.w	r2, r7, #8
 800a56c:	4610      	mov	r0, r2
 800a56e:	4798      	blx	r3
 800a570:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	3301      	adds	r3, #1
 800a576:	2202      	movs	r2, #2
 800a578:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a57a:	e100      	b.n	800a77e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a584:	f107 0208 	add.w	r2, r7, #8
 800a588:	4610      	mov	r0, r2
 800a58a:	4798      	blx	r3
 800a58c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	3301      	adds	r3, #1
 800a592:	2202      	movs	r2, #2
 800a594:	701a      	strb	r2, [r3, #0]
      break;
 800a596:	e0f2      	b.n	800a77e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	885b      	ldrh	r3, [r3, #2]
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	2b05      	cmp	r3, #5
 800a5a0:	f200 80ac 	bhi.w	800a6fc <USBD_GetDescriptor+0x258>
 800a5a4:	a201      	add	r2, pc, #4	; (adr r2, 800a5ac <USBD_GetDescriptor+0x108>)
 800a5a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5aa:	bf00      	nop
 800a5ac:	0800a5c5 	.word	0x0800a5c5
 800a5b0:	0800a5f9 	.word	0x0800a5f9
 800a5b4:	0800a62d 	.word	0x0800a62d
 800a5b8:	0800a661 	.word	0x0800a661
 800a5bc:	0800a695 	.word	0x0800a695
 800a5c0:	0800a6c9 	.word	0x0800a6c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a5ca:	685b      	ldr	r3, [r3, #4]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d00b      	beq.n	800a5e8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a5d6:	685b      	ldr	r3, [r3, #4]
 800a5d8:	687a      	ldr	r2, [r7, #4]
 800a5da:	7c12      	ldrb	r2, [r2, #16]
 800a5dc:	f107 0108 	add.w	r1, r7, #8
 800a5e0:	4610      	mov	r0, r2
 800a5e2:	4798      	blx	r3
 800a5e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5e6:	e091      	b.n	800a70c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a5e8:	6839      	ldr	r1, [r7, #0]
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 fa95 	bl	800ab1a <USBD_CtlError>
            err++;
 800a5f0:	7afb      	ldrb	r3, [r7, #11]
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	72fb      	strb	r3, [r7, #11]
          break;
 800a5f6:	e089      	b.n	800a70c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d00b      	beq.n	800a61c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a60a:	689b      	ldr	r3, [r3, #8]
 800a60c:	687a      	ldr	r2, [r7, #4]
 800a60e:	7c12      	ldrb	r2, [r2, #16]
 800a610:	f107 0108 	add.w	r1, r7, #8
 800a614:	4610      	mov	r0, r2
 800a616:	4798      	blx	r3
 800a618:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a61a:	e077      	b.n	800a70c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a61c:	6839      	ldr	r1, [r7, #0]
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f000 fa7b 	bl	800ab1a <USBD_CtlError>
            err++;
 800a624:	7afb      	ldrb	r3, [r7, #11]
 800a626:	3301      	adds	r3, #1
 800a628:	72fb      	strb	r3, [r7, #11]
          break;
 800a62a:	e06f      	b.n	800a70c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a632:	68db      	ldr	r3, [r3, #12]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d00b      	beq.n	800a650 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a63e:	68db      	ldr	r3, [r3, #12]
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	7c12      	ldrb	r2, [r2, #16]
 800a644:	f107 0108 	add.w	r1, r7, #8
 800a648:	4610      	mov	r0, r2
 800a64a:	4798      	blx	r3
 800a64c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a64e:	e05d      	b.n	800a70c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a650:	6839      	ldr	r1, [r7, #0]
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 fa61 	bl	800ab1a <USBD_CtlError>
            err++;
 800a658:	7afb      	ldrb	r3, [r7, #11]
 800a65a:	3301      	adds	r3, #1
 800a65c:	72fb      	strb	r3, [r7, #11]
          break;
 800a65e:	e055      	b.n	800a70c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a666:	691b      	ldr	r3, [r3, #16]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d00b      	beq.n	800a684 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a672:	691b      	ldr	r3, [r3, #16]
 800a674:	687a      	ldr	r2, [r7, #4]
 800a676:	7c12      	ldrb	r2, [r2, #16]
 800a678:	f107 0108 	add.w	r1, r7, #8
 800a67c:	4610      	mov	r0, r2
 800a67e:	4798      	blx	r3
 800a680:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a682:	e043      	b.n	800a70c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a684:	6839      	ldr	r1, [r7, #0]
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 fa47 	bl	800ab1a <USBD_CtlError>
            err++;
 800a68c:	7afb      	ldrb	r3, [r7, #11]
 800a68e:	3301      	adds	r3, #1
 800a690:	72fb      	strb	r3, [r7, #11]
          break;
 800a692:	e03b      	b.n	800a70c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a69a:	695b      	ldr	r3, [r3, #20]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d00b      	beq.n	800a6b8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a6a6:	695b      	ldr	r3, [r3, #20]
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	7c12      	ldrb	r2, [r2, #16]
 800a6ac:	f107 0108 	add.w	r1, r7, #8
 800a6b0:	4610      	mov	r0, r2
 800a6b2:	4798      	blx	r3
 800a6b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6b6:	e029      	b.n	800a70c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a6b8:	6839      	ldr	r1, [r7, #0]
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f000 fa2d 	bl	800ab1a <USBD_CtlError>
            err++;
 800a6c0:	7afb      	ldrb	r3, [r7, #11]
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	72fb      	strb	r3, [r7, #11]
          break;
 800a6c6:	e021      	b.n	800a70c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a6ce:	699b      	ldr	r3, [r3, #24]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d00b      	beq.n	800a6ec <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a6da:	699b      	ldr	r3, [r3, #24]
 800a6dc:	687a      	ldr	r2, [r7, #4]
 800a6de:	7c12      	ldrb	r2, [r2, #16]
 800a6e0:	f107 0108 	add.w	r1, r7, #8
 800a6e4:	4610      	mov	r0, r2
 800a6e6:	4798      	blx	r3
 800a6e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6ea:	e00f      	b.n	800a70c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a6ec:	6839      	ldr	r1, [r7, #0]
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f000 fa13 	bl	800ab1a <USBD_CtlError>
            err++;
 800a6f4:	7afb      	ldrb	r3, [r7, #11]
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	72fb      	strb	r3, [r7, #11]
          break;
 800a6fa:	e007      	b.n	800a70c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a6fc:	6839      	ldr	r1, [r7, #0]
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f000 fa0b 	bl	800ab1a <USBD_CtlError>
          err++;
 800a704:	7afb      	ldrb	r3, [r7, #11]
 800a706:	3301      	adds	r3, #1
 800a708:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a70a:	e038      	b.n	800a77e <USBD_GetDescriptor+0x2da>
 800a70c:	e037      	b.n	800a77e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	7c1b      	ldrb	r3, [r3, #16]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d109      	bne.n	800a72a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a71c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a71e:	f107 0208 	add.w	r2, r7, #8
 800a722:	4610      	mov	r0, r2
 800a724:	4798      	blx	r3
 800a726:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a728:	e029      	b.n	800a77e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a72a:	6839      	ldr	r1, [r7, #0]
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f000 f9f4 	bl	800ab1a <USBD_CtlError>
        err++;
 800a732:	7afb      	ldrb	r3, [r7, #11]
 800a734:	3301      	adds	r3, #1
 800a736:	72fb      	strb	r3, [r7, #11]
      break;
 800a738:	e021      	b.n	800a77e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	7c1b      	ldrb	r3, [r3, #16]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d10d      	bne.n	800a75e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a74a:	f107 0208 	add.w	r2, r7, #8
 800a74e:	4610      	mov	r0, r2
 800a750:	4798      	blx	r3
 800a752:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	3301      	adds	r3, #1
 800a758:	2207      	movs	r2, #7
 800a75a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a75c:	e00f      	b.n	800a77e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a75e:	6839      	ldr	r1, [r7, #0]
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f000 f9da 	bl	800ab1a <USBD_CtlError>
        err++;
 800a766:	7afb      	ldrb	r3, [r7, #11]
 800a768:	3301      	adds	r3, #1
 800a76a:	72fb      	strb	r3, [r7, #11]
      break;
 800a76c:	e007      	b.n	800a77e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a76e:	6839      	ldr	r1, [r7, #0]
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f000 f9d2 	bl	800ab1a <USBD_CtlError>
      err++;
 800a776:	7afb      	ldrb	r3, [r7, #11]
 800a778:	3301      	adds	r3, #1
 800a77a:	72fb      	strb	r3, [r7, #11]
      break;
 800a77c:	bf00      	nop
  }

  if (err != 0U)
 800a77e:	7afb      	ldrb	r3, [r7, #11]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d11c      	bne.n	800a7be <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a784:	893b      	ldrh	r3, [r7, #8]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d011      	beq.n	800a7ae <USBD_GetDescriptor+0x30a>
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	88db      	ldrh	r3, [r3, #6]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d00d      	beq.n	800a7ae <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	88da      	ldrh	r2, [r3, #6]
 800a796:	893b      	ldrh	r3, [r7, #8]
 800a798:	4293      	cmp	r3, r2
 800a79a:	bf28      	it	cs
 800a79c:	4613      	movcs	r3, r2
 800a79e:	b29b      	uxth	r3, r3
 800a7a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a7a2:	893b      	ldrh	r3, [r7, #8]
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	68f9      	ldr	r1, [r7, #12]
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f000 fa21 	bl	800abf0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	88db      	ldrh	r3, [r3, #6]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d104      	bne.n	800a7c0 <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 fa78 	bl	800acac <USBD_CtlSendStatus>
 800a7bc:	e000      	b.n	800a7c0 <USBD_GetDescriptor+0x31c>
    return;
 800a7be:	bf00      	nop
    }
  }
}
 800a7c0:	3710      	adds	r7, #16
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop

0800a7c8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	889b      	ldrh	r3, [r3, #4]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d130      	bne.n	800a83c <USBD_SetAddress+0x74>
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	88db      	ldrh	r3, [r3, #6]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d12c      	bne.n	800a83c <USBD_SetAddress+0x74>
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	885b      	ldrh	r3, [r3, #2]
 800a7e6:	2b7f      	cmp	r3, #127	; 0x7f
 800a7e8:	d828      	bhi.n	800a83c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	885b      	ldrh	r3, [r3, #2]
 800a7ee:	b2db      	uxtb	r3, r3
 800a7f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7fc:	2b03      	cmp	r3, #3
 800a7fe:	d104      	bne.n	800a80a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a800:	6839      	ldr	r1, [r7, #0]
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f000 f989 	bl	800ab1a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a808:	e01c      	b.n	800a844 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	7bfa      	ldrb	r2, [r7, #15]
 800a80e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a812:	7bfb      	ldrb	r3, [r7, #15]
 800a814:	4619      	mov	r1, r3
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f003 fe4c 	bl	800e4b4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f000 fa45 	bl	800acac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a822:	7bfb      	ldrb	r3, [r7, #15]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d004      	beq.n	800a832 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2202      	movs	r2, #2
 800a82c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a830:	e008      	b.n	800a844 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2201      	movs	r2, #1
 800a836:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a83a:	e003      	b.n	800a844 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a83c:	6839      	ldr	r1, [r7, #0]
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 f96b 	bl	800ab1a <USBD_CtlError>
  }
}
 800a844:	bf00      	nop
 800a846:	3710      	adds	r7, #16
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b082      	sub	sp, #8
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	885b      	ldrh	r3, [r3, #2]
 800a85a:	b2da      	uxtb	r2, r3
 800a85c:	4b41      	ldr	r3, [pc, #260]	; (800a964 <USBD_SetConfig+0x118>)
 800a85e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a860:	4b40      	ldr	r3, [pc, #256]	; (800a964 <USBD_SetConfig+0x118>)
 800a862:	781b      	ldrb	r3, [r3, #0]
 800a864:	2b01      	cmp	r3, #1
 800a866:	d904      	bls.n	800a872 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a868:	6839      	ldr	r1, [r7, #0]
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 f955 	bl	800ab1a <USBD_CtlError>
 800a870:	e075      	b.n	800a95e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a878:	2b02      	cmp	r3, #2
 800a87a:	d002      	beq.n	800a882 <USBD_SetConfig+0x36>
 800a87c:	2b03      	cmp	r3, #3
 800a87e:	d023      	beq.n	800a8c8 <USBD_SetConfig+0x7c>
 800a880:	e062      	b.n	800a948 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a882:	4b38      	ldr	r3, [pc, #224]	; (800a964 <USBD_SetConfig+0x118>)
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d01a      	beq.n	800a8c0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a88a:	4b36      	ldr	r3, [pc, #216]	; (800a964 <USBD_SetConfig+0x118>)
 800a88c:	781b      	ldrb	r3, [r3, #0]
 800a88e:	461a      	mov	r2, r3
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2203      	movs	r2, #3
 800a898:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a89c:	4b31      	ldr	r3, [pc, #196]	; (800a964 <USBD_SetConfig+0x118>)
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f7ff f9c6 	bl	8009c34 <USBD_SetClassConfig>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	2b02      	cmp	r3, #2
 800a8ac:	d104      	bne.n	800a8b8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a8ae:	6839      	ldr	r1, [r7, #0]
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f000 f932 	bl	800ab1a <USBD_CtlError>
            return;
 800a8b6:	e052      	b.n	800a95e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f000 f9f7 	bl	800acac <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a8be:	e04e      	b.n	800a95e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f000 f9f3 	bl	800acac <USBD_CtlSendStatus>
        break;
 800a8c6:	e04a      	b.n	800a95e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a8c8:	4b26      	ldr	r3, [pc, #152]	; (800a964 <USBD_SetConfig+0x118>)
 800a8ca:	781b      	ldrb	r3, [r3, #0]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d112      	bne.n	800a8f6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2202      	movs	r2, #2
 800a8d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a8d8:	4b22      	ldr	r3, [pc, #136]	; (800a964 <USBD_SetConfig+0x118>)
 800a8da:	781b      	ldrb	r3, [r3, #0]
 800a8dc:	461a      	mov	r2, r3
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a8e2:	4b20      	ldr	r3, [pc, #128]	; (800a964 <USBD_SetConfig+0x118>)
 800a8e4:	781b      	ldrb	r3, [r3, #0]
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f7ff f9c2 	bl	8009c72 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f000 f9dc 	bl	800acac <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a8f4:	e033      	b.n	800a95e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a8f6:	4b1b      	ldr	r3, [pc, #108]	; (800a964 <USBD_SetConfig+0x118>)
 800a8f8:	781b      	ldrb	r3, [r3, #0]
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	429a      	cmp	r2, r3
 800a902:	d01d      	beq.n	800a940 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	685b      	ldr	r3, [r3, #4]
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	4619      	mov	r1, r3
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f7ff f9b0 	bl	8009c72 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a912:	4b14      	ldr	r3, [pc, #80]	; (800a964 <USBD_SetConfig+0x118>)
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	461a      	mov	r2, r3
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a91c:	4b11      	ldr	r3, [pc, #68]	; (800a964 <USBD_SetConfig+0x118>)
 800a91e:	781b      	ldrb	r3, [r3, #0]
 800a920:	4619      	mov	r1, r3
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f7ff f986 	bl	8009c34 <USBD_SetClassConfig>
 800a928:	4603      	mov	r3, r0
 800a92a:	2b02      	cmp	r3, #2
 800a92c:	d104      	bne.n	800a938 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a92e:	6839      	ldr	r1, [r7, #0]
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 f8f2 	bl	800ab1a <USBD_CtlError>
            return;
 800a936:	e012      	b.n	800a95e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 f9b7 	bl	800acac <USBD_CtlSendStatus>
        break;
 800a93e:	e00e      	b.n	800a95e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 f9b3 	bl	800acac <USBD_CtlSendStatus>
        break;
 800a946:	e00a      	b.n	800a95e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a948:	6839      	ldr	r1, [r7, #0]
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f000 f8e5 	bl	800ab1a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a950:	4b04      	ldr	r3, [pc, #16]	; (800a964 <USBD_SetConfig+0x118>)
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	4619      	mov	r1, r3
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f7ff f98b 	bl	8009c72 <USBD_ClrClassConfig>
        break;
 800a95c:	bf00      	nop
    }
  }
}
 800a95e:	3708      	adds	r7, #8
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}
 800a964:	20000454 	.word	0x20000454

0800a968 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b082      	sub	sp, #8
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	88db      	ldrh	r3, [r3, #6]
 800a976:	2b01      	cmp	r3, #1
 800a978:	d004      	beq.n	800a984 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a97a:	6839      	ldr	r1, [r7, #0]
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f000 f8cc 	bl	800ab1a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a982:	e021      	b.n	800a9c8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	db17      	blt.n	800a9be <USBD_GetConfig+0x56>
 800a98e:	2b02      	cmp	r3, #2
 800a990:	dd02      	ble.n	800a998 <USBD_GetConfig+0x30>
 800a992:	2b03      	cmp	r3, #3
 800a994:	d00b      	beq.n	800a9ae <USBD_GetConfig+0x46>
 800a996:	e012      	b.n	800a9be <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2200      	movs	r2, #0
 800a99c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	3308      	adds	r3, #8
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 f922 	bl	800abf0 <USBD_CtlSendData>
        break;
 800a9ac:	e00c      	b.n	800a9c8 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	3304      	adds	r3, #4
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	4619      	mov	r1, r3
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 f91a 	bl	800abf0 <USBD_CtlSendData>
        break;
 800a9bc:	e004      	b.n	800a9c8 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800a9be:	6839      	ldr	r1, [r7, #0]
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f000 f8aa 	bl	800ab1a <USBD_CtlError>
        break;
 800a9c6:	bf00      	nop
}
 800a9c8:	bf00      	nop
 800a9ca:	3708      	adds	r7, #8
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9e0:	3b01      	subs	r3, #1
 800a9e2:	2b02      	cmp	r3, #2
 800a9e4:	d81e      	bhi.n	800aa24 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	88db      	ldrh	r3, [r3, #6]
 800a9ea:	2b02      	cmp	r3, #2
 800a9ec:	d004      	beq.n	800a9f8 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a9ee:	6839      	ldr	r1, [r7, #0]
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f000 f892 	bl	800ab1a <USBD_CtlError>
        break;
 800a9f6:	e01a      	b.n	800aa2e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d005      	beq.n	800aa14 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	68db      	ldr	r3, [r3, #12]
 800aa0c:	f043 0202 	orr.w	r2, r3, #2
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	330c      	adds	r3, #12
 800aa18:	2202      	movs	r2, #2
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 f8e7 	bl	800abf0 <USBD_CtlSendData>
      break;
 800aa22:	e004      	b.n	800aa2e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800aa24:	6839      	ldr	r1, [r7, #0]
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 f877 	bl	800ab1a <USBD_CtlError>
      break;
 800aa2c:	bf00      	nop
  }
}
 800aa2e:	bf00      	nop
 800aa30:	3708      	adds	r7, #8
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}

0800aa36 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800aa36:	b580      	push	{r7, lr}
 800aa38:	b082      	sub	sp, #8
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	6078      	str	r0, [r7, #4]
 800aa3e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	885b      	ldrh	r3, [r3, #2]
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	d106      	bne.n	800aa56 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f000 f92b 	bl	800acac <USBD_CtlSendStatus>
  }
}
 800aa56:	bf00      	nop
 800aa58:	3708      	adds	r7, #8
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}

0800aa5e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800aa5e:	b580      	push	{r7, lr}
 800aa60:	b082      	sub	sp, #8
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	6078      	str	r0, [r7, #4]
 800aa66:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa6e:	3b01      	subs	r3, #1
 800aa70:	2b02      	cmp	r3, #2
 800aa72:	d80b      	bhi.n	800aa8c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	885b      	ldrh	r3, [r3, #2]
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d10c      	bne.n	800aa96 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f000 f911 	bl	800acac <USBD_CtlSendStatus>
      }
      break;
 800aa8a:	e004      	b.n	800aa96 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800aa8c:	6839      	ldr	r1, [r7, #0]
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 f843 	bl	800ab1a <USBD_CtlError>
      break;
 800aa94:	e000      	b.n	800aa98 <USBD_ClrFeature+0x3a>
      break;
 800aa96:	bf00      	nop
  }
}
 800aa98:	bf00      	nop
 800aa9a:	3708      	adds	r7, #8
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}

0800aaa0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b083      	sub	sp, #12
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	781a      	ldrb	r2, [r3, #0]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	785a      	ldrb	r2, [r3, #1]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	3302      	adds	r3, #2
 800aabe:	781b      	ldrb	r3, [r3, #0]
 800aac0:	b29a      	uxth	r2, r3
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	3303      	adds	r3, #3
 800aac6:	781b      	ldrb	r3, [r3, #0]
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	021b      	lsls	r3, r3, #8
 800aacc:	b29b      	uxth	r3, r3
 800aace:	4413      	add	r3, r2
 800aad0:	b29a      	uxth	r2, r3
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	3304      	adds	r3, #4
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	b29a      	uxth	r2, r3
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	3305      	adds	r3, #5
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	b29b      	uxth	r3, r3
 800aae6:	021b      	lsls	r3, r3, #8
 800aae8:	b29b      	uxth	r3, r3
 800aaea:	4413      	add	r3, r2
 800aaec:	b29a      	uxth	r2, r3
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	3306      	adds	r3, #6
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	b29a      	uxth	r2, r3
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	3307      	adds	r3, #7
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	b29b      	uxth	r3, r3
 800ab02:	021b      	lsls	r3, r3, #8
 800ab04:	b29b      	uxth	r3, r3
 800ab06:	4413      	add	r3, r2
 800ab08:	b29a      	uxth	r2, r3
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	80da      	strh	r2, [r3, #6]

}
 800ab0e:	bf00      	nop
 800ab10:	370c      	adds	r7, #12
 800ab12:	46bd      	mov	sp, r7
 800ab14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab18:	4770      	bx	lr

0800ab1a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800ab1a:	b580      	push	{r7, lr}
 800ab1c:	b082      	sub	sp, #8
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
 800ab22:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800ab24:	2180      	movs	r1, #128	; 0x80
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f003 fc60 	bl	800e3ec <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800ab2c:	2100      	movs	r1, #0
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f003 fc5c 	bl	800e3ec <USBD_LL_StallEP>
}
 800ab34:	bf00      	nop
 800ab36:	3708      	adds	r7, #8
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b086      	sub	sp, #24
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	60f8      	str	r0, [r7, #12]
 800ab44:	60b9      	str	r1, [r7, #8]
 800ab46:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d032      	beq.n	800abb8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800ab52:	68f8      	ldr	r0, [r7, #12]
 800ab54:	f000 f834 	bl	800abc0 <USBD_GetLen>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	b29b      	uxth	r3, r3
 800ab5e:	005b      	lsls	r3, r3, #1
 800ab60:	b29a      	uxth	r2, r3
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800ab66:	7dfb      	ldrb	r3, [r7, #23]
 800ab68:	1c5a      	adds	r2, r3, #1
 800ab6a:	75fa      	strb	r2, [r7, #23]
 800ab6c:	461a      	mov	r2, r3
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	4413      	add	r3, r2
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	7812      	ldrb	r2, [r2, #0]
 800ab76:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ab78:	7dfb      	ldrb	r3, [r7, #23]
 800ab7a:	1c5a      	adds	r2, r3, #1
 800ab7c:	75fa      	strb	r2, [r7, #23]
 800ab7e:	461a      	mov	r2, r3
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	4413      	add	r3, r2
 800ab84:	2203      	movs	r2, #3
 800ab86:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800ab88:	e012      	b.n	800abb0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	1c5a      	adds	r2, r3, #1
 800ab8e:	60fa      	str	r2, [r7, #12]
 800ab90:	7dfa      	ldrb	r2, [r7, #23]
 800ab92:	1c51      	adds	r1, r2, #1
 800ab94:	75f9      	strb	r1, [r7, #23]
 800ab96:	4611      	mov	r1, r2
 800ab98:	68ba      	ldr	r2, [r7, #8]
 800ab9a:	440a      	add	r2, r1
 800ab9c:	781b      	ldrb	r3, [r3, #0]
 800ab9e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800aba0:	7dfb      	ldrb	r3, [r7, #23]
 800aba2:	1c5a      	adds	r2, r3, #1
 800aba4:	75fa      	strb	r2, [r7, #23]
 800aba6:	461a      	mov	r2, r3
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	4413      	add	r3, r2
 800abac:	2200      	movs	r2, #0
 800abae:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	781b      	ldrb	r3, [r3, #0]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d1e8      	bne.n	800ab8a <USBD_GetString+0x4e>
    }
  }
}
 800abb8:	bf00      	nop
 800abba:	3718      	adds	r7, #24
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b085      	sub	sp, #20
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800abc8:	2300      	movs	r3, #0
 800abca:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800abcc:	e005      	b.n	800abda <USBD_GetLen+0x1a>
  {
    len++;
 800abce:	7bfb      	ldrb	r3, [r7, #15]
 800abd0:	3301      	adds	r3, #1
 800abd2:	73fb      	strb	r3, [r7, #15]
    buf++;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	3301      	adds	r3, #1
 800abd8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d1f5      	bne.n	800abce <USBD_GetLen+0xe>
  }

  return len;
 800abe2:	7bfb      	ldrb	r3, [r7, #15]
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3714      	adds	r7, #20
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b084      	sub	sp, #16
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	60b9      	str	r1, [r7, #8]
 800abfa:	4613      	mov	r3, r2
 800abfc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2202      	movs	r2, #2
 800ac02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ac06:	88fa      	ldrh	r2, [r7, #6]
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800ac0c:	88fa      	ldrh	r2, [r7, #6]
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ac12:	88fb      	ldrh	r3, [r7, #6]
 800ac14:	68ba      	ldr	r2, [r7, #8]
 800ac16:	2100      	movs	r1, #0
 800ac18:	68f8      	ldr	r0, [r7, #12]
 800ac1a:	f003 fc6a 	bl	800e4f2 <USBD_LL_Transmit>

  return USBD_OK;
 800ac1e:	2300      	movs	r3, #0
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3710      	adds	r7, #16
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b084      	sub	sp, #16
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	60f8      	str	r0, [r7, #12]
 800ac30:	60b9      	str	r1, [r7, #8]
 800ac32:	4613      	mov	r3, r2
 800ac34:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ac36:	88fb      	ldrh	r3, [r7, #6]
 800ac38:	68ba      	ldr	r2, [r7, #8]
 800ac3a:	2100      	movs	r1, #0
 800ac3c:	68f8      	ldr	r0, [r7, #12]
 800ac3e:	f003 fc58 	bl	800e4f2 <USBD_LL_Transmit>

  return USBD_OK;
 800ac42:	2300      	movs	r3, #0
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3710      	adds	r7, #16
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b084      	sub	sp, #16
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	60f8      	str	r0, [r7, #12]
 800ac54:	60b9      	str	r1, [r7, #8]
 800ac56:	4613      	mov	r3, r2
 800ac58:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2203      	movs	r2, #3
 800ac5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ac62:	88fa      	ldrh	r2, [r7, #6]
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800ac6a:	88fa      	ldrh	r2, [r7, #6]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ac72:	88fb      	ldrh	r3, [r7, #6]
 800ac74:	68ba      	ldr	r2, [r7, #8]
 800ac76:	2100      	movs	r1, #0
 800ac78:	68f8      	ldr	r0, [r7, #12]
 800ac7a:	f003 fc5d 	bl	800e538 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac7e:	2300      	movs	r3, #0
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3710      	adds	r7, #16
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}

0800ac88 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	60b9      	str	r1, [r7, #8]
 800ac92:	4613      	mov	r3, r2
 800ac94:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ac96:	88fb      	ldrh	r3, [r7, #6]
 800ac98:	68ba      	ldr	r2, [r7, #8]
 800ac9a:	2100      	movs	r1, #0
 800ac9c:	68f8      	ldr	r0, [r7, #12]
 800ac9e:	f003 fc4b 	bl	800e538 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aca2:	2300      	movs	r3, #0
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3710      	adds	r7, #16
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}

0800acac <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2204      	movs	r2, #4
 800acb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800acbc:	2300      	movs	r3, #0
 800acbe:	2200      	movs	r2, #0
 800acc0:	2100      	movs	r1, #0
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f003 fc15 	bl	800e4f2 <USBD_LL_Transmit>

  return USBD_OK;
 800acc8:	2300      	movs	r3, #0
}
 800acca:	4618      	mov	r0, r3
 800accc:	3708      	adds	r7, #8
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}

0800acd2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800acd2:	b580      	push	{r7, lr}
 800acd4:	b082      	sub	sp, #8
 800acd6:	af00      	add	r7, sp, #0
 800acd8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2205      	movs	r2, #5
 800acde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ace2:	2300      	movs	r3, #0
 800ace4:	2200      	movs	r2, #0
 800ace6:	2100      	movs	r1, #0
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f003 fc25 	bl	800e538 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800acee:	2300      	movs	r3, #0
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3708      	adds	r7, #8
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <aci_gap_set_io_capability>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b0cc      	sub	sp, #304	; 0x130
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	4602      	mov	r2, r0
 800ad00:	1dfb      	adds	r3, r7, #7
 800ad02:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800ad04:	f107 0310 	add.w	r3, r7, #16
 800ad08:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ad0c:	f107 030f 	add.w	r3, r7, #15
 800ad10:	2200      	movs	r2, #0
 800ad12:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ad14:	2300      	movs	r3, #0
 800ad16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = htob(IO_Capability, 1);
 800ad1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad1e:	1dfa      	adds	r2, r7, #7
 800ad20:	7812      	ldrb	r2, [r2, #0]
 800ad22:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ad24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ad28:	3301      	adds	r3, #1
 800ad2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800ad2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ad32:	2218      	movs	r2, #24
 800ad34:	2100      	movs	r1, #0
 800ad36:	4618      	mov	r0, r3
 800ad38:	f000 ff61 	bl	800bbfe <Osal_MemSet>
  rq.ogf = 0x3f;
 800ad3c:	233f      	movs	r3, #63	; 0x3f
 800ad3e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800ad42:	2385      	movs	r3, #133	; 0x85
 800ad44:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ad48:	f107 0310 	add.w	r3, r7, #16
 800ad4c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ad50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ad54:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ad58:	f107 030f 	add.w	r3, r7, #15
 800ad5c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ad60:	2301      	movs	r3, #1
 800ad62:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800ad66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ad6a:	2100      	movs	r1, #0
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f001 f901 	bl	800bf74 <hci_send_req>
 800ad72:	4603      	mov	r3, r0
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	da01      	bge.n	800ad7c <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 800ad78:	23ff      	movs	r3, #255	; 0xff
 800ad7a:	e009      	b.n	800ad90 <aci_gap_set_io_capability+0x98>
  if (status) 
 800ad7c:	f107 030f 	add.w	r3, r7, #15
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d003      	beq.n	800ad8e <aci_gap_set_io_capability+0x96>
  {
    return status;
 800ad86:	f107 030f 	add.w	r3, r7, #15
 800ad8a:	781b      	ldrb	r3, [r3, #0]
 800ad8c:	e000      	b.n	800ad90 <aci_gap_set_io_capability+0x98>
  }
  return BLE_STATUS_SUCCESS;
 800ad8e:	2300      	movs	r3, #0
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}

0800ad9a <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 800ad9a:	b5b0      	push	{r4, r5, r7, lr}
 800ad9c:	b0cc      	sub	sp, #304	; 0x130
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	4605      	mov	r5, r0
 800ada2:	460c      	mov	r4, r1
 800ada4:	4610      	mov	r0, r2
 800ada6:	4619      	mov	r1, r3
 800ada8:	1dfb      	adds	r3, r7, #7
 800adaa:	462a      	mov	r2, r5
 800adac:	701a      	strb	r2, [r3, #0]
 800adae:	1dbb      	adds	r3, r7, #6
 800adb0:	4622      	mov	r2, r4
 800adb2:	701a      	strb	r2, [r3, #0]
 800adb4:	1d7b      	adds	r3, r7, #5
 800adb6:	4602      	mov	r2, r0
 800adb8:	701a      	strb	r2, [r3, #0]
 800adba:	1d3b      	adds	r3, r7, #4
 800adbc:	460a      	mov	r2, r1
 800adbe:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800adc0:	f107 0310 	add.w	r3, r7, #16
 800adc4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800adc8:	f107 030f 	add.w	r3, r7, #15
 800adcc:	2200      	movs	r2, #0
 800adce:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800add0:	2300      	movs	r3, #0
 800add2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 800add6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800adda:	1dfa      	adds	r2, r7, #7
 800addc:	7812      	ldrb	r2, [r2, #0]
 800adde:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ade0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ade4:	3301      	adds	r3, #1
 800ade6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 800adea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800adee:	1dba      	adds	r2, r7, #6
 800adf0:	7812      	ldrb	r2, [r2, #0]
 800adf2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800adf4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800adf8:	3301      	adds	r3, #1
 800adfa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = htob(SC_Support, 1);
 800adfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae02:	1d7a      	adds	r2, r7, #5
 800ae04:	7812      	ldrb	r2, [r2, #0]
 800ae06:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ae08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae0c:	3301      	adds	r3, #1
 800ae0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 800ae12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae16:	1d3a      	adds	r2, r7, #4
 800ae18:	7812      	ldrb	r2, [r2, #0]
 800ae1a:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800ae1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae20:	3301      	adds	r3, #1
 800ae22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 800ae26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae2a:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800ae2e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800ae30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae34:	3301      	adds	r3, #1
 800ae36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 800ae3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae3e:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800ae42:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800ae44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae48:	3301      	adds	r3, #1
 800ae4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 800ae4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae52:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800ae56:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800ae58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 800ae62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae66:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800ae6a:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800ae6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae72:	3304      	adds	r3, #4
 800ae74:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 800ae78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae7c:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800ae80:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800ae82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae86:	3301      	adds	r3, #1
 800ae88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800ae8c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ae90:	2218      	movs	r2, #24
 800ae92:	2100      	movs	r1, #0
 800ae94:	4618      	mov	r0, r3
 800ae96:	f000 feb2 	bl	800bbfe <Osal_MemSet>
  rq.ogf = 0x3f;
 800ae9a:	233f      	movs	r3, #63	; 0x3f
 800ae9c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800aea0:	2386      	movs	r3, #134	; 0x86
 800aea2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800aea6:	f107 0310 	add.w	r3, r7, #16
 800aeaa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800aeae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aeb2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800aeb6:	f107 030f 	add.w	r3, r7, #15
 800aeba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800aebe:	2301      	movs	r3, #1
 800aec0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800aec4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800aec8:	2100      	movs	r1, #0
 800aeca:	4618      	mov	r0, r3
 800aecc:	f001 f852 	bl	800bf74 <hci_send_req>
 800aed0:	4603      	mov	r3, r0
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	da01      	bge.n	800aeda <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 800aed6:	23ff      	movs	r3, #255	; 0xff
 800aed8:	e009      	b.n	800aeee <aci_gap_set_authentication_requirement+0x154>
  if (status) 
 800aeda:	f107 030f 	add.w	r3, r7, #15
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d003      	beq.n	800aeec <aci_gap_set_authentication_requirement+0x152>
  {
    return status;
 800aee4:	f107 030f 	add.w	r3, r7, #15
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	e000      	b.n	800aeee <aci_gap_set_authentication_requirement+0x154>
  }
  return BLE_STATUS_SUCCESS;
 800aeec:	2300      	movs	r3, #0
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bdb0      	pop	{r4, r5, r7, pc}

0800aef8 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 800aef8:	b590      	push	{r4, r7, lr}
 800aefa:	b0cd      	sub	sp, #308	; 0x134
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	4604      	mov	r4, r0
 800af00:	4608      	mov	r0, r1
 800af02:	4611      	mov	r1, r2
 800af04:	463a      	mov	r2, r7
 800af06:	6013      	str	r3, [r2, #0]
 800af08:	1dfb      	adds	r3, r7, #7
 800af0a:	4622      	mov	r2, r4
 800af0c:	701a      	strb	r2, [r3, #0]
 800af0e:	1dbb      	adds	r3, r7, #6
 800af10:	4602      	mov	r2, r0
 800af12:	701a      	strb	r2, [r3, #0]
 800af14:	1d7b      	adds	r3, r7, #5
 800af16:	460a      	mov	r2, r1
 800af18:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800af1a:	f107 0310 	add.w	r3, r7, #16
 800af1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800af22:	f107 0308 	add.w	r3, r7, #8
 800af26:	2207      	movs	r2, #7
 800af28:	2100      	movs	r1, #0
 800af2a:	4618      	mov	r0, r3
 800af2c:	f000 fe67 	bl	800bbfe <Osal_MemSet>
  int index_input = 0;
 800af30:	2300      	movs	r3, #0
 800af32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = htob(Role, 1);
 800af36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af3a:	1dfa      	adds	r2, r7, #7
 800af3c:	7812      	ldrb	r2, [r2, #0]
 800af3e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800af40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af44:	3301      	adds	r3, #1
 800af46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 800af4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af4e:	1dba      	adds	r2, r7, #6
 800af50:	7812      	ldrb	r2, [r2, #0]
 800af52:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800af54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af58:	3301      	adds	r3, #1
 800af5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 800af5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af62:	1d7a      	adds	r2, r7, #5
 800af64:	7812      	ldrb	r2, [r2, #0]
 800af66:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800af68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af6c:	3301      	adds	r3, #1
 800af6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800af72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800af76:	2218      	movs	r2, #24
 800af78:	2100      	movs	r1, #0
 800af7a:	4618      	mov	r0, r3
 800af7c:	f000 fe3f 	bl	800bbfe <Osal_MemSet>
  rq.ogf = 0x3f;
 800af80:	233f      	movs	r3, #63	; 0x3f
 800af82:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800af86:	238a      	movs	r3, #138	; 0x8a
 800af88:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800af8c:	f107 0310 	add.w	r3, r7, #16
 800af90:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800af94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af98:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800af9c:	f107 0308 	add.w	r3, r7, #8
 800afa0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800afa4:	2307      	movs	r3, #7
 800afa6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800afaa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800afae:	2100      	movs	r1, #0
 800afb0:	4618      	mov	r0, r3
 800afb2:	f000 ffdf 	bl	800bf74 <hci_send_req>
 800afb6:	4603      	mov	r3, r0
 800afb8:	2b00      	cmp	r3, #0
 800afba:	da01      	bge.n	800afc0 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 800afbc:	23ff      	movs	r3, #255	; 0xff
 800afbe:	e021      	b.n	800b004 <aci_gap_init+0x10c>
  if (resp.Status) 
 800afc0:	f107 0308 	add.w	r3, r7, #8
 800afc4:	781b      	ldrb	r3, [r3, #0]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d003      	beq.n	800afd2 <aci_gap_init+0xda>
  {
    return resp.Status;
 800afca:	f107 0308 	add.w	r3, r7, #8
 800afce:	781b      	ldrb	r3, [r3, #0]
 800afd0:	e018      	b.n	800b004 <aci_gap_init+0x10c>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800afd2:	f107 0308 	add.w	r3, r7, #8
 800afd6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800afda:	b29a      	uxth	r2, r3
 800afdc:	463b      	mov	r3, r7
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 800afe2:	f107 0308 	add.w	r3, r7, #8
 800afe6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800afea:	b29a      	uxth	r2, r3
 800afec:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800aff0:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 800aff2:	f107 0308 	add.w	r3, r7, #8
 800aff6:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800affa:	b29a      	uxth	r2, r3
 800affc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800b000:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800b002:	2300      	movs	r3, #0
}
 800b004:	4618      	mov	r0, r3
 800b006:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd90      	pop	{r4, r7, pc}

0800b00e <aci_gap_configure_whitelist>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_configure_whitelist(void)
{
 800b00e:	b580      	push	{r7, lr}
 800b010:	b088      	sub	sp, #32
 800b012:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b014:	2300      	movs	r3, #0
 800b016:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b018:	f107 0308 	add.w	r3, r7, #8
 800b01c:	2218      	movs	r2, #24
 800b01e:	2100      	movs	r1, #0
 800b020:	4618      	mov	r0, r3
 800b022:	f000 fdec 	bl	800bbfe <Osal_MemSet>
  rq.ogf = 0x3f;
 800b026:	233f      	movs	r3, #63	; 0x3f
 800b028:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800b02a:	2392      	movs	r3, #146	; 0x92
 800b02c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b02e:	1dfb      	adds	r3, r7, #7
 800b030:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b032:	2301      	movs	r3, #1
 800b034:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800b036:	f107 0308 	add.w	r3, r7, #8
 800b03a:	2100      	movs	r1, #0
 800b03c:	4618      	mov	r0, r3
 800b03e:	f000 ff99 	bl	800bf74 <hci_send_req>
 800b042:	4603      	mov	r3, r0
 800b044:	2b00      	cmp	r3, #0
 800b046:	da01      	bge.n	800b04c <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800b048:	23ff      	movs	r3, #255	; 0xff
 800b04a:	e005      	b.n	800b058 <aci_gap_configure_whitelist+0x4a>
  if (status) 
 800b04c:	79fb      	ldrb	r3, [r7, #7]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d001      	beq.n	800b056 <aci_gap_configure_whitelist+0x48>
  {
    return status;
 800b052:	79fb      	ldrb	r3, [r7, #7]
 800b054:	e000      	b.n	800b058 <aci_gap_configure_whitelist+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800b056:	2300      	movs	r3, #0
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3720      	adds	r7, #32
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}

0800b060 <aci_gap_start_general_discovery_proc>:

tBleStatus aci_gap_start_general_discovery_proc(uint16_t LE_Scan_Interval,
                                                uint16_t LE_Scan_Window,
                                                uint8_t Own_Address_Type,
                                                uint8_t Filter_Duplicates)
{
 800b060:	b5b0      	push	{r4, r5, r7, lr}
 800b062:	b0cc      	sub	sp, #304	; 0x130
 800b064:	af00      	add	r7, sp, #0
 800b066:	4605      	mov	r5, r0
 800b068:	460c      	mov	r4, r1
 800b06a:	4610      	mov	r0, r2
 800b06c:	4619      	mov	r1, r3
 800b06e:	1dbb      	adds	r3, r7, #6
 800b070:	462a      	mov	r2, r5
 800b072:	801a      	strh	r2, [r3, #0]
 800b074:	1d3b      	adds	r3, r7, #4
 800b076:	4622      	mov	r2, r4
 800b078:	801a      	strh	r2, [r3, #0]
 800b07a:	1cfb      	adds	r3, r7, #3
 800b07c:	4602      	mov	r2, r0
 800b07e:	701a      	strb	r2, [r3, #0]
 800b080:	1cbb      	adds	r3, r7, #2
 800b082:	460a      	mov	r2, r1
 800b084:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_start_general_discovery_proc_cp0 *cp0 = (aci_gap_start_general_discovery_proc_cp0*)(cmd_buffer);
 800b086:	f107 0310 	add.w	r3, r7, #16
 800b08a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b08e:	f107 030f 	add.w	r3, r7, #15
 800b092:	2200      	movs	r2, #0
 800b094:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b096:	2300      	movs	r3, #0
 800b098:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Interval = htob(LE_Scan_Interval, 2);
 800b09c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b0a0:	1dba      	adds	r2, r7, #6
 800b0a2:	8812      	ldrh	r2, [r2, #0]
 800b0a4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b0a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b0aa:	3302      	adds	r3, #2
 800b0ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Window = htob(LE_Scan_Window, 2);
 800b0b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b0b4:	1d3a      	adds	r2, r7, #4
 800b0b6:	8812      	ldrh	r2, [r2, #0]
 800b0b8:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800b0ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b0be:	3302      	adds	r3, #2
 800b0c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800b0c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b0c8:	1cfa      	adds	r2, r7, #3
 800b0ca:	7812      	ldrb	r2, [r2, #0]
 800b0cc:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800b0ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Filter_Duplicates = htob(Filter_Duplicates, 1);
 800b0d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b0dc:	1cba      	adds	r2, r7, #2
 800b0de:	7812      	ldrb	r2, [r2, #0]
 800b0e0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800b0e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b0e6:	3301      	adds	r3, #1
 800b0e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b0ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b0f0:	2218      	movs	r2, #24
 800b0f2:	2100      	movs	r1, #0
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f000 fd82 	bl	800bbfe <Osal_MemSet>
  rq.ogf = 0x3f;
 800b0fa:	233f      	movs	r3, #63	; 0x3f
 800b0fc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x097;
 800b100:	2397      	movs	r3, #151	; 0x97
 800b102:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800b106:	230f      	movs	r3, #15
 800b108:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800b10c:	f107 0310 	add.w	r3, r7, #16
 800b110:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b114:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b118:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b11c:	f107 030f 	add.w	r3, r7, #15
 800b120:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b124:	2301      	movs	r3, #1
 800b126:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b12a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b12e:	2100      	movs	r1, #0
 800b130:	4618      	mov	r0, r3
 800b132:	f000 ff1f 	bl	800bf74 <hci_send_req>
 800b136:	4603      	mov	r3, r0
 800b138:	2b00      	cmp	r3, #0
 800b13a:	da01      	bge.n	800b140 <aci_gap_start_general_discovery_proc+0xe0>
    return BLE_STATUS_TIMEOUT;
 800b13c:	23ff      	movs	r3, #255	; 0xff
 800b13e:	e009      	b.n	800b154 <aci_gap_start_general_discovery_proc+0xf4>
  if (status) 
 800b140:	f107 030f 	add.w	r3, r7, #15
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d003      	beq.n	800b152 <aci_gap_start_general_discovery_proc+0xf2>
  {
    return status;
 800b14a:	f107 030f 	add.w	r3, r7, #15
 800b14e:	781b      	ldrb	r3, [r3, #0]
 800b150:	e000      	b.n	800b154 <aci_gap_start_general_discovery_proc+0xf4>
  }
  return BLE_STATUS_SUCCESS;
 800b152:	2300      	movs	r3, #0
}
 800b154:	4618      	mov	r0, r3
 800b156:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bdb0      	pop	{r4, r5, r7, pc}

0800b15e <aci_gap_create_connection>:
                                     uint16_t Conn_Interval_Max,
                                     uint16_t Conn_Latency,
                                     uint16_t Supervision_Timeout,
                                     uint16_t Minimum_CE_Length,
                                     uint16_t Maximum_CE_Length)
{
 800b15e:	b590      	push	{r4, r7, lr}
 800b160:	b0cf      	sub	sp, #316	; 0x13c
 800b162:	af00      	add	r7, sp, #0
 800b164:	4604      	mov	r4, r0
 800b166:	4608      	mov	r0, r1
 800b168:	4611      	mov	r1, r2
 800b16a:	1d3a      	adds	r2, r7, #4
 800b16c:	6013      	str	r3, [r2, #0]
 800b16e:	f107 030e 	add.w	r3, r7, #14
 800b172:	4622      	mov	r2, r4
 800b174:	801a      	strh	r2, [r3, #0]
 800b176:	f107 030c 	add.w	r3, r7, #12
 800b17a:	4602      	mov	r2, r0
 800b17c:	801a      	strh	r2, [r3, #0]
 800b17e:	f107 030b 	add.w	r3, r7, #11
 800b182:	460a      	mov	r2, r1
 800b184:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_create_connection_cp0 *cp0 = (aci_gap_create_connection_cp0*)(cmd_buffer);
 800b186:	f107 0318 	add.w	r3, r7, #24
 800b18a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 800b18e:	f107 0317 	add.w	r3, r7, #23
 800b192:	2200      	movs	r2, #0
 800b194:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b196:	2300      	movs	r3, #0
 800b198:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->LE_Scan_Interval = htob(LE_Scan_Interval, 2);
 800b19c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b1a0:	f107 020e 	add.w	r2, r7, #14
 800b1a4:	8812      	ldrh	r2, [r2, #0]
 800b1a6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b1a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b1ac:	3302      	adds	r3, #2
 800b1ae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->LE_Scan_Window = htob(LE_Scan_Window, 2);
 800b1b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b1b6:	f107 020c 	add.w	r2, r7, #12
 800b1ba:	8812      	ldrh	r2, [r2, #0]
 800b1bc:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800b1be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b1c2:	3302      	adds	r3, #2
 800b1c4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Peer_Address_Type = htob(Peer_Address_Type, 1);
 800b1c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b1cc:	f107 020b 	add.w	r2, r7, #11
 800b1d0:	7812      	ldrb	r2, [r2, #0]
 800b1d2:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800b1d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b1d8:	3301      	adds	r3, #1
 800b1da:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy((void *) &cp0->Peer_Address, (const void *) Peer_Address, 6);
 800b1de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b1e2:	1d58      	adds	r0, r3, #5
 800b1e4:	1d3b      	adds	r3, r7, #4
 800b1e6:	2206      	movs	r2, #6
 800b1e8:	6819      	ldr	r1, [r3, #0]
 800b1ea:	f000 fcf8 	bl	800bbde <Osal_MemCpy>
  index_input += 6;
 800b1ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b1f2:	3306      	adds	r3, #6
 800b1f4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800b1f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b1fc:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800b200:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800b202:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b206:	3301      	adds	r3, #1
 800b208:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Interval_Min = htob(Conn_Interval_Min, 2);
 800b20c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b210:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 800b214:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 800b216:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b21a:	3302      	adds	r3, #2
 800b21c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Interval_Max = htob(Conn_Interval_Max, 2);
 800b220:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b224:	f8b7 2150 	ldrh.w	r2, [r7, #336]	; 0x150
 800b228:	81da      	strh	r2, [r3, #14]
  index_input += 2;
 800b22a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b22e:	3302      	adds	r3, #2
 800b230:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Latency = htob(Conn_Latency, 2);
 800b234:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b238:	f8b7 2154 	ldrh.w	r2, [r7, #340]	; 0x154
 800b23c:	821a      	strh	r2, [r3, #16]
  index_input += 2;
 800b23e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b242:	3302      	adds	r3, #2
 800b244:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Supervision_Timeout = htob(Supervision_Timeout, 2);
 800b248:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b24c:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 800b250:	825a      	strh	r2, [r3, #18]
  index_input += 2;
 800b252:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b256:	3302      	adds	r3, #2
 800b258:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Minimum_CE_Length = htob(Minimum_CE_Length, 2);
 800b25c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b260:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800b264:	829a      	strh	r2, [r3, #20]
  index_input += 2;
 800b266:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b26a:	3302      	adds	r3, #2
 800b26c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Maximum_CE_Length = htob(Maximum_CE_Length, 2);
 800b270:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b274:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800b278:	82da      	strh	r2, [r3, #22]
  index_input += 2;
 800b27a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b27e:	3302      	adds	r3, #2
 800b280:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b284:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b288:	2218      	movs	r2, #24
 800b28a:	2100      	movs	r1, #0
 800b28c:	4618      	mov	r0, r3
 800b28e:	f000 fcb6 	bl	800bbfe <Osal_MemSet>
  rq.ogf = 0x3f;
 800b292:	233f      	movs	r3, #63	; 0x3f
 800b294:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x09c;
 800b298:	239c      	movs	r3, #156	; 0x9c
 800b29a:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 800b29e:	230f      	movs	r3, #15
 800b2a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 800b2a4:	f107 0318 	add.w	r3, r7, #24
 800b2a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800b2ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b2b0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 800b2b4:	f107 0317 	add.w	r3, r7, #23
 800b2b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 800b2bc:	2301      	movs	r3, #1
 800b2be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800b2c2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b2c6:	2100      	movs	r1, #0
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f000 fe53 	bl	800bf74 <hci_send_req>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	da01      	bge.n	800b2d8 <aci_gap_create_connection+0x17a>
    return BLE_STATUS_TIMEOUT;
 800b2d4:	23ff      	movs	r3, #255	; 0xff
 800b2d6:	e009      	b.n	800b2ec <aci_gap_create_connection+0x18e>
  if (status) 
 800b2d8:	f107 0317 	add.w	r3, r7, #23
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d003      	beq.n	800b2ea <aci_gap_create_connection+0x18c>
  {
    return status;
 800b2e2:	f107 0317 	add.w	r3, r7, #23
 800b2e6:	781b      	ldrb	r3, [r3, #0]
 800b2e8:	e000      	b.n	800b2ec <aci_gap_create_connection+0x18e>
  }
  return BLE_STATUS_SUCCESS;
 800b2ea:	2300      	movs	r3, #0
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd90      	pop	{r4, r7, pc}

0800b2f6 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init(void)
{
 800b2f6:	b580      	push	{r7, lr}
 800b2f8:	b088      	sub	sp, #32
 800b2fa:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b300:	f107 0308 	add.w	r3, r7, #8
 800b304:	2218      	movs	r2, #24
 800b306:	2100      	movs	r1, #0
 800b308:	4618      	mov	r0, r3
 800b30a:	f000 fc78 	bl	800bbfe <Osal_MemSet>
  rq.ogf = 0x3f;
 800b30e:	233f      	movs	r3, #63	; 0x3f
 800b310:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800b312:	f240 1301 	movw	r3, #257	; 0x101
 800b316:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b318:	1dfb      	adds	r3, r7, #7
 800b31a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b31c:	2301      	movs	r3, #1
 800b31e:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800b320:	f107 0308 	add.w	r3, r7, #8
 800b324:	2100      	movs	r1, #0
 800b326:	4618      	mov	r0, r3
 800b328:	f000 fe24 	bl	800bf74 <hci_send_req>
 800b32c:	4603      	mov	r3, r0
 800b32e:	2b00      	cmp	r3, #0
 800b330:	da01      	bge.n	800b336 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800b332:	23ff      	movs	r3, #255	; 0xff
 800b334:	e005      	b.n	800b342 <aci_gatt_init+0x4c>
  if (status) 
 800b336:	79fb      	ldrb	r3, [r7, #7]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d001      	beq.n	800b340 <aci_gatt_init+0x4a>
  {
    return status;
 800b33c:	79fb      	ldrb	r3, [r7, #7]
 800b33e:	e000      	b.n	800b342 <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 800b340:	2300      	movs	r3, #0
}
 800b342:	4618      	mov	r0, r3
 800b344:	3720      	adds	r7, #32
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}

0800b34a <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 800b34a:	b5b0      	push	{r4, r5, r7, lr}
 800b34c:	b0cc      	sub	sp, #304	; 0x130
 800b34e:	af00      	add	r7, sp, #0
 800b350:	4605      	mov	r5, r0
 800b352:	460c      	mov	r4, r1
 800b354:	4610      	mov	r0, r2
 800b356:	4619      	mov	r1, r3
 800b358:	1dbb      	adds	r3, r7, #6
 800b35a:	462a      	mov	r2, r5
 800b35c:	801a      	strh	r2, [r3, #0]
 800b35e:	1d3b      	adds	r3, r7, #4
 800b360:	4622      	mov	r2, r4
 800b362:	801a      	strh	r2, [r3, #0]
 800b364:	1cfb      	adds	r3, r7, #3
 800b366:	4602      	mov	r2, r0
 800b368:	701a      	strb	r2, [r3, #0]
 800b36a:	1cbb      	adds	r3, r7, #2
 800b36c:	460a      	mov	r2, r1
 800b36e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800b370:	f107 0310 	add.w	r3, r7, #16
 800b374:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b378:	f107 030f 	add.w	r3, r7, #15
 800b37c:	2200      	movs	r2, #0
 800b37e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b380:	2300      	movs	r3, #0
 800b382:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = htob(Service_Handle, 2);
 800b386:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b38a:	1dba      	adds	r2, r7, #6
 800b38c:	8812      	ldrh	r2, [r2, #0]
 800b38e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b390:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b394:	3302      	adds	r3, #2
 800b396:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = htob(Char_Handle, 2);
 800b39a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b39e:	1d3a      	adds	r2, r7, #4
 800b3a0:	8812      	ldrh	r2, [r2, #0]
 800b3a2:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800b3a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b3a8:	3302      	adds	r3, #2
 800b3aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = htob(Val_Offset, 1);
 800b3ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b3b2:	1cfa      	adds	r2, r7, #3
 800b3b4:	7812      	ldrb	r2, [r2, #0]
 800b3b6:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800b3b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b3bc:	3301      	adds	r3, #1
 800b3be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 800b3c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b3c6:	1cba      	adds	r2, r7, #2
 800b3c8:	7812      	ldrb	r2, [r2, #0]
 800b3ca:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800b3cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b3d0:	3301      	adds	r3, #1
 800b3d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 800b3d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b3da:	1d98      	adds	r0, r3, #6
 800b3dc:	1cbb      	adds	r3, r7, #2
 800b3de:	781b      	ldrb	r3, [r3, #0]
 800b3e0:	461a      	mov	r2, r3
 800b3e2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800b3e6:	f000 fbfa 	bl	800bbde <Osal_MemCpy>
  index_input += Char_Value_Length;
 800b3ea:	1cbb      	adds	r3, r7, #2
 800b3ec:	781b      	ldrb	r3, [r3, #0]
 800b3ee:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b3f2:	4413      	add	r3, r2
 800b3f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b3f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b3fc:	2218      	movs	r2, #24
 800b3fe:	2100      	movs	r1, #0
 800b400:	4618      	mov	r0, r3
 800b402:	f000 fbfc 	bl	800bbfe <Osal_MemSet>
  rq.ogf = 0x3f;
 800b406:	233f      	movs	r3, #63	; 0x3f
 800b408:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800b40c:	f44f 7383 	mov.w	r3, #262	; 0x106
 800b410:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b414:	f107 0310 	add.w	r3, r7, #16
 800b418:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b41c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b420:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b424:	f107 030f 	add.w	r3, r7, #15
 800b428:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b42c:	2301      	movs	r3, #1
 800b42e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b432:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b436:	2100      	movs	r1, #0
 800b438:	4618      	mov	r0, r3
 800b43a:	f000 fd9b 	bl	800bf74 <hci_send_req>
 800b43e:	4603      	mov	r3, r0
 800b440:	2b00      	cmp	r3, #0
 800b442:	da01      	bge.n	800b448 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 800b444:	23ff      	movs	r3, #255	; 0xff
 800b446:	e009      	b.n	800b45c <aci_gatt_update_char_value+0x112>
  if (status) 
 800b448:	f107 030f 	add.w	r3, r7, #15
 800b44c:	781b      	ldrb	r3, [r3, #0]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d003      	beq.n	800b45a <aci_gatt_update_char_value+0x110>
  {
    return status;
 800b452:	f107 030f 	add.w	r3, r7, #15
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	e000      	b.n	800b45c <aci_gatt_update_char_value+0x112>
  }
  return BLE_STATUS_SUCCESS;
 800b45a:	2300      	movs	r3, #0
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b462:	46bd      	mov	sp, r7
 800b464:	bdb0      	pop	{r4, r5, r7, pc}

0800b466 <aci_gatt_disc_all_primary_services>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gatt_disc_all_primary_services(uint16_t Connection_Handle)
{
 800b466:	b580      	push	{r7, lr}
 800b468:	b0cc      	sub	sp, #304	; 0x130
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	4602      	mov	r2, r0
 800b46e:	1dbb      	adds	r3, r7, #6
 800b470:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_primary_services_cp0 *cp0 = (aci_gatt_disc_all_primary_services_cp0*)(cmd_buffer);
 800b472:	f107 0310 	add.w	r3, r7, #16
 800b476:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b47a:	f107 030f 	add.w	r3, r7, #15
 800b47e:	2200      	movs	r2, #0
 800b480:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b482:	2300      	movs	r3, #0
 800b484:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800b488:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b48c:	1dba      	adds	r2, r7, #6
 800b48e:	8812      	ldrh	r2, [r2, #0]
 800b490:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b492:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b496:	3302      	adds	r3, #2
 800b498:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b49c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b4a0:	2218      	movs	r2, #24
 800b4a2:	2100      	movs	r1, #0
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f000 fbaa 	bl	800bbfe <Osal_MemSet>
  rq.ogf = 0x3f;
 800b4aa:	233f      	movs	r3, #63	; 0x3f
 800b4ac:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x112;
 800b4b0:	f44f 7389 	mov.w	r3, #274	; 0x112
 800b4b4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800b4b8:	230f      	movs	r3, #15
 800b4ba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800b4be:	f107 0310 	add.w	r3, r7, #16
 800b4c2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b4c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b4ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b4ce:	f107 030f 	add.w	r3, r7, #15
 800b4d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b4dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b4e0:	2100      	movs	r1, #0
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f000 fd46 	bl	800bf74 <hci_send_req>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	da01      	bge.n	800b4f2 <aci_gatt_disc_all_primary_services+0x8c>
    return BLE_STATUS_TIMEOUT;
 800b4ee:	23ff      	movs	r3, #255	; 0xff
 800b4f0:	e009      	b.n	800b506 <aci_gatt_disc_all_primary_services+0xa0>
  if (status) 
 800b4f2:	f107 030f 	add.w	r3, r7, #15
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d003      	beq.n	800b504 <aci_gatt_disc_all_primary_services+0x9e>
  {
    return status;
 800b4fc:	f107 030f 	add.w	r3, r7, #15
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	e000      	b.n	800b506 <aci_gatt_disc_all_primary_services+0xa0>
  }
  return BLE_STATUS_SUCCESS;
 800b504:	2300      	movs	r3, #0
}
 800b506:	4618      	mov	r0, r3
 800b508:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}

0800b510 <aci_gatt_disc_all_char_of_service>:
}

tBleStatus aci_gatt_disc_all_char_of_service(uint16_t Connection_Handle,
                                             uint16_t Start_Handle,
                                             uint16_t End_Handle)
{
 800b510:	b590      	push	{r4, r7, lr}
 800b512:	b0cd      	sub	sp, #308	; 0x134
 800b514:	af00      	add	r7, sp, #0
 800b516:	4604      	mov	r4, r0
 800b518:	4608      	mov	r0, r1
 800b51a:	4611      	mov	r1, r2
 800b51c:	1dbb      	adds	r3, r7, #6
 800b51e:	4622      	mov	r2, r4
 800b520:	801a      	strh	r2, [r3, #0]
 800b522:	1d3b      	adds	r3, r7, #4
 800b524:	4602      	mov	r2, r0
 800b526:	801a      	strh	r2, [r3, #0]
 800b528:	1cbb      	adds	r3, r7, #2
 800b52a:	460a      	mov	r2, r1
 800b52c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_of_service_cp0 *cp0 = (aci_gatt_disc_all_char_of_service_cp0*)(cmd_buffer);
 800b52e:	f107 0310 	add.w	r3, r7, #16
 800b532:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b536:	f107 030f 	add.w	r3, r7, #15
 800b53a:	2200      	movs	r2, #0
 800b53c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b53e:	2300      	movs	r3, #0
 800b540:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800b544:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b548:	1dba      	adds	r2, r7, #6
 800b54a:	8812      	ldrh	r2, [r2, #0]
 800b54c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b54e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b552:	3302      	adds	r3, #2
 800b554:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Start_Handle = htob(Start_Handle, 2);
 800b558:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b55c:	1d3a      	adds	r2, r7, #4
 800b55e:	8812      	ldrh	r2, [r2, #0]
 800b560:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800b562:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b566:	3302      	adds	r3, #2
 800b568:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = htob(End_Handle, 2);
 800b56c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b570:	1cba      	adds	r2, r7, #2
 800b572:	8812      	ldrh	r2, [r2, #0]
 800b574:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800b576:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b57a:	3302      	adds	r3, #2
 800b57c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b580:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b584:	2218      	movs	r2, #24
 800b586:	2100      	movs	r1, #0
 800b588:	4618      	mov	r0, r3
 800b58a:	f000 fb38 	bl	800bbfe <Osal_MemSet>
  rq.ogf = 0x3f;
 800b58e:	233f      	movs	r3, #63	; 0x3f
 800b590:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x115;
 800b594:	f240 1315 	movw	r3, #277	; 0x115
 800b598:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800b59c:	230f      	movs	r3, #15
 800b59e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800b5a2:	f107 0310 	add.w	r3, r7, #16
 800b5a6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b5aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b5ae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b5b2:	f107 030f 	add.w	r3, r7, #15
 800b5b6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b5c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b5c4:	2100      	movs	r1, #0
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f000 fcd4 	bl	800bf74 <hci_send_req>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	da01      	bge.n	800b5d6 <aci_gatt_disc_all_char_of_service+0xc6>
    return BLE_STATUS_TIMEOUT;
 800b5d2:	23ff      	movs	r3, #255	; 0xff
 800b5d4:	e009      	b.n	800b5ea <aci_gatt_disc_all_char_of_service+0xda>
  if (status) 
 800b5d6:	f107 030f 	add.w	r3, r7, #15
 800b5da:	781b      	ldrb	r3, [r3, #0]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d003      	beq.n	800b5e8 <aci_gatt_disc_all_char_of_service+0xd8>
  {
    return status;
 800b5e0:	f107 030f 	add.w	r3, r7, #15
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	e000      	b.n	800b5ea <aci_gatt_disc_all_char_of_service+0xda>
  }
  return BLE_STATUS_SUCCESS;
 800b5e8:	2300      	movs	r3, #0
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd90      	pop	{r4, r7, pc}

0800b5f4 <aci_gatt_disc_all_char_desc>:
}

tBleStatus aci_gatt_disc_all_char_desc(uint16_t Connection_Handle,
                                       uint16_t Char_Handle,
                                       uint16_t End_Handle)
{
 800b5f4:	b590      	push	{r4, r7, lr}
 800b5f6:	b0cd      	sub	sp, #308	; 0x134
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	4604      	mov	r4, r0
 800b5fc:	4608      	mov	r0, r1
 800b5fe:	4611      	mov	r1, r2
 800b600:	1dbb      	adds	r3, r7, #6
 800b602:	4622      	mov	r2, r4
 800b604:	801a      	strh	r2, [r3, #0]
 800b606:	1d3b      	adds	r3, r7, #4
 800b608:	4602      	mov	r2, r0
 800b60a:	801a      	strh	r2, [r3, #0]
 800b60c:	1cbb      	adds	r3, r7, #2
 800b60e:	460a      	mov	r2, r1
 800b610:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_desc_cp0 *cp0 = (aci_gatt_disc_all_char_desc_cp0*)(cmd_buffer);
 800b612:	f107 0310 	add.w	r3, r7, #16
 800b616:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b61a:	f107 030f 	add.w	r3, r7, #15
 800b61e:	2200      	movs	r2, #0
 800b620:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b622:	2300      	movs	r3, #0
 800b624:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800b628:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b62c:	1dba      	adds	r2, r7, #6
 800b62e:	8812      	ldrh	r2, [r2, #0]
 800b630:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b632:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b636:	3302      	adds	r3, #2
 800b638:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = htob(Char_Handle, 2);
 800b63c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b640:	1d3a      	adds	r2, r7, #4
 800b642:	8812      	ldrh	r2, [r2, #0]
 800b644:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800b646:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b64a:	3302      	adds	r3, #2
 800b64c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = htob(End_Handle, 2);
 800b650:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b654:	1cba      	adds	r2, r7, #2
 800b656:	8812      	ldrh	r2, [r2, #0]
 800b658:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800b65a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b65e:	3302      	adds	r3, #2
 800b660:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b664:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b668:	2218      	movs	r2, #24
 800b66a:	2100      	movs	r1, #0
 800b66c:	4618      	mov	r0, r3
 800b66e:	f000 fac6 	bl	800bbfe <Osal_MemSet>
  rq.ogf = 0x3f;
 800b672:	233f      	movs	r3, #63	; 0x3f
 800b674:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x117;
 800b678:	f240 1317 	movw	r3, #279	; 0x117
 800b67c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800b680:	230f      	movs	r3, #15
 800b682:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800b686:	f107 0310 	add.w	r3, r7, #16
 800b68a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b68e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b692:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b696:	f107 030f 	add.w	r3, r7, #15
 800b69a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b69e:	2301      	movs	r3, #1
 800b6a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b6a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b6a8:	2100      	movs	r1, #0
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f000 fc62 	bl	800bf74 <hci_send_req>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	da01      	bge.n	800b6ba <aci_gatt_disc_all_char_desc+0xc6>
    return BLE_STATUS_TIMEOUT;
 800b6b6:	23ff      	movs	r3, #255	; 0xff
 800b6b8:	e009      	b.n	800b6ce <aci_gatt_disc_all_char_desc+0xda>
  if (status) 
 800b6ba:	f107 030f 	add.w	r3, r7, #15
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d003      	beq.n	800b6cc <aci_gatt_disc_all_char_desc+0xd8>
  {
    return status;
 800b6c4:	f107 030f 	add.w	r3, r7, #15
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	e000      	b.n	800b6ce <aci_gatt_disc_all_char_desc+0xda>
  }
  return BLE_STATUS_SUCCESS;
 800b6cc:	2300      	movs	r3, #0
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd90      	pop	{r4, r7, pc}

0800b6d8 <aci_gatt_write_char_desc>:

tBleStatus aci_gatt_write_char_desc(uint16_t Connection_Handle,
                                    uint16_t Attr_Handle,
                                    uint8_t Attribute_Val_Length,
                                    uint8_t Attribute_Val[])
{
 800b6d8:	b590      	push	{r4, r7, lr}
 800b6da:	b0cf      	sub	sp, #316	; 0x13c
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	4604      	mov	r4, r0
 800b6e0:	4608      	mov	r0, r1
 800b6e2:	4611      	mov	r1, r2
 800b6e4:	1d3a      	adds	r2, r7, #4
 800b6e6:	6013      	str	r3, [r2, #0]
 800b6e8:	f107 030e 	add.w	r3, r7, #14
 800b6ec:	4622      	mov	r2, r4
 800b6ee:	801a      	strh	r2, [r3, #0]
 800b6f0:	f107 030c 	add.w	r3, r7, #12
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	801a      	strh	r2, [r3, #0]
 800b6f8:	f107 030b 	add.w	r3, r7, #11
 800b6fc:	460a      	mov	r2, r1
 800b6fe:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_char_desc_cp0 *cp0 = (aci_gatt_write_char_desc_cp0*)(cmd_buffer);
 800b700:	f107 0318 	add.w	r3, r7, #24
 800b704:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 800b708:	f107 0317 	add.w	r3, r7, #23
 800b70c:	2200      	movs	r2, #0
 800b70e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b710:	2300      	movs	r3, #0
 800b712:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800b716:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b71a:	f107 020e 	add.w	r2, r7, #14
 800b71e:	8812      	ldrh	r2, [r2, #0]
 800b720:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b722:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b726:	3302      	adds	r3, #2
 800b728:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attr_Handle = htob(Attr_Handle, 2);
 800b72c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b730:	f107 020c 	add.w	r2, r7, #12
 800b734:	8812      	ldrh	r2, [r2, #0]
 800b736:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800b738:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b73c:	3302      	adds	r3, #2
 800b73e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attribute_Val_Length = htob(Attribute_Val_Length, 1);
 800b742:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b746:	f107 020b 	add.w	r2, r7, #11
 800b74a:	7812      	ldrb	r2, [r2, #0]
 800b74c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800b74e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b752:	3301      	adds	r3, #1
 800b754:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy((void *) &cp0->Attribute_Val, (const void *) Attribute_Val, Attribute_Val_Length);
 800b758:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b75c:	1d58      	adds	r0, r3, #5
 800b75e:	f107 030b 	add.w	r3, r7, #11
 800b762:	781a      	ldrb	r2, [r3, #0]
 800b764:	1d3b      	adds	r3, r7, #4
 800b766:	6819      	ldr	r1, [r3, #0]
 800b768:	f000 fa39 	bl	800bbde <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 800b76c:	f107 030b 	add.w	r3, r7, #11
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800b776:	4413      	add	r3, r2
 800b778:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b77c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b780:	2218      	movs	r2, #24
 800b782:	2100      	movs	r1, #0
 800b784:	4618      	mov	r0, r3
 800b786:	f000 fa3a 	bl	800bbfe <Osal_MemSet>
  rq.ogf = 0x3f;
 800b78a:	233f      	movs	r3, #63	; 0x3f
 800b78c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x121;
 800b790:	f240 1321 	movw	r3, #289	; 0x121
 800b794:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 800b798:	230f      	movs	r3, #15
 800b79a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 800b79e:	f107 0318 	add.w	r3, r7, #24
 800b7a2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800b7a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b7aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 800b7ae:	f107 0317 	add.w	r3, r7, #23
 800b7b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800b7bc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b7c0:	2100      	movs	r1, #0
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f000 fbd6 	bl	800bf74 <hci_send_req>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	da01      	bge.n	800b7d2 <aci_gatt_write_char_desc+0xfa>
    return BLE_STATUS_TIMEOUT;
 800b7ce:	23ff      	movs	r3, #255	; 0xff
 800b7d0:	e009      	b.n	800b7e6 <aci_gatt_write_char_desc+0x10e>
  if (status) 
 800b7d2:	f107 0317 	add.w	r3, r7, #23
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d003      	beq.n	800b7e4 <aci_gatt_write_char_desc+0x10c>
  {
    return status;
 800b7dc:	f107 0317 	add.w	r3, r7, #23
 800b7e0:	781b      	ldrb	r3, [r3, #0]
 800b7e2:	e000      	b.n	800b7e6 <aci_gatt_write_char_desc+0x10e>
  }
  return BLE_STATUS_SUCCESS;
 800b7e4:	2300      	movs	r3, #0
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd90      	pop	{r4, r7, pc}

0800b7f0 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b0cc      	sub	sp, #304	; 0x130
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	463b      	mov	r3, r7
 800b7f8:	601a      	str	r2, [r3, #0]
 800b7fa:	1dfb      	adds	r3, r7, #7
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	701a      	strb	r2, [r3, #0]
 800b800:	1dbb      	adds	r3, r7, #6
 800b802:	460a      	mov	r2, r1
 800b804:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800b806:	f107 0310 	add.w	r3, r7, #16
 800b80a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b80e:	f107 030f 	add.w	r3, r7, #15
 800b812:	2200      	movs	r2, #0
 800b814:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b816:	2300      	movs	r3, #0
 800b818:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = htob(Offset, 1);
 800b81c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b820:	1dfa      	adds	r2, r7, #7
 800b822:	7812      	ldrb	r2, [r2, #0]
 800b824:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b826:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b82a:	3301      	adds	r3, #1
 800b82c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = htob(Length, 1);
 800b830:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b834:	1dba      	adds	r2, r7, #6
 800b836:	7812      	ldrb	r2, [r2, #0]
 800b838:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b83a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b83e:	3301      	adds	r3, #1
 800b840:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->Value, (const void *) Value, Length);
 800b844:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b848:	1c98      	adds	r0, r3, #2
 800b84a:	1dbb      	adds	r3, r7, #6
 800b84c:	781a      	ldrb	r2, [r3, #0]
 800b84e:	463b      	mov	r3, r7
 800b850:	6819      	ldr	r1, [r3, #0]
 800b852:	f000 f9c4 	bl	800bbde <Osal_MemCpy>
  index_input += Length;
 800b856:	1dbb      	adds	r3, r7, #6
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b85e:	4413      	add	r3, r2
 800b860:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b864:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b868:	2218      	movs	r2, #24
 800b86a:	2100      	movs	r1, #0
 800b86c:	4618      	mov	r0, r3
 800b86e:	f000 f9c6 	bl	800bbfe <Osal_MemSet>
  rq.ogf = 0x3f;
 800b872:	233f      	movs	r3, #63	; 0x3f
 800b874:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800b878:	230c      	movs	r3, #12
 800b87a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b87e:	f107 0310 	add.w	r3, r7, #16
 800b882:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b886:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b88a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b88e:	f107 030f 	add.w	r3, r7, #15
 800b892:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b896:	2301      	movs	r3, #1
 800b898:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b89c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b8a0:	2100      	movs	r1, #0
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f000 fb66 	bl	800bf74 <hci_send_req>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	da01      	bge.n	800b8b2 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 800b8ae:	23ff      	movs	r3, #255	; 0xff
 800b8b0:	e009      	b.n	800b8c6 <aci_hal_write_config_data+0xd6>
  if (status) 
 800b8b2:	f107 030f 	add.w	r3, r7, #15
 800b8b6:	781b      	ldrb	r3, [r3, #0]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d003      	beq.n	800b8c4 <aci_hal_write_config_data+0xd4>
  {
    return status;
 800b8bc:	f107 030f 	add.w	r3, r7, #15
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	e000      	b.n	800b8c6 <aci_hal_write_config_data+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 800b8c4:	2300      	movs	r3, #0
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}

0800b8d0 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b0cc      	sub	sp, #304	; 0x130
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	4602      	mov	r2, r0
 800b8d8:	1dfb      	adds	r3, r7, #7
 800b8da:	701a      	strb	r2, [r3, #0]
 800b8dc:	1dbb      	adds	r3, r7, #6
 800b8de:	460a      	mov	r2, r1
 800b8e0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800b8e2:	f107 0310 	add.w	r3, r7, #16
 800b8e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b8ea:	f107 030f 	add.w	r3, r7, #15
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = htob(En_High_Power, 1);
 800b8f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b8fc:	1dfa      	adds	r2, r7, #7
 800b8fe:	7812      	ldrb	r2, [r2, #0]
 800b900:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b902:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b906:	3301      	adds	r3, #1
 800b908:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = htob(PA_Level, 1);
 800b90c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b910:	1dba      	adds	r2, r7, #6
 800b912:	7812      	ldrb	r2, [r2, #0]
 800b914:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b916:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b91a:	3301      	adds	r3, #1
 800b91c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b920:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b924:	2218      	movs	r2, #24
 800b926:	2100      	movs	r1, #0
 800b928:	4618      	mov	r0, r3
 800b92a:	f000 f968 	bl	800bbfe <Osal_MemSet>
  rq.ogf = 0x3f;
 800b92e:	233f      	movs	r3, #63	; 0x3f
 800b930:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800b934:	230f      	movs	r3, #15
 800b936:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b93a:	f107 0310 	add.w	r3, r7, #16
 800b93e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b942:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b946:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b94a:	f107 030f 	add.w	r3, r7, #15
 800b94e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b952:	2301      	movs	r3, #1
 800b954:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b958:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b95c:	2100      	movs	r1, #0
 800b95e:	4618      	mov	r0, r3
 800b960:	f000 fb08 	bl	800bf74 <hci_send_req>
 800b964:	4603      	mov	r3, r0
 800b966:	2b00      	cmp	r3, #0
 800b968:	da01      	bge.n	800b96e <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 800b96a:	23ff      	movs	r3, #255	; 0xff
 800b96c:	e009      	b.n	800b982 <aci_hal_set_tx_power_level+0xb2>
  if (status) 
 800b96e:	f107 030f 	add.w	r3, r7, #15
 800b972:	781b      	ldrb	r3, [r3, #0]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d003      	beq.n	800b980 <aci_hal_set_tx_power_level+0xb0>
  {
    return status;
 800b978:	f107 030f 	add.w	r3, r7, #15
 800b97c:	781b      	ldrb	r3, [r3, #0]
 800b97e:	e000      	b.n	800b982 <aci_hal_set_tx_power_level+0xb2>
  }
  return BLE_STATUS_SUCCESS;
 800b980:	2300      	movs	r3, #0
}
 800b982:	4618      	mov	r0, r3
 800b984:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}

0800b98c <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy((void *) Link_Connection_Handle, (const void *) resp.Link_Connection_Handle, 16);
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask(uint16_t Radio_Activity_Mask)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b0cc      	sub	sp, #304	; 0x130
 800b990:	af00      	add	r7, sp, #0
 800b992:	4602      	mov	r2, r0
 800b994:	1dbb      	adds	r3, r7, #6
 800b996:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800b998:	f107 0310 	add.w	r3, r7, #16
 800b99c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b9a0:	f107 030f 	add.w	r3, r7, #15
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = htob(Radio_Activity_Mask, 2);
 800b9ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b9b2:	1dba      	adds	r2, r7, #6
 800b9b4:	8812      	ldrh	r2, [r2, #0]
 800b9b6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b9b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b9bc:	3302      	adds	r3, #2
 800b9be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b9c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b9c6:	2218      	movs	r2, #24
 800b9c8:	2100      	movs	r1, #0
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f000 f917 	bl	800bbfe <Osal_MemSet>
  rq.ogf = 0x3f;
 800b9d0:	233f      	movs	r3, #63	; 0x3f
 800b9d2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800b9d6:	2318      	movs	r3, #24
 800b9d8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b9dc:	f107 0310 	add.w	r3, r7, #16
 800b9e0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b9e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b9e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b9ec:	f107 030f 	add.w	r3, r7, #15
 800b9f0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b9fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b9fe:	2100      	movs	r1, #0
 800ba00:	4618      	mov	r0, r3
 800ba02:	f000 fab7 	bl	800bf74 <hci_send_req>
 800ba06:	4603      	mov	r3, r0
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	da01      	bge.n	800ba10 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 800ba0c:	23ff      	movs	r3, #255	; 0xff
 800ba0e:	e009      	b.n	800ba24 <aci_hal_set_radio_activity_mask+0x98>
  if (status) 
 800ba10:	f107 030f 	add.w	r3, r7, #15
 800ba14:	781b      	ldrb	r3, [r3, #0]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d003      	beq.n	800ba22 <aci_hal_set_radio_activity_mask+0x96>
  {
    return status;
 800ba1a:	f107 030f 	add.w	r3, r7, #15
 800ba1e:	781b      	ldrb	r3, [r3, #0]
 800ba20:	e000      	b.n	800ba24 <aci_hal_set_radio_activity_mask+0x98>
  }
  return BLE_STATUS_SUCCESS;
 800ba22:	2300      	movs	r3, #0
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}

0800ba2e <hci_reset>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_reset(void)
{
 800ba2e:	b580      	push	{r7, lr}
 800ba30:	b088      	sub	sp, #32
 800ba32:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800ba34:	2300      	movs	r3, #0
 800ba36:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800ba38:	f107 0308 	add.w	r3, r7, #8
 800ba3c:	2218      	movs	r2, #24
 800ba3e:	2100      	movs	r1, #0
 800ba40:	4618      	mov	r0, r3
 800ba42:	f000 f8dc 	bl	800bbfe <Osal_MemSet>
  rq.ogf = 0x03;
 800ba46:	2303      	movs	r3, #3
 800ba48:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800ba4a:	2303      	movs	r3, #3
 800ba4c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ba4e:	1dfb      	adds	r3, r7, #7
 800ba50:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ba52:	2301      	movs	r3, #1
 800ba54:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800ba56:	f107 0308 	add.w	r3, r7, #8
 800ba5a:	2100      	movs	r1, #0
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f000 fa89 	bl	800bf74 <hci_send_req>
 800ba62:	4603      	mov	r3, r0
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	da01      	bge.n	800ba6c <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800ba68:	23ff      	movs	r3, #255	; 0xff
 800ba6a:	e005      	b.n	800ba78 <hci_reset+0x4a>
  if (status) 
 800ba6c:	79fb      	ldrb	r3, [r7, #7]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d001      	beq.n	800ba76 <hci_reset+0x48>
  {
    return status;
 800ba72:	79fb      	ldrb	r3, [r7, #7]
 800ba74:	e000      	b.n	800ba78 <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800ba76:	2300      	movs	r3, #0
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3720      	adds	r7, #32
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}

0800ba80 <aci_l2cap_connection_parameter_update_resp>:
                                                      uint16_t Timeout_Multiplier,
                                                      uint16_t Minimum_CE_Length,
                                                      uint16_t Maximum_CE_Length,
                                                      uint8_t Identifier,
                                                      uint8_t Accept)
{
 800ba80:	b5b0      	push	{r4, r5, r7, lr}
 800ba82:	b0cc      	sub	sp, #304	; 0x130
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	4605      	mov	r5, r0
 800ba88:	460c      	mov	r4, r1
 800ba8a:	4610      	mov	r0, r2
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	1dbb      	adds	r3, r7, #6
 800ba90:	462a      	mov	r2, r5
 800ba92:	801a      	strh	r2, [r3, #0]
 800ba94:	1d3b      	adds	r3, r7, #4
 800ba96:	4622      	mov	r2, r4
 800ba98:	801a      	strh	r2, [r3, #0]
 800ba9a:	1cbb      	adds	r3, r7, #2
 800ba9c:	4602      	mov	r2, r0
 800ba9e:	801a      	strh	r2, [r3, #0]
 800baa0:	463b      	mov	r3, r7
 800baa2:	460a      	mov	r2, r1
 800baa4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_resp_cp0 *cp0 = (aci_l2cap_connection_parameter_update_resp_cp0*)(cmd_buffer);
 800baa6:	f107 0310 	add.w	r3, r7, #16
 800baaa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800baae:	f107 030f 	add.w	r3, r7, #15
 800bab2:	2200      	movs	r2, #0
 800bab4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800bab6:	2300      	movs	r3, #0
 800bab8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800babc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bac0:	1dba      	adds	r2, r7, #6
 800bac2:	8812      	ldrh	r2, [r2, #0]
 800bac4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800bac6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800baca:	3302      	adds	r3, #2
 800bacc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = htob(Conn_Interval_Min, 2);
 800bad0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bad4:	1d3a      	adds	r2, r7, #4
 800bad6:	8812      	ldrh	r2, [r2, #0]
 800bad8:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800bada:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bade:	3302      	adds	r3, #2
 800bae0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = htob(Conn_Interval_Max, 2);
 800bae4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bae8:	1cba      	adds	r2, r7, #2
 800baea:	8812      	ldrh	r2, [r2, #0]
 800baec:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800baee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800baf2:	3302      	adds	r3, #2
 800baf4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Slave_latency = htob(Slave_latency, 2);
 800baf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bafc:	463a      	mov	r2, r7
 800bafe:	8812      	ldrh	r2, [r2, #0]
 800bb00:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 800bb02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bb06:	3302      	adds	r3, #2
 800bb08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = htob(Timeout_Multiplier, 2);
 800bb0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb10:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 800bb14:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 800bb16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bb1a:	3302      	adds	r3, #2
 800bb1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Minimum_CE_Length = htob(Minimum_CE_Length, 2);
 800bb20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb24:	f8b7 2144 	ldrh.w	r2, [r7, #324]	; 0x144
 800bb28:	815a      	strh	r2, [r3, #10]
  index_input += 2;
 800bb2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bb2e:	3302      	adds	r3, #2
 800bb30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Maximum_CE_Length = htob(Maximum_CE_Length, 2);
 800bb34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb38:	f8b7 2148 	ldrh.w	r2, [r7, #328]	; 0x148
 800bb3c:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 800bb3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bb42:	3302      	adds	r3, #2
 800bb44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identifier = htob(Identifier, 1);
 800bb48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb4c:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800bb50:	739a      	strb	r2, [r3, #14]
  index_input += 1;
 800bb52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bb56:	3301      	adds	r3, #1
 800bb58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Accept = htob(Accept, 1);
 800bb5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb60:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800bb64:	73da      	strb	r2, [r3, #15]
  index_input += 1;
 800bb66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bb6a:	3301      	adds	r3, #1
 800bb6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800bb70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bb74:	2218      	movs	r2, #24
 800bb76:	2100      	movs	r1, #0
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f000 f840 	bl	800bbfe <Osal_MemSet>
  rq.ogf = 0x3f;
 800bb7e:	233f      	movs	r3, #63	; 0x3f
 800bb80:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x182;
 800bb84:	f44f 73c1 	mov.w	r3, #386	; 0x182
 800bb88:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800bb8c:	f107 0310 	add.w	r3, r7, #16
 800bb90:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800bb94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bb98:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800bb9c:	f107 030f 	add.w	r3, r7, #15
 800bba0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800bba4:	2301      	movs	r3, #1
 800bba6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800bbaa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bbae:	2100      	movs	r1, #0
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f000 f9df 	bl	800bf74 <hci_send_req>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	da01      	bge.n	800bbc0 <aci_l2cap_connection_parameter_update_resp+0x140>
    return BLE_STATUS_TIMEOUT;
 800bbbc:	23ff      	movs	r3, #255	; 0xff
 800bbbe:	e009      	b.n	800bbd4 <aci_l2cap_connection_parameter_update_resp+0x154>
  if (status) 
 800bbc0:	f107 030f 	add.w	r3, r7, #15
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d003      	beq.n	800bbd2 <aci_l2cap_connection_parameter_update_resp+0x152>
  {
    return status;
 800bbca:	f107 030f 	add.w	r3, r7, #15
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	e000      	b.n	800bbd4 <aci_l2cap_connection_parameter_update_resp+0x154>
  }
  return BLE_STATUS_SUCCESS;
 800bbd2:	2300      	movs	r3, #0
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bdb0      	pop	{r4, r5, r7, pc}

0800bbde <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800bbde:	b580      	push	{r7, lr}
 800bbe0:	b084      	sub	sp, #16
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	60f8      	str	r0, [r7, #12]
 800bbe6:	60b9      	str	r1, [r7, #8]
 800bbe8:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800bbea:	687a      	ldr	r2, [r7, #4]
 800bbec:	68b9      	ldr	r1, [r7, #8]
 800bbee:	68f8      	ldr	r0, [r7, #12]
 800bbf0:	f002 fd82 	bl	800e6f8 <memcpy>
 800bbf4:	4603      	mov	r3, r0
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3710      	adds	r7, #16
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}

0800bbfe <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800bbfe:	b580      	push	{r7, lr}
 800bc00:	b084      	sub	sp, #16
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	60f8      	str	r0, [r7, #12]
 800bc06:	60b9      	str	r1, [r7, #8]
 800bc08:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800bc0a:	687a      	ldr	r2, [r7, #4]
 800bc0c:	68b9      	ldr	r1, [r7, #8]
 800bc0e:	68f8      	ldr	r0, [r7, #12]
 800bc10:	f002 fd7d 	bl	800e70e <memset>
 800bc14:	4603      	mov	r3, r0
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3710      	adds	r7, #16
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}

0800bc1e <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 800bc1e:	b480      	push	{r7}
 800bc20:	af00      	add	r7, sp, #0
  return;
 800bc22:	bf00      	nop
}
 800bc24:	46bd      	mov	sp, r7
 800bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2a:	4770      	bx	lr

0800bc2c <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	af00      	add	r7, sp, #0
  return;
 800bc30:	bf00      	nop
}
 800bc32:	46bd      	mov	sp, r7
 800bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc38:	4770      	bx	lr

0800bc3a <DIS_Init>:
__weak void DIS_Init( void )
{
 800bc3a:	b480      	push	{r7}
 800bc3c:	af00      	add	r7, sp, #0
  return;
 800bc3e:	bf00      	nop
}
 800bc40:	46bd      	mov	sp, r7
 800bc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc46:	4770      	bx	lr

0800bc48 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 800bc48:	b480      	push	{r7}
 800bc4a:	af00      	add	r7, sp, #0
  return;
 800bc4c:	bf00      	nop
}
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc54:	4770      	bx	lr

0800bc56 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 800bc56:	b480      	push	{r7}
 800bc58:	af00      	add	r7, sp, #0
  return;
 800bc5a:	bf00      	nop
}
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc62:	4770      	bx	lr

0800bc64 <HRS_Init>:
__weak void HRS_Init( void )
{
 800bc64:	b480      	push	{r7}
 800bc66:	af00      	add	r7, sp, #0
  return;
 800bc68:	bf00      	nop
}
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc70:	4770      	bx	lr

0800bc72 <HTS_Init>:
__weak void HTS_Init( void )
{
 800bc72:	b480      	push	{r7}
 800bc74:	af00      	add	r7, sp, #0
  return;
 800bc76:	bf00      	nop
}
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr

0800bc80 <IAS_Init>:
__weak void IAS_Init( void )
{
 800bc80:	b480      	push	{r7}
 800bc82:	af00      	add	r7, sp, #0
  return;
 800bc84:	bf00      	nop
}
 800bc86:	46bd      	mov	sp, r7
 800bc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8c:	4770      	bx	lr

0800bc8e <LLS_Init>:
__weak void LLS_Init( void )
{
 800bc8e:	b480      	push	{r7}
 800bc90:	af00      	add	r7, sp, #0
  return;
 800bc92:	bf00      	nop
}
 800bc94:	46bd      	mov	sp, r7
 800bc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9a:	4770      	bx	lr

0800bc9c <TPS_Init>:
__weak void TPS_Init( void )
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	af00      	add	r7, sp, #0
  return;
 800bca0:	bf00      	nop
}
 800bca2:	46bd      	mov	sp, r7
 800bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca8:	4770      	bx	lr

0800bcaa <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 800bcaa:	b480      	push	{r7}
 800bcac:	af00      	add	r7, sp, #0
  return;
 800bcae:	bf00      	nop
}
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr

0800bcb8 <P2PS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
 800bcb8:	b480      	push	{r7}
 800bcba:	af00      	add	r7, sp, #0
  return;
 800bcbc:	bf00      	nop
}
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc4:	4770      	bx	lr

0800bcc6 <OTAS_STM_Init>:
__weak void OTAS_STM_Init( void )
{
 800bcc6:	b480      	push	{r7}
 800bcc8:	af00      	add	r7, sp, #0
  return;
 800bcca:	bf00      	nop
}
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr

0800bcd4 <MESH_Init>:
__weak void MESH_Init( void )
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	af00      	add	r7, sp, #0
  return;
 800bcd8:	bf00      	nop
}
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce0:	4770      	bx	lr

0800bce2 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 800bce2:	b480      	push	{r7}
 800bce4:	af00      	add	r7, sp, #0
  return;
 800bce6:	bf00      	nop
}
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr

0800bcf0 <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	af00      	add	r7, sp, #0
  return;
 800bcf4:	bf00      	nop
}
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfc:	4770      	bx	lr
	...

0800bd00 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800bd04:	4b04      	ldr	r3, [pc, #16]	; (800bd18 <SVCCTL_Init+0x18>)
 800bd06:	2200      	movs	r2, #0
 800bd08:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800bd0a:	4b04      	ldr	r3, [pc, #16]	; (800bd1c <SVCCTL_Init+0x1c>)
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	711a      	strb	r2, [r3, #4]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800bd10:	f000 f806 	bl	800bd20 <SVCCTL_SvcInit>

  return;
 800bd14:	bf00      	nop
}
 800bd16:	bd80      	pop	{r7, pc}
 800bd18:	2000028c 	.word	0x2000028c
 800bd1c:	200002ac 	.word	0x200002ac

0800bd20 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	af00      	add	r7, sp, #0
  BLS_Init();
 800bd24:	f7ff ff7b 	bl	800bc1e <BLS_Init>

  CRS_STM_Init();
 800bd28:	f7ff ff80 	bl	800bc2c <CRS_STM_Init>

  DIS_Init();
 800bd2c:	f7ff ff85 	bl	800bc3a <DIS_Init>

  EDS_STM_Init();
 800bd30:	f7ff ff8a 	bl	800bc48 <EDS_STM_Init>

  HIDS_Init();
 800bd34:	f7ff ff8f 	bl	800bc56 <HIDS_Init>

  HRS_Init();
 800bd38:	f7ff ff94 	bl	800bc64 <HRS_Init>

  HTS_Init();
 800bd3c:	f7ff ff99 	bl	800bc72 <HTS_Init>

  IAS_Init();
 800bd40:	f7ff ff9e 	bl	800bc80 <IAS_Init>

  LLS_Init();
 800bd44:	f7ff ffa3 	bl	800bc8e <LLS_Init>

  TPS_Init();
 800bd48:	f7ff ffa8 	bl	800bc9c <TPS_Init>

  MOTENV_STM_Init();
 800bd4c:	f7ff ffad 	bl	800bcaa <MOTENV_STM_Init>

  P2PS_STM_Init();
 800bd50:	f7ff ffb2 	bl	800bcb8 <P2PS_STM_Init>

  OTAS_STM_Init();
 800bd54:	f7ff ffb7 	bl	800bcc6 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800bd58:	f7ff ffc3 	bl	800bce2 <BVOPUS_STM_Init>

  MESH_Init();
 800bd5c:	f7ff ffba 	bl	800bcd4 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800bd60:	f7ff ffc6 	bl	800bcf0 <SVCCTL_InitCustomSvc>
  
  return;
 800bd64:	bf00      	nop
}
 800bd66:	bd80      	pop	{r7, pc}

0800bd68 <SVCCTL_RegisterCltHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterCltHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Client_Event_Handler )
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b083      	sub	sp, #12
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
  SVCCTL_CltHandler.SVCCTL_CltHandlerTable[SVCCTL_CltHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Client_Event_Handler;
 800bd70:	4b09      	ldr	r3, [pc, #36]	; (800bd98 <SVCCTL_RegisterCltHandler+0x30>)
 800bd72:	791b      	ldrb	r3, [r3, #4]
 800bd74:	4619      	mov	r1, r3
 800bd76:	4a08      	ldr	r2, [pc, #32]	; (800bd98 <SVCCTL_RegisterCltHandler+0x30>)
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif
  SVCCTL_CltHandler.NbreOfRegisteredHandler++;
 800bd7e:	4b06      	ldr	r3, [pc, #24]	; (800bd98 <SVCCTL_RegisterCltHandler+0x30>)
 800bd80:	791b      	ldrb	r3, [r3, #4]
 800bd82:	3301      	adds	r3, #1
 800bd84:	b2da      	uxtb	r2, r3
 800bd86:	4b04      	ldr	r3, [pc, #16]	; (800bd98 <SVCCTL_RegisterCltHandler+0x30>)
 800bd88:	711a      	strb	r2, [r3, #4]

  return;
 800bd8a:	bf00      	nop
}
 800bd8c:	370c      	adds	r7, #12
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd94:	4770      	bx	lr
 800bd96:	bf00      	nop
 800bd98:	200002ac 	.word	0x200002ac

0800bd9c <SVCCTL_UserEvtRx>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b086      	sub	sp, #24
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	3301      	adds	r3, #1
 800bda8:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	781b      	ldrb	r3, [r3, #0]
 800bdb2:	2bff      	cmp	r3, #255	; 0xff
 800bdb4:	d000      	beq.n	800bdb8 <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800bdb6:	e03f      	b.n	800be38 <SVCCTL_UserEvtRx+0x9c>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	3302      	adds	r3, #2
 800bdbc:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	881b      	ldrh	r3, [r3, #0]
 800bdc2:	b29b      	uxth	r3, r3
 800bdc4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bdc8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bdcc:	d000      	beq.n	800bdd0 <SVCCTL_UserEvtRx+0x34>
          break;
 800bdce:	e032      	b.n	800be36 <SVCCTL_UserEvtRx+0x9a>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	757b      	strb	r3, [r7, #21]
 800bdd4:	e00d      	b.n	800bdf2 <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800bdd6:	7d7b      	ldrb	r3, [r7, #21]
 800bdd8:	4a25      	ldr	r2, [pc, #148]	; (800be70 <SVCCTL_UserEvtRx+0xd4>)
 800bdda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	4798      	blx	r3
 800bde2:	4603      	mov	r3, r0
 800bde4:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 800bde6:	7dfb      	ldrb	r3, [r7, #23]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d108      	bne.n	800bdfe <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800bdec:	7d7b      	ldrb	r3, [r7, #21]
 800bdee:	3301      	adds	r3, #1
 800bdf0:	757b      	strb	r3, [r7, #21]
 800bdf2:	4b1f      	ldr	r3, [pc, #124]	; (800be70 <SVCCTL_UserEvtRx+0xd4>)
 800bdf4:	7f1b      	ldrb	r3, [r3, #28]
 800bdf6:	7d7a      	ldrb	r2, [r7, #21]
 800bdf8:	429a      	cmp	r2, r3
 800bdfa:	d3ec      	bcc.n	800bdd6 <SVCCTL_UserEvtRx+0x3a>
 800bdfc:	e000      	b.n	800be00 <SVCCTL_UserEvtRx+0x64>
              break;
 800bdfe:	bf00      	nop
          event_notification_status = SVCCTL_EvtNotAck;
 800be00:	2300      	movs	r3, #0
 800be02:	75fb      	strb	r3, [r7, #23]
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 800be04:	2300      	movs	r3, #0
 800be06:	757b      	strb	r3, [r7, #21]
 800be08:	e00d      	b.n	800be26 <SVCCTL_UserEvtRx+0x8a>
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 800be0a:	7d7b      	ldrb	r3, [r7, #21]
 800be0c:	4a19      	ldr	r2, [pc, #100]	; (800be74 <SVCCTL_UserEvtRx+0xd8>)
 800be0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	4798      	blx	r3
 800be16:	4603      	mov	r3, r0
 800be18:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 800be1a:	7dfb      	ldrb	r3, [r7, #23]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d108      	bne.n	800be32 <SVCCTL_UserEvtRx+0x96>
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 800be20:	7d7b      	ldrb	r3, [r7, #21]
 800be22:	3301      	adds	r3, #1
 800be24:	757b      	strb	r3, [r7, #21]
 800be26:	4b13      	ldr	r3, [pc, #76]	; (800be74 <SVCCTL_UserEvtRx+0xd8>)
 800be28:	791b      	ldrb	r3, [r3, #4]
 800be2a:	7d7a      	ldrb	r2, [r7, #21]
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d3ec      	bcc.n	800be0a <SVCCTL_UserEvtRx+0x6e>
          break;
 800be30:	e000      	b.n	800be34 <SVCCTL_UserEvtRx+0x98>
              break;
 800be32:	bf00      	nop
          break;
 800be34:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 800be36:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800be38:	7dfb      	ldrb	r3, [r7, #23]
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d009      	beq.n	800be52 <SVCCTL_UserEvtRx+0xb6>
 800be3e:	2b02      	cmp	r3, #2
 800be40:	d00a      	beq.n	800be58 <SVCCTL_UserEvtRx+0xbc>
 800be42:	2b00      	cmp	r3, #0
 800be44:	d10b      	bne.n	800be5e <SVCCTL_UserEvtRx+0xc2>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f000 fdfa 	bl	800ca40 <SVCCTL_App_Notification>
 800be4c:	4603      	mov	r3, r0
 800be4e:	75bb      	strb	r3, [r7, #22]
      break;
 800be50:	e008      	b.n	800be64 <SVCCTL_UserEvtRx+0xc8>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800be52:	2301      	movs	r3, #1
 800be54:	75bb      	strb	r3, [r7, #22]
      break;
 800be56:	e005      	b.n	800be64 <SVCCTL_UserEvtRx+0xc8>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800be58:	2300      	movs	r3, #0
 800be5a:	75bb      	strb	r3, [r7, #22]
      break;
 800be5c:	e002      	b.n	800be64 <SVCCTL_UserEvtRx+0xc8>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800be5e:	2301      	movs	r3, #1
 800be60:	75bb      	strb	r3, [r7, #22]
      break;
 800be62:	bf00      	nop
  }

  return (return_status);
 800be64:	7dbb      	ldrb	r3, [r7, #22]
}
 800be66:	4618      	mov	r0, r3
 800be68:	3718      	adds	r7, #24
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
 800be6e:	bf00      	nop
 800be70:	2000028c 	.word	0x2000028c
 800be74:	200002ac 	.word	0x200002ac

0800be78 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b088      	sub	sp, #32
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800be80:	f107 030c 	add.w	r3, r7, #12
 800be84:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800be8c:	69fb      	ldr	r3, [r7, #28]
 800be8e:	2121      	movs	r1, #33	; 0x21
 800be90:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800be94:	f000 fa00 	bl	800c298 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800be98:	69fb      	ldr	r3, [r7, #28]
 800be9a:	330b      	adds	r3, #11
 800be9c:	78db      	ldrb	r3, [r3, #3]
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3720      	adds	r7, #32
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
	...

0800bea8 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b082      	sub	sp, #8
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	685b      	ldr	r3, [r3, #4]
 800beb6:	4a08      	ldr	r2, [pc, #32]	; (800bed8 <hci_init+0x30>)
 800beb8:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800beba:	4a08      	ldr	r2, [pc, #32]	; (800bedc <hci_init+0x34>)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800bec0:	4806      	ldr	r0, [pc, #24]	; (800bedc <hci_init+0x34>)
 800bec2:	f000 f96f 	bl	800c1a4 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	4618      	mov	r0, r3
 800becc:	f000 f8d0 	bl	800c070 <TlInit>

  return;
 800bed0:	bf00      	nop
}
 800bed2:	3708      	adds	r7, #8
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}
 800bed8:	20000480 	.word	0x20000480
 800bedc:	20000458 	.word	0x20000458

0800bee0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b084      	sub	sp, #16
 800bee4:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800bee6:	4820      	ldr	r0, [pc, #128]	; (800bf68 <hci_user_evt_proc+0x88>)
 800bee8:	f000 fc92 	bl	800c810 <LST_is_empty>
 800beec:	4603      	mov	r3, r0
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d128      	bne.n	800bf44 <hci_user_evt_proc+0x64>
 800bef2:	4b1e      	ldr	r3, [pc, #120]	; (800bf6c <hci_user_evt_proc+0x8c>)
 800bef4:	781b      	ldrb	r3, [r3, #0]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d024      	beq.n	800bf44 <hci_user_evt_proc+0x64>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800befa:	f107 030c 	add.w	r3, r7, #12
 800befe:	4619      	mov	r1, r3
 800bf00:	4819      	ldr	r0, [pc, #100]	; (800bf68 <hci_user_evt_proc+0x88>)
 800bf02:	f000 fd0c 	bl	800c91e <LST_remove_head>

    UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800bf06:	4b19      	ldr	r3, [pc, #100]	; (800bf6c <hci_user_evt_proc+0x8c>)
 800bf08:	2201      	movs	r2, #1
 800bf0a:	701a      	strb	r2, [r3, #0]

    if (hciContext.UserEvtRx != NULL)
 800bf0c:	4b18      	ldr	r3, [pc, #96]	; (800bf70 <hci_user_evt_proc+0x90>)
 800bf0e:	69db      	ldr	r3, [r3, #28]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d009      	beq.n	800bf28 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	60bb      	str	r3, [r7, #8]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800bf18:	4b15      	ldr	r3, [pc, #84]	; (800bf70 <hci_user_evt_proc+0x90>)
 800bf1a:	69db      	ldr	r3, [r3, #28]
 800bf1c:	1d3a      	adds	r2, r7, #4
 800bf1e:	4610      	mov	r0, r2
 800bf20:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800bf22:	793a      	ldrb	r2, [r7, #4]
 800bf24:	4b11      	ldr	r3, [pc, #68]	; (800bf6c <hci_user_evt_proc+0x8c>)
 800bf26:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800bf28:	4b10      	ldr	r3, [pc, #64]	; (800bf6c <hci_user_evt_proc+0x8c>)
 800bf2a:	781b      	ldrb	r3, [r3, #0]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d004      	beq.n	800bf3a <hci_user_evt_proc+0x5a>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	4618      	mov	r0, r3
 800bf34:	f000 fbca 	bl	800c6cc <TL_MM_EvtDone>
 800bf38:	e004      	b.n	800bf44 <hci_user_evt_proc+0x64>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	480a      	ldr	r0, [pc, #40]	; (800bf68 <hci_user_evt_proc+0x88>)
 800bf40:	f000 fc86 	bl	800c850 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800bf44:	4808      	ldr	r0, [pc, #32]	; (800bf68 <hci_user_evt_proc+0x88>)
 800bf46:	f000 fc63 	bl	800c810 <LST_is_empty>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d107      	bne.n	800bf60 <hci_user_evt_proc+0x80>
 800bf50:	4b06      	ldr	r3, [pc, #24]	; (800bf6c <hci_user_evt_proc+0x8c>)
 800bf52:	781b      	ldrb	r3, [r3, #0]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d003      	beq.n	800bf60 <hci_user_evt_proc+0x80>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800bf58:	4803      	ldr	r0, [pc, #12]	; (800bf68 <hci_user_evt_proc+0x88>)
 800bf5a:	f001 f85b 	bl	800d014 <hci_notify_asynch_evt>
  }


  return;
 800bf5e:	bf00      	nop
 800bf60:	bf00      	nop
}
 800bf62:	3710      	adds	r7, #16
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}
 800bf68:	200002b8 	.word	0x200002b8
 800bf6c:	200002c4 	.word	0x200002c4
 800bf70:	20000458 	.word	0x20000458

0800bf74 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b088      	sub	sp, #32
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	460b      	mov	r3, r1
 800bf7e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800bf80:	2000      	movs	r0, #0
 800bf82:	f000 f8cb 	bl	800c11c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800bf86:	2300      	movs	r3, #0
 800bf88:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	885b      	ldrh	r3, [r3, #2]
 800bf8e:	b21b      	sxth	r3, r3
 800bf90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf94:	b21a      	sxth	r2, r3
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	881b      	ldrh	r3, [r3, #0]
 800bf9a:	029b      	lsls	r3, r3, #10
 800bf9c:	b21b      	sxth	r3, r3
 800bf9e:	4313      	orrs	r3, r2
 800bfa0:	b21b      	sxth	r3, r3
 800bfa2:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	68db      	ldr	r3, [r3, #12]
 800bfa8:	b2d9      	uxtb	r1, r3
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	689a      	ldr	r2, [r3, #8]
 800bfae:	8bbb      	ldrh	r3, [r7, #28]
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f000 f88d 	bl	800c0d0 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800bfb6:	e04e      	b.n	800c056 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800bfb8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800bfbc:	f001 f841 	bl	800d042 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800bfc0:	e043      	b.n	800c04a <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800bfc2:	f107 030c 	add.w	r3, r7, #12
 800bfc6:	4619      	mov	r1, r3
 800bfc8:	4828      	ldr	r0, [pc, #160]	; (800c06c <hci_send_req+0xf8>)
 800bfca:	f000 fca8 	bl	800c91e <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	7a5b      	ldrb	r3, [r3, #9]
 800bfd2:	2b0f      	cmp	r3, #15
 800bfd4:	d114      	bne.n	800c000 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	330b      	adds	r3, #11
 800bfda:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800bfdc:	693b      	ldr	r3, [r7, #16]
 800bfde:	885b      	ldrh	r3, [r3, #2]
 800bfe0:	b29b      	uxth	r3, r3
 800bfe2:	8bba      	ldrh	r2, [r7, #28]
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d104      	bne.n	800bff2 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	691b      	ldr	r3, [r3, #16]
 800bfec:	693a      	ldr	r2, [r7, #16]
 800bfee:	7812      	ldrb	r2, [r2, #0]
 800bff0:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	785b      	ldrb	r3, [r3, #1]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d027      	beq.n	800c04a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800bffa:	2301      	movs	r3, #1
 800bffc:	77fb      	strb	r3, [r7, #31]
 800bffe:	e024      	b.n	800c04a <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	330b      	adds	r3, #11
 800c004:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800c006:	69bb      	ldr	r3, [r7, #24]
 800c008:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c00c:	b29b      	uxth	r3, r3
 800c00e:	8bba      	ldrh	r2, [r7, #28]
 800c010:	429a      	cmp	r2, r3
 800c012:	d114      	bne.n	800c03e <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	7a9b      	ldrb	r3, [r3, #10]
 800c018:	3b03      	subs	r3, #3
 800c01a:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	695a      	ldr	r2, [r3, #20]
 800c020:	7dfb      	ldrb	r3, [r7, #23]
 800c022:	429a      	cmp	r2, r3
 800c024:	bfa8      	it	ge
 800c026:	461a      	movge	r2, r3
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6918      	ldr	r0, [r3, #16]
 800c030:	69bb      	ldr	r3, [r7, #24]
 800c032:	1cd9      	adds	r1, r3, #3
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	695b      	ldr	r3, [r3, #20]
 800c038:	461a      	mov	r2, r3
 800c03a:	f002 fb5d 	bl	800e6f8 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800c03e:	69bb      	ldr	r3, [r7, #24]
 800c040:	781b      	ldrb	r3, [r3, #0]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d001      	beq.n	800c04a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800c046:	2301      	movs	r3, #1
 800c048:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800c04a:	4808      	ldr	r0, [pc, #32]	; (800c06c <hci_send_req+0xf8>)
 800c04c:	f000 fbe0 	bl	800c810 <LST_is_empty>
 800c050:	4603      	mov	r3, r0
 800c052:	2b00      	cmp	r3, #0
 800c054:	d0b5      	beq.n	800bfc2 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800c056:	7ffb      	ldrb	r3, [r7, #31]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d0ad      	beq.n	800bfb8 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800c05c:	2001      	movs	r0, #1
 800c05e:	f000 f85d 	bl	800c11c <NotifyCmdStatus>

  return 0;
 800c062:	2300      	movs	r3, #0
}
 800c064:	4618      	mov	r0, r3
 800c066:	3720      	adds	r7, #32
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}
 800c06c:	20000478 	.word	0x20000478

0800c070 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b086      	sub	sp, #24
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800c078:	480f      	ldr	r0, [pc, #60]	; (800c0b8 <TlInit+0x48>)
 800c07a:	f000 fbb9 	bl	800c7f0 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800c07e:	4a0f      	ldr	r2, [pc, #60]	; (800c0bc <TlInit+0x4c>)
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800c084:	480e      	ldr	r0, [pc, #56]	; (800c0c0 <TlInit+0x50>)
 800c086:	f000 fbb3 	bl	800c7f0 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800c08a:	4b0e      	ldr	r3, [pc, #56]	; (800c0c4 <TlInit+0x54>)
 800c08c:	2201      	movs	r2, #1
 800c08e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800c090:	4b0d      	ldr	r3, [pc, #52]	; (800c0c8 <TlInit+0x58>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d00a      	beq.n	800c0ae <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800c09c:	4b0b      	ldr	r3, [pc, #44]	; (800c0cc <TlInit+0x5c>)
 800c09e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800c0a0:	4b09      	ldr	r3, [pc, #36]	; (800c0c8 <TlInit+0x58>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	f107 0208 	add.w	r2, r7, #8
 800c0a8:	4610      	mov	r0, r2
 800c0aa:	4798      	blx	r3
  }

  return;
 800c0ac:	bf00      	nop
 800c0ae:	bf00      	nop
}
 800c0b0:	3718      	adds	r7, #24
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
 800c0b6:	bf00      	nop
 800c0b8:	20000478 	.word	0x20000478
 800c0bc:	200002c0 	.word	0x200002c0
 800c0c0:	200002b8 	.word	0x200002b8
 800c0c4:	200002c4 	.word	0x200002c4
 800c0c8:	20000458 	.word	0x20000458
 800c0cc:	0800c15d 	.word	0x0800c15d

0800c0d0 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b082      	sub	sp, #8
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	603a      	str	r2, [r7, #0]
 800c0da:	80fb      	strh	r3, [r7, #6]
 800c0dc:	460b      	mov	r3, r1
 800c0de:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800c0e0:	4b0c      	ldr	r3, [pc, #48]	; (800c114 <SendCmd+0x44>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	88fa      	ldrh	r2, [r7, #6]
 800c0e6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800c0ea:	4b0a      	ldr	r3, [pc, #40]	; (800c114 <SendCmd+0x44>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	797a      	ldrb	r2, [r7, #5]
 800c0f0:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800c0f2:	4b08      	ldr	r3, [pc, #32]	; (800c114 <SendCmd+0x44>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	330c      	adds	r3, #12
 800c0f8:	797a      	ldrb	r2, [r7, #5]
 800c0fa:	6839      	ldr	r1, [r7, #0]
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f002 fafb 	bl	800e6f8 <memcpy>

  hciContext.io.Send(0,0);
 800c102:	4b05      	ldr	r3, [pc, #20]	; (800c118 <SendCmd+0x48>)
 800c104:	691b      	ldr	r3, [r3, #16]
 800c106:	2100      	movs	r1, #0
 800c108:	2000      	movs	r0, #0
 800c10a:	4798      	blx	r3

  return;
 800c10c:	bf00      	nop
}
 800c10e:	3708      	adds	r7, #8
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}
 800c114:	200002c0 	.word	0x200002c0
 800c118:	20000458 	.word	0x20000458

0800c11c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b082      	sub	sp, #8
 800c120:	af00      	add	r7, sp, #0
 800c122:	4603      	mov	r3, r0
 800c124:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800c126:	79fb      	ldrb	r3, [r7, #7]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d108      	bne.n	800c13e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800c12c:	4b0a      	ldr	r3, [pc, #40]	; (800c158 <NotifyCmdStatus+0x3c>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d00d      	beq.n	800c150 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800c134:	4b08      	ldr	r3, [pc, #32]	; (800c158 <NotifyCmdStatus+0x3c>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	2000      	movs	r0, #0
 800c13a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800c13c:	e008      	b.n	800c150 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800c13e:	4b06      	ldr	r3, [pc, #24]	; (800c158 <NotifyCmdStatus+0x3c>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d004      	beq.n	800c150 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800c146:	4b04      	ldr	r3, [pc, #16]	; (800c158 <NotifyCmdStatus+0x3c>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	2001      	movs	r0, #1
 800c14c:	4798      	blx	r3
  return;
 800c14e:	bf00      	nop
 800c150:	bf00      	nop
}
 800c152:	3708      	adds	r7, #8
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}
 800c158:	20000480 	.word	0x20000480

0800c15c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b082      	sub	sp, #8
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	7a5b      	ldrb	r3, [r3, #9]
 800c168:	2b0f      	cmp	r3, #15
 800c16a:	d003      	beq.n	800c174 <TlEvtReceived+0x18>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	7a5b      	ldrb	r3, [r3, #9]
 800c170:	2b0e      	cmp	r3, #14
 800c172:	d107      	bne.n	800c184 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800c174:	6879      	ldr	r1, [r7, #4]
 800c176:	4809      	ldr	r0, [pc, #36]	; (800c19c <TlEvtReceived+0x40>)
 800c178:	f000 fb8e 	bl	800c898 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800c17c:	2000      	movs	r0, #0
 800c17e:	f000 ff55 	bl	800d02c <hci_cmd_resp_release>
 800c182:	e006      	b.n	800c192 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800c184:	6879      	ldr	r1, [r7, #4]
 800c186:	4806      	ldr	r0, [pc, #24]	; (800c1a0 <TlEvtReceived+0x44>)
 800c188:	f000 fb86 	bl	800c898 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800c18c:	4804      	ldr	r0, [pc, #16]	; (800c1a0 <TlEvtReceived+0x44>)
 800c18e:	f000 ff41 	bl	800d014 <hci_notify_asynch_evt>
  }

  return;
 800c192:	bf00      	nop
}
 800c194:	3708      	adds	r7, #8
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
 800c19a:	bf00      	nop
 800c19c:	20000478 	.word	0x20000478
 800c1a0:	200002b8 	.word	0x200002b8

0800c1a4 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b083      	sub	sp, #12
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	4a05      	ldr	r2, [pc, #20]	; (800c1c4 <hci_register_io_bus+0x20>)
 800c1b0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	4a04      	ldr	r2, [pc, #16]	; (800c1c8 <hci_register_io_bus+0x24>)
 800c1b6:	611a      	str	r2, [r3, #16]

  return;
 800c1b8:	bf00      	nop
}
 800c1ba:	370c      	adds	r7, #12
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr
 800c1c4:	0800c4a5 	.word	0x0800c4a5
 800c1c8:	0800c50d 	.word	0x0800c50d

0800c1cc <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b082      	sub	sp, #8
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
 800c1d4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	685b      	ldr	r3, [r3, #4]
 800c1da:	4a08      	ldr	r2, [pc, #32]	; (800c1fc <shci_init+0x30>)
 800c1dc:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800c1de:	4a08      	ldr	r2, [pc, #32]	; (800c200 <shci_init+0x34>)
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800c1e4:	4806      	ldr	r0, [pc, #24]	; (800c200 <shci_init+0x34>)
 800c1e6:	f000 f90d 	bl	800c404 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f000 f890 	bl	800c314 <TlInit>

  return;
 800c1f4:	bf00      	nop
}
 800c1f6:	3708      	adds	r7, #8
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}
 800c1fc:	200004a4 	.word	0x200004a4
 800c200:	20000484 	.word	0x20000484

0800c204 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b084      	sub	sp, #16
 800c208:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800c20a:	4820      	ldr	r0, [pc, #128]	; (800c28c <shci_user_evt_proc+0x88>)
 800c20c:	f000 fb00 	bl	800c810 <LST_is_empty>
 800c210:	4603      	mov	r3, r0
 800c212:	2b00      	cmp	r3, #0
 800c214:	d128      	bne.n	800c268 <shci_user_evt_proc+0x64>
 800c216:	4b1e      	ldr	r3, [pc, #120]	; (800c290 <shci_user_evt_proc+0x8c>)
 800c218:	781b      	ldrb	r3, [r3, #0]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d024      	beq.n	800c268 <shci_user_evt_proc+0x64>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800c21e:	f107 030c 	add.w	r3, r7, #12
 800c222:	4619      	mov	r1, r3
 800c224:	4819      	ldr	r0, [pc, #100]	; (800c28c <shci_user_evt_proc+0x88>)
 800c226:	f000 fb7a 	bl	800c91e <LST_remove_head>

    SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c22a:	4b19      	ldr	r3, [pc, #100]	; (800c290 <shci_user_evt_proc+0x8c>)
 800c22c:	2201      	movs	r2, #1
 800c22e:	701a      	strb	r2, [r3, #0]

    if (shciContext.UserEvtRx != NULL)
 800c230:	4b18      	ldr	r3, [pc, #96]	; (800c294 <shci_user_evt_proc+0x90>)
 800c232:	69db      	ldr	r3, [r3, #28]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d009      	beq.n	800c24c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	60bb      	str	r3, [r7, #8]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800c23c:	4b15      	ldr	r3, [pc, #84]	; (800c294 <shci_user_evt_proc+0x90>)
 800c23e:	69db      	ldr	r3, [r3, #28]
 800c240:	1d3a      	adds	r2, r7, #4
 800c242:	4610      	mov	r0, r2
 800c244:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800c246:	793a      	ldrb	r2, [r7, #4]
 800c248:	4b11      	ldr	r3, [pc, #68]	; (800c290 <shci_user_evt_proc+0x8c>)
 800c24a:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800c24c:	4b10      	ldr	r3, [pc, #64]	; (800c290 <shci_user_evt_proc+0x8c>)
 800c24e:	781b      	ldrb	r3, [r3, #0]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d004      	beq.n	800c25e <shci_user_evt_proc+0x5a>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	4618      	mov	r0, r3
 800c258:	f000 fa38 	bl	800c6cc <TL_MM_EvtDone>
 800c25c:	e004      	b.n	800c268 <shci_user_evt_proc+0x64>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	4619      	mov	r1, r3
 800c262:	480a      	ldr	r0, [pc, #40]	; (800c28c <shci_user_evt_proc+0x88>)
 800c264:	f000 faf4 	bl	800c850 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800c268:	4808      	ldr	r0, [pc, #32]	; (800c28c <shci_user_evt_proc+0x88>)
 800c26a:	f000 fad1 	bl	800c810 <LST_is_empty>
 800c26e:	4603      	mov	r3, r0
 800c270:	2b00      	cmp	r3, #0
 800c272:	d107      	bne.n	800c284 <shci_user_evt_proc+0x80>
 800c274:	4b06      	ldr	r3, [pc, #24]	; (800c290 <shci_user_evt_proc+0x8c>)
 800c276:	781b      	ldrb	r3, [r3, #0]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d003      	beq.n	800c284 <shci_user_evt_proc+0x80>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800c27c:	4803      	ldr	r0, [pc, #12]	; (800c28c <shci_user_evt_proc+0x88>)
 800c27e:	f7f4 f9eb 	bl	8000658 <shci_notify_asynch_evt>
  }


  return;
 800c282:	bf00      	nop
 800c284:	bf00      	nop
}
 800c286:	3710      	adds	r7, #16
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}
 800c28c:	200002c8 	.word	0x200002c8
 800c290:	200002d8 	.word	0x200002d8
 800c294:	20000484 	.word	0x20000484

0800c298 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b084      	sub	sp, #16
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	60ba      	str	r2, [r7, #8]
 800c2a0:	607b      	str	r3, [r7, #4]
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	81fb      	strh	r3, [r7, #14]
 800c2a6:	460b      	mov	r3, r1
 800c2a8:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800c2aa:	2000      	movs	r0, #0
 800c2ac:	f000 f864 	bl	800c378 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800c2b0:	4b16      	ldr	r3, [pc, #88]	; (800c30c <shci_send+0x74>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	89fa      	ldrh	r2, [r7, #14]
 800c2b6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800c2ba:	4b14      	ldr	r3, [pc, #80]	; (800c30c <shci_send+0x74>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	7b7a      	ldrb	r2, [r7, #13]
 800c2c0:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800c2c2:	4b12      	ldr	r3, [pc, #72]	; (800c30c <shci_send+0x74>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	330c      	adds	r3, #12
 800c2c8:	7b7a      	ldrb	r2, [r7, #13]
 800c2ca:	68b9      	ldr	r1, [r7, #8]
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f002 fa13 	bl	800e6f8 <memcpy>

  shciContext.io.Send(0,0);
 800c2d2:	4b0f      	ldr	r3, [pc, #60]	; (800c310 <shci_send+0x78>)
 800c2d4:	691b      	ldr	r3, [r3, #16]
 800c2d6:	2100      	movs	r1, #0
 800c2d8:	2000      	movs	r0, #0
 800c2da:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800c2dc:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800c2e0:	f7f4 f9d1 	bl	8000686 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f103 0008 	add.w	r0, r3, #8
 800c2ea:	4b08      	ldr	r3, [pc, #32]	; (800c30c <shci_send+0x74>)
 800c2ec:	6819      	ldr	r1, [r3, #0]
 800c2ee:	4b07      	ldr	r3, [pc, #28]	; (800c30c <shci_send+0x74>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	789b      	ldrb	r3, [r3, #2]
 800c2f4:	3303      	adds	r3, #3
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	f002 f9fe 	bl	800e6f8 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c2fc:	2001      	movs	r0, #1
 800c2fe:	f000 f83b 	bl	800c378 <Cmd_SetStatus>

  return;
 800c302:	bf00      	nop
}
 800c304:	3710      	adds	r7, #16
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
 800c30a:	bf00      	nop
 800c30c:	200002d4 	.word	0x200002d4
 800c310:	20000484 	.word	0x20000484

0800c314 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b086      	sub	sp, #24
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800c31c:	4a10      	ldr	r2, [pc, #64]	; (800c360 <TlInit+0x4c>)
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800c322:	4810      	ldr	r0, [pc, #64]	; (800c364 <TlInit+0x50>)
 800c324:	f000 fa64 	bl	800c7f0 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c328:	2001      	movs	r0, #1
 800c32a:	f000 f825 	bl	800c378 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c32e:	4b0e      	ldr	r3, [pc, #56]	; (800c368 <TlInit+0x54>)
 800c330:	2201      	movs	r2, #1
 800c332:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800c334:	4b0d      	ldr	r3, [pc, #52]	; (800c36c <TlInit+0x58>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d00c      	beq.n	800c356 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800c340:	4b0b      	ldr	r3, [pc, #44]	; (800c370 <TlInit+0x5c>)
 800c342:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800c344:	4b0b      	ldr	r3, [pc, #44]	; (800c374 <TlInit+0x60>)
 800c346:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800c348:	4b08      	ldr	r3, [pc, #32]	; (800c36c <TlInit+0x58>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f107 020c 	add.w	r2, r7, #12
 800c350:	4610      	mov	r0, r2
 800c352:	4798      	blx	r3
  }

  return;
 800c354:	bf00      	nop
 800c356:	bf00      	nop
}
 800c358:	3718      	adds	r7, #24
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}
 800c35e:	bf00      	nop
 800c360:	200002d4 	.word	0x200002d4
 800c364:	200002c8 	.word	0x200002c8
 800c368:	200002d8 	.word	0x200002d8
 800c36c:	20000484 	.word	0x20000484
 800c370:	0800c3c9 	.word	0x0800c3c9
 800c374:	0800c3e1 	.word	0x0800c3e1

0800c378 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b082      	sub	sp, #8
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	4603      	mov	r3, r0
 800c380:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800c382:	79fb      	ldrb	r3, [r7, #7]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d10b      	bne.n	800c3a0 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800c388:	4b0d      	ldr	r3, [pc, #52]	; (800c3c0 <Cmd_SetStatus+0x48>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d003      	beq.n	800c398 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800c390:	4b0b      	ldr	r3, [pc, #44]	; (800c3c0 <Cmd_SetStatus+0x48>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	2000      	movs	r0, #0
 800c396:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800c398:	4b0a      	ldr	r3, [pc, #40]	; (800c3c4 <Cmd_SetStatus+0x4c>)
 800c39a:	2200      	movs	r2, #0
 800c39c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800c39e:	e00b      	b.n	800c3b8 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800c3a0:	4b08      	ldr	r3, [pc, #32]	; (800c3c4 <Cmd_SetStatus+0x4c>)
 800c3a2:	2201      	movs	r2, #1
 800c3a4:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800c3a6:	4b06      	ldr	r3, [pc, #24]	; (800c3c0 <Cmd_SetStatus+0x48>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d004      	beq.n	800c3b8 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800c3ae:	4b04      	ldr	r3, [pc, #16]	; (800c3c0 <Cmd_SetStatus+0x48>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	2001      	movs	r0, #1
 800c3b4:	4798      	blx	r3
  return;
 800c3b6:	bf00      	nop
 800c3b8:	bf00      	nop
}
 800c3ba:	3708      	adds	r7, #8
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}
 800c3c0:	200004a4 	.word	0x200004a4
 800c3c4:	200002d0 	.word	0x200002d0

0800c3c8 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b082      	sub	sp, #8
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800c3d0:	2000      	movs	r0, #0
 800c3d2:	f7f4 f94d 	bl	8000670 <shci_cmd_resp_release>

  return;
 800c3d6:	bf00      	nop
}
 800c3d8:	3708      	adds	r7, #8
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}
	...

0800c3e0 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b082      	sub	sp, #8
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800c3e8:	6879      	ldr	r1, [r7, #4]
 800c3ea:	4805      	ldr	r0, [pc, #20]	; (800c400 <TlUserEvtReceived+0x20>)
 800c3ec:	f000 fa54 	bl	800c898 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800c3f0:	4803      	ldr	r0, [pc, #12]	; (800c400 <TlUserEvtReceived+0x20>)
 800c3f2:	f7f4 f931 	bl	8000658 <shci_notify_asynch_evt>

  return;
 800c3f6:	bf00      	nop
}
 800c3f8:	3708      	adds	r7, #8
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}
 800c3fe:	bf00      	nop
 800c400:	200002c8 	.word	0x200002c8

0800c404 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800c404:	b480      	push	{r7}
 800c406:	b083      	sub	sp, #12
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	4a05      	ldr	r2, [pc, #20]	; (800c424 <shci_register_io_bus+0x20>)
 800c410:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	4a04      	ldr	r2, [pc, #16]	; (800c428 <shci_register_io_bus+0x24>)
 800c416:	611a      	str	r2, [r3, #16]

  return;
 800c418:	bf00      	nop
}
 800c41a:	370c      	adds	r7, #12
 800c41c:	46bd      	mov	sp, r7
 800c41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c422:	4770      	bx	lr
 800c424:	0800c581 	.word	0x0800c581
 800c428:	0800c5d5 	.word	0x0800c5d5

0800c42c <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800c430:	f001 fb48 	bl	800dac4 <HW_IPCC_Enable>

  return;
 800c434:	bf00      	nop
}
 800c436:	bd80      	pop	{r7, pc}

0800c438 <TL_Init>:


void TL_Init( void )
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800c43c:	4b0f      	ldr	r3, [pc, #60]	; (800c47c <TL_Init+0x44>)
 800c43e:	4a10      	ldr	r2, [pc, #64]	; (800c480 <TL_Init+0x48>)
 800c440:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800c442:	4b0e      	ldr	r3, [pc, #56]	; (800c47c <TL_Init+0x44>)
 800c444:	4a0f      	ldr	r2, [pc, #60]	; (800c484 <TL_Init+0x4c>)
 800c446:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800c448:	4b0c      	ldr	r3, [pc, #48]	; (800c47c <TL_Init+0x44>)
 800c44a:	4a0f      	ldr	r2, [pc, #60]	; (800c488 <TL_Init+0x50>)
 800c44c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800c44e:	4b0b      	ldr	r3, [pc, #44]	; (800c47c <TL_Init+0x44>)
 800c450:	4a0e      	ldr	r2, [pc, #56]	; (800c48c <TL_Init+0x54>)
 800c452:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_sys_table = &TL_SysTable;
 800c454:	4b09      	ldr	r3, [pc, #36]	; (800c47c <TL_Init+0x44>)
 800c456:	4a0e      	ldr	r2, [pc, #56]	; (800c490 <TL_Init+0x58>)
 800c458:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800c45a:	4b08      	ldr	r3, [pc, #32]	; (800c47c <TL_Init+0x44>)
 800c45c:	4a0d      	ldr	r2, [pc, #52]	; (800c494 <TL_Init+0x5c>)
 800c45e:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800c460:	4b06      	ldr	r3, [pc, #24]	; (800c47c <TL_Init+0x44>)
 800c462:	4a0d      	ldr	r2, [pc, #52]	; (800c498 <TL_Init+0x60>)
 800c464:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800c466:	4b05      	ldr	r3, [pc, #20]	; (800c47c <TL_Init+0x44>)
 800c468:	4a0c      	ldr	r2, [pc, #48]	; (800c49c <TL_Init+0x64>)
 800c46a:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800c46c:	4b03      	ldr	r3, [pc, #12]	; (800c47c <TL_Init+0x44>)
 800c46e:	4a0c      	ldr	r2, [pc, #48]	; (800c4a0 <TL_Init+0x68>)
 800c470:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800c472:	f001 fb2f 	bl	800dad4 <HW_IPCC_Init>

  return;
 800c476:	bf00      	nop
}
 800c478:	bd80      	pop	{r7, pc}
 800c47a:	bf00      	nop
 800c47c:	20030000 	.word	0x20030000
 800c480:	20030024 	.word	0x20030024
 800c484:	20030044 	.word	0x20030044
 800c488:	20030054 	.word	0x20030054
 800c48c:	20030060 	.word	0x20030060
 800c490:	20030068 	.word	0x20030068
 800c494:	20030070 	.word	0x20030070
 800c498:	2003008c 	.word	0x2003008c
 800c49c:	20030090 	.word	0x20030090
 800c4a0:	2003009c 	.word	0x2003009c

0800c4a4 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b084      	sub	sp, #16
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800c4b0:	4811      	ldr	r0, [pc, #68]	; (800c4f8 <TL_BLE_Init+0x54>)
 800c4b2:	f000 f99d 	bl	800c7f0 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800c4b6:	4b11      	ldr	r3, [pc, #68]	; (800c4fc <TL_BLE_Init+0x58>)
 800c4b8:	685b      	ldr	r3, [r3, #4]
 800c4ba:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	689a      	ldr	r2, [r3, #8]
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	68da      	ldr	r2, [r3, #12]
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	4a0c      	ldr	r2, [pc, #48]	; (800c500 <TL_BLE_Init+0x5c>)
 800c4d0:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	4a08      	ldr	r2, [pc, #32]	; (800c4f8 <TL_BLE_Init+0x54>)
 800c4d6:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800c4d8:	f001 fb12 	bl	800db00 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	4a08      	ldr	r2, [pc, #32]	; (800c504 <TL_BLE_Init+0x60>)
 800c4e2:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	685b      	ldr	r3, [r3, #4]
 800c4e8:	4a07      	ldr	r2, [pc, #28]	; (800c508 <TL_BLE_Init+0x64>)
 800c4ea:	6013      	str	r3, [r2, #0]

  return 0;
 800c4ec:	2300      	movs	r3, #0
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3710      	adds	r7, #16
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}
 800c4f6:	bf00      	nop
 800c4f8:	20030a34 	.word	0x20030a34
 800c4fc:	20030000 	.word	0x20030000
 800c500:	20030a24 	.word	0x20030a24
 800c504:	200004b0 	.word	0x200004b0
 800c508:	200004b4 	.word	0x200004b4

0800c50c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b082      	sub	sp, #8
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
 800c514:	460b      	mov	r3, r1
 800c516:	807b      	strh	r3, [r7, #2]
  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800c518:	4b05      	ldr	r3, [pc, #20]	; (800c530 <TL_BLE_SendCmd+0x24>)
 800c51a:	685b      	ldr	r3, [r3, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	2201      	movs	r2, #1
 800c520:	721a      	strb	r2, [r3, #8]

  HW_IPCC_BLE_SendCmd();
 800c522:	f001 faf7 	bl	800db14 <HW_IPCC_BLE_SendCmd>

  return 0;
 800c526:	2300      	movs	r3, #0
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3708      	adds	r7, #8
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}
 800c530:	20030000 	.word	0x20030000

0800c534 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b082      	sub	sp, #8
 800c538:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800c53a:	e009      	b.n	800c550 <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800c53c:	1d3b      	adds	r3, r7, #4
 800c53e:	4619      	mov	r1, r3
 800c540:	4808      	ldr	r0, [pc, #32]	; (800c564 <HW_IPCC_BLE_RxEvtNot+0x30>)
 800c542:	f000 f9ec 	bl	800c91e <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 800c546:	4b08      	ldr	r3, [pc, #32]	; (800c568 <HW_IPCC_BLE_RxEvtNot+0x34>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	687a      	ldr	r2, [r7, #4]
 800c54c:	4610      	mov	r0, r2
 800c54e:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800c550:	4804      	ldr	r0, [pc, #16]	; (800c564 <HW_IPCC_BLE_RxEvtNot+0x30>)
 800c552:	f000 f95d 	bl	800c810 <LST_is_empty>
 800c556:	4603      	mov	r3, r0
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d0ef      	beq.n	800c53c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800c55c:	bf00      	nop
}
 800c55e:	3708      	adds	r7, #8
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}
 800c564:	20030a34 	.word	0x20030a34
 800c568:	200004b0 	.word	0x200004b0

0800c56c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800c570:	4b02      	ldr	r3, [pc, #8]	; (800c57c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	4798      	blx	r3

  return;
 800c576:	bf00      	nop
}
 800c578:	bd80      	pop	{r7, pc}
 800c57a:	bf00      	nop
 800c57c:	200004b4 	.word	0x200004b4

0800c580 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b084      	sub	sp, #16
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800c58c:	480d      	ldr	r0, [pc, #52]	; (800c5c4 <TL_SYS_Init+0x44>)
 800c58e:	f000 f92f 	bl	800c7f0 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800c592:	4b0d      	ldr	r3, [pc, #52]	; (800c5c8 <TL_SYS_Init+0x48>)
 800c594:	68db      	ldr	r3, [r3, #12]
 800c596:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	689a      	ldr	r2, [r3, #8]
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	4a08      	ldr	r2, [pc, #32]	; (800c5c4 <TL_SYS_Init+0x44>)
 800c5a4:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800c5a6:	f001 fad7 	bl	800db58 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	4a07      	ldr	r2, [pc, #28]	; (800c5cc <TL_SYS_Init+0x4c>)
 800c5b0:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	685b      	ldr	r3, [r3, #4]
 800c5b6:	4a06      	ldr	r2, [pc, #24]	; (800c5d0 <TL_SYS_Init+0x50>)
 800c5b8:	6013      	str	r3, [r2, #0]

  return 0;
 800c5ba:	2300      	movs	r3, #0
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	3710      	adds	r7, #16
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}
 800c5c4:	20030a3c 	.word	0x20030a3c
 800c5c8:	20030000 	.word	0x20030000
 800c5cc:	200004b8 	.word	0x200004b8
 800c5d0:	200004bc 	.word	0x200004bc

0800c5d4 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b082      	sub	sp, #8
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	460b      	mov	r3, r1
 800c5de:	807b      	strh	r3, [r7, #2]
  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800c5e0:	4b05      	ldr	r3, [pc, #20]	; (800c5f8 <TL_SYS_SendCmd+0x24>)
 800c5e2:	68db      	ldr	r3, [r3, #12]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	2210      	movs	r2, #16
 800c5e8:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 800c5ea:	f001 fabf 	bl	800db6c <HW_IPCC_SYS_SendCmd>

  return 0;
 800c5ee:	2300      	movs	r3, #0
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	3708      	adds	r7, #8
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}
 800c5f8:	20030000 	.word	0x20030000

0800c5fc <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c600:	4b04      	ldr	r3, [pc, #16]	; (800c614 <HW_IPCC_SYS_CmdEvtNot+0x18>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	4a04      	ldr	r2, [pc, #16]	; (800c618 <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 800c606:	68d2      	ldr	r2, [r2, #12]
 800c608:	6812      	ldr	r2, [r2, #0]
 800c60a:	4610      	mov	r0, r2
 800c60c:	4798      	blx	r3

  return;
 800c60e:	bf00      	nop
}
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop
 800c614:	200004b8 	.word	0x200004b8
 800c618:	20030000 	.word	0x20030000

0800c61c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b082      	sub	sp, #8
 800c620:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c622:	e009      	b.n	800c638 <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800c624:	1d3b      	adds	r3, r7, #4
 800c626:	4619      	mov	r1, r3
 800c628:	4808      	ldr	r0, [pc, #32]	; (800c64c <HW_IPCC_SYS_EvtNot+0x30>)
 800c62a:	f000 f978 	bl	800c91e <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 800c62e:	4b08      	ldr	r3, [pc, #32]	; (800c650 <HW_IPCC_SYS_EvtNot+0x34>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	687a      	ldr	r2, [r7, #4]
 800c634:	4610      	mov	r0, r2
 800c636:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c638:	4804      	ldr	r0, [pc, #16]	; (800c64c <HW_IPCC_SYS_EvtNot+0x30>)
 800c63a:	f000 f8e9 	bl	800c810 <LST_is_empty>
 800c63e:	4603      	mov	r3, r0
 800c640:	2b00      	cmp	r3, #0
 800c642:	d0ef      	beq.n	800c624 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800c644:	bf00      	nop
}
 800c646:	3708      	adds	r7, #8
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}
 800c64c:	20030a3c 	.word	0x20030a3c
 800c650:	200004bc 	.word	0x200004bc

0800c654 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b082      	sub	sp, #8
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800c65c:	4817      	ldr	r0, [pc, #92]	; (800c6bc <TL_MM_Init+0x68>)
 800c65e:	f000 f8c7 	bl	800c7f0 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800c662:	4817      	ldr	r0, [pc, #92]	; (800c6c0 <TL_MM_Init+0x6c>)
 800c664:	f000 f8c4 	bl	800c7f0 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800c668:	4b16      	ldr	r3, [pc, #88]	; (800c6c4 <TL_MM_Init+0x70>)
 800c66a:	691b      	ldr	r3, [r3, #16]
 800c66c:	4a16      	ldr	r2, [pc, #88]	; (800c6c8 <TL_MM_Init+0x74>)
 800c66e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800c670:	4b15      	ldr	r3, [pc, #84]	; (800c6c8 <TL_MM_Init+0x74>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	687a      	ldr	r2, [r7, #4]
 800c676:	6892      	ldr	r2, [r2, #8]
 800c678:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800c67a:	4b13      	ldr	r3, [pc, #76]	; (800c6c8 <TL_MM_Init+0x74>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	68d2      	ldr	r2, [r2, #12]
 800c682:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800c684:	4b10      	ldr	r3, [pc, #64]	; (800c6c8 <TL_MM_Init+0x74>)
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	4a0c      	ldr	r2, [pc, #48]	; (800c6bc <TL_MM_Init+0x68>)
 800c68a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800c68c:	4b0e      	ldr	r3, [pc, #56]	; (800c6c8 <TL_MM_Init+0x74>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	687a      	ldr	r2, [r7, #4]
 800c692:	6812      	ldr	r2, [r2, #0]
 800c694:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800c696:	4b0c      	ldr	r3, [pc, #48]	; (800c6c8 <TL_MM_Init+0x74>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	687a      	ldr	r2, [r7, #4]
 800c69c:	6852      	ldr	r2, [r2, #4]
 800c69e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800c6a0:	4b09      	ldr	r3, [pc, #36]	; (800c6c8 <TL_MM_Init+0x74>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	687a      	ldr	r2, [r7, #4]
 800c6a6:	6912      	ldr	r2, [r2, #16]
 800c6a8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800c6aa:	4b07      	ldr	r3, [pc, #28]	; (800c6c8 <TL_MM_Init+0x74>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	687a      	ldr	r2, [r7, #4]
 800c6b0:	6952      	ldr	r2, [r2, #20]
 800c6b2:	619a      	str	r2, [r3, #24]

  return;
 800c6b4:	bf00      	nop
}
 800c6b6:	3708      	adds	r7, #8
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}
 800c6bc:	200300a8 	.word	0x200300a8
 800c6c0:	200004a8 	.word	0x200004a8
 800c6c4:	20030000 	.word	0x20030000
 800c6c8:	200004c0 	.word	0x200004c0

0800c6cc <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b082      	sub	sp, #8
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800c6d4:	6879      	ldr	r1, [r7, #4]
 800c6d6:	4805      	ldr	r0, [pc, #20]	; (800c6ec <TL_MM_EvtDone+0x20>)
 800c6d8:	f000 f8de 	bl	800c898 <LST_insert_tail>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800c6dc:	4804      	ldr	r0, [pc, #16]	; (800c6f0 <TL_MM_EvtDone+0x24>)
 800c6de:	f001 fa6b 	bl	800dbb8 <HW_IPCC_MM_SendFreeBuf>

  return;
 800c6e2:	bf00      	nop
}
 800c6e4:	3708      	adds	r7, #8
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}
 800c6ea:	bf00      	nop
 800c6ec:	200004a8 	.word	0x200004a8
 800c6f0:	0800c6f5 	.word	0x0800c6f5

0800c6f4 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b082      	sub	sp, #8
 800c6f8:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c6fa:	e00c      	b.n	800c716 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800c6fc:	1d3b      	adds	r3, r7, #4
 800c6fe:	4619      	mov	r1, r3
 800c700:	480a      	ldr	r0, [pc, #40]	; (800c72c <SendFreeBuf+0x38>)
 800c702:	f000 f90c 	bl	800c91e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800c706:	4b0a      	ldr	r3, [pc, #40]	; (800c730 <SendFreeBuf+0x3c>)
 800c708:	691b      	ldr	r3, [r3, #16]
 800c70a:	691b      	ldr	r3, [r3, #16]
 800c70c:	687a      	ldr	r2, [r7, #4]
 800c70e:	4611      	mov	r1, r2
 800c710:	4618      	mov	r0, r3
 800c712:	f000 f8c1 	bl	800c898 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c716:	4805      	ldr	r0, [pc, #20]	; (800c72c <SendFreeBuf+0x38>)
 800c718:	f000 f87a 	bl	800c810 <LST_is_empty>
 800c71c:	4603      	mov	r3, r0
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d0ec      	beq.n	800c6fc <SendFreeBuf+0x8>
  }

  return;
 800c722:	bf00      	nop
}
 800c724:	3708      	adds	r7, #8
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}
 800c72a:	bf00      	nop
 800c72c:	200004a8 	.word	0x200004a8
 800c730:	20030000 	.word	0x20030000

0800c734 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800c734:	b580      	push	{r7, lr}
 800c736:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800c738:	4805      	ldr	r0, [pc, #20]	; (800c750 <TL_TRACES_Init+0x1c>)
 800c73a:	f000 f859 	bl	800c7f0 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800c73e:	4b05      	ldr	r3, [pc, #20]	; (800c754 <TL_TRACES_Init+0x20>)
 800c740:	695b      	ldr	r3, [r3, #20]
 800c742:	4a03      	ldr	r2, [pc, #12]	; (800c750 <TL_TRACES_Init+0x1c>)
 800c744:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800c746:	f001 fa6d 	bl	800dc24 <HW_IPCC_TRACES_Init>

  return;
 800c74a:	bf00      	nop
}
 800c74c:	bd80      	pop	{r7, pc}
 800c74e:	bf00      	nop
 800c750:	200300b0 	.word	0x200300b0
 800c754:	20030000 	.word	0x20030000

0800c758 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b082      	sub	sp, #8
 800c75c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c75e:	e008      	b.n	800c772 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800c760:	1d3b      	adds	r3, r7, #4
 800c762:	4619      	mov	r1, r3
 800c764:	4808      	ldr	r0, [pc, #32]	; (800c788 <HW_IPCC_TRACES_EvtNot+0x30>)
 800c766:	f000 f8da 	bl	800c91e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	4618      	mov	r0, r3
 800c76e:	f000 f80d 	bl	800c78c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c772:	4805      	ldr	r0, [pc, #20]	; (800c788 <HW_IPCC_TRACES_EvtNot+0x30>)
 800c774:	f000 f84c 	bl	800c810 <LST_is_empty>
 800c778:	4603      	mov	r3, r0
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d0f0      	beq.n	800c760 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800c77e:	bf00      	nop
}
 800c780:	3708      	adds	r7, #8
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}
 800c786:	bf00      	nop
 800c788:	200300b0 	.word	0x200300b0

0800c78c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt ){};
 800c78c:	b480      	push	{r7}
 800c78e:	b083      	sub	sp, #12
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
 800c794:	bf00      	nop
 800c796:	370c      	adds	r7, #12
 800c798:	46bd      	mov	sp, r7
 800c79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79e:	4770      	bx	lr

0800c7a0 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b085      	sub	sp, #20
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800c7aa:	4b0f      	ldr	r3, [pc, #60]	; (800c7e8 <OTP_Read+0x48>)
 800c7ac:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800c7ae:	e002      	b.n	800c7b6 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	3b08      	subs	r3, #8
 800c7b4:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	3307      	adds	r3, #7
 800c7ba:	781b      	ldrb	r3, [r3, #0]
 800c7bc:	79fa      	ldrb	r2, [r7, #7]
 800c7be:	429a      	cmp	r2, r3
 800c7c0:	d003      	beq.n	800c7ca <OTP_Read+0x2a>
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	4a09      	ldr	r2, [pc, #36]	; (800c7ec <OTP_Read+0x4c>)
 800c7c6:	4293      	cmp	r3, r2
 800c7c8:	d1f2      	bne.n	800c7b0 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	3307      	adds	r3, #7
 800c7ce:	781b      	ldrb	r3, [r3, #0]
 800c7d0:	79fa      	ldrb	r2, [r7, #7]
 800c7d2:	429a      	cmp	r2, r3
 800c7d4:	d001      	beq.n	800c7da <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800c7da:	68fb      	ldr	r3, [r7, #12]
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	3714      	adds	r7, #20
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e6:	4770      	bx	lr
 800c7e8:	1fff73f8 	.word	0x1fff73f8
 800c7ec:	1fff7000 	.word	0x1fff7000

0800c7f0 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b083      	sub	sp, #12
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	687a      	ldr	r2, [r7, #4]
 800c7fc:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	687a      	ldr	r2, [r7, #4]
 800c802:	605a      	str	r2, [r3, #4]
}
 800c804:	bf00      	nop
 800c806:	370c      	adds	r7, #12
 800c808:	46bd      	mov	sp, r7
 800c80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80e:	4770      	bx	lr

0800c810 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800c810:	b480      	push	{r7}
 800c812:	b087      	sub	sp, #28
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c818:	f3ef 8310 	mrs	r3, PRIMASK
 800c81c:	60fb      	str	r3, [r7, #12]
  return(result);
 800c81e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c820:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c822:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	687a      	ldr	r2, [r7, #4]
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d102      	bne.n	800c834 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800c82e:	2301      	movs	r3, #1
 800c830:	75fb      	strb	r3, [r7, #23]
 800c832:	e001      	b.n	800c838 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800c834:	2300      	movs	r3, #0
 800c836:	75fb      	strb	r3, [r7, #23]
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800c842:	7dfb      	ldrb	r3, [r7, #23]
}
 800c844:	4618      	mov	r0, r3
 800c846:	371c      	adds	r7, #28
 800c848:	46bd      	mov	sp, r7
 800c84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84e:	4770      	bx	lr

0800c850 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800c850:	b480      	push	{r7}
 800c852:	b087      	sub	sp, #28
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
 800c858:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c85a:	f3ef 8310 	mrs	r3, PRIMASK
 800c85e:	60fb      	str	r3, [r7, #12]
  return(result);
 800c860:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c862:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c864:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681a      	ldr	r2, [r3, #0]
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	683a      	ldr	r2, [r7, #0]
 800c878:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	683a      	ldr	r2, [r7, #0]
 800c880:	605a      	str	r2, [r3, #4]
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c886:	693b      	ldr	r3, [r7, #16]
 800c888:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c88c:	bf00      	nop
 800c88e:	371c      	adds	r7, #28
 800c890:	46bd      	mov	sp, r7
 800c892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c896:	4770      	bx	lr

0800c898 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800c898:	b480      	push	{r7}
 800c89a:	b087      	sub	sp, #28
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
 800c8a0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c8a2:	f3ef 8310 	mrs	r3, PRIMASK
 800c8a6:	60fb      	str	r3, [r7, #12]
  return(result);
 800c8a8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c8aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c8ac:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	687a      	ldr	r2, [r7, #4]
 800c8b2:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	685a      	ldr	r2, [r3, #4]
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	683a      	ldr	r2, [r7, #0]
 800c8c0:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	685b      	ldr	r3, [r3, #4]
 800c8c6:	683a      	ldr	r2, [r7, #0]
 800c8c8:	601a      	str	r2, [r3, #0]
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8ce:	693b      	ldr	r3, [r7, #16]
 800c8d0:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c8d4:	bf00      	nop
 800c8d6:	371c      	adds	r7, #28
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr

0800c8e0 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	b087      	sub	sp, #28
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c8e8:	f3ef 8310 	mrs	r3, PRIMASK
 800c8ec:	60fb      	str	r3, [r7, #12]
  return(result);
 800c8ee:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c8f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c8f2:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	685b      	ldr	r3, [r3, #4]
 800c8f8:	687a      	ldr	r2, [r7, #4]
 800c8fa:	6812      	ldr	r2, [r2, #0]
 800c8fc:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	687a      	ldr	r2, [r7, #4]
 800c904:	6852      	ldr	r2, [r2, #4]
 800c906:	605a      	str	r2, [r3, #4]
 800c908:	697b      	ldr	r3, [r7, #20]
 800c90a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c912:	bf00      	nop
 800c914:	371c      	adds	r7, #28
 800c916:	46bd      	mov	sp, r7
 800c918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91c:	4770      	bx	lr

0800c91e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800c91e:	b580      	push	{r7, lr}
 800c920:	b086      	sub	sp, #24
 800c922:	af00      	add	r7, sp, #0
 800c924:	6078      	str	r0, [r7, #4]
 800c926:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c928:	f3ef 8310 	mrs	r3, PRIMASK
 800c92c:	60fb      	str	r3, [r7, #12]
  return(result);
 800c92e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c930:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c932:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681a      	ldr	r2, [r3, #0]
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	4618      	mov	r0, r3
 800c942:	f7ff ffcd 	bl	800c8e0 <LST_remove_node>
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c950:	bf00      	nop
 800c952:	3718      	adds	r7, #24
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}

0800c958 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800c958:	b480      	push	{r7}
 800c95a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800c95c:	4b03      	ldr	r3, [pc, #12]	; (800c96c <LL_FLASH_GetUDN+0x14>)
 800c95e:	681b      	ldr	r3, [r3, #0]
}
 800c960:	4618      	mov	r0, r3
 800c962:	46bd      	mov	sp, r7
 800c964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c968:	4770      	bx	lr
 800c96a:	bf00      	nop
 800c96c:	1fff7580 	.word	0x1fff7580

0800c970 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800c970:	b480      	push	{r7}
 800c972:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800c974:	4b03      	ldr	r3, [pc, #12]	; (800c984 <LL_FLASH_GetDeviceID+0x14>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	b2db      	uxtb	r3, r3
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	46bd      	mov	sp, r7
 800c97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c982:	4770      	bx	lr
 800c984:	1fff7584 	.word	0x1fff7584

0800c988 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800c988:	b480      	push	{r7}
 800c98a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800c98c:	4b03      	ldr	r3, [pc, #12]	; (800c99c <LL_FLASH_GetSTCompanyID+0x14>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	0a1b      	lsrs	r3, r3, #8
}
 800c992:	4618      	mov	r0, r3
 800c994:	46bd      	mov	sp, r7
 800c996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99a:	4770      	bx	lr
 800c99c:	1fff7584 	.word	0x1fff7584

0800c9a0 <APP_BLE_Init>:

/* USER CODE END 0 */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 800c9a0:	b5b0      	push	{r4, r5, r7, lr}
 800c9a2:	b08c      	sub	sp, #48	; 0x30
 800c9a4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */
	//messege_ble(0);
/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800c9a6:	4b1f      	ldr	r3, [pc, #124]	; (800ca24 <APP_BLE_Init+0x84>)
 800c9a8:	463c      	mov	r4, r7
 800c9aa:	461d      	mov	r5, r3
 800c9ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c9ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c9b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c9b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c9b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c9b8:	c407      	stmia	r4!, {r0, r1, r2}
 800c9ba:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 800c9bc:	f000 f9b4 	bl	800cd28 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800c9c0:	2101      	movs	r1, #1
 800c9c2:	2002      	movs	r0, #2
 800c9c4:	f7f5 f95e 	bl	8001c84 <UTIL_LPM_SetOffMode>

/**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800c9c8:	4a17      	ldr	r2, [pc, #92]	; (800ca28 <APP_BLE_Init+0x88>)
 800c9ca:	2100      	movs	r1, #0
 800c9cc:	2020      	movs	r0, #32
 800c9ce:	f7f5 fac1 	bl	8001f54 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 800c9d2:	463b      	mov	r3, r7
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f7ff fa4f 	bl	800be78 <SHCI_C2_BLE_Init>

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800c9da:	f000 f9bb 	bl	800cd54 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800c9de:	f7ff f98f 	bl	800bd00 <SVCCTL_Init>

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_START_SCAN_ID, UTIL_SEQ_RFU, Scan_Request);
 800c9e2:	4a12      	ldr	r2, [pc, #72]	; (800ca2c <APP_BLE_Init+0x8c>)
 800c9e4:	2100      	movs	r1, #0
 800c9e6:	2001      	movs	r0, #1
 800c9e8:	f7f5 fab4 	bl	8001f54 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_DEV_1_ID, UTIL_SEQ_RFU, Connect_Request);
 800c9ec:	4a10      	ldr	r2, [pc, #64]	; (800ca30 <APP_BLE_Init+0x90>)
 800c9ee:	2100      	movs	r1, #0
 800c9f0:	2002      	movs	r0, #2
 800c9f2:	f7f5 faaf 	bl	8001f54 <UTIL_SEQ_RegTask>

  /**
   * Initialization of the BLE App Context
   */

      BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c9f6:	4b0f      	ldr	r3, [pc, #60]	; (800ca34 <APP_BLE_Init+0x94>)
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    /*Radio mask Activity*/
#if (OOB_DEMO != 0)  
  aci_hal_set_radio_activity_mask(0x0020);
 800c9fe:	2020      	movs	r0, #32
 800ca00:	f7fe ffc4 	bl	800b98c <aci_hal_set_radio_activity_mask>
#endif 
  /**
   * Initialize P2P Client Application
   */
  P2PC_APP_Init();
 800ca04:	f000 fb60 	bl	800d0c8 <P2PC_APP_Init>

#if (OOB_DEMO != 0)
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800ca08:	4b0b      	ldr	r3, [pc, #44]	; (800ca38 <APP_BLE_Init+0x98>)
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	490b      	ldr	r1, [pc, #44]	; (800ca3c <APP_BLE_Init+0x9c>)
 800ca0e:	2000      	movs	r0, #0
 800ca10:	f7f4 fc0e 	bl	8001230 <HW_TS_Create>
  /**
   * Start scanning
   */
  UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0);
#endif 
  UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0);
 800ca14:	2100      	movs	r1, #0
 800ca16:	2001      	movs	r0, #1
 800ca18:	f7f5 fabc 	bl	8001f94 <UTIL_SEQ_SetTask>
  
  return;
 800ca1c:	bf00      	nop
}
 800ca1e:	3730      	adds	r7, #48	; 0x30
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bdb0      	pop	{r4, r5, r7, pc}
 800ca24:	0800f174 	.word	0x0800f174
 800ca28:	0800bee1 	.word	0x0800bee1
 800ca2c:	0800cec9 	.word	0x0800cec9
 800ca30:	0800cf11 	.word	0x0800cf11
 800ca34:	200002dc 	.word	0x200002dc
 800ca38:	0800cf7d 	.word	0x0800cf7d
 800ca3c:	2000036d 	.word	0x2000036d

0800ca40 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 800ca40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca42:	b097      	sub	sp, #92	; 0x5c
 800ca44:	af06      	add	r7, sp, #24
 800ca46:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  hci_le_connection_complete_event_rp0 * connection_complete_event;
  evt_blue_aci *blue_evt;
  hci_le_advertising_report_event_rp0 * le_advertising_event;
  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	3301      	adds	r3, #1
 800ca4c:	63bb      	str	r3, [r7, #56]	; 0x38
  hci_disconnection_complete_event_rp0 *cc = (void *) event_pckt->data;
 800ca4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca50:	3302      	adds	r3, #2
 800ca52:	637b      	str	r3, [r7, #52]	; 0x34
  uint8_t result;
  uint8_t event_type, event_data_size;
  int k = 0;
 800ca54:	2300      	movs	r3, #0
 800ca56:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint8_t adtype, adlength;
  uint8_t *adv_report_data;

  switch (event_pckt->evt)
 800ca58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca5a:	781b      	ldrb	r3, [r3, #0]
 800ca5c:	2b3e      	cmp	r3, #62	; 0x3e
 800ca5e:	f000 809f 	beq.w	800cba0 <SVCCTL_App_Notification+0x160>
 800ca62:	2bff      	cmp	r3, #255	; 0xff
 800ca64:	d002      	beq.n	800ca6c <SVCCTL_App_Notification+0x2c>
 800ca66:	2b05      	cmp	r3, #5
 800ca68:	d07a      	beq.n	800cb60 <SVCCTL_App_Notification+0x120>

      default:
        /* USER CODE BEGIN evt_default */

        /* USER CODE END evt_default */
        break;
 800ca6a:	e135      	b.n	800ccd8 <SVCCTL_App_Notification+0x298>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800ca6c:	4b9d      	ldr	r3, [pc, #628]	; (800cce4 <SVCCTL_App_Notification+0x2a4>)
 800ca6e:	2201      	movs	r2, #1
 800ca70:	701a      	strb	r2, [r3, #0]
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800ca72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca74:	3302      	adds	r3, #2
 800ca76:	633b      	str	r3, [r7, #48]	; 0x30
      switch (blue_evt->ecode)
 800ca78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca7a:	881b      	ldrh	r3, [r3, #0]
 800ca7c:	b29b      	uxth	r3, r3
 800ca7e:	f240 4207 	movw	r2, #1031	; 0x407
 800ca82:	4293      	cmp	r3, r2
 800ca84:	d006      	beq.n	800ca94 <SVCCTL_App_Notification+0x54>
 800ca86:	f640 0202 	movw	r2, #2050	; 0x802
 800ca8a:	4293      	cmp	r3, r2
 800ca8c:	d01c      	beq.n	800cac8 <SVCCTL_App_Notification+0x88>
 800ca8e:	2b04      	cmp	r3, #4
 800ca90:	d062      	beq.n	800cb58 <SVCCTL_App_Notification+0x118>
          break;
 800ca92:	e064      	b.n	800cb5e <SVCCTL_App_Notification+0x11e>
          aci_gap_proc_complete_event_rp0 *gap_evt_proc_complete = (void*) blue_evt->data;
 800ca94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca96:	3302      	adds	r3, #2
 800ca98:	627b      	str	r3, [r7, #36]	; 0x24
          if (gap_evt_proc_complete->Procedure_Code == GAP_GENERAL_DISCOVERY_PROC
 800ca9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca9c:	781b      	ldrb	r3, [r3, #0]
 800ca9e:	2b02      	cmp	r3, #2
 800caa0:	d15c      	bne.n	800cb5c <SVCCTL_App_Notification+0x11c>
              && gap_evt_proc_complete->Status == 0x00)
 800caa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa4:	785b      	ldrb	r3, [r3, #1]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d158      	bne.n	800cb5c <SVCCTL_App_Notification+0x11c>
            if (BleApplicationContext.DeviceServerFound == 0x01 && BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 800caaa:	4b8f      	ldr	r3, [pc, #572]	; (800cce8 <SVCCTL_App_Notification+0x2a8>)
 800caac:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800cab0:	2b01      	cmp	r3, #1
 800cab2:	d153      	bne.n	800cb5c <SVCCTL_App_Notification+0x11c>
 800cab4:	4b8c      	ldr	r3, [pc, #560]	; (800cce8 <SVCCTL_App_Notification+0x2a8>)
 800cab6:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800caba:	2b06      	cmp	r3, #6
 800cabc:	d04e      	beq.n	800cb5c <SVCCTL_App_Notification+0x11c>
              UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_1_ID, CFG_SCH_PRIO_0);
 800cabe:	2100      	movs	r1, #0
 800cac0:	2002      	movs	r0, #2
 800cac2:	f7f5 fa67 	bl	8001f94 <UTIL_SEQ_SetTask>
        break;
 800cac6:	e049      	b.n	800cb5c <SVCCTL_App_Notification+0x11c>
          aci_l2cap_connection_update_req_event_rp0 *pr = (aci_l2cap_connection_update_req_event_rp0 *) blue_evt->data;
 800cac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caca:	3302      	adds	r3, #2
 800cacc:	62fb      	str	r3, [r7, #44]	; 0x2c
          aci_hal_set_radio_activity_mask(0x0000);
 800cace:	2000      	movs	r0, #0
 800cad0:	f7fe ff5c 	bl	800b98c <aci_hal_set_radio_activity_mask>
          APP_BLE_p2p_Conn_Update_req.Identifier = pr->Identifier;
 800cad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad6:	789a      	ldrb	r2, [r3, #2]
 800cad8:	4b84      	ldr	r3, [pc, #528]	; (800ccec <SVCCTL_App_Notification+0x2ac>)
 800cada:	701a      	strb	r2, [r3, #0]
          APP_BLE_p2p_Conn_Update_req.L2CAP_Length = pr->L2CAP_Length;
 800cadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cade:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800cae2:	b29a      	uxth	r2, r3
 800cae4:	4b81      	ldr	r3, [pc, #516]	; (800ccec <SVCCTL_App_Notification+0x2ac>)
 800cae6:	805a      	strh	r2, [r3, #2]
          APP_BLE_p2p_Conn_Update_req.Interval_Min = pr->Interval_Min;
 800cae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caea:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800caee:	b29a      	uxth	r2, r3
 800caf0:	4b7e      	ldr	r3, [pc, #504]	; (800ccec <SVCCTL_App_Notification+0x2ac>)
 800caf2:	809a      	strh	r2, [r3, #4]
          APP_BLE_p2p_Conn_Update_req.Interval_Max = pr->Interval_Max;
 800caf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caf6:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800cafa:	b29a      	uxth	r2, r3
 800cafc:	4b7b      	ldr	r3, [pc, #492]	; (800ccec <SVCCTL_App_Notification+0x2ac>)
 800cafe:	80da      	strh	r2, [r3, #6]
          APP_BLE_p2p_Conn_Update_req.Slave_Latency = pr->Slave_Latency;
 800cb00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb02:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800cb06:	b29a      	uxth	r2, r3
 800cb08:	4b78      	ldr	r3, [pc, #480]	; (800ccec <SVCCTL_App_Notification+0x2ac>)
 800cb0a:	811a      	strh	r2, [r3, #8]
          APP_BLE_p2p_Conn_Update_req.Timeout_Multiplier = pr->Timeout_Multiplier;
 800cb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb0e:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800cb12:	b29a      	uxth	r2, r3
 800cb14:	4b75      	ldr	r3, [pc, #468]	; (800ccec <SVCCTL_App_Notification+0x2ac>)
 800cb16:	815a      	strh	r2, [r3, #10]
          result = aci_l2cap_connection_parameter_update_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 800cb18:	4b73      	ldr	r3, [pc, #460]	; (800cce8 <SVCCTL_App_Notification+0x2a8>)
 800cb1a:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
 800cb1c:	4b73      	ldr	r3, [pc, #460]	; (800ccec <SVCCTL_App_Notification+0x2ac>)
 800cb1e:	889c      	ldrh	r4, [r3, #4]
 800cb20:	4b72      	ldr	r3, [pc, #456]	; (800ccec <SVCCTL_App_Notification+0x2ac>)
 800cb22:	88dd      	ldrh	r5, [r3, #6]
 800cb24:	4b71      	ldr	r3, [pc, #452]	; (800ccec <SVCCTL_App_Notification+0x2ac>)
 800cb26:	891e      	ldrh	r6, [r3, #8]
 800cb28:	4b70      	ldr	r3, [pc, #448]	; (800ccec <SVCCTL_App_Notification+0x2ac>)
 800cb2a:	895b      	ldrh	r3, [r3, #10]
 800cb2c:	4a6f      	ldr	r2, [pc, #444]	; (800ccec <SVCCTL_App_Notification+0x2ac>)
 800cb2e:	7812      	ldrb	r2, [r2, #0]
 800cb30:	2101      	movs	r1, #1
 800cb32:	9104      	str	r1, [sp, #16]
 800cb34:	9203      	str	r2, [sp, #12]
 800cb36:	2210      	movs	r2, #16
 800cb38:	9202      	str	r2, [sp, #8]
 800cb3a:	2210      	movs	r2, #16
 800cb3c:	9201      	str	r2, [sp, #4]
 800cb3e:	9300      	str	r3, [sp, #0]
 800cb40:	4633      	mov	r3, r6
 800cb42:	462a      	mov	r2, r5
 800cb44:	4621      	mov	r1, r4
 800cb46:	f7fe ff9b 	bl	800ba80 <aci_l2cap_connection_parameter_update_resp>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
          aci_hal_set_radio_activity_mask(0x0020);
 800cb50:	2020      	movs	r0, #32
 800cb52:	f7fe ff1b 	bl	800b98c <aci_hal_set_radio_activity_mask>
        break;
 800cb56:	e002      	b.n	800cb5e <SVCCTL_App_Notification+0x11e>
        break; 
 800cb58:	bf00      	nop
 800cb5a:	e0bd      	b.n	800ccd8 <SVCCTL_App_Notification+0x298>
        break;
 800cb5c:	bf00      	nop
    break; 
 800cb5e:	e0bb      	b.n	800ccd8 <SVCCTL_App_Notification+0x298>
      if (cc->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800cb60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb62:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cb66:	b29a      	uxth	r2, r3
 800cb68:	4b5f      	ldr	r3, [pc, #380]	; (800cce8 <SVCCTL_App_Notification+0x2a8>)
 800cb6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	f040 80b2 	bne.w	800ccd6 <SVCCTL_App_Notification+0x296>
            BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800cb72:	4b5d      	ldr	r3, [pc, #372]	; (800cce8 <SVCCTL_App_Notification+0x2a8>)
 800cb74:	2200      	movs	r2, #0
 800cb76:	84da      	strh	r2, [r3, #38]	; 0x26
            BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800cb78:	4b5b      	ldr	r3, [pc, #364]	; (800cce8 <SVCCTL_App_Notification+0x2a8>)
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
            HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800cb80:	2200      	movs	r2, #0
 800cb82:	2101      	movs	r1, #1
 800cb84:	485a      	ldr	r0, [pc, #360]	; (800ccf0 <SVCCTL_App_Notification+0x2b0>)
 800cb86:	f7f6 fa8f 	bl	80030a8 <HAL_GPIO_WritePin>
            handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800cb8a:	4b56      	ldr	r3, [pc, #344]	; (800cce4 <SVCCTL_App_Notification+0x2a4>)
 800cb8c:	2201      	movs	r2, #1
 800cb8e:	701a      	strb	r2, [r3, #0]
            handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800cb90:	4b55      	ldr	r3, [pc, #340]	; (800cce8 <SVCCTL_App_Notification+0x2a8>)
 800cb92:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800cb94:	4b53      	ldr	r3, [pc, #332]	; (800cce4 <SVCCTL_App_Notification+0x2a4>)
 800cb96:	805a      	strh	r2, [r3, #2]
            P2PC_APP_Notification(&handleNotification);
 800cb98:	4852      	ldr	r0, [pc, #328]	; (800cce4 <SVCCTL_App_Notification+0x2a4>)
 800cb9a:	f000 fabb 	bl	800d114 <P2PC_APP_Notification>
      break; /* EVT_DISCONN_COMPLETE */
 800cb9e:	e09a      	b.n	800ccd6 <SVCCTL_App_Notification+0x296>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 800cba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba2:	3302      	adds	r3, #2
 800cba4:	623b      	str	r3, [r7, #32]
      switch (meta_evt->subevent)
 800cba6:	6a3b      	ldr	r3, [r7, #32]
 800cba8:	781b      	ldrb	r3, [r3, #0]
 800cbaa:	2b01      	cmp	r3, #1
 800cbac:	d002      	beq.n	800cbb4 <SVCCTL_App_Notification+0x174>
 800cbae:	2b02      	cmp	r3, #2
 800cbb0:	d025      	beq.n	800cbfe <SVCCTL_App_Notification+0x1be>
          break;
 800cbb2:	e08f      	b.n	800ccd4 <SVCCTL_App_Notification+0x294>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 800cbb4:	6a3b      	ldr	r3, [r7, #32]
 800cbb6:	3301      	adds	r3, #1
 800cbb8:	60fb      	str	r3, [r7, #12]
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cbc0:	b29a      	uxth	r2, r3
 800cbc2:	4b49      	ldr	r3, [pc, #292]	; (800cce8 <SVCCTL_App_Notification+0x2a8>)
 800cbc4:	84da      	strh	r2, [r3, #38]	; 0x26
          BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800cbc6:	4b48      	ldr	r3, [pc, #288]	; (800cce8 <SVCCTL_App_Notification+0x2a8>)
 800cbc8:	2206      	movs	r2, #6
 800cbca:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
          HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800cbce:	2201      	movs	r2, #1
 800cbd0:	2101      	movs	r1, #1
 800cbd2:	4847      	ldr	r0, [pc, #284]	; (800ccf0 <SVCCTL_App_Notification+0x2b0>)
 800cbd4:	f7f6 fa68 	bl	80030a8 <HAL_GPIO_WritePin>
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800cbd8:	4b42      	ldr	r3, [pc, #264]	; (800cce4 <SVCCTL_App_Notification+0x2a4>)
 800cbda:	2200      	movs	r2, #0
 800cbdc:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800cbde:	4b42      	ldr	r3, [pc, #264]	; (800cce8 <SVCCTL_App_Notification+0x2a8>)
 800cbe0:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800cbe2:	4b40      	ldr	r3, [pc, #256]	; (800cce4 <SVCCTL_App_Notification+0x2a4>)
 800cbe4:	805a      	strh	r2, [r3, #2]
          P2PC_APP_Notification(&handleNotification);
 800cbe6:	483f      	ldr	r0, [pc, #252]	; (800cce4 <SVCCTL_App_Notification+0x2a4>)
 800cbe8:	f000 fa94 	bl	800d114 <P2PC_APP_Notification>
          result = aci_gatt_disc_all_primary_services(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800cbec:	4b3e      	ldr	r3, [pc, #248]	; (800cce8 <SVCCTL_App_Notification+0x2a8>)
 800cbee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f7fe fc38 	bl	800b466 <aci_gatt_disc_all_primary_services>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
          break; /* HCI_EVT_LE_CONN_COMPLETE */
 800cbfc:	e06a      	b.n	800ccd4 <SVCCTL_App_Notification+0x294>
          le_advertising_event = (hci_le_advertising_report_event_rp0 *) meta_evt->data;
 800cbfe:	6a3b      	ldr	r3, [r7, #32]
 800cc00:	3301      	adds	r3, #1
 800cc02:	61fb      	str	r3, [r7, #28]
          event_type = le_advertising_event->Advertising_Report[0].Event_Type;
 800cc04:	69fb      	ldr	r3, [r7, #28]
 800cc06:	785b      	ldrb	r3, [r3, #1]
 800cc08:	76fb      	strb	r3, [r7, #27]
          event_data_size = le_advertising_event->Advertising_Report[0].Length_Data;
 800cc0a:	69fb      	ldr	r3, [r7, #28]
 800cc0c:	7a5b      	ldrb	r3, [r3, #9]
 800cc0e:	76bb      	strb	r3, [r7, #26]
          adv_report_data = (uint8_t*)(&le_advertising_event->Advertising_Report[0].Length_Data) + 1;
 800cc10:	69fb      	ldr	r3, [r7, #28]
 800cc12:	3309      	adds	r3, #9
 800cc14:	3301      	adds	r3, #1
 800cc16:	617b      	str	r3, [r7, #20]
          k = 0;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          if (event_type == ADV_IND)
 800cc1c:	7efb      	ldrb	r3, [r7, #27]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d157      	bne.n	800ccd2 <SVCCTL_App_Notification+0x292>
            while(k < event_data_size)
 800cc22:	e052      	b.n	800ccca <SVCCTL_App_Notification+0x28a>
              adlength = adv_report_data[k];
 800cc24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc26:	697a      	ldr	r2, [r7, #20]
 800cc28:	4413      	add	r3, r2
 800cc2a:	781b      	ldrb	r3, [r3, #0]
 800cc2c:	74fb      	strb	r3, [r7, #19]
              adtype = adv_report_data[k + 1];
 800cc2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc30:	3301      	adds	r3, #1
 800cc32:	697a      	ldr	r2, [r7, #20]
 800cc34:	4413      	add	r3, r2
 800cc36:	781b      	ldrb	r3, [r3, #0]
 800cc38:	74bb      	strb	r3, [r7, #18]
              switch (adtype)
 800cc3a:	7cbb      	ldrb	r3, [r7, #18]
 800cc3c:	2b0a      	cmp	r3, #10
 800cc3e:	d03a      	beq.n	800ccb6 <SVCCTL_App_Notification+0x276>
 800cc40:	2b0a      	cmp	r3, #10
 800cc42:	dc02      	bgt.n	800cc4a <SVCCTL_App_Notification+0x20a>
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	d038      	beq.n	800ccba <SVCCTL_App_Notification+0x27a>
                  break;
 800cc48:	e03a      	b.n	800ccc0 <SVCCTL_App_Notification+0x280>
              switch (adtype)
 800cc4a:	2b16      	cmp	r3, #22
 800cc4c:	d037      	beq.n	800ccbe <SVCCTL_App_Notification+0x27e>
 800cc4e:	2bff      	cmp	r3, #255	; 0xff
 800cc50:	d000      	beq.n	800cc54 <SVCCTL_App_Notification+0x214>
                  break;
 800cc52:	e035      	b.n	800ccc0 <SVCCTL_App_Notification+0x280>
                  if (adlength >= 7 && adv_report_data[k + 2] == 0x01)
 800cc54:	7cfb      	ldrb	r3, [r7, #19]
 800cc56:	2b06      	cmp	r3, #6
 800cc58:	d92b      	bls.n	800ccb2 <SVCCTL_App_Notification+0x272>
 800cc5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc5c:	3302      	adds	r3, #2
 800cc5e:	697a      	ldr	r2, [r7, #20]
 800cc60:	4413      	add	r3, r2
 800cc62:	781b      	ldrb	r3, [r3, #0]
 800cc64:	2b01      	cmp	r3, #1
 800cc66:	d124      	bne.n	800ccb2 <SVCCTL_App_Notification+0x272>
                    switch (adv_report_data[k + 3])
 800cc68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc6a:	3303      	adds	r3, #3
 800cc6c:	697a      	ldr	r2, [r7, #20]
 800cc6e:	4413      	add	r3, r2
 800cc70:	781b      	ldrb	r3, [r3, #0]
 800cc72:	2b83      	cmp	r3, #131	; 0x83
 800cc74:	d000      	beq.n	800cc78 <SVCCTL_App_Notification+0x238>
                        break;
 800cc76:	e01d      	b.n	800ccb4 <SVCCTL_App_Notification+0x274>
                        BleApplicationContext.DeviceServerFound = 0x01;
 800cc78:	4b1b      	ldr	r3, [pc, #108]	; (800cce8 <SVCCTL_App_Notification+0x2a8>)
 800cc7a:	2201      	movs	r2, #1
 800cc7c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                        SERVER_REMOTE_BDADDR[0] = le_advertising_event->Advertising_Report[0].Address[0];
 800cc80:	69fb      	ldr	r3, [r7, #28]
 800cc82:	78da      	ldrb	r2, [r3, #3]
 800cc84:	4b1b      	ldr	r3, [pc, #108]	; (800ccf4 <SVCCTL_App_Notification+0x2b4>)
 800cc86:	701a      	strb	r2, [r3, #0]
                        SERVER_REMOTE_BDADDR[1] = le_advertising_event->Advertising_Report[0].Address[1];
 800cc88:	69fb      	ldr	r3, [r7, #28]
 800cc8a:	791a      	ldrb	r2, [r3, #4]
 800cc8c:	4b19      	ldr	r3, [pc, #100]	; (800ccf4 <SVCCTL_App_Notification+0x2b4>)
 800cc8e:	705a      	strb	r2, [r3, #1]
                        SERVER_REMOTE_BDADDR[2] = le_advertising_event->Advertising_Report[0].Address[2];
 800cc90:	69fb      	ldr	r3, [r7, #28]
 800cc92:	795a      	ldrb	r2, [r3, #5]
 800cc94:	4b17      	ldr	r3, [pc, #92]	; (800ccf4 <SVCCTL_App_Notification+0x2b4>)
 800cc96:	709a      	strb	r2, [r3, #2]
                        SERVER_REMOTE_BDADDR[3] = le_advertising_event->Advertising_Report[0].Address[3];
 800cc98:	69fb      	ldr	r3, [r7, #28]
 800cc9a:	799a      	ldrb	r2, [r3, #6]
 800cc9c:	4b15      	ldr	r3, [pc, #84]	; (800ccf4 <SVCCTL_App_Notification+0x2b4>)
 800cc9e:	70da      	strb	r2, [r3, #3]
                        SERVER_REMOTE_BDADDR[4] = le_advertising_event->Advertising_Report[0].Address[4];
 800cca0:	69fb      	ldr	r3, [r7, #28]
 800cca2:	79da      	ldrb	r2, [r3, #7]
 800cca4:	4b13      	ldr	r3, [pc, #76]	; (800ccf4 <SVCCTL_App_Notification+0x2b4>)
 800cca6:	711a      	strb	r2, [r3, #4]
                        SERVER_REMOTE_BDADDR[5] = le_advertising_event->Advertising_Report[0].Address[5];
 800cca8:	69fb      	ldr	r3, [r7, #28]
 800ccaa:	7a1a      	ldrb	r2, [r3, #8]
 800ccac:	4b11      	ldr	r3, [pc, #68]	; (800ccf4 <SVCCTL_App_Notification+0x2b4>)
 800ccae:	715a      	strb	r2, [r3, #5]
                        break;
 800ccb0:	e000      	b.n	800ccb4 <SVCCTL_App_Notification+0x274>
                  }
 800ccb2:	bf00      	nop
                  break;
 800ccb4:	e004      	b.n	800ccc0 <SVCCTL_App_Notification+0x280>
                break;
 800ccb6:	bf00      	nop
 800ccb8:	e002      	b.n	800ccc0 <SVCCTL_App_Notification+0x280>
                  break;
 800ccba:	bf00      	nop
 800ccbc:	e000      	b.n	800ccc0 <SVCCTL_App_Notification+0x280>
                  break;
 800ccbe:	bf00      	nop
              k += adlength + 1;
 800ccc0:	7cfb      	ldrb	r3, [r7, #19]
 800ccc2:	3301      	adds	r3, #1
 800ccc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ccc6:	4413      	add	r3, r2
 800ccc8:	63fb      	str	r3, [r7, #60]	; 0x3c
            while(k < event_data_size)
 800ccca:	7ebb      	ldrb	r3, [r7, #26]
 800cccc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	dba8      	blt.n	800cc24 <SVCCTL_App_Notification+0x1e4>
          break;
 800ccd2:	bf00      	nop
      break; /* HCI_EVT_LE_META_EVENT */
 800ccd4:	e000      	b.n	800ccd8 <SVCCTL_App_Notification+0x298>
      break; /* EVT_DISCONN_COMPLETE */
 800ccd6:	bf00      	nop
   }
  return (SVCCTL_UserEvtFlowEnable);
 800ccd8:	2301      	movs	r3, #1
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3744      	adds	r7, #68	; 0x44
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cce2:	bf00      	nop
 800cce4:	200007b0 	.word	0x200007b0
 800cce8:	200002dc 	.word	0x200002dc
 800ccec:	200007bc 	.word	0x200007bc
 800ccf0:	48000400 	.word	0x48000400
 800ccf4:	200007b4 	.word	0x200007b4

0800ccf8 <APP_BLE_Get_Client_Connection_Status>:

APP_BLE_ConnStatus_t APP_BLE_Get_Client_Connection_Status( uint16_t Connection_Handle )
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b083      	sub	sp, #12
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	4603      	mov	r3, r0
 800cd00:	80fb      	strh	r3, [r7, #6]

  if (BleApplicationContext.BleApplicationContext_legacy.connectionHandle == Connection_Handle)
 800cd02:	4b08      	ldr	r3, [pc, #32]	; (800cd24 <APP_BLE_Get_Client_Connection_Status+0x2c>)
 800cd04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cd06:	88fa      	ldrh	r2, [r7, #6]
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	d103      	bne.n	800cd14 <APP_BLE_Get_Client_Connection_Status+0x1c>
  {
    return BleApplicationContext.Device_Connection_Status;
 800cd0c:	4b05      	ldr	r3, [pc, #20]	; (800cd24 <APP_BLE_Get_Client_Connection_Status+0x2c>)
 800cd0e:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800cd12:	e000      	b.n	800cd16 <APP_BLE_Get_Client_Connection_Status+0x1e>
  }
  return APP_BLE_IDLE;
 800cd14:	2300      	movs	r3, #0
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	370c      	adds	r7, #12
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd20:	4770      	bx	lr
 800cd22:	bf00      	nop
 800cd24:	200002dc 	.word	0x200002dc

0800cd28 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b082      	sub	sp, #8
 800cd2c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800cd2e:	4b06      	ldr	r3, [pc, #24]	; (800cd48 <Ble_Tl_Init+0x20>)
 800cd30:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800cd32:	4b06      	ldr	r3, [pc, #24]	; (800cd4c <Ble_Tl_Init+0x24>)
 800cd34:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800cd36:	463b      	mov	r3, r7
 800cd38:	4619      	mov	r1, r3
 800cd3a:	4805      	ldr	r0, [pc, #20]	; (800cd50 <Ble_Tl_Init+0x28>)
 800cd3c:	f7ff f8b4 	bl	800bea8 <hci_init>

  return;
 800cd40:	bf00      	nop
}
 800cd42:	3708      	adds	r7, #8
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}
 800cd48:	200300b8 	.word	0x200300b8
 800cd4c:	0800d091 	.word	0x0800d091
 800cd50:	0800d059 	.word	0x0800d059

0800cd54 <Ble_Hci_Gap_Gatt_Init>:

 static void Ble_Hci_Gap_Gatt_Init(void){
 800cd54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd56:	b091      	sub	sp, #68	; 0x44
 800cd58:	af06      	add	r7, sp, #24
  uint8_t role;
  uint8_t index;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE }; 
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	80bb      	strh	r3, [r7, #4]
  
  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
   hci_reset();
 800cd5e:	f7fe fe66 	bl	800ba2e <hci_reset>
  
   /**
   * Write the BD Address
   */
 
  bd_addr = BleGetBdAddress();
 800cd62:	f000 f913 	bl	800cf8c <BleGetBdAddress>
 800cd66:	6238      	str	r0, [r7, #32]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800cd68:	6a3a      	ldr	r2, [r7, #32]
 800cd6a:	2106      	movs	r1, #6
 800cd6c:	2000      	movs	r0, #0
 800cd6e:	f7fe fd3f 	bl	800b7f0 <aci_hal_write_config_data>
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 800cd72:	f64e 536e 	movw	r3, #60782	; 0xed6e
 800cd76:	60fb      	str	r3, [r7, #12]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 800cd78:	f7ff fdee 	bl	800c958 <LL_FLASH_GetUDN>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	60bb      	str	r3, [r7, #8]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 800cd80:	f107 0308 	add.w	r3, r7, #8
 800cd84:	461a      	mov	r2, r3
 800cd86:	2106      	movs	r1, #6
 800cd88:	202e      	movs	r0, #46	; 0x2e
 800cd8a:	f7fe fd31 	bl	800b7f0 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK 
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800cd8e:	4a49      	ldr	r2, [pc, #292]	; (800ceb4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800cd90:	2110      	movs	r1, #16
 800cd92:	2018      	movs	r0, #24
 800cd94:	f7fe fd2c 	bl	800b7f0 <aci_hal_write_config_data>
    
   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 800cd98:	4a47      	ldr	r2, [pc, #284]	; (800ceb8 <Ble_Hci_Gap_Gatt_Init+0x164>)
 800cd9a:	2110      	movs	r1, #16
 800cd9c:	2008      	movs	r0, #8
 800cd9e:	f7fe fd27 	bl	800b7f0 <aci_hal_write_config_data>
  
  /**
     * Set TX Power to 0dBm.
     */
    aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800cda2:	2118      	movs	r1, #24
 800cda4:	2001      	movs	r0, #1
 800cda6:	f7fe fd93 	bl	800b8d0 <aci_hal_set_tx_power_level>
  
/**
   * Initialize GATT interface
   */
  aci_gatt_init();
 800cdaa:	f7fe faa4 	bl	800b2f6 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	77fb      	strb	r3, [r7, #31]
#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
#endif

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
 800cdb2:	7ffb      	ldrb	r3, [r7, #31]
 800cdb4:	f043 0304 	orr.w	r3, r3, #4
 800cdb8:	77fb      	strb	r3, [r7, #31]
#endif

  if (role > 0)
 800cdba:	7ffb      	ldrb	r3, [r7, #31]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d01e      	beq.n	800cdfe <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    const char *name = "STM32WB";
 800cdc0:	4b3e      	ldr	r3, [pc, #248]	; (800cebc <Ble_Hci_Gap_Gatt_Init+0x168>)
 800cdc2:	61bb      	str	r3, [r7, #24]

    aci_gap_init(role, 0,
 800cdc4:	f107 0216 	add.w	r2, r7, #22
 800cdc8:	7ff8      	ldrb	r0, [r7, #31]
 800cdca:	f107 0312 	add.w	r3, r7, #18
 800cdce:	9301      	str	r3, [sp, #4]
 800cdd0:	f107 0314 	add.w	r3, r7, #20
 800cdd4:	9300      	str	r3, [sp, #0]
 800cdd6:	4613      	mov	r3, r2
 800cdd8:	2207      	movs	r2, #7
 800cdda:	2100      	movs	r1, #0
 800cddc:	f7fe f88c 	bl	800aef8 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800cde0:	8afc      	ldrh	r4, [r7, #22]
 800cde2:	8abd      	ldrh	r5, [r7, #20]
 800cde4:	69b8      	ldr	r0, [r7, #24]
 800cde6:	f7f3 f9cb 	bl	8000180 <strlen>
 800cdea:	4603      	mov	r3, r0
 800cdec:	b2da      	uxtb	r2, r3
 800cdee:	69bb      	ldr	r3, [r7, #24]
 800cdf0:	9300      	str	r3, [sp, #0]
 800cdf2:	4613      	mov	r3, r2
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	4629      	mov	r1, r5
 800cdf8:	4620      	mov	r0, r4
 800cdfa:	f7fe faa6 	bl	800b34a <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

    if(aci_gatt_update_char_value(gap_service_handle,
 800cdfe:	8af8      	ldrh	r0, [r7, #22]
 800ce00:	8a79      	ldrh	r1, [r7, #18]
 800ce02:	1d3b      	adds	r3, r7, #4
 800ce04:	9300      	str	r3, [sp, #0]
 800ce06:	2302      	movs	r3, #2
 800ce08:	2200      	movs	r2, #0
 800ce0a:	f7fe fa9e 	bl	800b34a <aci_gatt_update_char_value>
    }

    /**
     * Initialize IO capability
     */
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800ce0e:	4b2c      	ldr	r3, [pc, #176]	; (800cec0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800ce10:	2201      	movs	r2, #1
 800ce12:	701a      	strb	r2, [r3, #0]
    aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800ce14:	4b2a      	ldr	r3, [pc, #168]	; (800cec0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800ce16:	781b      	ldrb	r3, [r3, #0]
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7fd ff6d 	bl	800acf8 <aci_gap_set_io_capability>

    /**
     * Initialize authentication
     */
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800ce1e:	4b28      	ldr	r3, [pc, #160]	; (800cec0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800ce20:	2201      	movs	r2, #1
 800ce22:	705a      	strb	r2, [r3, #1]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 800ce24:	4b26      	ldr	r3, [pc, #152]	; (800cec0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800ce26:	2200      	movs	r2, #0
 800ce28:	70da      	strb	r2, [r3, #3]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = 8;
 800ce2a:	4b25      	ldr	r3, [pc, #148]	; (800cec0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800ce2c:	2208      	movs	r2, #8
 800ce2e:	755a      	strb	r2, [r3, #21]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
 800ce30:	4b23      	ldr	r3, [pc, #140]	; (800cec0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800ce32:	2210      	movs	r2, #16
 800ce34:	759a      	strb	r2, [r3, #22]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = 1;
 800ce36:	4b22      	ldr	r3, [pc, #136]	; (800cec0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800ce38:	2201      	movs	r2, #1
 800ce3a:	751a      	strb	r2, [r3, #20]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
 800ce3c:	4b20      	ldr	r3, [pc, #128]	; (800cec0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800ce3e:	4a21      	ldr	r2, [pc, #132]	; (800cec4 <Ble_Hci_Gap_Gatt_Init+0x170>)
 800ce40:	619a      	str	r2, [r3, #24]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = 1;
 800ce42:	4b1f      	ldr	r3, [pc, #124]	; (800cec0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800ce44:	2201      	movs	r2, #1
 800ce46:	709a      	strb	r2, [r3, #2]
    for (index = 0; index < 16; index++)
 800ce48:	2300      	movs	r3, #0
 800ce4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ce4e:	e00b      	b.n	800ce68 <Ble_Hci_Gap_Gatt_Init+0x114>
    {
      BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 800ce50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce54:	4a1a      	ldr	r2, [pc, #104]	; (800cec0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800ce56:	4413      	add	r3, r2
 800ce58:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ce5c:	711a      	strb	r2, [r3, #4]
    for (index = 0; index < 16; index++)
 800ce5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce62:	3301      	adds	r3, #1
 800ce64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ce68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce6c:	2b0f      	cmp	r3, #15
 800ce6e:	d9ef      	bls.n	800ce50 <Ble_Hci_Gap_Gatt_Init+0xfc>
    }

    aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800ce70:	4b13      	ldr	r3, [pc, #76]	; (800cec0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800ce72:	789d      	ldrb	r5, [r3, #2]
 800ce74:	4b12      	ldr	r3, [pc, #72]	; (800cec0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800ce76:	785e      	ldrb	r6, [r3, #1]
 800ce78:	4b11      	ldr	r3, [pc, #68]	; (800cec0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800ce7a:	7d5b      	ldrb	r3, [r3, #21]
 800ce7c:	4a10      	ldr	r2, [pc, #64]	; (800cec0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800ce7e:	7d92      	ldrb	r2, [r2, #22]
 800ce80:	490f      	ldr	r1, [pc, #60]	; (800cec0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800ce82:	7d09      	ldrb	r1, [r1, #20]
 800ce84:	480e      	ldr	r0, [pc, #56]	; (800cec0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800ce86:	6980      	ldr	r0, [r0, #24]
 800ce88:	2400      	movs	r4, #0
 800ce8a:	9404      	str	r4, [sp, #16]
 800ce8c:	9003      	str	r0, [sp, #12]
 800ce8e:	9102      	str	r1, [sp, #8]
 800ce90:	9201      	str	r2, [sp, #4]
 800ce92:	9300      	str	r3, [sp, #0]
 800ce94:	2300      	movs	r3, #0
 800ce96:	2200      	movs	r2, #0
 800ce98:	4631      	mov	r1, r6
 800ce9a:	4628      	mov	r0, r5
 800ce9c:	f7fd ff7d 	bl	800ad9a <aci_gap_set_authentication_requirement>
                                           );

    /**
     * Initialize whitelist
     */
    if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800cea0:	4b07      	ldr	r3, [pc, #28]	; (800cec0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800cea2:	789b      	ldrb	r3, [r3, #2]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d001      	beq.n	800ceac <Ble_Hci_Gap_Gatt_Init+0x158>
    {
      aci_gap_configure_whitelist();
 800cea8:	f7fe f8b1 	bl	800b00e <aci_gap_configure_whitelist>
    }
  
}
 800ceac:	bf00      	nop
 800ceae:	372c      	adds	r7, #44	; 0x2c
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ceb4:	0800f2c4 	.word	0x0800f2c4
 800ceb8:	0800f2d4 	.word	0x0800f2d4
 800cebc:	0800f1a4 	.word	0x0800f1a4
 800cec0:	200002dc 	.word	0x200002dc
 800cec4:	0001b207 	.word	0x0001b207

0800cec8 <Scan_Request>:

static void Scan_Request( void )
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b082      	sub	sp, #8
 800cecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Scan_Request_1 */

  /* USER CODE END Scan_Request_1 */
  tBleStatus result;
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 800cece:	4b0e      	ldr	r3, [pc, #56]	; (800cf08 <Scan_Request+0x40>)
 800ced0:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800ced4:	2b06      	cmp	r3, #6
 800ced6:	d012      	beq.n	800cefe <Scan_Request+0x36>
  {
    /* USER CODE BEGIN APP_BLE_CONNECTED_CLIENT */

    /* USER CODE END APP_BLE_CONNECTED_CLIENT */
    result = aci_gap_start_general_discovery_proc(SCAN_P, SCAN_L, PUBLIC_ADDR, 1);
 800ced8:	2301      	movs	r3, #1
 800ceda:	2200      	movs	r2, #0
 800cedc:	f44f 7148 	mov.w	r1, #800	; 0x320
 800cee0:	f44f 7048 	mov.w	r0, #800	; 0x320
 800cee4:	f7fe f8bc 	bl	800b060 <aci_gap_start_general_discovery_proc>
 800cee8:	4603      	mov	r3, r0
 800ceea:	71fb      	strb	r3, [r7, #7]
    if (result == BLE_STATUS_SUCCESS)
 800ceec:	79fb      	ldrb	r3, [r7, #7]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d105      	bne.n	800cefe <Scan_Request+0x36>
    {
    /* USER CODE BEGIN BLE_SCAN_SUCCESS */
    	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 800cef2:	2201      	movs	r2, #1
 800cef4:	2120      	movs	r1, #32
 800cef6:	4805      	ldr	r0, [pc, #20]	; (800cf0c <Scan_Request+0x44>)
 800cef8:	f7f6 f8d6 	bl	80030a8 <HAL_GPIO_WritePin>
    }
  }
  /* USER CODE BEGIN Scan_Request_2 */

  /* USER CODE END Scan_Request_2 */
  return;
 800cefc:	bf00      	nop
 800cefe:	bf00      	nop
}
 800cf00:	3708      	adds	r7, #8
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}
 800cf06:	bf00      	nop
 800cf08:	200002dc 	.word	0x200002dc
 800cf0c:	48000400 	.word	0x48000400

0800cf10 <Connect_Request>:

static void Connect_Request( void )
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b08a      	sub	sp, #40	; 0x28
 800cf14:	af08      	add	r7, sp, #32

  /* USER CODE END Connect_Request_1 */
  tBleStatus result;
  APP_DBG_MSG("\r\n\r** CREATE CONNECTION TO SERVER **  \r\n\r");

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 800cf16:	4b17      	ldr	r3, [pc, #92]	; (800cf74 <Connect_Request+0x64>)
 800cf18:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800cf1c:	2b06      	cmp	r3, #6
 800cf1e:	d025      	beq.n	800cf6c <Connect_Request+0x5c>
  {
    result = aci_gap_create_connection(SCAN_P,
 800cf20:	2310      	movs	r3, #16
 800cf22:	9306      	str	r3, [sp, #24]
 800cf24:	2310      	movs	r3, #16
 800cf26:	9305      	str	r3, [sp, #20]
 800cf28:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800cf2c:	9304      	str	r3, [sp, #16]
 800cf2e:	2300      	movs	r3, #0
 800cf30:	9303      	str	r3, [sp, #12]
 800cf32:	2350      	movs	r3, #80	; 0x50
 800cf34:	9302      	str	r3, [sp, #8]
 800cf36:	2328      	movs	r3, #40	; 0x28
 800cf38:	9301      	str	r3, [sp, #4]
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	9300      	str	r3, [sp, #0]
 800cf3e:	4b0e      	ldr	r3, [pc, #56]	; (800cf78 <Connect_Request+0x68>)
 800cf40:	2200      	movs	r2, #0
 800cf42:	f44f 7148 	mov.w	r1, #800	; 0x320
 800cf46:	f44f 7048 	mov.w	r0, #800	; 0x320
 800cf4a:	f7fe f908 	bl	800b15e <aci_gap_create_connection>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	71fb      	strb	r3, [r7, #7]
                                       0,
                                       SUPERV_TIMEOUT,
                                       CONN_L1,
                                       CONN_L2);

    if (result == BLE_STATUS_SUCCESS)
 800cf52:	79fb      	ldrb	r3, [r7, #7]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d104      	bne.n	800cf62 <Connect_Request+0x52>
    {
    /* USER CODE BEGIN BLE_CONNECT_SUCCESS */

    /* USER CODE END BLE_CONNECT_SUCCESS */
    BleApplicationContext.Device_Connection_Status = APP_BLE_LP_CONNECTING;
 800cf58:	4b06      	ldr	r3, [pc, #24]	; (800cf74 <Connect_Request+0x64>)
 800cf5a:	2204      	movs	r2, #4
 800cf5c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
    }
  }
  /* USER CODE BEGIN Connect_Request_2 */

  /* USER CODE END Connect_Request_2 */
  return;
 800cf60:	e004      	b.n	800cf6c <Connect_Request+0x5c>
      BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800cf62:	4b04      	ldr	r3, [pc, #16]	; (800cf74 <Connect_Request+0x64>)
 800cf64:	2200      	movs	r2, #0
 800cf66:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  return;
 800cf6a:	bf00      	nop
 800cf6c:	bf00      	nop
}
 800cf6e:	3708      	adds	r7, #8
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}
 800cf74:	200002dc 	.word	0x200002dc
 800cf78:	200007b4 	.word	0x200007b4

0800cf7c <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 800cf7c:	b480      	push	{r7}
 800cf7e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */
	//BSP_LED_Off(LED_GREEN);
	//HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
/* USER CODE END Switch_OFF_GPIO */
}
 800cf80:	bf00      	nop
 800cf82:	46bd      	mov	sp, r7
 800cf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf88:	4770      	bx	lr
	...

0800cf8c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b086      	sub	sp, #24
 800cf90:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800cf92:	f7ff fce1 	bl	800c958 <LL_FLASH_GetUDN>
 800cf96:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 800cf98:	693b      	ldr	r3, [r7, #16]
 800cf9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf9e:	d023      	beq.n	800cfe8 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800cfa0:	f7ff fcf2 	bl	800c988 <LL_FLASH_GetSTCompanyID>
 800cfa4:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800cfa6:	f7ff fce3 	bl	800c970 <LL_FLASH_GetDeviceID>
 800cfaa:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 800cfac:	693b      	ldr	r3, [r7, #16]
 800cfae:	b2da      	uxtb	r2, r3
 800cfb0:	4b16      	ldr	r3, [pc, #88]	; (800d00c <BleGetBdAddress+0x80>)
 800cfb2:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 800cfb4:	693b      	ldr	r3, [r7, #16]
 800cfb6:	0a1b      	lsrs	r3, r3, #8
 800cfb8:	b2da      	uxtb	r2, r3
 800cfba:	4b14      	ldr	r3, [pc, #80]	; (800d00c <BleGetBdAddress+0x80>)
 800cfbc:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	0c1b      	lsrs	r3, r3, #16
 800cfc2:	b2da      	uxtb	r2, r3
 800cfc4:	4b11      	ldr	r3, [pc, #68]	; (800d00c <BleGetBdAddress+0x80>)
 800cfc6:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	b2da      	uxtb	r2, r3
 800cfcc:	4b0f      	ldr	r3, [pc, #60]	; (800d00c <BleGetBdAddress+0x80>)
 800cfce:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	b2da      	uxtb	r2, r3
 800cfd4:	4b0d      	ldr	r3, [pc, #52]	; (800d00c <BleGetBdAddress+0x80>)
 800cfd6:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800cfd8:	68bb      	ldr	r3, [r7, #8]
 800cfda:	0a1b      	lsrs	r3, r3, #8
 800cfdc:	b2da      	uxtb	r2, r3
 800cfde:	4b0b      	ldr	r3, [pc, #44]	; (800d00c <BleGetBdAddress+0x80>)
 800cfe0:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 800cfe2:	4b0a      	ldr	r3, [pc, #40]	; (800d00c <BleGetBdAddress+0x80>)
 800cfe4:	617b      	str	r3, [r7, #20]
 800cfe6:	e00b      	b.n	800d000 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800cfe8:	2000      	movs	r0, #0
 800cfea:	f7ff fbd9 	bl	800c7a0 <OTP_Read>
 800cfee:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d002      	beq.n	800cffc <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	617b      	str	r3, [r7, #20]
 800cffa:	e001      	b.n	800d000 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 800cffc:	4b04      	ldr	r3, [pc, #16]	; (800d010 <BleGetBdAddress+0x84>)
 800cffe:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 800d000:	697b      	ldr	r3, [r7, #20]
}
 800d002:	4618      	mov	r0, r3
 800d004:	3718      	adds	r7, #24
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}
 800d00a:	bf00      	nop
 800d00c:	200004c4 	.word	0x200004c4
 800d010:	0800f2bc 	.word	0x0800f2bc

0800d014 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b082      	sub	sp, #8
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800d01c:	2100      	movs	r1, #0
 800d01e:	2020      	movs	r0, #32
 800d020:	f7f4 ffb8 	bl	8001f94 <UTIL_SEQ_SetTask>
  return;
 800d024:	bf00      	nop
}
 800d026:	3708      	adds	r7, #8
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}

0800d02c <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b082      	sub	sp, #8
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800d034:	2001      	movs	r0, #1
 800d036:	f7f5 f813 	bl	8002060 <UTIL_SEQ_SetEvt>
  return;
 800d03a:	bf00      	nop
}
 800d03c:	3708      	adds	r7, #8
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}

0800d042 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800d042:	b580      	push	{r7, lr}
 800d044:	b082      	sub	sp, #8
 800d046:	af00      	add	r7, sp, #0
 800d048:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800d04a:	2001      	movs	r0, #1
 800d04c:	f7f5 f826 	bl	800209c <UTIL_SEQ_WaitEvt>
  return;
 800d050:	bf00      	nop
}
 800d052:	3708      	adds	r7, #8
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}

0800d058 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b084      	sub	sp, #16
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload; 
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	60fb      	str	r3, [r7, #12]
  
  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	685b      	ldr	r3, [r3, #4]
 800d068:	3308      	adds	r3, #8
 800d06a:	4618      	mov	r0, r3
 800d06c:	f7fe fe96 	bl	800bd9c <SVCCTL_UserEvtRx>
 800d070:	4603      	mov	r3, r0
 800d072:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800d074:	7afb      	ldrb	r3, [r7, #11]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d003      	beq.n	800d082 <BLE_UserEvtRx+0x2a>
{
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	2201      	movs	r2, #1
 800d07e:	701a      	strb	r2, [r3, #0]
}
  else
{
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 800d080:	e002      	b.n	800d088 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	2200      	movs	r2, #0
 800d086:	701a      	strb	r2, [r3, #0]
}
 800d088:	bf00      	nop
 800d08a:	3710      	adds	r7, #16
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}

0800d090 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b084      	sub	sp, #16
 800d094:	af00      	add	r7, sp, #0
 800d096:	4603      	mov	r3, r0
 800d098:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 800d09a:	79fb      	ldrb	r3, [r7, #7]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d002      	beq.n	800d0a6 <BLE_StatusNot+0x16>
 800d0a0:	2b01      	cmp	r3, #1
 800d0a2:	d006      	beq.n	800d0b2 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 800d0a4:	e00b      	b.n	800d0be <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800d0a6:	233f      	movs	r3, #63	; 0x3f
 800d0a8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800d0aa:	68f8      	ldr	r0, [r7, #12]
 800d0ac:	f7f4 ff9c 	bl	8001fe8 <UTIL_SEQ_PauseTask>
      break;
 800d0b0:	e005      	b.n	800d0be <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800d0b2:	233f      	movs	r3, #63	; 0x3f
 800d0b4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800d0b6:	68f8      	ldr	r0, [r7, #12]
 800d0b8:	f7f4 ffb4 	bl	8002024 <UTIL_SEQ_ResumeTask>
      break;
 800d0bc:	bf00      	nop
  }
  return;
 800d0be:	bf00      	nop
}
 800d0c0:	3710      	adds	r7, #16
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}
	...

0800d0c8 <P2PC_APP_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PC_APP_Init(void)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b082      	sub	sp, #8
 800d0cc:	af00      	add	r7, sp, #0
  uint8_t index =0;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN P2PC_APP_Init_1 */

  UTIL_SEQ_RegTask( 1<< CFG_TASK_SEARCH_SERVICE_ID, UTIL_SEQ_RFU, Update_Service );
 800d0d2:	4a0d      	ldr	r2, [pc, #52]	; (800d108 <P2PC_APP_Init+0x40>)
 800d0d4:	2100      	movs	r1, #0
 800d0d6:	2004      	movs	r0, #4
 800d0d8:	f7f4 ff3c 	bl	8001f54 <UTIL_SEQ_RegTask>

  /**
   * Initialize LedButton Service
   */

  for(index = 0; index < BLE_CFG_CLT_MAX_NBR_CB; index++)
 800d0dc:	2300      	movs	r3, #0
 800d0de:	71fb      	strb	r3, [r7, #7]
 800d0e0:	e008      	b.n	800d0f4 <P2PC_APP_Init+0x2c>
  {
    aP2PClientContext[index].state= APP_BLE_IDLE;
 800d0e2:	79fb      	ldrb	r3, [r7, #7]
 800d0e4:	4a09      	ldr	r2, [pc, #36]	; (800d10c <P2PC_APP_Init+0x44>)
 800d0e6:	011b      	lsls	r3, r3, #4
 800d0e8:	4413      	add	r3, r2
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	701a      	strb	r2, [r3, #0]
  for(index = 0; index < BLE_CFG_CLT_MAX_NBR_CB; index++)
 800d0ee:	79fb      	ldrb	r3, [r7, #7]
 800d0f0:	3301      	adds	r3, #1
 800d0f2:	71fb      	strb	r3, [r7, #7]
 800d0f4:	79fb      	ldrb	r3, [r7, #7]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d0f3      	beq.n	800d0e2 <P2PC_APP_Init+0x1a>
  }

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterCltHandler(Event_Handler);
 800d0fa:	4805      	ldr	r0, [pc, #20]	; (800d110 <P2PC_APP_Init+0x48>)
 800d0fc:	f7fe fe34 	bl	800bd68 <SVCCTL_RegisterCltHandler>
#endif

/* USER CODE BEGIN P2PC_APP_Init_2 */

/* USER CODE END P2PC_APP_Init_2 */
  return;
 800d100:	bf00      	nop
}
 800d102:	3708      	adds	r7, #8
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}
 800d108:	0800d6cd 	.word	0x0800d6cd
 800d10c:	20000370 	.word	0x20000370
 800d110:	0800d171 	.word	0x0800d171

0800d114 <P2PC_APP_Notification>:

void P2PC_APP_Notification(P2PC_APP_ConnHandle_Not_evt_t *pNotification)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b084      	sub	sp, #16
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PC_APP_Notification_1 */

/* USER CODE END P2PC_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	781b      	ldrb	r3, [r3, #0]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d01b      	beq.n	800d15c <P2PC_APP_Notification+0x48>
 800d124:	2b01      	cmp	r3, #1
 800d126:	d000      	beq.n	800d12a <P2PC_APP_Notification+0x16>

    default:
/* USER CODE BEGIN P2P_Evt_Opcode_Default */

/* USER CODE END P2P_Evt_Opcode_Default */
      break;
 800d128:	e019      	b.n	800d15e <P2PC_APP_Notification+0x4a>
      uint8_t index = 0;
 800d12a:	2300      	movs	r3, #0
 800d12c:	73fb      	strb	r3, [r7, #15]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d12e:	e005      	b.n	800d13c <P2PC_APP_Notification+0x28>
        aP2PClientContext[index].state = APP_BLE_IDLE;
 800d130:	7bfb      	ldrb	r3, [r7, #15]
 800d132:	4a0d      	ldr	r2, [pc, #52]	; (800d168 <P2PC_APP_Notification+0x54>)
 800d134:	011b      	lsls	r3, r3, #4
 800d136:	4413      	add	r3, r2
 800d138:	2200      	movs	r2, #0
 800d13a:	701a      	strb	r2, [r3, #0]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d13c:	7bfb      	ldrb	r3, [r7, #15]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d106      	bne.n	800d150 <P2PC_APP_Notification+0x3c>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
 800d142:	7bfb      	ldrb	r3, [r7, #15]
 800d144:	4a08      	ldr	r2, [pc, #32]	; (800d168 <P2PC_APP_Notification+0x54>)
 800d146:	011b      	lsls	r3, r3, #4
 800d148:	4413      	add	r3, r2
 800d14a:	781b      	ldrb	r3, [r3, #0]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d1ef      	bne.n	800d130 <P2PC_APP_Notification+0x1c>
      HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800d150:	2200      	movs	r2, #0
 800d152:	2120      	movs	r1, #32
 800d154:	4805      	ldr	r0, [pc, #20]	; (800d16c <P2PC_APP_Notification+0x58>)
 800d156:	f7f5 ffa7 	bl	80030a8 <HAL_GPIO_WritePin>
      break;
 800d15a:	e000      	b.n	800d15e <P2PC_APP_Notification+0x4a>
      break;
 800d15c:	bf00      	nop
/* USER CODE BEGIN P2PC_APP_Notification_2 */

/* USER CODE END P2PC_APP_Notification_2 */
  return;
  }
}
 800d15e:	bf00      	nop
 800d160:	3710      	adds	r7, #16
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}
 800d166:	bf00      	nop
 800d168:	20000370 	.word	0x20000370
 800d16c:	48000400 	.word	0x48000400

0800d170 <Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Event_Handler(void *Event)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b094      	sub	sp, #80	; 0x50
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;

  P2P_Client_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800d178:	2300      	movs	r3, #0
 800d17a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	3301      	adds	r3, #1
 800d182:	643b      	str	r3, [r7, #64]	; 0x40

  switch(event_pckt->evt)
 800d184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d186:	781b      	ldrb	r3, [r3, #0]
 800d188:	2bff      	cmp	r3, #255	; 0xff
 800d18a:	d000      	beq.n	800d18e <Event_Handler+0x1e>
    }

    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800d18c:	e27b      	b.n	800d686 <Event_Handler+0x516>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 800d18e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d190:	3302      	adds	r3, #2
 800d192:	63fb      	str	r3, [r7, #60]	; 0x3c
      switch(blue_evt->ecode)
 800d194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d196:	881b      	ldrh	r3, [r3, #0]
 800d198:	b29b      	uxth	r3, r3
 800d19a:	f6a3 4304 	subw	r3, r3, #3076	; 0xc04
 800d19e:	2b0c      	cmp	r3, #12
 800d1a0:	f200 8265 	bhi.w	800d66e <Event_Handler+0x4fe>
 800d1a4:	a201      	add	r2, pc, #4	; (adr r2, 800d1ac <Event_Handler+0x3c>)
 800d1a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1aa:	bf00      	nop
 800d1ac:	0800d49f 	.word	0x0800d49f
 800d1b0:	0800d66f 	.word	0x0800d66f
 800d1b4:	0800d381 	.word	0x0800d381
 800d1b8:	0800d66f 	.word	0x0800d66f
 800d1bc:	0800d66f 	.word	0x0800d66f
 800d1c0:	0800d66f 	.word	0x0800d66f
 800d1c4:	0800d1e1 	.word	0x0800d1e1
 800d1c8:	0800d66f 	.word	0x0800d66f
 800d1cc:	0800d66f 	.word	0x0800d66f
 800d1d0:	0800d66f 	.word	0x0800d66f
 800d1d4:	0800d66f 	.word	0x0800d66f
 800d1d8:	0800d5a9 	.word	0x0800d5a9
 800d1dc:	0800d625 	.word	0x0800d625
          aci_att_read_by_group_type_resp_event_rp0 *pr = (void*)blue_evt->data;
 800d1e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1e2:	3302      	adds	r3, #2
 800d1e4:	633b      	str	r3, [r7, #48]	; 0x30
          handle = pr->Connection_Handle;
 800d1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1e8:	781a      	ldrb	r2, [r3, #0]
 800d1ea:	785b      	ldrb	r3, [r3, #1]
 800d1ec:	021b      	lsls	r3, r3, #8
 800d1ee:	4313      	orrs	r3, r2
 800d1f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
          index = 0;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d1f8:	e02e      	b.n	800d258 <Event_Handler+0xe8>
            status = APP_BLE_Get_Client_Connection_Status(aP2PClientContext[index].connHandle);
 800d1fa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800d1fe:	4aab      	ldr	r2, [pc, #684]	; (800d4ac <Event_Handler+0x33c>)
 800d200:	011b      	lsls	r3, r3, #4
 800d202:	4413      	add	r3, r2
 800d204:	3302      	adds	r3, #2
 800d206:	881b      	ldrh	r3, [r3, #0]
 800d208:	4618      	mov	r0, r3
 800d20a:	f7ff fd75 	bl	800ccf8 <APP_BLE_Get_Client_Connection_Status>
 800d20e:	4603      	mov	r3, r0
 800d210:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            if((aP2PClientContext[index].state == APP_BLE_CONNECTED_CLIENT)&&
 800d214:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800d218:	4aa4      	ldr	r2, [pc, #656]	; (800d4ac <Event_Handler+0x33c>)
 800d21a:	011b      	lsls	r3, r3, #4
 800d21c:	4413      	add	r3, r2
 800d21e:	781b      	ldrb	r3, [r3, #0]
 800d220:	2b06      	cmp	r3, #6
 800d222:	d114      	bne.n	800d24e <Event_Handler+0xde>
 800d224:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d110      	bne.n	800d24e <Event_Handler+0xde>
              aP2PClientContext[index].state = APP_BLE_IDLE;
 800d22c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800d230:	4a9e      	ldr	r2, [pc, #632]	; (800d4ac <Event_Handler+0x33c>)
 800d232:	011b      	lsls	r3, r3, #4
 800d234:	4413      	add	r3, r2
 800d236:	2200      	movs	r2, #0
 800d238:	701a      	strb	r2, [r3, #0]
              aP2PClientContext[index].connHandle = 0xFFFF;
 800d23a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800d23e:	4a9b      	ldr	r2, [pc, #620]	; (800d4ac <Event_Handler+0x33c>)
 800d240:	011b      	lsls	r3, r3, #4
 800d242:	4413      	add	r3, r2
 800d244:	3302      	adds	r3, #2
 800d246:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d24a:	801a      	strh	r2, [r3, #0]
              break;
 800d24c:	e010      	b.n	800d270 <Event_Handler+0x100>
            index++;
 800d24e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800d252:	3301      	adds	r3, #1
 800d254:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d258:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d107      	bne.n	800d270 <Event_Handler+0x100>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
 800d260:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800d264:	4a91      	ldr	r2, [pc, #580]	; (800d4ac <Event_Handler+0x33c>)
 800d266:	011b      	lsls	r3, r3, #4
 800d268:	4413      	add	r3, r2
 800d26a:	781b      	ldrb	r3, [r3, #0]
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d1c4      	bne.n	800d1fa <Event_Handler+0x8a>
          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800d270:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800d274:	2b00      	cmp	r3, #0
 800d276:	f040 81fc 	bne.w	800d672 <Event_Handler+0x502>
            aP2PClientContext[index].connHandle= handle;
 800d27a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800d27e:	4a8b      	ldr	r2, [pc, #556]	; (800d4ac <Event_Handler+0x33c>)
 800d280:	011b      	lsls	r3, r3, #4
 800d282:	4413      	add	r3, r2
 800d284:	3302      	adds	r3, #2
 800d286:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d288:	801a      	strh	r2, [r3, #0]
            numServ = (pr->Data_Length) / pr->Attribute_Data_Length;
 800d28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d28c:	78da      	ldrb	r2, [r3, #3]
 800d28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d290:	789b      	ldrb	r3, [r3, #2]
 800d292:	fbb2 f3f3 	udiv	r3, r2, r3
 800d296:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
          if (pr->Attribute_Data_Length == 20)
 800d29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d29c:	789b      	ldrb	r3, [r3, #2]
 800d29e:	2b14      	cmp	r3, #20
 800d2a0:	f040 81e7 	bne.w	800d672 <Event_Handler+0x502>
            idx = 16;
 800d2a4:	2310      	movs	r3, #16
 800d2a6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
              for (i=0; i<numServ; i++)
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800d2b0:	e05f      	b.n	800d372 <Event_Handler+0x202>
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx]);
 800d2b2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800d2b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2b8:	4413      	add	r3, r2
 800d2ba:	791b      	ldrb	r3, [r3, #4]
 800d2bc:	b29a      	uxth	r2, r3
 800d2be:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800d2c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d2c4:	440b      	add	r3, r1
 800d2c6:	3304      	adds	r3, #4
 800d2c8:	3301      	adds	r3, #1
 800d2ca:	781b      	ldrb	r3, [r3, #0]
 800d2cc:	b29b      	uxth	r3, r3
 800d2ce:	021b      	lsls	r3, r3, #8
 800d2d0:	b29b      	uxth	r3, r3
 800d2d2:	4313      	orrs	r3, r2
 800d2d4:	857b      	strh	r3, [r7, #42]	; 0x2a
                if(uuid == P2P_SERVICE_UUID)
 800d2d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d2d8:	f64f 6240 	movw	r2, #65088	; 0xfe40
 800d2dc:	4293      	cmp	r3, r2
 800d2de:	d13e      	bne.n	800d35e <Event_Handler+0x1ee>
                aP2PClientContext[index].P2PServiceHandle = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-16]);
 800d2e0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800d2e4:	3b10      	subs	r3, #16
 800d2e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2e8:	4413      	add	r3, r2
 800d2ea:	791b      	ldrb	r3, [r3, #4]
 800d2ec:	b299      	uxth	r1, r3
 800d2ee:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800d2f2:	3b10      	subs	r3, #16
 800d2f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2f6:	4413      	add	r3, r2
 800d2f8:	3304      	adds	r3, #4
 800d2fa:	3301      	adds	r3, #1
 800d2fc:	781b      	ldrb	r3, [r3, #0]
 800d2fe:	b29b      	uxth	r3, r3
 800d300:	021b      	lsls	r3, r3, #8
 800d302:	b29a      	uxth	r2, r3
 800d304:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800d308:	430a      	orrs	r2, r1
 800d30a:	b291      	uxth	r1, r2
 800d30c:	4a67      	ldr	r2, [pc, #412]	; (800d4ac <Event_Handler+0x33c>)
 800d30e:	011b      	lsls	r3, r3, #4
 800d310:	4413      	add	r3, r2
 800d312:	3304      	adds	r3, #4
 800d314:	460a      	mov	r2, r1
 800d316:	801a      	strh	r2, [r3, #0]
                aP2PClientContext[index].P2PServiceEndHandle = UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-14]);
 800d318:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800d31c:	3b0e      	subs	r3, #14
 800d31e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d320:	4413      	add	r3, r2
 800d322:	791b      	ldrb	r3, [r3, #4]
 800d324:	b299      	uxth	r1, r3
 800d326:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800d32a:	3b0e      	subs	r3, #14
 800d32c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d32e:	4413      	add	r3, r2
 800d330:	3304      	adds	r3, #4
 800d332:	3301      	adds	r3, #1
 800d334:	781b      	ldrb	r3, [r3, #0]
 800d336:	b29b      	uxth	r3, r3
 800d338:	021b      	lsls	r3, r3, #8
 800d33a:	b29a      	uxth	r2, r3
 800d33c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800d340:	430a      	orrs	r2, r1
 800d342:	b291      	uxth	r1, r2
 800d344:	4a59      	ldr	r2, [pc, #356]	; (800d4ac <Event_Handler+0x33c>)
 800d346:	011b      	lsls	r3, r3, #4
 800d348:	4413      	add	r3, r2
 800d34a:	3306      	adds	r3, #6
 800d34c:	460a      	mov	r2, r1
 800d34e:	801a      	strh	r2, [r3, #0]
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_CHARACS ;
 800d350:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800d354:	4a55      	ldr	r2, [pc, #340]	; (800d4ac <Event_Handler+0x33c>)
 800d356:	011b      	lsls	r3, r3, #4
 800d358:	4413      	add	r3, r2
 800d35a:	2208      	movs	r2, #8
 800d35c:	701a      	strb	r2, [r3, #0]
                idx += 6;
 800d35e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800d362:	3306      	adds	r3, #6
 800d364:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
              for (i=0; i<numServ; i++)
 800d368:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d36c:	3301      	adds	r3, #1
 800d36e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800d372:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800d376:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d37a:	429a      	cmp	r2, r3
 800d37c:	d399      	bcc.n	800d2b2 <Event_Handler+0x142>
        break;
 800d37e:	e178      	b.n	800d672 <Event_Handler+0x502>
          aci_att_read_by_type_resp_event_rp0 *pr = (void*)blue_evt->data;
 800d380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d382:	3302      	adds	r3, #2
 800d384:	627b      	str	r3, [r7, #36]	; 0x24
          index = 0;
 800d386:	2300      	movs	r3, #0
 800d388:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d38c:	e004      	b.n	800d398 <Event_Handler+0x228>
            index++;
 800d38e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800d392:	3301      	adds	r3, #1
 800d394:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d398:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d10b      	bne.n	800d3b8 <Event_Handler+0x248>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800d3a0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800d3a4:	4a41      	ldr	r2, [pc, #260]	; (800d4ac <Event_Handler+0x33c>)
 800d3a6:	011b      	lsls	r3, r3, #4
 800d3a8:	4413      	add	r3, r2
 800d3aa:	3302      	adds	r3, #2
 800d3ac:	881a      	ldrh	r2, [r3, #0]
 800d3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b0:	881b      	ldrh	r3, [r3, #0]
 800d3b2:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d3b4:	429a      	cmp	r2, r3
 800d3b6:	d1ea      	bne.n	800d38e <Event_Handler+0x21e>
          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800d3b8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	f040 815a 	bne.w	800d676 <Event_Handler+0x506>
            idx = 17;
 800d3c2:	2311      	movs	r3, #17
 800d3c4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
            if (pr->Handle_Value_Pair_Length == 21)
 800d3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ca:	789b      	ldrb	r3, [r3, #2]
 800d3cc:	2b15      	cmp	r3, #21
 800d3ce:	f040 8152 	bne.w	800d676 <Event_Handler+0x506>
              pr->Data_Length -= 1;
 800d3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d4:	78db      	ldrb	r3, [r3, #3]
 800d3d6:	3b01      	subs	r3, #1
 800d3d8:	b2da      	uxtb	r2, r3
 800d3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3dc:	70da      	strb	r2, [r3, #3]
              while(pr->Data_Length > 0)
 800d3de:	e059      	b.n	800d494 <Event_Handler+0x324>
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx]);
 800d3e0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800d3e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3e6:	4413      	add	r3, r2
 800d3e8:	791b      	ldrb	r3, [r3, #4]
 800d3ea:	b29a      	uxth	r2, r3
 800d3ec:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800d3f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d3f2:	440b      	add	r3, r1
 800d3f4:	3304      	adds	r3, #4
 800d3f6:	3301      	adds	r3, #1
 800d3f8:	781b      	ldrb	r3, [r3, #0]
 800d3fa:	b29b      	uxth	r3, r3
 800d3fc:	021b      	lsls	r3, r3, #8
 800d3fe:	b29b      	uxth	r3, r3
 800d400:	4313      	orrs	r3, r2
 800d402:	847b      	strh	r3, [r7, #34]	; 0x22
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-14]);
 800d404:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800d408:	3b0e      	subs	r3, #14
 800d40a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d40c:	4413      	add	r3, r2
 800d40e:	791b      	ldrb	r3, [r3, #4]
 800d410:	b29a      	uxth	r2, r3
 800d412:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800d416:	3b0e      	subs	r3, #14
 800d418:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d41a:	440b      	add	r3, r1
 800d41c:	3304      	adds	r3, #4
 800d41e:	3301      	adds	r3, #1
 800d420:	781b      	ldrb	r3, [r3, #0]
 800d422:	b29b      	uxth	r3, r3
 800d424:	021b      	lsls	r3, r3, #8
 800d426:	b29b      	uxth	r3, r3
 800d428:	4313      	orrs	r3, r2
 800d42a:	843b      	strh	r3, [r7, #32]
                if(uuid == P2P_WRITE_CHAR_UUID)
 800d42c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d42e:	f64f 6241 	movw	r2, #65089	; 0xfe41
 800d432:	4293      	cmp	r3, r2
 800d434:	d10f      	bne.n	800d456 <Event_Handler+0x2e6>
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_WRITE_DESC;
 800d436:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800d43a:	4a1c      	ldr	r2, [pc, #112]	; (800d4ac <Event_Handler+0x33c>)
 800d43c:	011b      	lsls	r3, r3, #4
 800d43e:	4413      	add	r3, r2
 800d440:	2209      	movs	r2, #9
 800d442:	701a      	strb	r2, [r3, #0]
                  aP2PClientContext[index].P2PWriteToServerCharHdle = handle;
 800d444:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800d448:	4a18      	ldr	r2, [pc, #96]	; (800d4ac <Event_Handler+0x33c>)
 800d44a:	011b      	lsls	r3, r3, #4
 800d44c:	4413      	add	r3, r2
 800d44e:	3308      	adds	r3, #8
 800d450:	8c3a      	ldrh	r2, [r7, #32]
 800d452:	801a      	strh	r2, [r3, #0]
 800d454:	e013      	b.n	800d47e <Event_Handler+0x30e>
                else if(uuid == P2P_NOTIFY_CHAR_UUID)
 800d456:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d458:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800d45c:	4293      	cmp	r3, r2
 800d45e:	d10e      	bne.n	800d47e <Event_Handler+0x30e>
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC;
 800d460:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800d464:	4a11      	ldr	r2, [pc, #68]	; (800d4ac <Event_Handler+0x33c>)
 800d466:	011b      	lsls	r3, r3, #4
 800d468:	4413      	add	r3, r2
 800d46a:	220a      	movs	r2, #10
 800d46c:	701a      	strb	r2, [r3, #0]
                  aP2PClientContext[index].P2PNotificationCharHdle = handle;
 800d46e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800d472:	4a0e      	ldr	r2, [pc, #56]	; (800d4ac <Event_Handler+0x33c>)
 800d474:	011b      	lsls	r3, r3, #4
 800d476:	4413      	add	r3, r2
 800d478:	330c      	adds	r3, #12
 800d47a:	8c3a      	ldrh	r2, [r7, #32]
 800d47c:	801a      	strh	r2, [r3, #0]
                pr->Data_Length -= 21;
 800d47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d480:	78db      	ldrb	r3, [r3, #3]
 800d482:	3b15      	subs	r3, #21
 800d484:	b2da      	uxtb	r2, r3
 800d486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d488:	70da      	strb	r2, [r3, #3]
                idx += 21;
 800d48a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800d48e:	3315      	adds	r3, #21
 800d490:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
              while(pr->Data_Length > 0)
 800d494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d496:	78db      	ldrb	r3, [r3, #3]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d1a1      	bne.n	800d3e0 <Event_Handler+0x270>
        break;
 800d49c:	e0eb      	b.n	800d676 <Event_Handler+0x506>
          aci_att_find_info_resp_event_rp0 *pr = (void*)blue_evt->data;
 800d49e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4a0:	3302      	adds	r3, #2
 800d4a2:	61fb      	str	r3, [r7, #28]
          index = 0;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d4aa:	e006      	b.n	800d4ba <Event_Handler+0x34a>
 800d4ac:	20000370 	.word	0x20000370
            index++;
 800d4b0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d4b4:	3301      	adds	r3, #1
 800d4b6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d4ba:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d10b      	bne.n	800d4da <Event_Handler+0x36a>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800d4c2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d4c6:	4a73      	ldr	r2, [pc, #460]	; (800d694 <Event_Handler+0x524>)
 800d4c8:	011b      	lsls	r3, r3, #4
 800d4ca:	4413      	add	r3, r2
 800d4cc:	3302      	adds	r3, #2
 800d4ce:	881a      	ldrh	r2, [r3, #0]
 800d4d0:	69fb      	ldr	r3, [r7, #28]
 800d4d2:	881b      	ldrh	r3, [r3, #0]
 800d4d4:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d4d6:	429a      	cmp	r2, r3
 800d4d8:	d1ea      	bne.n	800d4b0 <Event_Handler+0x340>
          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800d4da:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	f040 80cb 	bne.w	800d67a <Event_Handler+0x50a>
            numDesc = (pr->Event_Data_Length) / 4;
 800d4e4:	69fb      	ldr	r3, [r7, #28]
 800d4e6:	78db      	ldrb	r3, [r3, #3]
 800d4e8:	089b      	lsrs	r3, r3, #2
 800d4ea:	76fb      	strb	r3, [r7, #27]
            idx = 0;
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            if (pr->Format == UUID_TYPE_16)
 800d4f2:	69fb      	ldr	r3, [r7, #28]
 800d4f4:	789b      	ldrb	r3, [r3, #2]
 800d4f6:	2b01      	cmp	r3, #1
 800d4f8:	f040 80bf 	bne.w	800d67a <Event_Handler+0x50a>
              for (i=0; i<numDesc; i++)
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800d502:	e04b      	b.n	800d59c <Event_Handler+0x42c>
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx]);
 800d504:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800d508:	69fa      	ldr	r2, [r7, #28]
 800d50a:	4413      	add	r3, r2
 800d50c:	791b      	ldrb	r3, [r3, #4]
 800d50e:	b29a      	uxth	r2, r3
 800d510:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800d514:	69f9      	ldr	r1, [r7, #28]
 800d516:	440b      	add	r3, r1
 800d518:	3304      	adds	r3, #4
 800d51a:	3301      	adds	r3, #1
 800d51c:	781b      	ldrb	r3, [r3, #0]
 800d51e:	b29b      	uxth	r3, r3
 800d520:	021b      	lsls	r3, r3, #8
 800d522:	b29b      	uxth	r3, r3
 800d524:	4313      	orrs	r3, r2
 800d526:	833b      	strh	r3, [r7, #24]
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx+2]);
 800d528:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800d52c:	3302      	adds	r3, #2
 800d52e:	69fa      	ldr	r2, [r7, #28]
 800d530:	4413      	add	r3, r2
 800d532:	791b      	ldrb	r3, [r3, #4]
 800d534:	b29a      	uxth	r2, r3
 800d536:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800d53a:	3302      	adds	r3, #2
 800d53c:	69f9      	ldr	r1, [r7, #28]
 800d53e:	440b      	add	r3, r1
 800d540:	3304      	adds	r3, #4
 800d542:	3301      	adds	r3, #1
 800d544:	781b      	ldrb	r3, [r3, #0]
 800d546:	b29b      	uxth	r3, r3
 800d548:	021b      	lsls	r3, r3, #8
 800d54a:	b29b      	uxth	r3, r3
 800d54c:	4313      	orrs	r3, r2
 800d54e:	82fb      	strh	r3, [r7, #22]
                if(uuid == CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID)
 800d550:	8afb      	ldrh	r3, [r7, #22]
 800d552:	f642 1202 	movw	r2, #10498	; 0x2902
 800d556:	4293      	cmp	r3, r2
 800d558:	d116      	bne.n	800d588 <Event_Handler+0x418>
                  if( aP2PClientContext[index].state == APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC)
 800d55a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d55e:	4a4d      	ldr	r2, [pc, #308]	; (800d694 <Event_Handler+0x524>)
 800d560:	011b      	lsls	r3, r3, #4
 800d562:	4413      	add	r3, r2
 800d564:	781b      	ldrb	r3, [r3, #0]
 800d566:	2b0a      	cmp	r3, #10
 800d568:	d10e      	bne.n	800d588 <Event_Handler+0x418>
                    aP2PClientContext[index].P2PNotificationDescHandle = handle;
 800d56a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d56e:	4a49      	ldr	r2, [pc, #292]	; (800d694 <Event_Handler+0x524>)
 800d570:	011b      	lsls	r3, r3, #4
 800d572:	4413      	add	r3, r2
 800d574:	330e      	adds	r3, #14
 800d576:	8b3a      	ldrh	r2, [r7, #24]
 800d578:	801a      	strh	r2, [r3, #0]
                    aP2PClientContext[index].state = APP_BLE_ENABLE_NOTIFICATION_DESC;
 800d57a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d57e:	4a45      	ldr	r2, [pc, #276]	; (800d694 <Event_Handler+0x524>)
 800d580:	011b      	lsls	r3, r3, #4
 800d582:	4413      	add	r3, r2
 800d584:	220b      	movs	r2, #11
 800d586:	701a      	strb	r2, [r3, #0]
                idx += 4;
 800d588:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800d58c:	3304      	adds	r3, #4
 800d58e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
              for (i=0; i<numDesc; i++)
 800d592:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800d596:	3301      	adds	r3, #1
 800d598:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800d59c:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800d5a0:	7efb      	ldrb	r3, [r7, #27]
 800d5a2:	429a      	cmp	r2, r3
 800d5a4:	d3ae      	bcc.n	800d504 <Event_Handler+0x394>
        break; /*EVT_BLUE_ATT_FIND_INFORMATION_RESP*/
 800d5a6:	e068      	b.n	800d67a <Event_Handler+0x50a>
          aci_gatt_notification_event_rp0 *pr = (void*)blue_evt->data;
 800d5a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5aa:	3302      	adds	r3, #2
 800d5ac:	637b      	str	r3, [r7, #52]	; 0x34
          index = 0;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d5b4:	e004      	b.n	800d5c0 <Event_Handler+0x450>
            index++;
 800d5b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d5ba:	3301      	adds	r3, #1
 800d5bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d5c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d10b      	bne.n	800d5e0 <Event_Handler+0x470>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800d5c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d5cc:	4a31      	ldr	r2, [pc, #196]	; (800d694 <Event_Handler+0x524>)
 800d5ce:	011b      	lsls	r3, r3, #4
 800d5d0:	4413      	add	r3, r2
 800d5d2:	3302      	adds	r3, #2
 800d5d4:	881a      	ldrh	r2, [r3, #0]
 800d5d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5d8:	881b      	ldrh	r3, [r3, #0]
 800d5da:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d5dc:	429a      	cmp	r2, r3
 800d5de:	d1ea      	bne.n	800d5b6 <Event_Handler+0x446>
          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800d5e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d14a      	bne.n	800d67e <Event_Handler+0x50e>
            if ( (pr->Attribute_Handle == aP2PClientContext[index].P2PNotificationCharHdle) &&
 800d5e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5ea:	885b      	ldrh	r3, [r3, #2]
 800d5ec:	b29a      	uxth	r2, r3
 800d5ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d5f2:	4928      	ldr	r1, [pc, #160]	; (800d694 <Event_Handler+0x524>)
 800d5f4:	011b      	lsls	r3, r3, #4
 800d5f6:	440b      	add	r3, r1
 800d5f8:	330c      	adds	r3, #12
 800d5fa:	881b      	ldrh	r3, [r3, #0]
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	d13e      	bne.n	800d67e <Event_Handler+0x50e>
                    (pr->Attribute_Value_Length == (PAYLOAD_LENGTH)) )
 800d600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d602:	791b      	ldrb	r3, [r3, #4]
            if ( (pr->Attribute_Handle == aP2PClientContext[index].P2PNotificationCharHdle) &&
 800d604:	2b7b      	cmp	r3, #123	; 0x7b
 800d606:	d13a      	bne.n	800d67e <Event_Handler+0x50e>
              Notification.P2P_Client_Evt_Opcode = P2P_NOTIFICATION_INFO_RECEIVED_EVT;
 800d608:	2302      	movs	r3, #2
 800d60a:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length = pr->Attribute_Value_Length;
 800d60c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d60e:	791b      	ldrb	r3, [r3, #4]
 800d610:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload = &pr->Attribute_Value[0];
 800d612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d614:	3305      	adds	r3, #5
 800d616:	60fb      	str	r3, [r7, #12]
              Gatt_Notification(&Notification);
 800d618:	f107 0308 	add.w	r3, r7, #8
 800d61c:	4618      	mov	r0, r3
 800d61e:	f000 f83b 	bl	800d698 <Gatt_Notification>
        break;/* end EVT_BLUE_GATT_NOTIFICATION */
 800d622:	e02c      	b.n	800d67e <Event_Handler+0x50e>
          aci_gatt_proc_complete_event_rp0 *pr = (void*)blue_evt->data;
 800d624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d626:	3302      	adds	r3, #2
 800d628:	63bb      	str	r3, [r7, #56]	; 0x38
          index = 0;
 800d62a:	2300      	movs	r3, #0
 800d62c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d630:	e004      	b.n	800d63c <Event_Handler+0x4cc>
            index++;
 800d632:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d636:	3301      	adds	r3, #1
 800d638:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d63c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d640:	2b00      	cmp	r3, #0
 800d642:	d10b      	bne.n	800d65c <Event_Handler+0x4ec>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800d644:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d648:	4a12      	ldr	r2, [pc, #72]	; (800d694 <Event_Handler+0x524>)
 800d64a:	011b      	lsls	r3, r3, #4
 800d64c:	4413      	add	r3, r2
 800d64e:	3302      	adds	r3, #2
 800d650:	881a      	ldrh	r2, [r3, #0]
 800d652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d654:	881b      	ldrh	r3, [r3, #0]
 800d656:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d658:	429a      	cmp	r2, r3
 800d65a:	d1ea      	bne.n	800d632 <Event_Handler+0x4c2>
          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800d65c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d660:	2b00      	cmp	r3, #0
 800d662:	d10e      	bne.n	800d682 <Event_Handler+0x512>
            UTIL_SEQ_SetTask( 1<<CFG_TASK_SEARCH_SERVICE_ID, CFG_SCH_PRIO_0);
 800d664:	2100      	movs	r1, #0
 800d666:	2004      	movs	r0, #4
 800d668:	f7f4 fc94 	bl	8001f94 <UTIL_SEQ_SetTask>
        break; /*EVT_BLUE_GATT_PROCEDURE_COMPLETE*/
 800d66c:	e009      	b.n	800d682 <Event_Handler+0x512>
          break;
 800d66e:	bf00      	nop
 800d670:	e008      	b.n	800d684 <Event_Handler+0x514>
        break;
 800d672:	bf00      	nop
 800d674:	e006      	b.n	800d684 <Event_Handler+0x514>
        break;
 800d676:	bf00      	nop
 800d678:	e004      	b.n	800d684 <Event_Handler+0x514>
        break; /*EVT_BLUE_ATT_FIND_INFORMATION_RESP*/
 800d67a:	bf00      	nop
 800d67c:	e002      	b.n	800d684 <Event_Handler+0x514>
        break;/* end EVT_BLUE_GATT_NOTIFICATION */
 800d67e:	bf00      	nop
 800d680:	e000      	b.n	800d684 <Event_Handler+0x514>
        break; /*EVT_BLUE_GATT_PROCEDURE_COMPLETE*/
 800d682:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 800d684:	bf00      	nop
  }

  return(return_value);
 800d686:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
}/* end BLE_CTRL_Event_Acknowledged_Status_t */
 800d68a:	4618      	mov	r0, r3
 800d68c:	3750      	adds	r7, #80	; 0x50
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}
 800d692:	bf00      	nop
 800d694:	20000370 	.word	0x20000370

0800d698 <Gatt_Notification>:

void Gatt_Notification(P2P_Client_App_Notification_evt_t *pNotification)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b082      	sub	sp, #8
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Gatt_Notification_1*/

/* USER CODE END Gatt_Notification_1 */
  switch(pNotification->P2P_Client_Evt_Opcode)
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	781b      	ldrb	r3, [r3, #0]
 800d6a4:	2b02      	cmp	r3, #2
 800d6a6:	d000      	beq.n	800d6aa <Gatt_Notification+0x12>

    default:
/* USER CODE BEGIN P2P_Client_Evt_Opcode_Default */

/* USER CODE END P2P_Client_Evt_Opcode_Default */
      break;
 800d6a8:	e00a      	b.n	800d6c0 <Gatt_Notification+0x28>
		transmit_CDC_messege(pNotification->DataTransfered.pPayload, PAYLOAD_LENGTH);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	685b      	ldr	r3, [r3, #4]
 800d6ae:	217b      	movs	r1, #123	; 0x7b
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f7f4 f817 	bl	80016e4 <transmit_CDC_messege>
    	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800d6b6:	2102      	movs	r1, #2
 800d6b8:	4803      	ldr	r0, [pc, #12]	; (800d6c8 <Gatt_Notification+0x30>)
 800d6ba:	f7f5 fd25 	bl	8003108 <HAL_GPIO_TogglePin>
    break;
 800d6be:	bf00      	nop
  }
/* USER CODE BEGIN Gatt_Notification_2*/
}
 800d6c0:	bf00      	nop
 800d6c2:	3708      	adds	r7, #8
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}
 800d6c8:	48000400 	.word	0x48000400

0800d6cc <Update_Service>:
//
//  return;
//}

void Update_Service()
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b082      	sub	sp, #8
 800d6d0:	af00      	add	r7, sp, #0
  uint16_t enable = 0x0001;
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	80bb      	strh	r3, [r7, #4]


  uint8_t index;

  index = 0;
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	71fb      	strb	r3, [r7, #7]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d6da:	e094      	b.n	800d806 <Update_Service+0x13a>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
  {


    switch(aP2PClientContext[index].state)
 800d6dc:	79fb      	ldrb	r3, [r7, #7]
 800d6de:	4a52      	ldr	r2, [pc, #328]	; (800d828 <Update_Service+0x15c>)
 800d6e0:	011b      	lsls	r3, r3, #4
 800d6e2:	4413      	add	r3, r2
 800d6e4:	781b      	ldrb	r3, [r3, #0]
 800d6e6:	3b07      	subs	r3, #7
 800d6e8:	2b05      	cmp	r3, #5
 800d6ea:	f200 8088 	bhi.w	800d7fe <Update_Service+0x132>
 800d6ee:	a201      	add	r2, pc, #4	; (adr r2, 800d6f4 <Update_Service+0x28>)
 800d6f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6f4:	0800d7ff 	.word	0x0800d7ff
 800d6f8:	0800d70d 	.word	0x0800d70d
 800d6fc:	0800d739 	.word	0x0800d739
 800d700:	0800d769 	.word	0x0800d769
 800d704:	0800d799 	.word	0x0800d799
 800d708:	0800d7d1 	.word	0x0800d7d1
      case APP_BLE_DISCOVER_SERVICES:
        //APP_DBG_MSG("P2P_DISCOVER_SERVICES\n");
        break;
      case APP_BLE_DISCOVER_CHARACS:
        //APP_DBG_MSG("* GATT : Discover P2P Characteristics\n");
        aci_gatt_disc_all_char_of_service(aP2PClientContext[index].connHandle,
 800d70c:	79fb      	ldrb	r3, [r7, #7]
 800d70e:	4a46      	ldr	r2, [pc, #280]	; (800d828 <Update_Service+0x15c>)
 800d710:	011b      	lsls	r3, r3, #4
 800d712:	4413      	add	r3, r2
 800d714:	3302      	adds	r3, #2
 800d716:	8818      	ldrh	r0, [r3, #0]
 800d718:	79fb      	ldrb	r3, [r7, #7]
 800d71a:	4a43      	ldr	r2, [pc, #268]	; (800d828 <Update_Service+0x15c>)
 800d71c:	011b      	lsls	r3, r3, #4
 800d71e:	4413      	add	r3, r2
 800d720:	3304      	adds	r3, #4
 800d722:	8819      	ldrh	r1, [r3, #0]
 800d724:	79fb      	ldrb	r3, [r7, #7]
 800d726:	4a40      	ldr	r2, [pc, #256]	; (800d828 <Update_Service+0x15c>)
 800d728:	011b      	lsls	r3, r3, #4
 800d72a:	4413      	add	r3, r2
 800d72c:	3306      	adds	r3, #6
 800d72e:	881b      	ldrh	r3, [r3, #0]
 800d730:	461a      	mov	r2, r3
 800d732:	f7fd feed 	bl	800b510 <aci_gatt_disc_all_char_of_service>
                                          aP2PClientContext[index].P2PServiceHandle,
                                         aP2PClientContext[index].P2PServiceEndHandle);

        break;
 800d736:	e063      	b.n	800d800 <Update_Service+0x134>
      case APP_BLE_DISCOVER_WRITE_DESC: /* Not Used - No decriptor */
        //APP_DBG_MSG("* GATT : Discover Descriptor of TX - Write Characteritic\n");
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800d738:	79fb      	ldrb	r3, [r7, #7]
 800d73a:	4a3b      	ldr	r2, [pc, #236]	; (800d828 <Update_Service+0x15c>)
 800d73c:	011b      	lsls	r3, r3, #4
 800d73e:	4413      	add	r3, r2
 800d740:	3302      	adds	r3, #2
 800d742:	8818      	ldrh	r0, [r3, #0]
 800d744:	79fb      	ldrb	r3, [r7, #7]
 800d746:	4a38      	ldr	r2, [pc, #224]	; (800d828 <Update_Service+0x15c>)
 800d748:	011b      	lsls	r3, r3, #4
 800d74a:	4413      	add	r3, r2
 800d74c:	3308      	adds	r3, #8
 800d74e:	8819      	ldrh	r1, [r3, #0]
                                    aP2PClientContext[index].P2PWriteToServerCharHdle,
                                    aP2PClientContext[index].P2PWriteToServerCharHdle+2);
 800d750:	79fb      	ldrb	r3, [r7, #7]
 800d752:	4a35      	ldr	r2, [pc, #212]	; (800d828 <Update_Service+0x15c>)
 800d754:	011b      	lsls	r3, r3, #4
 800d756:	4413      	add	r3, r2
 800d758:	3308      	adds	r3, #8
 800d75a:	881b      	ldrh	r3, [r3, #0]
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800d75c:	3302      	adds	r3, #2
 800d75e:	b29b      	uxth	r3, r3
 800d760:	461a      	mov	r2, r3
 800d762:	f7fd ff47 	bl	800b5f4 <aci_gatt_disc_all_char_desc>

        break;
 800d766:	e04b      	b.n	800d800 <Update_Service+0x134>
      case APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC:
        //APP_DBG_MSG("* GATT : Discover Descriptor of Rx - Notification Characteritic\n");
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800d768:	79fb      	ldrb	r3, [r7, #7]
 800d76a:	4a2f      	ldr	r2, [pc, #188]	; (800d828 <Update_Service+0x15c>)
 800d76c:	011b      	lsls	r3, r3, #4
 800d76e:	4413      	add	r3, r2
 800d770:	3302      	adds	r3, #2
 800d772:	8818      	ldrh	r0, [r3, #0]
 800d774:	79fb      	ldrb	r3, [r7, #7]
 800d776:	4a2c      	ldr	r2, [pc, #176]	; (800d828 <Update_Service+0x15c>)
 800d778:	011b      	lsls	r3, r3, #4
 800d77a:	4413      	add	r3, r2
 800d77c:	330c      	adds	r3, #12
 800d77e:	8819      	ldrh	r1, [r3, #0]
                                    aP2PClientContext[index].P2PNotificationCharHdle,
                                    aP2PClientContext[index].P2PNotificationCharHdle+2);
 800d780:	79fb      	ldrb	r3, [r7, #7]
 800d782:	4a29      	ldr	r2, [pc, #164]	; (800d828 <Update_Service+0x15c>)
 800d784:	011b      	lsls	r3, r3, #4
 800d786:	4413      	add	r3, r2
 800d788:	330c      	adds	r3, #12
 800d78a:	881b      	ldrh	r3, [r3, #0]
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800d78c:	3302      	adds	r3, #2
 800d78e:	b29b      	uxth	r3, r3
 800d790:	461a      	mov	r2, r3
 800d792:	f7fd ff2f 	bl	800b5f4 <aci_gatt_disc_all_char_desc>

        break;
 800d796:	e033      	b.n	800d800 <Update_Service+0x134>
      case APP_BLE_ENABLE_NOTIFICATION_DESC:
        //APP_DBG_MSG("* GATT : Enable Server Notification\n");
        aci_gatt_write_char_desc(aP2PClientContext[index].connHandle,
 800d798:	79fb      	ldrb	r3, [r7, #7]
 800d79a:	4a23      	ldr	r2, [pc, #140]	; (800d828 <Update_Service+0x15c>)
 800d79c:	011b      	lsls	r3, r3, #4
 800d79e:	4413      	add	r3, r2
 800d7a0:	3302      	adds	r3, #2
 800d7a2:	8818      	ldrh	r0, [r3, #0]
 800d7a4:	79fb      	ldrb	r3, [r7, #7]
 800d7a6:	4a20      	ldr	r2, [pc, #128]	; (800d828 <Update_Service+0x15c>)
 800d7a8:	011b      	lsls	r3, r3, #4
 800d7aa:	4413      	add	r3, r2
 800d7ac:	330e      	adds	r3, #14
 800d7ae:	8819      	ldrh	r1, [r3, #0]
 800d7b0:	1d3b      	adds	r3, r7, #4
 800d7b2:	2202      	movs	r2, #2
 800d7b4:	f7fd ff90 	bl	800b6d8 <aci_gatt_write_char_desc>
                                 aP2PClientContext[index].P2PNotificationDescHandle,
                                 2,
                                 (uint8_t *)&enable);

        aP2PClientContext[index].state = APP_BLE_CONNECTED_CLIENT;
 800d7b8:	79fb      	ldrb	r3, [r7, #7]
 800d7ba:	4a1b      	ldr	r2, [pc, #108]	; (800d828 <Update_Service+0x15c>)
 800d7bc:	011b      	lsls	r3, r3, #4
 800d7be:	4413      	add	r3, r2
 800d7c0:	2206      	movs	r2, #6
 800d7c2:	701a      	strb	r2, [r3, #0]
        //BSP_LED_Off(LED_RED);
        HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	2102      	movs	r1, #2
 800d7c8:	4818      	ldr	r0, [pc, #96]	; (800d82c <Update_Service+0x160>)
 800d7ca:	f7f5 fc6d 	bl	80030a8 <HAL_GPIO_WritePin>

        break;
 800d7ce:	e017      	b.n	800d800 <Update_Service+0x134>
      case APP_BLE_DISABLE_NOTIFICATION_DESC :
        //APP_DBG_MSG("* GATT : Disable Server Notification\n");
        aci_gatt_write_char_desc(aP2PClientContext[index].connHandle,
 800d7d0:	79fb      	ldrb	r3, [r7, #7]
 800d7d2:	4a15      	ldr	r2, [pc, #84]	; (800d828 <Update_Service+0x15c>)
 800d7d4:	011b      	lsls	r3, r3, #4
 800d7d6:	4413      	add	r3, r2
 800d7d8:	3302      	adds	r3, #2
 800d7da:	8818      	ldrh	r0, [r3, #0]
 800d7dc:	79fb      	ldrb	r3, [r7, #7]
 800d7de:	4a12      	ldr	r2, [pc, #72]	; (800d828 <Update_Service+0x15c>)
 800d7e0:	011b      	lsls	r3, r3, #4
 800d7e2:	4413      	add	r3, r2
 800d7e4:	330e      	adds	r3, #14
 800d7e6:	8819      	ldrh	r1, [r3, #0]
 800d7e8:	1d3b      	adds	r3, r7, #4
 800d7ea:	2202      	movs	r2, #2
 800d7ec:	f7fd ff74 	bl	800b6d8 <aci_gatt_write_char_desc>
                                 aP2PClientContext[index].P2PNotificationDescHandle,
                                 2,
                                 (uint8_t *)&enable);

        aP2PClientContext[index].state = APP_BLE_CONNECTED_CLIENT;
 800d7f0:	79fb      	ldrb	r3, [r7, #7]
 800d7f2:	4a0d      	ldr	r2, [pc, #52]	; (800d828 <Update_Service+0x15c>)
 800d7f4:	011b      	lsls	r3, r3, #4
 800d7f6:	4413      	add	r3, r2
 800d7f8:	2206      	movs	r2, #6
 800d7fa:	701a      	strb	r2, [r3, #0]

        break;
 800d7fc:	e000      	b.n	800d800 <Update_Service+0x134>
      default:
        break;
 800d7fe:	bf00      	nop
    }
    index++;
 800d800:	79fb      	ldrb	r3, [r7, #7]
 800d802:	3301      	adds	r3, #1
 800d804:	71fb      	strb	r3, [r7, #7]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d806:	79fb      	ldrb	r3, [r7, #7]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d108      	bne.n	800d81e <Update_Service+0x152>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
 800d80c:	79fb      	ldrb	r3, [r7, #7]
 800d80e:	4a06      	ldr	r2, [pc, #24]	; (800d828 <Update_Service+0x15c>)
 800d810:	011b      	lsls	r3, r3, #4
 800d812:	4413      	add	r3, r2
 800d814:	781b      	ldrb	r3, [r3, #0]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d816:	2b00      	cmp	r3, #0
 800d818:	f47f af60 	bne.w	800d6dc <Update_Service+0x10>
  }
  return;
 800d81c:	bf00      	nop
 800d81e:	bf00      	nop
}
 800d820:	3708      	adds	r7, #8
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}
 800d826:	bf00      	nop
 800d828:	20000370 	.word	0x20000370
 800d82c:	48000400 	.word	0x48000400

0800d830 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 800d830:	b480      	push	{r7}
 800d832:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800d834:	4b05      	ldr	r3, [pc, #20]	; (800d84c <LL_PWR_EnableBootC2+0x1c>)
 800d836:	68db      	ldr	r3, [r3, #12]
 800d838:	4a04      	ldr	r2, [pc, #16]	; (800d84c <LL_PWR_EnableBootC2+0x1c>)
 800d83a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d83e:	60d3      	str	r3, [r2, #12]
}
 800d840:	bf00      	nop
 800d842:	46bd      	mov	sp, r7
 800d844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d848:	4770      	bx	lr
 800d84a:	bf00      	nop
 800d84c:	58000400 	.word	0x58000400

0800d850 <LL_AHB3_GRP1_EnableClock>:
{
 800d850:	b480      	push	{r7}
 800d852:	b085      	sub	sp, #20
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800d858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d85c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d85e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	4313      	orrs	r3, r2
 800d866:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800d868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d86c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	4013      	ands	r3, r2
 800d872:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d874:	68fb      	ldr	r3, [r7, #12]
}
 800d876:	bf00      	nop
 800d878:	3714      	adds	r7, #20
 800d87a:	46bd      	mov	sp, r7
 800d87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d880:	4770      	bx	lr

0800d882 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800d882:	b480      	push	{r7}
 800d884:	b083      	sub	sp, #12
 800d886:	af00      	add	r7, sp, #0
 800d888:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	601a      	str	r2, [r3, #0]
}
 800d896:	bf00      	nop
 800d898:	370c      	adds	r7, #12
 800d89a:	46bd      	mov	sp, r7
 800d89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a0:	4770      	bx	lr

0800d8a2 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800d8a2:	b480      	push	{r7}
 800d8a4:	b083      	sub	sp, #12
 800d8a6:	af00      	add	r7, sp, #0
 800d8a8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f043 0201 	orr.w	r2, r3, #1
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	601a      	str	r2, [r3, #0]
}
 800d8b6:	bf00      	nop
 800d8b8:	370c      	adds	r7, #12
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c0:	4770      	bx	lr

0800d8c2 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d8c2:	b480      	push	{r7}
 800d8c4:	b083      	sub	sp, #12
 800d8c6:	af00      	add	r7, sp, #0
 800d8c8:	6078      	str	r0, [r7, #4]
 800d8ca:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	685a      	ldr	r2, [r3, #4]
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	041b      	lsls	r3, r3, #16
 800d8d4:	43db      	mvns	r3, r3
 800d8d6:	401a      	ands	r2, r3
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	605a      	str	r2, [r3, #4]
}
 800d8dc:	bf00      	nop
 800d8de:	370c      	adds	r7, #12
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e6:	4770      	bx	lr

0800d8e8 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d8e8:	b480      	push	{r7}
 800d8ea:	b083      	sub	sp, #12
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
 800d8f0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	685a      	ldr	r2, [r3, #4]
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	041b      	lsls	r3, r3, #16
 800d8fa:	431a      	orrs	r2, r3
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	605a      	str	r2, [r3, #4]
}
 800d900:	bf00      	nop
 800d902:	370c      	adds	r7, #12
 800d904:	46bd      	mov	sp, r7
 800d906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90a:	4770      	bx	lr

0800d90c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d90c:	b480      	push	{r7}
 800d90e:	b083      	sub	sp, #12
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
 800d914:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	685a      	ldr	r2, [r3, #4]
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	43db      	mvns	r3, r3
 800d91e:	401a      	ands	r2, r3
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	605a      	str	r2, [r3, #4]
}
 800d924:	bf00      	nop
 800d926:	370c      	adds	r7, #12
 800d928:	46bd      	mov	sp, r7
 800d92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92e:	4770      	bx	lr

0800d930 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d930:	b480      	push	{r7}
 800d932:	b083      	sub	sp, #12
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
 800d938:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	683a      	ldr	r2, [r7, #0]
 800d93e:	609a      	str	r2, [r3, #8]
}
 800d940:	bf00      	nop
 800d942:	370c      	adds	r7, #12
 800d944:	46bd      	mov	sp, r7
 800d946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94a:	4770      	bx	lr

0800d94c <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d94c:	b480      	push	{r7}
 800d94e:	b083      	sub	sp, #12
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
 800d954:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	041a      	lsls	r2, r3, #16
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	609a      	str	r2, [r3, #8]
}
 800d95e:	bf00      	nop
 800d960:	370c      	adds	r7, #12
 800d962:	46bd      	mov	sp, r7
 800d964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d968:	4770      	bx	lr

0800d96a <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d96a:	b480      	push	{r7}
 800d96c:	b083      	sub	sp, #12
 800d96e:	af00      	add	r7, sp, #0
 800d970:	6078      	str	r0, [r7, #4]
 800d972:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	68da      	ldr	r2, [r3, #12]
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	4013      	ands	r3, r2
 800d97c:	683a      	ldr	r2, [r7, #0]
 800d97e:	429a      	cmp	r2, r3
 800d980:	d101      	bne.n	800d986 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800d982:	2301      	movs	r3, #1
 800d984:	e000      	b.n	800d988 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800d986:	2300      	movs	r3, #0
}
 800d988:	4618      	mov	r0, r3
 800d98a:	370c      	adds	r7, #12
 800d98c:	46bd      	mov	sp, r7
 800d98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d992:	4770      	bx	lr

0800d994 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d994:	b480      	push	{r7}
 800d996:	b083      	sub	sp, #12
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
 800d99c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	69da      	ldr	r2, [r3, #28]
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	4013      	ands	r3, r2
 800d9a6:	683a      	ldr	r2, [r7, #0]
 800d9a8:	429a      	cmp	r2, r3
 800d9aa:	d101      	bne.n	800d9b0 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800d9ac:	2301      	movs	r3, #1
 800d9ae:	e000      	b.n	800d9b2 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800d9b0:	2300      	movs	r3, #0
}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	370c      	adds	r7, #12
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9bc:	4770      	bx	lr
	...

0800d9c0 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800d9c4:	2102      	movs	r1, #2
 800d9c6:	4819      	ldr	r0, [pc, #100]	; (800da2c <HW_IPCC_Rx_Handler+0x6c>)
 800d9c8:	f7ff ffe4 	bl	800d994 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d009      	beq.n	800d9e6 <HW_IPCC_Rx_Handler+0x26>
 800d9d2:	4b16      	ldr	r3, [pc, #88]	; (800da2c <HW_IPCC_Rx_Handler+0x6c>)
 800d9d4:	685b      	ldr	r3, [r3, #4]
 800d9d6:	43db      	mvns	r3, r3
 800d9d8:	f003 0302 	and.w	r3, r3, #2
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d002      	beq.n	800d9e6 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800d9e0:	f000 f8de 	bl	800dba0 <HW_IPCC_SYS_EvtHandler>
 800d9e4:	e01f      	b.n	800da26 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CliNotifEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800d9e6:	2101      	movs	r1, #1
 800d9e8:	4810      	ldr	r0, [pc, #64]	; (800da2c <HW_IPCC_Rx_Handler+0x6c>)
 800d9ea:	f7ff ffd3 	bl	800d994 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d008      	beq.n	800da06 <HW_IPCC_Rx_Handler+0x46>
 800d9f4:	4b0d      	ldr	r3, [pc, #52]	; (800da2c <HW_IPCC_Rx_Handler+0x6c>)
 800d9f6:	685b      	ldr	r3, [r3, #4]
 800d9f8:	f003 0301 	and.w	r3, r3, #1
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d102      	bne.n	800da06 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800da00:	f000 f892 	bl	800db28 <HW_IPCC_BLE_EvtHandler>
 800da04:	e00f      	b.n	800da26 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800da06:	2108      	movs	r1, #8
 800da08:	4808      	ldr	r0, [pc, #32]	; (800da2c <HW_IPCC_Rx_Handler+0x6c>)
 800da0a:	f7ff ffc3 	bl	800d994 <LL_C2_IPCC_IsActiveFlag_CHx>
 800da0e:	4603      	mov	r3, r0
 800da10:	2b00      	cmp	r3, #0
 800da12:	d009      	beq.n	800da28 <HW_IPCC_Rx_Handler+0x68>
 800da14:	4b05      	ldr	r3, [pc, #20]	; (800da2c <HW_IPCC_Rx_Handler+0x6c>)
 800da16:	685b      	ldr	r3, [r3, #4]
 800da18:	43db      	mvns	r3, r3
 800da1a:	f003 0308 	and.w	r3, r3, #8
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d002      	beq.n	800da28 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800da22:	f000 f909 	bl	800dc38 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800da26:	bf00      	nop
 800da28:	bf00      	nop
}
 800da2a:	bd80      	pop	{r7, pc}
 800da2c:	58000c00 	.word	0x58000c00

0800da30 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800da30:	b580      	push	{r7, lr}
 800da32:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800da34:	2102      	movs	r1, #2
 800da36:	4822      	ldr	r0, [pc, #136]	; (800dac0 <HW_IPCC_Tx_Handler+0x90>)
 800da38:	f7ff ff97 	bl	800d96a <LL_C1_IPCC_IsActiveFlag_CHx>
 800da3c:	4603      	mov	r3, r0
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d109      	bne.n	800da56 <HW_IPCC_Tx_Handler+0x26>
 800da42:	4b1f      	ldr	r3, [pc, #124]	; (800dac0 <HW_IPCC_Tx_Handler+0x90>)
 800da44:	685b      	ldr	r3, [r3, #4]
 800da46:	43db      	mvns	r3, r3
 800da48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d002      	beq.n	800da56 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800da50:	f000 f89a 	bl	800db88 <HW_IPCC_SYS_CmdEvtHandler>
 800da54:	e031      	b.n	800daba <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800da56:	2102      	movs	r1, #2
 800da58:	4819      	ldr	r0, [pc, #100]	; (800dac0 <HW_IPCC_Tx_Handler+0x90>)
 800da5a:	f7ff ff86 	bl	800d96a <LL_C1_IPCC_IsActiveFlag_CHx>
 800da5e:	4603      	mov	r3, r0
 800da60:	2b00      	cmp	r3, #0
 800da62:	d109      	bne.n	800da78 <HW_IPCC_Tx_Handler+0x48>
 800da64:	4b16      	ldr	r3, [pc, #88]	; (800dac0 <HW_IPCC_Tx_Handler+0x90>)
 800da66:	685b      	ldr	r3, [r3, #4]
 800da68:	43db      	mvns	r3, r3
 800da6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d002      	beq.n	800da78 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800da72:	f000 f889 	bl	800db88 <HW_IPCC_SYS_CmdEvtHandler>
 800da76:	e020      	b.n	800daba <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800da78:	2108      	movs	r1, #8
 800da7a:	4811      	ldr	r0, [pc, #68]	; (800dac0 <HW_IPCC_Tx_Handler+0x90>)
 800da7c:	f7ff ff75 	bl	800d96a <LL_C1_IPCC_IsActiveFlag_CHx>
 800da80:	4603      	mov	r3, r0
 800da82:	2b00      	cmp	r3, #0
 800da84:	d109      	bne.n	800da9a <HW_IPCC_Tx_Handler+0x6a>
 800da86:	4b0e      	ldr	r3, [pc, #56]	; (800dac0 <HW_IPCC_Tx_Handler+0x90>)
 800da88:	685b      	ldr	r3, [r3, #4]
 800da8a:	43db      	mvns	r3, r3
 800da8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800da90:	2b00      	cmp	r3, #0
 800da92:	d002      	beq.n	800da9a <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 800da94:	f000 f8b2 	bl	800dbfc <HW_IPCC_MM_FreeBufHandler>
 800da98:	e00f      	b.n	800daba <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800da9a:	2120      	movs	r1, #32
 800da9c:	4808      	ldr	r0, [pc, #32]	; (800dac0 <HW_IPCC_Tx_Handler+0x90>)
 800da9e:	f7ff ff64 	bl	800d96a <LL_C1_IPCC_IsActiveFlag_CHx>
 800daa2:	4603      	mov	r3, r0
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d109      	bne.n	800dabc <HW_IPCC_Tx_Handler+0x8c>
 800daa8:	4b05      	ldr	r3, [pc, #20]	; (800dac0 <HW_IPCC_Tx_Handler+0x90>)
 800daaa:	685b      	ldr	r3, [r3, #4]
 800daac:	43db      	mvns	r3, r3
 800daae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d002      	beq.n	800dabc <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800dab6:	f000 f843 	bl	800db40 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800daba:	bf00      	nop
 800dabc:	bf00      	nop
}
 800dabe:	bd80      	pop	{r7, pc}
 800dac0:	58000c00 	.word	0x58000c00

0800dac4 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	af00      	add	r7, sp, #0
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800dac8:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800daca:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800dacc:	f7ff feb0 	bl	800d830 <LL_PWR_EnableBootC2>

  return;
 800dad0:	bf00      	nop
}
 800dad2:	bd80      	pop	{r7, pc}

0800dad4 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800dad8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800dadc:	f7ff feb8 	bl	800d850 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800dae0:	4806      	ldr	r0, [pc, #24]	; (800dafc <HW_IPCC_Init+0x28>)
 800dae2:	f7ff fede 	bl	800d8a2 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800dae6:	4805      	ldr	r0, [pc, #20]	; (800dafc <HW_IPCC_Init+0x28>)
 800dae8:	f7ff fecb 	bl	800d882 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800daec:	202c      	movs	r0, #44	; 0x2c
 800daee:	f7f5 f82f 	bl	8002b50 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800daf2:	202d      	movs	r0, #45	; 0x2d
 800daf4:	f7f5 f82c 	bl	8002b50 <HAL_NVIC_EnableIRQ>

  return;
 800daf8:	bf00      	nop
}
 800dafa:	bd80      	pop	{r7, pc}
 800dafc:	58000c00 	.word	0x58000c00

0800db00 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800db00:	b580      	push	{r7, lr}
 800db02:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800db04:	2101      	movs	r1, #1
 800db06:	4802      	ldr	r0, [pc, #8]	; (800db10 <HW_IPCC_BLE_Init+0x10>)
 800db08:	f7ff ff00 	bl	800d90c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800db0c:	bf00      	nop
}
 800db0e:	bd80      	pop	{r7, pc}
 800db10:	58000c00 	.word	0x58000c00

0800db14 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800db14:	b580      	push	{r7, lr}
 800db16:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800db18:	2101      	movs	r1, #1
 800db1a:	4802      	ldr	r0, [pc, #8]	; (800db24 <HW_IPCC_BLE_SendCmd+0x10>)
 800db1c:	f7ff ff16 	bl	800d94c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800db20:	bf00      	nop
}
 800db22:	bd80      	pop	{r7, pc}
 800db24:	58000c00 	.word	0x58000c00

0800db28 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800db2c:	f7fe fd02 	bl	800c534 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800db30:	2101      	movs	r1, #1
 800db32:	4802      	ldr	r0, [pc, #8]	; (800db3c <HW_IPCC_BLE_EvtHandler+0x14>)
 800db34:	f7ff fefc 	bl	800d930 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800db38:	bf00      	nop
}
 800db3a:	bd80      	pop	{r7, pc}
 800db3c:	58000c00 	.word	0x58000c00

0800db40 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800db40:	b580      	push	{r7, lr}
 800db42:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800db44:	2120      	movs	r1, #32
 800db46:	4803      	ldr	r0, [pc, #12]	; (800db54 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800db48:	f7ff fece 	bl	800d8e8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800db4c:	f7fe fd0e 	bl	800c56c <HW_IPCC_BLE_AclDataAckNot>

  return;
 800db50:	bf00      	nop
}
 800db52:	bd80      	pop	{r7, pc}
 800db54:	58000c00 	.word	0x58000c00

0800db58 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800db5c:	2102      	movs	r1, #2
 800db5e:	4802      	ldr	r0, [pc, #8]	; (800db68 <HW_IPCC_SYS_Init+0x10>)
 800db60:	f7ff fed4 	bl	800d90c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800db64:	bf00      	nop
}
 800db66:	bd80      	pop	{r7, pc}
 800db68:	58000c00 	.word	0x58000c00

0800db6c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800db70:	2102      	movs	r1, #2
 800db72:	4804      	ldr	r0, [pc, #16]	; (800db84 <HW_IPCC_SYS_SendCmd+0x18>)
 800db74:	f7ff feea 	bl	800d94c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800db78:	2102      	movs	r1, #2
 800db7a:	4802      	ldr	r0, [pc, #8]	; (800db84 <HW_IPCC_SYS_SendCmd+0x18>)
 800db7c:	f7ff fea1 	bl	800d8c2 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800db80:	bf00      	nop
}
 800db82:	bd80      	pop	{r7, pc}
 800db84:	58000c00 	.word	0x58000c00

0800db88 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800db8c:	2102      	movs	r1, #2
 800db8e:	4803      	ldr	r0, [pc, #12]	; (800db9c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800db90:	f7ff feaa 	bl	800d8e8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800db94:	f7fe fd32 	bl	800c5fc <HW_IPCC_SYS_CmdEvtNot>

  return;
 800db98:	bf00      	nop
}
 800db9a:	bd80      	pop	{r7, pc}
 800db9c:	58000c00 	.word	0x58000c00

0800dba0 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800dba4:	f7fe fd3a 	bl	800c61c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800dba8:	2102      	movs	r1, #2
 800dbaa:	4802      	ldr	r0, [pc, #8]	; (800dbb4 <HW_IPCC_SYS_EvtHandler+0x14>)
 800dbac:	f7ff fec0 	bl	800d930 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800dbb0:	bf00      	nop
}
 800dbb2:	bd80      	pop	{r7, pc}
 800dbb4:	58000c00 	.word	0x58000c00

0800dbb8 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b082      	sub	sp, #8
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800dbc0:	2108      	movs	r1, #8
 800dbc2:	480c      	ldr	r0, [pc, #48]	; (800dbf4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800dbc4:	f7ff fed1 	bl	800d96a <LL_C1_IPCC_IsActiveFlag_CHx>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d007      	beq.n	800dbde <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800dbce:	4a0a      	ldr	r2, [pc, #40]	; (800dbf8 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800dbd4:	2108      	movs	r1, #8
 800dbd6:	4807      	ldr	r0, [pc, #28]	; (800dbf4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800dbd8:	f7ff fe73 	bl	800d8c2 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800dbdc:	e006      	b.n	800dbec <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800dbe2:	2108      	movs	r1, #8
 800dbe4:	4803      	ldr	r0, [pc, #12]	; (800dbf4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800dbe6:	f7ff feb1 	bl	800d94c <LL_C1_IPCC_SetFlag_CHx>
  return;
 800dbea:	bf00      	nop
}
 800dbec:	3708      	adds	r7, #8
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}
 800dbf2:	bf00      	nop
 800dbf4:	58000c00 	.word	0x58000c00
 800dbf8:	200004cc 	.word	0x200004cc

0800dbfc <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800dc00:	2108      	movs	r1, #8
 800dc02:	4806      	ldr	r0, [pc, #24]	; (800dc1c <HW_IPCC_MM_FreeBufHandler+0x20>)
 800dc04:	f7ff fe70 	bl	800d8e8 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800dc08:	4b05      	ldr	r3, [pc, #20]	; (800dc20 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800dc0e:	2108      	movs	r1, #8
 800dc10:	4802      	ldr	r0, [pc, #8]	; (800dc1c <HW_IPCC_MM_FreeBufHandler+0x20>)
 800dc12:	f7ff fe9b 	bl	800d94c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800dc16:	bf00      	nop
}
 800dc18:	bd80      	pop	{r7, pc}
 800dc1a:	bf00      	nop
 800dc1c:	58000c00 	.word	0x58000c00
 800dc20:	200004cc 	.word	0x200004cc

0800dc24 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800dc28:	2108      	movs	r1, #8
 800dc2a:	4802      	ldr	r0, [pc, #8]	; (800dc34 <HW_IPCC_TRACES_Init+0x10>)
 800dc2c:	f7ff fe6e 	bl	800d90c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800dc30:	bf00      	nop
}
 800dc32:	bd80      	pop	{r7, pc}
 800dc34:	58000c00 	.word	0x58000c00

0800dc38 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800dc3c:	f7fe fd8c 	bl	800c758 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800dc40:	2108      	movs	r1, #8
 800dc42:	4802      	ldr	r0, [pc, #8]	; (800dc4c <HW_IPCC_TRACES_EvtHandler+0x14>)
 800dc44:	f7ff fe74 	bl	800d930 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800dc48:	bf00      	nop
}
 800dc4a:	bd80      	pop	{r7, pc}
 800dc4c:	58000c00 	.word	0x58000c00

0800dc50 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  
  /* USER CODE END USB_Device_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800dc54:	2200      	movs	r2, #0
 800dc56:	4912      	ldr	r1, [pc, #72]	; (800dca0 <MX_USB_Device_Init+0x50>)
 800dc58:	4812      	ldr	r0, [pc, #72]	; (800dca4 <MX_USB_Device_Init+0x54>)
 800dc5a:	f7fb ff8f 	bl	8009b7c <USBD_Init>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d001      	beq.n	800dc68 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800dc64:	f7f3 ff9c 	bl	8001ba0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800dc68:	490f      	ldr	r1, [pc, #60]	; (800dca8 <MX_USB_Device_Init+0x58>)
 800dc6a:	480e      	ldr	r0, [pc, #56]	; (800dca4 <MX_USB_Device_Init+0x54>)
 800dc6c:	f7fb ffb1 	bl	8009bd2 <USBD_RegisterClass>
 800dc70:	4603      	mov	r3, r0
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d001      	beq.n	800dc7a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800dc76:	f7f3 ff93 	bl	8001ba0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800dc7a:	490c      	ldr	r1, [pc, #48]	; (800dcac <MX_USB_Device_Init+0x5c>)
 800dc7c:	4809      	ldr	r0, [pc, #36]	; (800dca4 <MX_USB_Device_Init+0x54>)
 800dc7e:	f7fb fedf 	bl	8009a40 <USBD_CDC_RegisterInterface>
 800dc82:	4603      	mov	r3, r0
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d001      	beq.n	800dc8c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800dc88:	f7f3 ff8a 	bl	8001ba0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800dc8c:	4805      	ldr	r0, [pc, #20]	; (800dca4 <MX_USB_Device_Init+0x54>)
 800dc8e:	f7fb ffba 	bl	8009c06 <USBD_Start>
 800dc92:	4603      	mov	r3, r0
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d001      	beq.n	800dc9c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800dc98:	f7f3 ff82 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */
  
  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800dc9c:	bf00      	nop
 800dc9e:	bd80      	pop	{r7, pc}
 800dca0:	20000138 	.word	0x20000138
 800dca4:	200007c8 	.word	0x200007c8
 800dca8:	20000024 	.word	0x20000024
 800dcac:	20000128 	.word	0x20000128

0800dcb0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	4907      	ldr	r1, [pc, #28]	; (800dcd4 <CDC_Init_FS+0x24>)
 800dcb8:	4807      	ldr	r0, [pc, #28]	; (800dcd8 <CDC_Init_FS+0x28>)
 800dcba:	f7fb fed8 	bl	8009a6e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800dcbe:	4907      	ldr	r1, [pc, #28]	; (800dcdc <CDC_Init_FS+0x2c>)
 800dcc0:	4805      	ldr	r0, [pc, #20]	; (800dcd8 <CDC_Init_FS+0x28>)
 800dcc2:	f7fb feee 	bl	8009aa2 <USBD_CDC_SetRxBuffer>
  VCPInitialized=1;
 800dcc6:	4b06      	ldr	r3, [pc, #24]	; (800dce0 <CDC_Init_FS+0x30>)
 800dcc8:	2201      	movs	r2, #1
 800dcca:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800dccc:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	bd80      	pop	{r7, pc}
 800dcd2:	bf00      	nop
 800dcd4:	20000a9c 	.word	0x20000a9c
 800dcd8:	200007c8 	.word	0x200007c8
 800dcdc:	20000a8c 	.word	0x20000a8c
 800dce0:	200004d0 	.word	0x200004d0

0800dce4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800dce4:	b480      	push	{r7}
 800dce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  VCPInitialized=0;
 800dce8:	4b04      	ldr	r3, [pc, #16]	; (800dcfc <CDC_DeInit_FS+0x18>)
 800dcea:	2200      	movs	r2, #0
 800dcec:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800dcee:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf8:	4770      	bx	lr
 800dcfa:	bf00      	nop
 800dcfc:	200004d0 	.word	0x200004d0

0800dd00 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dd00:	b480      	push	{r7}
 800dd02:	b083      	sub	sp, #12
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	4603      	mov	r3, r0
 800dd08:	6039      	str	r1, [r7, #0]
 800dd0a:	71fb      	strb	r3, [r7, #7]
 800dd0c:	4613      	mov	r3, r2
 800dd0e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800dd10:	79fb      	ldrb	r3, [r7, #7]
 800dd12:	2b23      	cmp	r3, #35	; 0x23
 800dd14:	d84a      	bhi.n	800ddac <CDC_Control_FS+0xac>
 800dd16:	a201      	add	r2, pc, #4	; (adr r2, 800dd1c <CDC_Control_FS+0x1c>)
 800dd18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd1c:	0800ddad 	.word	0x0800ddad
 800dd20:	0800ddad 	.word	0x0800ddad
 800dd24:	0800ddad 	.word	0x0800ddad
 800dd28:	0800ddad 	.word	0x0800ddad
 800dd2c:	0800ddad 	.word	0x0800ddad
 800dd30:	0800ddad 	.word	0x0800ddad
 800dd34:	0800ddad 	.word	0x0800ddad
 800dd38:	0800ddad 	.word	0x0800ddad
 800dd3c:	0800ddad 	.word	0x0800ddad
 800dd40:	0800ddad 	.word	0x0800ddad
 800dd44:	0800ddad 	.word	0x0800ddad
 800dd48:	0800ddad 	.word	0x0800ddad
 800dd4c:	0800ddad 	.word	0x0800ddad
 800dd50:	0800ddad 	.word	0x0800ddad
 800dd54:	0800ddad 	.word	0x0800ddad
 800dd58:	0800ddad 	.word	0x0800ddad
 800dd5c:	0800ddad 	.word	0x0800ddad
 800dd60:	0800ddad 	.word	0x0800ddad
 800dd64:	0800ddad 	.word	0x0800ddad
 800dd68:	0800ddad 	.word	0x0800ddad
 800dd6c:	0800ddad 	.word	0x0800ddad
 800dd70:	0800ddad 	.word	0x0800ddad
 800dd74:	0800ddad 	.word	0x0800ddad
 800dd78:	0800ddad 	.word	0x0800ddad
 800dd7c:	0800ddad 	.word	0x0800ddad
 800dd80:	0800ddad 	.word	0x0800ddad
 800dd84:	0800ddad 	.word	0x0800ddad
 800dd88:	0800ddad 	.word	0x0800ddad
 800dd8c:	0800ddad 	.word	0x0800ddad
 800dd90:	0800ddad 	.word	0x0800ddad
 800dd94:	0800ddad 	.word	0x0800ddad
 800dd98:	0800ddad 	.word	0x0800ddad
 800dd9c:	0800ddad 	.word	0x0800ddad
 800dda0:	0800ddad 	.word	0x0800ddad
 800dda4:	0800ddad 	.word	0x0800ddad
 800dda8:	0800ddad 	.word	0x0800ddad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ddac:	bf00      	nop
  }

  return (USBD_OK);
 800ddae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	370c      	adds	r7, #12
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddba:	4770      	bx	lr

0800ddbc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b082      	sub	sp, #8
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
 800ddc4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ddc6:	6879      	ldr	r1, [r7, #4]
 800ddc8:	4805      	ldr	r0, [pc, #20]	; (800dde0 <CDC_Receive_FS+0x24>)
 800ddca:	f7fb fe6a 	bl	8009aa2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ddce:	4804      	ldr	r0, [pc, #16]	; (800dde0 <CDC_Receive_FS+0x24>)
 800ddd0:	f7fb feaa 	bl	8009b28 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ddd4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	3708      	adds	r7, #8
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}
 800ddde:	bf00      	nop
 800dde0:	200007c8 	.word	0x200007c8

0800dde4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b084      	sub	sp, #16
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	460b      	mov	r3, r1
 800ddee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ddf4:	4b0d      	ldr	r3, [pc, #52]	; (800de2c <CDC_Transmit_FS+0x48>)
 800ddf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddfa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ddfc:	68bb      	ldr	r3, [r7, #8]
 800ddfe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800de02:	2b00      	cmp	r3, #0
 800de04:	d001      	beq.n	800de0a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800de06:	2301      	movs	r3, #1
 800de08:	e00b      	b.n	800de22 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800de0a:	887b      	ldrh	r3, [r7, #2]
 800de0c:	461a      	mov	r2, r3
 800de0e:	6879      	ldr	r1, [r7, #4]
 800de10:	4806      	ldr	r0, [pc, #24]	; (800de2c <CDC_Transmit_FS+0x48>)
 800de12:	f7fb fe2c 	bl	8009a6e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800de16:	4805      	ldr	r0, [pc, #20]	; (800de2c <CDC_Transmit_FS+0x48>)
 800de18:	f7fb fe57 	bl	8009aca <USBD_CDC_TransmitPacket>
 800de1c:	4603      	mov	r3, r0
 800de1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800de20:	7bfb      	ldrb	r3, [r7, #15]
}
 800de22:	4618      	mov	r0, r3
 800de24:	3710      	adds	r7, #16
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}
 800de2a:	bf00      	nop
 800de2c:	200007c8 	.word	0x200007c8

0800de30 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de30:	b480      	push	{r7}
 800de32:	b083      	sub	sp, #12
 800de34:	af00      	add	r7, sp, #0
 800de36:	4603      	mov	r3, r0
 800de38:	6039      	str	r1, [r7, #0]
 800de3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	2212      	movs	r2, #18
 800de40:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800de42:	4b03      	ldr	r3, [pc, #12]	; (800de50 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800de44:	4618      	mov	r0, r3
 800de46:	370c      	adds	r7, #12
 800de48:	46bd      	mov	sp, r7
 800de4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4e:	4770      	bx	lr
 800de50:	20000158 	.word	0x20000158

0800de54 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de54:	b480      	push	{r7}
 800de56:	b083      	sub	sp, #12
 800de58:	af00      	add	r7, sp, #0
 800de5a:	4603      	mov	r3, r0
 800de5c:	6039      	str	r1, [r7, #0]
 800de5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	2204      	movs	r2, #4
 800de64:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800de66:	4b03      	ldr	r3, [pc, #12]	; (800de74 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800de68:	4618      	mov	r0, r3
 800de6a:	370c      	adds	r7, #12
 800de6c:	46bd      	mov	sp, r7
 800de6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de72:	4770      	bx	lr
 800de74:	2000016c 	.word	0x2000016c

0800de78 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b082      	sub	sp, #8
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	4603      	mov	r3, r0
 800de80:	6039      	str	r1, [r7, #0]
 800de82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800de84:	79fb      	ldrb	r3, [r7, #7]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d105      	bne.n	800de96 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800de8a:	683a      	ldr	r2, [r7, #0]
 800de8c:	4907      	ldr	r1, [pc, #28]	; (800deac <USBD_CDC_ProductStrDescriptor+0x34>)
 800de8e:	4808      	ldr	r0, [pc, #32]	; (800deb0 <USBD_CDC_ProductStrDescriptor+0x38>)
 800de90:	f7fc fe54 	bl	800ab3c <USBD_GetString>
 800de94:	e004      	b.n	800dea0 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800de96:	683a      	ldr	r2, [r7, #0]
 800de98:	4904      	ldr	r1, [pc, #16]	; (800deac <USBD_CDC_ProductStrDescriptor+0x34>)
 800de9a:	4805      	ldr	r0, [pc, #20]	; (800deb0 <USBD_CDC_ProductStrDescriptor+0x38>)
 800de9c:	f7fc fe4e 	bl	800ab3c <USBD_GetString>
  }
  return USBD_StrDesc;
 800dea0:	4b02      	ldr	r3, [pc, #8]	; (800deac <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800dea2:	4618      	mov	r0, r3
 800dea4:	3708      	adds	r7, #8
 800dea6:	46bd      	mov	sp, r7
 800dea8:	bd80      	pop	{r7, pc}
 800deaa:	bf00      	nop
 800deac:	20000aac 	.word	0x20000aac
 800deb0:	0800f1ac 	.word	0x0800f1ac

0800deb4 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b082      	sub	sp, #8
 800deb8:	af00      	add	r7, sp, #0
 800deba:	4603      	mov	r3, r0
 800debc:	6039      	str	r1, [r7, #0]
 800debe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dec0:	683a      	ldr	r2, [r7, #0]
 800dec2:	4904      	ldr	r1, [pc, #16]	; (800ded4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800dec4:	4804      	ldr	r0, [pc, #16]	; (800ded8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800dec6:	f7fc fe39 	bl	800ab3c <USBD_GetString>
  return USBD_StrDesc;
 800deca:	4b02      	ldr	r3, [pc, #8]	; (800ded4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800decc:	4618      	mov	r0, r3
 800dece:	3708      	adds	r7, #8
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}
 800ded4:	20000aac 	.word	0x20000aac
 800ded8:	0800f1c4 	.word	0x0800f1c4

0800dedc <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b082      	sub	sp, #8
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	4603      	mov	r3, r0
 800dee4:	6039      	str	r1, [r7, #0]
 800dee6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	221a      	movs	r2, #26
 800deec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800deee:	f000 f843 	bl	800df78 <Get_SerialNum>
  
  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */
  
  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800def2:	4b02      	ldr	r3, [pc, #8]	; (800defc <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800def4:	4618      	mov	r0, r3
 800def6:	3708      	adds	r7, #8
 800def8:	46bd      	mov	sp, r7
 800defa:	bd80      	pop	{r7, pc}
 800defc:	20000170 	.word	0x20000170

0800df00 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b082      	sub	sp, #8
 800df04:	af00      	add	r7, sp, #0
 800df06:	4603      	mov	r3, r0
 800df08:	6039      	str	r1, [r7, #0]
 800df0a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800df0c:	79fb      	ldrb	r3, [r7, #7]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d105      	bne.n	800df1e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800df12:	683a      	ldr	r2, [r7, #0]
 800df14:	4907      	ldr	r1, [pc, #28]	; (800df34 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800df16:	4808      	ldr	r0, [pc, #32]	; (800df38 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800df18:	f7fc fe10 	bl	800ab3c <USBD_GetString>
 800df1c:	e004      	b.n	800df28 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800df1e:	683a      	ldr	r2, [r7, #0]
 800df20:	4904      	ldr	r1, [pc, #16]	; (800df34 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800df22:	4805      	ldr	r0, [pc, #20]	; (800df38 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800df24:	f7fc fe0a 	bl	800ab3c <USBD_GetString>
  }
  return USBD_StrDesc;
 800df28:	4b02      	ldr	r3, [pc, #8]	; (800df34 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800df2a:	4618      	mov	r0, r3
 800df2c:	3708      	adds	r7, #8
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd80      	pop	{r7, pc}
 800df32:	bf00      	nop
 800df34:	20000aac 	.word	0x20000aac
 800df38:	0800f1d8 	.word	0x0800f1d8

0800df3c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b082      	sub	sp, #8
 800df40:	af00      	add	r7, sp, #0
 800df42:	4603      	mov	r3, r0
 800df44:	6039      	str	r1, [r7, #0]
 800df46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800df48:	79fb      	ldrb	r3, [r7, #7]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d105      	bne.n	800df5a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800df4e:	683a      	ldr	r2, [r7, #0]
 800df50:	4907      	ldr	r1, [pc, #28]	; (800df70 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800df52:	4808      	ldr	r0, [pc, #32]	; (800df74 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800df54:	f7fc fdf2 	bl	800ab3c <USBD_GetString>
 800df58:	e004      	b.n	800df64 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800df5a:	683a      	ldr	r2, [r7, #0]
 800df5c:	4904      	ldr	r1, [pc, #16]	; (800df70 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800df5e:	4805      	ldr	r0, [pc, #20]	; (800df74 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800df60:	f7fc fdec 	bl	800ab3c <USBD_GetString>
  }
  return USBD_StrDesc;
 800df64:	4b02      	ldr	r3, [pc, #8]	; (800df70 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800df66:	4618      	mov	r0, r3
 800df68:	3708      	adds	r7, #8
 800df6a:	46bd      	mov	sp, r7
 800df6c:	bd80      	pop	{r7, pc}
 800df6e:	bf00      	nop
 800df70:	20000aac 	.word	0x20000aac
 800df74:	0800f1e4 	.word	0x0800f1e4

0800df78 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b084      	sub	sp, #16
 800df7c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800df7e:	4b0f      	ldr	r3, [pc, #60]	; (800dfbc <Get_SerialNum+0x44>)
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800df84:	4b0e      	ldr	r3, [pc, #56]	; (800dfc0 <Get_SerialNum+0x48>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800df8a:	4b0e      	ldr	r3, [pc, #56]	; (800dfc4 <Get_SerialNum+0x4c>)
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800df90:	68fa      	ldr	r2, [r7, #12]
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	4413      	add	r3, r2
 800df96:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d009      	beq.n	800dfb2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800df9e:	2208      	movs	r2, #8
 800dfa0:	4909      	ldr	r1, [pc, #36]	; (800dfc8 <Get_SerialNum+0x50>)
 800dfa2:	68f8      	ldr	r0, [r7, #12]
 800dfa4:	f000 f814 	bl	800dfd0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800dfa8:	2204      	movs	r2, #4
 800dfaa:	4908      	ldr	r1, [pc, #32]	; (800dfcc <Get_SerialNum+0x54>)
 800dfac:	68b8      	ldr	r0, [r7, #8]
 800dfae:	f000 f80f 	bl	800dfd0 <IntToUnicode>
  }
}
 800dfb2:	bf00      	nop
 800dfb4:	3710      	adds	r7, #16
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}
 800dfba:	bf00      	nop
 800dfbc:	1fff7590 	.word	0x1fff7590
 800dfc0:	1fff7594 	.word	0x1fff7594
 800dfc4:	1fff7598 	.word	0x1fff7598
 800dfc8:	20000172 	.word	0x20000172
 800dfcc:	20000182 	.word	0x20000182

0800dfd0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dfd0:	b480      	push	{r7}
 800dfd2:	b087      	sub	sp, #28
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	60f8      	str	r0, [r7, #12]
 800dfd8:	60b9      	str	r1, [r7, #8]
 800dfda:	4613      	mov	r3, r2
 800dfdc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dfde:	2300      	movs	r3, #0
 800dfe0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	75fb      	strb	r3, [r7, #23]
 800dfe6:	e027      	b.n	800e038 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	0f1b      	lsrs	r3, r3, #28
 800dfec:	2b09      	cmp	r3, #9
 800dfee:	d80b      	bhi.n	800e008 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	0f1b      	lsrs	r3, r3, #28
 800dff4:	b2da      	uxtb	r2, r3
 800dff6:	7dfb      	ldrb	r3, [r7, #23]
 800dff8:	005b      	lsls	r3, r3, #1
 800dffa:	4619      	mov	r1, r3
 800dffc:	68bb      	ldr	r3, [r7, #8]
 800dffe:	440b      	add	r3, r1
 800e000:	3230      	adds	r2, #48	; 0x30
 800e002:	b2d2      	uxtb	r2, r2
 800e004:	701a      	strb	r2, [r3, #0]
 800e006:	e00a      	b.n	800e01e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	0f1b      	lsrs	r3, r3, #28
 800e00c:	b2da      	uxtb	r2, r3
 800e00e:	7dfb      	ldrb	r3, [r7, #23]
 800e010:	005b      	lsls	r3, r3, #1
 800e012:	4619      	mov	r1, r3
 800e014:	68bb      	ldr	r3, [r7, #8]
 800e016:	440b      	add	r3, r1
 800e018:	3237      	adds	r2, #55	; 0x37
 800e01a:	b2d2      	uxtb	r2, r2
 800e01c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	011b      	lsls	r3, r3, #4
 800e022:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e024:	7dfb      	ldrb	r3, [r7, #23]
 800e026:	005b      	lsls	r3, r3, #1
 800e028:	3301      	adds	r3, #1
 800e02a:	68ba      	ldr	r2, [r7, #8]
 800e02c:	4413      	add	r3, r2
 800e02e:	2200      	movs	r2, #0
 800e030:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e032:	7dfb      	ldrb	r3, [r7, #23]
 800e034:	3301      	adds	r3, #1
 800e036:	75fb      	strb	r3, [r7, #23]
 800e038:	7dfa      	ldrb	r2, [r7, #23]
 800e03a:	79fb      	ldrb	r3, [r7, #7]
 800e03c:	429a      	cmp	r2, r3
 800e03e:	d3d3      	bcc.n	800dfe8 <IntToUnicode+0x18>
  }
}
 800e040:	bf00      	nop
 800e042:	371c      	adds	r7, #28
 800e044:	46bd      	mov	sp, r7
 800e046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04a:	4770      	bx	lr

0800e04c <LL_AHB2_GRP1_EnableClock>:
{
 800e04c:	b480      	push	{r7}
 800e04e:	b085      	sub	sp, #20
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800e054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e058:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e05a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	4313      	orrs	r3, r2
 800e062:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800e064:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e068:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	4013      	ands	r3, r2
 800e06e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e070:	68fb      	ldr	r3, [r7, #12]
}
 800e072:	bf00      	nop
 800e074:	3714      	adds	r7, #20
 800e076:	46bd      	mov	sp, r7
 800e078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07c:	4770      	bx	lr

0800e07e <LL_APB1_GRP1_EnableClock>:
{
 800e07e:	b480      	push	{r7}
 800e080:	b085      	sub	sp, #20
 800e082:	af00      	add	r7, sp, #0
 800e084:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800e086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e08a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e08c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	4313      	orrs	r3, r2
 800e094:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800e096:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e09a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	4013      	ands	r3, r2
 800e0a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
}
 800e0a4:	bf00      	nop
 800e0a6:	3714      	adds	r7, #20
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ae:	4770      	bx	lr

0800e0b0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b088      	sub	sp, #32
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e0b8:	f107 030c 	add.w	r3, r7, #12
 800e0bc:	2200      	movs	r2, #0
 800e0be:	601a      	str	r2, [r3, #0]
 800e0c0:	605a      	str	r2, [r3, #4]
 800e0c2:	609a      	str	r2, [r3, #8]
 800e0c4:	60da      	str	r2, [r3, #12]
 800e0c6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	4a13      	ldr	r2, [pc, #76]	; (800e11c <HAL_PCD_MspInit+0x6c>)
 800e0ce:	4293      	cmp	r3, r2
 800e0d0:	d120      	bne.n	800e114 <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e0d2:	2001      	movs	r0, #1
 800e0d4:	f7ff ffba 	bl	800e04c <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e0d8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e0dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e0de:	2302      	movs	r3, #2
 800e0e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e0e6:	2302      	movs	r3, #2
 800e0e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800e0ea:	230a      	movs	r3, #10
 800e0ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e0ee:	f107 030c 	add.w	r3, r7, #12
 800e0f2:	4619      	mov	r1, r3
 800e0f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e0f8:	f7f4 fd9a 	bl	8002c30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e0fc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800e100:	f7ff ffbd 	bl	800e07e <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800e104:	2200      	movs	r2, #0
 800e106:	2100      	movs	r1, #0
 800e108:	2014      	movs	r0, #20
 800e10a:	f7f4 fcf7 	bl	8002afc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800e10e:	2014      	movs	r0, #20
 800e110:	f7f4 fd1e 	bl	8002b50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800e114:	bf00      	nop
 800e116:	3720      	adds	r7, #32
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}
 800e11c:	40006800 	.word	0x40006800

0800e120 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b082      	sub	sp, #8
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);  
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800e134:	4619      	mov	r1, r3
 800e136:	4610      	mov	r0, r2
 800e138:	f7fb fdae 	bl	8009c98 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800e13c:	bf00      	nop
 800e13e:	3708      	adds	r7, #8
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}

0800e144 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b082      	sub	sp, #8
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
 800e14c:	460b      	mov	r3, r1
 800e14e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);  
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800e156:	78fb      	ldrb	r3, [r7, #3]
 800e158:	687a      	ldr	r2, [r7, #4]
 800e15a:	015b      	lsls	r3, r3, #5
 800e15c:	4413      	add	r3, r2
 800e15e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800e162:	681a      	ldr	r2, [r3, #0]
 800e164:	78fb      	ldrb	r3, [r7, #3]
 800e166:	4619      	mov	r1, r3
 800e168:	f7fb fde1 	bl	8009d2e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800e16c:	bf00      	nop
 800e16e:	3708      	adds	r7, #8
 800e170:	46bd      	mov	sp, r7
 800e172:	bd80      	pop	{r7, pc}

0800e174 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b082      	sub	sp, #8
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
 800e17c:	460b      	mov	r3, r1
 800e17e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */  
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);  
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800e186:	78fb      	ldrb	r3, [r7, #3]
 800e188:	687a      	ldr	r2, [r7, #4]
 800e18a:	015b      	lsls	r3, r3, #5
 800e18c:	4413      	add	r3, r2
 800e18e:	333c      	adds	r3, #60	; 0x3c
 800e190:	681a      	ldr	r2, [r3, #0]
 800e192:	78fb      	ldrb	r3, [r7, #3]
 800e194:	4619      	mov	r1, r3
 800e196:	f7fb fe3b 	bl	8009e10 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800e19a:	bf00      	nop
 800e19c:	3708      	adds	r7, #8
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}

0800e1a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1a2:	b580      	push	{r7, lr}
 800e1a4:	b082      	sub	sp, #8
 800e1a6:	af00      	add	r7, sp, #0
 800e1a8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */  
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);  
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	f7fb ff4e 	bl	800a052 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800e1b6:	bf00      	nop
 800e1b8:	3708      	adds	r7, #8
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}

0800e1be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800e1be:	b580      	push	{r7, lr}
 800e1c0:	b084      	sub	sp, #16
 800e1c2:	af00      	add	r7, sp, #0
 800e1c4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	689b      	ldr	r3, [r3, #8]
 800e1ce:	2b02      	cmp	r3, #2
 800e1d0:	d001      	beq.n	800e1d6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e1d2:	f7f3 fce5 	bl	8001ba0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e1dc:	7bfa      	ldrb	r2, [r7, #15]
 800e1de:	4611      	mov	r1, r2
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f7fb fefb 	bl	8009fdc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	f7fb feb4 	bl	8009f5a <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800e1f2:	bf00      	nop
 800e1f4:	3710      	adds	r7, #16
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bd80      	pop	{r7, pc}
	...

0800e1fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b082      	sub	sp, #8
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e20a:	4618      	mov	r0, r3
 800e20c:	f7fb fef6 	bl	8009ffc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	699b      	ldr	r3, [r3, #24]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d005      	beq.n	800e224 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e218:	4b04      	ldr	r3, [pc, #16]	; (800e22c <HAL_PCD_SuspendCallback+0x30>)
 800e21a:	691b      	ldr	r3, [r3, #16]
 800e21c:	4a03      	ldr	r2, [pc, #12]	; (800e22c <HAL_PCD_SuspendCallback+0x30>)
 800e21e:	f043 0306 	orr.w	r3, r3, #6
 800e222:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800e224:	bf00      	nop
 800e226:	3708      	adds	r7, #8
 800e228:	46bd      	mov	sp, r7
 800e22a:	bd80      	pop	{r7, pc}
 800e22c:	e000ed00 	.word	0xe000ed00

0800e230 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b082      	sub	sp, #8
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	699b      	ldr	r3, [r3, #24]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d007      	beq.n	800e250 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e240:	4b08      	ldr	r3, [pc, #32]	; (800e264 <HAL_PCD_ResumeCallback+0x34>)
 800e242:	691b      	ldr	r3, [r3, #16]
 800e244:	4a07      	ldr	r2, [pc, #28]	; (800e264 <HAL_PCD_ResumeCallback+0x34>)
 800e246:	f023 0306 	bic.w	r3, r3, #6
 800e24a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800e24c:	f000 f9f8 	bl	800e640 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
 
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e256:	4618      	mov	r0, r3
 800e258:	f7fb fee5 	bl	800a026 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800e25c:	bf00      	nop
 800e25e:	3708      	adds	r7, #8
 800e260:	46bd      	mov	sp, r7
 800e262:	bd80      	pop	{r7, pc}
 800e264:	e000ed00 	.word	0xe000ed00

0800e268 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b082      	sub	sp, #8
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800e270:	4a2c      	ldr	r2, [pc, #176]	; (800e324 <USBD_LL_Init+0xbc>)
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	4a2a      	ldr	r2, [pc, #168]	; (800e324 <USBD_LL_Init+0xbc>)
 800e27c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800e280:	f7f5 fec8 	bl	8004014 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800e284:	4b27      	ldr	r3, [pc, #156]	; (800e324 <USBD_LL_Init+0xbc>)
 800e286:	4a28      	ldr	r2, [pc, #160]	; (800e328 <USBD_LL_Init+0xc0>)
 800e288:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e28a:	4b26      	ldr	r3, [pc, #152]	; (800e324 <USBD_LL_Init+0xbc>)
 800e28c:	2208      	movs	r2, #8
 800e28e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e290:	4b24      	ldr	r3, [pc, #144]	; (800e324 <USBD_LL_Init+0xbc>)
 800e292:	2202      	movs	r2, #2
 800e294:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e296:	4b23      	ldr	r3, [pc, #140]	; (800e324 <USBD_LL_Init+0xbc>)
 800e298:	2202      	movs	r2, #2
 800e29a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800e29c:	4b21      	ldr	r3, [pc, #132]	; (800e324 <USBD_LL_Init+0xbc>)
 800e29e:	2200      	movs	r2, #0
 800e2a0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e2a2:	4b20      	ldr	r3, [pc, #128]	; (800e324 <USBD_LL_Init+0xbc>)
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800e2a8:	4b1e      	ldr	r3, [pc, #120]	; (800e324 <USBD_LL_Init+0xbc>)
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e2ae:	4b1d      	ldr	r3, [pc, #116]	; (800e324 <USBD_LL_Init+0xbc>)
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e2b4:	481b      	ldr	r0, [pc, #108]	; (800e324 <USBD_LL_Init+0xbc>)
 800e2b6:	f7f4 ff65 	bl	8003184 <HAL_PCD_Init>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d001      	beq.n	800e2c4 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800e2c0:	f7f3 fc6e 	bl	8001ba0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */
  
  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e2ca:	2318      	movs	r3, #24
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	2100      	movs	r1, #0
 800e2d0:	f7f5 fe1a 	bl	8003f08 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e2da:	2358      	movs	r3, #88	; 0x58
 800e2dc:	2200      	movs	r2, #0
 800e2de:	2180      	movs	r1, #128	; 0x80
 800e2e0:	f7f5 fe12 	bl	8003f08 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e2ea:	23c0      	movs	r3, #192	; 0xc0
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	2181      	movs	r1, #129	; 0x81
 800e2f0:	f7f5 fe0a 	bl	8003f08 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e2fa:	f44f 7388 	mov.w	r3, #272	; 0x110
 800e2fe:	2200      	movs	r2, #0
 800e300:	2101      	movs	r1, #1
 800e302:	f7f5 fe01 	bl	8003f08 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e30c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e310:	2200      	movs	r2, #0
 800e312:	2182      	movs	r1, #130	; 0x82
 800e314:	f7f5 fdf8 	bl	8003f08 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800e318:	2300      	movs	r3, #0
}
 800e31a:	4618      	mov	r0, r3
 800e31c:	3708      	adds	r7, #8
 800e31e:	46bd      	mov	sp, r7
 800e320:	bd80      	pop	{r7, pc}
 800e322:	bf00      	nop
 800e324:	20000cac 	.word	0x20000cac
 800e328:	40006800 	.word	0x40006800

0800e32c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b084      	sub	sp, #16
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e334:	2300      	movs	r3, #0
 800e336:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e338:	2300      	movs	r3, #0
 800e33a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e342:	4618      	mov	r0, r3
 800e344:	f7f4 ffe6 	bl	8003314 <HAL_PCD_Start>
 800e348:	4603      	mov	r3, r0
 800e34a:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e34c:	7bfb      	ldrb	r3, [r7, #15]
 800e34e:	4618      	mov	r0, r3
 800e350:	f000 f97c 	bl	800e64c <USBD_Get_USB_Status>
 800e354:	4603      	mov	r3, r0
 800e356:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800e358:	7bbb      	ldrb	r3, [r7, #14]
}
 800e35a:	4618      	mov	r0, r3
 800e35c:	3710      	adds	r7, #16
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}

0800e362 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e362:	b580      	push	{r7, lr}
 800e364:	b084      	sub	sp, #16
 800e366:	af00      	add	r7, sp, #0
 800e368:	6078      	str	r0, [r7, #4]
 800e36a:	4608      	mov	r0, r1
 800e36c:	4611      	mov	r1, r2
 800e36e:	461a      	mov	r2, r3
 800e370:	4603      	mov	r3, r0
 800e372:	70fb      	strb	r3, [r7, #3]
 800e374:	460b      	mov	r3, r1
 800e376:	70bb      	strb	r3, [r7, #2]
 800e378:	4613      	mov	r3, r2
 800e37a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e37c:	2300      	movs	r3, #0
 800e37e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e380:	2300      	movs	r3, #0
 800e382:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e38a:	78bb      	ldrb	r3, [r7, #2]
 800e38c:	883a      	ldrh	r2, [r7, #0]
 800e38e:	78f9      	ldrb	r1, [r7, #3]
 800e390:	f7f5 f960 	bl	8003654 <HAL_PCD_EP_Open>
 800e394:	4603      	mov	r3, r0
 800e396:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e398:	7bfb      	ldrb	r3, [r7, #15]
 800e39a:	4618      	mov	r0, r3
 800e39c:	f000 f956 	bl	800e64c <USBD_Get_USB_Status>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800e3a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	3710      	adds	r7, #16
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}

0800e3ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3ae:	b580      	push	{r7, lr}
 800e3b0:	b084      	sub	sp, #16
 800e3b2:	af00      	add	r7, sp, #0
 800e3b4:	6078      	str	r0, [r7, #4]
 800e3b6:	460b      	mov	r3, r1
 800e3b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e3c8:	78fa      	ldrb	r2, [r7, #3]
 800e3ca:	4611      	mov	r1, r2
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	f7f5 f9a1 	bl	8003714 <HAL_PCD_EP_Close>
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3d6:	7bfb      	ldrb	r3, [r7, #15]
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f000 f937 	bl	800e64c <USBD_Get_USB_Status>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800e3e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	3710      	adds	r7, #16
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd80      	pop	{r7, pc}

0800e3ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b084      	sub	sp, #16
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
 800e3f4:	460b      	mov	r3, r1
 800e3f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e406:	78fa      	ldrb	r2, [r7, #3]
 800e408:	4611      	mov	r1, r2
 800e40a:	4618      	mov	r0, r3
 800e40c:	f7f5 fa4c 	bl	80038a8 <HAL_PCD_EP_SetStall>
 800e410:	4603      	mov	r3, r0
 800e412:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e414:	7bfb      	ldrb	r3, [r7, #15]
 800e416:	4618      	mov	r0, r3
 800e418:	f000 f918 	bl	800e64c <USBD_Get_USB_Status>
 800e41c:	4603      	mov	r3, r0
 800e41e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800e420:	7bbb      	ldrb	r3, [r7, #14]
}
 800e422:	4618      	mov	r0, r3
 800e424:	3710      	adds	r7, #16
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}

0800e42a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e42a:	b580      	push	{r7, lr}
 800e42c:	b084      	sub	sp, #16
 800e42e:	af00      	add	r7, sp, #0
 800e430:	6078      	str	r0, [r7, #4]
 800e432:	460b      	mov	r3, r1
 800e434:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e436:	2300      	movs	r3, #0
 800e438:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e43a:	2300      	movs	r3, #0
 800e43c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e444:	78fa      	ldrb	r2, [r7, #3]
 800e446:	4611      	mov	r1, r2
 800e448:	4618      	mov	r0, r3
 800e44a:	f7f5 fa87 	bl	800395c <HAL_PCD_EP_ClrStall>
 800e44e:	4603      	mov	r3, r0
 800e450:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e452:	7bfb      	ldrb	r3, [r7, #15]
 800e454:	4618      	mov	r0, r3
 800e456:	f000 f8f9 	bl	800e64c <USBD_Get_USB_Status>
 800e45a:	4603      	mov	r3, r0
 800e45c:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 800e45e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e460:	4618      	mov	r0, r3
 800e462:	3710      	adds	r7, #16
 800e464:	46bd      	mov	sp, r7
 800e466:	bd80      	pop	{r7, pc}

0800e468 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e468:	b480      	push	{r7}
 800e46a:	b085      	sub	sp, #20
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
 800e470:	460b      	mov	r3, r1
 800e472:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e47a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800e47c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e480:	2b00      	cmp	r3, #0
 800e482:	da08      	bge.n	800e496 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800e484:	78fb      	ldrb	r3, [r7, #3]
 800e486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e48a:	68fa      	ldr	r2, [r7, #12]
 800e48c:	015b      	lsls	r3, r3, #5
 800e48e:	4413      	add	r3, r2
 800e490:	332a      	adds	r3, #42	; 0x2a
 800e492:	781b      	ldrb	r3, [r3, #0]
 800e494:	e008      	b.n	800e4a8 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800e496:	78fb      	ldrb	r3, [r7, #3]
 800e498:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e49c:	68fa      	ldr	r2, [r7, #12]
 800e49e:	015b      	lsls	r3, r3, #5
 800e4a0:	4413      	add	r3, r2
 800e4a2:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800e4a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	3714      	adds	r7, #20
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b2:	4770      	bx	lr

0800e4b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b084      	sub	sp, #16
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
 800e4bc:	460b      	mov	r3, r1
 800e4be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e4ce:	78fa      	ldrb	r2, [r7, #3]
 800e4d0:	4611      	mov	r1, r2
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	f7f5 f899 	bl	800360a <HAL_PCD_SetAddress>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4dc:	7bfb      	ldrb	r3, [r7, #15]
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f000 f8b4 	bl	800e64c <USBD_Get_USB_Status>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800e4e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	3710      	adds	r7, #16
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	bd80      	pop	{r7, pc}

0800e4f2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e4f2:	b580      	push	{r7, lr}
 800e4f4:	b086      	sub	sp, #24
 800e4f6:	af00      	add	r7, sp, #0
 800e4f8:	60f8      	str	r0, [r7, #12]
 800e4fa:	607a      	str	r2, [r7, #4]
 800e4fc:	461a      	mov	r2, r3
 800e4fe:	460b      	mov	r3, r1
 800e500:	72fb      	strb	r3, [r7, #11]
 800e502:	4613      	mov	r3, r2
 800e504:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e506:	2300      	movs	r3, #0
 800e508:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e50a:	2300      	movs	r3, #0
 800e50c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e514:	893b      	ldrh	r3, [r7, #8]
 800e516:	7af9      	ldrb	r1, [r7, #11]
 800e518:	687a      	ldr	r2, [r7, #4]
 800e51a:	f7f5 f98c 	bl	8003836 <HAL_PCD_EP_Transmit>
 800e51e:	4603      	mov	r3, r0
 800e520:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e522:	7dfb      	ldrb	r3, [r7, #23]
 800e524:	4618      	mov	r0, r3
 800e526:	f000 f891 	bl	800e64c <USBD_Get_USB_Status>
 800e52a:	4603      	mov	r3, r0
 800e52c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800e52e:	7dbb      	ldrb	r3, [r7, #22]
}
 800e530:	4618      	mov	r0, r3
 800e532:	3718      	adds	r7, #24
 800e534:	46bd      	mov	sp, r7
 800e536:	bd80      	pop	{r7, pc}

0800e538 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b086      	sub	sp, #24
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	60f8      	str	r0, [r7, #12]
 800e540:	607a      	str	r2, [r7, #4]
 800e542:	461a      	mov	r2, r3
 800e544:	460b      	mov	r3, r1
 800e546:	72fb      	strb	r3, [r7, #11]
 800e548:	4613      	mov	r3, r2
 800e54a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e54c:	2300      	movs	r3, #0
 800e54e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e550:	2300      	movs	r3, #0
 800e552:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e55a:	893b      	ldrh	r3, [r7, #8]
 800e55c:	7af9      	ldrb	r1, [r7, #11]
 800e55e:	687a      	ldr	r2, [r7, #4]
 800e560:	f7f5 f91a 	bl	8003798 <HAL_PCD_EP_Receive>
 800e564:	4603      	mov	r3, r0
 800e566:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e568:	7dfb      	ldrb	r3, [r7, #23]
 800e56a:	4618      	mov	r0, r3
 800e56c:	f000 f86e 	bl	800e64c <USBD_Get_USB_Status>
 800e570:	4603      	mov	r3, r0
 800e572:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 800e574:	7dbb      	ldrb	r3, [r7, #22]
}
 800e576:	4618      	mov	r0, r3
 800e578:	3718      	adds	r7, #24
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bd80      	pop	{r7, pc}

0800e57e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e57e:	b580      	push	{r7, lr}
 800e580:	b082      	sub	sp, #8
 800e582:	af00      	add	r7, sp, #0
 800e584:	6078      	str	r0, [r7, #4]
 800e586:	460b      	mov	r3, r1
 800e588:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e590:	78fa      	ldrb	r2, [r7, #3]
 800e592:	4611      	mov	r1, r2
 800e594:	4618      	mov	r0, r3
 800e596:	f7f5 f939 	bl	800380c <HAL_PCD_EP_GetRxCount>
 800e59a:	4603      	mov	r3, r0
}
 800e59c:	4618      	mov	r0, r3
 800e59e:	3708      	adds	r7, #8
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}

0800e5a4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b082      	sub	sp, #8
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
 800e5ac:	460b      	mov	r3, r1
 800e5ae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800e5b0:	78fb      	ldrb	r3, [r7, #3]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d002      	beq.n	800e5bc <HAL_PCDEx_LPM_Callback+0x18>
 800e5b6:	2b01      	cmp	r3, #1
 800e5b8:	d013      	beq.n	800e5e2 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
  /* USER CODE END LPM_Callback */
}
 800e5ba:	e023      	b.n	800e604 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	699b      	ldr	r3, [r3, #24]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d007      	beq.n	800e5d4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e5c4:	f000 f83c 	bl	800e640 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e5c8:	4b10      	ldr	r3, [pc, #64]	; (800e60c <HAL_PCDEx_LPM_Callback+0x68>)
 800e5ca:	691b      	ldr	r3, [r3, #16]
 800e5cc:	4a0f      	ldr	r2, [pc, #60]	; (800e60c <HAL_PCDEx_LPM_Callback+0x68>)
 800e5ce:	f023 0306 	bic.w	r3, r3, #6
 800e5d2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f7fb fd23 	bl	800a026 <USBD_LL_Resume>
    break;
 800e5e0:	e010      	b.n	800e604 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f7fb fd07 	bl	8009ffc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	699b      	ldr	r3, [r3, #24]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d005      	beq.n	800e602 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e5f6:	4b05      	ldr	r3, [pc, #20]	; (800e60c <HAL_PCDEx_LPM_Callback+0x68>)
 800e5f8:	691b      	ldr	r3, [r3, #16]
 800e5fa:	4a04      	ldr	r2, [pc, #16]	; (800e60c <HAL_PCDEx_LPM_Callback+0x68>)
 800e5fc:	f043 0306 	orr.w	r3, r3, #6
 800e600:	6113      	str	r3, [r2, #16]
    break;   
 800e602:	bf00      	nop
}
 800e604:	bf00      	nop
 800e606:	3708      	adds	r7, #8
 800e608:	46bd      	mov	sp, r7
 800e60a:	bd80      	pop	{r7, pc}
 800e60c:	e000ed00 	.word	0xe000ed00

0800e610 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e610:	b480      	push	{r7}
 800e612:	b083      	sub	sp, #12
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e618:	4b03      	ldr	r3, [pc, #12]	; (800e628 <USBD_static_malloc+0x18>)
}
 800e61a:	4618      	mov	r0, r3
 800e61c:	370c      	adds	r7, #12
 800e61e:	46bd      	mov	sp, r7
 800e620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e624:	4770      	bx	lr
 800e626:	bf00      	nop
 800e628:	200004d4 	.word	0x200004d4

0800e62c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e62c:	b480      	push	{r7}
 800e62e:	b083      	sub	sp, #12
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]

}
 800e634:	bf00      	nop
 800e636:	370c      	adds	r7, #12
 800e638:	46bd      	mov	sp, r7
 800e63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63e:	4770      	bx	lr

0800e640 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e644:	f7f2 ffcc 	bl	80015e0 <SystemClock_Config>
}
 800e648:	bf00      	nop
 800e64a:	bd80      	pop	{r7, pc}

0800e64c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e64c:	b480      	push	{r7}
 800e64e:	b085      	sub	sp, #20
 800e650:	af00      	add	r7, sp, #0
 800e652:	4603      	mov	r3, r0
 800e654:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e656:	2300      	movs	r3, #0
 800e658:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e65a:	79fb      	ldrb	r3, [r7, #7]
 800e65c:	2b03      	cmp	r3, #3
 800e65e:	d817      	bhi.n	800e690 <USBD_Get_USB_Status+0x44>
 800e660:	a201      	add	r2, pc, #4	; (adr r2, 800e668 <USBD_Get_USB_Status+0x1c>)
 800e662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e666:	bf00      	nop
 800e668:	0800e679 	.word	0x0800e679
 800e66c:	0800e67f 	.word	0x0800e67f
 800e670:	0800e685 	.word	0x0800e685
 800e674:	0800e68b 	.word	0x0800e68b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e678:	2300      	movs	r3, #0
 800e67a:	73fb      	strb	r3, [r7, #15]
    break;
 800e67c:	e00b      	b.n	800e696 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e67e:	2302      	movs	r3, #2
 800e680:	73fb      	strb	r3, [r7, #15]
    break;
 800e682:	e008      	b.n	800e696 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e684:	2301      	movs	r3, #1
 800e686:	73fb      	strb	r3, [r7, #15]
    break;
 800e688:	e005      	b.n	800e696 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e68a:	2302      	movs	r3, #2
 800e68c:	73fb      	strb	r3, [r7, #15]
    break;
 800e68e:	e002      	b.n	800e696 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e690:	2302      	movs	r3, #2
 800e692:	73fb      	strb	r3, [r7, #15]
    break;
 800e694:	bf00      	nop
  }
  return usb_status;
 800e696:	7bfb      	ldrb	r3, [r7, #15]
}
 800e698:	4618      	mov	r0, r3
 800e69a:	3714      	adds	r7, #20
 800e69c:	46bd      	mov	sp, r7
 800e69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a2:	4770      	bx	lr

0800e6a4 <__errno>:
 800e6a4:	4b01      	ldr	r3, [pc, #4]	; (800e6ac <__errno+0x8>)
 800e6a6:	6818      	ldr	r0, [r3, #0]
 800e6a8:	4770      	bx	lr
 800e6aa:	bf00      	nop
 800e6ac:	2000018c 	.word	0x2000018c

0800e6b0 <__libc_init_array>:
 800e6b0:	b570      	push	{r4, r5, r6, lr}
 800e6b2:	4e0d      	ldr	r6, [pc, #52]	; (800e6e8 <__libc_init_array+0x38>)
 800e6b4:	4c0d      	ldr	r4, [pc, #52]	; (800e6ec <__libc_init_array+0x3c>)
 800e6b6:	1ba4      	subs	r4, r4, r6
 800e6b8:	10a4      	asrs	r4, r4, #2
 800e6ba:	2500      	movs	r5, #0
 800e6bc:	42a5      	cmp	r5, r4
 800e6be:	d109      	bne.n	800e6d4 <__libc_init_array+0x24>
 800e6c0:	4e0b      	ldr	r6, [pc, #44]	; (800e6f0 <__libc_init_array+0x40>)
 800e6c2:	4c0c      	ldr	r4, [pc, #48]	; (800e6f4 <__libc_init_array+0x44>)
 800e6c4:	f000 fc38 	bl	800ef38 <_init>
 800e6c8:	1ba4      	subs	r4, r4, r6
 800e6ca:	10a4      	asrs	r4, r4, #2
 800e6cc:	2500      	movs	r5, #0
 800e6ce:	42a5      	cmp	r5, r4
 800e6d0:	d105      	bne.n	800e6de <__libc_init_array+0x2e>
 800e6d2:	bd70      	pop	{r4, r5, r6, pc}
 800e6d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e6d8:	4798      	blx	r3
 800e6da:	3501      	adds	r5, #1
 800e6dc:	e7ee      	b.n	800e6bc <__libc_init_array+0xc>
 800e6de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e6e2:	4798      	blx	r3
 800e6e4:	3501      	adds	r5, #1
 800e6e6:	e7f2      	b.n	800e6ce <__libc_init_array+0x1e>
 800e6e8:	0800f380 	.word	0x0800f380
 800e6ec:	0800f380 	.word	0x0800f380
 800e6f0:	0800f380 	.word	0x0800f380
 800e6f4:	0800f384 	.word	0x0800f384

0800e6f8 <memcpy>:
 800e6f8:	b510      	push	{r4, lr}
 800e6fa:	1e43      	subs	r3, r0, #1
 800e6fc:	440a      	add	r2, r1
 800e6fe:	4291      	cmp	r1, r2
 800e700:	d100      	bne.n	800e704 <memcpy+0xc>
 800e702:	bd10      	pop	{r4, pc}
 800e704:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e708:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e70c:	e7f7      	b.n	800e6fe <memcpy+0x6>

0800e70e <memset>:
 800e70e:	4402      	add	r2, r0
 800e710:	4603      	mov	r3, r0
 800e712:	4293      	cmp	r3, r2
 800e714:	d100      	bne.n	800e718 <memset+0xa>
 800e716:	4770      	bx	lr
 800e718:	f803 1b01 	strb.w	r1, [r3], #1
 800e71c:	e7f9      	b.n	800e712 <memset+0x4>
	...

0800e720 <siprintf>:
 800e720:	b40e      	push	{r1, r2, r3}
 800e722:	b500      	push	{lr}
 800e724:	b09c      	sub	sp, #112	; 0x70
 800e726:	ab1d      	add	r3, sp, #116	; 0x74
 800e728:	9002      	str	r0, [sp, #8]
 800e72a:	9006      	str	r0, [sp, #24]
 800e72c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e730:	4809      	ldr	r0, [pc, #36]	; (800e758 <siprintf+0x38>)
 800e732:	9107      	str	r1, [sp, #28]
 800e734:	9104      	str	r1, [sp, #16]
 800e736:	4909      	ldr	r1, [pc, #36]	; (800e75c <siprintf+0x3c>)
 800e738:	f853 2b04 	ldr.w	r2, [r3], #4
 800e73c:	9105      	str	r1, [sp, #20]
 800e73e:	6800      	ldr	r0, [r0, #0]
 800e740:	9301      	str	r3, [sp, #4]
 800e742:	a902      	add	r1, sp, #8
 800e744:	f000 f8d0 	bl	800e8e8 <_svfiprintf_r>
 800e748:	9b02      	ldr	r3, [sp, #8]
 800e74a:	2200      	movs	r2, #0
 800e74c:	701a      	strb	r2, [r3, #0]
 800e74e:	b01c      	add	sp, #112	; 0x70
 800e750:	f85d eb04 	ldr.w	lr, [sp], #4
 800e754:	b003      	add	sp, #12
 800e756:	4770      	bx	lr
 800e758:	2000018c 	.word	0x2000018c
 800e75c:	ffff0208 	.word	0xffff0208

0800e760 <strcat>:
 800e760:	b510      	push	{r4, lr}
 800e762:	4603      	mov	r3, r0
 800e764:	781a      	ldrb	r2, [r3, #0]
 800e766:	1c5c      	adds	r4, r3, #1
 800e768:	b93a      	cbnz	r2, 800e77a <strcat+0x1a>
 800e76a:	3b01      	subs	r3, #1
 800e76c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e770:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e774:	2a00      	cmp	r2, #0
 800e776:	d1f9      	bne.n	800e76c <strcat+0xc>
 800e778:	bd10      	pop	{r4, pc}
 800e77a:	4623      	mov	r3, r4
 800e77c:	e7f2      	b.n	800e764 <strcat+0x4>
	...

0800e780 <_malloc_r>:
 800e780:	b570      	push	{r4, r5, r6, lr}
 800e782:	1ccd      	adds	r5, r1, #3
 800e784:	f025 0503 	bic.w	r5, r5, #3
 800e788:	3508      	adds	r5, #8
 800e78a:	2d0c      	cmp	r5, #12
 800e78c:	bf38      	it	cc
 800e78e:	250c      	movcc	r5, #12
 800e790:	2d00      	cmp	r5, #0
 800e792:	4606      	mov	r6, r0
 800e794:	db01      	blt.n	800e79a <_malloc_r+0x1a>
 800e796:	42a9      	cmp	r1, r5
 800e798:	d903      	bls.n	800e7a2 <_malloc_r+0x22>
 800e79a:	230c      	movs	r3, #12
 800e79c:	6033      	str	r3, [r6, #0]
 800e79e:	2000      	movs	r0, #0
 800e7a0:	bd70      	pop	{r4, r5, r6, pc}
 800e7a2:	f000 fb4a 	bl	800ee3a <__malloc_lock>
 800e7a6:	4a21      	ldr	r2, [pc, #132]	; (800e82c <_malloc_r+0xac>)
 800e7a8:	6814      	ldr	r4, [r2, #0]
 800e7aa:	4621      	mov	r1, r4
 800e7ac:	b991      	cbnz	r1, 800e7d4 <_malloc_r+0x54>
 800e7ae:	4c20      	ldr	r4, [pc, #128]	; (800e830 <_malloc_r+0xb0>)
 800e7b0:	6823      	ldr	r3, [r4, #0]
 800e7b2:	b91b      	cbnz	r3, 800e7bc <_malloc_r+0x3c>
 800e7b4:	4630      	mov	r0, r6
 800e7b6:	f000 fb17 	bl	800ede8 <_sbrk_r>
 800e7ba:	6020      	str	r0, [r4, #0]
 800e7bc:	4629      	mov	r1, r5
 800e7be:	4630      	mov	r0, r6
 800e7c0:	f000 fb12 	bl	800ede8 <_sbrk_r>
 800e7c4:	1c43      	adds	r3, r0, #1
 800e7c6:	d124      	bne.n	800e812 <_malloc_r+0x92>
 800e7c8:	230c      	movs	r3, #12
 800e7ca:	6033      	str	r3, [r6, #0]
 800e7cc:	4630      	mov	r0, r6
 800e7ce:	f000 fb35 	bl	800ee3c <__malloc_unlock>
 800e7d2:	e7e4      	b.n	800e79e <_malloc_r+0x1e>
 800e7d4:	680b      	ldr	r3, [r1, #0]
 800e7d6:	1b5b      	subs	r3, r3, r5
 800e7d8:	d418      	bmi.n	800e80c <_malloc_r+0x8c>
 800e7da:	2b0b      	cmp	r3, #11
 800e7dc:	d90f      	bls.n	800e7fe <_malloc_r+0x7e>
 800e7de:	600b      	str	r3, [r1, #0]
 800e7e0:	50cd      	str	r5, [r1, r3]
 800e7e2:	18cc      	adds	r4, r1, r3
 800e7e4:	4630      	mov	r0, r6
 800e7e6:	f000 fb29 	bl	800ee3c <__malloc_unlock>
 800e7ea:	f104 000b 	add.w	r0, r4, #11
 800e7ee:	1d23      	adds	r3, r4, #4
 800e7f0:	f020 0007 	bic.w	r0, r0, #7
 800e7f4:	1ac3      	subs	r3, r0, r3
 800e7f6:	d0d3      	beq.n	800e7a0 <_malloc_r+0x20>
 800e7f8:	425a      	negs	r2, r3
 800e7fa:	50e2      	str	r2, [r4, r3]
 800e7fc:	e7d0      	b.n	800e7a0 <_malloc_r+0x20>
 800e7fe:	428c      	cmp	r4, r1
 800e800:	684b      	ldr	r3, [r1, #4]
 800e802:	bf16      	itet	ne
 800e804:	6063      	strne	r3, [r4, #4]
 800e806:	6013      	streq	r3, [r2, #0]
 800e808:	460c      	movne	r4, r1
 800e80a:	e7eb      	b.n	800e7e4 <_malloc_r+0x64>
 800e80c:	460c      	mov	r4, r1
 800e80e:	6849      	ldr	r1, [r1, #4]
 800e810:	e7cc      	b.n	800e7ac <_malloc_r+0x2c>
 800e812:	1cc4      	adds	r4, r0, #3
 800e814:	f024 0403 	bic.w	r4, r4, #3
 800e818:	42a0      	cmp	r0, r4
 800e81a:	d005      	beq.n	800e828 <_malloc_r+0xa8>
 800e81c:	1a21      	subs	r1, r4, r0
 800e81e:	4630      	mov	r0, r6
 800e820:	f000 fae2 	bl	800ede8 <_sbrk_r>
 800e824:	3001      	adds	r0, #1
 800e826:	d0cf      	beq.n	800e7c8 <_malloc_r+0x48>
 800e828:	6025      	str	r5, [r4, #0]
 800e82a:	e7db      	b.n	800e7e4 <_malloc_r+0x64>
 800e82c:	200006f4 	.word	0x200006f4
 800e830:	200006f8 	.word	0x200006f8

0800e834 <__ssputs_r>:
 800e834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e838:	688e      	ldr	r6, [r1, #8]
 800e83a:	429e      	cmp	r6, r3
 800e83c:	4682      	mov	sl, r0
 800e83e:	460c      	mov	r4, r1
 800e840:	4690      	mov	r8, r2
 800e842:	4699      	mov	r9, r3
 800e844:	d837      	bhi.n	800e8b6 <__ssputs_r+0x82>
 800e846:	898a      	ldrh	r2, [r1, #12]
 800e848:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e84c:	d031      	beq.n	800e8b2 <__ssputs_r+0x7e>
 800e84e:	6825      	ldr	r5, [r4, #0]
 800e850:	6909      	ldr	r1, [r1, #16]
 800e852:	1a6f      	subs	r7, r5, r1
 800e854:	6965      	ldr	r5, [r4, #20]
 800e856:	2302      	movs	r3, #2
 800e858:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e85c:	fb95 f5f3 	sdiv	r5, r5, r3
 800e860:	f109 0301 	add.w	r3, r9, #1
 800e864:	443b      	add	r3, r7
 800e866:	429d      	cmp	r5, r3
 800e868:	bf38      	it	cc
 800e86a:	461d      	movcc	r5, r3
 800e86c:	0553      	lsls	r3, r2, #21
 800e86e:	d530      	bpl.n	800e8d2 <__ssputs_r+0x9e>
 800e870:	4629      	mov	r1, r5
 800e872:	f7ff ff85 	bl	800e780 <_malloc_r>
 800e876:	4606      	mov	r6, r0
 800e878:	b950      	cbnz	r0, 800e890 <__ssputs_r+0x5c>
 800e87a:	230c      	movs	r3, #12
 800e87c:	f8ca 3000 	str.w	r3, [sl]
 800e880:	89a3      	ldrh	r3, [r4, #12]
 800e882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e886:	81a3      	strh	r3, [r4, #12]
 800e888:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e88c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e890:	463a      	mov	r2, r7
 800e892:	6921      	ldr	r1, [r4, #16]
 800e894:	f7ff ff30 	bl	800e6f8 <memcpy>
 800e898:	89a3      	ldrh	r3, [r4, #12]
 800e89a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e89e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8a2:	81a3      	strh	r3, [r4, #12]
 800e8a4:	6126      	str	r6, [r4, #16]
 800e8a6:	6165      	str	r5, [r4, #20]
 800e8a8:	443e      	add	r6, r7
 800e8aa:	1bed      	subs	r5, r5, r7
 800e8ac:	6026      	str	r6, [r4, #0]
 800e8ae:	60a5      	str	r5, [r4, #8]
 800e8b0:	464e      	mov	r6, r9
 800e8b2:	454e      	cmp	r6, r9
 800e8b4:	d900      	bls.n	800e8b8 <__ssputs_r+0x84>
 800e8b6:	464e      	mov	r6, r9
 800e8b8:	4632      	mov	r2, r6
 800e8ba:	4641      	mov	r1, r8
 800e8bc:	6820      	ldr	r0, [r4, #0]
 800e8be:	f000 faa3 	bl	800ee08 <memmove>
 800e8c2:	68a3      	ldr	r3, [r4, #8]
 800e8c4:	1b9b      	subs	r3, r3, r6
 800e8c6:	60a3      	str	r3, [r4, #8]
 800e8c8:	6823      	ldr	r3, [r4, #0]
 800e8ca:	441e      	add	r6, r3
 800e8cc:	6026      	str	r6, [r4, #0]
 800e8ce:	2000      	movs	r0, #0
 800e8d0:	e7dc      	b.n	800e88c <__ssputs_r+0x58>
 800e8d2:	462a      	mov	r2, r5
 800e8d4:	f000 fb02 	bl	800eedc <_realloc_r>
 800e8d8:	4606      	mov	r6, r0
 800e8da:	2800      	cmp	r0, #0
 800e8dc:	d1e2      	bne.n	800e8a4 <__ssputs_r+0x70>
 800e8de:	6921      	ldr	r1, [r4, #16]
 800e8e0:	4650      	mov	r0, sl
 800e8e2:	f000 faad 	bl	800ee40 <_free_r>
 800e8e6:	e7c8      	b.n	800e87a <__ssputs_r+0x46>

0800e8e8 <_svfiprintf_r>:
 800e8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8ec:	461d      	mov	r5, r3
 800e8ee:	898b      	ldrh	r3, [r1, #12]
 800e8f0:	061f      	lsls	r7, r3, #24
 800e8f2:	b09d      	sub	sp, #116	; 0x74
 800e8f4:	4680      	mov	r8, r0
 800e8f6:	460c      	mov	r4, r1
 800e8f8:	4616      	mov	r6, r2
 800e8fa:	d50f      	bpl.n	800e91c <_svfiprintf_r+0x34>
 800e8fc:	690b      	ldr	r3, [r1, #16]
 800e8fe:	b96b      	cbnz	r3, 800e91c <_svfiprintf_r+0x34>
 800e900:	2140      	movs	r1, #64	; 0x40
 800e902:	f7ff ff3d 	bl	800e780 <_malloc_r>
 800e906:	6020      	str	r0, [r4, #0]
 800e908:	6120      	str	r0, [r4, #16]
 800e90a:	b928      	cbnz	r0, 800e918 <_svfiprintf_r+0x30>
 800e90c:	230c      	movs	r3, #12
 800e90e:	f8c8 3000 	str.w	r3, [r8]
 800e912:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e916:	e0c8      	b.n	800eaaa <_svfiprintf_r+0x1c2>
 800e918:	2340      	movs	r3, #64	; 0x40
 800e91a:	6163      	str	r3, [r4, #20]
 800e91c:	2300      	movs	r3, #0
 800e91e:	9309      	str	r3, [sp, #36]	; 0x24
 800e920:	2320      	movs	r3, #32
 800e922:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e926:	2330      	movs	r3, #48	; 0x30
 800e928:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e92c:	9503      	str	r5, [sp, #12]
 800e92e:	f04f 0b01 	mov.w	fp, #1
 800e932:	4637      	mov	r7, r6
 800e934:	463d      	mov	r5, r7
 800e936:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e93a:	b10b      	cbz	r3, 800e940 <_svfiprintf_r+0x58>
 800e93c:	2b25      	cmp	r3, #37	; 0x25
 800e93e:	d13e      	bne.n	800e9be <_svfiprintf_r+0xd6>
 800e940:	ebb7 0a06 	subs.w	sl, r7, r6
 800e944:	d00b      	beq.n	800e95e <_svfiprintf_r+0x76>
 800e946:	4653      	mov	r3, sl
 800e948:	4632      	mov	r2, r6
 800e94a:	4621      	mov	r1, r4
 800e94c:	4640      	mov	r0, r8
 800e94e:	f7ff ff71 	bl	800e834 <__ssputs_r>
 800e952:	3001      	adds	r0, #1
 800e954:	f000 80a4 	beq.w	800eaa0 <_svfiprintf_r+0x1b8>
 800e958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e95a:	4453      	add	r3, sl
 800e95c:	9309      	str	r3, [sp, #36]	; 0x24
 800e95e:	783b      	ldrb	r3, [r7, #0]
 800e960:	2b00      	cmp	r3, #0
 800e962:	f000 809d 	beq.w	800eaa0 <_svfiprintf_r+0x1b8>
 800e966:	2300      	movs	r3, #0
 800e968:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e96c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e970:	9304      	str	r3, [sp, #16]
 800e972:	9307      	str	r3, [sp, #28]
 800e974:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e978:	931a      	str	r3, [sp, #104]	; 0x68
 800e97a:	462f      	mov	r7, r5
 800e97c:	2205      	movs	r2, #5
 800e97e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e982:	4850      	ldr	r0, [pc, #320]	; (800eac4 <_svfiprintf_r+0x1dc>)
 800e984:	f7f1 fc04 	bl	8000190 <memchr>
 800e988:	9b04      	ldr	r3, [sp, #16]
 800e98a:	b9d0      	cbnz	r0, 800e9c2 <_svfiprintf_r+0xda>
 800e98c:	06d9      	lsls	r1, r3, #27
 800e98e:	bf44      	itt	mi
 800e990:	2220      	movmi	r2, #32
 800e992:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e996:	071a      	lsls	r2, r3, #28
 800e998:	bf44      	itt	mi
 800e99a:	222b      	movmi	r2, #43	; 0x2b
 800e99c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e9a0:	782a      	ldrb	r2, [r5, #0]
 800e9a2:	2a2a      	cmp	r2, #42	; 0x2a
 800e9a4:	d015      	beq.n	800e9d2 <_svfiprintf_r+0xea>
 800e9a6:	9a07      	ldr	r2, [sp, #28]
 800e9a8:	462f      	mov	r7, r5
 800e9aa:	2000      	movs	r0, #0
 800e9ac:	250a      	movs	r5, #10
 800e9ae:	4639      	mov	r1, r7
 800e9b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9b4:	3b30      	subs	r3, #48	; 0x30
 800e9b6:	2b09      	cmp	r3, #9
 800e9b8:	d94d      	bls.n	800ea56 <_svfiprintf_r+0x16e>
 800e9ba:	b1b8      	cbz	r0, 800e9ec <_svfiprintf_r+0x104>
 800e9bc:	e00f      	b.n	800e9de <_svfiprintf_r+0xf6>
 800e9be:	462f      	mov	r7, r5
 800e9c0:	e7b8      	b.n	800e934 <_svfiprintf_r+0x4c>
 800e9c2:	4a40      	ldr	r2, [pc, #256]	; (800eac4 <_svfiprintf_r+0x1dc>)
 800e9c4:	1a80      	subs	r0, r0, r2
 800e9c6:	fa0b f000 	lsl.w	r0, fp, r0
 800e9ca:	4318      	orrs	r0, r3
 800e9cc:	9004      	str	r0, [sp, #16]
 800e9ce:	463d      	mov	r5, r7
 800e9d0:	e7d3      	b.n	800e97a <_svfiprintf_r+0x92>
 800e9d2:	9a03      	ldr	r2, [sp, #12]
 800e9d4:	1d11      	adds	r1, r2, #4
 800e9d6:	6812      	ldr	r2, [r2, #0]
 800e9d8:	9103      	str	r1, [sp, #12]
 800e9da:	2a00      	cmp	r2, #0
 800e9dc:	db01      	blt.n	800e9e2 <_svfiprintf_r+0xfa>
 800e9de:	9207      	str	r2, [sp, #28]
 800e9e0:	e004      	b.n	800e9ec <_svfiprintf_r+0x104>
 800e9e2:	4252      	negs	r2, r2
 800e9e4:	f043 0302 	orr.w	r3, r3, #2
 800e9e8:	9207      	str	r2, [sp, #28]
 800e9ea:	9304      	str	r3, [sp, #16]
 800e9ec:	783b      	ldrb	r3, [r7, #0]
 800e9ee:	2b2e      	cmp	r3, #46	; 0x2e
 800e9f0:	d10c      	bne.n	800ea0c <_svfiprintf_r+0x124>
 800e9f2:	787b      	ldrb	r3, [r7, #1]
 800e9f4:	2b2a      	cmp	r3, #42	; 0x2a
 800e9f6:	d133      	bne.n	800ea60 <_svfiprintf_r+0x178>
 800e9f8:	9b03      	ldr	r3, [sp, #12]
 800e9fa:	1d1a      	adds	r2, r3, #4
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	9203      	str	r2, [sp, #12]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	bfb8      	it	lt
 800ea04:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ea08:	3702      	adds	r7, #2
 800ea0a:	9305      	str	r3, [sp, #20]
 800ea0c:	4d2e      	ldr	r5, [pc, #184]	; (800eac8 <_svfiprintf_r+0x1e0>)
 800ea0e:	7839      	ldrb	r1, [r7, #0]
 800ea10:	2203      	movs	r2, #3
 800ea12:	4628      	mov	r0, r5
 800ea14:	f7f1 fbbc 	bl	8000190 <memchr>
 800ea18:	b138      	cbz	r0, 800ea2a <_svfiprintf_r+0x142>
 800ea1a:	2340      	movs	r3, #64	; 0x40
 800ea1c:	1b40      	subs	r0, r0, r5
 800ea1e:	fa03 f000 	lsl.w	r0, r3, r0
 800ea22:	9b04      	ldr	r3, [sp, #16]
 800ea24:	4303      	orrs	r3, r0
 800ea26:	3701      	adds	r7, #1
 800ea28:	9304      	str	r3, [sp, #16]
 800ea2a:	7839      	ldrb	r1, [r7, #0]
 800ea2c:	4827      	ldr	r0, [pc, #156]	; (800eacc <_svfiprintf_r+0x1e4>)
 800ea2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ea32:	2206      	movs	r2, #6
 800ea34:	1c7e      	adds	r6, r7, #1
 800ea36:	f7f1 fbab 	bl	8000190 <memchr>
 800ea3a:	2800      	cmp	r0, #0
 800ea3c:	d038      	beq.n	800eab0 <_svfiprintf_r+0x1c8>
 800ea3e:	4b24      	ldr	r3, [pc, #144]	; (800ead0 <_svfiprintf_r+0x1e8>)
 800ea40:	bb13      	cbnz	r3, 800ea88 <_svfiprintf_r+0x1a0>
 800ea42:	9b03      	ldr	r3, [sp, #12]
 800ea44:	3307      	adds	r3, #7
 800ea46:	f023 0307 	bic.w	r3, r3, #7
 800ea4a:	3308      	adds	r3, #8
 800ea4c:	9303      	str	r3, [sp, #12]
 800ea4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea50:	444b      	add	r3, r9
 800ea52:	9309      	str	r3, [sp, #36]	; 0x24
 800ea54:	e76d      	b.n	800e932 <_svfiprintf_r+0x4a>
 800ea56:	fb05 3202 	mla	r2, r5, r2, r3
 800ea5a:	2001      	movs	r0, #1
 800ea5c:	460f      	mov	r7, r1
 800ea5e:	e7a6      	b.n	800e9ae <_svfiprintf_r+0xc6>
 800ea60:	2300      	movs	r3, #0
 800ea62:	3701      	adds	r7, #1
 800ea64:	9305      	str	r3, [sp, #20]
 800ea66:	4619      	mov	r1, r3
 800ea68:	250a      	movs	r5, #10
 800ea6a:	4638      	mov	r0, r7
 800ea6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea70:	3a30      	subs	r2, #48	; 0x30
 800ea72:	2a09      	cmp	r2, #9
 800ea74:	d903      	bls.n	800ea7e <_svfiprintf_r+0x196>
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d0c8      	beq.n	800ea0c <_svfiprintf_r+0x124>
 800ea7a:	9105      	str	r1, [sp, #20]
 800ea7c:	e7c6      	b.n	800ea0c <_svfiprintf_r+0x124>
 800ea7e:	fb05 2101 	mla	r1, r5, r1, r2
 800ea82:	2301      	movs	r3, #1
 800ea84:	4607      	mov	r7, r0
 800ea86:	e7f0      	b.n	800ea6a <_svfiprintf_r+0x182>
 800ea88:	ab03      	add	r3, sp, #12
 800ea8a:	9300      	str	r3, [sp, #0]
 800ea8c:	4622      	mov	r2, r4
 800ea8e:	4b11      	ldr	r3, [pc, #68]	; (800ead4 <_svfiprintf_r+0x1ec>)
 800ea90:	a904      	add	r1, sp, #16
 800ea92:	4640      	mov	r0, r8
 800ea94:	f3af 8000 	nop.w
 800ea98:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800ea9c:	4681      	mov	r9, r0
 800ea9e:	d1d6      	bne.n	800ea4e <_svfiprintf_r+0x166>
 800eaa0:	89a3      	ldrh	r3, [r4, #12]
 800eaa2:	065b      	lsls	r3, r3, #25
 800eaa4:	f53f af35 	bmi.w	800e912 <_svfiprintf_r+0x2a>
 800eaa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eaaa:	b01d      	add	sp, #116	; 0x74
 800eaac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eab0:	ab03      	add	r3, sp, #12
 800eab2:	9300      	str	r3, [sp, #0]
 800eab4:	4622      	mov	r2, r4
 800eab6:	4b07      	ldr	r3, [pc, #28]	; (800ead4 <_svfiprintf_r+0x1ec>)
 800eab8:	a904      	add	r1, sp, #16
 800eaba:	4640      	mov	r0, r8
 800eabc:	f000 f882 	bl	800ebc4 <_printf_i>
 800eac0:	e7ea      	b.n	800ea98 <_svfiprintf_r+0x1b0>
 800eac2:	bf00      	nop
 800eac4:	0800f344 	.word	0x0800f344
 800eac8:	0800f34a 	.word	0x0800f34a
 800eacc:	0800f34e 	.word	0x0800f34e
 800ead0:	00000000 	.word	0x00000000
 800ead4:	0800e835 	.word	0x0800e835

0800ead8 <_printf_common>:
 800ead8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eadc:	4691      	mov	r9, r2
 800eade:	461f      	mov	r7, r3
 800eae0:	688a      	ldr	r2, [r1, #8]
 800eae2:	690b      	ldr	r3, [r1, #16]
 800eae4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eae8:	4293      	cmp	r3, r2
 800eaea:	bfb8      	it	lt
 800eaec:	4613      	movlt	r3, r2
 800eaee:	f8c9 3000 	str.w	r3, [r9]
 800eaf2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eaf6:	4606      	mov	r6, r0
 800eaf8:	460c      	mov	r4, r1
 800eafa:	b112      	cbz	r2, 800eb02 <_printf_common+0x2a>
 800eafc:	3301      	adds	r3, #1
 800eafe:	f8c9 3000 	str.w	r3, [r9]
 800eb02:	6823      	ldr	r3, [r4, #0]
 800eb04:	0699      	lsls	r1, r3, #26
 800eb06:	bf42      	ittt	mi
 800eb08:	f8d9 3000 	ldrmi.w	r3, [r9]
 800eb0c:	3302      	addmi	r3, #2
 800eb0e:	f8c9 3000 	strmi.w	r3, [r9]
 800eb12:	6825      	ldr	r5, [r4, #0]
 800eb14:	f015 0506 	ands.w	r5, r5, #6
 800eb18:	d107      	bne.n	800eb2a <_printf_common+0x52>
 800eb1a:	f104 0a19 	add.w	sl, r4, #25
 800eb1e:	68e3      	ldr	r3, [r4, #12]
 800eb20:	f8d9 2000 	ldr.w	r2, [r9]
 800eb24:	1a9b      	subs	r3, r3, r2
 800eb26:	42ab      	cmp	r3, r5
 800eb28:	dc28      	bgt.n	800eb7c <_printf_common+0xa4>
 800eb2a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800eb2e:	6822      	ldr	r2, [r4, #0]
 800eb30:	3300      	adds	r3, #0
 800eb32:	bf18      	it	ne
 800eb34:	2301      	movne	r3, #1
 800eb36:	0692      	lsls	r2, r2, #26
 800eb38:	d42d      	bmi.n	800eb96 <_printf_common+0xbe>
 800eb3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eb3e:	4639      	mov	r1, r7
 800eb40:	4630      	mov	r0, r6
 800eb42:	47c0      	blx	r8
 800eb44:	3001      	adds	r0, #1
 800eb46:	d020      	beq.n	800eb8a <_printf_common+0xb2>
 800eb48:	6823      	ldr	r3, [r4, #0]
 800eb4a:	68e5      	ldr	r5, [r4, #12]
 800eb4c:	f8d9 2000 	ldr.w	r2, [r9]
 800eb50:	f003 0306 	and.w	r3, r3, #6
 800eb54:	2b04      	cmp	r3, #4
 800eb56:	bf08      	it	eq
 800eb58:	1aad      	subeq	r5, r5, r2
 800eb5a:	68a3      	ldr	r3, [r4, #8]
 800eb5c:	6922      	ldr	r2, [r4, #16]
 800eb5e:	bf0c      	ite	eq
 800eb60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eb64:	2500      	movne	r5, #0
 800eb66:	4293      	cmp	r3, r2
 800eb68:	bfc4      	itt	gt
 800eb6a:	1a9b      	subgt	r3, r3, r2
 800eb6c:	18ed      	addgt	r5, r5, r3
 800eb6e:	f04f 0900 	mov.w	r9, #0
 800eb72:	341a      	adds	r4, #26
 800eb74:	454d      	cmp	r5, r9
 800eb76:	d11a      	bne.n	800ebae <_printf_common+0xd6>
 800eb78:	2000      	movs	r0, #0
 800eb7a:	e008      	b.n	800eb8e <_printf_common+0xb6>
 800eb7c:	2301      	movs	r3, #1
 800eb7e:	4652      	mov	r2, sl
 800eb80:	4639      	mov	r1, r7
 800eb82:	4630      	mov	r0, r6
 800eb84:	47c0      	blx	r8
 800eb86:	3001      	adds	r0, #1
 800eb88:	d103      	bne.n	800eb92 <_printf_common+0xba>
 800eb8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eb8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb92:	3501      	adds	r5, #1
 800eb94:	e7c3      	b.n	800eb1e <_printf_common+0x46>
 800eb96:	18e1      	adds	r1, r4, r3
 800eb98:	1c5a      	adds	r2, r3, #1
 800eb9a:	2030      	movs	r0, #48	; 0x30
 800eb9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eba0:	4422      	add	r2, r4
 800eba2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eba6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ebaa:	3302      	adds	r3, #2
 800ebac:	e7c5      	b.n	800eb3a <_printf_common+0x62>
 800ebae:	2301      	movs	r3, #1
 800ebb0:	4622      	mov	r2, r4
 800ebb2:	4639      	mov	r1, r7
 800ebb4:	4630      	mov	r0, r6
 800ebb6:	47c0      	blx	r8
 800ebb8:	3001      	adds	r0, #1
 800ebba:	d0e6      	beq.n	800eb8a <_printf_common+0xb2>
 800ebbc:	f109 0901 	add.w	r9, r9, #1
 800ebc0:	e7d8      	b.n	800eb74 <_printf_common+0x9c>
	...

0800ebc4 <_printf_i>:
 800ebc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ebc8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ebcc:	460c      	mov	r4, r1
 800ebce:	7e09      	ldrb	r1, [r1, #24]
 800ebd0:	b085      	sub	sp, #20
 800ebd2:	296e      	cmp	r1, #110	; 0x6e
 800ebd4:	4617      	mov	r7, r2
 800ebd6:	4606      	mov	r6, r0
 800ebd8:	4698      	mov	r8, r3
 800ebda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ebdc:	f000 80b3 	beq.w	800ed46 <_printf_i+0x182>
 800ebe0:	d822      	bhi.n	800ec28 <_printf_i+0x64>
 800ebe2:	2963      	cmp	r1, #99	; 0x63
 800ebe4:	d036      	beq.n	800ec54 <_printf_i+0x90>
 800ebe6:	d80a      	bhi.n	800ebfe <_printf_i+0x3a>
 800ebe8:	2900      	cmp	r1, #0
 800ebea:	f000 80b9 	beq.w	800ed60 <_printf_i+0x19c>
 800ebee:	2958      	cmp	r1, #88	; 0x58
 800ebf0:	f000 8083 	beq.w	800ecfa <_printf_i+0x136>
 800ebf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ebf8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ebfc:	e032      	b.n	800ec64 <_printf_i+0xa0>
 800ebfe:	2964      	cmp	r1, #100	; 0x64
 800ec00:	d001      	beq.n	800ec06 <_printf_i+0x42>
 800ec02:	2969      	cmp	r1, #105	; 0x69
 800ec04:	d1f6      	bne.n	800ebf4 <_printf_i+0x30>
 800ec06:	6820      	ldr	r0, [r4, #0]
 800ec08:	6813      	ldr	r3, [r2, #0]
 800ec0a:	0605      	lsls	r5, r0, #24
 800ec0c:	f103 0104 	add.w	r1, r3, #4
 800ec10:	d52a      	bpl.n	800ec68 <_printf_i+0xa4>
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	6011      	str	r1, [r2, #0]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	da03      	bge.n	800ec22 <_printf_i+0x5e>
 800ec1a:	222d      	movs	r2, #45	; 0x2d
 800ec1c:	425b      	negs	r3, r3
 800ec1e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ec22:	486f      	ldr	r0, [pc, #444]	; (800ede0 <_printf_i+0x21c>)
 800ec24:	220a      	movs	r2, #10
 800ec26:	e039      	b.n	800ec9c <_printf_i+0xd8>
 800ec28:	2973      	cmp	r1, #115	; 0x73
 800ec2a:	f000 809d 	beq.w	800ed68 <_printf_i+0x1a4>
 800ec2e:	d808      	bhi.n	800ec42 <_printf_i+0x7e>
 800ec30:	296f      	cmp	r1, #111	; 0x6f
 800ec32:	d020      	beq.n	800ec76 <_printf_i+0xb2>
 800ec34:	2970      	cmp	r1, #112	; 0x70
 800ec36:	d1dd      	bne.n	800ebf4 <_printf_i+0x30>
 800ec38:	6823      	ldr	r3, [r4, #0]
 800ec3a:	f043 0320 	orr.w	r3, r3, #32
 800ec3e:	6023      	str	r3, [r4, #0]
 800ec40:	e003      	b.n	800ec4a <_printf_i+0x86>
 800ec42:	2975      	cmp	r1, #117	; 0x75
 800ec44:	d017      	beq.n	800ec76 <_printf_i+0xb2>
 800ec46:	2978      	cmp	r1, #120	; 0x78
 800ec48:	d1d4      	bne.n	800ebf4 <_printf_i+0x30>
 800ec4a:	2378      	movs	r3, #120	; 0x78
 800ec4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ec50:	4864      	ldr	r0, [pc, #400]	; (800ede4 <_printf_i+0x220>)
 800ec52:	e055      	b.n	800ed00 <_printf_i+0x13c>
 800ec54:	6813      	ldr	r3, [r2, #0]
 800ec56:	1d19      	adds	r1, r3, #4
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	6011      	str	r1, [r2, #0]
 800ec5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ec60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ec64:	2301      	movs	r3, #1
 800ec66:	e08c      	b.n	800ed82 <_printf_i+0x1be>
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	6011      	str	r1, [r2, #0]
 800ec6c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ec70:	bf18      	it	ne
 800ec72:	b21b      	sxthne	r3, r3
 800ec74:	e7cf      	b.n	800ec16 <_printf_i+0x52>
 800ec76:	6813      	ldr	r3, [r2, #0]
 800ec78:	6825      	ldr	r5, [r4, #0]
 800ec7a:	1d18      	adds	r0, r3, #4
 800ec7c:	6010      	str	r0, [r2, #0]
 800ec7e:	0628      	lsls	r0, r5, #24
 800ec80:	d501      	bpl.n	800ec86 <_printf_i+0xc2>
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	e002      	b.n	800ec8c <_printf_i+0xc8>
 800ec86:	0668      	lsls	r0, r5, #25
 800ec88:	d5fb      	bpl.n	800ec82 <_printf_i+0xbe>
 800ec8a:	881b      	ldrh	r3, [r3, #0]
 800ec8c:	4854      	ldr	r0, [pc, #336]	; (800ede0 <_printf_i+0x21c>)
 800ec8e:	296f      	cmp	r1, #111	; 0x6f
 800ec90:	bf14      	ite	ne
 800ec92:	220a      	movne	r2, #10
 800ec94:	2208      	moveq	r2, #8
 800ec96:	2100      	movs	r1, #0
 800ec98:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ec9c:	6865      	ldr	r5, [r4, #4]
 800ec9e:	60a5      	str	r5, [r4, #8]
 800eca0:	2d00      	cmp	r5, #0
 800eca2:	f2c0 8095 	blt.w	800edd0 <_printf_i+0x20c>
 800eca6:	6821      	ldr	r1, [r4, #0]
 800eca8:	f021 0104 	bic.w	r1, r1, #4
 800ecac:	6021      	str	r1, [r4, #0]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d13d      	bne.n	800ed2e <_printf_i+0x16a>
 800ecb2:	2d00      	cmp	r5, #0
 800ecb4:	f040 808e 	bne.w	800edd4 <_printf_i+0x210>
 800ecb8:	4665      	mov	r5, ip
 800ecba:	2a08      	cmp	r2, #8
 800ecbc:	d10b      	bne.n	800ecd6 <_printf_i+0x112>
 800ecbe:	6823      	ldr	r3, [r4, #0]
 800ecc0:	07db      	lsls	r3, r3, #31
 800ecc2:	d508      	bpl.n	800ecd6 <_printf_i+0x112>
 800ecc4:	6923      	ldr	r3, [r4, #16]
 800ecc6:	6862      	ldr	r2, [r4, #4]
 800ecc8:	429a      	cmp	r2, r3
 800ecca:	bfde      	ittt	le
 800eccc:	2330      	movle	r3, #48	; 0x30
 800ecce:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ecd2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ecd6:	ebac 0305 	sub.w	r3, ip, r5
 800ecda:	6123      	str	r3, [r4, #16]
 800ecdc:	f8cd 8000 	str.w	r8, [sp]
 800ece0:	463b      	mov	r3, r7
 800ece2:	aa03      	add	r2, sp, #12
 800ece4:	4621      	mov	r1, r4
 800ece6:	4630      	mov	r0, r6
 800ece8:	f7ff fef6 	bl	800ead8 <_printf_common>
 800ecec:	3001      	adds	r0, #1
 800ecee:	d14d      	bne.n	800ed8c <_printf_i+0x1c8>
 800ecf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ecf4:	b005      	add	sp, #20
 800ecf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ecfa:	4839      	ldr	r0, [pc, #228]	; (800ede0 <_printf_i+0x21c>)
 800ecfc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ed00:	6813      	ldr	r3, [r2, #0]
 800ed02:	6821      	ldr	r1, [r4, #0]
 800ed04:	1d1d      	adds	r5, r3, #4
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	6015      	str	r5, [r2, #0]
 800ed0a:	060a      	lsls	r2, r1, #24
 800ed0c:	d50b      	bpl.n	800ed26 <_printf_i+0x162>
 800ed0e:	07ca      	lsls	r2, r1, #31
 800ed10:	bf44      	itt	mi
 800ed12:	f041 0120 	orrmi.w	r1, r1, #32
 800ed16:	6021      	strmi	r1, [r4, #0]
 800ed18:	b91b      	cbnz	r3, 800ed22 <_printf_i+0x15e>
 800ed1a:	6822      	ldr	r2, [r4, #0]
 800ed1c:	f022 0220 	bic.w	r2, r2, #32
 800ed20:	6022      	str	r2, [r4, #0]
 800ed22:	2210      	movs	r2, #16
 800ed24:	e7b7      	b.n	800ec96 <_printf_i+0xd2>
 800ed26:	064d      	lsls	r5, r1, #25
 800ed28:	bf48      	it	mi
 800ed2a:	b29b      	uxthmi	r3, r3
 800ed2c:	e7ef      	b.n	800ed0e <_printf_i+0x14a>
 800ed2e:	4665      	mov	r5, ip
 800ed30:	fbb3 f1f2 	udiv	r1, r3, r2
 800ed34:	fb02 3311 	mls	r3, r2, r1, r3
 800ed38:	5cc3      	ldrb	r3, [r0, r3]
 800ed3a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ed3e:	460b      	mov	r3, r1
 800ed40:	2900      	cmp	r1, #0
 800ed42:	d1f5      	bne.n	800ed30 <_printf_i+0x16c>
 800ed44:	e7b9      	b.n	800ecba <_printf_i+0xf6>
 800ed46:	6813      	ldr	r3, [r2, #0]
 800ed48:	6825      	ldr	r5, [r4, #0]
 800ed4a:	6961      	ldr	r1, [r4, #20]
 800ed4c:	1d18      	adds	r0, r3, #4
 800ed4e:	6010      	str	r0, [r2, #0]
 800ed50:	0628      	lsls	r0, r5, #24
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	d501      	bpl.n	800ed5a <_printf_i+0x196>
 800ed56:	6019      	str	r1, [r3, #0]
 800ed58:	e002      	b.n	800ed60 <_printf_i+0x19c>
 800ed5a:	066a      	lsls	r2, r5, #25
 800ed5c:	d5fb      	bpl.n	800ed56 <_printf_i+0x192>
 800ed5e:	8019      	strh	r1, [r3, #0]
 800ed60:	2300      	movs	r3, #0
 800ed62:	6123      	str	r3, [r4, #16]
 800ed64:	4665      	mov	r5, ip
 800ed66:	e7b9      	b.n	800ecdc <_printf_i+0x118>
 800ed68:	6813      	ldr	r3, [r2, #0]
 800ed6a:	1d19      	adds	r1, r3, #4
 800ed6c:	6011      	str	r1, [r2, #0]
 800ed6e:	681d      	ldr	r5, [r3, #0]
 800ed70:	6862      	ldr	r2, [r4, #4]
 800ed72:	2100      	movs	r1, #0
 800ed74:	4628      	mov	r0, r5
 800ed76:	f7f1 fa0b 	bl	8000190 <memchr>
 800ed7a:	b108      	cbz	r0, 800ed80 <_printf_i+0x1bc>
 800ed7c:	1b40      	subs	r0, r0, r5
 800ed7e:	6060      	str	r0, [r4, #4]
 800ed80:	6863      	ldr	r3, [r4, #4]
 800ed82:	6123      	str	r3, [r4, #16]
 800ed84:	2300      	movs	r3, #0
 800ed86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed8a:	e7a7      	b.n	800ecdc <_printf_i+0x118>
 800ed8c:	6923      	ldr	r3, [r4, #16]
 800ed8e:	462a      	mov	r2, r5
 800ed90:	4639      	mov	r1, r7
 800ed92:	4630      	mov	r0, r6
 800ed94:	47c0      	blx	r8
 800ed96:	3001      	adds	r0, #1
 800ed98:	d0aa      	beq.n	800ecf0 <_printf_i+0x12c>
 800ed9a:	6823      	ldr	r3, [r4, #0]
 800ed9c:	079b      	lsls	r3, r3, #30
 800ed9e:	d413      	bmi.n	800edc8 <_printf_i+0x204>
 800eda0:	68e0      	ldr	r0, [r4, #12]
 800eda2:	9b03      	ldr	r3, [sp, #12]
 800eda4:	4298      	cmp	r0, r3
 800eda6:	bfb8      	it	lt
 800eda8:	4618      	movlt	r0, r3
 800edaa:	e7a3      	b.n	800ecf4 <_printf_i+0x130>
 800edac:	2301      	movs	r3, #1
 800edae:	464a      	mov	r2, r9
 800edb0:	4639      	mov	r1, r7
 800edb2:	4630      	mov	r0, r6
 800edb4:	47c0      	blx	r8
 800edb6:	3001      	adds	r0, #1
 800edb8:	d09a      	beq.n	800ecf0 <_printf_i+0x12c>
 800edba:	3501      	adds	r5, #1
 800edbc:	68e3      	ldr	r3, [r4, #12]
 800edbe:	9a03      	ldr	r2, [sp, #12]
 800edc0:	1a9b      	subs	r3, r3, r2
 800edc2:	42ab      	cmp	r3, r5
 800edc4:	dcf2      	bgt.n	800edac <_printf_i+0x1e8>
 800edc6:	e7eb      	b.n	800eda0 <_printf_i+0x1dc>
 800edc8:	2500      	movs	r5, #0
 800edca:	f104 0919 	add.w	r9, r4, #25
 800edce:	e7f5      	b.n	800edbc <_printf_i+0x1f8>
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d1ac      	bne.n	800ed2e <_printf_i+0x16a>
 800edd4:	7803      	ldrb	r3, [r0, #0]
 800edd6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800edda:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800edde:	e76c      	b.n	800ecba <_printf_i+0xf6>
 800ede0:	0800f355 	.word	0x0800f355
 800ede4:	0800f366 	.word	0x0800f366

0800ede8 <_sbrk_r>:
 800ede8:	b538      	push	{r3, r4, r5, lr}
 800edea:	4c06      	ldr	r4, [pc, #24]	; (800ee04 <_sbrk_r+0x1c>)
 800edec:	2300      	movs	r3, #0
 800edee:	4605      	mov	r5, r0
 800edf0:	4608      	mov	r0, r1
 800edf2:	6023      	str	r3, [r4, #0]
 800edf4:	f7f3 fa84 	bl	8002300 <_sbrk>
 800edf8:	1c43      	adds	r3, r0, #1
 800edfa:	d102      	bne.n	800ee02 <_sbrk_r+0x1a>
 800edfc:	6823      	ldr	r3, [r4, #0]
 800edfe:	b103      	cbz	r3, 800ee02 <_sbrk_r+0x1a>
 800ee00:	602b      	str	r3, [r5, #0]
 800ee02:	bd38      	pop	{r3, r4, r5, pc}
 800ee04:	20000f20 	.word	0x20000f20

0800ee08 <memmove>:
 800ee08:	4288      	cmp	r0, r1
 800ee0a:	b510      	push	{r4, lr}
 800ee0c:	eb01 0302 	add.w	r3, r1, r2
 800ee10:	d807      	bhi.n	800ee22 <memmove+0x1a>
 800ee12:	1e42      	subs	r2, r0, #1
 800ee14:	4299      	cmp	r1, r3
 800ee16:	d00a      	beq.n	800ee2e <memmove+0x26>
 800ee18:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee1c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ee20:	e7f8      	b.n	800ee14 <memmove+0xc>
 800ee22:	4283      	cmp	r3, r0
 800ee24:	d9f5      	bls.n	800ee12 <memmove+0xa>
 800ee26:	1881      	adds	r1, r0, r2
 800ee28:	1ad2      	subs	r2, r2, r3
 800ee2a:	42d3      	cmn	r3, r2
 800ee2c:	d100      	bne.n	800ee30 <memmove+0x28>
 800ee2e:	bd10      	pop	{r4, pc}
 800ee30:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ee34:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ee38:	e7f7      	b.n	800ee2a <memmove+0x22>

0800ee3a <__malloc_lock>:
 800ee3a:	4770      	bx	lr

0800ee3c <__malloc_unlock>:
 800ee3c:	4770      	bx	lr
	...

0800ee40 <_free_r>:
 800ee40:	b538      	push	{r3, r4, r5, lr}
 800ee42:	4605      	mov	r5, r0
 800ee44:	2900      	cmp	r1, #0
 800ee46:	d045      	beq.n	800eed4 <_free_r+0x94>
 800ee48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee4c:	1f0c      	subs	r4, r1, #4
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	bfb8      	it	lt
 800ee52:	18e4      	addlt	r4, r4, r3
 800ee54:	f7ff fff1 	bl	800ee3a <__malloc_lock>
 800ee58:	4a1f      	ldr	r2, [pc, #124]	; (800eed8 <_free_r+0x98>)
 800ee5a:	6813      	ldr	r3, [r2, #0]
 800ee5c:	4610      	mov	r0, r2
 800ee5e:	b933      	cbnz	r3, 800ee6e <_free_r+0x2e>
 800ee60:	6063      	str	r3, [r4, #4]
 800ee62:	6014      	str	r4, [r2, #0]
 800ee64:	4628      	mov	r0, r5
 800ee66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee6a:	f7ff bfe7 	b.w	800ee3c <__malloc_unlock>
 800ee6e:	42a3      	cmp	r3, r4
 800ee70:	d90c      	bls.n	800ee8c <_free_r+0x4c>
 800ee72:	6821      	ldr	r1, [r4, #0]
 800ee74:	1862      	adds	r2, r4, r1
 800ee76:	4293      	cmp	r3, r2
 800ee78:	bf04      	itt	eq
 800ee7a:	681a      	ldreq	r2, [r3, #0]
 800ee7c:	685b      	ldreq	r3, [r3, #4]
 800ee7e:	6063      	str	r3, [r4, #4]
 800ee80:	bf04      	itt	eq
 800ee82:	1852      	addeq	r2, r2, r1
 800ee84:	6022      	streq	r2, [r4, #0]
 800ee86:	6004      	str	r4, [r0, #0]
 800ee88:	e7ec      	b.n	800ee64 <_free_r+0x24>
 800ee8a:	4613      	mov	r3, r2
 800ee8c:	685a      	ldr	r2, [r3, #4]
 800ee8e:	b10a      	cbz	r2, 800ee94 <_free_r+0x54>
 800ee90:	42a2      	cmp	r2, r4
 800ee92:	d9fa      	bls.n	800ee8a <_free_r+0x4a>
 800ee94:	6819      	ldr	r1, [r3, #0]
 800ee96:	1858      	adds	r0, r3, r1
 800ee98:	42a0      	cmp	r0, r4
 800ee9a:	d10b      	bne.n	800eeb4 <_free_r+0x74>
 800ee9c:	6820      	ldr	r0, [r4, #0]
 800ee9e:	4401      	add	r1, r0
 800eea0:	1858      	adds	r0, r3, r1
 800eea2:	4282      	cmp	r2, r0
 800eea4:	6019      	str	r1, [r3, #0]
 800eea6:	d1dd      	bne.n	800ee64 <_free_r+0x24>
 800eea8:	6810      	ldr	r0, [r2, #0]
 800eeaa:	6852      	ldr	r2, [r2, #4]
 800eeac:	605a      	str	r2, [r3, #4]
 800eeae:	4401      	add	r1, r0
 800eeb0:	6019      	str	r1, [r3, #0]
 800eeb2:	e7d7      	b.n	800ee64 <_free_r+0x24>
 800eeb4:	d902      	bls.n	800eebc <_free_r+0x7c>
 800eeb6:	230c      	movs	r3, #12
 800eeb8:	602b      	str	r3, [r5, #0]
 800eeba:	e7d3      	b.n	800ee64 <_free_r+0x24>
 800eebc:	6820      	ldr	r0, [r4, #0]
 800eebe:	1821      	adds	r1, r4, r0
 800eec0:	428a      	cmp	r2, r1
 800eec2:	bf04      	itt	eq
 800eec4:	6811      	ldreq	r1, [r2, #0]
 800eec6:	6852      	ldreq	r2, [r2, #4]
 800eec8:	6062      	str	r2, [r4, #4]
 800eeca:	bf04      	itt	eq
 800eecc:	1809      	addeq	r1, r1, r0
 800eece:	6021      	streq	r1, [r4, #0]
 800eed0:	605c      	str	r4, [r3, #4]
 800eed2:	e7c7      	b.n	800ee64 <_free_r+0x24>
 800eed4:	bd38      	pop	{r3, r4, r5, pc}
 800eed6:	bf00      	nop
 800eed8:	200006f4 	.word	0x200006f4

0800eedc <_realloc_r>:
 800eedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eede:	4607      	mov	r7, r0
 800eee0:	4614      	mov	r4, r2
 800eee2:	460e      	mov	r6, r1
 800eee4:	b921      	cbnz	r1, 800eef0 <_realloc_r+0x14>
 800eee6:	4611      	mov	r1, r2
 800eee8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800eeec:	f7ff bc48 	b.w	800e780 <_malloc_r>
 800eef0:	b922      	cbnz	r2, 800eefc <_realloc_r+0x20>
 800eef2:	f7ff ffa5 	bl	800ee40 <_free_r>
 800eef6:	4625      	mov	r5, r4
 800eef8:	4628      	mov	r0, r5
 800eefa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eefc:	f000 f814 	bl	800ef28 <_malloc_usable_size_r>
 800ef00:	42a0      	cmp	r0, r4
 800ef02:	d20f      	bcs.n	800ef24 <_realloc_r+0x48>
 800ef04:	4621      	mov	r1, r4
 800ef06:	4638      	mov	r0, r7
 800ef08:	f7ff fc3a 	bl	800e780 <_malloc_r>
 800ef0c:	4605      	mov	r5, r0
 800ef0e:	2800      	cmp	r0, #0
 800ef10:	d0f2      	beq.n	800eef8 <_realloc_r+0x1c>
 800ef12:	4631      	mov	r1, r6
 800ef14:	4622      	mov	r2, r4
 800ef16:	f7ff fbef 	bl	800e6f8 <memcpy>
 800ef1a:	4631      	mov	r1, r6
 800ef1c:	4638      	mov	r0, r7
 800ef1e:	f7ff ff8f 	bl	800ee40 <_free_r>
 800ef22:	e7e9      	b.n	800eef8 <_realloc_r+0x1c>
 800ef24:	4635      	mov	r5, r6
 800ef26:	e7e7      	b.n	800eef8 <_realloc_r+0x1c>

0800ef28 <_malloc_usable_size_r>:
 800ef28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef2c:	1f18      	subs	r0, r3, #4
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	bfbc      	itt	lt
 800ef32:	580b      	ldrlt	r3, [r1, r0]
 800ef34:	18c0      	addlt	r0, r0, r3
 800ef36:	4770      	bx	lr

0800ef38 <_init>:
 800ef38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef3a:	bf00      	nop
 800ef3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef3e:	bc08      	pop	{r3}
 800ef40:	469e      	mov	lr, r3
 800ef42:	4770      	bx	lr

0800ef44 <_fini>:
 800ef44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef46:	bf00      	nop
 800ef48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef4a:	bc08      	pop	{r3}
 800ef4c:	469e      	mov	lr, r3
 800ef4e:	4770      	bx	lr
