
CLIENT_NUCLEO_LB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb3c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  0800ec7c  0800ec7c  0001ec7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f098  0800f098  0001f098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f0a0  0800f0a0  0001f0a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f0a4  0800f0a4  0001f0a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001ec  20000004  0800f0a8  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  200001f0  0800f294  000201f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000039  2000028c  0800f32d  0002028c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  200002c8  0800f366  000202c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 000000a4  200002dc  0800f377  000202dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000ba4  20000380  0800f41b  00020380  2**2
                  ALLOC
 12 ._user_heap_stack 00001004  20000f24  0800f41b  00020f24  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020380  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000024  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       0000019f  20030024  20030024  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000880  200301c4  200301c4  00030000  2**2
                  ALLOC
 17 .debug_info   0003d601  00000000  00000000  000203b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 000074f5  00000000  00000000  0005d9b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 00002838  00000000  00000000  00064ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 000024e0  00000000  00000000  000676e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_macro  0002e0f0  00000000  00000000  00069bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   00027a10  00000000  00000000  00097cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    000f384c  00000000  00000000  000bf6c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  001b2f0c  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000a7c4  00000000  00000000  001b2f88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000380 	.word	0x20000380
 800015c:	00000000 	.word	0x00000000
 8000160:	0800ec64 	.word	0x0800ec64

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000384 	.word	0x20000384
 800017c:	0800ec64 	.word	0x0800ec64

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000240:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000244:	f000 b972 	b.w	800052c <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	4688      	mov	r8, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14b      	bne.n	8000306 <__udivmoddi4+0xa6>
 800026e:	428a      	cmp	r2, r1
 8000270:	4615      	mov	r5, r2
 8000272:	d967      	bls.n	8000344 <__udivmoddi4+0xe4>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b14a      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027a:	f1c2 0720 	rsb	r7, r2, #32
 800027e:	fa01 f302 	lsl.w	r3, r1, r2
 8000282:	fa20 f707 	lsr.w	r7, r0, r7
 8000286:	4095      	lsls	r5, r2
 8000288:	ea47 0803 	orr.w	r8, r7, r3
 800028c:	4094      	lsls	r4, r2
 800028e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000292:	0c23      	lsrs	r3, r4, #16
 8000294:	fbb8 f7fe 	udiv	r7, r8, lr
 8000298:	fa1f fc85 	uxth.w	ip, r5
 800029c:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a4:	fb07 f10c 	mul.w	r1, r7, ip
 80002a8:	4299      	cmp	r1, r3
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x60>
 80002ac:	18eb      	adds	r3, r5, r3
 80002ae:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002b2:	f080 811b 	bcs.w	80004ec <__udivmoddi4+0x28c>
 80002b6:	4299      	cmp	r1, r3
 80002b8:	f240 8118 	bls.w	80004ec <__udivmoddi4+0x28c>
 80002bc:	3f02      	subs	r7, #2
 80002be:	442b      	add	r3, r5
 80002c0:	1a5b      	subs	r3, r3, r1
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002c8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d4:	45a4      	cmp	ip, r4
 80002d6:	d909      	bls.n	80002ec <__udivmoddi4+0x8c>
 80002d8:	192c      	adds	r4, r5, r4
 80002da:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002de:	f080 8107 	bcs.w	80004f0 <__udivmoddi4+0x290>
 80002e2:	45a4      	cmp	ip, r4
 80002e4:	f240 8104 	bls.w	80004f0 <__udivmoddi4+0x290>
 80002e8:	3802      	subs	r0, #2
 80002ea:	442c      	add	r4, r5
 80002ec:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f0:	eba4 040c 	sub.w	r4, r4, ip
 80002f4:	2700      	movs	r7, #0
 80002f6:	b11e      	cbz	r6, 8000300 <__udivmoddi4+0xa0>
 80002f8:	40d4      	lsrs	r4, r2
 80002fa:	2300      	movs	r3, #0
 80002fc:	e9c6 4300 	strd	r4, r3, [r6]
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d909      	bls.n	800031e <__udivmoddi4+0xbe>
 800030a:	2e00      	cmp	r6, #0
 800030c:	f000 80eb 	beq.w	80004e6 <__udivmoddi4+0x286>
 8000310:	2700      	movs	r7, #0
 8000312:	e9c6 0100 	strd	r0, r1, [r6]
 8000316:	4638      	mov	r0, r7
 8000318:	4639      	mov	r1, r7
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	fab3 f783 	clz	r7, r3
 8000322:	2f00      	cmp	r7, #0
 8000324:	d147      	bne.n	80003b6 <__udivmoddi4+0x156>
 8000326:	428b      	cmp	r3, r1
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xd0>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 80fa 	bhi.w	8000524 <__udivmoddi4+0x2c4>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb61 0303 	sbc.w	r3, r1, r3
 8000336:	2001      	movs	r0, #1
 8000338:	4698      	mov	r8, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d0e0      	beq.n	8000300 <__udivmoddi4+0xa0>
 800033e:	e9c6 4800 	strd	r4, r8, [r6]
 8000342:	e7dd      	b.n	8000300 <__udivmoddi4+0xa0>
 8000344:	b902      	cbnz	r2, 8000348 <__udivmoddi4+0xe8>
 8000346:	deff      	udf	#255	; 0xff
 8000348:	fab2 f282 	clz	r2, r2
 800034c:	2a00      	cmp	r2, #0
 800034e:	f040 808f 	bne.w	8000470 <__udivmoddi4+0x210>
 8000352:	1b49      	subs	r1, r1, r5
 8000354:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000358:	fa1f f885 	uxth.w	r8, r5
 800035c:	2701      	movs	r7, #1
 800035e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000362:	0c23      	lsrs	r3, r4, #16
 8000364:	fb0e 111c 	mls	r1, lr, ip, r1
 8000368:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800036c:	fb08 f10c 	mul.w	r1, r8, ip
 8000370:	4299      	cmp	r1, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x124>
 8000374:	18eb      	adds	r3, r5, r3
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x122>
 800037c:	4299      	cmp	r1, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2bc>
 8000382:	4684      	mov	ip, r0
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000390:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x14c>
 800039c:	192c      	adds	r4, r5, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x14a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80b6 	bhi.w	8000516 <__udivmoddi4+0x2b6>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e79f      	b.n	80002f6 <__udivmoddi4+0x96>
 80003b6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ba:	40bb      	lsls	r3, r7
 80003bc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003c4:	fa01 f407 	lsl.w	r4, r1, r7
 80003c8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003cc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003d4:	4325      	orrs	r5, r4
 80003d6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003da:	0c2c      	lsrs	r4, r5, #16
 80003dc:	fb08 3319 	mls	r3, r8, r9, r3
 80003e0:	fa1f fa8e 	uxth.w	sl, lr
 80003e4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003e8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ec:	429c      	cmp	r4, r3
 80003ee:	fa02 f207 	lsl.w	r2, r2, r7
 80003f2:	fa00 f107 	lsl.w	r1, r0, r7
 80003f6:	d90b      	bls.n	8000410 <__udivmoddi4+0x1b0>
 80003f8:	eb1e 0303 	adds.w	r3, lr, r3
 80003fc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000400:	f080 8087 	bcs.w	8000512 <__udivmoddi4+0x2b2>
 8000404:	429c      	cmp	r4, r3
 8000406:	f240 8084 	bls.w	8000512 <__udivmoddi4+0x2b2>
 800040a:	f1a9 0902 	sub.w	r9, r9, #2
 800040e:	4473      	add	r3, lr
 8000410:	1b1b      	subs	r3, r3, r4
 8000412:	b2ad      	uxth	r5, r5
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000420:	fb00 fa0a 	mul.w	sl, r0, sl
 8000424:	45a2      	cmp	sl, r4
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x1da>
 8000428:	eb1e 0404 	adds.w	r4, lr, r4
 800042c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000430:	d26b      	bcs.n	800050a <__udivmoddi4+0x2aa>
 8000432:	45a2      	cmp	sl, r4
 8000434:	d969      	bls.n	800050a <__udivmoddi4+0x2aa>
 8000436:	3802      	subs	r0, #2
 8000438:	4474      	add	r4, lr
 800043a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800043e:	fba0 8902 	umull	r8, r9, r0, r2
 8000442:	eba4 040a 	sub.w	r4, r4, sl
 8000446:	454c      	cmp	r4, r9
 8000448:	46c2      	mov	sl, r8
 800044a:	464b      	mov	r3, r9
 800044c:	d354      	bcc.n	80004f8 <__udivmoddi4+0x298>
 800044e:	d051      	beq.n	80004f4 <__udivmoddi4+0x294>
 8000450:	2e00      	cmp	r6, #0
 8000452:	d069      	beq.n	8000528 <__udivmoddi4+0x2c8>
 8000454:	ebb1 050a 	subs.w	r5, r1, sl
 8000458:	eb64 0403 	sbc.w	r4, r4, r3
 800045c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000460:	40fd      	lsrs	r5, r7
 8000462:	40fc      	lsrs	r4, r7
 8000464:	ea4c 0505 	orr.w	r5, ip, r5
 8000468:	e9c6 5400 	strd	r5, r4, [r6]
 800046c:	2700      	movs	r7, #0
 800046e:	e747      	b.n	8000300 <__udivmoddi4+0xa0>
 8000470:	f1c2 0320 	rsb	r3, r2, #32
 8000474:	fa20 f703 	lsr.w	r7, r0, r3
 8000478:	4095      	lsls	r5, r2
 800047a:	fa01 f002 	lsl.w	r0, r1, r2
 800047e:	fa21 f303 	lsr.w	r3, r1, r3
 8000482:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000486:	4338      	orrs	r0, r7
 8000488:	0c01      	lsrs	r1, r0, #16
 800048a:	fbb3 f7fe 	udiv	r7, r3, lr
 800048e:	fa1f f885 	uxth.w	r8, r5
 8000492:	fb0e 3317 	mls	r3, lr, r7, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb07 f308 	mul.w	r3, r7, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	fa04 f402 	lsl.w	r4, r4, r2
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x256>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ac:	d22f      	bcs.n	800050e <__udivmoddi4+0x2ae>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d92d      	bls.n	800050e <__udivmoddi4+0x2ae>
 80004b2:	3f02      	subs	r7, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1acb      	subs	r3, r1, r3
 80004b8:	b281      	uxth	r1, r0
 80004ba:	fbb3 f0fe 	udiv	r0, r3, lr
 80004be:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c6:	fb00 f308 	mul.w	r3, r0, r8
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x27e>
 80004ce:	1869      	adds	r1, r5, r1
 80004d0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004d4:	d217      	bcs.n	8000506 <__udivmoddi4+0x2a6>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d915      	bls.n	8000506 <__udivmoddi4+0x2a6>
 80004da:	3802      	subs	r0, #2
 80004dc:	4429      	add	r1, r5
 80004de:	1ac9      	subs	r1, r1, r3
 80004e0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004e4:	e73b      	b.n	800035e <__udivmoddi4+0xfe>
 80004e6:	4637      	mov	r7, r6
 80004e8:	4630      	mov	r0, r6
 80004ea:	e709      	b.n	8000300 <__udivmoddi4+0xa0>
 80004ec:	4607      	mov	r7, r0
 80004ee:	e6e7      	b.n	80002c0 <__udivmoddi4+0x60>
 80004f0:	4618      	mov	r0, r3
 80004f2:	e6fb      	b.n	80002ec <__udivmoddi4+0x8c>
 80004f4:	4541      	cmp	r1, r8
 80004f6:	d2ab      	bcs.n	8000450 <__udivmoddi4+0x1f0>
 80004f8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004fc:	eb69 020e 	sbc.w	r2, r9, lr
 8000500:	3801      	subs	r0, #1
 8000502:	4613      	mov	r3, r2
 8000504:	e7a4      	b.n	8000450 <__udivmoddi4+0x1f0>
 8000506:	4660      	mov	r0, ip
 8000508:	e7e9      	b.n	80004de <__udivmoddi4+0x27e>
 800050a:	4618      	mov	r0, r3
 800050c:	e795      	b.n	800043a <__udivmoddi4+0x1da>
 800050e:	4667      	mov	r7, ip
 8000510:	e7d1      	b.n	80004b6 <__udivmoddi4+0x256>
 8000512:	4681      	mov	r9, r0
 8000514:	e77c      	b.n	8000410 <__udivmoddi4+0x1b0>
 8000516:	3802      	subs	r0, #2
 8000518:	442c      	add	r4, r5
 800051a:	e747      	b.n	80003ac <__udivmoddi4+0x14c>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	442b      	add	r3, r5
 8000522:	e72f      	b.n	8000384 <__udivmoddi4+0x124>
 8000524:	4638      	mov	r0, r7
 8000526:	e708      	b.n	800033a <__udivmoddi4+0xda>
 8000528:	4637      	mov	r7, r6
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0xa0>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800053c:	689b      	ldr	r3, [r3, #8]
 800053e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000542:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4313      	orrs	r3, r2
 800054a:	608b      	str	r3, [r1, #8]
}
 800054c:	bf00      	nop
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr

08000558 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 800055c:	f000 f80e 	bl	800057c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000560:	4905      	ldr	r1, [pc, #20]	; (8000578 <APPE_Init+0x20>)
 8000562:	2000      	movs	r0, #0
 8000564:	f000 fd84 	bl	8001070 <HW_TS_Init>

  /* Initialize the debug interface */
  Init_Debug();
#endif

  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000568:	2101      	movs	r1, #1
 800056a:	2001      	movs	r0, #1
 800056c:	f001 fa1a 	bl	80019a4 <UTIL_LPM_SetOffMode>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000570:	f000 f80e 	bl	8000590 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000574:	bf00      	nop
}
 8000576:	bd80      	pop	{r7, pc}
 8000578:	200006fc 	.word	0x200006fc

0800057c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000580:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000584:	f7ff ffd4 	bl	8000530 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 8000588:	f001 f9fa 	bl	8001980 <UTIL_LPM_Init>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 800058c:	bf00      	nop
}
 800058e:	bd80      	pop	{r7, pc}

08000590 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000596:	f00b fddf 	bl	800c158 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 800059a:	4a11      	ldr	r2, [pc, #68]	; (80005e0 <appe_Tl_Init+0x50>)
 800059c:	2100      	movs	r1, #0
 800059e:	2040      	movs	r0, #64	; 0x40
 80005a0:	f001 fb68 	bl	8001c74 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80005a4:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <appe_Tl_Init+0x54>)
 80005a6:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80005a8:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <appe_Tl_Init+0x58>)
 80005aa:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80005ac:	463b      	mov	r3, r7
 80005ae:	4619      	mov	r1, r3
 80005b0:	480e      	ldr	r0, [pc, #56]	; (80005ec <appe_Tl_Init+0x5c>)
 80005b2:	f00b fc9b 	bl	800beec <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80005b6:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <appe_Tl_Init+0x60>)
 80005b8:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <appe_Tl_Init+0x64>)
 80005bc:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80005be:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <appe_Tl_Init+0x68>)
 80005c0:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80005c2:	f240 533c 	movw	r3, #1340	; 0x53c
 80005c6:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 80005c8:	f107 0308 	add.w	r3, r7, #8
 80005cc:	4618      	mov	r0, r3
 80005ce:	f00b fed1 	bl	800c374 <TL_MM_Init>

  TL_Enable();
 80005d2:	f00b fdbb 	bl	800c14c <TL_Enable>

  return;
 80005d6:	bf00      	nop
}
 80005d8:	3720      	adds	r7, #32
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	0800bf25 	.word	0x0800bf25
 80005e4:	20030700 	.word	0x20030700
 80005e8:	080005fd 	.word	0x080005fd
 80005ec:	08000613 	.word	0x08000613
 80005f0:	20030918 	.word	0x20030918
 80005f4:	2003080c 	.word	0x2003080c
 80005f8:	200301c4 	.word	0x200301c4

080005fc <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000606:	bf00      	nop
}
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr

08000612 <APPE_SysUserEvtRx>:

static void APPE_SysUserEvtRx( void * pPayload )
{
 8000612:	b580      	push	{r7, lr}
 8000614:	b082      	sub	sp, #8
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  TL_TRACES_Init( );
 800061a:	f00b ff1b 	bl	800c454 <TL_TRACES_Init>

  APP_BLE_Init( );
 800061e:	f00c f84f 	bl	800c6c0 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000622:	2100      	movs	r1, #0
 8000624:	2001      	movs	r0, #1
 8000626:	f001 f9bd 	bl	80019a4 <UTIL_LPM_SetOffMode>
  return;
 800062a:	bf00      	nop
}
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 8000632:	b580      	push	{r7, lr}
 8000634:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
 8000636:	f001 f9e3 	bl	8001a00 <UTIL_LPM_EnterLowPower>
#endif
  return;
 800063a:	bf00      	nop
}
 800063c:	bd80      	pop	{r7, pc}

0800063e <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b082      	sub	sp, #8
 8000642:	af00      	add	r7, sp, #0
 8000644:	6078      	str	r0, [r7, #4]
 8000646:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800064c:	f001 fa36 	bl	8001abc <UTIL_SEQ_Run>
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000660:	2100      	movs	r1, #0
 8000662:	2040      	movs	r0, #64	; 0x40
 8000664:	f001 fb26 	bl	8001cb4 <UTIL_SEQ_SetTask>
  return;
 8000668:	bf00      	nop
}
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000678:	2002      	movs	r0, #2
 800067a:	f001 fb81 	bl	8001d80 <UTIL_SEQ_SetEvt>
  return;
 800067e:	bf00      	nop
}
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}

08000686 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000686:	b580      	push	{r7, lr}
 8000688:	b082      	sub	sp, #8
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 800068e:	2002      	movs	r0, #2
 8000690:	f001 fb94 	bl	8001dbc <UTIL_SEQ_WaitEvt>
  return;
 8000694:	bf00      	nop
}
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80006a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4313      	orrs	r3, r2
 80006b2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80006b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4013      	ands	r3, r2
 80006be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006c0:	68fb      	ldr	r3, [r7, #12]
}
 80006c2:	bf00      	nop
 80006c4:	3714      	adds	r7, #20
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
	...

080006d0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e4:	2004      	movs	r0, #4
 80006e6:	f7ff ffd9 	bl	800069c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ea:	2080      	movs	r0, #128	; 0x80
 80006ec:	f7ff ffd6 	bl	800069c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f0:	2002      	movs	r0, #2
 80006f2:	f7ff ffd3 	bl	800069c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	2001      	movs	r0, #1
 80006f8:	f7ff ffd0 	bl	800069c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006fc:	2010      	movs	r0, #16
 80006fe:	f7ff ffcd 	bl	800069c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000702:	2008      	movs	r0, #8
 8000704:	f7ff ffca 	bl	800069c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TEST_Pin|LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	f640 0123 	movw	r1, #2083	; 0x823
 800070e:	483f      	ldr	r0, [pc, #252]	; (800080c <MX_GPIO_Init+0x13c>)
 8000710:	f002 fb5a 	bl	8002dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000714:	2308      	movs	r3, #8
 8000716:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000718:	2303      	movs	r3, #3
 800071a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	4619      	mov	r1, r3
 8000724:	483a      	ldr	r0, [pc, #232]	; (8000810 <MX_GPIO_Init+0x140>)
 8000726:	f002 f913 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 PB2 PB10 
                           PB12 PB13 PB14 PB15 
                           PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_2|GPIO_PIN_10 
 800072a:	f24f 7314 	movw	r3, #63252	; 0xf714
 800072e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000730:	2303      	movs	r3, #3
 8000732:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	4619      	mov	r1, r3
 800073c:	4833      	ldr	r0, [pc, #204]	; (800080c <MX_GPIO_Init+0x13c>)
 800073e:	f002 f907 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 
                           PC5 PC6 PC10 PC11 
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000742:	f641 436f 	movw	r3, #7279	; 0x1c6f
 8000746:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000748:	2303      	movs	r3, #3
 800074a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	4619      	mov	r1, r3
 8000754:	482f      	ldr	r0, [pc, #188]	; (8000814 <MX_GPIO_Init+0x144>)
 8000756:	f002 f8fb 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA5 PA6 PA7 
                           PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800075a:	f248 73ff 	movw	r3, #34815	; 0x87ff
 800075e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000760:	2303      	movs	r3, #3
 8000762:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	4619      	mov	r1, r3
 800076c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000770:	f002 f8ee 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8000774:	2310      	movs	r3, #16
 8000776:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000778:	4b27      	ldr	r3, [pc, #156]	; (8000818 <MX_GPIO_Init+0x148>)
 800077a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800077c:	2301      	movs	r3, #1
 800077e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	4619      	mov	r1, r3
 8000784:	4823      	ldr	r0, [pc, #140]	; (8000814 <MX_GPIO_Init+0x144>)
 8000786:	f002 f8e3 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TEST_Pin|LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin;
 800078a:	f640 0323 	movw	r3, #2083	; 0x823
 800078e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000790:	2301      	movs	r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	4619      	mov	r1, r3
 80007a0:	481a      	ldr	r0, [pc, #104]	; (800080c <MX_GPIO_Init+0x13c>)
 80007a2:	f002 f8d5 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007a6:	2310      	movs	r3, #16
 80007a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007aa:	2303      	movs	r3, #3
 80007ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	4619      	mov	r1, r3
 80007b6:	4819      	ldr	r0, [pc, #100]	; (800081c <MX_GPIO_Init+0x14c>)
 80007b8:	f002 f8ca 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = SW2_Pin|SW3_Pin;
 80007bc:	2303      	movs	r3, #3
 80007be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007c0:	4b15      	ldr	r3, [pc, #84]	; (8000818 <MX_GPIO_Init+0x148>)
 80007c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007c4:	2301      	movs	r3, #1
 80007c6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	4619      	mov	r1, r3
 80007cc:	4814      	ldr	r0, [pc, #80]	; (8000820 <MX_GPIO_Init+0x150>)
 80007ce:	f002 f8bf 	bl	8002950 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2100      	movs	r1, #0
 80007d6:	2006      	movs	r0, #6
 80007d8:	f002 f820 	bl	800281c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007dc:	2006      	movs	r0, #6
 80007de:	f002 f847 	bl	8002870 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2100      	movs	r1, #0
 80007e6:	2007      	movs	r0, #7
 80007e8:	f002 f818 	bl	800281c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80007ec:	2007      	movs	r0, #7
 80007ee:	f002 f83f 	bl	8002870 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2100      	movs	r1, #0
 80007f6:	200a      	movs	r0, #10
 80007f8:	f002 f810 	bl	800281c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80007fc:	200a      	movs	r0, #10
 80007fe:	f002 f837 	bl	8002870 <HAL_NVIC_EnableIRQ>

}
 8000802:	bf00      	nop
 8000804:	3718      	adds	r7, #24
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	48000400 	.word	0x48000400
 8000810:	48001c00 	.word	0x48001c00
 8000814:	48000800 	.word	0x48000800
 8000818:	10110000 	.word	0x10110000
 800081c:	48001000 	.word	0x48001000
 8000820:	48000c00 	.word	0x48000c00

08000824 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <LL_EXTI_EnableIT_0_31+0x24>)
 800082e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000832:	4905      	ldr	r1, [pc, #20]	; (8000848 <LL_EXTI_EnableIT_0_31+0x24>)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4313      	orrs	r3, r2
 8000838:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	58000800 	.word	0x58000800

0800084c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	4904      	ldr	r1, [pc, #16]	; (800086c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4313      	orrs	r3, r2
 800085e:	600b      	str	r3, [r1, #0]

}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	58000800 	.word	0x58000800

08000870 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000876:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <ReadRtcSsrValue+0x3c>)
 8000878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800087a:	b29b      	uxth	r3, r3
 800087c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <ReadRtcSsrValue+0x3c>)
 8000880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000882:	b29b      	uxth	r3, r3
 8000884:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000886:	e005      	b.n	8000894 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800088c:	4b07      	ldr	r3, [pc, #28]	; (80008ac <ReadRtcSsrValue+0x3c>)
 800088e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000890:	b29b      	uxth	r3, r3
 8000892:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	429a      	cmp	r2, r3
 800089a:	d1f5      	bne.n	8000888 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 800089c:	683b      	ldr	r3, [r7, #0]
}
 800089e:	4618      	mov	r0, r3
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	40002800 	.word	0x40002800

080008b0 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	460a      	mov	r2, r1
 80008ba:	71fb      	strb	r3, [r7, #7]
 80008bc:	4613      	mov	r3, r2
 80008be:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80008c0:	79ba      	ldrb	r2, [r7, #6]
 80008c2:	491d      	ldr	r1, [pc, #116]	; (8000938 <LinkTimerAfter+0x88>)
 80008c4:	4613      	mov	r3, r2
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	4413      	add	r3, r2
 80008ca:	00db      	lsls	r3, r3, #3
 80008cc:	440b      	add	r3, r1
 80008ce:	3315      	adds	r3, #21
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
 80008d6:	2b06      	cmp	r3, #6
 80008d8:	d009      	beq.n	80008ee <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80008da:	7bfa      	ldrb	r2, [r7, #15]
 80008dc:	4916      	ldr	r1, [pc, #88]	; (8000938 <LinkTimerAfter+0x88>)
 80008de:	4613      	mov	r3, r2
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	4413      	add	r3, r2
 80008e4:	00db      	lsls	r3, r3, #3
 80008e6:	440b      	add	r3, r1
 80008e8:	3314      	adds	r3, #20
 80008ea:	79fa      	ldrb	r2, [r7, #7]
 80008ec:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80008ee:	79fa      	ldrb	r2, [r7, #7]
 80008f0:	4911      	ldr	r1, [pc, #68]	; (8000938 <LinkTimerAfter+0x88>)
 80008f2:	4613      	mov	r3, r2
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	4413      	add	r3, r2
 80008f8:	00db      	lsls	r3, r3, #3
 80008fa:	440b      	add	r3, r1
 80008fc:	3315      	adds	r3, #21
 80008fe:	7bfa      	ldrb	r2, [r7, #15]
 8000900:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000902:	79fa      	ldrb	r2, [r7, #7]
 8000904:	490c      	ldr	r1, [pc, #48]	; (8000938 <LinkTimerAfter+0x88>)
 8000906:	4613      	mov	r3, r2
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	4413      	add	r3, r2
 800090c:	00db      	lsls	r3, r3, #3
 800090e:	440b      	add	r3, r1
 8000910:	3314      	adds	r3, #20
 8000912:	79ba      	ldrb	r2, [r7, #6]
 8000914:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000916:	79ba      	ldrb	r2, [r7, #6]
 8000918:	4907      	ldr	r1, [pc, #28]	; (8000938 <LinkTimerAfter+0x88>)
 800091a:	4613      	mov	r3, r2
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	4413      	add	r3, r2
 8000920:	00db      	lsls	r3, r3, #3
 8000922:	440b      	add	r3, r1
 8000924:	3315      	adds	r3, #21
 8000926:	79fa      	ldrb	r2, [r7, #7]
 8000928:	701a      	strb	r2, [r3, #0]

  return;
 800092a:	bf00      	nop
}
 800092c:	3714      	adds	r7, #20
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	200001f0 	.word	0x200001f0

0800093c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	460a      	mov	r2, r1
 8000946:	71fb      	strb	r3, [r7, #7]
 8000948:	4613      	mov	r3, r2
 800094a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 800094c:	4b29      	ldr	r3, [pc, #164]	; (80009f4 <LinkTimerBefore+0xb8>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	79ba      	ldrb	r2, [r7, #6]
 8000954:	429a      	cmp	r2, r3
 8000956:	d032      	beq.n	80009be <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000958:	79ba      	ldrb	r2, [r7, #6]
 800095a:	4927      	ldr	r1, [pc, #156]	; (80009f8 <LinkTimerBefore+0xbc>)
 800095c:	4613      	mov	r3, r2
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	4413      	add	r3, r2
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	440b      	add	r3, r1
 8000966:	3314      	adds	r3, #20
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 800096c:	7bfa      	ldrb	r2, [r7, #15]
 800096e:	4922      	ldr	r1, [pc, #136]	; (80009f8 <LinkTimerBefore+0xbc>)
 8000970:	4613      	mov	r3, r2
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	4413      	add	r3, r2
 8000976:	00db      	lsls	r3, r3, #3
 8000978:	440b      	add	r3, r1
 800097a:	3315      	adds	r3, #21
 800097c:	79fa      	ldrb	r2, [r7, #7]
 800097e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000980:	79fa      	ldrb	r2, [r7, #7]
 8000982:	491d      	ldr	r1, [pc, #116]	; (80009f8 <LinkTimerBefore+0xbc>)
 8000984:	4613      	mov	r3, r2
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	4413      	add	r3, r2
 800098a:	00db      	lsls	r3, r3, #3
 800098c:	440b      	add	r3, r1
 800098e:	3315      	adds	r3, #21
 8000990:	79ba      	ldrb	r2, [r7, #6]
 8000992:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000994:	79fa      	ldrb	r2, [r7, #7]
 8000996:	4918      	ldr	r1, [pc, #96]	; (80009f8 <LinkTimerBefore+0xbc>)
 8000998:	4613      	mov	r3, r2
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	4413      	add	r3, r2
 800099e:	00db      	lsls	r3, r3, #3
 80009a0:	440b      	add	r3, r1
 80009a2:	3314      	adds	r3, #20
 80009a4:	7bfa      	ldrb	r2, [r7, #15]
 80009a6:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80009a8:	79ba      	ldrb	r2, [r7, #6]
 80009aa:	4913      	ldr	r1, [pc, #76]	; (80009f8 <LinkTimerBefore+0xbc>)
 80009ac:	4613      	mov	r3, r2
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	4413      	add	r3, r2
 80009b2:	00db      	lsls	r3, r3, #3
 80009b4:	440b      	add	r3, r1
 80009b6:	3314      	adds	r3, #20
 80009b8:	79fa      	ldrb	r2, [r7, #7]
 80009ba:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80009bc:	e014      	b.n	80009e8 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80009be:	79fa      	ldrb	r2, [r7, #7]
 80009c0:	490d      	ldr	r1, [pc, #52]	; (80009f8 <LinkTimerBefore+0xbc>)
 80009c2:	4613      	mov	r3, r2
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	4413      	add	r3, r2
 80009c8:	00db      	lsls	r3, r3, #3
 80009ca:	440b      	add	r3, r1
 80009cc:	3315      	adds	r3, #21
 80009ce:	79ba      	ldrb	r2, [r7, #6]
 80009d0:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80009d2:	79ba      	ldrb	r2, [r7, #6]
 80009d4:	4908      	ldr	r1, [pc, #32]	; (80009f8 <LinkTimerBefore+0xbc>)
 80009d6:	4613      	mov	r3, r2
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	4413      	add	r3, r2
 80009dc:	00db      	lsls	r3, r3, #3
 80009de:	440b      	add	r3, r1
 80009e0:	3314      	adds	r3, #20
 80009e2:	79fa      	ldrb	r2, [r7, #7]
 80009e4:	701a      	strb	r2, [r3, #0]
  return;
 80009e6:	bf00      	nop
}
 80009e8:	3714      	adds	r7, #20
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20000280 	.word	0x20000280
 80009f8:	200001f0 	.word	0x200001f0

080009fc <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000a06:	4b4e      	ldr	r3, [pc, #312]	; (8000b40 <linkTimer+0x144>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	2b06      	cmp	r3, #6
 8000a0e:	d118      	bne.n	8000a42 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000a10:	4b4b      	ldr	r3, [pc, #300]	; (8000b40 <linkTimer+0x144>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4b4b      	ldr	r3, [pc, #300]	; (8000b44 <linkTimer+0x148>)
 8000a18:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000a1a:	4a49      	ldr	r2, [pc, #292]	; (8000b40 <linkTimer+0x144>)
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000a20:	79fa      	ldrb	r2, [r7, #7]
 8000a22:	4949      	ldr	r1, [pc, #292]	; (8000b48 <linkTimer+0x14c>)
 8000a24:	4613      	mov	r3, r2
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	4413      	add	r3, r2
 8000a2a:	00db      	lsls	r3, r3, #3
 8000a2c:	440b      	add	r3, r1
 8000a2e:	3315      	adds	r3, #21
 8000a30:	2206      	movs	r2, #6
 8000a32:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000a34:	4b45      	ldr	r3, [pc, #276]	; (8000b4c <linkTimer+0x150>)
 8000a36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a3a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	81fb      	strh	r3, [r7, #14]
 8000a40:	e078      	b.n	8000b34 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000a42:	f000 f909 	bl	8000c58 <ReturnTimeElapsed>
 8000a46:	4603      	mov	r3, r0
 8000a48:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000a4a:	79fa      	ldrb	r2, [r7, #7]
 8000a4c:	493e      	ldr	r1, [pc, #248]	; (8000b48 <linkTimer+0x14c>)
 8000a4e:	4613      	mov	r3, r2
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	4413      	add	r3, r2
 8000a54:	00db      	lsls	r3, r3, #3
 8000a56:	440b      	add	r3, r1
 8000a58:	3308      	adds	r3, #8
 8000a5a:	6819      	ldr	r1, [r3, #0]
 8000a5c:	89fb      	ldrh	r3, [r7, #14]
 8000a5e:	79fa      	ldrb	r2, [r7, #7]
 8000a60:	4419      	add	r1, r3
 8000a62:	4839      	ldr	r0, [pc, #228]	; (8000b48 <linkTimer+0x14c>)
 8000a64:	4613      	mov	r3, r2
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	4413      	add	r3, r2
 8000a6a:	00db      	lsls	r3, r3, #3
 8000a6c:	4403      	add	r3, r0
 8000a6e:	3308      	adds	r3, #8
 8000a70:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000a72:	79fa      	ldrb	r2, [r7, #7]
 8000a74:	4934      	ldr	r1, [pc, #208]	; (8000b48 <linkTimer+0x14c>)
 8000a76:	4613      	mov	r3, r2
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	4413      	add	r3, r2
 8000a7c:	00db      	lsls	r3, r3, #3
 8000a7e:	440b      	add	r3, r1
 8000a80:	3308      	adds	r3, #8
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000a86:	4b2e      	ldr	r3, [pc, #184]	; (8000b40 <linkTimer+0x144>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4a2e      	ldr	r2, [pc, #184]	; (8000b48 <linkTimer+0x14c>)
 8000a90:	460b      	mov	r3, r1
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	440b      	add	r3, r1
 8000a96:	00db      	lsls	r3, r3, #3
 8000a98:	4413      	add	r3, r2
 8000a9a:	3308      	adds	r3, #8
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d337      	bcc.n	8000b14 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000aa4:	4b26      	ldr	r3, [pc, #152]	; (8000b40 <linkTimer+0x144>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000aaa:	7b7a      	ldrb	r2, [r7, #13]
 8000aac:	4926      	ldr	r1, [pc, #152]	; (8000b48 <linkTimer+0x14c>)
 8000aae:	4613      	mov	r3, r2
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	4413      	add	r3, r2
 8000ab4:	00db      	lsls	r3, r3, #3
 8000ab6:	440b      	add	r3, r1
 8000ab8:	3315      	adds	r3, #21
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000abe:	e013      	b.n	8000ae8 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000ac0:	7b7a      	ldrb	r2, [r7, #13]
 8000ac2:	4921      	ldr	r1, [pc, #132]	; (8000b48 <linkTimer+0x14c>)
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	4413      	add	r3, r2
 8000aca:	00db      	lsls	r3, r3, #3
 8000acc:	440b      	add	r3, r1
 8000ace:	3315      	adds	r3, #21
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000ad4:	7b7a      	ldrb	r2, [r7, #13]
 8000ad6:	491c      	ldr	r1, [pc, #112]	; (8000b48 <linkTimer+0x14c>)
 8000ad8:	4613      	mov	r3, r2
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	4413      	add	r3, r2
 8000ade:	00db      	lsls	r3, r3, #3
 8000ae0:	440b      	add	r3, r1
 8000ae2:	3315      	adds	r3, #21
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000ae8:	7b3b      	ldrb	r3, [r7, #12]
 8000aea:	2b06      	cmp	r3, #6
 8000aec:	d00b      	beq.n	8000b06 <linkTimer+0x10a>
 8000aee:	7b3a      	ldrb	r2, [r7, #12]
 8000af0:	4915      	ldr	r1, [pc, #84]	; (8000b48 <linkTimer+0x14c>)
 8000af2:	4613      	mov	r3, r2
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	4413      	add	r3, r2
 8000af8:	00db      	lsls	r3, r3, #3
 8000afa:	440b      	add	r3, r1
 8000afc:	3308      	adds	r3, #8
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	68ba      	ldr	r2, [r7, #8]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d2dc      	bcs.n	8000ac0 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000b06:	7b7a      	ldrb	r2, [r7, #13]
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	4611      	mov	r1, r2
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fecf 	bl	80008b0 <LinkTimerAfter>
 8000b12:	e00f      	b.n	8000b34 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000b14:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <linkTimer+0x144>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	4611      	mov	r1, r2
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff ff0c 	bl	800093c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <linkTimer+0x144>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <linkTimer+0x148>)
 8000b2c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000b2e:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <linkTimer+0x144>)
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000b34:	89fb      	ldrh	r3, [r7, #14]
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000280 	.word	0x20000280
 8000b44:	20000281 	.word	0x20000281
 8000b48:	200001f0 	.word	0x200001f0
 8000b4c:	20000284 	.word	0x20000284

08000b50 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	460a      	mov	r2, r1
 8000b5a:	71fb      	strb	r3, [r7, #7]
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000b60:	4b39      	ldr	r3, [pc, #228]	; (8000c48 <UnlinkTimer+0xf8>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	79fa      	ldrb	r2, [r7, #7]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d111      	bne.n	8000b90 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000b6c:	4b36      	ldr	r3, [pc, #216]	; (8000c48 <UnlinkTimer+0xf8>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	4b36      	ldr	r3, [pc, #216]	; (8000c4c <UnlinkTimer+0xfc>)
 8000b74:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000b76:	79fa      	ldrb	r2, [r7, #7]
 8000b78:	4935      	ldr	r1, [pc, #212]	; (8000c50 <UnlinkTimer+0x100>)
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	4413      	add	r3, r2
 8000b80:	00db      	lsls	r3, r3, #3
 8000b82:	440b      	add	r3, r1
 8000b84:	3315      	adds	r3, #21
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	4b2f      	ldr	r3, [pc, #188]	; (8000c48 <UnlinkTimer+0xf8>)
 8000b8c:	701a      	strb	r2, [r3, #0]
 8000b8e:	e03e      	b.n	8000c0e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000b90:	79fa      	ldrb	r2, [r7, #7]
 8000b92:	492f      	ldr	r1, [pc, #188]	; (8000c50 <UnlinkTimer+0x100>)
 8000b94:	4613      	mov	r3, r2
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	4413      	add	r3, r2
 8000b9a:	00db      	lsls	r3, r3, #3
 8000b9c:	440b      	add	r3, r1
 8000b9e:	3314      	adds	r3, #20
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000ba4:	79fa      	ldrb	r2, [r7, #7]
 8000ba6:	492a      	ldr	r1, [pc, #168]	; (8000c50 <UnlinkTimer+0x100>)
 8000ba8:	4613      	mov	r3, r2
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	4413      	add	r3, r2
 8000bae:	00db      	lsls	r3, r3, #3
 8000bb0:	440b      	add	r3, r1
 8000bb2:	3315      	adds	r3, #21
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000bb8:	79f9      	ldrb	r1, [r7, #7]
 8000bba:	7bfa      	ldrb	r2, [r7, #15]
 8000bbc:	4824      	ldr	r0, [pc, #144]	; (8000c50 <UnlinkTimer+0x100>)
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	440b      	add	r3, r1
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	4403      	add	r3, r0
 8000bc8:	3315      	adds	r3, #21
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	b2d8      	uxtb	r0, r3
 8000bce:	4920      	ldr	r1, [pc, #128]	; (8000c50 <UnlinkTimer+0x100>)
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	4413      	add	r3, r2
 8000bd6:	00db      	lsls	r3, r3, #3
 8000bd8:	440b      	add	r3, r1
 8000bda:	3315      	adds	r3, #21
 8000bdc:	4602      	mov	r2, r0
 8000bde:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000be0:	7bbb      	ldrb	r3, [r7, #14]
 8000be2:	2b06      	cmp	r3, #6
 8000be4:	d013      	beq.n	8000c0e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000be6:	79f9      	ldrb	r1, [r7, #7]
 8000be8:	7bba      	ldrb	r2, [r7, #14]
 8000bea:	4819      	ldr	r0, [pc, #100]	; (8000c50 <UnlinkTimer+0x100>)
 8000bec:	460b      	mov	r3, r1
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	440b      	add	r3, r1
 8000bf2:	00db      	lsls	r3, r3, #3
 8000bf4:	4403      	add	r3, r0
 8000bf6:	3314      	adds	r3, #20
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	b2d8      	uxtb	r0, r3
 8000bfc:	4914      	ldr	r1, [pc, #80]	; (8000c50 <UnlinkTimer+0x100>)
 8000bfe:	4613      	mov	r3, r2
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	4413      	add	r3, r2
 8000c04:	00db      	lsls	r3, r3, #3
 8000c06:	440b      	add	r3, r1
 8000c08:	3314      	adds	r3, #20
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000c0e:	79fa      	ldrb	r2, [r7, #7]
 8000c10:	490f      	ldr	r1, [pc, #60]	; (8000c50 <UnlinkTimer+0x100>)
 8000c12:	4613      	mov	r3, r2
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	4413      	add	r3, r2
 8000c18:	00db      	lsls	r3, r3, #3
 8000c1a:	440b      	add	r3, r1
 8000c1c:	330c      	adds	r3, #12
 8000c1e:	2201      	movs	r2, #1
 8000c20:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <UnlinkTimer+0xf8>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	2b06      	cmp	r3, #6
 8000c2a:	d107      	bne.n	8000c3c <UnlinkTimer+0xec>
 8000c2c:	79bb      	ldrb	r3, [r7, #6]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d104      	bne.n	8000c3c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <UnlinkTimer+0x104>)
 8000c34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c38:	601a      	str	r2, [r3, #0]
  }

  return;
 8000c3a:	bf00      	nop
 8000c3c:	bf00      	nop
}
 8000c3e:	3714      	adds	r7, #20
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	20000280 	.word	0x20000280
 8000c4c:	20000281 	.word	0x20000281
 8000c50:	200001f0 	.word	0x200001f0
 8000c54:	20000284 	.word	0x20000284

08000c58 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <ReturnTimeElapsed+0x70>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c66:	d026      	beq.n	8000cb6 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000c68:	f7ff fe02 	bl	8000870 <ReadRtcSsrValue>
 8000c6c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000c6e:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <ReturnTimeElapsed+0x70>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d805      	bhi.n	8000c84 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <ReturnTimeElapsed+0x70>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	e00a      	b.n	8000c9a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <ReturnTimeElapsed+0x74>)
 8000c86:	881b      	ldrh	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000c90:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <ReturnTimeElapsed+0x70>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	683a      	ldr	r2, [r7, #0]
 8000c96:	4413      	add	r3, r2
 8000c98:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <ReturnTimeElapsed+0x78>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	fb02 f303 	mul.w	r3, r2, r3
 8000ca6:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <ReturnTimeElapsed+0x7c>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	40d3      	lsrs	r3, r2
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	e001      	b.n	8000cba <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	b29b      	uxth	r3, r3
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000284 	.word	0x20000284
 8000ccc:	200003a2 	.word	0x200003a2
 8000cd0:	200003a1 	.word	0x200003a1
 8000cd4:	200003a0 	.word	0x200003a0

08000cd8 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000ce2:	88fb      	ldrh	r3, [r7, #6]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d108      	bne.n	8000cfa <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000ce8:	f7ff fdc2 	bl	8000870 <ReadRtcSsrValue>
 8000cec:	4602      	mov	r2, r0
 8000cee:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <RestartWakeupCounter+0xa8>)
 8000cf0:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000cf2:	2003      	movs	r0, #3
 8000cf4:	f001 fdf8 	bl	80028e8 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000cf8:	e03e      	b.n	8000d78 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d803      	bhi.n	8000d08 <RestartWakeupCounter+0x30>
 8000d00:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <RestartWakeupCounter+0xac>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d002      	beq.n	8000d0e <RestartWakeupCounter+0x36>
      Value -= 1;
 8000d08:	88fb      	ldrh	r3, [r7, #6]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000d0e:	bf00      	nop
 8000d10:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <RestartWakeupCounter+0xb0>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	f003 0304 	and.w	r3, r3, #4
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d0f7      	beq.n	8000d10 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000d20:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <RestartWakeupCounter+0xb0>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <RestartWakeupCounter+0xb0>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000d34:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <RestartWakeupCounter+0xb4>)
 8000d38:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d3c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000d3e:	2003      	movs	r0, #3
 8000d40:	f001 fdec 	bl	800291c <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <RestartWakeupCounter+0xb8>)
 8000d46:	695b      	ldr	r3, [r3, #20]
 8000d48:	0c1b      	lsrs	r3, r3, #16
 8000d4a:	041b      	lsls	r3, r3, #16
 8000d4c:	88fa      	ldrh	r2, [r7, #6]
 8000d4e:	4910      	ldr	r1, [pc, #64]	; (8000d90 <RestartWakeupCounter+0xb8>)
 8000d50:	4313      	orrs	r3, r2
 8000d52:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000d54:	f7ff fd8c 	bl	8000870 <ReadRtcSsrValue>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <RestartWakeupCounter+0xa8>)
 8000d5c:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <RestartWakeupCounter+0xb0>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	689a      	ldr	r2, [r3, #8]
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <RestartWakeupCounter+0xb0>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d70:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000d72:	f3af 8000 	nop.w
  return ;
 8000d76:	bf00      	nop
}
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000284 	.word	0x20000284
 8000d84:	200003a0 	.word	0x200003a0
 8000d88:	2000039c 	.word	0x2000039c
 8000d8c:	58000800 	.word	0x58000800
 8000d90:	40002800 	.word	0x40002800

08000d94 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000d9a:	4b47      	ldr	r3, [pc, #284]	; (8000eb8 <RescheduleTimerList+0x124>)
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000da6:	d108      	bne.n	8000dba <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000da8:	bf00      	nop
 8000daa:	4b44      	ldr	r3, [pc, #272]	; (8000ebc <RescheduleTimerList+0x128>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	68db      	ldr	r3, [r3, #12]
 8000db2:	f003 0304 	and.w	r3, r3, #4
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d1f7      	bne.n	8000daa <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000dba:	4b40      	ldr	r3, [pc, #256]	; (8000ebc <RescheduleTimerList+0x128>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	689a      	ldr	r2, [r3, #8]
 8000dc2:	4b3e      	ldr	r3, [pc, #248]	; (8000ebc <RescheduleTimerList+0x128>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000dcc:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000dce:	4b3c      	ldr	r3, [pc, #240]	; (8000ec0 <RescheduleTimerList+0x12c>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000dd4:	7bfa      	ldrb	r2, [r7, #15]
 8000dd6:	493b      	ldr	r1, [pc, #236]	; (8000ec4 <RescheduleTimerList+0x130>)
 8000dd8:	4613      	mov	r3, r2
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	4413      	add	r3, r2
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	440b      	add	r3, r1
 8000de2:	3308      	adds	r3, #8
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000de8:	f7ff ff36 	bl	8000c58 <ReturnTimeElapsed>
 8000dec:	4603      	mov	r3, r0
 8000dee:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000df0:	88fb      	ldrh	r3, [r7, #6]
 8000df2:	68ba      	ldr	r2, [r7, #8]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d205      	bcs.n	8000e04 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000dfc:	4b32      	ldr	r3, [pc, #200]	; (8000ec8 <RescheduleTimerList+0x134>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	701a      	strb	r2, [r3, #0]
 8000e02:	e04d      	b.n	8000ea0 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000e04:	88fb      	ldrh	r3, [r7, #6]
 8000e06:	4a31      	ldr	r2, [pc, #196]	; (8000ecc <RescheduleTimerList+0x138>)
 8000e08:	8812      	ldrh	r2, [r2, #0]
 8000e0a:	b292      	uxth	r2, r2
 8000e0c:	4413      	add	r3, r2
 8000e0e:	461a      	mov	r2, r3
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d906      	bls.n	8000e24 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000e16:	4b2d      	ldr	r3, [pc, #180]	; (8000ecc <RescheduleTimerList+0x138>)
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000e1c:	4b2a      	ldr	r3, [pc, #168]	; (8000ec8 <RescheduleTimerList+0x134>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	701a      	strb	r2, [r3, #0]
 8000e22:	e03d      	b.n	8000ea0 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	b29a      	uxth	r2, r3
 8000e28:	88fb      	ldrh	r3, [r7, #6]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000e2e:	4b26      	ldr	r3, [pc, #152]	; (8000ec8 <RescheduleTimerList+0x134>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000e34:	e034      	b.n	8000ea0 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000e36:	7bfa      	ldrb	r2, [r7, #15]
 8000e38:	4922      	ldr	r1, [pc, #136]	; (8000ec4 <RescheduleTimerList+0x130>)
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	4413      	add	r3, r2
 8000e40:	00db      	lsls	r3, r3, #3
 8000e42:	440b      	add	r3, r1
 8000e44:	3308      	adds	r3, #8
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	88fb      	ldrh	r3, [r7, #6]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d20a      	bcs.n	8000e64 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000e4e:	7bfa      	ldrb	r2, [r7, #15]
 8000e50:	491c      	ldr	r1, [pc, #112]	; (8000ec4 <RescheduleTimerList+0x130>)
 8000e52:	4613      	mov	r3, r2
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	4413      	add	r3, r2
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	440b      	add	r3, r1
 8000e5c:	3308      	adds	r3, #8
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	e013      	b.n	8000e8c <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000e64:	7bfa      	ldrb	r2, [r7, #15]
 8000e66:	4917      	ldr	r1, [pc, #92]	; (8000ec4 <RescheduleTimerList+0x130>)
 8000e68:	4613      	mov	r3, r2
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	4413      	add	r3, r2
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	440b      	add	r3, r1
 8000e72:	3308      	adds	r3, #8
 8000e74:	6819      	ldr	r1, [r3, #0]
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	7bfa      	ldrb	r2, [r7, #15]
 8000e7a:	1ac9      	subs	r1, r1, r3
 8000e7c:	4811      	ldr	r0, [pc, #68]	; (8000ec4 <RescheduleTimerList+0x130>)
 8000e7e:	4613      	mov	r3, r2
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	4413      	add	r3, r2
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	4403      	add	r3, r0
 8000e88:	3308      	adds	r3, #8
 8000e8a:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000e8c:	7bfa      	ldrb	r2, [r7, #15]
 8000e8e:	490d      	ldr	r1, [pc, #52]	; (8000ec4 <RescheduleTimerList+0x130>)
 8000e90:	4613      	mov	r3, r2
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	4413      	add	r3, r2
 8000e96:	00db      	lsls	r3, r3, #3
 8000e98:	440b      	add	r3, r1
 8000e9a:	3315      	adds	r3, #21
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	2b06      	cmp	r3, #6
 8000ea4:	d1c7      	bne.n	8000e36 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000ea6:	89bb      	ldrh	r3, [r7, #12]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff15 	bl	8000cd8 <RestartWakeupCounter>

  return ;
 8000eae:	bf00      	nop
}
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40002800 	.word	0x40002800
 8000ebc:	2000039c 	.word	0x2000039c
 8000ec0:	20000280 	.word	0x20000280
 8000ec4:	200001f0 	.word	0x200001f0
 8000ec8:	20000288 	.word	0x20000288
 8000ecc:	200003a4 	.word	0x200003a4

08000ed0 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8000eda:	617b      	str	r3, [r7, #20]
  return(result);
 8000edc:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee0:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000ee2:	4b5e      	ldr	r3, [pc, #376]	; (800105c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	22ca      	movs	r2, #202	; 0xca
 8000eea:	625a      	str	r2, [r3, #36]	; 0x24
 8000eec:	4b5b      	ldr	r3, [pc, #364]	; (800105c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2253      	movs	r2, #83	; 0x53
 8000ef4:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000ef6:	4b59      	ldr	r3, [pc, #356]	; (800105c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	689a      	ldr	r2, [r3, #8]
 8000efe:	4b57      	ldr	r3, [pc, #348]	; (800105c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f08:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000f0a:	4b55      	ldr	r3, [pc, #340]	; (8001060 <HW_TS_RTC_Wakeup_Handler+0x190>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000f12:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f16:	4953      	ldr	r1, [pc, #332]	; (8001064 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f18:	4613      	mov	r3, r2
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	4413      	add	r3, r2
 8000f1e:	00db      	lsls	r3, r3, #3
 8000f20:	440b      	add	r3, r1
 8000f22:	330c      	adds	r3, #12
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d170      	bne.n	800100e <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000f2c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f30:	494c      	ldr	r1, [pc, #304]	; (8001064 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f32:	4613      	mov	r3, r2
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	4413      	add	r3, r2
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	440b      	add	r3, r1
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000f40:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f44:	4947      	ldr	r1, [pc, #284]	; (8001064 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f46:	4613      	mov	r3, r2
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	4413      	add	r3, r2
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	440b      	add	r3, r1
 8000f50:	3310      	adds	r3, #16
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000f56:	4b44      	ldr	r3, [pc, #272]	; (8001068 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d04e      	beq.n	8000ffe <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000f60:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f64:	493f      	ldr	r1, [pc, #252]	; (8001064 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f66:	4613      	mov	r3, r2
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	4413      	add	r3, r2
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	440b      	add	r3, r1
 8000f70:	330d      	adds	r3, #13
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d125      	bne.n	8000fc6 <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000f7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f7e:	2101      	movs	r1, #1
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fde5 	bl	8000b50 <UnlinkTimer>
 8000f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f88:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000f90:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f94:	4933      	ldr	r1, [pc, #204]	; (8001064 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f96:	4613      	mov	r3, r2
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	4413      	add	r3, r2
 8000f9c:	00db      	lsls	r3, r3, #3
 8000f9e:	440b      	add	r3, r1
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000fa8:	4611      	mov	r1, r2
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 fa40 	bl	8001430 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000fb0:	4b2a      	ldr	r3, [pc, #168]	; (800105c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	22ca      	movs	r2, #202	; 0xca
 8000fb8:	625a      	str	r2, [r3, #36]	; 0x24
 8000fba:	4b28      	ldr	r3, [pc, #160]	; (800105c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2253      	movs	r2, #83	; 0x53
 8000fc2:	625a      	str	r2, [r3, #36]	; 0x24
 8000fc4:	e013      	b.n	8000fee <HW_TS_RTC_Wakeup_Handler+0x11e>
 8000fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000fd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 f9a1 	bl	800131c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000fda:	4b20      	ldr	r3, [pc, #128]	; (800105c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	22ca      	movs	r2, #202	; 0xca
 8000fe2:	625a      	str	r2, [r3, #36]	; 0x24
 8000fe4:	4b1d      	ldr	r3, [pc, #116]	; (800105c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2253      	movs	r2, #83	; 0x53
 8000fec:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000fee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ff2:	69fa      	ldr	r2, [r7, #28]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	69b8      	ldr	r0, [r7, #24]
 8000ff8:	f000 faa0 	bl	800153c <HW_TS_RTC_Int_AppNot>
 8000ffc:	e024      	b.n	8001048 <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 8000ffe:	f7ff fec9 	bl	8000d94 <RescheduleTimerList>
 8001002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	f383 8810 	msr	PRIMASK, r3
 800100c:	e01c      	b.n	8001048 <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800100e:	bf00      	nop
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	f003 0304 	and.w	r3, r3, #4
 800101c:	2b00      	cmp	r3, #0
 800101e:	d0f7      	beq.n	8001010 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001020:	4b0e      	ldr	r3, [pc, #56]	; (800105c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4b0c      	ldr	r3, [pc, #48]	; (800105c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001034:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001036:	4b0d      	ldr	r3, [pc, #52]	; (800106c <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001038:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001048:	4b04      	ldr	r3, [pc, #16]	; (800105c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	22ff      	movs	r2, #255	; 0xff
 8001050:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001052:	bf00      	nop
}
 8001054:	3728      	adds	r7, #40	; 0x28
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	2000039c 	.word	0x2000039c
 8001060:	20000280 	.word	0x20000280
 8001064:	200001f0 	.word	0x200001f0
 8001068:	20000288 	.word	0x20000288
 800106c:	58000800 	.word	0x58000800

08001070 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 800107c:	4a61      	ldr	r2, [pc, #388]	; (8001204 <HW_TS_Init+0x194>)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001082:	4b60      	ldr	r3, [pc, #384]	; (8001204 <HW_TS_Init+0x194>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	22ca      	movs	r2, #202	; 0xca
 800108a:	625a      	str	r2, [r3, #36]	; 0x24
 800108c:	4b5d      	ldr	r3, [pc, #372]	; (8001204 <HW_TS_Init+0x194>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2253      	movs	r2, #83	; 0x53
 8001094:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001096:	4b5c      	ldr	r3, [pc, #368]	; (8001208 <HW_TS_Init+0x198>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	4a5b      	ldr	r2, [pc, #364]	; (8001208 <HW_TS_Init+0x198>)
 800109c:	f043 0320 	orr.w	r3, r3, #32
 80010a0:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80010a2:	4b59      	ldr	r3, [pc, #356]	; (8001208 <HW_TS_Init+0x198>)
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	f003 0307 	and.w	r3, r3, #7
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	f1c3 0304 	rsb	r3, r3, #4
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	4b55      	ldr	r3, [pc, #340]	; (800120c <HW_TS_Init+0x19c>)
 80010b6:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80010b8:	4b53      	ldr	r3, [pc, #332]	; (8001208 <HW_TS_Init+0x198>)
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80010c0:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80010c4:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	fa92 f2a2 	rbit	r2, r2
 80010cc:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	fab2 f282 	clz	r2, r2
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	40d3      	lsrs	r3, r2
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	3301      	adds	r3, #1
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4b4c      	ldr	r3, [pc, #304]	; (8001210 <HW_TS_Init+0x1a0>)
 80010e0:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80010e2:	4b49      	ldr	r3, [pc, #292]	; (8001208 <HW_TS_Init+0x198>)
 80010e4:	691b      	ldr	r3, [r3, #16]
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	3301      	adds	r3, #1
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	4b48      	ldr	r3, [pc, #288]	; (8001214 <HW_TS_Init+0x1a4>)
 80010f4:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80010f6:	4b47      	ldr	r3, [pc, #284]	; (8001214 <HW_TS_Init+0x1a4>)
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	4a44      	ldr	r2, [pc, #272]	; (8001210 <HW_TS_Init+0x1a0>)
 80010fe:	7812      	ldrb	r2, [r2, #0]
 8001100:	fb02 f303 	mul.w	r3, r2, r3
 8001104:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001108:	4a40      	ldr	r2, [pc, #256]	; (800120c <HW_TS_Init+0x19c>)
 800110a:	7812      	ldrb	r2, [r2, #0]
 800110c:	40d3      	lsrs	r3, r2
 800110e:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001116:	4293      	cmp	r3, r2
 8001118:	d904      	bls.n	8001124 <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800111a:	4b3f      	ldr	r3, [pc, #252]	; (8001218 <HW_TS_Init+0x1a8>)
 800111c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001120:	801a      	strh	r2, [r3, #0]
 8001122:	e003      	b.n	800112c <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	b29a      	uxth	r2, r3
 8001128:	4b3b      	ldr	r3, [pc, #236]	; (8001218 <HW_TS_Init+0x1a8>)
 800112a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800112c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001130:	f7ff fb8c 	bl	800084c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001134:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001138:	f7ff fb74 	bl	8000824 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d143      	bne.n	80011ca <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001142:	4b36      	ldr	r3, [pc, #216]	; (800121c <HW_TS_Init+0x1ac>)
 8001144:	2201      	movs	r2, #1
 8001146:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001148:	4b35      	ldr	r3, [pc, #212]	; (8001220 <HW_TS_Init+0x1b0>)
 800114a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800114e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001150:	2300      	movs	r3, #0
 8001152:	75fb      	strb	r3, [r7, #23]
 8001154:	e00c      	b.n	8001170 <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001156:	7dfa      	ldrb	r2, [r7, #23]
 8001158:	4932      	ldr	r1, [pc, #200]	; (8001224 <HW_TS_Init+0x1b4>)
 800115a:	4613      	mov	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4413      	add	r3, r2
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	440b      	add	r3, r1
 8001164:	330c      	adds	r3, #12
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800116a:	7dfb      	ldrb	r3, [r7, #23]
 800116c:	3301      	adds	r3, #1
 800116e:	75fb      	strb	r3, [r7, #23]
 8001170:	7dfb      	ldrb	r3, [r7, #23]
 8001172:	2b05      	cmp	r3, #5
 8001174:	d9ef      	bls.n	8001156 <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001176:	4b2c      	ldr	r3, [pc, #176]	; (8001228 <HW_TS_Init+0x1b8>)
 8001178:	2206      	movs	r2, #6
 800117a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 800117c:	4b21      	ldr	r3, [pc, #132]	; (8001204 <HW_TS_Init+0x194>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <HW_TS_Init+0x194>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800118e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001190:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <HW_TS_Init+0x194>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <HW_TS_Init+0x194>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80011a4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80011a6:	4b21      	ldr	r3, [pc, #132]	; (800122c <HW_TS_Init+0x1bc>)
 80011a8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011ac:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80011ae:	2003      	movs	r0, #3
 80011b0:	f001 fbb4 	bl	800291c <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <HW_TS_Init+0x194>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <HW_TS_Init+0x194>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	e00a      	b.n	80011e0 <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <HW_TS_Init+0x194>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d002      	beq.n	80011e0 <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80011da:	2003      	movs	r0, #3
 80011dc:	f001 fb84 	bl	80028e8 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <HW_TS_Init+0x194>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	22ff      	movs	r2, #255	; 0xff
 80011e8:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80011ea:	2200      	movs	r2, #0
 80011ec:	2103      	movs	r1, #3
 80011ee:	2003      	movs	r0, #3
 80011f0:	f001 fb14 	bl	800281c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80011f4:	2003      	movs	r0, #3
 80011f6:	f001 fb3b 	bl	8002870 <HAL_NVIC_EnableIRQ>

  return;
 80011fa:	bf00      	nop
}
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	2000039c 	.word	0x2000039c
 8001208:	40002800 	.word	0x40002800
 800120c:	200003a0 	.word	0x200003a0
 8001210:	200003a1 	.word	0x200003a1
 8001214:	200003a2 	.word	0x200003a2
 8001218:	200003a4 	.word	0x200003a4
 800121c:	20000288 	.word	0x20000288
 8001220:	20000284 	.word	0x20000284
 8001224:	200001f0 	.word	0x200001f0
 8001228:	20000280 	.word	0x20000280
 800122c:	58000800 	.word	0x58000800

08001230 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001230:	b480      	push	{r7}
 8001232:	b08b      	sub	sp, #44	; 0x2c
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	4613      	mov	r3, r2
 800123e:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001246:	f3ef 8310 	mrs	r3, PRIMASK
 800124a:	61fb      	str	r3, [r7, #28]
  return(result);
 800124c:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800124e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001250:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001252:	e004      	b.n	800125e <HW_TS_Create+0x2e>
  {
    loop++;
 8001254:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001258:	3301      	adds	r3, #1
 800125a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800125e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001262:	2b05      	cmp	r3, #5
 8001264:	d80c      	bhi.n	8001280 <HW_TS_Create+0x50>
 8001266:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800126a:	492b      	ldr	r1, [pc, #172]	; (8001318 <HW_TS_Create+0xe8>)
 800126c:	4613      	mov	r3, r2
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	4413      	add	r3, r2
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	440b      	add	r3, r1
 8001276:	330c      	adds	r3, #12
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1e9      	bne.n	8001254 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001280:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001284:	2b06      	cmp	r3, #6
 8001286:	d037      	beq.n	80012f8 <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001288:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800128c:	4922      	ldr	r1, [pc, #136]	; (8001318 <HW_TS_Create+0xe8>)
 800128e:	4613      	mov	r3, r2
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	4413      	add	r3, r2
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	440b      	add	r3, r1
 8001298:	330c      	adds	r3, #12
 800129a:	2201      	movs	r2, #1
 800129c:	701a      	strb	r2, [r3, #0]
 800129e:	6a3b      	ldr	r3, [r7, #32]
 80012a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80012a8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80012ac:	491a      	ldr	r1, [pc, #104]	; (8001318 <HW_TS_Create+0xe8>)
 80012ae:	4613      	mov	r3, r2
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	4413      	add	r3, r2
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	440b      	add	r3, r1
 80012b8:	3310      	adds	r3, #16
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80012be:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80012c2:	4915      	ldr	r1, [pc, #84]	; (8001318 <HW_TS_Create+0xe8>)
 80012c4:	4613      	mov	r3, r2
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	4413      	add	r3, r2
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	440b      	add	r3, r1
 80012ce:	330d      	adds	r3, #13
 80012d0:	79fa      	ldrb	r2, [r7, #7]
 80012d2:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80012d4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80012d8:	490f      	ldr	r1, [pc, #60]	; (8001318 <HW_TS_Create+0xe8>)
 80012da:	4613      	mov	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	4413      	add	r3, r2
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	440b      	add	r3, r1
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80012ee:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80012f0:	2300      	movs	r3, #0
 80012f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012f6:	e007      	b.n	8001308 <HW_TS_Create+0xd8>
 80012f8:	6a3b      	ldr	r3, [r7, #32]
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8001302:	2301      	movs	r3, #1
 8001304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8001308:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800130c:	4618      	mov	r0, r3
 800130e:	372c      	adds	r7, #44	; 0x2c
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	200001f0 	.word	0x200001f0

0800131c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001326:	f3ef 8310 	mrs	r3, PRIMASK
 800132a:	60fb      	str	r3, [r7, #12]
  return(result);
 800132c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800132e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001330:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001332:	2003      	movs	r0, #3
 8001334:	f001 fab4 	bl	80028a0 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001338:	4b37      	ldr	r3, [pc, #220]	; (8001418 <HW_TS_Stop+0xfc>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	22ca      	movs	r2, #202	; 0xca
 8001340:	625a      	str	r2, [r3, #36]	; 0x24
 8001342:	4b35      	ldr	r3, [pc, #212]	; (8001418 <HW_TS_Stop+0xfc>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2253      	movs	r2, #83	; 0x53
 800134a:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800134c:	79fa      	ldrb	r2, [r7, #7]
 800134e:	4933      	ldr	r1, [pc, #204]	; (800141c <HW_TS_Stop+0x100>)
 8001350:	4613      	mov	r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4413      	add	r3, r2
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	440b      	add	r3, r1
 800135a:	330c      	adds	r3, #12
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	b2db      	uxtb	r3, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d148      	bne.n	80013f6 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	2100      	movs	r1, #0
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fbf1 	bl	8000b50 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800136e:	4b2c      	ldr	r3, [pc, #176]	; (8001420 <HW_TS_Stop+0x104>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001374:	7cfb      	ldrb	r3, [r7, #19]
 8001376:	2b06      	cmp	r3, #6
 8001378:	d135      	bne.n	80013e6 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800137a:	4b2a      	ldr	r3, [pc, #168]	; (8001424 <HW_TS_Stop+0x108>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001386:	d108      	bne.n	800139a <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001388:	bf00      	nop
 800138a:	4b23      	ldr	r3, [pc, #140]	; (8001418 <HW_TS_Stop+0xfc>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	f003 0304 	and.w	r3, r3, #4
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f7      	bne.n	800138a <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800139a:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <HW_TS_Stop+0xfc>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <HW_TS_Stop+0xfc>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013ac:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80013ae:	bf00      	nop
 80013b0:	4b19      	ldr	r3, [pc, #100]	; (8001418 <HW_TS_Stop+0xfc>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d0f7      	beq.n	80013b0 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80013c0:	4b15      	ldr	r3, [pc, #84]	; (8001418 <HW_TS_Stop+0xfc>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4b13      	ldr	r3, [pc, #76]	; (8001418 <HW_TS_Stop+0xfc>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80013d4:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80013d6:	4b14      	ldr	r3, [pc, #80]	; (8001428 <HW_TS_Stop+0x10c>)
 80013d8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013dc:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80013de:	2003      	movs	r0, #3
 80013e0:	f001 fa9c 	bl	800291c <HAL_NVIC_ClearPendingIRQ>
 80013e4:	e007      	b.n	80013f6 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <HW_TS_Stop+0x110>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	7cfa      	ldrb	r2, [r7, #19]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d001      	beq.n	80013f6 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 80013f2:	f7ff fccf 	bl	8000d94 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <HW_TS_Stop+0xfc>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	22ff      	movs	r2, #255	; 0xff
 80013fe:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001400:	2003      	movs	r0, #3
 8001402:	f001 fa35 	bl	8002870 <HAL_NVIC_EnableIRQ>
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001410:	bf00      	nop
}
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	2000039c 	.word	0x2000039c
 800141c:	200001f0 	.word	0x200001f0
 8001420:	20000280 	.word	0x20000280
 8001424:	40002800 	.word	0x40002800
 8001428:	58000800 	.word	0x58000800
 800142c:	20000281 	.word	0x20000281

08001430 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	6039      	str	r1, [r7, #0]
 800143a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800143c:	79fa      	ldrb	r2, [r7, #7]
 800143e:	493b      	ldr	r1, [pc, #236]	; (800152c <HW_TS_Start+0xfc>)
 8001440:	4613      	mov	r3, r2
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	4413      	add	r3, r2
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	440b      	add	r3, r1
 800144a:	330c      	adds	r3, #12
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d103      	bne.n	800145c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff ff60 	bl	800131c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800145c:	f3ef 8310 	mrs	r3, PRIMASK
 8001460:	60fb      	str	r3, [r7, #12]
  return(result);
 8001462:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001464:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001466:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001468:	2003      	movs	r0, #3
 800146a:	f001 fa19 	bl	80028a0 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800146e:	4b30      	ldr	r3, [pc, #192]	; (8001530 <HW_TS_Start+0x100>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	22ca      	movs	r2, #202	; 0xca
 8001476:	625a      	str	r2, [r3, #36]	; 0x24
 8001478:	4b2d      	ldr	r3, [pc, #180]	; (8001530 <HW_TS_Start+0x100>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2253      	movs	r2, #83	; 0x53
 8001480:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001482:	79fa      	ldrb	r2, [r7, #7]
 8001484:	4929      	ldr	r1, [pc, #164]	; (800152c <HW_TS_Start+0xfc>)
 8001486:	4613      	mov	r3, r2
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	4413      	add	r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	440b      	add	r3, r1
 8001490:	330c      	adds	r3, #12
 8001492:	2202      	movs	r2, #2
 8001494:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001496:	79fa      	ldrb	r2, [r7, #7]
 8001498:	4924      	ldr	r1, [pc, #144]	; (800152c <HW_TS_Start+0xfc>)
 800149a:	4613      	mov	r3, r2
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	4413      	add	r3, r2
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	440b      	add	r3, r1
 80014a4:	3308      	adds	r3, #8
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80014aa:	79fa      	ldrb	r2, [r7, #7]
 80014ac:	491f      	ldr	r1, [pc, #124]	; (800152c <HW_TS_Start+0xfc>)
 80014ae:	4613      	mov	r3, r2
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	4413      	add	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	440b      	add	r3, r1
 80014b8:	3304      	adds	r3, #4
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fa9b 	bl	80009fc <linkTimer>
 80014c6:	4603      	mov	r3, r0
 80014c8:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80014ca:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <HW_TS_Start+0x104>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80014d0:	4b19      	ldr	r3, [pc, #100]	; (8001538 <HW_TS_Start+0x108>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	7c7a      	ldrb	r2, [r7, #17]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d002      	beq.n	80014e2 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 80014dc:	f7ff fc5a 	bl	8000d94 <RescheduleTimerList>
 80014e0:	e013      	b.n	800150a <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80014e2:	79fa      	ldrb	r2, [r7, #7]
 80014e4:	4911      	ldr	r1, [pc, #68]	; (800152c <HW_TS_Start+0xfc>)
 80014e6:	4613      	mov	r3, r2
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	4413      	add	r3, r2
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	440b      	add	r3, r1
 80014f0:	3308      	adds	r3, #8
 80014f2:	6819      	ldr	r1, [r3, #0]
 80014f4:	8a7b      	ldrh	r3, [r7, #18]
 80014f6:	79fa      	ldrb	r2, [r7, #7]
 80014f8:	1ac9      	subs	r1, r1, r3
 80014fa:	480c      	ldr	r0, [pc, #48]	; (800152c <HW_TS_Start+0xfc>)
 80014fc:	4613      	mov	r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4413      	add	r3, r2
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	4403      	add	r3, r0
 8001506:	3308      	adds	r3, #8
 8001508:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <HW_TS_Start+0x100>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	22ff      	movs	r2, #255	; 0xff
 8001512:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001514:	2003      	movs	r0, #3
 8001516:	f001 f9ab 	bl	8002870 <HAL_NVIC_EnableIRQ>
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001524:	bf00      	nop
}
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	200001f0 	.word	0x200001f0
 8001530:	2000039c 	.word	0x2000039c
 8001534:	20000280 	.word	0x20000280
 8001538:	20000281 	.word	0x20000281

0800153c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	460b      	mov	r3, r1
 8001546:	607a      	str	r2, [r7, #4]
 8001548:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4798      	blx	r3

  return;
 800154e:	bf00      	nop
}
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <LL_RCC_LSE_SetDriveCapability>:
{
 8001556:	b480      	push	{r7}
 8001558:	b083      	sub	sp, #12
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800155e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001566:	f023 0218 	bic.w	r2, r3, #24
 800156a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4313      	orrs	r3, r2
 8001572:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001588:	f000 ff54 	bl	8002434 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800158c:	f000 f828 	bl	80015e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001590:	f7ff f89e 	bl	80006d0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001594:	f000 fe9a 	bl	80022cc <MX_USART1_UART_Init>
  MX_RF_Init();
 8001598:	f000 f9a9 	bl	80018ee <MX_RF_Init>
  MX_RTC_Init();
 800159c:	f000 f9c0 	bl	8001920 <MX_RTC_Init>
  MX_USB_Device_Init();
 80015a0:	f00c f9ec 	bl	800d97c <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  while(!VCPInitialized) {
 80015a4:	e007      	b.n	80015b6 <main+0x32>
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin); // led red pisca se USB off
 80015a6:	2102      	movs	r1, #2
 80015a8:	480b      	ldr	r0, [pc, #44]	; (80015d8 <main+0x54>)
 80015aa:	f001 fc3d 	bl	8002e28 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80015ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015b2:	f000 ffc3 	bl	800253c <HAL_Delay>
  while(!VCPInitialized) {
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <main+0x58>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0f3      	beq.n	80015a6 <main+0x22>
  }
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	2102      	movs	r1, #2
 80015c2:	4805      	ldr	r0, [pc, #20]	; (80015d8 <main+0x54>)
 80015c4:	f001 fc00 	bl	8002dc8 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */  
  APPE_Init();
 80015c8:	f7fe ffc6 	bl	8000558 <APPE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80015cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015d0:	f000 fa74 	bl	8001abc <UTIL_SEQ_Run>
 80015d4:	e7fa      	b.n	80015cc <main+0x48>
 80015d6:	bf00      	nop
 80015d8:	48000400 	.word	0x48000400
 80015dc:	200004d0 	.word	0x200004d0

080015e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b0ae      	sub	sp, #184	; 0xb8
 80015e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80015ea:	2248      	movs	r2, #72	; 0x48
 80015ec:	2100      	movs	r1, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f00c ff23 	bl	800e43a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
 8001604:	615a      	str	r2, [r3, #20]
 8001606:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	2250      	movs	r2, #80	; 0x50
 800160c:	2100      	movs	r1, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f00c ff13 	bl	800e43a <memset>

  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001614:	2000      	movs	r0, #0
 8001616:	f7ff ff9e 	bl	8001556 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800161a:	4b31      	ldr	r3, [pc, #196]	; (80016e0 <SystemClock_Config+0x100>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001622:	4a2f      	ldr	r2, [pc, #188]	; (80016e0 <SystemClock_Config+0x100>)
 8001624:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	4b2d      	ldr	r3, [pc, #180]	; (80016e0 <SystemClock_Config+0x100>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001632:	603b      	str	r3, [r7, #0]
 8001634:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001636:	2347      	movs	r3, #71	; 0x47
 8001638:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800163a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800163e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001640:	2301      	movs	r3, #1
 8001642:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001644:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001648:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800164a:	2301      	movs	r3, #1
 800164c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001650:	2340      	movs	r3, #64	; 0x40
 8001652:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001656:	2300      	movs	r3, #0
 8001658:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800165c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001660:	4618      	mov	r0, r3
 8001662:	f002 ff0b 	bl	800447c <HAL_RCC_OscConfig>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800166c:	f000 f928 	bl	80018c0 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001670:	236f      	movs	r3, #111	; 0x6f
 8001672:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001674:	2302      	movs	r3, #2
 8001676:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001678:	2300      	movs	r3, #0
 800167a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800167c:	2300      	movs	r3, #0
 800167e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001680:	2300      	movs	r3, #0
 8001682:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001684:	2300      	movs	r3, #0
 8001686:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001688:	2300      	movs	r3, #0
 800168a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800168c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001690:	2101      	movs	r1, #1
 8001692:	4618      	mov	r0, r3
 8001694:	f003 fbbc 	bl	8004e10 <HAL_RCC_ClockConfig>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800169e:	f000 f90f 	bl	80018c0 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80016a2:	f643 1301 	movw	r3, #14593	; 0x3901
 80016a6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80016ac:	2300      	movs	r3, #0
 80016ae:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80016b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016b4:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80016b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016ba:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80016bc:	2302      	movs	r3, #2
 80016be:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80016c0:	2310      	movs	r3, #16
 80016c2:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	4618      	mov	r0, r3
 80016c8:	f004 f932 	bl	8005930 <HAL_RCCEx_PeriphCLKConfig>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80016d2:	f000 f8f5 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80016d6:	bf00      	nop
 80016d8:	37b8      	adds	r7, #184	; 0xb8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	58000400 	.word	0x58000400

080016e4 <transmit_CDC_messege>:

/* USER CODE BEGIN 4 */
void transmit_CDC_messege(uint8_t* Buff, uint16_t Len){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b0a4      	sub	sp, #144	; 0x90
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	807b      	strh	r3, [r7, #2]

	uint8_t result = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	char t[100];
	char aux[10];
	uint16_t dest[5];

	for(int j=0;j<40;j+=10){
 80016f6:	2300      	movs	r3, #0
 80016f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80016fc:	e0b6      	b.n	800186c <transmit_CDC_messege+0x188>
		memset(t,0,100);
 80016fe:	f107 0320 	add.w	r3, r7, #32
 8001702:	2264      	movs	r2, #100	; 0x64
 8001704:	2100      	movs	r1, #0
 8001706:	4618      	mov	r0, r3
 8001708:	f00c fe97 	bl	800e43a <memset>

		dest[0] = (uint16_t)(((uint16_t)Buff[1+j] << 8) | Buff[0+j]);  // Turn the MSB and LSB into a signed 16-bit value
 800170c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001710:	3301      	adds	r3, #1
 8001712:	461a      	mov	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4413      	add	r3, r2
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	021b      	lsls	r3, r3, #8
 800171c:	b21a      	sxth	r2, r3
 800171e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	440b      	add	r3, r1
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	b21b      	sxth	r3, r3
 800172a:	4313      	orrs	r3, r2
 800172c:	b21b      	sxth	r3, r3
 800172e:	b29b      	uxth	r3, r3
 8001730:	813b      	strh	r3, [r7, #8]
		dest[1] = (uint16_t)(((uint16_t)Buff[3+j] << 8) | Buff[2+j]);
 8001732:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001736:	3303      	adds	r3, #3
 8001738:	461a      	mov	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	021b      	lsls	r3, r3, #8
 8001742:	b21a      	sxth	r2, r3
 8001744:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001748:	3302      	adds	r3, #2
 800174a:	4619      	mov	r1, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	440b      	add	r3, r1
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	b21b      	sxth	r3, r3
 8001754:	4313      	orrs	r3, r2
 8001756:	b21b      	sxth	r3, r3
 8001758:	b29b      	uxth	r3, r3
 800175a:	817b      	strh	r3, [r7, #10]
		dest[2] = (uint16_t)(((uint16_t)Buff[5+j] << 8) | Buff[4+j]);
 800175c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001760:	3305      	adds	r3, #5
 8001762:	461a      	mov	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4413      	add	r3, r2
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	021b      	lsls	r3, r3, #8
 800176c:	b21a      	sxth	r2, r3
 800176e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001772:	3304      	adds	r3, #4
 8001774:	4619      	mov	r1, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	440b      	add	r3, r1
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	b21b      	sxth	r3, r3
 800177e:	4313      	orrs	r3, r2
 8001780:	b21b      	sxth	r3, r3
 8001782:	b29b      	uxth	r3, r3
 8001784:	81bb      	strh	r3, [r7, #12]
		dest[3] = (uint16_t)(((uint16_t)Buff[7+j] << 8) | Buff[6+j]);
 8001786:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800178a:	3307      	adds	r3, #7
 800178c:	461a      	mov	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4413      	add	r3, r2
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	021b      	lsls	r3, r3, #8
 8001796:	b21a      	sxth	r2, r3
 8001798:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800179c:	3306      	adds	r3, #6
 800179e:	4619      	mov	r1, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	440b      	add	r3, r1
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	b21b      	sxth	r3, r3
 80017a8:	4313      	orrs	r3, r2
 80017aa:	b21b      	sxth	r3, r3
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	81fb      	strh	r3, [r7, #14]
		dest[4] = (uint16_t)(((uint16_t)Buff[9+j] << 8) | Buff[8+j]);
 80017b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80017b4:	3309      	adds	r3, #9
 80017b6:	461a      	mov	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4413      	add	r3, r2
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	021b      	lsls	r3, r3, #8
 80017c0:	b21a      	sxth	r2, r3
 80017c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80017c6:	3308      	adds	r3, #8
 80017c8:	4619      	mov	r1, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	440b      	add	r3, r1
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	b21b      	sxth	r3, r3
 80017d2:	4313      	orrs	r3, r2
 80017d4:	b21b      	sxth	r3, r3
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	823b      	strh	r3, [r7, #16]

		for(int i=0;i<4;i++){
 80017da:	2300      	movs	r3, #0
 80017dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80017e0:	e01b      	b.n	800181a <transmit_CDC_messege+0x136>
			sprintf(aux,"%u,",dest[i]);
 80017e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80017ec:	4413      	add	r3, r2
 80017ee:	f833 3c88 	ldrh.w	r3, [r3, #-136]
 80017f2:	461a      	mov	r2, r3
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	4928      	ldr	r1, [pc, #160]	; (800189c <transmit_CDC_messege+0x1b8>)
 80017fa:	4618      	mov	r0, r3
 80017fc:	f00c fe26 	bl	800e44c <siprintf>
			strcat(t,aux);
 8001800:	f107 0214 	add.w	r2, r7, #20
 8001804:	f107 0320 	add.w	r3, r7, #32
 8001808:	4611      	mov	r1, r2
 800180a:	4618      	mov	r0, r3
 800180c:	f00c fe3e 	bl	800e48c <strcat>
		for(int i=0;i<4;i++){
 8001810:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001814:	3301      	adds	r3, #1
 8001816:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800181a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800181e:	2b03      	cmp	r3, #3
 8001820:	dddf      	ble.n	80017e2 <transmit_CDC_messege+0xfe>
		}
		sprintf(aux,"%u\n",dest[4]);
 8001822:	8a3b      	ldrh	r3, [r7, #16]
 8001824:	461a      	mov	r2, r3
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	491d      	ldr	r1, [pc, #116]	; (80018a0 <transmit_CDC_messege+0x1bc>)
 800182c:	4618      	mov	r0, r3
 800182e:	f00c fe0d 	bl	800e44c <siprintf>
		strcat(t,aux);
 8001832:	f107 0214 	add.w	r2, r7, #20
 8001836:	f107 0320 	add.w	r3, r7, #32
 800183a:	4611      	mov	r1, r2
 800183c:	4618      	mov	r0, r3
 800183e:	f00c fe25 	bl	800e48c <strcat>
		result = CDC_Transmit_FS((uint8_t*)t, (unsigned)strlen(t));
 8001842:	f107 0320 	add.w	r3, r7, #32
 8001846:	4618      	mov	r0, r3
 8001848:	f7fe fc9a 	bl	8000180 <strlen>
 800184c:	4603      	mov	r3, r0
 800184e:	b29a      	uxth	r2, r3
 8001850:	f107 0320 	add.w	r3, r7, #32
 8001854:	4611      	mov	r1, r2
 8001856:	4618      	mov	r0, r3
 8001858:	f00c f95a 	bl	800db10 <CDC_Transmit_FS>
 800185c:	4603      	mov	r3, r0
 800185e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	for(int j=0;j<40;j+=10){
 8001862:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001866:	330a      	adds	r3, #10
 8001868:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800186c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001870:	2b27      	cmp	r3, #39	; 0x27
 8001872:	f77f af44 	ble.w	80016fe <transmit_CDC_messege+0x1a>
	}


	if (result == 1)
 8001876:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800187a:	2b01      	cmp	r3, #1
 800187c:	d105      	bne.n	800188a <transmit_CDC_messege+0x1a6>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 800187e:	2201      	movs	r2, #1
 8001880:	2120      	movs	r1, #32
 8001882:	4808      	ldr	r0, [pc, #32]	; (80018a4 <transmit_CDC_messege+0x1c0>)
 8001884:	f001 faa0 	bl	8002dc8 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);


}
 8001888:	e004      	b.n	8001894 <transmit_CDC_messege+0x1b0>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800188a:	2200      	movs	r2, #0
 800188c:	2120      	movs	r1, #32
 800188e:	4805      	ldr	r0, [pc, #20]	; (80018a4 <transmit_CDC_messege+0x1c0>)
 8001890:	f001 fa9a 	bl	8002dc8 <HAL_GPIO_WritePin>
}
 8001894:	bf00      	nop
 8001896:	3790      	adds	r7, #144	; 0x90
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	0800ec7c 	.word	0x0800ec7c
 80018a0:	0800ec80 	.word	0x0800ec80
 80018a4:	48000400 	.word	0x48000400

080018a8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == SW2_Pin){}
  if(GPIO_Pin == SW3_Pin){}
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80018c4:	2201      	movs	r2, #1
 80018c6:	2102      	movs	r1, #2
 80018c8:	4802      	ldr	r0, [pc, #8]	; (80018d4 <Error_Handler+0x14>)
 80018ca:	f001 fa7d 	bl	8002dc8 <HAL_GPIO_WritePin>
	while(1){
		__NOP();
 80018ce:	bf00      	nop
 80018d0:	e7fd      	b.n	80018ce <Error_Handler+0xe>
 80018d2:	bf00      	nop
 80018d4:	48000400 	.word	0x48000400

080018d8 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0

}
 80018f2:	bf00      	nop
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001900:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001908:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800190c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001910:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <MX_RTC_Init+0x34>)
 8001926:	4a0c      	ldr	r2, [pc, #48]	; (8001958 <MX_RTC_Init+0x38>)
 8001928:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800192a:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <MX_RTC_Init+0x34>)
 800192c:	2200      	movs	r2, #0
 800192e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001930:	4b08      	ldr	r3, [pc, #32]	; (8001954 <MX_RTC_Init+0x34>)
 8001932:	220f      	movs	r2, #15
 8001934:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001936:	4b07      	ldr	r3, [pc, #28]	; (8001954 <MX_RTC_Init+0x34>)
 8001938:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800193c:	60da      	str	r2, [r3, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800193e:	4805      	ldr	r0, [pc, #20]	; (8001954 <MX_RTC_Init+0x34>)
 8001940:	f004 fce2 	bl	8006308 <HAL_RTC_Init>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_RTC_Init+0x2e>
  {
    Error_Handler();
 800194a:	f7ff ffb9 	bl	80018c0 <Error_Handler>
  }

}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	200006fc 	.word	0x200006fc
 8001958:	40002800 	.word	0x40002800

0800195c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a04      	ldr	r2, [pc, #16]	; (800197c <HAL_RTC_MspInit+0x20>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d101      	bne.n	8001972 <HAL_RTC_MspInit+0x16>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800196e:	f7ff ffc5 	bl	80018fc <LL_RCC_EnableRTC>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40002800 	.word	0x40002800

08001980 <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8001984:	4b05      	ldr	r3, [pc, #20]	; (800199c <UTIL_LPM_Init+0x1c>)
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800198a:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <UTIL_LPM_Init+0x20>)
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	200003a8 	.word	0x200003a8
 80019a0:	200003ac 	.word	0x200003ac

080019a4 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80019a4:	b480      	push	{r7}
 80019a6:	b087      	sub	sp, #28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019b0:	f3ef 8310 	mrs	r3, PRIMASK
 80019b4:	613b      	str	r3, [r7, #16]
  return(result);
 80019b6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80019b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80019ba:	b672      	cpsid	i
  
  switch(state)
 80019bc:	78fb      	ldrb	r3, [r7, #3]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d009      	beq.n	80019d6 <UTIL_LPM_SetOffMode+0x32>
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d000      	beq.n	80019c8 <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 80019c6:	e00e      	b.n	80019e6 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <UTIL_LPM_SetOffMode+0x58>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <UTIL_LPM_SetOffMode+0x58>)
 80019d2:	6013      	str	r3, [r2, #0]
      break;
 80019d4:	e007      	b.n	80019e6 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	43da      	mvns	r2, r3
 80019da:	4b08      	ldr	r3, [pc, #32]	; (80019fc <UTIL_LPM_SetOffMode+0x58>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4013      	ands	r3, r2
 80019e0:	4a06      	ldr	r2, [pc, #24]	; (80019fc <UTIL_LPM_SetOffMode+0x58>)
 80019e2:	6013      	str	r3, [r2, #0]
      break;
 80019e4:	bf00      	nop
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80019f0:	bf00      	nop
 80019f2:	371c      	adds	r7, #28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	200003ac 	.word	0x200003ac

08001a00 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a06:	f3ef 8310 	mrs	r3, PRIMASK
 8001a0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8001a0c:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8001a0e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a10:	b672      	cpsid	i

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8001a12:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <UTIL_LPM_EnterLowPower+0x5c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d006      	beq.n	8001a28 <UTIL_LPM_EnterLowPower+0x28>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8001a1a:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <UTIL_LPM_EnterLowPower+0x60>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8001a20:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <UTIL_LPM_EnterLowPower+0x60>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	4798      	blx	r3
 8001a26:	e010      	b.n	8001a4a <UTIL_LPM_EnterLowPower+0x4a>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8001a28:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <UTIL_LPM_EnterLowPower+0x64>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d006      	beq.n	8001a3e <UTIL_LPM_EnterLowPower+0x3e>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8001a30:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <UTIL_LPM_EnterLowPower+0x60>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8001a36:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <UTIL_LPM_EnterLowPower+0x60>)
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	4798      	blx	r3
 8001a3c:	e005      	b.n	8001a4a <UTIL_LPM_EnterLowPower+0x4a>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8001a3e:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <UTIL_LPM_EnterLowPower+0x60>)
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <UTIL_LPM_EnterLowPower+0x60>)
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	4798      	blx	r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8001a54:	bf00      	nop
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	200003a8 	.word	0x200003a8
 8001a60:	0800ef14 	.word	0x0800ef14
 8001a64:	200003ac 	.word	0x200003ac

08001a68 <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode( void )
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterOffMode */

/* USER CODE END PWR_EnterOffMode */
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode( void )
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitOffMode */

/* USER CODE END PWR_ExitOffMode */
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode( void )
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterStopMode */

/* USER CODE END PWR_EnterStopMode */
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode( void )
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitStopMode */

/* USER CODE END PWR_ExitStopMode */
}
 8001a96:	bf00      	nop
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode( void )
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode */

/* USER CODE END PWR_EnterSleepMode */
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode( void )
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode */

/* USER CODE END PWR_ExitSleepMode */
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t mask_bm )
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08c      	sub	sp, #48	; 0x30
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8001ac4:	4b63      	ldr	r3, [pc, #396]	; (8001c54 <UTIL_SEQ_Run+0x198>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= mask_bm;
 8001aca:	4b62      	ldr	r3, [pc, #392]	; (8001c54 <UTIL_SEQ_Run+0x198>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	4a60      	ldr	r2, [pc, #384]	; (8001c54 <UTIL_SEQ_Run+0x198>)
 8001ad4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 8001ad6:	e082      	b.n	8001bde <UTIL_SEQ_Run+0x122>
  {
    counter = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 8001adc:	e002      	b.n	8001ae4 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 8001ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 8001ae4:	4a5c      	ldr	r2, [pc, #368]	; (8001c58 <UTIL_SEQ_Run+0x19c>)
 8001ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001aec:	4b5b      	ldr	r3, [pc, #364]	; (8001c5c <UTIL_SEQ_Run+0x1a0>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	401a      	ands	r2, r3
 8001af2:	4b58      	ldr	r3, [pc, #352]	; (8001c54 <UTIL_SEQ_Run+0x198>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4013      	ands	r3, r2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0f0      	beq.n	8001ade <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 8001afc:	4a56      	ldr	r2, [pc, #344]	; (8001c58 <UTIL_SEQ_Run+0x19c>)
 8001afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b00:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001b04:	4b55      	ldr	r3, [pc, #340]	; (8001c5c <UTIL_SEQ_Run+0x1a0>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	401a      	ands	r2, r3
 8001b0a:	4b52      	ldr	r3, [pc, #328]	; (8001c54 <UTIL_SEQ_Run+0x198>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if (!(TaskPrio[counter].round_robin & current_task_set))
 8001b12:	4a51      	ldr	r2, [pc, #324]	; (8001c58 <UTIL_SEQ_Run+0x19c>)
 8001b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	4413      	add	r3, r2
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1e:	4013      	ands	r3, r2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d106      	bne.n	8001b32 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8001b24:	4a4c      	ldr	r2, [pc, #304]	; (8001c58 <UTIL_SEQ_Run+0x19c>)
 8001b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	4413      	add	r3, r2
 8001b2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b30:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = bit_position(current_task_set & TaskPrio[counter].round_robin);
 8001b32:	4a49      	ldr	r2, [pc, #292]	; (8001c58 <UTIL_SEQ_Run+0x19c>)
 8001b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	4413      	add	r3, r2
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	4013      	ands	r3, r2
 8001b40:	4618      	mov	r0, r3
 8001b42:	f000 f97d 	bl	8001e40 <bit_position>
 8001b46:	4602      	mov	r2, r0
 8001b48:	4b45      	ldr	r3, [pc, #276]	; (8001c60 <UTIL_SEQ_Run+0x1a4>)
 8001b4a:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1 << (CurrentTaskIdx));
 8001b4c:	4a42      	ldr	r2, [pc, #264]	; (8001c58 <UTIL_SEQ_Run+0x19c>)
 8001b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	4413      	add	r3, r2
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	4a42      	ldr	r2, [pc, #264]	; (8001c60 <UTIL_SEQ_Run+0x1a4>)
 8001b58:	6812      	ldr	r2, [r2, #0]
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b60:	43d2      	mvns	r2, r2
 8001b62:	401a      	ands	r2, r3
 8001b64:	493c      	ldr	r1, [pc, #240]	; (8001c58 <UTIL_SEQ_Run+0x19c>)
 8001b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	440b      	add	r3, r1
 8001b6c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b6e:	f3ef 8310 	mrs	r3, PRIMASK
 8001b72:	61bb      	str	r3, [r7, #24]
  return(result);
 8001b74:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8001b76:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b78:	b672      	cpsid	i
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1 << (CurrentTaskIdx));
 8001b7a:	4b39      	ldr	r3, [pc, #228]	; (8001c60 <UTIL_SEQ_Run+0x1a4>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	461a      	mov	r2, r3
 8001b88:	4b36      	ldr	r3, [pc, #216]	; (8001c64 <UTIL_SEQ_Run+0x1a8>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	4a35      	ldr	r2, [pc, #212]	; (8001c64 <UTIL_SEQ_Run+0x1a8>)
 8001b90:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter; counter--)
 8001b92:	2302      	movs	r3, #2
 8001b94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b96:	e014      	b.n	8001bc2 <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1].priority &= ~(1 << (CurrentTaskIdx));
 8001b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	4a2e      	ldr	r2, [pc, #184]	; (8001c58 <UTIL_SEQ_Run+0x19c>)
 8001b9e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001ba2:	4b2f      	ldr	r3, [pc, #188]	; (8001c60 <UTIL_SEQ_Run+0x1a4>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	4619      	mov	r1, r3
 8001bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	400a      	ands	r2, r1
 8001bb6:	4928      	ldr	r1, [pc, #160]	; (8001c58 <UTIL_SEQ_Run+0x19c>)
 8001bb8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter; counter--)
 8001bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1e7      	bne.n	8001b98 <UTIL_SEQ_Run+0xdc>
 8001bc8:	6a3b      	ldr	r3, [r7, #32]
 8001bca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	f383 8810 	msr	PRIMASK, r3
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8001bd2:	4b23      	ldr	r3, [pc, #140]	; (8001c60 <UTIL_SEQ_Run+0x1a4>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a24      	ldr	r2, [pc, #144]	; (8001c68 <UTIL_SEQ_Run+0x1ac>)
 8001bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bdc:	4798      	blx	r3
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 8001bde:	4b21      	ldr	r3, [pc, #132]	; (8001c64 <UTIL_SEQ_Run+0x1a8>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	4b1e      	ldr	r3, [pc, #120]	; (8001c5c <UTIL_SEQ_Run+0x1a0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	401a      	ands	r2, r3
 8001be8:	4b1a      	ldr	r3, [pc, #104]	; (8001c54 <UTIL_SEQ_Run+0x198>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4013      	ands	r3, r2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d007      	beq.n	8001c02 <UTIL_SEQ_Run+0x146>
 8001bf2:	4b1e      	ldr	r3, [pc, #120]	; (8001c6c <UTIL_SEQ_Run+0x1b0>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	4b1e      	ldr	r3, [pc, #120]	; (8001c70 <UTIL_SEQ_Run+0x1b4>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f43f af6b 	beq.w	8001ad8 <UTIL_SEQ_Run+0x1c>
  }

  UTIL_SEQ_PreIdle( );
 8001c02:	f000 f90f 	bl	8001e24 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c06:	f3ef 8310 	mrs	r3, PRIMASK
 8001c0a:	613b      	str	r3, [r7, #16]
  return(result);
 8001c0c:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8001c0e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c10:	b672      	cpsid	i
  if (!((TaskSet & TaskMask & SuperMask) || (EvtSet & EvtWaited)))
 8001c12:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <UTIL_SEQ_Run+0x1a8>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <UTIL_SEQ_Run+0x1a0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	401a      	ands	r2, r3
 8001c1c:	4b0d      	ldr	r3, [pc, #52]	; (8001c54 <UTIL_SEQ_Run+0x198>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4013      	ands	r3, r2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d108      	bne.n	8001c38 <UTIL_SEQ_Run+0x17c>
 8001c26:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <UTIL_SEQ_Run+0x1b0>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <UTIL_SEQ_Run+0x1b4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <UTIL_SEQ_Run+0x17c>
  {
    UTIL_SEQ_Idle( );
 8001c34:	f7fe fcfd 	bl	8000632 <UTIL_SEQ_Idle>
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f383 8810 	msr	PRIMASK, r3
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  
  UTIL_SEQ_PostIdle( );
 8001c42:	f000 f8f6 	bl	8001e32 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8001c46:	4a03      	ldr	r2, [pc, #12]	; (8001c54 <UTIL_SEQ_Run+0x198>)
 8001c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4a:	6013      	str	r3, [r2, #0]

  return;
 8001c4c:	bf00      	nop
}
 8001c4e:	3730      	adds	r7, #48	; 0x30
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000008 	.word	0x20000008
 8001c58:	20000440 	.word	0x20000440
 8001c5c:	20000004 	.word	0x20000004
 8001c60:	200003bc 	.word	0x200003bc
 8001c64:	200003b0 	.word	0x200003b0
 8001c68:	200003c0 	.word	0x200003c0
 8001c6c:	200003b4 	.word	0x200003b4
 8001c70:	200003b8 	.word	0x200003b8

08001c74 <UTIL_SEQ_RegTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_RegTask( UTIL_SEQ_bm_t task_id_bm , uint32_t flags, void (*task)( void ) )
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b088      	sub	sp, #32
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c80:	f3ef 8310 	mrs	r3, PRIMASK
 8001c84:	617b      	str	r3, [r7, #20]
  return(result);
 8001c86:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8001c88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c8a:	b672      	cpsid	i

  TaskCb[bit_position(task_id_bm)] = task;
 8001c8c:	68f8      	ldr	r0, [r7, #12]
 8001c8e:	f000 f8d7 	bl	8001e40 <bit_position>
 8001c92:	4601      	mov	r1, r0
 8001c94:	4a06      	ldr	r2, [pc, #24]	; (8001cb0 <UTIL_SEQ_RegTask+0x3c>)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8001ca6:	bf00      	nop
}
 8001ca8:	3720      	adds	r7, #32
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	200003c0 	.word	0x200003c0

08001cb4 <UTIL_SEQ_SetTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t task_id_bm , uint32_t task_prio )
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b087      	sub	sp, #28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001cbe:	f3ef 8310 	mrs	r3, PRIMASK
 8001cc2:	60fb      	str	r3, [r7, #12]
  return(result);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8001cc6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001cc8:	b672      	cpsid	i

  TaskSet |= task_id_bm;
 8001cca:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <UTIL_SEQ_SetTask+0x4c>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <UTIL_SEQ_SetTask+0x4c>)
 8001cd4:	6013      	str	r3, [r2, #0]
  TaskPrio[task_prio].priority |= task_id_bm;
 8001cd6:	4a0b      	ldr	r2, [pc, #44]	; (8001d04 <UTIL_SEQ_SetTask+0x50>)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	4908      	ldr	r1, [pc, #32]	; (8001d04 <UTIL_SEQ_SetTask+0x50>)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8001cf4:	bf00      	nop
}
 8001cf6:	371c      	adds	r7, #28
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	200003b0 	.word	0x200003b0
 8001d04:	20000440 	.word	0x20000440

08001d08 <UTIL_SEQ_PauseTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t task_id_bm )
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b087      	sub	sp, #28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d10:	f3ef 8310 	mrs	r3, PRIMASK
 8001d14:	60fb      	str	r3, [r7, #12]
  return(result);
 8001d16:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8001d18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d1a:	b672      	cpsid	i

  TaskMask &= (~task_id_bm);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	43da      	mvns	r2, r3
 8001d20:	4b07      	ldr	r3, [pc, #28]	; (8001d40 <UTIL_SEQ_PauseTask+0x38>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4013      	ands	r3, r2
 8001d26:	4a06      	ldr	r2, [pc, #24]	; (8001d40 <UTIL_SEQ_PauseTask+0x38>)
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8001d34:	bf00      	nop
}
 8001d36:	371c      	adds	r7, #28
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	20000004 	.word	0x20000004

08001d44 <UTIL_SEQ_ResumeTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t task_id_bm )
{
 8001d44:	b480      	push	{r7}
 8001d46:	b087      	sub	sp, #28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d4c:	f3ef 8310 	mrs	r3, PRIMASK
 8001d50:	60fb      	str	r3, [r7, #12]
  return(result);
 8001d52:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8001d54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d56:	b672      	cpsid	i

  TaskMask |= task_id_bm;
 8001d58:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <UTIL_SEQ_ResumeTask+0x38>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	4a06      	ldr	r2, [pc, #24]	; (8001d7c <UTIL_SEQ_ResumeTask+0x38>)
 8001d62:	6013      	str	r3, [r2, #0]
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8001d6e:	bf00      	nop
}
 8001d70:	371c      	adds	r7, #28
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	20000004 	.word	0x20000004

08001d80 <UTIL_SEQ_SetEvt>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t evt_id_bm )
{
 8001d80:	b480      	push	{r7}
 8001d82:	b087      	sub	sp, #28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d88:	f3ef 8310 	mrs	r3, PRIMASK
 8001d8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8001d90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d92:	b672      	cpsid	i

  EvtSet |= evt_id_bm;
 8001d94:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <UTIL_SEQ_SetEvt+0x38>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	4a06      	ldr	r2, [pc, #24]	; (8001db8 <UTIL_SEQ_SetEvt+0x38>)
 8001d9e:	6013      	str	r3, [r2, #0]
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8001daa:	bf00      	nop
}
 8001dac:	371c      	adds	r7, #28
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	200003b4 	.word	0x200003b4

08001dbc <UTIL_SEQ_WaitEvt>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_WaitEvt( UTIL_SEQ_bm_t evt_id_bm )
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_id_bm;

  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_id_bm = (1 << CurrentTaskIdx);
 8001dc4:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <UTIL_SEQ_WaitEvt+0x5c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	60fb      	str	r3, [r7, #12]

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8001dd0:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <UTIL_SEQ_WaitEvt+0x60>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	60bb      	str	r3, [r7, #8]
  EvtWaited = evt_id_bm;
 8001dd6:	4a11      	ldr	r2, [pc, #68]	; (8001e1c <UTIL_SEQ_WaitEvt+0x60>)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again fro the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while((EvtSet & EvtWaited) == 0)
 8001ddc:	e005      	b.n	8001dea <UTIL_SEQ_WaitEvt+0x2e>
  {
    UTIL_SEQ_EvtIdle(current_task_id_bm, EvtWaited);
 8001dde:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <UTIL_SEQ_WaitEvt+0x60>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4619      	mov	r1, r3
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f7fe fc2a 	bl	800063e <UTIL_SEQ_EvtIdle>
  while((EvtSet & EvtWaited) == 0)
 8001dea:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <UTIL_SEQ_WaitEvt+0x64>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <UTIL_SEQ_WaitEvt+0x60>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4013      	ands	r3, r2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0f2      	beq.n	8001dde <UTIL_SEQ_WaitEvt+0x22>
  }
  EvtSet &= (~EvtWaited);
 8001df8:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <UTIL_SEQ_WaitEvt+0x60>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	43da      	mvns	r2, r3
 8001dfe:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <UTIL_SEQ_WaitEvt+0x64>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4013      	ands	r3, r2
 8001e04:	4a06      	ldr	r2, [pc, #24]	; (8001e20 <UTIL_SEQ_WaitEvt+0x64>)
 8001e06:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 8001e08:	4a04      	ldr	r2, [pc, #16]	; (8001e1c <UTIL_SEQ_WaitEvt+0x60>)
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	6013      	str	r3, [r2, #0]

  return;
 8001e0e:	bf00      	nop
}
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	200003bc 	.word	0x200003bc
 8001e1c:	200003b8 	.word	0x200003b8
 8001e20:	200003b4 	.word	0x200003b4

08001e24 <UTIL_SEQ_PreIdle>:
   */
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8001e28:	bf00      	nop
}
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8001e36:	bf00      	nop
}
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <bit_position>:

#if( __CORTEX_M == 0)
static const uint8_t clz_table_4bit[16] = { 4, 3, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 };	
static uint32_t bit_position(uint32_t value)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]

  uint32_t n = 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]

  if ((value & 0xFFFF0000) == 0)  { n  = 16; value <<= 16;  }
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	0c1b      	lsrs	r3, r3, #16
 8001e50:	041b      	lsls	r3, r3, #16
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d104      	bne.n	8001e60 <bit_position+0x20>
 8001e56:	2310      	movs	r3, #16
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	041b      	lsls	r3, r3, #16
 8001e5e:	607b      	str	r3, [r7, #4]
  if ((value & 0xFF000000) == 0)  { n +=  8; value <<=  8;  }
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d105      	bne.n	8001e76 <bit_position+0x36>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	3308      	adds	r3, #8
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	021b      	lsls	r3, r3, #8
 8001e74:	607b      	str	r3, [r7, #4]
  if ((value & 0xF0000000) == 0)  { n +=  4; value <<=  4;  }
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d105      	bne.n	8001e8c <bit_position+0x4c>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	3304      	adds	r3, #4
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	011b      	lsls	r3, r3, #4
 8001e8a:	607b      	str	r3, [r7, #4]

  n += (uint32_t)clz_table_4bit[value >> (32-4)];
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	0f1b      	lsrs	r3, r3, #28
 8001e90:	4a07      	ldr	r2, [pc, #28]	; (8001eb0 <bit_position+0x70>)
 8001e92:	5cd3      	ldrb	r3, [r2, r3]
 8001e94:	461a      	mov	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	4413      	add	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]

  return (31-n);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f1c3 031f 	rsb	r3, r3, #31
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	0800ef2c 	.word	0x0800ef2c

08001eb4 <LL_RCC_HSE_SetCapacitorTuning>:
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec0:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001ec2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8001ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ece:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	021b      	lsls	r3, r3, #8
 8001ed6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001eda:	4313      	orrs	r3, r2
 8001edc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	cafecafe 	.word	0xcafecafe

08001ef0 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001efc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001efe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4013      	ands	r3, r2
 8001f12:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f14:	68fb      	ldr	r3, [r7, #12]
}
 8001f16:	bf00      	nop
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0

	OTP_ID0_t * p_otp;
	/**
	* Read HSE_Tuning from OTP
	*/
	p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001f28:	2000      	movs	r0, #0
 8001f2a:	f00a fac9 	bl	800c4c0 <OTP_Read>
 8001f2e:	6078      	str	r0, [r7, #4]
	if (p_otp)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d004      	beq.n	8001f40 <HAL_MspInit+0x1e>
	{
		LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	799b      	ldrb	r3, [r3, #6]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff ffba 	bl	8001eb4 <LL_RCC_HSE_SetCapacitorTuning>
	}
  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001f40:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001f44:	f7ff ffd4 	bl	8001ef0 <LL_AHB3_GRP1_EnableClock>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
	...

08001f60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 8001f64:	2102      	movs	r1, #2
 8001f66:	4802      	ldr	r0, [pc, #8]	; (8001f70 <HardFault_Handler+0x10>)
 8001f68:	f000 ff5e 	bl	8002e28 <HAL_GPIO_TogglePin>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f6c:	e7fe      	b.n	8001f6c <HardFault_Handler+0xc>
 8001f6e:	bf00      	nop
 8001f70:	48000400 	.word	0x48000400

08001f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f78:	e7fe      	b.n	8001f78 <MemManage_Handler+0x4>

08001f7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f7e:	e7fe      	b.n	8001f7e <BusFault_Handler+0x4>

08001f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f84:	e7fe      	b.n	8001f84 <UsageFault_Handler+0x4>

08001f86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fb4:	f000 fa98 	bl	80024e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	f000 ff57 	bl	8002e74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001fce:	2002      	movs	r0, #2
 8001fd0:	f000 ff50 	bl	8002e74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001fdc:	2010      	movs	r0, #16
 8001fde:	f000 ff49 	bl	8002e74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001fec:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <USB_LP_IRQHandler+0x10>)
 8001fee:	f001 f843 	bl	8003078 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000cac 	.word	0x20000cac

08001ffc <RTC_WKUP_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
* @brief This function handles RTC wake-up interrupt through EXTI line 19.
*/
void RTC_WKUP_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
	HW_TS_RTC_Wakeup_Handler();
 8002000:	f7fe ff66 	bl	8000ed0 <HW_TS_RTC_Wakeup_Handler>
}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}

08002008 <IPCC_C1_RX_IRQHandler>:
/**
* @brief This function handles IPCC RX occupied interrupt.
*/
void IPCC_C1_RX_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
	HW_IPCC_Rx_Handler();
 800200c:	f00b fb6e 	bl	800d6ec <HW_IPCC_Rx_Handler>
}
 8002010:	bf00      	nop
 8002012:	bd80      	pop	{r7, pc}

08002014 <IPCC_C1_TX_IRQHandler>:
/**
* @brief This function handles IPCC TX free interrupt.
*/
void IPCC_C1_TX_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
	HW_IPCC_Tx_Handler();
 8002018:	f00b fba0 	bl	800d75c <HW_IPCC_Tx_Handler>
}
 800201c:	bf00      	nop
 800201e:	bd80      	pop	{r7, pc}

08002020 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002028:	4b11      	ldr	r3, [pc, #68]	; (8002070 <_sbrk+0x50>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d102      	bne.n	8002036 <_sbrk+0x16>
		heap_end = &end;
 8002030:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <_sbrk+0x50>)
 8002032:	4a10      	ldr	r2, [pc, #64]	; (8002074 <_sbrk+0x54>)
 8002034:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002036:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <_sbrk+0x50>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <_sbrk+0x50>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4413      	add	r3, r2
 8002044:	466a      	mov	r2, sp
 8002046:	4293      	cmp	r3, r2
 8002048:	d907      	bls.n	800205a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800204a:	f00c f9c1 	bl	800e3d0 <__errno>
 800204e:	4602      	mov	r2, r0
 8002050:	230c      	movs	r3, #12
 8002052:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002054:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002058:	e006      	b.n	8002068 <_sbrk+0x48>
	}

	heap_end += incr;
 800205a:	4b05      	ldr	r3, [pc, #20]	; (8002070 <_sbrk+0x50>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	4a03      	ldr	r2, [pc, #12]	; (8002070 <_sbrk+0x50>)
 8002064:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002066:	68fb      	ldr	r3, [r7, #12]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20000450 	.word	0x20000450
 8002074:	20000f28 	.word	0x20000f28

08002078 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 800207c:	4b26      	ldr	r3, [pc, #152]	; (8002118 <SystemInit+0xa0>)
 800207e:	2200      	movs	r2, #0
 8002080:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8002082:	4b25      	ldr	r3, [pc, #148]	; (8002118 <SystemInit+0xa0>)
 8002084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002088:	4a23      	ldr	r2, [pc, #140]	; (8002118 <SystemInit+0xa0>)
 800208a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800208e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80020a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a6:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80020aa:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80020ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020b6:	4b19      	ldr	r3, [pc, #100]	; (800211c <SystemInit+0xa4>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80020bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020c8:	f023 0305 	bic.w	r3, r3, #5
 80020cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80020d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020dc:	f023 0301 	bic.w	r3, r3, #1
 80020e0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80020e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e8:	4a0d      	ldr	r2, [pc, #52]	; (8002120 <SystemInit+0xa8>)
 80020ea:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80020ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f0:	4a0b      	ldr	r2, [pc, #44]	; (8002120 <SystemInit+0xa8>)
 80020f2:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80020f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002102:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002108:	2200      	movs	r2, #0
 800210a:	619a      	str	r2, [r3, #24]
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	e000ed00 	.word	0xe000ed00
 800211c:	faf6fefb 	.word	0xfaf6fefb
 8002120:	22041000 	.word	0x22041000

08002124 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002124:	b480      	push	{r7}
 8002126:	b087      	sub	sp, #28
 8002128:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 800212a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	091b      	lsrs	r3, r3, #4
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	4a47      	ldr	r2, [pc, #284]	; (8002254 <SystemCoreClockUpdate+0x130>)
 8002138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800213e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 030c 	and.w	r3, r3, #12
 8002148:	2b0c      	cmp	r3, #12
 800214a:	d867      	bhi.n	800221c <SystemCoreClockUpdate+0xf8>
 800214c:	a201      	add	r2, pc, #4	; (adr r2, 8002154 <SystemCoreClockUpdate+0x30>)
 800214e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002152:	bf00      	nop
 8002154:	08002189 	.word	0x08002189
 8002158:	0800221d 	.word	0x0800221d
 800215c:	0800221d 	.word	0x0800221d
 8002160:	0800221d 	.word	0x0800221d
 8002164:	08002191 	.word	0x08002191
 8002168:	0800221d 	.word	0x0800221d
 800216c:	0800221d 	.word	0x0800221d
 8002170:	0800221d 	.word	0x0800221d
 8002174:	08002199 	.word	0x08002199
 8002178:	0800221d 	.word	0x0800221d
 800217c:	0800221d 	.word	0x0800221d
 8002180:	0800221d 	.word	0x0800221d
 8002184:	080021a1 	.word	0x080021a1
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8002188:	4a33      	ldr	r2, [pc, #204]	; (8002258 <SystemCoreClockUpdate+0x134>)
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	6013      	str	r3, [r2, #0]
      break;
 800218e:	e049      	b.n	8002224 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8002190:	4b31      	ldr	r3, [pc, #196]	; (8002258 <SystemCoreClockUpdate+0x134>)
 8002192:	4a32      	ldr	r2, [pc, #200]	; (800225c <SystemCoreClockUpdate+0x138>)
 8002194:	601a      	str	r2, [r3, #0]
      break;
 8002196:	e045      	b.n	8002224 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002198:	4b2f      	ldr	r3, [pc, #188]	; (8002258 <SystemCoreClockUpdate+0x134>)
 800219a:	4a31      	ldr	r2, [pc, #196]	; (8002260 <SystemCoreClockUpdate+0x13c>)
 800219c:	601a      	str	r2, [r3, #0]
      break;
 800219e:	e041      	b.n	8002224 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80021a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 80021ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	091b      	lsrs	r3, r3, #4
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	3301      	adds	r3, #1
 80021ba:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d105      	bne.n	80021ce <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 80021c2:	4a26      	ldr	r2, [pc, #152]	; (800225c <SystemCoreClockUpdate+0x138>)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	e00d      	b.n	80021ea <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2b03      	cmp	r3, #3
 80021d2:	d105      	bne.n	80021e0 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 80021d4:	4a22      	ldr	r2, [pc, #136]	; (8002260 <SystemCoreClockUpdate+0x13c>)
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	e004      	b.n	80021ea <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e8:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	0a1b      	lsrs	r3, r3, #8
 80021f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	fb02 f303 	mul.w	r3, r2, r3
 80021fc:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 80021fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	0f5b      	lsrs	r3, r3, #29
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	3301      	adds	r3, #1
 800220c:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	fbb2 f3f3 	udiv	r3, r2, r3
 8002216:	4a10      	ldr	r2, [pc, #64]	; (8002258 <SystemCoreClockUpdate+0x134>)
 8002218:	6013      	str	r3, [r2, #0]
      break;
 800221a:	e003      	b.n	8002224 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 800221c:	4a0e      	ldr	r2, [pc, #56]	; (8002258 <SystemCoreClockUpdate+0x134>)
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	6013      	str	r3, [r2, #0]
      break;
 8002222:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	091b      	lsrs	r3, r3, #4
 800222c:	f003 030f 	and.w	r3, r3, #15
 8002230:	4a0c      	ldr	r2, [pc, #48]	; (8002264 <SystemCoreClockUpdate+0x140>)
 8002232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002236:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8002238:	4b07      	ldr	r3, [pc, #28]	; (8002258 <SystemCoreClockUpdate+0x134>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002242:	4a05      	ldr	r2, [pc, #20]	; (8002258 <SystemCoreClockUpdate+0x134>)
 8002244:	6013      	str	r3, [r2, #0]

}
 8002246:	bf00      	nop
 8002248:	371c      	adds	r7, #28
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	0800ef9c 	.word	0x0800ef9c
 8002258:	2000000c 	.word	0x2000000c
 800225c:	00f42400 	.word	0x00f42400
 8002260:	01e84800 	.word	0x01e84800
 8002264:	0800ef3c 	.word	0x0800ef3c

08002268 <LL_AHB2_GRP1_EnableClock>:
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002274:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002276:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4313      	orrs	r3, r2
 800227e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002284:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4013      	ands	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800228c:	68fb      	ldr	r3, [r7, #12]
}
 800228e:	bf00      	nop
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800229a:	b480      	push	{r7}
 800229c:	b085      	sub	sp, #20
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80022a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80022b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4013      	ands	r3, r2
 80022bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022be:	68fb      	ldr	r3, [r7, #12]
}
 80022c0:	bf00      	nop
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80022d0:	4b22      	ldr	r3, [pc, #136]	; (800235c <MX_USART1_UART_Init+0x90>)
 80022d2:	4a23      	ldr	r2, [pc, #140]	; (8002360 <MX_USART1_UART_Init+0x94>)
 80022d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022d6:	4b21      	ldr	r3, [pc, #132]	; (800235c <MX_USART1_UART_Init+0x90>)
 80022d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022de:	4b1f      	ldr	r3, [pc, #124]	; (800235c <MX_USART1_UART_Init+0x90>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022e4:	4b1d      	ldr	r3, [pc, #116]	; (800235c <MX_USART1_UART_Init+0x90>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022ea:	4b1c      	ldr	r3, [pc, #112]	; (800235c <MX_USART1_UART_Init+0x90>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022f0:	4b1a      	ldr	r3, [pc, #104]	; (800235c <MX_USART1_UART_Init+0x90>)
 80022f2:	220c      	movs	r2, #12
 80022f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022f6:	4b19      	ldr	r3, [pc, #100]	; (800235c <MX_USART1_UART_Init+0x90>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022fc:	4b17      	ldr	r3, [pc, #92]	; (800235c <MX_USART1_UART_Init+0x90>)
 80022fe:	2200      	movs	r2, #0
 8002300:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002302:	4b16      	ldr	r3, [pc, #88]	; (800235c <MX_USART1_UART_Init+0x90>)
 8002304:	2200      	movs	r2, #0
 8002306:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002308:	4b14      	ldr	r3, [pc, #80]	; (800235c <MX_USART1_UART_Init+0x90>)
 800230a:	2200      	movs	r2, #0
 800230c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800230e:	4b13      	ldr	r3, [pc, #76]	; (800235c <MX_USART1_UART_Init+0x90>)
 8002310:	2200      	movs	r2, #0
 8002312:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002314:	4811      	ldr	r0, [pc, #68]	; (800235c <MX_USART1_UART_Init+0x90>)
 8002316:	f004 f96b 	bl	80065f0 <HAL_UART_Init>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002320:	f7ff face 	bl	80018c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002324:	2100      	movs	r1, #0
 8002326:	480d      	ldr	r0, [pc, #52]	; (800235c <MX_USART1_UART_Init+0x90>)
 8002328:	f005 fd6e 	bl	8007e08 <HAL_UARTEx_SetTxFifoThreshold>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002332:	f7ff fac5 	bl	80018c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002336:	2100      	movs	r1, #0
 8002338:	4808      	ldr	r0, [pc, #32]	; (800235c <MX_USART1_UART_Init+0x90>)
 800233a:	f005 fdd5 	bl	8007ee8 <HAL_UARTEx_SetRxFifoThreshold>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002344:	f7ff fabc 	bl	80018c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002348:	4804      	ldr	r0, [pc, #16]	; (800235c <MX_USART1_UART_Init+0x90>)
 800234a:	f005 fd11 	bl	8007d70 <HAL_UARTEx_DisableFifoMode>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002354:	f7ff fab4 	bl	80018c0 <Error_Handler>
  }

}
 8002358:	bf00      	nop
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20000720 	.word	0x20000720
 8002360:	40013800 	.word	0x40013800

08002364 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b088      	sub	sp, #32
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236c:	f107 030c 	add.w	r3, r7, #12
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a0e      	ldr	r2, [pc, #56]	; (80023bc <HAL_UART_MspInit+0x58>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d116      	bne.n	80023b4 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002386:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800238a:	f7ff ff86 	bl	800229a <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800238e:	2002      	movs	r0, #2
 8002390:	f7ff ff6a 	bl	8002268 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002394:	23c0      	movs	r3, #192	; 0xc0
 8002396:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002398:	2302      	movs	r3, #2
 800239a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a0:	2300      	movs	r3, #0
 80023a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023a4:	2307      	movs	r3, #7
 80023a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a8:	f107 030c 	add.w	r3, r7, #12
 80023ac:	4619      	mov	r1, r3
 80023ae:	4804      	ldr	r0, [pc, #16]	; (80023c0 <HAL_UART_MspInit+0x5c>)
 80023b0:	f000 face 	bl	8002950 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80023b4:	bf00      	nop
 80023b6:	3720      	adds	r7, #32
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40013800 	.word	0x40013800
 80023c0:	48000400 	.word	0x48000400

080023c4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80023c4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023c6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023c8:	3304      	adds	r3, #4

080023ca <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023ca:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023cc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80023ce:	d3f9      	bcc.n	80023c4 <CopyDataInit>
  bx lr
 80023d0:	4770      	bx	lr

080023d2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80023d2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80023d4:	3004      	adds	r0, #4

080023d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80023d6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80023d8:	d3fb      	bcc.n	80023d2 <FillZerobss>
  bx lr
 80023da:	4770      	bx	lr

080023dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023dc:	480c      	ldr	r0, [pc, #48]	; (8002410 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80023de:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80023e0:	480c      	ldr	r0, [pc, #48]	; (8002414 <LoopForever+0x8>)
 80023e2:	490d      	ldr	r1, [pc, #52]	; (8002418 <LoopForever+0xc>)
 80023e4:	4a0d      	ldr	r2, [pc, #52]	; (800241c <LoopForever+0x10>)
 80023e6:	2300      	movs	r3, #0
 80023e8:	f7ff ffef 	bl	80023ca <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80023ec:	480c      	ldr	r0, [pc, #48]	; (8002420 <LoopForever+0x14>)
 80023ee:	490d      	ldr	r1, [pc, #52]	; (8002424 <LoopForever+0x18>)
 80023f0:	2300      	movs	r3, #0
 80023f2:	f7ff fff0 	bl	80023d6 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80023f6:	480c      	ldr	r0, [pc, #48]	; (8002428 <LoopForever+0x1c>)
 80023f8:	490c      	ldr	r1, [pc, #48]	; (800242c <LoopForever+0x20>)
 80023fa:	2300      	movs	r3, #0
 80023fc:	f7ff ffeb 	bl	80023d6 <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002400:	f7ff fe3a 	bl	8002078 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002404:	f00b ffea 	bl	800e3dc <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002408:	f7ff f8bc 	bl	8001584 <main>

0800240c <LoopForever>:

LoopForever:
  b LoopForever
 800240c:	e7fe      	b.n	800240c <LoopForever>
 800240e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002410:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002414:	20000004 	.word	0x20000004
 8002418:	200001f0 	.word	0x200001f0
 800241c:	0800f0a8 	.word	0x0800f0a8
  INIT_BSS _sbss, _ebss
 8002420:	20000380 	.word	0x20000380
 8002424:	20000f24 	.word	0x20000f24
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002428:	200301c4 	.word	0x200301c4
 800242c:	20030a44 	.word	0x20030a44

08002430 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002430:	e7fe      	b.n	8002430 <ADC1_IRQHandler>
	...

08002434 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800243a:	2300      	movs	r3, #0
 800243c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800243e:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <HAL_Init+0x3c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a0b      	ldr	r2, [pc, #44]	; (8002470 <HAL_Init+0x3c>)
 8002444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002448:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800244a:	2003      	movs	r0, #3
 800244c:	f000 f9c6 	bl	80027dc <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002450:	2000      	movs	r0, #0
 8002452:	f000 f80f 	bl	8002474 <HAL_InitTick>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d002      	beq.n	8002462 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	71fb      	strb	r3, [r7, #7]
 8002460:	e001      	b.n	8002466 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002462:	f7ff fd5e 	bl	8001f22 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002466:	79fb      	ldrb	r3, [r7, #7]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	58004000 	.word	0x58004000

08002474 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800247c:	2300      	movs	r3, #0
 800247e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002480:	4b17      	ldr	r3, [pc, #92]	; (80024e0 <HAL_InitTick+0x6c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d023      	beq.n	80024d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 8002488:	f002 ff92 	bl	80053b0 <HAL_RCC_GetHCLKFreq>
 800248c:	4601      	mov	r1, r0
 800248e:	4b14      	ldr	r3, [pc, #80]	; (80024e0 <HAL_InitTick+0x6c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002496:	fbb2 f3f3 	udiv	r3, r2, r3
 800249a:	fbb1 f3f3 	udiv	r3, r1, r3
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 fa16 	bl	80028d0 <HAL_SYSTICK_Config>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10f      	bne.n	80024ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b0f      	cmp	r3, #15
 80024ae:	d809      	bhi.n	80024c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024b0:	2200      	movs	r2, #0
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024b8:	f000 f9b0 	bl	800281c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024bc:	4a09      	ldr	r2, [pc, #36]	; (80024e4 <HAL_InitTick+0x70>)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	e007      	b.n	80024d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	73fb      	strb	r3, [r7, #15]
 80024c8:	e004      	b.n	80024d4 <HAL_InitTick+0x60>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	73fb      	strb	r3, [r7, #15]
 80024ce:	e001      	b.n	80024d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20000014 	.word	0x20000014
 80024e4:	20000010 	.word	0x20000010

080024e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024ec:	4b05      	ldr	r3, [pc, #20]	; (8002504 <HAL_IncTick+0x1c>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	4b05      	ldr	r3, [pc, #20]	; (8002508 <HAL_IncTick+0x20>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4413      	add	r3, r2
 80024f6:	4a03      	ldr	r2, [pc, #12]	; (8002504 <HAL_IncTick+0x1c>)
 80024f8:	6013      	str	r3, [r2, #0]
}
 80024fa:	bf00      	nop
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	200007ac 	.word	0x200007ac
 8002508:	20000014 	.word	0x20000014

0800250c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  return uwTick;
 8002510:	4b03      	ldr	r3, [pc, #12]	; (8002520 <HAL_GetTick+0x14>)
 8002512:	681b      	ldr	r3, [r3, #0]
}
 8002514:	4618      	mov	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	200007ac 	.word	0x200007ac

08002524 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002528:	4b03      	ldr	r3, [pc, #12]	; (8002538 <HAL_GetTickPrio+0x14>)
 800252a:	681b      	ldr	r3, [r3, #0]
}
 800252c:	4618      	mov	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	20000010 	.word	0x20000010

0800253c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8002544:	f7ff ffe2 	bl	800250c <HAL_GetTick>
 8002548:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002554:	d004      	beq.n	8002560 <HAL_Delay+0x24>
    {
      wait += (uint32_t)(uwTickFreq);
 8002556:	4b09      	ldr	r3, [pc, #36]	; (800257c <HAL_Delay+0x40>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	4413      	add	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8002560:	bf00      	nop
 8002562:	f7ff ffd3 	bl	800250c <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	429a      	cmp	r2, r3
 8002570:	d8f7      	bhi.n	8002562 <HAL_Delay+0x26>
    {
    }
  }
 8002572:	bf00      	nop
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20000014 	.word	0x20000014

08002580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002590:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800259c:	4013      	ands	r3, r2
 800259e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025b2:	4a04      	ldr	r2, [pc, #16]	; (80025c4 <__NVIC_SetPriorityGrouping+0x44>)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	60d3      	str	r3, [r2, #12]
}
 80025b8:	bf00      	nop
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025cc:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <__NVIC_GetPriorityGrouping+0x18>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	0a1b      	lsrs	r3, r3, #8
 80025d2:	f003 0307 	and.w	r3, r3, #7
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	db0b      	blt.n	800260e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	f003 021f 	and.w	r2, r3, #31
 80025fc:	4907      	ldr	r1, [pc, #28]	; (800261c <__NVIC_EnableIRQ+0x38>)
 80025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002602:	095b      	lsrs	r3, r3, #5
 8002604:	2001      	movs	r0, #1
 8002606:	fa00 f202 	lsl.w	r2, r0, r2
 800260a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	e000e100 	.word	0xe000e100

08002620 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800262a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262e:	2b00      	cmp	r3, #0
 8002630:	db10      	blt.n	8002654 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	f003 021f 	and.w	r2, r3, #31
 8002638:	4909      	ldr	r1, [pc, #36]	; (8002660 <__NVIC_DisableIRQ+0x40>)
 800263a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263e:	095b      	lsrs	r3, r3, #5
 8002640:	2001      	movs	r0, #1
 8002642:	fa00 f202 	lsl.w	r2, r0, r2
 8002646:	3320      	adds	r3, #32
 8002648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800264c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002650:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	e000e100 	.word	0xe000e100

08002664 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	2b00      	cmp	r3, #0
 8002674:	db0c      	blt.n	8002690 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	f003 021f 	and.w	r2, r3, #31
 800267c:	4907      	ldr	r1, [pc, #28]	; (800269c <__NVIC_SetPendingIRQ+0x38>)
 800267e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002682:	095b      	lsrs	r3, r3, #5
 8002684:	2001      	movs	r0, #1
 8002686:	fa00 f202 	lsl.w	r2, r0, r2
 800268a:	3340      	adds	r3, #64	; 0x40
 800268c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	e000e100 	.word	0xe000e100

080026a0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	db0c      	blt.n	80026cc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	f003 021f 	and.w	r2, r3, #31
 80026b8:	4907      	ldr	r1, [pc, #28]	; (80026d8 <__NVIC_ClearPendingIRQ+0x38>)
 80026ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026be:	095b      	lsrs	r3, r3, #5
 80026c0:	2001      	movs	r0, #1
 80026c2:	fa00 f202 	lsl.w	r2, r0, r2
 80026c6:	3360      	adds	r3, #96	; 0x60
 80026c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	e000e100 	.word	0xe000e100

080026dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	6039      	str	r1, [r7, #0]
 80026e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	db0a      	blt.n	8002706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	490c      	ldr	r1, [pc, #48]	; (8002728 <__NVIC_SetPriority+0x4c>)
 80026f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fa:	0112      	lsls	r2, r2, #4
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	440b      	add	r3, r1
 8002700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002704:	e00a      	b.n	800271c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	b2da      	uxtb	r2, r3
 800270a:	4908      	ldr	r1, [pc, #32]	; (800272c <__NVIC_SetPriority+0x50>)
 800270c:	79fb      	ldrb	r3, [r7, #7]
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	3b04      	subs	r3, #4
 8002714:	0112      	lsls	r2, r2, #4
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	440b      	add	r3, r1
 800271a:	761a      	strb	r2, [r3, #24]
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	e000e100 	.word	0xe000e100
 800272c:	e000ed00 	.word	0xe000ed00

08002730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002730:	b480      	push	{r7}
 8002732:	b089      	sub	sp, #36	; 0x24
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f1c3 0307 	rsb	r3, r3, #7
 800274a:	2b04      	cmp	r3, #4
 800274c:	bf28      	it	cs
 800274e:	2304      	movcs	r3, #4
 8002750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	3304      	adds	r3, #4
 8002756:	2b06      	cmp	r3, #6
 8002758:	d902      	bls.n	8002760 <NVIC_EncodePriority+0x30>
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	3b03      	subs	r3, #3
 800275e:	e000      	b.n	8002762 <NVIC_EncodePriority+0x32>
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43da      	mvns	r2, r3
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	401a      	ands	r2, r3
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002778:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	fa01 f303 	lsl.w	r3, r1, r3
 8002782:	43d9      	mvns	r1, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002788:	4313      	orrs	r3, r2
         );
}
 800278a:	4618      	mov	r0, r3
 800278c:	3724      	adds	r7, #36	; 0x24
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
	...

08002798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027a8:	d301      	bcc.n	80027ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027aa:	2301      	movs	r3, #1
 80027ac:	e00f      	b.n	80027ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ae:	4a0a      	ldr	r2, [pc, #40]	; (80027d8 <SysTick_Config+0x40>)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027b6:	210f      	movs	r1, #15
 80027b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027bc:	f7ff ff8e 	bl	80026dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027c0:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <SysTick_Config+0x40>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027c6:	4b04      	ldr	r3, [pc, #16]	; (80027d8 <SysTick_Config+0x40>)
 80027c8:	2207      	movs	r2, #7
 80027ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	e000e010 	.word	0xe000e010

080027dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b07      	cmp	r3, #7
 80027e8:	d00f      	beq.n	800280a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b06      	cmp	r3, #6
 80027ee:	d00c      	beq.n	800280a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b05      	cmp	r3, #5
 80027f4:	d009      	beq.n	800280a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d006      	beq.n	800280a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b03      	cmp	r3, #3
 8002800:	d003      	beq.n	800280a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002802:	218d      	movs	r1, #141	; 0x8d
 8002804:	4804      	ldr	r0, [pc, #16]	; (8002818 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002806:	f7ff f867 	bl	80018d8 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7ff feb8 	bl	8002580 <__NVIC_SetPriorityGrouping>
}
 8002810:	bf00      	nop
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	0800ec84 	.word	0x0800ec84

0800281c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
 8002828:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b0f      	cmp	r3, #15
 800282e:	d903      	bls.n	8002838 <HAL_NVIC_SetPriority+0x1c>
 8002830:	21a5      	movs	r1, #165	; 0xa5
 8002832:	480e      	ldr	r0, [pc, #56]	; (800286c <HAL_NVIC_SetPriority+0x50>)
 8002834:	f7ff f850 	bl	80018d8 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	2b0f      	cmp	r3, #15
 800283c:	d903      	bls.n	8002846 <HAL_NVIC_SetPriority+0x2a>
 800283e:	21a6      	movs	r1, #166	; 0xa6
 8002840:	480a      	ldr	r0, [pc, #40]	; (800286c <HAL_NVIC_SetPriority+0x50>)
 8002842:	f7ff f849 	bl	80018d8 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8002846:	f7ff febf 	bl	80025c8 <__NVIC_GetPriorityGrouping>
 800284a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	68b9      	ldr	r1, [r7, #8]
 8002850:	6978      	ldr	r0, [r7, #20]
 8002852:	f7ff ff6d 	bl	8002730 <NVIC_EncodePriority>
 8002856:	4602      	mov	r2, r0
 8002858:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800285c:	4611      	mov	r1, r2
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff ff3c 	bl	80026dc <__NVIC_SetPriority>
}
 8002864:	bf00      	nop
 8002866:	3718      	adds	r7, #24
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	0800ec84 	.word	0x0800ec84

08002870 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800287a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287e:	2b00      	cmp	r3, #0
 8002880:	da03      	bge.n	800288a <HAL_NVIC_EnableIRQ+0x1a>
 8002882:	21b7      	movs	r1, #183	; 0xb7
 8002884:	4805      	ldr	r0, [pc, #20]	; (800289c <HAL_NVIC_EnableIRQ+0x2c>)
 8002886:	f7ff f827 	bl	80018d8 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800288a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff fea8 	bl	80025e4 <__NVIC_EnableIRQ>
}
 8002894:	bf00      	nop
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	0800ec84 	.word	0x0800ec84

080028a0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80028aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	da03      	bge.n	80028ba <HAL_NVIC_DisableIRQ+0x1a>
 80028b2:	21c7      	movs	r1, #199	; 0xc7
 80028b4:	4805      	ldr	r0, [pc, #20]	; (80028cc <HAL_NVIC_DisableIRQ+0x2c>)
 80028b6:	f7ff f80f 	bl	80018d8 <assert_failed>
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80028ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff feae 	bl	8002620 <__NVIC_DisableIRQ>
}
 80028c4:	bf00      	nop
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	0800ec84 	.word	0x0800ec84

080028d0 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f7ff ff5d 	bl	8002798 <SysTick_Config>
 80028de:	4603      	mov	r3, r0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80028f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	da04      	bge.n	8002904 <HAL_NVIC_SetPendingIRQ+0x1c>
 80028fa:	f44f 7194 	mov.w	r1, #296	; 0x128
 80028fe:	4806      	ldr	r0, [pc, #24]	; (8002918 <HAL_NVIC_SetPendingIRQ+0x30>)
 8002900:	f7fe ffea 	bl	80018d8 <assert_failed>
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff feab 	bl	8002664 <__NVIC_SetPendingIRQ>
}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	0800ec84 	.word	0x0800ec84

0800291c <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	2b00      	cmp	r3, #0
 800292c:	da04      	bge.n	8002938 <HAL_NVIC_ClearPendingIRQ+0x1c>
 800292e:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8002932:	4806      	ldr	r0, [pc, #24]	; (800294c <HAL_NVIC_ClearPendingIRQ+0x30>)
 8002934:	f7fe ffd0 	bl	80018d8 <assert_failed>
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff feaf 	bl	80026a0 <__NVIC_ClearPendingIRQ>
}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	0800ec84 	.word	0x0800ec84

08002950 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800295a:	2300      	movs	r3, #0
 800295c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002964:	d017      	beq.n	8002996 <HAL_GPIO_Init+0x46>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a39      	ldr	r2, [pc, #228]	; (8002a50 <HAL_GPIO_Init+0x100>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d013      	beq.n	8002996 <HAL_GPIO_Init+0x46>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a38      	ldr	r2, [pc, #224]	; (8002a54 <HAL_GPIO_Init+0x104>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d00f      	beq.n	8002996 <HAL_GPIO_Init+0x46>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a37      	ldr	r2, [pc, #220]	; (8002a58 <HAL_GPIO_Init+0x108>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d00b      	beq.n	8002996 <HAL_GPIO_Init+0x46>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a36      	ldr	r2, [pc, #216]	; (8002a5c <HAL_GPIO_Init+0x10c>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d007      	beq.n	8002996 <HAL_GPIO_Init+0x46>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a35      	ldr	r2, [pc, #212]	; (8002a60 <HAL_GPIO_Init+0x110>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d003      	beq.n	8002996 <HAL_GPIO_Init+0x46>
 800298e:	21b1      	movs	r1, #177	; 0xb1
 8002990:	4834      	ldr	r0, [pc, #208]	; (8002a64 <HAL_GPIO_Init+0x114>)
 8002992:	f7fe ffa1 	bl	80018d8 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	b29b      	uxth	r3, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	d005      	beq.n	80029ac <HAL_GPIO_Init+0x5c>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	0c1b      	lsrs	r3, r3, #16
 80029a6:	041b      	lsls	r3, r3, #16
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <HAL_GPIO_Init+0x64>
 80029ac:	21b2      	movs	r1, #178	; 0xb2
 80029ae:	482d      	ldr	r0, [pc, #180]	; (8002a64 <HAL_GPIO_Init+0x114>)
 80029b0:	f7fe ff92 	bl	80018d8 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d035      	beq.n	8002a28 <HAL_GPIO_Init+0xd8>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d031      	beq.n	8002a28 <HAL_GPIO_Init+0xd8>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b11      	cmp	r3, #17
 80029ca:	d02d      	beq.n	8002a28 <HAL_GPIO_Init+0xd8>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d029      	beq.n	8002a28 <HAL_GPIO_Init+0xd8>
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	2b12      	cmp	r3, #18
 80029da:	d025      	beq.n	8002a28 <HAL_GPIO_Init+0xd8>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	4a21      	ldr	r2, [pc, #132]	; (8002a68 <HAL_GPIO_Init+0x118>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d020      	beq.n	8002a28 <HAL_GPIO_Init+0xd8>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	4a20      	ldr	r2, [pc, #128]	; (8002a6c <HAL_GPIO_Init+0x11c>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d01b      	beq.n	8002a28 <HAL_GPIO_Init+0xd8>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	4a1e      	ldr	r2, [pc, #120]	; (8002a70 <HAL_GPIO_Init+0x120>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d016      	beq.n	8002a28 <HAL_GPIO_Init+0xd8>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	4a1d      	ldr	r2, [pc, #116]	; (8002a74 <HAL_GPIO_Init+0x124>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d011      	beq.n	8002a28 <HAL_GPIO_Init+0xd8>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	4a1b      	ldr	r2, [pc, #108]	; (8002a78 <HAL_GPIO_Init+0x128>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d00c      	beq.n	8002a28 <HAL_GPIO_Init+0xd8>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	4a1a      	ldr	r2, [pc, #104]	; (8002a7c <HAL_GPIO_Init+0x12c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d007      	beq.n	8002a28 <HAL_GPIO_Init+0xd8>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2b03      	cmp	r3, #3
 8002a1e:	d003      	beq.n	8002a28 <HAL_GPIO_Init+0xd8>
 8002a20:	21b3      	movs	r1, #179	; 0xb3
 8002a22:	4810      	ldr	r0, [pc, #64]	; (8002a64 <HAL_GPIO_Init+0x114>)
 8002a24:	f7fe ff58 	bl	80018d8 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 81ba 	beq.w	8002da6 <HAL_GPIO_Init+0x456>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	f000 81b5 	beq.w	8002da6 <HAL_GPIO_Init+0x456>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	f000 81b0 	beq.w	8002da6 <HAL_GPIO_Init+0x456>
 8002a46:	21b4      	movs	r1, #180	; 0xb4
 8002a48:	4806      	ldr	r0, [pc, #24]	; (8002a64 <HAL_GPIO_Init+0x114>)
 8002a4a:	f7fe ff45 	bl	80018d8 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a4e:	e1aa      	b.n	8002da6 <HAL_GPIO_Init+0x456>
 8002a50:	48000400 	.word	0x48000400
 8002a54:	48000800 	.word	0x48000800
 8002a58:	48000c00 	.word	0x48000c00
 8002a5c:	48001000 	.word	0x48001000
 8002a60:	48001c00 	.word	0x48001c00
 8002a64:	0800ecc0 	.word	0x0800ecc0
 8002a68:	10110000 	.word	0x10110000
 8002a6c:	10210000 	.word	0x10210000
 8002a70:	10310000 	.word	0x10310000
 8002a74:	10120000 	.word	0x10120000
 8002a78:	10220000 	.word	0x10220000
 8002a7c:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	2101      	movs	r1, #1
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 8184 	beq.w	8002da0 <HAL_GPIO_Init+0x450>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d003      	beq.n	8002aa8 <HAL_GPIO_Init+0x158>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b12      	cmp	r3, #18
 8002aa6:	d147      	bne.n	8002b38 <HAL_GPIO_Init+0x1e8>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002aae:	d017      	beq.n	8002ae0 <HAL_GPIO_Init+0x190>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a80      	ldr	r2, [pc, #512]	; (8002cb4 <HAL_GPIO_Init+0x364>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d013      	beq.n	8002ae0 <HAL_GPIO_Init+0x190>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a7f      	ldr	r2, [pc, #508]	; (8002cb8 <HAL_GPIO_Init+0x368>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d00f      	beq.n	8002ae0 <HAL_GPIO_Init+0x190>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a7e      	ldr	r2, [pc, #504]	; (8002cbc <HAL_GPIO_Init+0x36c>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d00b      	beq.n	8002ae0 <HAL_GPIO_Init+0x190>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a7d      	ldr	r2, [pc, #500]	; (8002cc0 <HAL_GPIO_Init+0x370>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d007      	beq.n	8002ae0 <HAL_GPIO_Init+0x190>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a7c      	ldr	r2, [pc, #496]	; (8002cc4 <HAL_GPIO_Init+0x374>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d003      	beq.n	8002ae0 <HAL_GPIO_Init+0x190>
 8002ad8:	21c3      	movs	r1, #195	; 0xc3
 8002ada:	487b      	ldr	r0, [pc, #492]	; (8002cc8 <HAL_GPIO_Init+0x378>)
 8002adc:	f7fe fefc 	bl	80018d8 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	2b0f      	cmp	r3, #15
 8002ae6:	d903      	bls.n	8002af0 <HAL_GPIO_Init+0x1a0>
 8002ae8:	21c4      	movs	r1, #196	; 0xc4
 8002aea:	4877      	ldr	r0, [pc, #476]	; (8002cc8 <HAL_GPIO_Init+0x378>)
 8002aec:	f7fe fef4 	bl	80018d8 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	08da      	lsrs	r2, r3, #3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3208      	adds	r2, #8
 8002af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002afc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	220f      	movs	r2, #15
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	4013      	ands	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	691a      	ldr	r2, [r3, #16]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	08da      	lsrs	r2, r3, #3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3208      	adds	r2, #8
 8002b32:	6939      	ldr	r1, [r7, #16]
 8002b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	2203      	movs	r2, #3
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 0203 	and.w	r2, r3, #3
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d00b      	beq.n	8002b8c <HAL_GPIO_Init+0x23c>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d007      	beq.n	8002b8c <HAL_GPIO_Init+0x23c>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b80:	2b11      	cmp	r3, #17
 8002b82:	d003      	beq.n	8002b8c <HAL_GPIO_Init+0x23c>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b12      	cmp	r3, #18
 8002b8a:	d144      	bne.n	8002c16 <HAL_GPIO_Init+0x2c6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00f      	beq.n	8002bb4 <HAL_GPIO_Init+0x264>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d00b      	beq.n	8002bb4 <HAL_GPIO_Init+0x264>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d007      	beq.n	8002bb4 <HAL_GPIO_Init+0x264>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d003      	beq.n	8002bb4 <HAL_GPIO_Init+0x264>
 8002bac:	21d8      	movs	r1, #216	; 0xd8
 8002bae:	4846      	ldr	r0, [pc, #280]	; (8002cc8 <HAL_GPIO_Init+0x378>)
 8002bb0:	f7fe fe92 	bl	80018d8 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	68da      	ldr	r2, [r3, #12]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bea:	2201      	movs	r2, #1
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	091b      	lsrs	r3, r3, #4
 8002c00:	f003 0201 	and.w	r2, r3, #1
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	2203      	movs	r2, #3
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	43db      	mvns	r3, r3
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 80a6 	beq.w	8002da0 <HAL_GPIO_Init+0x450>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002c54:	4a1d      	ldr	r2, [pc, #116]	; (8002ccc <HAL_GPIO_Init+0x37c>)
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	089b      	lsrs	r3, r3, #2
 8002c5a:	3302      	adds	r3, #2
 8002c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f003 0303 	and.w	r3, r3, #3
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	220f      	movs	r2, #15
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	4013      	ands	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c7e:	d027      	beq.n	8002cd0 <HAL_GPIO_Init+0x380>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a0c      	ldr	r2, [pc, #48]	; (8002cb4 <HAL_GPIO_Init+0x364>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d013      	beq.n	8002cb0 <HAL_GPIO_Init+0x360>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a0b      	ldr	r2, [pc, #44]	; (8002cb8 <HAL_GPIO_Init+0x368>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d00d      	beq.n	8002cac <HAL_GPIO_Init+0x35c>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a0a      	ldr	r2, [pc, #40]	; (8002cbc <HAL_GPIO_Init+0x36c>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d007      	beq.n	8002ca8 <HAL_GPIO_Init+0x358>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a09      	ldr	r2, [pc, #36]	; (8002cc0 <HAL_GPIO_Init+0x370>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d101      	bne.n	8002ca4 <HAL_GPIO_Init+0x354>
 8002ca0:	2304      	movs	r3, #4
 8002ca2:	e016      	b.n	8002cd2 <HAL_GPIO_Init+0x382>
 8002ca4:	2307      	movs	r3, #7
 8002ca6:	e014      	b.n	8002cd2 <HAL_GPIO_Init+0x382>
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e012      	b.n	8002cd2 <HAL_GPIO_Init+0x382>
 8002cac:	2302      	movs	r3, #2
 8002cae:	e010      	b.n	8002cd2 <HAL_GPIO_Init+0x382>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e00e      	b.n	8002cd2 <HAL_GPIO_Init+0x382>
 8002cb4:	48000400 	.word	0x48000400
 8002cb8:	48000800 	.word	0x48000800
 8002cbc:	48000c00 	.word	0x48000c00
 8002cc0:	48001000 	.word	0x48001000
 8002cc4:	48001c00 	.word	0x48001c00
 8002cc8:	0800ecc0 	.word	0x0800ecc0
 8002ccc:	40010000 	.word	0x40010000
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	f002 0203 	and.w	r2, r2, #3
 8002cd8:	0092      	lsls	r2, r2, #2
 8002cda:	4093      	lsls	r3, r2
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ce2:	4937      	ldr	r1, [pc, #220]	; (8002dc0 <HAL_GPIO_Init+0x470>)
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	089b      	lsrs	r3, r3, #2
 8002ce8:	3302      	adds	r3, #2
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002cf0:	4b34      	ldr	r3, [pc, #208]	; (8002dc4 <HAL_GPIO_Init+0x474>)
 8002cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_GPIO_Init+0x3c6>
        {
          temp |= iocurrent;
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d16:	4a2b      	ldr	r2, [pc, #172]	; (8002dc4 <HAL_GPIO_Init+0x474>)
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002d1e:	4b29      	ldr	r3, [pc, #164]	; (8002dc4 <HAL_GPIO_Init+0x474>)
 8002d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <HAL_GPIO_Init+0x3f4>
        {
          temp |= iocurrent;
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d44:	4a1f      	ldr	r2, [pc, #124]	; (8002dc4 <HAL_GPIO_Init+0x474>)
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d4c:	4b1d      	ldr	r3, [pc, #116]	; (8002dc4 <HAL_GPIO_Init+0x474>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	43db      	mvns	r3, r3
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_GPIO_Init+0x420>
        {
          temp |= iocurrent;
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d70:	4a14      	ldr	r2, [pc, #80]	; (8002dc4 <HAL_GPIO_Init+0x474>)
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002d76:	4b13      	ldr	r3, [pc, #76]	; (8002dc4 <HAL_GPIO_Init+0x474>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	4013      	ands	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_GPIO_Init+0x44a>
        {
          temp |= iocurrent;
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d9a:	4a0a      	ldr	r2, [pc, #40]	; (8002dc4 <HAL_GPIO_Init+0x474>)
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	3301      	adds	r3, #1
 8002da4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	fa22 f303 	lsr.w	r3, r2, r3
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f47f ae65 	bne.w	8002a80 <HAL_GPIO_Init+0x130>
  }
}
 8002db6:	bf00      	nop
 8002db8:	3718      	adds	r7, #24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40010000 	.word	0x40010000
 8002dc4:	58000800 	.word	0x58000800

08002dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	807b      	strh	r3, [r7, #2]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002dd8:	887b      	ldrh	r3, [r7, #2]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d004      	beq.n	8002de8 <HAL_GPIO_WritePin+0x20>
 8002dde:	887b      	ldrh	r3, [r7, #2]
 8002de0:	0c1b      	lsrs	r3, r3, #16
 8002de2:	041b      	lsls	r3, r3, #16
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d004      	beq.n	8002df2 <HAL_GPIO_WritePin+0x2a>
 8002de8:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8002dec:	480d      	ldr	r0, [pc, #52]	; (8002e24 <HAL_GPIO_WritePin+0x5c>)
 8002dee:	f7fe fd73 	bl	80018d8 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002df2:	787b      	ldrb	r3, [r7, #1]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d007      	beq.n	8002e08 <HAL_GPIO_WritePin+0x40>
 8002df8:	787b      	ldrb	r3, [r7, #1]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d004      	beq.n	8002e08 <HAL_GPIO_WritePin+0x40>
 8002dfe:	f240 119b 	movw	r1, #411	; 0x19b
 8002e02:	4808      	ldr	r0, [pc, #32]	; (8002e24 <HAL_GPIO_WritePin+0x5c>)
 8002e04:	f7fe fd68 	bl	80018d8 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002e08:	787b      	ldrb	r3, [r7, #1]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e0e:	887a      	ldrh	r2, [r7, #2]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e14:	e002      	b.n	8002e1c <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e16:	887a      	ldrh	r2, [r7, #2]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e1c:	bf00      	nop
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	0800ecc0 	.word	0x0800ecc0

08002e28 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002e34:	887b      	ldrh	r3, [r7, #2]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d004      	beq.n	8002e44 <HAL_GPIO_TogglePin+0x1c>
 8002e3a:	887b      	ldrh	r3, [r7, #2]
 8002e3c:	0c1b      	lsrs	r3, r3, #16
 8002e3e:	041b      	lsls	r3, r3, #16
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d004      	beq.n	8002e4e <HAL_GPIO_TogglePin+0x26>
 8002e44:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8002e48:	4809      	ldr	r0, [pc, #36]	; (8002e70 <HAL_GPIO_TogglePin+0x48>)
 8002e4a:	f7fe fd45 	bl	80018d8 <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	695a      	ldr	r2, [r3, #20]
 8002e52:	887b      	ldrh	r3, [r7, #2]
 8002e54:	4013      	ands	r3, r2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_GPIO_TogglePin+0x3a>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e5a:	887a      	ldrh	r2, [r7, #2]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002e60:	e002      	b.n	8002e68 <HAL_GPIO_TogglePin+0x40>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e62:	887a      	ldrh	r2, [r7, #2]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	619a      	str	r2, [r3, #24]
}
 8002e68:	bf00      	nop
 8002e6a:	3708      	adds	r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	0800ecc0 	.word	0x0800ecc0

08002e74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e7e:	4b08      	ldr	r3, [pc, #32]	; (8002ea0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	88fb      	ldrh	r3, [r7, #6]
 8002e84:	4013      	ands	r3, r2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d006      	beq.n	8002e98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e8a:	4a05      	ldr	r2, [pc, #20]	; (8002ea0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e8c:	88fb      	ldrh	r3, [r7, #6]
 8002e8e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e90:	88fb      	ldrh	r3, [r7, #6]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7fe fd08 	bl	80018a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e98:	bf00      	nop
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	58000800 	.word	0x58000800

08002ea4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ea6:	b08b      	sub	sp, #44	; 0x2c
 8002ea8:	af06      	add	r7, sp, #24
 8002eaa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e0b6      	b.n	8003024 <HAL_PCD_Init+0x180>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a5c      	ldr	r2, [pc, #368]	; (800302c <HAL_PCD_Init+0x188>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d003      	beq.n	8002ec8 <HAL_PCD_Init+0x24>
 8002ec0:	2183      	movs	r1, #131	; 0x83
 8002ec2:	485b      	ldr	r0, [pc, #364]	; (8003030 <HAL_PCD_Init+0x18c>)
 8002ec4:	f7fe fd08 	bl	80018d8 <assert_failed>

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d106      	bne.n	8002ee2 <HAL_PCD_Init+0x3e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f00a ff7d 	bl	800dddc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2203      	movs	r2, #3
 8002ee6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f005 f8ea 	bl	80080c8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	73fb      	strb	r3, [r7, #15]
 8002ef8:	e035      	b.n	8002f66 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	015b      	lsls	r3, r3, #5
 8002f00:	4413      	add	r3, r2
 8002f02:	3329      	adds	r3, #41	; 0x29
 8002f04:	2201      	movs	r2, #1
 8002f06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	015b      	lsls	r3, r3, #5
 8002f0e:	4413      	add	r3, r2
 8002f10:	3328      	adds	r3, #40	; 0x28
 8002f12:	7bfa      	ldrb	r2, [r7, #15]
 8002f14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f16:	7bfb      	ldrb	r3, [r7, #15]
 8002f18:	7bfa      	ldrb	r2, [r7, #15]
 8002f1a:	b291      	uxth	r1, r2
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	015b      	lsls	r3, r3, #5
 8002f20:	4413      	add	r3, r2
 8002f22:	3336      	adds	r3, #54	; 0x36
 8002f24:	460a      	mov	r2, r1
 8002f26:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	015b      	lsls	r3, r3, #5
 8002f2e:	4413      	add	r3, r2
 8002f30:	332b      	adds	r3, #43	; 0x2b
 8002f32:	2200      	movs	r2, #0
 8002f34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	015b      	lsls	r3, r3, #5
 8002f3c:	4413      	add	r3, r2
 8002f3e:	3338      	adds	r3, #56	; 0x38
 8002f40:	2200      	movs	r2, #0
 8002f42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	015b      	lsls	r3, r3, #5
 8002f4a:	4413      	add	r3, r2
 8002f4c:	333c      	adds	r3, #60	; 0x3c
 8002f4e:	2200      	movs	r2, #0
 8002f50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f52:	7bfb      	ldrb	r3, [r7, #15]
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	3302      	adds	r3, #2
 8002f58:	015b      	lsls	r3, r3, #5
 8002f5a:	4413      	add	r3, r2
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f60:	7bfb      	ldrb	r3, [r7, #15]
 8002f62:	3301      	adds	r3, #1
 8002f64:	73fb      	strb	r3, [r7, #15]
 8002f66:	7bfa      	ldrb	r2, [r7, #15]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d3c4      	bcc.n	8002efa <HAL_PCD_Init+0x56>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f70:	2300      	movs	r3, #0
 8002f72:	73fb      	strb	r3, [r7, #15]
 8002f74:	e031      	b.n	8002fda <HAL_PCD_Init+0x136>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f76:	7bfb      	ldrb	r3, [r7, #15]
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	015b      	lsls	r3, r3, #5
 8002f7c:	4413      	add	r3, r2
 8002f7e:	f203 1329 	addw	r3, r3, #297	; 0x129
 8002f82:	2200      	movs	r2, #0
 8002f84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f86:	7bfb      	ldrb	r3, [r7, #15]
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	015b      	lsls	r3, r3, #5
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002f92:	7bfa      	ldrb	r2, [r7, #15]
 8002f94:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	015b      	lsls	r3, r3, #5
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002fa6:	7bfb      	ldrb	r3, [r7, #15]
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	015b      	lsls	r3, r3, #5
 8002fac:	4413      	add	r3, r2
 8002fae:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	015b      	lsls	r3, r3, #5
 8002fbc:	4413      	add	r3, r2
 8002fbe:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	330a      	adds	r3, #10
 8002fcc:	015b      	lsls	r3, r3, #5
 8002fce:	4413      	add	r3, r2
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	73fb      	strb	r3, [r7, #15]
 8002fda:	7bfa      	ldrb	r2, [r7, #15]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d3c8      	bcc.n	8002f76 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	603b      	str	r3, [r7, #0]
 8002fea:	687e      	ldr	r6, [r7, #4]
 8002fec:	466d      	mov	r5, sp
 8002fee:	f106 0410 	add.w	r4, r6, #16
 8002ff2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ff4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ff6:	6823      	ldr	r3, [r4, #0]
 8002ff8:	602b      	str	r3, [r5, #0]
 8002ffa:	1d33      	adds	r3, r6, #4
 8002ffc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ffe:	6838      	ldr	r0, [r7, #0]
 8003000:	f005 f87f 	bl	8008102 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	69db      	ldr	r3, [r3, #28]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d102      	bne.n	8003022 <HAL_PCD_Init+0x17e>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 fe40 	bl	8003ca2 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800302c:	40006800 	.word	0x40006800
 8003030:	0800ecfc 	.word	0x0800ecfc

08003034 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003042:	2b01      	cmp	r3, #1
 8003044:	d101      	bne.n	800304a <HAL_PCD_Start+0x16>
 8003046:	2302      	movs	r3, #2
 8003048:	e012      	b.n	8003070 <HAL_PCD_Start+0x3c>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f006 f88e 	bl	8009178 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4618      	mov	r0, r3
 8003062:	f005 f819 	bl	8008098 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f006 f88e 	bl	80091a6 <USB_ReadInterrupts>
 800308a:	4603      	mov	r3, r0
 800308c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003090:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003094:	d102      	bne.n	800309c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 fb3e 	bl	8003718 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f006 f880 	bl	80091a6 <USB_ReadInterrupts>
 80030a6:	4603      	mov	r3, r0
 80030a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030b0:	d112      	bne.n	80030d8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030c4:	b292      	uxth	r2, r2
 80030c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f00a ff0d 	bl	800deea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80030d0:	2100      	movs	r1, #0
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f929 	bl	800332a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f006 f862 	bl	80091a6 <USB_ReadInterrupts>
 80030e2:	4603      	mov	r3, r0
 80030e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030ec:	d10b      	bne.n	8003106 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003100:	b292      	uxth	r2, r2
 8003102:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f006 f84b 	bl	80091a6 <USB_ReadInterrupts>
 8003110:	4603      	mov	r3, r0
 8003112:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800311a:	d10b      	bne.n	8003134 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003124:	b29a      	uxth	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800312e:	b292      	uxth	r2, r2
 8003130:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f006 f834 	bl	80091a6 <USB_ReadInterrupts>
 800313e:	4603      	mov	r3, r0
 8003140:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003148:	d133      	bne.n	80031b2 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003152:	b29a      	uxth	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0204 	bic.w	r2, r2, #4
 800315c:	b292      	uxth	r2, r2
 800315e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800316a:	b29a      	uxth	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0208 	bic.w	r2, r2, #8
 8003174:	b292      	uxth	r2, r2
 8003176:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8003180:	2b01      	cmp	r3, #1
 8003182:	d107      	bne.n	8003194 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800318c:	2100      	movs	r1, #0
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f00b f89e 	bl	800e2d0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f00a fee1 	bl	800df5c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031ac:	b292      	uxth	r2, r2
 80031ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f005 fff5 	bl	80091a6 <USB_ReadInterrupts>
 80031bc:	4603      	mov	r3, r0
 80031be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031c6:	d131      	bne.n	800322c <HAL_PCD_IRQHandler+0x1b4>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0208 	orr.w	r2, r2, #8
 80031da:	b292      	uxth	r2, r2
 80031dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031f2:	b292      	uxth	r2, r2
 80031f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003200:	b29a      	uxth	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0204 	orr.w	r2, r2, #4
 800320a:	b292      	uxth	r2, r2
 800320c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f005 ffc6 	bl	80091a6 <USB_ReadInterrupts>
 800321a:	4603      	mov	r3, r0
 800321c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003224:	d002      	beq.n	800322c <HAL_PCD_IRQHandler+0x1b4>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f00a fe7e 	bl	800df28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f005 ffb8 	bl	80091a6 <USB_ReadInterrupts>
 8003236:	4603      	mov	r3, r0
 8003238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800323c:	2b80      	cmp	r3, #128	; 0x80
 800323e:	d13f      	bne.n	80032c0 <HAL_PCD_IRQHandler+0x248>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003248:	b29a      	uxth	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003252:	b292      	uxth	r2, r2
 8003254:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800325e:	2b00      	cmp	r3, #0
 8003260:	d12b      	bne.n	80032ba <HAL_PCD_IRQHandler+0x242>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800326a:	b29a      	uxth	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f042 0204 	orr.w	r2, r2, #4
 8003274:	b292      	uxth	r2, r2
 8003276:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003282:	b29a      	uxth	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f042 0208 	orr.w	r2, r2, #8
 800328c:	b292      	uxth	r2, r2
 800328e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	089b      	lsrs	r3, r3, #2
 80032a6:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80032b0:	2101      	movs	r1, #1
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f00b f80c 	bl	800e2d0 <HAL_PCDEx_LPM_Callback>
 80032b8:	e002      	b.n	80032c0 <HAL_PCD_IRQHandler+0x248>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f00a fe34 	bl	800df28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f005 ff6e 	bl	80091a6 <USB_ReadInterrupts>
 80032ca:	4603      	mov	r3, r0
 80032cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032d4:	d10e      	bne.n	80032f4 <HAL_PCD_IRQHandler+0x27c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032de:	b29a      	uxth	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032e8:	b292      	uxth	r2, r2
 80032ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f00a fded 	bl	800dece <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f005 ff54 	bl	80091a6 <USB_ReadInterrupts>
 80032fe:	4603      	mov	r3, r0
 8003300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003308:	d10b      	bne.n	8003322 <HAL_PCD_IRQHandler+0x2aa>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003312:	b29a      	uxth	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800331c:	b292      	uxth	r2, r2
 800331e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003322:	bf00      	nop
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b082      	sub	sp, #8
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
 8003332:	460b      	mov	r3, r1
 8003334:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800333c:	2b01      	cmp	r3, #1
 800333e:	d101      	bne.n	8003344 <HAL_PCD_SetAddress+0x1a>
 8003340:	2302      	movs	r3, #2
 8003342:	e013      	b.n	800336c <HAL_PCD_SetAddress+0x42>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	78fa      	ldrb	r2, [r7, #3]
 8003350:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	78fa      	ldrb	r2, [r7, #3]
 800335a:	4611      	mov	r1, r2
 800335c:	4618      	mov	r0, r3
 800335e:	f005 fef7 	bl	8009150 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	4608      	mov	r0, r1
 800337e:	4611      	mov	r1, r2
 8003380:	461a      	mov	r2, r3
 8003382:	4603      	mov	r3, r0
 8003384:	70fb      	strb	r3, [r7, #3]
 8003386:	460b      	mov	r3, r1
 8003388:	803b      	strh	r3, [r7, #0]
 800338a:	4613      	mov	r3, r2
 800338c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800338e:	2300      	movs	r3, #0
 8003390:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003392:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003396:	2b00      	cmp	r3, #0
 8003398:	da0b      	bge.n	80033b2 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800339a:	78fb      	ldrb	r3, [r7, #3]
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	015b      	lsls	r3, r3, #5
 80033a2:	3328      	adds	r3, #40	; 0x28
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	4413      	add	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2201      	movs	r2, #1
 80033ae:	705a      	strb	r2, [r3, #1]
 80033b0:	e00b      	b.n	80033ca <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033b2:	78fb      	ldrb	r3, [r7, #3]
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	015b      	lsls	r3, r3, #5
 80033ba:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	4413      	add	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80033ca:	78fb      	ldrb	r3, [r7, #3]
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80033d6:	883a      	ldrh	r2, [r7, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	78ba      	ldrb	r2, [r7, #2]
 80033e0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	785b      	ldrb	r3, [r3, #1]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d004      	beq.n	80033f4 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80033f4:	78bb      	ldrb	r3, [r7, #2]
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d102      	bne.n	8003400 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <HAL_PCD_EP_Open+0x9a>
 800340a:	2302      	movs	r3, #2
 800340c:	e00e      	b.n	800342c <HAL_PCD_EP_Open+0xb8>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68f9      	ldr	r1, [r7, #12]
 800341c:	4618      	mov	r0, r3
 800341e:	f004 fe95 	bl	800814c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 800342a:	7afb      	ldrb	r3, [r7, #11]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	460b      	mov	r3, r1
 800343e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003440:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003444:	2b00      	cmp	r3, #0
 8003446:	da0b      	bge.n	8003460 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003448:	78fb      	ldrb	r3, [r7, #3]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	015b      	lsls	r3, r3, #5
 8003450:	3328      	adds	r3, #40	; 0x28
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	4413      	add	r3, r2
 8003456:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2201      	movs	r2, #1
 800345c:	705a      	strb	r2, [r3, #1]
 800345e:	e00b      	b.n	8003478 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003460:	78fb      	ldrb	r3, [r7, #3]
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	015b      	lsls	r3, r3, #5
 8003468:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	4413      	add	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003478:	78fb      	ldrb	r3, [r7, #3]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	b2da      	uxtb	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800348a:	2b01      	cmp	r3, #1
 800348c:	d101      	bne.n	8003492 <HAL_PCD_EP_Close+0x5e>
 800348e:	2302      	movs	r3, #2
 8003490:	e00e      	b.n	80034b0 <HAL_PCD_EP_Close+0x7c>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68f9      	ldr	r1, [r7, #12]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f005 f93d 	bl	8008720 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	607a      	str	r2, [r7, #4]
 80034c2:	603b      	str	r3, [r7, #0]
 80034c4:	460b      	mov	r3, r1
 80034c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034c8:	7afb      	ldrb	r3, [r7, #11]
 80034ca:	f003 0307 	and.w	r3, r3, #7
 80034ce:	015b      	lsls	r3, r3, #5
 80034d0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	4413      	add	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	2200      	movs	r2, #0
 80034ea:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	2200      	movs	r2, #0
 80034f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034f2:	7afb      	ldrb	r3, [r7, #11]
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034fe:	7afb      	ldrb	r3, [r7, #11]
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	2b00      	cmp	r3, #0
 8003506:	d106      	bne.n	8003516 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6979      	ldr	r1, [r7, #20]
 800350e:	4618      	mov	r0, r3
 8003510:	f005 fa9c 	bl	8008a4c <USB_EPStartXfer>
 8003514:	e005      	b.n	8003522 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6979      	ldr	r1, [r7, #20]
 800351c:	4618      	mov	r0, r3
 800351e:	f005 fa95 	bl	8008a4c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	460b      	mov	r3, r1
 8003536:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003538:	78fb      	ldrb	r3, [r7, #3]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	330a      	adds	r3, #10
 8003542:	015b      	lsls	r3, r3, #5
 8003544:	4413      	add	r3, r2
 8003546:	3304      	adds	r3, #4
 8003548:	681b      	ldr	r3, [r3, #0]
}
 800354a:	4618      	mov	r0, r3
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b086      	sub	sp, #24
 800355a:	af00      	add	r7, sp, #0
 800355c:	60f8      	str	r0, [r7, #12]
 800355e:	607a      	str	r2, [r7, #4]
 8003560:	603b      	str	r3, [r7, #0]
 8003562:	460b      	mov	r3, r1
 8003564:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003566:	7afb      	ldrb	r3, [r7, #11]
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	015b      	lsls	r3, r3, #5
 800356e:	3328      	adds	r3, #40	; 0x28
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	4413      	add	r3, r2
 8003574:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	2200      	movs	r2, #0
 8003586:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	2201      	movs	r2, #1
 800358c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800358e:	7afb      	ldrb	r3, [r7, #11]
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	b2da      	uxtb	r2, r3
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800359a:	7afb      	ldrb	r3, [r7, #11]
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d106      	bne.n	80035b2 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6979      	ldr	r1, [r7, #20]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f005 fa4e 	bl	8008a4c <USB_EPStartXfer>
 80035b0:	e005      	b.n	80035be <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6979      	ldr	r1, [r7, #20]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f005 fa47 	bl	8008a4c <USB_EPStartXfer>
  }

  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	460b      	mov	r3, r1
 80035d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80035d4:	78fb      	ldrb	r3, [r7, #3]
 80035d6:	f003 0207 	and.w	r2, r3, #7
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d901      	bls.n	80035e6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e046      	b.n	8003674 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	da0b      	bge.n	8003606 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035ee:	78fb      	ldrb	r3, [r7, #3]
 80035f0:	f003 0307 	and.w	r3, r3, #7
 80035f4:	015b      	lsls	r3, r3, #5
 80035f6:	3328      	adds	r3, #40	; 0x28
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	4413      	add	r3, r2
 80035fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2201      	movs	r2, #1
 8003602:	705a      	strb	r2, [r3, #1]
 8003604:	e009      	b.n	800361a <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003606:	78fb      	ldrb	r3, [r7, #3]
 8003608:	015b      	lsls	r3, r3, #5
 800360a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	4413      	add	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2201      	movs	r2, #1
 800361e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003620:	78fb      	ldrb	r3, [r7, #3]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	b2da      	uxtb	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003632:	2b01      	cmp	r3, #1
 8003634:	d101      	bne.n	800363a <HAL_PCD_EP_SetStall+0x72>
 8003636:	2302      	movs	r3, #2
 8003638:	e01c      	b.n	8003674 <HAL_PCD_EP_SetStall+0xac>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68f9      	ldr	r1, [r7, #12]
 8003648:	4618      	mov	r0, r3
 800364a:	f005 fcab 	bl	8008fa4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800364e:	78fb      	ldrb	r3, [r7, #3]
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	2b00      	cmp	r3, #0
 8003656:	d108      	bne.n	800366a <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8003662:	4619      	mov	r1, r3
 8003664:	4610      	mov	r0, r2
 8003666:	f005 fdae 	bl	80091c6 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	460b      	mov	r3, r1
 8003686:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003688:	78fb      	ldrb	r3, [r7, #3]
 800368a:	f003 020f 	and.w	r2, r3, #15
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	429a      	cmp	r2, r3
 8003694:	d901      	bls.n	800369a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e03a      	b.n	8003710 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800369a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	da0b      	bge.n	80036ba <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036a2:	78fb      	ldrb	r3, [r7, #3]
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	015b      	lsls	r3, r3, #5
 80036aa:	3328      	adds	r3, #40	; 0x28
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	4413      	add	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2201      	movs	r2, #1
 80036b6:	705a      	strb	r2, [r3, #1]
 80036b8:	e00b      	b.n	80036d2 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036ba:	78fb      	ldrb	r3, [r7, #3]
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	015b      	lsls	r3, r3, #5
 80036c2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	4413      	add	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036d8:	78fb      	ldrb	r3, [r7, #3]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d101      	bne.n	80036f2 <HAL_PCD_EP_ClrStall+0x76>
 80036ee:	2302      	movs	r3, #2
 80036f0:	e00e      	b.n	8003710 <HAL_PCD_EP_ClrStall+0x94>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68f9      	ldr	r1, [r7, #12]
 8003700:	4618      	mov	r0, r3
 8003702:	f005 fc91 	bl	8009028 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003718:	b590      	push	{r4, r7, lr}
 800371a:	b089      	sub	sp, #36	; 0x24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003720:	e26f      	b.n	8003c02 <PCD_EP_ISR_Handler+0x4ea>
  {
    wIstr = hpcd->Instance->ISTR;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800372a:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800372c:	8afb      	ldrh	r3, [r7, #22]
 800372e:	b2db      	uxtb	r3, r3
 8003730:	f003 030f 	and.w	r3, r3, #15
 8003734:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8003736:	7d7b      	ldrb	r3, [r7, #21]
 8003738:	2b00      	cmp	r3, #0
 800373a:	f040 8137 	bne.w	80039ac <PCD_EP_ISR_Handler+0x294>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800373e:	8afb      	ldrh	r3, [r7, #22]
 8003740:	f003 0310 	and.w	r3, r3, #16
 8003744:	2b00      	cmp	r3, #0
 8003746:	d14f      	bne.n	80037e8 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	b29b      	uxth	r3, r3
 8003750:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003758:	b29c      	uxth	r4, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8003762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003766:	b29b      	uxth	r3, r3
 8003768:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	3328      	adds	r3, #40	; 0x28
 800376e:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003778:	b29b      	uxth	r3, r3
 800377a:	461a      	mov	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	4413      	add	r3, r2
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6812      	ldr	r2, [r2, #0]
 8003788:	4413      	add	r3, r2
 800378a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800378e:	881b      	ldrh	r3, [r3, #0]
 8003790:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	695a      	ldr	r2, [r3, #20]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	441a      	add	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80037a6:	2100      	movs	r1, #0
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f00a fb79 	bl	800dea0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 8223 	beq.w	8003c02 <PCD_EP_ISR_Handler+0x4ea>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f040 821e 	bne.w	8003c02 <PCD_EP_ISR_Handler+0x4ea>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	b292      	uxth	r2, r2
 80037da:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80037e6:	e20c      	b.n	8003c02 <PCD_EP_ISR_Handler+0x4ea>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80037ee:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	881b      	ldrh	r3, [r3, #0]
 80037f6:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80037f8:	8a7b      	ldrh	r3, [r7, #18]
 80037fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d031      	beq.n	8003866 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800380a:	b29b      	uxth	r3, r3
 800380c:	461a      	mov	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	4413      	add	r3, r2
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6812      	ldr	r2, [r2, #0]
 800381a:	4413      	add	r3, r2
 800381c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6818      	ldr	r0, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800383c:	b29b      	uxth	r3, r3
 800383e:	f005 fd0f 	bl	8009260 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	881b      	ldrh	r3, [r3, #0]
 8003848:	b29a      	uxth	r2, r3
 800384a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800384e:	4013      	ands	r3, r2
 8003850:	b29c      	uxth	r4, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800385a:	b292      	uxth	r2, r2
 800385c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f00a faf4 	bl	800de4c <HAL_PCD_SetupStageCallback>
 8003864:	e1cd      	b.n	8003c02 <PCD_EP_ISR_Handler+0x4ea>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003866:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800386a:	2b00      	cmp	r3, #0
 800386c:	f280 81c9 	bge.w	8003c02 <PCD_EP_ISR_Handler+0x4ea>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	881b      	ldrh	r3, [r3, #0]
 8003876:	b29a      	uxth	r2, r3
 8003878:	f640 738f 	movw	r3, #3983	; 0xf8f
 800387c:	4013      	ands	r3, r2
 800387e:	b29c      	uxth	r4, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003888:	b292      	uxth	r2, r2
 800388a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003894:	b29b      	uxth	r3, r3
 8003896:	461a      	mov	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	4413      	add	r3, r2
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6812      	ldr	r2, [r2, #0]
 80038a4:	4413      	add	r3, r2
 80038a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80038aa:	881b      	ldrh	r3, [r3, #0]
 80038ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	69db      	ldr	r3, [r3, #28]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d019      	beq.n	80038f0 <PCD_EP_ISR_Handler+0x1d8>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d015      	beq.n	80038f0 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6818      	ldr	r0, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6959      	ldr	r1, [r3, #20]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	f005 fcc3 	bl	8009260 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	695a      	ldr	r2, [r3, #20]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	441a      	add	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80038e8:	2100      	movs	r1, #0
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f00a fac0 	bl	800de70 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	461c      	mov	r4, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038fe:	b29b      	uxth	r3, r3
 8003900:	441c      	add	r4, r3
 8003902:	f204 4306 	addw	r3, r4, #1030	; 0x406
 8003906:	60bb      	str	r3, [r7, #8]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d110      	bne.n	8003932 <PCD_EP_ISR_Handler+0x21a>
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	881b      	ldrh	r3, [r3, #0]
 8003914:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003918:	b29a      	uxth	r2, r3
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	801a      	strh	r2, [r3, #0]
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	881b      	ldrh	r3, [r3, #0]
 8003922:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003926:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800392a:	b29a      	uxth	r2, r3
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	801a      	strh	r2, [r3, #0]
 8003930:	e026      	b.n	8003980 <PCD_EP_ISR_Handler+0x268>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	2b3d      	cmp	r3, #61	; 0x3d
 8003938:	d813      	bhi.n	8003962 <PCD_EP_ISR_Handler+0x24a>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	085b      	lsrs	r3, r3, #1
 8003940:	61bb      	str	r3, [r7, #24]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d002      	beq.n	8003954 <PCD_EP_ISR_Handler+0x23c>
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	3301      	adds	r3, #1
 8003952:	61bb      	str	r3, [r7, #24]
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	b29b      	uxth	r3, r3
 8003958:	029b      	lsls	r3, r3, #10
 800395a:	b29a      	uxth	r2, r3
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	801a      	strh	r2, [r3, #0]
 8003960:	e00e      	b.n	8003980 <PCD_EP_ISR_Handler+0x268>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	095b      	lsrs	r3, r3, #5
 8003968:	61bb      	str	r3, [r7, #24]
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	b29b      	uxth	r3, r3
 800396e:	029b      	lsls	r3, r3, #10
 8003970:	b29b      	uxth	r3, r3
 8003972:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003976:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800397a:	b29a      	uxth	r2, r3
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	881b      	ldrh	r3, [r3, #0]
 8003986:	b29b      	uxth	r3, r3
 8003988:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800398c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003990:	b29c      	uxth	r4, r3
 8003992:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003996:	b29c      	uxth	r4, r3
 8003998:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800399c:	b29c      	uxth	r4, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	4b9f      	ldr	r3, [pc, #636]	; (8003c20 <PCD_EP_ISR_Handler+0x508>)
 80039a4:	4323      	orrs	r3, r4
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	8013      	strh	r3, [r2, #0]
 80039aa:	e12a      	b.n	8003c02 <PCD_EP_ISR_Handler+0x4ea>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	461a      	mov	r2, r3
 80039b2:	7d7b      	ldrb	r3, [r7, #21]
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80039bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f280 80cb 	bge.w	8003b5c <PCD_EP_ISR_Handler+0x444>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	461a      	mov	r2, r3
 80039cc:	7d7b      	ldrb	r3, [r7, #21]
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	881b      	ldrh	r3, [r3, #0]
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80039da:	4013      	ands	r3, r2
 80039dc:	b29c      	uxth	r4, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	461a      	mov	r2, r3
 80039e4:	7d7b      	ldrb	r3, [r7, #21]
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80039ee:	b292      	uxth	r2, r2
 80039f0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80039f2:	7d7b      	ldrb	r3, [r7, #21]
 80039f4:	015b      	lsls	r3, r3, #5
 80039f6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	4413      	add	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	7b1b      	ldrb	r3, [r3, #12]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d11f      	bne.n	8003a48 <PCD_EP_ISR_Handler+0x330>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	461a      	mov	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	4413      	add	r3, r2
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6812      	ldr	r2, [r2, #0]
 8003a20:	4413      	add	r3, r2
 8003a22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a26:	881b      	ldrh	r3, [r3, #0]
 8003a28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a2c:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8003a2e:	8bfb      	ldrh	r3, [r7, #30]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d06e      	beq.n	8003b12 <PCD_EP_ISR_Handler+0x3fa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6818      	ldr	r0, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6959      	ldr	r1, [r3, #20]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	88da      	ldrh	r2, [r3, #6]
 8003a40:	8bfb      	ldrh	r3, [r7, #30]
 8003a42:	f005 fc0d 	bl	8009260 <USB_ReadPMA>
 8003a46:	e064      	b.n	8003b12 <PCD_EP_ISR_Handler+0x3fa>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	881b      	ldrh	r3, [r3, #0]
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d01f      	beq.n	8003aa2 <PCD_EP_ISR_Handler+0x38a>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	4413      	add	r3, r2
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6812      	ldr	r2, [r2, #0]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003a80:	881b      	ldrh	r3, [r3, #0]
 8003a82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a86:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003a88:	8bfb      	ldrh	r3, [r7, #30]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d028      	beq.n	8003ae0 <PCD_EP_ISR_Handler+0x3c8>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6818      	ldr	r0, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6959      	ldr	r1, [r3, #20]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	891a      	ldrh	r2, [r3, #8]
 8003a9a:	8bfb      	ldrh	r3, [r7, #30]
 8003a9c:	f005 fbe0 	bl	8009260 <USB_ReadPMA>
 8003aa0:	e01e      	b.n	8003ae0 <PCD_EP_ISR_Handler+0x3c8>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	461a      	mov	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	4413      	add	r3, r2
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	6812      	ldr	r2, [r2, #0]
 8003aba:	4413      	add	r3, r2
 8003abc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ac0:	881b      	ldrh	r3, [r3, #0]
 8003ac2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ac6:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003ac8:	8bfb      	ldrh	r3, [r7, #30]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d008      	beq.n	8003ae0 <PCD_EP_ISR_Handler+0x3c8>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6818      	ldr	r0, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6959      	ldr	r1, [r3, #20]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	895a      	ldrh	r2, [r3, #10]
 8003ada:	8bfb      	ldrh	r3, [r7, #30]
 8003adc:	f005 fbc0 	bl	8009260 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	881b      	ldrh	r3, [r3, #0]
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003afa:	b29c      	uxth	r4, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	461a      	mov	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	441a      	add	r2, r3
 8003b0a:	4b46      	ldr	r3, [pc, #280]	; (8003c24 <PCD_EP_ISR_Handler+0x50c>)
 8003b0c:	4323      	orrs	r3, r4
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	69da      	ldr	r2, [r3, #28]
 8003b16:	8bfb      	ldrh	r3, [r7, #30]
 8003b18:	441a      	add	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	695a      	ldr	r2, [r3, #20]
 8003b22:	8bfb      	ldrh	r3, [r7, #30]
 8003b24:	441a      	add	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d004      	beq.n	8003b3c <PCD_EP_ISR_Handler+0x424>
 8003b32:	8bfa      	ldrh	r2, [r7, #30]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d206      	bcs.n	8003b4a <PCD_EP_ISR_Handler+0x432>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	4619      	mov	r1, r3
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f00a f994 	bl	800de70 <HAL_PCD_DataOutStageCallback>
 8003b48:	e008      	b.n	8003b5c <PCD_EP_ISR_Handler+0x444>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	7819      	ldrb	r1, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	695a      	ldr	r2, [r3, #20]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7ff fcae 	bl	80034b8 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003b5c:	8a7b      	ldrh	r3, [r7, #18]
 8003b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d04d      	beq.n	8003c02 <PCD_EP_ISR_Handler+0x4ea>
      {
        ep = &hpcd->IN_ep[epindex];
 8003b66:	7d7b      	ldrb	r3, [r7, #21]
 8003b68:	015b      	lsls	r3, r3, #5
 8003b6a:	3328      	adds	r3, #40	; 0x28
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	4413      	add	r3, r2
 8003b70:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	461a      	mov	r2, r3
 8003b78:	7d7b      	ldrb	r3, [r7, #21]
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4413      	add	r3, r2
 8003b7e:	881b      	ldrh	r3, [r3, #0]
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b8a:	b29c      	uxth	r4, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	461a      	mov	r2, r3
 8003b92:	7d7b      	ldrb	r3, [r7, #21]
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	441a      	add	r2, r3
 8003b98:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8003b9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	461a      	mov	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	4413      	add	r3, r2
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	6812      	ldr	r2, [r2, #0]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003bc2:	881b      	ldrh	r3, [r3, #0]
 8003bc4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	695a      	ldr	r2, [r3, #20]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	69db      	ldr	r3, [r3, #28]
 8003bd4:	441a      	add	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d106      	bne.n	8003bf0 <PCD_EP_ISR_Handler+0x4d8>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	4619      	mov	r1, r3
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f00a f959 	bl	800dea0 <HAL_PCD_DataInStageCallback>
 8003bee:	e008      	b.n	8003c02 <PCD_EP_ISR_Handler+0x4ea>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	7819      	ldrb	r1, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	695a      	ldr	r2, [r3, #20]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7ff fcaa 	bl	8003556 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	b21b      	sxth	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f6ff ad87 	blt.w	8003722 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3724      	adds	r7, #36	; 0x24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd90      	pop	{r4, r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	ffff8080 	.word	0xffff8080
 8003c24:	ffff80c0 	.word	0xffff80c0

08003c28 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b087      	sub	sp, #28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	607b      	str	r3, [r7, #4]
 8003c32:	460b      	mov	r3, r1
 8003c34:	817b      	strh	r3, [r7, #10]
 8003c36:	4613      	mov	r3, r2
 8003c38:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003c3a:	897b      	ldrh	r3, [r7, #10]
 8003c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d008      	beq.n	8003c58 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c46:	897b      	ldrh	r3, [r7, #10]
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	015b      	lsls	r3, r3, #5
 8003c4e:	3328      	adds	r3, #40	; 0x28
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	4413      	add	r3, r2
 8003c54:	617b      	str	r3, [r7, #20]
 8003c56:	e006      	b.n	8003c66 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c58:	897b      	ldrh	r3, [r7, #10]
 8003c5a:	015b      	lsls	r3, r3, #5
 8003c5c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	4413      	add	r3, r2
 8003c64:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003c66:	893b      	ldrh	r3, [r7, #8]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d107      	bne.n	8003c7c <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	80da      	strh	r2, [r3, #6]
 8003c7a:	e00b      	b.n	8003c94 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	0c1b      	lsrs	r3, r3, #16
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	371c      	adds	r7, #28
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr

08003ca2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b085      	sub	sp, #20
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	f043 0301 	orr.w	r3, r3, #1
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	f043 0302 	orr.w	r3, r3, #2
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
	...

08003cf8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cfc:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a04      	ldr	r2, [pc, #16]	; (8003d14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d06:	6013      	str	r3, [r2, #0]
}
 8003d08:	bf00      	nop
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	58000400 	.word	0x58000400

08003d18 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003d1c:	4b04      	ldr	r3, [pc, #16]	; (8003d30 <HAL_PWREx_GetVoltageRange+0x18>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	58000400 	.word	0x58000400

08003d34 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003d38:	4b05      	ldr	r3, [pc, #20]	; (8003d50 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	4a04      	ldr	r2, [pc, #16]	; (8003d50 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003d3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d42:	6053      	str	r3, [r2, #4]
}
 8003d44:	bf00      	nop
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	58000400 	.word	0x58000400

08003d54 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d66:	d101      	bne.n	8003d6c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e000      	b.n	8003d6e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <LL_RCC_HSE_EnableBypass>:
{
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8003d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d8a:	6013      	str	r3, [r2, #0]
}
 8003d8c:	bf00      	nop
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <LL_RCC_HSE_DisableBypass>:
{
 8003d96:	b480      	push	{r7}
 8003d98:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8003d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003da4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003da8:	6013      	str	r3, [r2, #0]
}
 8003daa:	bf00      	nop
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <LL_RCC_HSE_Enable>:
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc6:	6013      	str	r3, [r2, #0]
}
 8003dc8:	bf00      	nop
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <LL_RCC_HSE_Disable>:
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003de4:	6013      	str	r3, [r2, #0]
}
 8003de6:	bf00      	nop
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <LL_RCC_HSE_IsReady>:
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e02:	d101      	bne.n	8003e08 <LL_RCC_HSE_IsReady+0x18>
 8003e04:	2301      	movs	r3, #1
 8003e06:	e000      	b.n	8003e0a <LL_RCC_HSE_IsReady+0x1a>
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <LL_RCC_HSI_Enable>:
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e26:	6013      	str	r3, [r2, #0]
}
 8003e28:	bf00      	nop
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <LL_RCC_HSI_Disable>:
{
 8003e32:	b480      	push	{r7}
 8003e34:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e44:	6013      	str	r3, [r2, #0]
}
 8003e46:	bf00      	nop
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <LL_RCC_HSI_IsReady>:
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e62:	d101      	bne.n	8003e68 <LL_RCC_HSI_IsReady+0x18>
 8003e64:	2301      	movs	r3, #1
 8003e66:	e000      	b.n	8003e6a <LL_RCC_HSI_IsReady+0x1a>
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	061b      	lsls	r3, r3, #24
 8003e8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	604b      	str	r3, [r1, #4]
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <LL_RCC_HSI48_Enable>:
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ea6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003eaa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003eae:	f043 0301 	orr.w	r3, r3, #1
 8003eb2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003eb6:	bf00      	nop
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <LL_RCC_HSI48_Disable>:
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ec8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ecc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ed0:	f023 0301 	bic.w	r3, r3, #1
 8003ed4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003ed8:	bf00      	nop
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <LL_RCC_HSI48_IsReady>:
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d101      	bne.n	8003efa <LL_RCC_HSI48_IsReady+0x18>
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e000      	b.n	8003efc <LL_RCC_HSI48_IsReady+0x1a>
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <LL_RCC_LSE_Enable>:
{
 8003f06:	b480      	push	{r7}
 8003f08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f16:	f043 0301 	orr.w	r3, r3, #1
 8003f1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003f1e:	bf00      	nop
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <LL_RCC_LSE_Disable>:
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f38:	f023 0301 	bic.w	r3, r3, #1
 8003f3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003f40:	bf00      	nop
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <LL_RCC_LSE_EnableBypass>:
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f5a:	f043 0304 	orr.w	r3, r3, #4
 8003f5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003f62:	bf00      	nop
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <LL_RCC_LSE_DisableBypass>:
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f7c:	f023 0304 	bic.w	r3, r3, #4
 8003f80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003f84:	bf00      	nop
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <LL_RCC_LSE_IsReady>:
{
 8003f8e:	b480      	push	{r7}
 8003f90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d101      	bne.n	8003fa6 <LL_RCC_LSE_IsReady+0x18>
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e000      	b.n	8003fa8 <LL_RCC_LSE_IsReady+0x1a>
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <LL_RCC_LSI1_Enable>:
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fc2:	f043 0301 	orr.w	r3, r3, #1
 8003fc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003fca:	bf00      	nop
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <LL_RCC_LSI1_Disable>:
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fe0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fe4:	f023 0301 	bic.w	r3, r3, #1
 8003fe8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003fec:	bf00      	nop
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <LL_RCC_LSI1_IsReady>:
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b02      	cmp	r3, #2
 8004008:	d101      	bne.n	800400e <LL_RCC_LSI1_IsReady+0x18>
 800400a:	2301      	movs	r3, #1
 800400c:	e000      	b.n	8004010 <LL_RCC_LSI1_IsReady+0x1a>
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <LL_RCC_LSI2_Enable>:
{
 800401a:	b480      	push	{r7}
 800401c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800401e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004026:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800402a:	f043 0304 	orr.w	r3, r3, #4
 800402e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004032:	bf00      	nop
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <LL_RCC_LSI2_Disable>:
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004044:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004048:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800404c:	f023 0304 	bic.w	r3, r3, #4
 8004050:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004054:	bf00      	nop
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <LL_RCC_LSI2_IsReady>:
{
 800405e:	b480      	push	{r7}
 8004060:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004066:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	2b08      	cmp	r3, #8
 8004070:	d101      	bne.n	8004076 <LL_RCC_LSI2_IsReady+0x18>
 8004072:	2301      	movs	r3, #1
 8004074:	e000      	b.n	8004078 <LL_RCC_LSI2_IsReady+0x1a>
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <LL_RCC_LSI2_SetTrimming>:
{
 8004082:	b480      	push	{r7}
 8004084:	b083      	sub	sp, #12
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800408a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800408e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004092:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	021b      	lsls	r3, r3, #8
 800409a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <LL_RCC_MSI_Enable>:
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80040b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040be:	f043 0301 	orr.w	r3, r3, #1
 80040c2:	6013      	str	r3, [r2, #0]
}
 80040c4:	bf00      	nop
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <LL_RCC_MSI_Disable>:
{
 80040ce:	b480      	push	{r7}
 80040d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80040d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040dc:	f023 0301 	bic.w	r3, r3, #1
 80040e0:	6013      	str	r3, [r2, #0]
}
 80040e2:	bf00      	nop
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <LL_RCC_MSI_IsReady>:
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80040f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d101      	bne.n	8004102 <LL_RCC_MSI_IsReady+0x16>
 80040fe:	2301      	movs	r3, #1
 8004100:	e000      	b.n	8004104 <LL_RCC_MSI_IsReady+0x18>
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <LL_RCC_MSI_SetRange>:
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004120:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4313      	orrs	r3, r2
 8004128:	600b      	str	r3, [r1, #0]
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <LL_RCC_MSI_GetRange>:
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800413c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004146:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2bb0      	cmp	r3, #176	; 0xb0
 800414c:	d901      	bls.n	8004152 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800414e:	23b0      	movs	r3, #176	; 0xb0
 8004150:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004152:	687b      	ldr	r3, [r7, #4]
}
 8004154:	4618      	mov	r0, r3
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	021b      	lsls	r3, r3, #8
 8004176:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800417a:	4313      	orrs	r3, r2
 800417c:	604b      	str	r3, [r1, #4]
}
 800417e:	bf00      	nop
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <LL_RCC_SetSysClkSource>:
{
 800418a:	b480      	push	{r7}
 800418c:	b083      	sub	sp, #12
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f023 0203 	bic.w	r2, r3, #3
 800419c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	608b      	str	r3, [r1, #8]
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <LL_RCC_GetSysClkSource>:
{
 80041b2:	b480      	push	{r7}
 80041b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80041b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f003 030c 	and.w	r3, r3, #12
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <LL_RCC_SetAHBPrescaler>:
{
 80041ca:	b480      	push	{r7}
 80041cc:	b083      	sub	sp, #12
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80041d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	608b      	str	r3, [r1, #8]
}
 80041e6:	bf00      	nop
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <LL_C2_RCC_SetAHBPrescaler>:
{
 80041f2:	b480      	push	{r7}
 80041f4:	b083      	sub	sp, #12
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80041fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004202:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004206:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4313      	orrs	r3, r2
 800420e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <LL_RCC_SetAHB4Prescaler>:
{
 800421e:	b480      	push	{r7}
 8004220:	b083      	sub	sp, #12
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800422a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800422e:	f023 020f 	bic.w	r2, r3, #15
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	091b      	lsrs	r3, r3, #4
 8004236:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800423a:	4313      	orrs	r3, r2
 800423c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <LL_RCC_SetAPB1Prescaler>:
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800425e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4313      	orrs	r3, r2
 8004266:	608b      	str	r3, [r1, #8]
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <LL_RCC_SetAPB2Prescaler>:
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800427c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004286:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4313      	orrs	r3, r2
 800428e:	608b      	str	r3, [r1, #8]
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <LL_RCC_GetAHBPrescaler>:
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80042a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <LL_RCC_GetAHB4Prescaler>:
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80042b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80042c0:	011b      	lsls	r3, r3, #4
 80042c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <LL_RCC_GetAPB1Prescaler>:
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80042d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80042de:	4618      	mov	r0, r3
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <LL_RCC_GetAPB2Prescaler>:
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80042ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800430e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004312:	6013      	str	r3, [r2, #0]
}
 8004314:	bf00      	nop
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800431e:	b480      	push	{r7}
 8004320:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800432c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004330:	6013      	str	r3, [r2, #0]
}
 8004332:	bf00      	nop
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800434a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800434e:	d101      	bne.n	8004354 <LL_RCC_PLL_IsReady+0x18>
 8004350:	2301      	movs	r3, #1
 8004352:	e000      	b.n	8004356 <LL_RCC_PLL_IsReady+0x1a>
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004364:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	0a1b      	lsrs	r3, r3, #8
 800436c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004370:	4618      	mov	r0, r3
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800437a:	b480      	push	{r7}
 800437c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800437e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004388:	4618      	mov	r0, r3
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004392:	b480      	push	{r7}
 8004394:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80043aa:	b480      	push	{r7}
 80043ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80043ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f003 0303 	and.w	r3, r3, #3
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80043c2:	b480      	push	{r7}
 80043c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80043c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d4:	d101      	bne.n	80043da <LL_RCC_IsActiveFlag_HPRE+0x18>
 80043d6:	2301      	movs	r3, #1
 80043d8:	e000      	b.n	80043dc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80043e6:	b480      	push	{r7}
 80043e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80043ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80043f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043fa:	d101      	bne.n	8004400 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80043fc:	2301      	movs	r3, #1
 80043fe:	e000      	b.n	8004402 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004414:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800441c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004420:	d101      	bne.n	8004426 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004422:	2301      	movs	r3, #1
 8004424:	e000      	b.n	8004428 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004432:	b480      	push	{r7}
 8004434:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004440:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004444:	d101      	bne.n	800444a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004446:	2301      	movs	r3, #1
 8004448:	e000      	b.n	800444c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr

08004456 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004456:	b480      	push	{r7}
 8004458:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800445a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004464:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004468:	d101      	bne.n	800446e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800446a:	2301      	movs	r3, #1
 800446c:	e000      	b.n	8004470 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
	...

0800447c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800447c:	b590      	push	{r4, r7, lr}
 800447e:	b08b      	sub	sp, #44	; 0x2c
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d102      	bne.n	8004490 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	f000 bcbc 	b.w	8004e08 <HAL_RCC_OscConfig+0x98c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d02e      	beq.n	80044f6 <HAL_RCC_OscConfig+0x7a>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d128      	bne.n	80044f6 <HAL_RCC_OscConfig+0x7a>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d122      	bne.n	80044f6 <HAL_RCC_OscConfig+0x7a>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d11c      	bne.n	80044f6 <HAL_RCC_OscConfig+0x7a>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0320 	and.w	r3, r3, #32
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d116      	bne.n	80044f6 <HAL_RCC_OscConfig+0x7a>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0308 	and.w	r3, r3, #8
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d110      	bne.n	80044f6 <HAL_RCC_OscConfig+0x7a>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0310 	and.w	r3, r3, #16
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10a      	bne.n	80044f6 <HAL_RCC_OscConfig+0x7a>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d104      	bne.n	80044f6 <HAL_RCC_OscConfig+0x7a>
 80044ec:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80044f0:	48ac      	ldr	r0, [pc, #688]	; (80047a4 <HAL_RCC_OscConfig+0x328>)
 80044f2:	f7fd f9f1 	bl	80018d8 <assert_failed>

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0320 	and.w	r3, r3, #32
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 80dc 	beq.w	80046bc <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d008      	beq.n	800451e <HAL_RCC_OscConfig+0xa2>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d004      	beq.n	800451e <HAL_RCC_OscConfig+0xa2>
 8004514:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004518:	48a2      	ldr	r0, [pc, #648]	; (80047a4 <HAL_RCC_OscConfig+0x328>)
 800451a:	f7fd f9dd 	bl	80018d8 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	2bff      	cmp	r3, #255	; 0xff
 8004524:	d904      	bls.n	8004530 <HAL_RCC_OscConfig+0xb4>
 8004526:	f240 1191 	movw	r1, #401	; 0x191
 800452a:	489e      	ldr	r0, [pc, #632]	; (80047a4 <HAL_RCC_OscConfig+0x328>)
 800452c:	f7fd f9d4 	bl	80018d8 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	2b00      	cmp	r3, #0
 8004536:	d030      	beq.n	800459a <HAL_RCC_OscConfig+0x11e>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453c:	2b10      	cmp	r3, #16
 800453e:	d02c      	beq.n	800459a <HAL_RCC_OscConfig+0x11e>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004544:	2b20      	cmp	r3, #32
 8004546:	d028      	beq.n	800459a <HAL_RCC_OscConfig+0x11e>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	2b30      	cmp	r3, #48	; 0x30
 800454e:	d024      	beq.n	800459a <HAL_RCC_OscConfig+0x11e>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004554:	2b40      	cmp	r3, #64	; 0x40
 8004556:	d020      	beq.n	800459a <HAL_RCC_OscConfig+0x11e>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455c:	2b50      	cmp	r3, #80	; 0x50
 800455e:	d01c      	beq.n	800459a <HAL_RCC_OscConfig+0x11e>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004564:	2b60      	cmp	r3, #96	; 0x60
 8004566:	d018      	beq.n	800459a <HAL_RCC_OscConfig+0x11e>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	2b70      	cmp	r3, #112	; 0x70
 800456e:	d014      	beq.n	800459a <HAL_RCC_OscConfig+0x11e>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	2b80      	cmp	r3, #128	; 0x80
 8004576:	d010      	beq.n	800459a <HAL_RCC_OscConfig+0x11e>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	2b90      	cmp	r3, #144	; 0x90
 800457e:	d00c      	beq.n	800459a <HAL_RCC_OscConfig+0x11e>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004584:	2ba0      	cmp	r3, #160	; 0xa0
 8004586:	d008      	beq.n	800459a <HAL_RCC_OscConfig+0x11e>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458c:	2bb0      	cmp	r3, #176	; 0xb0
 800458e:	d004      	beq.n	800459a <HAL_RCC_OscConfig+0x11e>
 8004590:	f44f 71c9 	mov.w	r1, #402	; 0x192
 8004594:	4883      	ldr	r0, [pc, #524]	; (80047a4 <HAL_RCC_OscConfig+0x328>)
 8004596:	f7fd f99f 	bl	80018d8 <assert_failed>

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800459a:	f7ff fe0a 	bl	80041b2 <LL_RCC_GetSysClkSource>
 800459e:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045a0:	f7ff ff03 	bl	80043aa <LL_RCC_PLL_GetMainSource>
 80045a4:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d005      	beq.n	80045b8 <HAL_RCC_OscConfig+0x13c>
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	2b0c      	cmp	r3, #12
 80045b0:	d14b      	bne.n	800464a <HAL_RCC_OscConfig+0x1ce>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80045b2:	6a3b      	ldr	r3, [r7, #32]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d148      	bne.n	800464a <HAL_RCC_OscConfig+0x1ce>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045b8:	f7ff fd98 	bl	80040ec <LL_RCC_MSI_IsReady>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d006      	beq.n	80045d0 <HAL_RCC_OscConfig+0x154>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d102      	bne.n	80045d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	f000 bc1c 	b.w	8004e08 <HAL_RCC_OscConfig+0x98c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80045d4:	f7ff fdaf 	bl	8004136 <LL_RCC_MSI_GetRange>
 80045d8:	4603      	mov	r3, r0
 80045da:	429c      	cmp	r4, r3
 80045dc:	d915      	bls.n	800460a <HAL_RCC_OscConfig+0x18e>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 ff24 	bl	8005430 <RCC_SetFlashLatencyFromMSIRange>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d002      	beq.n	80045f4 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	f000 bc0a 	b.w	8004e08 <HAL_RCC_OscConfig+0x98c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7ff fd88 	bl	800410e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	4618      	mov	r0, r3
 8004604:	f7ff fdac 	bl	8004160 <LL_RCC_MSI_SetCalibTrimming>
 8004608:	e013      	b.n	8004632 <HAL_RCC_OscConfig+0x1b6>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460e:	4618      	mov	r0, r3
 8004610:	f7ff fd7d 	bl	800410e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	4618      	mov	r0, r3
 800461a:	f7ff fda1 	bl	8004160 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	4618      	mov	r0, r3
 8004624:	f000 ff04 	bl	8005430 <RCC_SetFlashLatencyFromMSIRange>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <HAL_RCC_OscConfig+0x1b6>
          {
            return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e3ea      	b.n	8004e08 <HAL_RCC_OscConfig+0x98c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 8004632:	f7fd fd77 	bl	8002124 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004636:	4b5c      	ldr	r3, [pc, #368]	; (80047a8 <HAL_RCC_OscConfig+0x32c>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f7fd ff1a 	bl	8002474 <HAL_InitTick>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d039      	beq.n	80046ba <HAL_RCC_OscConfig+0x23e>
        {
          return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e3de      	b.n	8004e08 <HAL_RCC_OscConfig+0x98c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d01e      	beq.n	8004690 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004652:	f7ff fd2d 	bl	80040b0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004656:	f7fd ff59 	bl	800250c <HAL_GetTick>
 800465a:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800465c:	e008      	b.n	8004670 <HAL_RCC_OscConfig+0x1f4>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800465e:	f7fd ff55 	bl	800250c <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x1f4>
          {
            return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e3cb      	b.n	8004e08 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004670:	f7ff fd3c 	bl	80040ec <LL_RCC_MSI_IsReady>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0f1      	beq.n	800465e <HAL_RCC_OscConfig+0x1e2>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467e:	4618      	mov	r0, r3
 8004680:	f7ff fd45 	bl	800410e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff fd69 	bl	8004160 <LL_RCC_MSI_SetCalibTrimming>
 800468e:	e015      	b.n	80046bc <HAL_RCC_OscConfig+0x240>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004690:	f7ff fd1d 	bl	80040ce <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004694:	f7fd ff3a 	bl	800250c <HAL_GetTick>
 8004698:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800469a:	e008      	b.n	80046ae <HAL_RCC_OscConfig+0x232>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800469c:	f7fd ff36 	bl	800250c <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x232>
          {
            return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e3ac      	b.n	8004e08 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_MSI_IsReady() != 0U)
 80046ae:	f7ff fd1d 	bl	80040ec <LL_RCC_MSI_IsReady>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1f1      	bne.n	800469c <HAL_RCC_OscConfig+0x220>
 80046b8:	e000      	b.n	80046bc <HAL_RCC_OscConfig+0x240>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046ba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d072      	beq.n	80047ae <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00e      	beq.n	80046ee <HAL_RCC_OscConfig+0x272>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046d8:	d009      	beq.n	80046ee <HAL_RCC_OscConfig+0x272>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046e2:	d004      	beq.n	80046ee <HAL_RCC_OscConfig+0x272>
 80046e4:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 80046e8:	482e      	ldr	r0, [pc, #184]	; (80047a4 <HAL_RCC_OscConfig+0x328>)
 80046ea:	f7fd f8f5 	bl	80018d8 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046ee:	f7ff fd60 	bl	80041b2 <LL_RCC_GetSysClkSource>
 80046f2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046f4:	f7ff fe59 	bl	80043aa <LL_RCC_PLL_GetMainSource>
 80046f8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	2b08      	cmp	r3, #8
 80046fe:	d005      	beq.n	800470c <HAL_RCC_OscConfig+0x290>
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	2b0c      	cmp	r3, #12
 8004704:	d10d      	bne.n	8004722 <HAL_RCC_OscConfig+0x2a6>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	2b03      	cmp	r3, #3
 800470a:	d10a      	bne.n	8004722 <HAL_RCC_OscConfig+0x2a6>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800470c:	f7ff fb70 	bl	8003df0 <LL_RCC_HSE_IsReady>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d04a      	beq.n	80047ac <HAL_RCC_OscConfig+0x330>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d146      	bne.n	80047ac <HAL_RCC_OscConfig+0x330>
      {
        return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e372      	b.n	8004e08 <HAL_RCC_OscConfig+0x98c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800472a:	d102      	bne.n	8004732 <HAL_RCC_OscConfig+0x2b6>
 800472c:	f7ff fb42 	bl	8003db4 <LL_RCC_HSE_Enable>
 8004730:	e00d      	b.n	800474e <HAL_RCC_OscConfig+0x2d2>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800473a:	d104      	bne.n	8004746 <HAL_RCC_OscConfig+0x2ca>
 800473c:	f7ff fb1c 	bl	8003d78 <LL_RCC_HSE_EnableBypass>
 8004740:	f7ff fb38 	bl	8003db4 <LL_RCC_HSE_Enable>
 8004744:	e003      	b.n	800474e <HAL_RCC_OscConfig+0x2d2>
 8004746:	f7ff fb44 	bl	8003dd2 <LL_RCC_HSE_Disable>
 800474a:	f7ff fb24 	bl	8003d96 <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d012      	beq.n	800477c <HAL_RCC_OscConfig+0x300>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004756:	f7fd fed9 	bl	800250c <HAL_GetTick>
 800475a:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800475c:	e008      	b.n	8004770 <HAL_RCC_OscConfig+0x2f4>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800475e:	f7fd fed5 	bl	800250c <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b64      	cmp	r3, #100	; 0x64
 800476a:	d901      	bls.n	8004770 <HAL_RCC_OscConfig+0x2f4>
          {
            return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e34b      	b.n	8004e08 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004770:	f7ff fb3e 	bl	8003df0 <LL_RCC_HSE_IsReady>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0f1      	beq.n	800475e <HAL_RCC_OscConfig+0x2e2>
 800477a:	e018      	b.n	80047ae <HAL_RCC_OscConfig+0x332>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800477c:	f7fd fec6 	bl	800250c <HAL_GetTick>
 8004780:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0x31a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004784:	f7fd fec2 	bl	800250c <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b64      	cmp	r3, #100	; 0x64
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e338      	b.n	8004e08 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004796:	f7ff fb2b 	bl	8003df0 <LL_RCC_HSE_IsReady>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1f1      	bne.n	8004784 <HAL_RCC_OscConfig+0x308>
 80047a0:	e005      	b.n	80047ae <HAL_RCC_OscConfig+0x332>
 80047a2:	bf00      	nop
 80047a4:	0800ed34 	.word	0x0800ed34
 80047a8:	20000010 	.word	0x20000010
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d068      	beq.n	800488c <HAL_RCC_OscConfig+0x410>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d009      	beq.n	80047d6 <HAL_RCC_OscConfig+0x35a>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ca:	d004      	beq.n	80047d6 <HAL_RCC_OscConfig+0x35a>
 80047cc:	f240 212d 	movw	r1, #557	; 0x22d
 80047d0:	48b0      	ldr	r0, [pc, #704]	; (8004a94 <HAL_RCC_OscConfig+0x618>)
 80047d2:	f7fd f881 	bl	80018d8 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	2b7f      	cmp	r3, #127	; 0x7f
 80047dc:	d904      	bls.n	80047e8 <HAL_RCC_OscConfig+0x36c>
 80047de:	f240 212e 	movw	r1, #558	; 0x22e
 80047e2:	48ac      	ldr	r0, [pc, #688]	; (8004a94 <HAL_RCC_OscConfig+0x618>)
 80047e4:	f7fd f878 	bl	80018d8 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047e8:	f7ff fce3 	bl	80041b2 <LL_RCC_GetSysClkSource>
 80047ec:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047ee:	f7ff fddc 	bl	80043aa <LL_RCC_PLL_GetMainSource>
 80047f2:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	d005      	beq.n	8004806 <HAL_RCC_OscConfig+0x38a>
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	2b0c      	cmp	r3, #12
 80047fe:	d113      	bne.n	8004828 <HAL_RCC_OscConfig+0x3ac>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2b02      	cmp	r3, #2
 8004804:	d110      	bne.n	8004828 <HAL_RCC_OscConfig+0x3ac>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004806:	f7ff fb23 	bl	8003e50 <LL_RCC_HSI_IsReady>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d005      	beq.n	800481c <HAL_RCC_OscConfig+0x3a0>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d101      	bne.n	800481c <HAL_RCC_OscConfig+0x3a0>
      {
        return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e2f5      	b.n	8004e08 <HAL_RCC_OscConfig+0x98c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	4618      	mov	r0, r3
 8004822:	f7ff fb27 	bl	8003e74 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004826:	e031      	b.n	800488c <HAL_RCC_OscConfig+0x410>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d019      	beq.n	8004864 <HAL_RCC_OscConfig+0x3e8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004830:	f7ff faf0 	bl	8003e14 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004834:	f7fd fe6a 	bl	800250c <HAL_GetTick>
 8004838:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800483a:	e008      	b.n	800484e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800483c:	f7fd fe66 	bl	800250c <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b02      	cmp	r3, #2
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e2dc      	b.n	8004e08 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_HSI_IsReady() == 0U)
 800484e:	f7ff faff 	bl	8003e50 <LL_RCC_HSI_IsReady>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d0f1      	beq.n	800483c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	4618      	mov	r0, r3
 800485e:	f7ff fb09 	bl	8003e74 <LL_RCC_HSI_SetCalibTrimming>
 8004862:	e013      	b.n	800488c <HAL_RCC_OscConfig+0x410>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004864:	f7ff fae5 	bl	8003e32 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004868:	f7fd fe50 	bl	800250c <HAL_GetTick>
 800486c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004870:	f7fd fe4c 	bl	800250c <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e2c2      	b.n	8004e08 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004882:	f7ff fae5 	bl	8003e50 <LL_RCC_HSI_IsReady>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1f1      	bne.n	8004870 <HAL_RCC_OscConfig+0x3f4>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0308 	and.w	r3, r3, #8
 8004894:	2b00      	cmp	r3, #0
 8004896:	d106      	bne.n	80048a6 <HAL_RCC_OscConfig+0x42a>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 80b5 	beq.w	8004a10 <HAL_RCC_OscConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d008      	beq.n	80048c0 <HAL_RCC_OscConfig+0x444>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	2b05      	cmp	r3, #5
 80048b4:	d004      	beq.n	80048c0 <HAL_RCC_OscConfig+0x444>
 80048b6:	f240 2172 	movw	r1, #626	; 0x272
 80048ba:	4876      	ldr	r0, [pc, #472]	; (8004a94 <HAL_RCC_OscConfig+0x618>)
 80048bc:	f7fd f80c 	bl	80018d8 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d07b      	beq.n	80049c0 <HAL_RCC_OscConfig+0x544>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0310 	and.w	r3, r3, #16
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d04f      	beq.n	8004974 <HAL_RCC_OscConfig+0x4f8>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	2b0f      	cmp	r3, #15
 80048da:	d904      	bls.n	80048e6 <HAL_RCC_OscConfig+0x46a>
 80048dc:	f240 217a 	movw	r1, #634	; 0x27a
 80048e0:	486c      	ldr	r0, [pc, #432]	; (8004a94 <HAL_RCC_OscConfig+0x618>)
 80048e2:	f7fc fff9 	bl	80018d8 <assert_failed>

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80048e6:	f7ff fb86 	bl	8003ff6 <LL_RCC_LSI1_IsReady>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d113      	bne.n	8004918 <HAL_RCC_OscConfig+0x49c>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80048f0:	f7ff fb5f 	bl	8003fb2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048f4:	f7fd fe0a 	bl	800250c <HAL_GetTick>
 80048f8:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80048fa:	e008      	b.n	800490e <HAL_RCC_OscConfig+0x492>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80048fc:	f7fd fe06 	bl	800250c <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b02      	cmp	r3, #2
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0x492>
            {
              return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e27c      	b.n	8004e08 <HAL_RCC_OscConfig+0x98c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800490e:	f7ff fb72 	bl	8003ff6 <LL_RCC_LSI1_IsReady>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d0f1      	beq.n	80048fc <HAL_RCC_OscConfig+0x480>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004918:	f7ff fb7f 	bl	800401a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800491c:	f7fd fdf6 	bl	800250c <HAL_GetTick>
 8004920:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0x4ba>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004924:	f7fd fdf2 	bl	800250c <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b03      	cmp	r3, #3
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x4ba>
          {
            return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e268      	b.n	8004e08 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004936:	f7ff fb92 	bl	800405e <LL_RCC_LSI2_IsReady>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d0f1      	beq.n	8004924 <HAL_RCC_OscConfig+0x4a8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	4618      	mov	r0, r3
 8004946:	f7ff fb9c 	bl	8004082 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800494a:	f7ff fb43 	bl	8003fd4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494e:	f7fd fddd 	bl	800250c <HAL_GetTick>
 8004952:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004954:	e008      	b.n	8004968 <HAL_RCC_OscConfig+0x4ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004956:	f7fd fdd9 	bl	800250c <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b02      	cmp	r3, #2
 8004962:	d901      	bls.n	8004968 <HAL_RCC_OscConfig+0x4ec>
          {
            return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e24f      	b.n	8004e08 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004968:	f7ff fb45 	bl	8003ff6 <LL_RCC_LSI1_IsReady>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1f1      	bne.n	8004956 <HAL_RCC_OscConfig+0x4da>
 8004972:	e04d      	b.n	8004a10 <HAL_RCC_OscConfig+0x594>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004974:	f7ff fb1d 	bl	8003fb2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004978:	f7fd fdc8 	bl	800250c <HAL_GetTick>
 800497c:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0x516>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004980:	f7fd fdc4 	bl	800250c <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x516>
          {
            return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e23a      	b.n	8004e08 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004992:	f7ff fb30 	bl	8003ff6 <LL_RCC_LSI1_IsReady>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d0f1      	beq.n	8004980 <HAL_RCC_OscConfig+0x504>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800499c:	f7ff fb4e 	bl	800403c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80049a0:	e008      	b.n	80049b4 <HAL_RCC_OscConfig+0x538>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80049a2:	f7fd fdb3 	bl	800250c <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b03      	cmp	r3, #3
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e229      	b.n	8004e08 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80049b4:	f7ff fb53 	bl	800405e <LL_RCC_LSI2_IsReady>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1f1      	bne.n	80049a2 <HAL_RCC_OscConfig+0x526>
 80049be:	e027      	b.n	8004a10 <HAL_RCC_OscConfig+0x594>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80049c0:	f7ff fb3c 	bl	800403c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c4:	f7fd fda2 	bl	800250c <HAL_GetTick>
 80049c8:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0x562>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80049cc:	f7fd fd9e 	bl	800250c <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b03      	cmp	r3, #3
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x562>
        {
          return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e214      	b.n	8004e08 <HAL_RCC_OscConfig+0x98c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80049de:	f7ff fb3e 	bl	800405e <LL_RCC_LSI2_IsReady>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1f1      	bne.n	80049cc <HAL_RCC_OscConfig+0x550>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80049e8:	f7ff faf4 	bl	8003fd4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ec:	f7fd fd8e 	bl	800250c <HAL_GetTick>
 80049f0:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80049f4:	f7fd fd8a 	bl	800250c <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e200      	b.n	8004e08 <HAL_RCC_OscConfig+0x98c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004a06:	f7ff faf6 	bl	8003ff6 <LL_RCC_LSI1_IsReady>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1f1      	bne.n	80049f4 <HAL_RCC_OscConfig+0x578>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d070      	beq.n	8004afe <HAL_RCC_OscConfig+0x682>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00c      	beq.n	8004a3e <HAL_RCC_OscConfig+0x5c2>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d008      	beq.n	8004a3e <HAL_RCC_OscConfig+0x5c2>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	2b05      	cmp	r3, #5
 8004a32:	d004      	beq.n	8004a3e <HAL_RCC_OscConfig+0x5c2>
 8004a34:	f240 21f9 	movw	r1, #761	; 0x2f9
 8004a38:	4816      	ldr	r0, [pc, #88]	; (8004a94 <HAL_RCC_OscConfig+0x618>)
 8004a3a:	f7fc ff4d 	bl	80018d8 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a3e:	4b16      	ldr	r3, [pc, #88]	; (8004a98 <HAL_RCC_OscConfig+0x61c>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d114      	bne.n	8004a74 <HAL_RCC_OscConfig+0x5f8>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004a4a:	f7ff f955 	bl	8003cf8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a4e:	f7fd fd5d 	bl	800250c <HAL_GetTick>
 8004a52:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a54:	e008      	b.n	8004a68 <HAL_RCC_OscConfig+0x5ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a56:	f7fd fd59 	bl	800250c <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d901      	bls.n	8004a68 <HAL_RCC_OscConfig+0x5ec>
        {
          return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e1cf      	b.n	8004e08 <HAL_RCC_OscConfig+0x98c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a68:	4b0b      	ldr	r3, [pc, #44]	; (8004a98 <HAL_RCC_OscConfig+0x61c>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d0f0      	beq.n	8004a56 <HAL_RCC_OscConfig+0x5da>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d102      	bne.n	8004a82 <HAL_RCC_OscConfig+0x606>
 8004a7c:	f7ff fa43 	bl	8003f06 <LL_RCC_LSE_Enable>
 8004a80:	e010      	b.n	8004aa4 <HAL_RCC_OscConfig+0x628>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	2b05      	cmp	r3, #5
 8004a88:	d108      	bne.n	8004a9c <HAL_RCC_OscConfig+0x620>
 8004a8a:	f7ff fa5e 	bl	8003f4a <LL_RCC_LSE_EnableBypass>
 8004a8e:	f7ff fa3a 	bl	8003f06 <LL_RCC_LSE_Enable>
 8004a92:	e007      	b.n	8004aa4 <HAL_RCC_OscConfig+0x628>
 8004a94:	0800ed34 	.word	0x0800ed34
 8004a98:	58000400 	.word	0x58000400
 8004a9c:	f7ff fa44 	bl	8003f28 <LL_RCC_LSE_Disable>
 8004aa0:	f7ff fa64 	bl	8003f6c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d014      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x65a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aac:	f7fd fd2e 	bl	800250c <HAL_GetTick>
 8004ab0:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004ab2:	e00a      	b.n	8004aca <HAL_RCC_OscConfig+0x64e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ab4:	f7fd fd2a 	bl	800250c <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d901      	bls.n	8004aca <HAL_RCC_OscConfig+0x64e>
        {
          return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e19e      	b.n	8004e08 <HAL_RCC_OscConfig+0x98c>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004aca:	f7ff fa60 	bl	8003f8e <LL_RCC_LSE_IsReady>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d0ef      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x638>
 8004ad4:	e013      	b.n	8004afe <HAL_RCC_OscConfig+0x682>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad6:	f7fd fd19 	bl	800250c <HAL_GetTick>
 8004ada:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004adc:	e00a      	b.n	8004af4 <HAL_RCC_OscConfig+0x678>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ade:	f7fd fd15 	bl	800250c <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d901      	bls.n	8004af4 <HAL_RCC_OscConfig+0x678>
        {
          return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e189      	b.n	8004e08 <HAL_RCC_OscConfig+0x98c>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004af4:	f7ff fa4b 	bl	8003f8e <LL_RCC_LSE_IsReady>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1ef      	bne.n	8004ade <HAL_RCC_OscConfig+0x662>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d039      	beq.n	8004b7e <HAL_RCC_OscConfig+0x702>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d008      	beq.n	8004b24 <HAL_RCC_OscConfig+0x6a8>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d004      	beq.n	8004b24 <HAL_RCC_OscConfig+0x6a8>
 8004b1a:	f240 3135 	movw	r1, #821	; 0x335
 8004b1e:	489f      	ldr	r0, [pc, #636]	; (8004d9c <HAL_RCC_OscConfig+0x920>)
 8004b20:	f7fc feda 	bl	80018d8 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d014      	beq.n	8004b56 <HAL_RCC_OscConfig+0x6da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b2c:	f7ff f9b7 	bl	8003e9e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b30:	f7fd fcec 	bl	800250c <HAL_GetTick>
 8004b34:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0x6ce>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b38:	f7fd fce8 	bl	800250c <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x6ce>
        {
          return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e15e      	b.n	8004e08 <HAL_RCC_OscConfig+0x98c>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004b4a:	f7ff f9ca 	bl	8003ee2 <LL_RCC_HSI48_IsReady>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d0f1      	beq.n	8004b38 <HAL_RCC_OscConfig+0x6bc>
 8004b54:	e013      	b.n	8004b7e <HAL_RCC_OscConfig+0x702>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b56:	f7ff f9b3 	bl	8003ec0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b5a:	f7fd fcd7 	bl	800250c <HAL_GetTick>
 8004b5e:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004b60:	e008      	b.n	8004b74 <HAL_RCC_OscConfig+0x6f8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b62:	f7fd fcd3 	bl	800250c <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCC_OscConfig+0x6f8>
        {
          return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e149      	b.n	8004e08 <HAL_RCC_OscConfig+0x98c>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004b74:	f7ff f9b5 	bl	8003ee2 <LL_RCC_HSI48_IsReady>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1f1      	bne.n	8004b62 <HAL_RCC_OscConfig+0x6e6>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00c      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x724>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d008      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x724>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d004      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x724>
 8004b96:	f240 315d 	movw	r1, #861	; 0x35d
 8004b9a:	4880      	ldr	r0, [pc, #512]	; (8004d9c <HAL_RCC_OscConfig+0x920>)
 8004b9c:	f7fc fe9c 	bl	80018d8 <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 812e 	beq.w	8004e06 <HAL_RCC_OscConfig+0x98a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004baa:	f7ff fb02 	bl	80041b2 <LL_RCC_GetSysClkSource>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b0c      	cmp	r3, #12
 8004bb2:	f000 80ec 	beq.w	8004d8e <HAL_RCC_OscConfig+0x912>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	f040 80c0 	bne.w	8004d40 <HAL_RCC_OscConfig+0x8c4>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d010      	beq.n	8004bea <HAL_RCC_OscConfig+0x76e>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d00c      	beq.n	8004bea <HAL_RCC_OscConfig+0x76e>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d008      	beq.n	8004bea <HAL_RCC_OscConfig+0x76e>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bdc:	2b03      	cmp	r3, #3
 8004bde:	d004      	beq.n	8004bea <HAL_RCC_OscConfig+0x76e>
 8004be0:	f240 3167 	movw	r1, #871	; 0x367
 8004be4:	486d      	ldr	r0, [pc, #436]	; (8004d9c <HAL_RCC_OscConfig+0x920>)
 8004be6:	f7fc fe77 	bl	80018d8 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d020      	beq.n	8004c34 <HAL_RCC_OscConfig+0x7b8>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf6:	2b10      	cmp	r3, #16
 8004bf8:	d01c      	beq.n	8004c34 <HAL_RCC_OscConfig+0x7b8>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bfe:	2b20      	cmp	r3, #32
 8004c00:	d018      	beq.n	8004c34 <HAL_RCC_OscConfig+0x7b8>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c06:	2b30      	cmp	r3, #48	; 0x30
 8004c08:	d014      	beq.n	8004c34 <HAL_RCC_OscConfig+0x7b8>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c0e:	2b40      	cmp	r3, #64	; 0x40
 8004c10:	d010      	beq.n	8004c34 <HAL_RCC_OscConfig+0x7b8>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c16:	2b50      	cmp	r3, #80	; 0x50
 8004c18:	d00c      	beq.n	8004c34 <HAL_RCC_OscConfig+0x7b8>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c1e:	2b60      	cmp	r3, #96	; 0x60
 8004c20:	d008      	beq.n	8004c34 <HAL_RCC_OscConfig+0x7b8>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c26:	2b70      	cmp	r3, #112	; 0x70
 8004c28:	d004      	beq.n	8004c34 <HAL_RCC_OscConfig+0x7b8>
 8004c2a:	f44f 715a 	mov.w	r1, #872	; 0x368
 8004c2e:	485b      	ldr	r0, [pc, #364]	; (8004d9c <HAL_RCC_OscConfig+0x920>)
 8004c30:	f7fc fe52 	bl	80018d8 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c38:	2b05      	cmp	r3, #5
 8004c3a:	d903      	bls.n	8004c44 <HAL_RCC_OscConfig+0x7c8>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c40:	2b7f      	cmp	r3, #127	; 0x7f
 8004c42:	d904      	bls.n	8004c4e <HAL_RCC_OscConfig+0x7d2>
 8004c44:	f240 3169 	movw	r1, #873	; 0x369
 8004c48:	4854      	ldr	r0, [pc, #336]	; (8004d9c <HAL_RCC_OscConfig+0x920>)
 8004c4a:	f7fc fe45 	bl	80018d8 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c56:	d304      	bcc.n	8004c62 <HAL_RCC_OscConfig+0x7e6>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c5c:	f5b3 1f78 	cmp.w	r3, #4063232	; 0x3e0000
 8004c60:	d904      	bls.n	8004c6c <HAL_RCC_OscConfig+0x7f0>
 8004c62:	f240 316a 	movw	r1, #874	; 0x36a
 8004c66:	484d      	ldr	r0, [pc, #308]	; (8004d9c <HAL_RCC_OscConfig+0x920>)
 8004c68:	f7fc fe36 	bl	80018d8 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c74:	d304      	bcc.n	8004c80 <HAL_RCC_OscConfig+0x804>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8004c7e:	d904      	bls.n	8004c8a <HAL_RCC_OscConfig+0x80e>
 8004c80:	f240 316b 	movw	r1, #875	; 0x36b
 8004c84:	4845      	ldr	r0, [pc, #276]	; (8004d9c <HAL_RCC_OscConfig+0x920>)
 8004c86:	f7fc fe27 	bl	80018d8 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c92:	d304      	bcc.n	8004c9e <HAL_RCC_OscConfig+0x822>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c98:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8004c9c:	d904      	bls.n	8004ca8 <HAL_RCC_OscConfig+0x82c>
 8004c9e:	f44f 715b 	mov.w	r1, #876	; 0x36c
 8004ca2:	483e      	ldr	r0, [pc, #248]	; (8004d9c <HAL_RCC_OscConfig+0x920>)
 8004ca4:	f7fc fe18 	bl	80018d8 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ca8:	f7ff fb39 	bl	800431e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cac:	f7fd fc2e 	bl	800250c <HAL_GetTick>
 8004cb0:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_OscConfig+0x84a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cb4:	f7fd fc2a 	bl	800250c <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x84a>
          {
            return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e0a0      	b.n	8004e08 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004cc6:	f7ff fb39 	bl	800433c <LL_RCC_PLL_IsReady>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1f1      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x838>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cd4:	68da      	ldr	r2, [r3, #12]
 8004cd6:	4b32      	ldr	r3, [pc, #200]	; (8004da0 <HAL_RCC_OscConfig+0x924>)
 8004cd8:	4013      	ands	r3, r2
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ce2:	4311      	orrs	r1, r2
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ce8:	0212      	lsls	r2, r2, #8
 8004cea:	4311      	orrs	r1, r2
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004cf0:	4311      	orrs	r1, r2
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004cf6:	4311      	orrs	r1, r2
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d02:	4313      	orrs	r3, r2
 8004d04:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d06:	f7ff fafb 	bl	8004300 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d18:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d1a:	f7fd fbf7 	bl	800250c <HAL_GetTick>
 8004d1e:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8004d20:	e008      	b.n	8004d34 <HAL_RCC_OscConfig+0x8b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d22:	f7fd fbf3 	bl	800250c <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCC_OscConfig+0x8b8>
          {
            return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e069      	b.n	8004e08 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_PLL_IsReady() == 0U)
 8004d34:	f7ff fb02 	bl	800433c <LL_RCC_PLL_IsReady>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0f1      	beq.n	8004d22 <HAL_RCC_OscConfig+0x8a6>
 8004d3e:	e062      	b.n	8004e06 <HAL_RCC_OscConfig+0x98a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d40:	f7ff faed 	bl	800431e <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d4e:	f023 0303 	bic.w	r3, r3, #3
 8004d52:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8004d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d5e:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8004d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d66:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d68:	f7fd fbd0 	bl	800250c <HAL_GetTick>
 8004d6c:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCC_OscConfig+0x906>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d70:	f7fd fbcc 	bl	800250c <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x906>
          {
            return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e042      	b.n	8004e08 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004d82:	f7ff fadb 	bl	800433c <LL_RCC_PLL_IsReady>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1f1      	bne.n	8004d70 <HAL_RCC_OscConfig+0x8f4>
 8004d8c:	e03b      	b.n	8004e06 <HAL_RCC_OscConfig+0x98a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d106      	bne.n	8004da4 <HAL_RCC_OscConfig+0x928>
      {
        return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e036      	b.n	8004e08 <HAL_RCC_OscConfig+0x98c>
 8004d9a:	bf00      	nop
 8004d9c:	0800ed34 	.word	0x0800ed34
 8004da0:	11c1808c 	.word	0x11c1808c
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8004da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	f003 0203 	and.w	r2, r3, #3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d123      	bne.n	8004e02 <HAL_RCC_OscConfig+0x986>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d11c      	bne.n	8004e02 <HAL_RCC_OscConfig+0x986>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	0a1b      	lsrs	r3, r3, #8
 8004dcc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d114      	bne.n	8004e02 <HAL_RCC_OscConfig+0x986>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d10d      	bne.n	8004e02 <HAL_RCC_OscConfig+0x986>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d106      	bne.n	8004e02 <HAL_RCC_OscConfig+0x986>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d001      	beq.n	8004e06 <HAL_RCC_OscConfig+0x98a>
        {
          return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e000      	b.n	8004e08 <HAL_RCC_OscConfig+0x98c>
        }
      }
    }
  }
  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	372c      	adds	r7, #44	; 0x2c
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd90      	pop	{r4, r7, pc}

08004e10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d101      	bne.n	8004e24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e253      	b.n	80052cc <HAL_RCC_ClockConfig+0x4bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d003      	beq.n	8004e34 <HAL_RCC_ClockConfig+0x24>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2b6f      	cmp	r3, #111	; 0x6f
 8004e32:	d904      	bls.n	8004e3e <HAL_RCC_ClockConfig+0x2e>
 8004e34:	f240 31fd 	movw	r1, #1021	; 0x3fd
 8004e38:	489b      	ldr	r0, [pc, #620]	; (80050a8 <HAL_RCC_ClockConfig+0x298>)
 8004e3a:	f7fc fd4d 	bl	80018d8 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00d      	beq.n	8004e60 <HAL_RCC_ClockConfig+0x50>
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d00a      	beq.n	8004e60 <HAL_RCC_ClockConfig+0x50>
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d007      	beq.n	8004e60 <HAL_RCC_ClockConfig+0x50>
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	2b03      	cmp	r3, #3
 8004e54:	d004      	beq.n	8004e60 <HAL_RCC_ClockConfig+0x50>
 8004e56:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8004e5a:	4893      	ldr	r0, [pc, #588]	; (80050a8 <HAL_RCC_ClockConfig+0x298>)
 8004e5c:	f7fc fd3c 	bl	80018d8 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e60:	4b92      	ldr	r3, [pc, #584]	; (80050ac <HAL_RCC_ClockConfig+0x29c>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0307 	and.w	r3, r3, #7
 8004e68:	683a      	ldr	r2, [r7, #0]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d91b      	bls.n	8004ea6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e6e:	4b8f      	ldr	r3, [pc, #572]	; (80050ac <HAL_RCC_ClockConfig+0x29c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f023 0207 	bic.w	r2, r3, #7
 8004e76:	498d      	ldr	r1, [pc, #564]	; (80050ac <HAL_RCC_ClockConfig+0x29c>)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e7e:	f7fd fb45 	bl	800250c <HAL_GetTick>
 8004e82:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e84:	e008      	b.n	8004e98 <HAL_RCC_ClockConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004e86:	f7fd fb41 	bl	800250c <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d901      	bls.n	8004e98 <HAL_RCC_ClockConfig+0x88>
      {
        return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e219      	b.n	80052cc <HAL_RCC_ClockConfig+0x4bc>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e98:	4b84      	ldr	r3, [pc, #528]	; (80050ac <HAL_RCC_ClockConfig+0x29c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0307 	and.w	r3, r3, #7
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d1ef      	bne.n	8004e86 <HAL_RCC_ClockConfig+0x76>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d053      	beq.n	8004f5a <HAL_RCC_ClockConfig+0x14a>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d038      	beq.n	8004f2c <HAL_RCC_ClockConfig+0x11c>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	2b80      	cmp	r3, #128	; 0x80
 8004ec0:	d034      	beq.n	8004f2c <HAL_RCC_ClockConfig+0x11c>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	2b10      	cmp	r3, #16
 8004ec8:	d030      	beq.n	8004f2c <HAL_RCC_ClockConfig+0x11c>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	2b90      	cmp	r3, #144	; 0x90
 8004ed0:	d02c      	beq.n	8004f2c <HAL_RCC_ClockConfig+0x11c>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	2b20      	cmp	r3, #32
 8004ed8:	d028      	beq.n	8004f2c <HAL_RCC_ClockConfig+0x11c>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	2b50      	cmp	r3, #80	; 0x50
 8004ee0:	d024      	beq.n	8004f2c <HAL_RCC_ClockConfig+0x11c>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	2ba0      	cmp	r3, #160	; 0xa0
 8004ee8:	d020      	beq.n	8004f2c <HAL_RCC_ClockConfig+0x11c>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	2b60      	cmp	r3, #96	; 0x60
 8004ef0:	d01c      	beq.n	8004f2c <HAL_RCC_ClockConfig+0x11c>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	2bb0      	cmp	r3, #176	; 0xb0
 8004ef8:	d018      	beq.n	8004f2c <HAL_RCC_ClockConfig+0x11c>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	2b70      	cmp	r3, #112	; 0x70
 8004f00:	d014      	beq.n	8004f2c <HAL_RCC_ClockConfig+0x11c>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	2bc0      	cmp	r3, #192	; 0xc0
 8004f08:	d010      	beq.n	8004f2c <HAL_RCC_ClockConfig+0x11c>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	2bd0      	cmp	r3, #208	; 0xd0
 8004f10:	d00c      	beq.n	8004f2c <HAL_RCC_ClockConfig+0x11c>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	2be0      	cmp	r3, #224	; 0xe0
 8004f18:	d008      	beq.n	8004f2c <HAL_RCC_ClockConfig+0x11c>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	2bf0      	cmp	r3, #240	; 0xf0
 8004f20:	d004      	beq.n	8004f2c <HAL_RCC_ClockConfig+0x11c>
 8004f22:	f240 411b 	movw	r1, #1051	; 0x41b
 8004f26:	4860      	ldr	r0, [pc, #384]	; (80050a8 <HAL_RCC_ClockConfig+0x298>)
 8004f28:	f7fc fcd6 	bl	80018d8 <assert_failed>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7ff f94a 	bl	80041ca <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004f36:	f7fd fae9 	bl	800250c <HAL_GetTick>
 8004f3a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004f3c:	e008      	b.n	8004f50 <HAL_RCC_ClockConfig+0x140>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f3e:	f7fd fae5 	bl	800250c <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d901      	bls.n	8004f50 <HAL_RCC_ClockConfig+0x140>
      {
        return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e1bd      	b.n	80052cc <HAL_RCC_ClockConfig+0x4bc>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004f50:	f7ff fa37 	bl	80043c2 <LL_RCC_IsActiveFlag_HPRE>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d0f1      	beq.n	8004f3e <HAL_RCC_ClockConfig+0x12e>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0320 	and.w	r3, r3, #32
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d053      	beq.n	800500e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d038      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x1d0>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	2b80      	cmp	r3, #128	; 0x80
 8004f74:	d034      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x1d0>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	2b10      	cmp	r3, #16
 8004f7c:	d030      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x1d0>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	2b90      	cmp	r3, #144	; 0x90
 8004f84:	d02c      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x1d0>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	2b20      	cmp	r3, #32
 8004f8c:	d028      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x1d0>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	2b50      	cmp	r3, #80	; 0x50
 8004f94:	d024      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x1d0>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	2ba0      	cmp	r3, #160	; 0xa0
 8004f9c:	d020      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x1d0>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	2b60      	cmp	r3, #96	; 0x60
 8004fa4:	d01c      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x1d0>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	2bb0      	cmp	r3, #176	; 0xb0
 8004fac:	d018      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x1d0>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	2b70      	cmp	r3, #112	; 0x70
 8004fb4:	d014      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x1d0>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	2bc0      	cmp	r3, #192	; 0xc0
 8004fbc:	d010      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x1d0>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	2bd0      	cmp	r3, #208	; 0xd0
 8004fc4:	d00c      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x1d0>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	2be0      	cmp	r3, #224	; 0xe0
 8004fcc:	d008      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x1d0>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	2bf0      	cmp	r3, #240	; 0xf0
 8004fd4:	d004      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x1d0>
 8004fd6:	f240 412c 	movw	r1, #1068	; 0x42c
 8004fda:	4833      	ldr	r0, [pc, #204]	; (80050a8 <HAL_RCC_ClockConfig+0x298>)
 8004fdc:	f7fc fc7c 	bl	80018d8 <assert_failed>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7ff f904 	bl	80041f2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004fea:	f7fd fa8f 	bl	800250c <HAL_GetTick>
 8004fee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004ff0:	e008      	b.n	8005004 <HAL_RCC_ClockConfig+0x1f4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ff2:	f7fd fa8b 	bl	800250c <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_ClockConfig+0x1f4>
      {
        return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e163      	b.n	80052cc <HAL_RCC_ClockConfig+0x4bc>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005004:	f7ff f9ef 	bl	80043e6 <LL_RCC_IsActiveFlag_C2HPRE>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0f1      	beq.n	8004ff2 <HAL_RCC_ClockConfig+0x1e2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005016:	2b00      	cmp	r3, #0
 8005018:	d058      	beq.n	80050cc <HAL_RCC_ClockConfig+0x2bc>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d038      	beq.n	8005094 <HAL_RCC_ClockConfig+0x284>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	2b80      	cmp	r3, #128	; 0x80
 8005028:	d034      	beq.n	8005094 <HAL_RCC_ClockConfig+0x284>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	2b10      	cmp	r3, #16
 8005030:	d030      	beq.n	8005094 <HAL_RCC_ClockConfig+0x284>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	2b90      	cmp	r3, #144	; 0x90
 8005038:	d02c      	beq.n	8005094 <HAL_RCC_ClockConfig+0x284>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	2b20      	cmp	r3, #32
 8005040:	d028      	beq.n	8005094 <HAL_RCC_ClockConfig+0x284>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	2b50      	cmp	r3, #80	; 0x50
 8005048:	d024      	beq.n	8005094 <HAL_RCC_ClockConfig+0x284>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	2ba0      	cmp	r3, #160	; 0xa0
 8005050:	d020      	beq.n	8005094 <HAL_RCC_ClockConfig+0x284>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	2b60      	cmp	r3, #96	; 0x60
 8005058:	d01c      	beq.n	8005094 <HAL_RCC_ClockConfig+0x284>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	2bb0      	cmp	r3, #176	; 0xb0
 8005060:	d018      	beq.n	8005094 <HAL_RCC_ClockConfig+0x284>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	2b70      	cmp	r3, #112	; 0x70
 8005068:	d014      	beq.n	8005094 <HAL_RCC_ClockConfig+0x284>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	2bc0      	cmp	r3, #192	; 0xc0
 8005070:	d010      	beq.n	8005094 <HAL_RCC_ClockConfig+0x284>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	2bd0      	cmp	r3, #208	; 0xd0
 8005078:	d00c      	beq.n	8005094 <HAL_RCC_ClockConfig+0x284>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	2be0      	cmp	r3, #224	; 0xe0
 8005080:	d008      	beq.n	8005094 <HAL_RCC_ClockConfig+0x284>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	2bf0      	cmp	r3, #240	; 0xf0
 8005088:	d004      	beq.n	8005094 <HAL_RCC_ClockConfig+0x284>
 800508a:	f240 413c 	movw	r1, #1084	; 0x43c
 800508e:	4806      	ldr	r0, [pc, #24]	; (80050a8 <HAL_RCC_ClockConfig+0x298>)
 8005090:	f7fc fc22 	bl	80018d8 <assert_failed>
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	4618      	mov	r0, r3
 800509a:	f7ff f8c0 	bl	800421e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800509e:	f7fd fa35 	bl	800250c <HAL_GetTick>
 80050a2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80050a4:	e00d      	b.n	80050c2 <HAL_RCC_ClockConfig+0x2b2>
 80050a6:	bf00      	nop
 80050a8:	0800ed34 	.word	0x0800ed34
 80050ac:	58004000 	.word	0x58004000
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80050b0:	f7fd fa2c 	bl	800250c <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_ClockConfig+0x2b2>
      {
        return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e104      	b.n	80052cc <HAL_RCC_ClockConfig+0x4bc>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80050c2:	f7ff f9a3 	bl	800440c <LL_RCC_IsActiveFlag_SHDHPRE>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d0f1      	beq.n	80050b0 <HAL_RCC_ClockConfig+0x2a0>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0304 	and.w	r3, r3, #4
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d033      	beq.n	8005140 <HAL_RCC_ClockConfig+0x330>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d018      	beq.n	8005112 <HAL_RCC_ClockConfig+0x302>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050e8:	d013      	beq.n	8005112 <HAL_RCC_ClockConfig+0x302>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80050f2:	d00e      	beq.n	8005112 <HAL_RCC_ClockConfig+0x302>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80050fc:	d009      	beq.n	8005112 <HAL_RCC_ClockConfig+0x302>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005106:	d004      	beq.n	8005112 <HAL_RCC_ClockConfig+0x302>
 8005108:	f240 414d 	movw	r1, #1101	; 0x44d
 800510c:	4871      	ldr	r0, [pc, #452]	; (80052d4 <HAL_RCC_ClockConfig+0x4c4>)
 800510e:	f7fc fbe3 	bl	80018d8 <assert_failed>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	4618      	mov	r0, r3
 8005118:	f7ff f898 	bl	800424c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800511c:	f7fd f9f6 	bl	800250c <HAL_GetTick>
 8005120:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005122:	e008      	b.n	8005136 <HAL_RCC_ClockConfig+0x326>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005124:	f7fd f9f2 	bl	800250c <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b02      	cmp	r3, #2
 8005130:	d901      	bls.n	8005136 <HAL_RCC_ClockConfig+0x326>
      {
        return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e0ca      	b.n	80052cc <HAL_RCC_ClockConfig+0x4bc>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005136:	f7ff f97c 	bl	8004432 <LL_RCC_IsActiveFlag_PPRE1>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d0f1      	beq.n	8005124 <HAL_RCC_ClockConfig+0x314>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0308 	and.w	r3, r3, #8
 8005148:	2b00      	cmp	r3, #0
 800514a:	d034      	beq.n	80051b6 <HAL_RCC_ClockConfig+0x3a6>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d018      	beq.n	8005186 <HAL_RCC_ClockConfig+0x376>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800515c:	d013      	beq.n	8005186 <HAL_RCC_ClockConfig+0x376>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005166:	d00e      	beq.n	8005186 <HAL_RCC_ClockConfig+0x376>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005170:	d009      	beq.n	8005186 <HAL_RCC_ClockConfig+0x376>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800517a:	d004      	beq.n	8005186 <HAL_RCC_ClockConfig+0x376>
 800517c:	f240 415e 	movw	r1, #1118	; 0x45e
 8005180:	4854      	ldr	r0, [pc, #336]	; (80052d4 <HAL_RCC_ClockConfig+0x4c4>)
 8005182:	f7fc fba9 	bl	80018d8 <assert_failed>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	4618      	mov	r0, r3
 800518e:	f7ff f871 	bl	8004274 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005192:	f7fd f9bb 	bl	800250c <HAL_GetTick>
 8005196:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005198:	e008      	b.n	80051ac <HAL_RCC_ClockConfig+0x39c>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800519a:	f7fd f9b7 	bl	800250c <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d901      	bls.n	80051ac <HAL_RCC_ClockConfig+0x39c>
      {
        return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e08f      	b.n	80052cc <HAL_RCC_ClockConfig+0x4bc>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80051ac:	f7ff f953 	bl	8004456 <LL_RCC_IsActiveFlag_PPRE2>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d0f1      	beq.n	800519a <HAL_RCC_ClockConfig+0x38a>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d058      	beq.n	8005274 <HAL_RCC_ClockConfig+0x464>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d010      	beq.n	80051ec <HAL_RCC_ClockConfig+0x3dc>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d00c      	beq.n	80051ec <HAL_RCC_ClockConfig+0x3dc>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d008      	beq.n	80051ec <HAL_RCC_ClockConfig+0x3dc>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	2b03      	cmp	r3, #3
 80051e0:	d004      	beq.n	80051ec <HAL_RCC_ClockConfig+0x3dc>
 80051e2:	f240 416f 	movw	r1, #1135	; 0x46f
 80051e6:	483b      	ldr	r0, [pc, #236]	; (80052d4 <HAL_RCC_ClockConfig+0x4c4>)
 80051e8:	f7fc fb76 	bl	80018d8 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d106      	bne.n	8005202 <HAL_RCC_ClockConfig+0x3f2>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80051f4:	f7fe fdfc 	bl	8003df0 <LL_RCC_HSE_IsReady>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d11e      	bne.n	800523c <HAL_RCC_ClockConfig+0x42c>
      {
        return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e064      	b.n	80052cc <HAL_RCC_ClockConfig+0x4bc>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	2b03      	cmp	r3, #3
 8005208:	d106      	bne.n	8005218 <HAL_RCC_ClockConfig+0x408>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800520a:	f7ff f897 	bl	800433c <LL_RCC_PLL_IsReady>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d113      	bne.n	800523c <HAL_RCC_ClockConfig+0x42c>
      {
        return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e059      	b.n	80052cc <HAL_RCC_ClockConfig+0x4bc>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d106      	bne.n	800522e <HAL_RCC_ClockConfig+0x41e>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005220:	f7fe ff64 	bl	80040ec <LL_RCC_MSI_IsReady>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d108      	bne.n	800523c <HAL_RCC_ClockConfig+0x42c>
      {
        return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e04e      	b.n	80052cc <HAL_RCC_ClockConfig+0x4bc>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800522e:	f7fe fe0f 	bl	8003e50 <LL_RCC_HSI_IsReady>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_RCC_ClockConfig+0x42c>
      {
        return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e047      	b.n	80052cc <HAL_RCC_ClockConfig+0x4bc>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	4618      	mov	r0, r3
 8005242:	f7fe ffa2 	bl	800418a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005246:	f7fd f961 	bl	800250c <HAL_GetTick>
 800524a:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800524c:	e00a      	b.n	8005264 <HAL_RCC_ClockConfig+0x454>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800524e:	f7fd f95d 	bl	800250c <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	f241 3288 	movw	r2, #5000	; 0x1388
 800525c:	4293      	cmp	r3, r2
 800525e:	d901      	bls.n	8005264 <HAL_RCC_ClockConfig+0x454>
      {
        return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e033      	b.n	80052cc <HAL_RCC_ClockConfig+0x4bc>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005264:	f7fe ffa5 	bl	80041b2 <LL_RCC_GetSysClkSource>
 8005268:	4602      	mov	r2, r0
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	429a      	cmp	r2, r3
 8005272:	d1ec      	bne.n	800524e <HAL_RCC_ClockConfig+0x43e>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005274:	4b18      	ldr	r3, [pc, #96]	; (80052d8 <HAL_RCC_ClockConfig+0x4c8>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0307 	and.w	r3, r3, #7
 800527c:	683a      	ldr	r2, [r7, #0]
 800527e:	429a      	cmp	r2, r3
 8005280:	d21b      	bcs.n	80052ba <HAL_RCC_ClockConfig+0x4aa>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005282:	4b15      	ldr	r3, [pc, #84]	; (80052d8 <HAL_RCC_ClockConfig+0x4c8>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f023 0207 	bic.w	r2, r3, #7
 800528a:	4913      	ldr	r1, [pc, #76]	; (80052d8 <HAL_RCC_ClockConfig+0x4c8>)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	4313      	orrs	r3, r2
 8005290:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005292:	f7fd f93b 	bl	800250c <HAL_GetTick>
 8005296:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005298:	e008      	b.n	80052ac <HAL_RCC_ClockConfig+0x49c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800529a:	f7fd f937 	bl	800250c <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d901      	bls.n	80052ac <HAL_RCC_ClockConfig+0x49c>
      {
        return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e00f      	b.n	80052cc <HAL_RCC_ClockConfig+0x4bc>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ac:	4b0a      	ldr	r3, [pc, #40]	; (80052d8 <HAL_RCC_ClockConfig+0x4c8>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0307 	and.w	r3, r3, #7
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d1ef      	bne.n	800529a <HAL_RCC_ClockConfig+0x48a>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 80052ba:	f7fc ff33 	bl	8002124 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80052be:	f7fd f931 	bl	8002524 <HAL_GetTickPrio>
 80052c2:	4603      	mov	r3, r0
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7fd f8d5 	bl	8002474 <HAL_InitTick>
 80052ca:	4603      	mov	r3, r0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	0800ed34 	.word	0x0800ed34
 80052d8:	58004000 	.word	0x58004000

080052dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052dc:	b590      	push	{r4, r7, lr}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052e2:	f7fe ff66 	bl	80041b2 <LL_RCC_GetSysClkSource>
 80052e6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10a      	bne.n	8005304 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80052ee:	f7fe ff22 	bl	8004136 <LL_RCC_MSI_GetRange>
 80052f2:	4603      	mov	r3, r0
 80052f4:	091b      	lsrs	r3, r3, #4
 80052f6:	f003 030f 	and.w	r3, r3, #15
 80052fa:	4a2a      	ldr	r2, [pc, #168]	; (80053a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80052fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005300:	60fb      	str	r3, [r7, #12]
 8005302:	e04a      	b.n	800539a <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b04      	cmp	r3, #4
 8005308:	d102      	bne.n	8005310 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800530a:	4b27      	ldr	r3, [pc, #156]	; (80053a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800530c:	60fb      	str	r3, [r7, #12]
 800530e:	e044      	b.n	800539a <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b08      	cmp	r3, #8
 8005314:	d10a      	bne.n	800532c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005316:	f7fe fd1d 	bl	8003d54 <LL_RCC_HSE_IsEnabledDiv2>
 800531a:	4603      	mov	r3, r0
 800531c:	2b01      	cmp	r3, #1
 800531e:	d102      	bne.n	8005326 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005320:	4b21      	ldr	r3, [pc, #132]	; (80053a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005322:	60fb      	str	r3, [r7, #12]
 8005324:	e039      	b.n	800539a <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005326:	4b21      	ldr	r3, [pc, #132]	; (80053ac <HAL_RCC_GetSysClockFreq+0xd0>)
 8005328:	60fb      	str	r3, [r7, #12]
 800532a:	e036      	b.n	800539a <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800532c:	f7ff f83d 	bl	80043aa <LL_RCC_PLL_GetMainSource>
 8005330:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b02      	cmp	r3, #2
 8005336:	d002      	beq.n	800533e <HAL_RCC_GetSysClockFreq+0x62>
 8005338:	2b03      	cmp	r3, #3
 800533a:	d003      	beq.n	8005344 <HAL_RCC_GetSysClockFreq+0x68>
 800533c:	e00d      	b.n	800535a <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800533e:	4b1a      	ldr	r3, [pc, #104]	; (80053a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005340:	60bb      	str	r3, [r7, #8]
        break;
 8005342:	e015      	b.n	8005370 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005344:	f7fe fd06 	bl	8003d54 <LL_RCC_HSE_IsEnabledDiv2>
 8005348:	4603      	mov	r3, r0
 800534a:	2b01      	cmp	r3, #1
 800534c:	d102      	bne.n	8005354 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800534e:	4b16      	ldr	r3, [pc, #88]	; (80053a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005350:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005352:	e00d      	b.n	8005370 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8005354:	4b15      	ldr	r3, [pc, #84]	; (80053ac <HAL_RCC_GetSysClockFreq+0xd0>)
 8005356:	60bb      	str	r3, [r7, #8]
        break;
 8005358:	e00a      	b.n	8005370 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800535a:	f7fe feec 	bl	8004136 <LL_RCC_MSI_GetRange>
 800535e:	4603      	mov	r3, r0
 8005360:	091b      	lsrs	r3, r3, #4
 8005362:	f003 030f 	and.w	r3, r3, #15
 8005366:	4a0f      	ldr	r2, [pc, #60]	; (80053a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800536c:	60bb      	str	r3, [r7, #8]
        break;
 800536e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8005370:	f7fe fff6 	bl	8004360 <LL_RCC_PLL_GetN>
 8005374:	4602      	mov	r2, r0
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	fb03 f402 	mul.w	r4, r3, r2
 800537c:	f7ff f809 	bl	8004392 <LL_RCC_PLL_GetDivider>
 8005380:	4603      	mov	r3, r0
 8005382:	091b      	lsrs	r3, r3, #4
 8005384:	3301      	adds	r3, #1
 8005386:	fbb4 f4f3 	udiv	r4, r4, r3
 800538a:	f7fe fff6 	bl	800437a <LL_RCC_PLL_GetR>
 800538e:	4603      	mov	r3, r0
 8005390:	0f5b      	lsrs	r3, r3, #29
 8005392:	3301      	adds	r3, #1
 8005394:	fbb4 f3f3 	udiv	r3, r4, r3
 8005398:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 800539a:	68fb      	ldr	r3, [r7, #12]
}
 800539c:	4618      	mov	r0, r3
 800539e:	3714      	adds	r7, #20
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd90      	pop	{r4, r7, pc}
 80053a4:	0800ef9c 	.word	0x0800ef9c
 80053a8:	00f42400 	.word	0x00f42400
 80053ac:	01e84800 	.word	0x01e84800

080053b0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053b0:	b598      	push	{r3, r4, r7, lr}
 80053b2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80053b4:	f7ff ff92 	bl	80052dc <HAL_RCC_GetSysClockFreq>
 80053b8:	4604      	mov	r4, r0
 80053ba:	f7fe ff6f 	bl	800429c <LL_RCC_GetAHBPrescaler>
 80053be:	4603      	mov	r3, r0
 80053c0:	091b      	lsrs	r3, r3, #4
 80053c2:	f003 030f 	and.w	r3, r3, #15
 80053c6:	4a03      	ldr	r2, [pc, #12]	; (80053d4 <HAL_RCC_GetHCLKFreq+0x24>)
 80053c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053cc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	bd98      	pop	{r3, r4, r7, pc}
 80053d4:	0800ef3c 	.word	0x0800ef3c

080053d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053d8:	b598      	push	{r3, r4, r7, lr}
 80053da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80053dc:	f7ff ffe8 	bl	80053b0 <HAL_RCC_GetHCLKFreq>
 80053e0:	4604      	mov	r4, r0
 80053e2:	f7fe ff75 	bl	80042d0 <LL_RCC_GetAPB1Prescaler>
 80053e6:	4603      	mov	r3, r0
 80053e8:	0a1b      	lsrs	r3, r3, #8
 80053ea:	f003 0307 	and.w	r3, r3, #7
 80053ee:	4a04      	ldr	r2, [pc, #16]	; (8005400 <HAL_RCC_GetPCLK1Freq+0x28>)
 80053f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053f4:	f003 031f 	and.w	r3, r3, #31
 80053f8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	bd98      	pop	{r3, r4, r7, pc}
 8005400:	0800ef7c 	.word	0x0800ef7c

08005404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005404:	b598      	push	{r3, r4, r7, lr}
 8005406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005408:	f7ff ffd2 	bl	80053b0 <HAL_RCC_GetHCLKFreq>
 800540c:	4604      	mov	r4, r0
 800540e:	f7fe ff6b 	bl	80042e8 <LL_RCC_GetAPB2Prescaler>
 8005412:	4603      	mov	r3, r0
 8005414:	0adb      	lsrs	r3, r3, #11
 8005416:	f003 0307 	and.w	r3, r3, #7
 800541a:	4a04      	ldr	r2, [pc, #16]	; (800542c <HAL_RCC_GetPCLK2Freq+0x28>)
 800541c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005420:	f003 031f 	and.w	r3, r3, #31
 8005424:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005428:	4618      	mov	r0, r3
 800542a:	bd98      	pop	{r3, r4, r7, pc}
 800542c:	0800ef7c 	.word	0x0800ef7c

08005430 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005430:	b590      	push	{r4, r7, lr}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq, msifreq;

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d025      	beq.n	800548a <RCC_SetFlashLatencyFromMSIRange+0x5a>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2b10      	cmp	r3, #16
 8005442:	d022      	beq.n	800548a <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b20      	cmp	r3, #32
 8005448:	d01f      	beq.n	800548a <RCC_SetFlashLatencyFromMSIRange+0x5a>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2b30      	cmp	r3, #48	; 0x30
 800544e:	d01c      	beq.n	800548a <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b40      	cmp	r3, #64	; 0x40
 8005454:	d019      	beq.n	800548a <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b50      	cmp	r3, #80	; 0x50
 800545a:	d016      	beq.n	800548a <RCC_SetFlashLatencyFromMSIRange+0x5a>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b60      	cmp	r3, #96	; 0x60
 8005460:	d013      	beq.n	800548a <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b70      	cmp	r3, #112	; 0x70
 8005466:	d010      	beq.n	800548a <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2b80      	cmp	r3, #128	; 0x80
 800546c:	d00d      	beq.n	800548a <RCC_SetFlashLatencyFromMSIRange+0x5a>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b90      	cmp	r3, #144	; 0x90
 8005472:	d00a      	beq.n	800548a <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2ba0      	cmp	r3, #160	; 0xa0
 8005478:	d007      	beq.n	800548a <RCC_SetFlashLatencyFromMSIRange+0x5a>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2bb0      	cmp	r3, #176	; 0xb0
 800547e:	d004      	beq.n	800548a <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8005480:	f240 6191 	movw	r1, #1681	; 0x691
 8005484:	4817      	ldr	r0, [pc, #92]	; (80054e4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005486:	f7fc fa27 	bl	80018d8 <assert_failed>

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2bb0      	cmp	r3, #176	; 0xb0
 800548e:	d903      	bls.n	8005498 <RCC_SetFlashLatencyFromMSIRange+0x68>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005490:	4b15      	ldr	r3, [pc, #84]	; (80054e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005494:	60fb      	str	r3, [r7, #12]
 8005496:	e007      	b.n	80054a8 <RCC_SetFlashLatencyFromMSIRange+0x78>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	091b      	lsrs	r3, r3, #4
 800549c:	f003 030f 	and.w	r3, r3, #15
 80054a0:	4a11      	ldr	r2, [pc, #68]	; (80054e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054a6:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80054a8:	f7fe ff04 	bl	80042b4 <LL_RCC_GetAHB4Prescaler>
 80054ac:	4603      	mov	r3, r0
 80054ae:	091b      	lsrs	r3, r3, #4
 80054b0:	f003 030f 	and.w	r3, r3, #15
 80054b4:	4a0d      	ldr	r2, [pc, #52]	; (80054ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c0:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	4a0a      	ldr	r2, [pc, #40]	; (80054f0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80054c6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ca:	0c9c      	lsrs	r4, r3, #18
 80054cc:	f7fe fc24 	bl	8003d18 <HAL_PWREx_GetVoltageRange>
 80054d0:	4603      	mov	r3, r0
 80054d2:	4619      	mov	r1, r3
 80054d4:	4620      	mov	r0, r4
 80054d6:	f000 f80d 	bl	80054f4 <RCC_SetFlashLatency>
 80054da:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd90      	pop	{r4, r7, pc}
 80054e4:	0800ed34 	.word	0x0800ed34
 80054e8:	0800ef9c 	.word	0x0800ef9c
 80054ec:	0800ef3c 	.word	0x0800ef3c
 80054f0:	431bde83 	.word	0x431bde83

080054f4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80054f4:	b590      	push	{r4, r7, lr}
 80054f6:	b093      	sub	sp, #76	; 0x4c
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80054fe:	4b39      	ldr	r3, [pc, #228]	; (80055e4 <RCC_SetFlashLatency+0xf0>)
 8005500:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005504:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005506:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800550a:	4a37      	ldr	r2, [pc, #220]	; (80055e8 <RCC_SetFlashLatency+0xf4>)
 800550c:	f107 031c 	add.w	r3, r7, #28
 8005510:	ca07      	ldmia	r2, {r0, r1, r2}
 8005512:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005516:	4b35      	ldr	r3, [pc, #212]	; (80055ec <RCC_SetFlashLatency+0xf8>)
 8005518:	f107 040c 	add.w	r4, r7, #12
 800551c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800551e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005522:	2300      	movs	r3, #0
 8005524:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800552c:	d11c      	bne.n	8005568 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800552e:	2300      	movs	r3, #0
 8005530:	643b      	str	r3, [r7, #64]	; 0x40
 8005532:	e015      	b.n	8005560 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800553c:	4413      	add	r3, r2
 800553e:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	429a      	cmp	r2, r3
 8005546:	d808      	bhi.n	800555a <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005550:	4413      	add	r3, r2
 8005552:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005556:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005558:	e022      	b.n	80055a0 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800555a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800555c:	3301      	adds	r3, #1
 800555e:	643b      	str	r3, [r7, #64]	; 0x40
 8005560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005562:	2b03      	cmp	r3, #3
 8005564:	d9e6      	bls.n	8005534 <RCC_SetFlashLatency+0x40>
 8005566:	e01b      	b.n	80055a0 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005568:	2300      	movs	r3, #0
 800556a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800556c:	e015      	b.n	800559a <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800556e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005576:	4413      	add	r3, r2
 8005578:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	429a      	cmp	r2, r3
 8005580:	d808      	bhi.n	8005594 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800558a:	4413      	add	r3, r2
 800558c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005590:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005592:	e005      	b.n	80055a0 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005596:	3301      	adds	r3, #1
 8005598:	63fb      	str	r3, [r7, #60]	; 0x3c
 800559a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800559c:	2b02      	cmp	r3, #2
 800559e:	d9e6      	bls.n	800556e <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80055a0:	4b13      	ldr	r3, [pc, #76]	; (80055f0 <RCC_SetFlashLatency+0xfc>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f023 0207 	bic.w	r2, r3, #7
 80055a8:	4911      	ldr	r1, [pc, #68]	; (80055f0 <RCC_SetFlashLatency+0xfc>)
 80055aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055ac:	4313      	orrs	r3, r2
 80055ae:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80055b0:	f7fc ffac 	bl	800250c <HAL_GetTick>
 80055b4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80055b6:	e008      	b.n	80055ca <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80055b8:	f7fc ffa8 	bl	800250c <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d901      	bls.n	80055ca <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e007      	b.n	80055da <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80055ca:	4b09      	ldr	r3, [pc, #36]	; (80055f0 <RCC_SetFlashLatency+0xfc>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0307 	and.w	r3, r3, #7
 80055d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d1ef      	bne.n	80055b8 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	374c      	adds	r7, #76	; 0x4c
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd90      	pop	{r4, r7, pc}
 80055e2:	bf00      	nop
 80055e4:	0800ed6c 	.word	0x0800ed6c
 80055e8:	0800ed7c 	.word	0x0800ed7c
 80055ec:	0800ed88 	.word	0x0800ed88
 80055f0:	58004000 	.word	0x58004000

080055f4 <LL_RCC_LSE_IsEnabled>:
{
 80055f4:	b480      	push	{r7}
 80055f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80055f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	2b01      	cmp	r3, #1
 8005606:	d101      	bne.n	800560c <LL_RCC_LSE_IsEnabled+0x18>
 8005608:	2301      	movs	r3, #1
 800560a:	e000      	b.n	800560e <LL_RCC_LSE_IsEnabled+0x1a>
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <LL_RCC_LSE_IsReady>:
{
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800561c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b02      	cmp	r3, #2
 800562a:	d101      	bne.n	8005630 <LL_RCC_LSE_IsReady+0x18>
 800562c:	2301      	movs	r3, #1
 800562e:	e000      	b.n	8005632 <LL_RCC_LSE_IsReady+0x1a>
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <LL_RCC_SetRFWKPClockSource>:
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005648:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800564c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005650:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4313      	orrs	r3, r2
 8005658:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <LL_RCC_SetSMPSClockSource>:
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005676:	f023 0203 	bic.w	r2, r3, #3
 800567a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4313      	orrs	r3, r2
 8005682:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <LL_RCC_SetSMPSPrescaler>:
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800569c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80056a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	624b      	str	r3, [r1, #36]	; 0x24
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <LL_RCC_SetUSARTClockSource>:
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80056c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c8:	f023 0203 	bic.w	r2, r3, #3
 80056cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <LL_RCC_SetLPUARTClockSource>:
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80056ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80056f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4313      	orrs	r3, r2
 8005700:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <LL_RCC_SetI2CClockSource>:
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800571c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	091b      	lsrs	r3, r3, #4
 8005724:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005728:	43db      	mvns	r3, r3
 800572a:	401a      	ands	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	011b      	lsls	r3, r3, #4
 8005730:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005734:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005738:	4313      	orrs	r3, r2
 800573a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800573e:	bf00      	nop
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <LL_RCC_SetLPTIMClockSource>:
{
 800574a:	b480      	push	{r7}
 800574c:	b083      	sub	sp, #12
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005752:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005756:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	0c1b      	lsrs	r3, r3, #16
 800575e:	041b      	lsls	r3, r3, #16
 8005760:	43db      	mvns	r3, r3
 8005762:	401a      	ands	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	041b      	lsls	r3, r3, #16
 8005768:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800576c:	4313      	orrs	r3, r2
 800576e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005772:	bf00      	nop
 8005774:	370c      	adds	r7, #12
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <LL_RCC_SetSAIClockSource>:
{
 800577e:	b480      	push	{r7}
 8005780:	b083      	sub	sp, #12
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005786:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800578a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800578e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005792:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4313      	orrs	r3, r2
 800579a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800579e:	bf00      	nop
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <LL_RCC_SetRNGClockSource>:
{
 80057aa:	b480      	push	{r7}
 80057ac:	b083      	sub	sp, #12
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80057b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ba:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80057be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80057ca:	bf00      	nop
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <LL_RCC_SetCLK48ClockSource>:
{
 80057d6:	b480      	push	{r7}
 80057d8:	b083      	sub	sp, #12
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80057de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80057ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80057f6:	bf00      	nop
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <LL_RCC_SetUSBClockSource>:
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b082      	sub	sp, #8
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7ff ffe3 	bl	80057d6 <LL_RCC_SetCLK48ClockSource>
}
 8005810:	bf00      	nop
 8005812:	3708      	adds	r7, #8
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <LL_RCC_SetADCClockSource>:
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005820:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005828:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800582c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4313      	orrs	r3, r2
 8005834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <LL_RCC_SetRTCClockSource>:
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800584c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005854:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005858:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4313      	orrs	r3, r2
 8005860:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <LL_RCC_GetRTCClockSource>:
{
 8005870:	b480      	push	{r7}
 8005872:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800587c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005880:	4618      	mov	r0, r3
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <LL_RCC_ForceBackupDomainReset>:
{
 800588a:	b480      	push	{r7}
 800588c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800588e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005896:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800589a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800589e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80058a2:	bf00      	nop
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <LL_RCC_ReleaseBackupDomainReset>:
{
 80058ac:	b480      	push	{r7}
 80058ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80058b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80058c4:	bf00      	nop
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <LL_RCC_PLLSAI1_Enable>:
{
 80058ce:	b480      	push	{r7}
 80058d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80058d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058e0:	6013      	str	r3, [r2, #0]
}
 80058e2:	bf00      	nop
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <LL_RCC_PLLSAI1_Disable>:
{
 80058ec:	b480      	push	{r7}
 80058ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80058f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80058fe:	6013      	str	r3, [r2, #0]
}
 8005900:	bf00      	nop
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <LL_RCC_PLLSAI1_IsReady>:
{
 800590a:	b480      	push	{r7}
 800590c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800590e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005918:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800591c:	d101      	bne.n	8005922 <LL_RCC_PLLSAI1_IsReady+0x18>
 800591e:	2301      	movs	r3, #1
 8005920:	e000      	b.n	8005924 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
	...

08005930 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b088      	sub	sp, #32
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005938:	2300      	movs	r3, #0
 800593a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800593c:	2300      	movs	r3, #0
 800593e:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	2b00      	cmp	r3, #0
 800594a:	d14b      	bne.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0302 	and.w	r3, r3, #2
 8005954:	2b00      	cmp	r3, #0
 8005956:	d145      	bne.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0304 	and.w	r3, r3, #4
 8005960:	2b00      	cmp	r3, #0
 8005962:	d13f      	bne.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0308 	and.w	r3, r3, #8
 800596c:	2b00      	cmp	r3, #0
 800596e:	d139      	bne.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0310 	and.w	r3, r3, #16
 8005978:	2b00      	cmp	r3, #0
 800597a:	d133      	bne.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0320 	and.w	r3, r3, #32
 8005984:	2b00      	cmp	r3, #0
 8005986:	d12d      	bne.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005990:	2b00      	cmp	r3, #0
 8005992:	d127      	bne.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800599c:	2b00      	cmp	r3, #0
 800599e:	d121      	bne.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d11b      	bne.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d115      	bne.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10f      	bne.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d109      	bne.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d103      	bne.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80059dc:	219b      	movs	r1, #155	; 0x9b
 80059de:	485b      	ldr	r0, [pc, #364]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80059e0:	f7fb ff7a 	bl	80018d8 <assert_failed>

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d04a      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d012      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xee>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a00:	d00d      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xee>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a0a:	d008      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xee>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a10:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005a14:	d003      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xee>
 8005a16:	21a2      	movs	r1, #162	; 0xa2
 8005a18:	484c      	ldr	r0, [pc, #304]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8005a1a:	f7fb ff5d 	bl	80018d8 <assert_failed>

    switch (PeriphClkInit->Sai1ClockSelection)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a26:	d00c      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005a28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a2c:	d802      	bhi.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d010      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8005a32:	e017      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8005a34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a38:	d017      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x13a>
 8005a3a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005a3e:	d016      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8005a40:	e010      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x134>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a50:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005a52:	e00d      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	3304      	adds	r3, #4
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f000 fa8d 	bl	8005f78 <RCCEx_PLLSAI1_ConfigNP>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005a62:	e005      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x140>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	77fb      	strb	r3, [r7, #31]
        break;
 8005a68:	e002      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005a6a:	bf00      	nop
 8005a6c:	e000      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005a6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a70:	7ffb      	ldrb	r3, [r7, #31]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d105      	bne.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x152>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7ff fe7f 	bl	800577e <LL_RCC_SetSAIClockSource>
 8005a80:	e001      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x156>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a82:	7ffb      	ldrb	r3, [r7, #31]
 8005a84:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d060      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005a92:	f7ff feed 	bl	8005870 <LL_RCC_GetRTCClockSource>
 8005a96:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d012      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aa8:	d00d      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ab2:	d008      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005abc:	d003      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005abe:	21d4      	movs	r1, #212	; 0xd4
 8005ac0:	4822      	ldr	r0, [pc, #136]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8005ac2:	f7fb ff09 	bl	80018d8 <assert_failed>

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aca:	69ba      	ldr	r2, [r7, #24]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d03f      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x220>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005ad0:	f7fe f912 	bl	8003cf8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d105      	bne.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7ff feb0 	bl	8005844 <LL_RCC_SetRTCClockSource>
 8005ae4:	e02e      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x214>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005ae6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aee:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005af0:	f7ff fecb 	bl	800588a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005af4:	f7ff feda 	bl	80058ac <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b02:	4313      	orrs	r3, r2
 8005b04:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005b06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005b10:	f7ff fd70 	bl	80055f4 <LL_RCC_LSE_IsEnabled>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d114      	bne.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x214>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b1a:	f7fc fcf7 	bl	800250c <HAL_GetTick>
 8005b1e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005b20:	e00b      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b22:	f7fc fcf3 	bl	800250c <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d902      	bls.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x20a>
            {
              ret = HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	77fb      	strb	r3, [r7, #31]
              break;
 8005b38:	e004      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x214>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005b3a:	f7ff fd6d 	bl	8005618 <LL_RCC_LSE_IsReady>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d1ee      	bne.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005b44:	7ffb      	ldrb	r3, [r7, #31]
 8005b46:	77bb      	strb	r3, [r7, #30]
 8005b48:	e004      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x224>
 8005b4a:	bf00      	nop
 8005b4c:	0800ed98 	.word	0x0800ed98
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b50:	7ffb      	ldrb	r3, [r7, #31]
 8005b52:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0301 	and.w	r3, r3, #1
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d019      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x264>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d010      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d00c      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	2b03      	cmp	r3, #3
 8005b76:	d008      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d004      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8005b80:	f44f 7189 	mov.w	r1, #274	; 0x112
 8005b84:	4896      	ldr	r0, [pc, #600]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8005b86:	f7fb fea7 	bl	80018d8 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7ff fd92 	bl	80056b8 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0302 	and.w	r3, r3, #2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d01c      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	69db      	ldr	r3, [r3, #28]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d013      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	69db      	ldr	r3, [r3, #28]
 8005bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bb0:	d00e      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bba:	d009      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	69db      	ldr	r3, [r3, #28]
 8005bc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bc4:	d004      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8005bc6:	f240 111d 	movw	r1, #285	; 0x11d
 8005bca:	4885      	ldr	r0, [pc, #532]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8005bcc:	f7fb fe84 	bl	80018d8 <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	69db      	ldr	r3, [r3, #28]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7ff fd85 	bl	80056e4 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0310 	and.w	r3, r3, #16
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d01d      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005bee:	d013      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf4:	4a7b      	ldr	r2, [pc, #492]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d00e      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfe:	4a7a      	ldr	r2, [pc, #488]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d009      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c08:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8005c0c:	d004      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8005c0e:	f240 1127 	movw	r1, #295	; 0x127
 8005c12:	4873      	ldr	r0, [pc, #460]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8005c14:	f7fb fe60 	bl	80018d8 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7ff fd94 	bl	800574a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0320 	and.w	r3, r3, #32
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d01d      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x33a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c32:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c36:	d013      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3c:	4a6b      	ldr	r2, [pc, #428]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d00e      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c46:	4a6a      	ldr	r2, [pc, #424]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x4c0>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d009      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c50:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8005c54:	d004      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005c56:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8005c5a:	4861      	ldr	r0, [pc, #388]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8005c5c:	f7fb fe3c 	bl	80018d8 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7ff fd70 	bl	800574a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0304 	and.w	r3, r3, #4
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d018      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x378>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c7e:	d00e      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a1b      	ldr	r3, [r3, #32]
 8005c84:	4a5b      	ldr	r2, [pc, #364]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x4c4>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d009      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	4a5a      	ldr	r2, [pc, #360]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d004      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005c94:	f44f 719b 	mov.w	r1, #310	; 0x136
 8005c98:	4851      	ldr	r0, [pc, #324]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8005c9a:	f7fb fe1d 	bl	80018d8 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7ff fd34 	bl	8005710 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0308 	and.w	r3, r3, #8
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d018      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005cbc:	d00e      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc2:	4a4e      	ldr	r2, [pc, #312]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d009      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ccc:	4a4c      	ldr	r2, [pc, #304]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d004      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005cd2:	f240 1141 	movw	r1, #321	; 0x141
 8005cd6:	4842      	ldr	r0, [pc, #264]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8005cd8:	f7fb fdfe 	bl	80018d8 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f7ff fd15 	bl	8005710 <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d03a      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d013      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cfe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d02:	d00e      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d0c:	d009      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d12:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005d16:	d004      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005d18:	f240 114b 	movw	r1, #331	; 0x14b
 8005d1c:	4830      	ldr	r0, [pc, #192]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8005d1e:	f7fb fddb 	bl	80018d8 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7ff fd6b 	bl	8005802 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d34:	d107      	bne.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x416>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d44:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d4e:	d10b      	bne.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x438>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	3304      	adds	r3, #4
 8005d54:	4618      	mov	r0, r3
 8005d56:	f000 f9a7 	bl	80060a8 <RCCEx_PLLSAI1_ConfigNQ>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005d5e:	7ffb      	ldrb	r3, [r7, #31]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d001      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x438>
      {
        /* set overall return value */
        status = ret;
 8005d64:	7ffb      	ldrb	r3, [r7, #31]
 8005d66:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d05f      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x504>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d7c:	d01c      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d82:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005d86:	d017      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8c:	f1b3 5fe0 	cmp.w	r3, #469762048	; 0x1c000000
 8005d90:	d012      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00e      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005da2:	d009      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dac:	d004      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005dae:	f240 1167 	movw	r1, #359	; 0x167
 8005db2:	480b      	ldr	r0, [pc, #44]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8005db4:	f7fb fd90 	bl	80018d8 <assert_failed>

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc0:	d008      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dca:	d003      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d117      	bne.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7ff fce6 	bl	80057aa <LL_RCC_SetRNGClockSource>
 8005dde:	e01c      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8005de0:	0800ed98 	.word	0x0800ed98
 8005de4:	000c0004 	.word	0x000c0004
 8005de8:	000c0008 	.word	0x000c0008
 8005dec:	00300010 	.word	0x00300010
 8005df0:	00300020 	.word	0x00300020
 8005df4:	00030100 	.word	0x00030100
 8005df8:	00030200 	.word	0x00030200
 8005dfc:	00301000 	.word	0x00301000
 8005e00:	00302000 	.word	0x00302000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e0c:	60fb      	str	r3, [r7, #12]
 8005e0e:	2000      	movs	r0, #0
 8005e10:	f7ff fccb 	bl	80057aa <LL_RCC_SetRNGClockSource>
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f7ff fcde 	bl	80057d6 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005e22:	d107      	bne.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e32:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d03a      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x586>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d013      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x540>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e50:	d00e      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x540>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e5a:	d009      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x540>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e60:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e64:	d004      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x540>
 8005e66:	f240 1177 	movw	r1, #375	; 0x177
 8005e6a:	4842      	ldr	r0, [pc, #264]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005e6c:	f7fb fd34 	bl	80018d8 <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7ff fccf 	bl	8005818 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e82:	d107      	bne.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x564>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e92:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e9c:	d10b      	bne.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x586>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	3304      	adds	r3, #4
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f000 f998 	bl	80061d8 <RCCEx_PLLSAI1_ConfigNR>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005eac:	7ffb      	ldrb	r3, [r7, #31]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x586>
      {
        /* set overall return value */
        status = ret;
 8005eb2:	7ffb      	ldrb	r3, [r7, #31]
 8005eb4:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d01c      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d013      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ece:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ed2:	d00e      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005edc:	d009      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ee2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005ee6:	d004      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
 8005ee8:	f240 1195 	movw	r1, #405	; 0x195
 8005eec:	4821      	ldr	r0, [pc, #132]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005eee:	f7fb fcf3 	bl	80018d8 <assert_failed>

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7ff fba0 	bl	800563c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d02f      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x638>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d010      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x602>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f14:	2b10      	cmp	r3, #16
 8005f16:	d00c      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x602>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f1c:	2b20      	cmp	r3, #32
 8005f1e:	d008      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x602>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f24:	2b30      	cmp	r3, #48	; 0x30
 8005f26:	d004      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x602>
 8005f28:	f240 11a1 	movw	r1, #417	; 0x1a1
 8005f2c:	4811      	ldr	r0, [pc, #68]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005f2e:	f7fb fcd3 	bl	80018d8 <assert_failed>
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00c      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d008      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d004      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8005f4a:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8005f4e:	4809      	ldr	r0, [pc, #36]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005f50:	f7fb fcc2 	bl	80018d8 <assert_failed>

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7ff fb99 	bl	8005690 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7ff fb80 	bl	8005668 <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 8005f68:	7fbb      	ldrb	r3, [r7, #30]
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3720      	adds	r7, #32
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	0800ed98 	.word	0x0800ed98

08005f78 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f80:	2300      	movs	r3, #0
 8005f82:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2b05      	cmp	r3, #5
 8005f8a:	d903      	bls.n	8005f94 <RCCEx_PLLSAI1_ConfigNP+0x1c>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2b7f      	cmp	r3, #127	; 0x7f
 8005f92:	d904      	bls.n	8005f9e <RCCEx_PLLSAI1_ConfigNP+0x26>
 8005f94:	f240 718d 	movw	r1, #1933	; 0x78d
 8005f98:	4842      	ldr	r0, [pc, #264]	; (80060a4 <RCCEx_PLLSAI1_ConfigNP+0x12c>)
 8005f9a:	f7fb fc9d 	bl	80018d8 <assert_failed>
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fa6:	d304      	bcc.n	8005fb2 <RCCEx_PLLSAI1_ConfigNP+0x3a>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f5b3 1f78 	cmp.w	r3, #4063232	; 0x3e0000
 8005fb0:	d904      	bls.n	8005fbc <RCCEx_PLLSAI1_ConfigNP+0x44>
 8005fb2:	f240 718e 	movw	r1, #1934	; 0x78e
 8005fb6:	483b      	ldr	r0, [pc, #236]	; (80060a4 <RCCEx_PLLSAI1_ConfigNP+0x12c>)
 8005fb8:	f7fb fc8e 	bl	80018d8 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10b      	bne.n	8005fe0 <RCCEx_PLLSAI1_ConfigNP+0x68>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d105      	bne.n	8005fe0 <RCCEx_PLLSAI1_ConfigNP+0x68>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d007      	beq.n	8005ff0 <RCCEx_PLLSAI1_ConfigNP+0x78>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005fe8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d004      	beq.n	8005ffa <RCCEx_PLLSAI1_ConfigNP+0x82>
 8005ff0:	f240 718f 	movw	r1, #1935	; 0x78f
 8005ff4:	482b      	ldr	r0, [pc, #172]	; (80060a4 <RCCEx_PLLSAI1_ConfigNP+0x12c>)
 8005ff6:	f7fb fc6f 	bl	80018d8 <assert_failed>

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005ffa:	f7ff fc77 	bl	80058ec <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005ffe:	f7fc fa85 	bl	800250c <HAL_GetTick>
 8006002:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006004:	e009      	b.n	800601a <RCCEx_PLLSAI1_ConfigNP+0xa2>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006006:	f7fc fa81 	bl	800250c <HAL_GetTick>
 800600a:	4602      	mov	r2, r0
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	2b02      	cmp	r3, #2
 8006012:	d902      	bls.n	800601a <RCCEx_PLLSAI1_ConfigNP+0xa2>
    {
      status = HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	73fb      	strb	r3, [r7, #15]
      break;
 8006018:	e004      	b.n	8006024 <RCCEx_PLLSAI1_ConfigNP+0xac>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800601a:	f7ff fc76 	bl	800590a <LL_RCC_PLLSAI1_IsReady>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d1f0      	bne.n	8006006 <RCCEx_PLLSAI1_ConfigNP+0x8e>
    }
  }

  if (status == HAL_OK)
 8006024:	7bfb      	ldrb	r3, [r7, #15]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d137      	bne.n	800609a <RCCEx_PLLSAI1_ConfigNP+0x122>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800602a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	021b      	lsls	r3, r3, #8
 800603a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800603e:	4313      	orrs	r3, r2
 8006040:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006054:	4313      	orrs	r3, r2
 8006056:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006058:	f7ff fc39 	bl	80058ce <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800605c:	f7fc fa56 	bl	800250c <HAL_GetTick>
 8006060:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006062:	e009      	b.n	8006078 <RCCEx_PLLSAI1_ConfigNP+0x100>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006064:	f7fc fa52 	bl	800250c <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	2b02      	cmp	r3, #2
 8006070:	d902      	bls.n	8006078 <RCCEx_PLLSAI1_ConfigNP+0x100>
      {
        status = HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	73fb      	strb	r3, [r7, #15]
        break;
 8006076:	e004      	b.n	8006082 <RCCEx_PLLSAI1_ConfigNP+0x10a>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006078:	f7ff fc47 	bl	800590a <LL_RCC_PLLSAI1_IsReady>
 800607c:	4603      	mov	r3, r0
 800607e:	2b01      	cmp	r3, #1
 8006080:	d1f0      	bne.n	8006064 <RCCEx_PLLSAI1_ConfigNP+0xec>
      }
    }

    if (status == HAL_OK)
 8006082:	7bfb      	ldrb	r3, [r7, #15]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d108      	bne.n	800609a <RCCEx_PLLSAI1_ConfigNP+0x122>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800608c:	691a      	ldr	r2, [r3, #16]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006096:	4313      	orrs	r3, r2
 8006098:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800609a:	7bfb      	ldrb	r3, [r7, #15]
}
 800609c:	4618      	mov	r0, r3
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	0800ed98 	.word	0x0800ed98

080060a8 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060b0:	2300      	movs	r3, #0
 80060b2:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2b05      	cmp	r3, #5
 80060ba:	d903      	bls.n	80060c4 <RCCEx_PLLSAI1_ConfigNQ+0x1c>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2b7f      	cmp	r3, #127	; 0x7f
 80060c2:	d904      	bls.n	80060ce <RCCEx_PLLSAI1_ConfigNQ+0x26>
 80060c4:	f240 71d2 	movw	r1, #2002	; 0x7d2
 80060c8:	4842      	ldr	r0, [pc, #264]	; (80061d4 <RCCEx_PLLSAI1_ConfigNQ+0x12c>)
 80060ca:	f7fb fc05 	bl	80018d8 <assert_failed>
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060d6:	d304      	bcc.n	80060e2 <RCCEx_PLLSAI1_ConfigNQ+0x3a>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80060e0:	d904      	bls.n	80060ec <RCCEx_PLLSAI1_ConfigNQ+0x44>
 80060e2:	f240 71d3 	movw	r1, #2003	; 0x7d3
 80060e6:	483b      	ldr	r0, [pc, #236]	; (80061d4 <RCCEx_PLLSAI1_ConfigNQ+0x12c>)
 80060e8:	f7fb fbf6 	bl	80018d8 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10b      	bne.n	8006110 <RCCEx_PLLSAI1_ConfigNQ+0x68>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d105      	bne.n	8006110 <RCCEx_PLLSAI1_ConfigNQ+0x68>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d007      	beq.n	8006120 <RCCEx_PLLSAI1_ConfigNQ+0x78>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8006118:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d004      	beq.n	800612a <RCCEx_PLLSAI1_ConfigNQ+0x82>
 8006120:	f240 71d4 	movw	r1, #2004	; 0x7d4
 8006124:	482b      	ldr	r0, [pc, #172]	; (80061d4 <RCCEx_PLLSAI1_ConfigNQ+0x12c>)
 8006126:	f7fb fbd7 	bl	80018d8 <assert_failed>

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800612a:	f7ff fbdf 	bl	80058ec <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800612e:	f7fc f9ed 	bl	800250c <HAL_GetTick>
 8006132:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006134:	e009      	b.n	800614a <RCCEx_PLLSAI1_ConfigNQ+0xa2>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006136:	f7fc f9e9 	bl	800250c <HAL_GetTick>
 800613a:	4602      	mov	r2, r0
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	2b02      	cmp	r3, #2
 8006142:	d902      	bls.n	800614a <RCCEx_PLLSAI1_ConfigNQ+0xa2>
    {
      status = HAL_TIMEOUT;
 8006144:	2303      	movs	r3, #3
 8006146:	73fb      	strb	r3, [r7, #15]
      break;
 8006148:	e004      	b.n	8006154 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800614a:	f7ff fbde 	bl	800590a <LL_RCC_PLLSAI1_IsReady>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1f0      	bne.n	8006136 <RCCEx_PLLSAI1_ConfigNQ+0x8e>
    }
  }

  if (status == HAL_OK)
 8006154:	7bfb      	ldrb	r3, [r7, #15]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d137      	bne.n	80061ca <RCCEx_PLLSAI1_ConfigNQ+0x122>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800615a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	021b      	lsls	r3, r3, #8
 800616a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800616e:	4313      	orrs	r3, r2
 8006170:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006184:	4313      	orrs	r3, r2
 8006186:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006188:	f7ff fba1 	bl	80058ce <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800618c:	f7fc f9be 	bl	800250c <HAL_GetTick>
 8006190:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006192:	e009      	b.n	80061a8 <RCCEx_PLLSAI1_ConfigNQ+0x100>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006194:	f7fc f9ba 	bl	800250c <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d902      	bls.n	80061a8 <RCCEx_PLLSAI1_ConfigNQ+0x100>
      {
        status = HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	73fb      	strb	r3, [r7, #15]
        break;
 80061a6:	e004      	b.n	80061b2 <RCCEx_PLLSAI1_ConfigNQ+0x10a>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80061a8:	f7ff fbaf 	bl	800590a <LL_RCC_PLLSAI1_IsReady>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d1f0      	bne.n	8006194 <RCCEx_PLLSAI1_ConfigNQ+0xec>
      }
    }

    if (status == HAL_OK)
 80061b2:	7bfb      	ldrb	r3, [r7, #15]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d108      	bne.n	80061ca <RCCEx_PLLSAI1_ConfigNQ+0x122>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80061b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061bc:	691a      	ldr	r2, [r3, #16]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061c6:	4313      	orrs	r3, r2
 80061c8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80061ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	0800ed98 	.word	0x0800ed98

080061d8 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061e0:	2300      	movs	r3, #0
 80061e2:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2b05      	cmp	r3, #5
 80061ea:	d903      	bls.n	80061f4 <RCCEx_PLLSAI1_ConfigNR+0x1c>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2b7f      	cmp	r3, #127	; 0x7f
 80061f2:	d904      	bls.n	80061fe <RCCEx_PLLSAI1_ConfigNR+0x26>
 80061f4:	f640 0116 	movw	r1, #2070	; 0x816
 80061f8:	4842      	ldr	r0, [pc, #264]	; (8006304 <RCCEx_PLLSAI1_ConfigNR+0x12c>)
 80061fa:	f7fb fb6d 	bl	80018d8 <assert_failed>
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006206:	d304      	bcc.n	8006212 <RCCEx_PLLSAI1_ConfigNR+0x3a>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8006210:	d904      	bls.n	800621c <RCCEx_PLLSAI1_ConfigNR+0x44>
 8006212:	f640 0117 	movw	r1, #2071	; 0x817
 8006216:	483b      	ldr	r0, [pc, #236]	; (8006304 <RCCEx_PLLSAI1_ConfigNR+0x12c>)
 8006218:	f7fb fb5e 	bl	80018d8 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d10b      	bne.n	8006240 <RCCEx_PLLSAI1_ConfigNR+0x68>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d105      	bne.n	8006240 <RCCEx_PLLSAI1_ConfigNR+0x68>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d007      	beq.n	8006250 <RCCEx_PLLSAI1_ConfigNR+0x78>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8006248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d004      	beq.n	800625a <RCCEx_PLLSAI1_ConfigNR+0x82>
 8006250:	f640 0118 	movw	r1, #2072	; 0x818
 8006254:	482b      	ldr	r0, [pc, #172]	; (8006304 <RCCEx_PLLSAI1_ConfigNR+0x12c>)
 8006256:	f7fb fb3f 	bl	80018d8 <assert_failed>

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800625a:	f7ff fb47 	bl	80058ec <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800625e:	f7fc f955 	bl	800250c <HAL_GetTick>
 8006262:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006264:	e009      	b.n	800627a <RCCEx_PLLSAI1_ConfigNR+0xa2>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006266:	f7fc f951 	bl	800250c <HAL_GetTick>
 800626a:	4602      	mov	r2, r0
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	2b02      	cmp	r3, #2
 8006272:	d902      	bls.n	800627a <RCCEx_PLLSAI1_ConfigNR+0xa2>
    {
      status = HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	73fb      	strb	r3, [r7, #15]
      break;
 8006278:	e004      	b.n	8006284 <RCCEx_PLLSAI1_ConfigNR+0xac>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800627a:	f7ff fb46 	bl	800590a <LL_RCC_PLLSAI1_IsReady>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1f0      	bne.n	8006266 <RCCEx_PLLSAI1_ConfigNR+0x8e>
    }
  }

  if (status == HAL_OK)
 8006284:	7bfb      	ldrb	r3, [r7, #15]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d137      	bne.n	80062fa <RCCEx_PLLSAI1_ConfigNR+0x122>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800628a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	021b      	lsls	r3, r3, #8
 800629a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800629e:	4313      	orrs	r3, r2
 80062a0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80062a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062b4:	4313      	orrs	r3, r2
 80062b6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80062b8:	f7ff fb09 	bl	80058ce <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062bc:	f7fc f926 	bl	800250c <HAL_GetTick>
 80062c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80062c2:	e009      	b.n	80062d8 <RCCEx_PLLSAI1_ConfigNR+0x100>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80062c4:	f7fc f922 	bl	800250c <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d902      	bls.n	80062d8 <RCCEx_PLLSAI1_ConfigNR+0x100>
      {
        status = HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	73fb      	strb	r3, [r7, #15]
        break;
 80062d6:	e004      	b.n	80062e2 <RCCEx_PLLSAI1_ConfigNR+0x10a>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80062d8:	f7ff fb17 	bl	800590a <LL_RCC_PLLSAI1_IsReady>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d1f0      	bne.n	80062c4 <RCCEx_PLLSAI1_ConfigNR+0xec>
      }
    }

    if (status == HAL_OK)
 80062e2:	7bfb      	ldrb	r3, [r7, #15]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d108      	bne.n	80062fa <RCCEx_PLLSAI1_ConfigNR+0x122>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80062e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062ec:	691a      	ldr	r2, [r3, #16]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062f6:	4313      	orrs	r3, r2
 80062f8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80062fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	0800ed98 	.word	0x0800ed98

08006308 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d101      	bne.n	800631a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e0f2      	b.n	8006500 <HAL_RTC_Init+0x1f8>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a7a      	ldr	r2, [pc, #488]	; (8006508 <HAL_RTC_Init+0x200>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d003      	beq.n	800632c <HAL_RTC_Init+0x24>
 8006324:	21f0      	movs	r1, #240	; 0xf0
 8006326:	4879      	ldr	r0, [pc, #484]	; (800650c <HAL_RTC_Init+0x204>)
 8006328:	f7fb fad6 	bl	80018d8 <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	2b40      	cmp	r3, #64	; 0x40
 8006332:	d007      	beq.n	8006344 <HAL_RTC_Init+0x3c>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d003      	beq.n	8006344 <HAL_RTC_Init+0x3c>
 800633c:	21f1      	movs	r1, #241	; 0xf1
 800633e:	4873      	ldr	r0, [pc, #460]	; (800650c <HAL_RTC_Init+0x204>)
 8006340:	f7fb faca 	bl	80018d8 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	2b7f      	cmp	r3, #127	; 0x7f
 800634a:	d903      	bls.n	8006354 <HAL_RTC_Init+0x4c>
 800634c:	21f2      	movs	r1, #242	; 0xf2
 800634e:	486f      	ldr	r0, [pc, #444]	; (800650c <HAL_RTC_Init+0x204>)
 8006350:	f7fb fac2 	bl	80018d8 <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800635c:	d303      	bcc.n	8006366 <HAL_RTC_Init+0x5e>
 800635e:	21f3      	movs	r1, #243	; 0xf3
 8006360:	486a      	ldr	r0, [pc, #424]	; (800650c <HAL_RTC_Init+0x204>)
 8006362:	f7fb fab9 	bl	80018d8 <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d012      	beq.n	8006394 <HAL_RTC_Init+0x8c>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006376:	d00d      	beq.n	8006394 <HAL_RTC_Init+0x8c>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006380:	d008      	beq.n	8006394 <HAL_RTC_Init+0x8c>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800638a:	d003      	beq.n	8006394 <HAL_RTC_Init+0x8c>
 800638c:	21f4      	movs	r1, #244	; 0xf4
 800638e:	485f      	ldr	r0, [pc, #380]	; (800650c <HAL_RTC_Init+0x204>)
 8006390:	f7fb faa2 	bl	80018d8 <assert_failed>
  assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	695b      	ldr	r3, [r3, #20]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d007      	beq.n	80063ac <HAL_RTC_Init+0xa4>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	695b      	ldr	r3, [r3, #20]
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d003      	beq.n	80063ac <HAL_RTC_Init+0xa4>
 80063a4:	21f5      	movs	r1, #245	; 0xf5
 80063a6:	4859      	ldr	r0, [pc, #356]	; (800650c <HAL_RTC_Init+0x204>)
 80063a8:	f7fb fa96 	bl	80018d8 <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	699b      	ldr	r3, [r3, #24]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d008      	beq.n	80063c6 <HAL_RTC_Init+0xbe>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063bc:	d003      	beq.n	80063c6 <HAL_RTC_Init+0xbe>
 80063be:	21f6      	movs	r1, #246	; 0xf6
 80063c0:	4852      	ldr	r0, [pc, #328]	; (800650c <HAL_RTC_Init+0x204>)
 80063c2:	f7fb fa89 	bl	80018d8 <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	69db      	ldr	r3, [r3, #28]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d007      	beq.n	80063de <HAL_RTC_Init+0xd6>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	69db      	ldr	r3, [r3, #28]
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d003      	beq.n	80063de <HAL_RTC_Init+0xd6>
 80063d6:	21f7      	movs	r1, #247	; 0xf7
 80063d8:	484c      	ldr	r0, [pc, #304]	; (800650c <HAL_RTC_Init+0x204>)
 80063da:	f7fb fa7d 	bl	80018d8 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d106      	bne.n	80063f8 <HAL_RTC_Init+0xf0>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f7fb fab2 	bl	800195c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2202      	movs	r2, #2
 80063fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	22ca      	movs	r2, #202	; 0xca
 8006406:	625a      	str	r2, [r3, #36]	; 0x24
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2253      	movs	r2, #83	; 0x53
 800640e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 f8a3 	bl	800655c <RTC_EnterInitMode>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d009      	beq.n	8006430 <HAL_RTC_Init+0x128>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	22ff      	movs	r2, #255	; 0xff
 8006422:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2204      	movs	r2, #4
 8006428:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e067      	b.n	8006500 <HAL_RTC_Init+0x1f8>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	6812      	ldr	r2, [r2, #0]
 800643a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800643e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006442:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	6899      	ldr	r1, [r3, #8]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	431a      	orrs	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	431a      	orrs	r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	430a      	orrs	r2, r1
 8006460:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	68d2      	ldr	r2, [r2, #12]
 800646a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6919      	ldr	r1, [r3, #16]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	041a      	lsls	r2, r3, #16
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	430a      	orrs	r2, r1
 800647e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68da      	ldr	r2, [r3, #12]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800648e:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f022 0203 	bic.w	r2, r2, #3
 800649e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	69da      	ldr	r2, [r3, #28]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	431a      	orrs	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	430a      	orrs	r2, r1
 80064b6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f003 0320 	and.w	r3, r3, #32
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d113      	bne.n	80064ee <HAL_RTC_Init+0x1e6>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f822 	bl	8006510 <HAL_RTC_WaitForSynchro>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00d      	beq.n	80064ee <HAL_RTC_Init+0x1e6>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	22ff      	movs	r2, #255	; 0xff
 80064d8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2204      	movs	r2, #4
 80064de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e008      	b.n	8006500 <HAL_RTC_Init+0x1f8>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	22ff      	movs	r2, #255	; 0xff
 80064f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2201      	movs	r2, #1
 80064fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 80064fe:	2300      	movs	r3, #0
  }
}
 8006500:	4618      	mov	r0, r3
 8006502:	3708      	adds	r7, #8
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	40002800 	.word	0x40002800
 800650c:	0800edd4 	.word	0x0800edd4

08006510 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68da      	ldr	r2, [r3, #12]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006526:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006528:	f7fb fff0 	bl	800250c <HAL_GetTick>
 800652c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800652e:	e009      	b.n	8006544 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006530:	f7fb ffec 	bl	800250c <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800653e:	d901      	bls.n	8006544 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e007      	b.n	8006554 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	f003 0320 	and.w	r3, r3, #32
 800654e:	2b00      	cmp	r3, #0
 8006550:	d0ee      	beq.n	8006530 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3710      	adds	r7, #16
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800656e:	2b00      	cmp	r3, #0
 8006570:	d119      	bne.n	80065a6 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800657a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800657c:	f7fb ffc6 	bl	800250c <HAL_GetTick>
 8006580:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006582:	e009      	b.n	8006598 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8006584:	f7fb ffc2 	bl	800250c <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006592:	d901      	bls.n	8006598 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006594:	2303      	movs	r3, #3
 8006596:	e007      	b.n	80065a8 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d0ee      	beq.n	8006584 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3710      	adds	r7, #16
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <LL_RCC_GetUSARTClockSource>:
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80065b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4013      	ands	r3, r2
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <LL_RCC_GetLPUARTClockSource>:
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80065d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4013      	ands	r3, r2
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e065      	b.n	80066ce <HAL_UART_Init+0xde>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00f      	beq.n	800662a <HAL_UART_Init+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a32      	ldr	r2, [pc, #200]	; (80066d8 <HAL_UART_Init+0xe8>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d019      	beq.n	8006648 <HAL_UART_Init+0x58>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a30      	ldr	r2, [pc, #192]	; (80066dc <HAL_UART_Init+0xec>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d014      	beq.n	8006648 <HAL_UART_Init+0x58>
 800661e:	f44f 719a 	mov.w	r1, #308	; 0x134
 8006622:	482f      	ldr	r0, [pc, #188]	; (80066e0 <HAL_UART_Init+0xf0>)
 8006624:	f7fb f958 	bl	80018d8 <assert_failed>
 8006628:	e00e      	b.n	8006648 <HAL_UART_Init+0x58>
  }
  else
  {
    /* Check the parameters */
#if defined(LPUART1)
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a2a      	ldr	r2, [pc, #168]	; (80066d8 <HAL_UART_Init+0xe8>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d009      	beq.n	8006648 <HAL_UART_Init+0x58>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a28      	ldr	r2, [pc, #160]	; (80066dc <HAL_UART_Init+0xec>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d004      	beq.n	8006648 <HAL_UART_Init+0x58>
 800663e:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8006642:	4827      	ldr	r0, [pc, #156]	; (80066e0 <HAL_UART_Init+0xf0>)
 8006644:	f7fb f948 	bl	80018d8 <assert_failed>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800664e:	2b00      	cmp	r3, #0
 8006650:	d106      	bne.n	8006660 <HAL_UART_Init+0x70>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f7fb fe82 	bl	8002364 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2224      	movs	r2, #36	; 0x24
 8006664:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f022 0201 	bic.w	r2, r2, #1
 8006676:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f835 	bl	80066e8 <UART_SetConfig>
 800667e:	4603      	mov	r3, r0
 8006680:	2b01      	cmp	r3, #1
 8006682:	d101      	bne.n	8006688 <HAL_UART_Init+0x98>
  {
    return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e022      	b.n	80066ce <HAL_UART_Init+0xde>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668c:	2b00      	cmp	r3, #0
 800668e:	d002      	beq.n	8006696 <HAL_UART_Init+0xa6>
  {
    UART_AdvFeatureConfig(huart);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f001 f965 	bl	8007960 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	685a      	ldr	r2, [r3, #4]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	689a      	ldr	r2, [r3, #8]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066b4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f042 0201 	orr.w	r2, r2, #1
 80066c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f001 fa8a 	bl	8007be0 <UART_CheckIdleState>
 80066cc:	4603      	mov	r3, r0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	40013800 	.word	0x40013800
 80066dc:	40008000 	.word	0x40008000
 80066e0:	0800ee0c 	.word	0x0800ee0c
 80066e4:	00000000 	.word	0x00000000

080066e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066e8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80066ec:	b08a      	sub	sp, #40	; 0x28
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80066f2:	2300      	movs	r3, #0
 80066f4:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80066f6:	2300      	movs	r3, #0
 80066f8:	76fb      	strb	r3, [r7, #27]
#if defined(LPUART1)
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80066fa:	2300      	movs	r3, #0
 80066fc:	617b      	str	r3, [r7, #20]
#endif
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	4a9f      	ldr	r2, [pc, #636]	; (8006980 <UART_SetConfig+0x298>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d904      	bls.n	8006712 <UART_SetConfig+0x2a>
 8006708:	f640 313e 	movw	r1, #2878	; 0xb3e
 800670c:	489d      	ldr	r0, [pc, #628]	; (8006984 <UART_SetConfig+0x29c>)
 800670e:	f7fb f8e3 	bl	80018d8 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800671a:	d00d      	beq.n	8006738 <UART_SetConfig+0x50>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d009      	beq.n	8006738 <UART_SetConfig+0x50>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800672c:	d004      	beq.n	8006738 <UART_SetConfig+0x50>
 800672e:	f640 313f 	movw	r1, #2879	; 0xb3f
 8006732:	4894      	ldr	r0, [pc, #592]	; (8006984 <UART_SetConfig+0x29c>)
 8006734:	f7fb f8d0 	bl	80018d8 <assert_failed>
#if defined(LPUART1)
  if (UART_INSTANCE_LOWPOWER(huart))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a92      	ldr	r2, [pc, #584]	; (8006988 <UART_SetConfig+0x2a0>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d10e      	bne.n	8006760 <UART_SetConfig+0x78>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d030      	beq.n	80067ac <UART_SetConfig+0xc4>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006752:	d02b      	beq.n	80067ac <UART_SetConfig+0xc4>
 8006754:	f640 3143 	movw	r1, #2883	; 0xb43
 8006758:	488a      	ldr	r0, [pc, #552]	; (8006984 <UART_SetConfig+0x29c>)
 800675a:	f7fb f8bd 	bl	80018d8 <assert_failed>
 800675e:	e025      	b.n	80067ac <UART_SetConfig+0xc4>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006768:	d012      	beq.n	8006790 <UART_SetConfig+0xa8>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00e      	beq.n	8006790 <UART_SetConfig+0xa8>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800677a:	d009      	beq.n	8006790 <UART_SetConfig+0xa8>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006784:	d004      	beq.n	8006790 <UART_SetConfig+0xa8>
 8006786:	f640 3147 	movw	r1, #2887	; 0xb47
 800678a:	487e      	ldr	r0, [pc, #504]	; (8006984 <UART_SetConfig+0x29c>)
 800678c:	f7fb f8a4 	bl	80018d8 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a1b      	ldr	r3, [r3, #32]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d009      	beq.n	80067ac <UART_SetConfig+0xc4>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a1b      	ldr	r3, [r3, #32]
 800679c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067a0:	d004      	beq.n	80067ac <UART_SetConfig+0xc4>
 80067a2:	f640 3148 	movw	r1, #2888	; 0xb48
 80067a6:	4877      	ldr	r0, [pc, #476]	; (8006984 <UART_SetConfig+0x29c>)
 80067a8:	f7fb f896 	bl	80018d8 <assert_failed>
#else
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
#endif

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00e      	beq.n	80067d2 <UART_SetConfig+0xea>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067bc:	d009      	beq.n	80067d2 <UART_SetConfig+0xea>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80067c6:	d004      	beq.n	80067d2 <UART_SetConfig+0xea>
 80067c8:	f640 314f 	movw	r1, #2895	; 0xb4f
 80067cc:	486d      	ldr	r0, [pc, #436]	; (8006984 <UART_SetConfig+0x29c>)
 80067ce:	f7fb f883 	bl	80018d8 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	f023 030c 	bic.w	r3, r3, #12
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d103      	bne.n	80067e6 <UART_SetConfig+0xfe>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d104      	bne.n	80067f0 <UART_SetConfig+0x108>
 80067e6:	f44f 6135 	mov.w	r1, #2896	; 0xb50
 80067ea:	4866      	ldr	r0, [pc, #408]	; (8006984 <UART_SetConfig+0x29c>)
 80067ec:	f7fb f874 	bl	80018d8 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d013      	beq.n	8006820 <UART_SetConfig+0x138>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006800:	d00e      	beq.n	8006820 <UART_SetConfig+0x138>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800680a:	d009      	beq.n	8006820 <UART_SetConfig+0x138>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006814:	d004      	beq.n	8006820 <UART_SetConfig+0x138>
 8006816:	f640 3151 	movw	r1, #2897	; 0xb51
 800681a:	485a      	ldr	r0, [pc, #360]	; (8006984 <UART_SetConfig+0x29c>)
 800681c:	f7fb f85c 	bl	80018d8 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	69db      	ldr	r3, [r3, #28]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d009      	beq.n	800683c <UART_SetConfig+0x154>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	69db      	ldr	r3, [r3, #28]
 800682c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006830:	d004      	beq.n	800683c <UART_SetConfig+0x154>
 8006832:	f640 3152 	movw	r1, #2898	; 0xb52
 8006836:	4853      	ldr	r0, [pc, #332]	; (8006984 <UART_SetConfig+0x29c>)
 8006838:	f7fb f84e 	bl	80018d8 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006840:	2b00      	cmp	r3, #0
 8006842:	d030      	beq.n	80068a6 <UART_SetConfig+0x1be>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006848:	2b01      	cmp	r3, #1
 800684a:	d02c      	beq.n	80068a6 <UART_SetConfig+0x1be>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006850:	2b02      	cmp	r3, #2
 8006852:	d028      	beq.n	80068a6 <UART_SetConfig+0x1be>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	2b03      	cmp	r3, #3
 800685a:	d024      	beq.n	80068a6 <UART_SetConfig+0x1be>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006860:	2b04      	cmp	r3, #4
 8006862:	d020      	beq.n	80068a6 <UART_SetConfig+0x1be>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006868:	2b05      	cmp	r3, #5
 800686a:	d01c      	beq.n	80068a6 <UART_SetConfig+0x1be>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006870:	2b06      	cmp	r3, #6
 8006872:	d018      	beq.n	80068a6 <UART_SetConfig+0x1be>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006878:	2b07      	cmp	r3, #7
 800687a:	d014      	beq.n	80068a6 <UART_SetConfig+0x1be>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006880:	2b08      	cmp	r3, #8
 8006882:	d010      	beq.n	80068a6 <UART_SetConfig+0x1be>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006888:	2b09      	cmp	r3, #9
 800688a:	d00c      	beq.n	80068a6 <UART_SetConfig+0x1be>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006890:	2b0a      	cmp	r3, #10
 8006892:	d008      	beq.n	80068a6 <UART_SetConfig+0x1be>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006898:	2b0b      	cmp	r3, #11
 800689a:	d004      	beq.n	80068a6 <UART_SetConfig+0x1be>
 800689c:	f640 3153 	movw	r1, #2899	; 0xb53
 80068a0:	4838      	ldr	r0, [pc, #224]	; (8006984 <UART_SetConfig+0x29c>)
 80068a2:	f7fb f819 	bl	80018d8 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	689a      	ldr	r2, [r3, #8]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	431a      	orrs	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	431a      	orrs	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	69db      	ldr	r3, [r3, #28]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068c4:	4313      	orrs	r3, r2
 80068c6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	4b2f      	ldr	r3, [pc, #188]	; (800698c <UART_SetConfig+0x2a4>)
 80068d0:	4013      	ands	r3, r2
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	6812      	ldr	r2, [r2, #0]
 80068d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068d8:	430b      	orrs	r3, r1
 80068da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	68da      	ldr	r2, [r3, #12]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a22      	ldr	r2, [pc, #136]	; (8006988 <UART_SetConfig+0x2a0>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d004      	beq.n	800690c <UART_SetConfig+0x224>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006908:	4313      	orrs	r3, r2
 800690a:	627b      	str	r3, [r7, #36]	; 0x24
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006916:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	6812      	ldr	r2, [r2, #0]
 800691e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006920:	430b      	orrs	r3, r1
 8006922:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692a:	f023 010f 	bic.w	r1, r3, #15
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	430a      	orrs	r2, r1
 8006938:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a14      	ldr	r2, [pc, #80]	; (8006990 <UART_SetConfig+0x2a8>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d130      	bne.n	80069a6 <UART_SetConfig+0x2be>
 8006944:	2003      	movs	r0, #3
 8006946:	f7ff fe33 	bl	80065b0 <LL_RCC_GetUSARTClockSource>
 800694a:	4603      	mov	r3, r0
 800694c:	2b03      	cmp	r3, #3
 800694e:	d825      	bhi.n	800699c <UART_SetConfig+0x2b4>
 8006950:	a201      	add	r2, pc, #4	; (adr r2, 8006958 <UART_SetConfig+0x270>)
 8006952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006956:	bf00      	nop
 8006958:	08006969 	.word	0x08006969
 800695c:	08006979 	.word	0x08006979
 8006960:	08006971 	.word	0x08006971
 8006964:	08006995 	.word	0x08006995
 8006968:	2301      	movs	r3, #1
 800696a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800696e:	e04c      	b.n	8006a0a <UART_SetConfig+0x322>
 8006970:	2302      	movs	r3, #2
 8006972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006976:	e048      	b.n	8006a0a <UART_SetConfig+0x322>
 8006978:	2304      	movs	r3, #4
 800697a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800697e:	e044      	b.n	8006a0a <UART_SetConfig+0x322>
 8006980:	007a1200 	.word	0x007a1200
 8006984:	0800ee0c 	.word	0x0800ee0c
 8006988:	40008000 	.word	0x40008000
 800698c:	cfff69f3 	.word	0xcfff69f3
 8006990:	40013800 	.word	0x40013800
 8006994:	2308      	movs	r3, #8
 8006996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800699a:	e036      	b.n	8006a0a <UART_SetConfig+0x322>
 800699c:	2310      	movs	r3, #16
 800699e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069a2:	bf00      	nop
 80069a4:	e031      	b.n	8006a0a <UART_SetConfig+0x322>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a9f      	ldr	r2, [pc, #636]	; (8006c28 <UART_SetConfig+0x540>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d129      	bne.n	8006a04 <UART_SetConfig+0x31c>
 80069b0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80069b4:	f7ff fe0c 	bl	80065d0 <LL_RCC_GetLPUARTClockSource>
 80069b8:	4603      	mov	r3, r0
 80069ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069be:	d014      	beq.n	80069ea <UART_SetConfig+0x302>
 80069c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069c4:	d802      	bhi.n	80069cc <UART_SetConfig+0x2e4>
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d007      	beq.n	80069da <UART_SetConfig+0x2f2>
 80069ca:	e016      	b.n	80069fa <UART_SetConfig+0x312>
 80069cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069d0:	d007      	beq.n	80069e2 <UART_SetConfig+0x2fa>
 80069d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069d6:	d00c      	beq.n	80069f2 <UART_SetConfig+0x30a>
 80069d8:	e00f      	b.n	80069fa <UART_SetConfig+0x312>
 80069da:	2300      	movs	r3, #0
 80069dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069e0:	e013      	b.n	8006a0a <UART_SetConfig+0x322>
 80069e2:	2302      	movs	r3, #2
 80069e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069e8:	e00f      	b.n	8006a0a <UART_SetConfig+0x322>
 80069ea:	2304      	movs	r3, #4
 80069ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069f0:	e00b      	b.n	8006a0a <UART_SetConfig+0x322>
 80069f2:	2308      	movs	r3, #8
 80069f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069f8:	e007      	b.n	8006a0a <UART_SetConfig+0x322>
 80069fa:	2310      	movs	r3, #16
 80069fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a00:	bf00      	nop
 8006a02:	e002      	b.n	8006a0a <UART_SetConfig+0x322>
 8006a04:	2310      	movs	r3, #16
 8006a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a86      	ldr	r2, [pc, #536]	; (8006c28 <UART_SetConfig+0x540>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	f040 8422 	bne.w	800725a <UART_SetConfig+0xb72>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a1a:	2b08      	cmp	r3, #8
 8006a1c:	f200 8173 	bhi.w	8006d06 <UART_SetConfig+0x61e>
 8006a20:	a201      	add	r2, pc, #4	; (adr r2, 8006a28 <UART_SetConfig+0x340>)
 8006a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a26:	bf00      	nop
 8006a28:	08006a4d 	.word	0x08006a4d
 8006a2c:	08006d07 	.word	0x08006d07
 8006a30:	08006aef 	.word	0x08006aef
 8006a34:	08006d07 	.word	0x08006d07
 8006a38:	08006b87 	.word	0x08006b87
 8006a3c:	08006d07 	.word	0x08006d07
 8006a40:	08006d07 	.word	0x08006d07
 8006a44:	08006d07 	.word	0x08006d07
 8006a48:	08006c59 	.word	0x08006c59
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006a4c:	f7fe fcc4 	bl	80053d8 <HAL_RCC_GetPCLK1Freq>
 8006a50:	4602      	mov	r2, r0
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d044      	beq.n	8006ae4 <UART_SetConfig+0x3fc>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d03e      	beq.n	8006ae0 <UART_SetConfig+0x3f8>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d038      	beq.n	8006adc <UART_SetConfig+0x3f4>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6e:	2b03      	cmp	r3, #3
 8006a70:	d032      	beq.n	8006ad8 <UART_SetConfig+0x3f0>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a76:	2b04      	cmp	r3, #4
 8006a78:	d02c      	beq.n	8006ad4 <UART_SetConfig+0x3ec>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7e:	2b05      	cmp	r3, #5
 8006a80:	d026      	beq.n	8006ad0 <UART_SetConfig+0x3e8>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a86:	2b06      	cmp	r3, #6
 8006a88:	d020      	beq.n	8006acc <UART_SetConfig+0x3e4>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8e:	2b07      	cmp	r3, #7
 8006a90:	d01a      	beq.n	8006ac8 <UART_SetConfig+0x3e0>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a96:	2b08      	cmp	r3, #8
 8006a98:	d014      	beq.n	8006ac4 <UART_SetConfig+0x3dc>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9e:	2b09      	cmp	r3, #9
 8006aa0:	d00e      	beq.n	8006ac0 <UART_SetConfig+0x3d8>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa6:	2b0a      	cmp	r3, #10
 8006aa8:	d008      	beq.n	8006abc <UART_SetConfig+0x3d4>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aae:	2b0b      	cmp	r3, #11
 8006ab0:	d102      	bne.n	8006ab8 <UART_SetConfig+0x3d0>
 8006ab2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ab6:	e016      	b.n	8006ae6 <UART_SetConfig+0x3fe>
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e014      	b.n	8006ae6 <UART_SetConfig+0x3fe>
 8006abc:	2380      	movs	r3, #128	; 0x80
 8006abe:	e012      	b.n	8006ae6 <UART_SetConfig+0x3fe>
 8006ac0:	2340      	movs	r3, #64	; 0x40
 8006ac2:	e010      	b.n	8006ae6 <UART_SetConfig+0x3fe>
 8006ac4:	2320      	movs	r3, #32
 8006ac6:	e00e      	b.n	8006ae6 <UART_SetConfig+0x3fe>
 8006ac8:	2310      	movs	r3, #16
 8006aca:	e00c      	b.n	8006ae6 <UART_SetConfig+0x3fe>
 8006acc:	230c      	movs	r3, #12
 8006ace:	e00a      	b.n	8006ae6 <UART_SetConfig+0x3fe>
 8006ad0:	230a      	movs	r3, #10
 8006ad2:	e008      	b.n	8006ae6 <UART_SetConfig+0x3fe>
 8006ad4:	2308      	movs	r3, #8
 8006ad6:	e006      	b.n	8006ae6 <UART_SetConfig+0x3fe>
 8006ad8:	2306      	movs	r3, #6
 8006ada:	e004      	b.n	8006ae6 <UART_SetConfig+0x3fe>
 8006adc:	2304      	movs	r3, #4
 8006ade:	e002      	b.n	8006ae6 <UART_SetConfig+0x3fe>
 8006ae0:	2302      	movs	r3, #2
 8006ae2:	e000      	b.n	8006ae6 <UART_SetConfig+0x3fe>
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aea:	617b      	str	r3, [r7, #20]
        break;
 8006aec:	e10e      	b.n	8006d0c <UART_SetConfig+0x624>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d044      	beq.n	8006b80 <UART_SetConfig+0x498>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d03e      	beq.n	8006b7c <UART_SetConfig+0x494>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d038      	beq.n	8006b78 <UART_SetConfig+0x490>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0a:	2b03      	cmp	r3, #3
 8006b0c:	d032      	beq.n	8006b74 <UART_SetConfig+0x48c>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b12:	2b04      	cmp	r3, #4
 8006b14:	d02c      	beq.n	8006b70 <UART_SetConfig+0x488>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1a:	2b05      	cmp	r3, #5
 8006b1c:	d026      	beq.n	8006b6c <UART_SetConfig+0x484>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b22:	2b06      	cmp	r3, #6
 8006b24:	d020      	beq.n	8006b68 <UART_SetConfig+0x480>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2a:	2b07      	cmp	r3, #7
 8006b2c:	d01a      	beq.n	8006b64 <UART_SetConfig+0x47c>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b32:	2b08      	cmp	r3, #8
 8006b34:	d014      	beq.n	8006b60 <UART_SetConfig+0x478>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3a:	2b09      	cmp	r3, #9
 8006b3c:	d00e      	beq.n	8006b5c <UART_SetConfig+0x474>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b42:	2b0a      	cmp	r3, #10
 8006b44:	d008      	beq.n	8006b58 <UART_SetConfig+0x470>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4a:	2b0b      	cmp	r3, #11
 8006b4c:	d102      	bne.n	8006b54 <UART_SetConfig+0x46c>
 8006b4e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006b52:	e016      	b.n	8006b82 <UART_SetConfig+0x49a>
 8006b54:	4b35      	ldr	r3, [pc, #212]	; (8006c2c <UART_SetConfig+0x544>)
 8006b56:	e014      	b.n	8006b82 <UART_SetConfig+0x49a>
 8006b58:	4b35      	ldr	r3, [pc, #212]	; (8006c30 <UART_SetConfig+0x548>)
 8006b5a:	e012      	b.n	8006b82 <UART_SetConfig+0x49a>
 8006b5c:	4b35      	ldr	r3, [pc, #212]	; (8006c34 <UART_SetConfig+0x54c>)
 8006b5e:	e010      	b.n	8006b82 <UART_SetConfig+0x49a>
 8006b60:	4b35      	ldr	r3, [pc, #212]	; (8006c38 <UART_SetConfig+0x550>)
 8006b62:	e00e      	b.n	8006b82 <UART_SetConfig+0x49a>
 8006b64:	4b35      	ldr	r3, [pc, #212]	; (8006c3c <UART_SetConfig+0x554>)
 8006b66:	e00c      	b.n	8006b82 <UART_SetConfig+0x49a>
 8006b68:	4b35      	ldr	r3, [pc, #212]	; (8006c40 <UART_SetConfig+0x558>)
 8006b6a:	e00a      	b.n	8006b82 <UART_SetConfig+0x49a>
 8006b6c:	4b35      	ldr	r3, [pc, #212]	; (8006c44 <UART_SetConfig+0x55c>)
 8006b6e:	e008      	b.n	8006b82 <UART_SetConfig+0x49a>
 8006b70:	4b35      	ldr	r3, [pc, #212]	; (8006c48 <UART_SetConfig+0x560>)
 8006b72:	e006      	b.n	8006b82 <UART_SetConfig+0x49a>
 8006b74:	4b35      	ldr	r3, [pc, #212]	; (8006c4c <UART_SetConfig+0x564>)
 8006b76:	e004      	b.n	8006b82 <UART_SetConfig+0x49a>
 8006b78:	4b35      	ldr	r3, [pc, #212]	; (8006c50 <UART_SetConfig+0x568>)
 8006b7a:	e002      	b.n	8006b82 <UART_SetConfig+0x49a>
 8006b7c:	4b35      	ldr	r3, [pc, #212]	; (8006c54 <UART_SetConfig+0x56c>)
 8006b7e:	e000      	b.n	8006b82 <UART_SetConfig+0x49a>
 8006b80:	4b2a      	ldr	r3, [pc, #168]	; (8006c2c <UART_SetConfig+0x544>)
 8006b82:	617b      	str	r3, [r7, #20]
        break;
 8006b84:	e0c2      	b.n	8006d0c <UART_SetConfig+0x624>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006b86:	f7fe fba9 	bl	80052dc <HAL_RCC_GetSysClockFreq>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d044      	beq.n	8006c1e <UART_SetConfig+0x536>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d03e      	beq.n	8006c1a <UART_SetConfig+0x532>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d038      	beq.n	8006c16 <UART_SetConfig+0x52e>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba8:	2b03      	cmp	r3, #3
 8006baa:	d032      	beq.n	8006c12 <UART_SetConfig+0x52a>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb0:	2b04      	cmp	r3, #4
 8006bb2:	d02c      	beq.n	8006c0e <UART_SetConfig+0x526>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb8:	2b05      	cmp	r3, #5
 8006bba:	d026      	beq.n	8006c0a <UART_SetConfig+0x522>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc0:	2b06      	cmp	r3, #6
 8006bc2:	d020      	beq.n	8006c06 <UART_SetConfig+0x51e>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc8:	2b07      	cmp	r3, #7
 8006bca:	d01a      	beq.n	8006c02 <UART_SetConfig+0x51a>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd0:	2b08      	cmp	r3, #8
 8006bd2:	d014      	beq.n	8006bfe <UART_SetConfig+0x516>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd8:	2b09      	cmp	r3, #9
 8006bda:	d00e      	beq.n	8006bfa <UART_SetConfig+0x512>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be0:	2b0a      	cmp	r3, #10
 8006be2:	d008      	beq.n	8006bf6 <UART_SetConfig+0x50e>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be8:	2b0b      	cmp	r3, #11
 8006bea:	d102      	bne.n	8006bf2 <UART_SetConfig+0x50a>
 8006bec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bf0:	e016      	b.n	8006c20 <UART_SetConfig+0x538>
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e014      	b.n	8006c20 <UART_SetConfig+0x538>
 8006bf6:	2380      	movs	r3, #128	; 0x80
 8006bf8:	e012      	b.n	8006c20 <UART_SetConfig+0x538>
 8006bfa:	2340      	movs	r3, #64	; 0x40
 8006bfc:	e010      	b.n	8006c20 <UART_SetConfig+0x538>
 8006bfe:	2320      	movs	r3, #32
 8006c00:	e00e      	b.n	8006c20 <UART_SetConfig+0x538>
 8006c02:	2310      	movs	r3, #16
 8006c04:	e00c      	b.n	8006c20 <UART_SetConfig+0x538>
 8006c06:	230c      	movs	r3, #12
 8006c08:	e00a      	b.n	8006c20 <UART_SetConfig+0x538>
 8006c0a:	230a      	movs	r3, #10
 8006c0c:	e008      	b.n	8006c20 <UART_SetConfig+0x538>
 8006c0e:	2308      	movs	r3, #8
 8006c10:	e006      	b.n	8006c20 <UART_SetConfig+0x538>
 8006c12:	2306      	movs	r3, #6
 8006c14:	e004      	b.n	8006c20 <UART_SetConfig+0x538>
 8006c16:	2304      	movs	r3, #4
 8006c18:	e002      	b.n	8006c20 <UART_SetConfig+0x538>
 8006c1a:	2302      	movs	r3, #2
 8006c1c:	e000      	b.n	8006c20 <UART_SetConfig+0x538>
 8006c1e:	2301      	movs	r3, #1
 8006c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c24:	617b      	str	r3, [r7, #20]
        break;
 8006c26:	e071      	b.n	8006d0c <UART_SetConfig+0x624>
 8006c28:	40008000 	.word	0x40008000
 8006c2c:	00f42400 	.word	0x00f42400
 8006c30:	0001e848 	.word	0x0001e848
 8006c34:	0003d090 	.word	0x0003d090
 8006c38:	0007a120 	.word	0x0007a120
 8006c3c:	000f4240 	.word	0x000f4240
 8006c40:	00145855 	.word	0x00145855
 8006c44:	00186a00 	.word	0x00186a00
 8006c48:	001e8480 	.word	0x001e8480
 8006c4c:	0028b0aa 	.word	0x0028b0aa
 8006c50:	003d0900 	.word	0x003d0900
 8006c54:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d04e      	beq.n	8006cfe <UART_SetConfig+0x616>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d047      	beq.n	8006cf8 <UART_SetConfig+0x610>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6c:	2b02      	cmp	r3, #2
 8006c6e:	d040      	beq.n	8006cf2 <UART_SetConfig+0x60a>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c74:	2b03      	cmp	r3, #3
 8006c76:	d039      	beq.n	8006cec <UART_SetConfig+0x604>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7c:	2b04      	cmp	r3, #4
 8006c7e:	d032      	beq.n	8006ce6 <UART_SetConfig+0x5fe>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c84:	2b05      	cmp	r3, #5
 8006c86:	d02b      	beq.n	8006ce0 <UART_SetConfig+0x5f8>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8c:	2b06      	cmp	r3, #6
 8006c8e:	d024      	beq.n	8006cda <UART_SetConfig+0x5f2>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c94:	2b07      	cmp	r3, #7
 8006c96:	d01d      	beq.n	8006cd4 <UART_SetConfig+0x5ec>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9c:	2b08      	cmp	r3, #8
 8006c9e:	d016      	beq.n	8006cce <UART_SetConfig+0x5e6>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca4:	2b09      	cmp	r3, #9
 8006ca6:	d00f      	beq.n	8006cc8 <UART_SetConfig+0x5e0>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cac:	2b0a      	cmp	r3, #10
 8006cae:	d008      	beq.n	8006cc2 <UART_SetConfig+0x5da>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb4:	2b0b      	cmp	r3, #11
 8006cb6:	d101      	bne.n	8006cbc <UART_SetConfig+0x5d4>
 8006cb8:	2380      	movs	r3, #128	; 0x80
 8006cba:	e022      	b.n	8006d02 <UART_SetConfig+0x61a>
 8006cbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cc0:	e01f      	b.n	8006d02 <UART_SetConfig+0x61a>
 8006cc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cc6:	e01c      	b.n	8006d02 <UART_SetConfig+0x61a>
 8006cc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ccc:	e019      	b.n	8006d02 <UART_SetConfig+0x61a>
 8006cce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cd2:	e016      	b.n	8006d02 <UART_SetConfig+0x61a>
 8006cd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006cd8:	e013      	b.n	8006d02 <UART_SetConfig+0x61a>
 8006cda:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8006cde:	e010      	b.n	8006d02 <UART_SetConfig+0x61a>
 8006ce0:	f640 43cc 	movw	r3, #3276	; 0xccc
 8006ce4:	e00d      	b.n	8006d02 <UART_SetConfig+0x61a>
 8006ce6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006cea:	e00a      	b.n	8006d02 <UART_SetConfig+0x61a>
 8006cec:	f241 5355 	movw	r3, #5461	; 0x1555
 8006cf0:	e007      	b.n	8006d02 <UART_SetConfig+0x61a>
 8006cf2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006cf6:	e004      	b.n	8006d02 <UART_SetConfig+0x61a>
 8006cf8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006cfc:	e001      	b.n	8006d02 <UART_SetConfig+0x61a>
 8006cfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d02:	617b      	str	r3, [r7, #20]
        break;
 8006d04:	e002      	b.n	8006d0c <UART_SetConfig+0x624>
      default:
        ret = HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	76fb      	strb	r3, [r7, #27]
        break;
 8006d0a:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	f000 85fc 	beq.w	800790c <UART_SetConfig+0x1224>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685a      	ldr	r2, [r3, #4]
 8006d18:	4613      	mov	r3, r2
 8006d1a:	005b      	lsls	r3, r3, #1
 8006d1c:	4413      	add	r3, r2
 8006d1e:	697a      	ldr	r2, [r7, #20]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d305      	bcc.n	8006d30 <UART_SetConfig+0x648>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d903      	bls.n	8006d38 <UART_SetConfig+0x650>
      {
        ret = HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	76fb      	strb	r3, [r7, #27]
 8006d34:	f000 bdea 	b.w	800790c <UART_SetConfig+0x1224>
      }
      else
      {
        switch (clocksource)
 8006d38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d3c:	2b08      	cmp	r3, #8
 8006d3e:	f200 8279 	bhi.w	8007234 <UART_SetConfig+0xb4c>
 8006d42:	a201      	add	r2, pc, #4	; (adr r2, 8006d48 <UART_SetConfig+0x660>)
 8006d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d48:	08006d6d 	.word	0x08006d6d
 8006d4c:	08007235 	.word	0x08007235
 8006d50:	08006eab 	.word	0x08006eab
 8006d54:	08007235 	.word	0x08007235
 8006d58:	08006fa1 	.word	0x08006fa1
 8006d5c:	08007235 	.word	0x08007235
 8006d60:	08007235 	.word	0x08007235
 8006d64:	08007235 	.word	0x08007235
 8006d68:	080070df 	.word	0x080070df
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8006d6c:	f7fe fb34 	bl	80053d8 <HAL_RCC_GetPCLK1Freq>
 8006d70:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	4618      	mov	r0, r3
 8006d76:	f04f 0100 	mov.w	r1, #0
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d067      	beq.n	8006e52 <UART_SetConfig+0x76a>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d05e      	beq.n	8006e48 <UART_SetConfig+0x760>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	d055      	beq.n	8006e3e <UART_SetConfig+0x756>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d96:	2b03      	cmp	r3, #3
 8006d98:	d04c      	beq.n	8006e34 <UART_SetConfig+0x74c>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9e:	2b04      	cmp	r3, #4
 8006da0:	d043      	beq.n	8006e2a <UART_SetConfig+0x742>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da6:	2b05      	cmp	r3, #5
 8006da8:	d03a      	beq.n	8006e20 <UART_SetConfig+0x738>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dae:	2b06      	cmp	r3, #6
 8006db0:	d031      	beq.n	8006e16 <UART_SetConfig+0x72e>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db6:	2b07      	cmp	r3, #7
 8006db8:	d028      	beq.n	8006e0c <UART_SetConfig+0x724>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbe:	2b08      	cmp	r3, #8
 8006dc0:	d01f      	beq.n	8006e02 <UART_SetConfig+0x71a>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc6:	2b09      	cmp	r3, #9
 8006dc8:	d016      	beq.n	8006df8 <UART_SetConfig+0x710>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dce:	2b0a      	cmp	r3, #10
 8006dd0:	d00d      	beq.n	8006dee <UART_SetConfig+0x706>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd6:	2b0b      	cmp	r3, #11
 8006dd8:	d104      	bne.n	8006de4 <UART_SetConfig+0x6fc>
 8006dda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006dde:	f04f 0400 	mov.w	r4, #0
 8006de2:	e03a      	b.n	8006e5a <UART_SetConfig+0x772>
 8006de4:	f04f 0301 	mov.w	r3, #1
 8006de8:	f04f 0400 	mov.w	r4, #0
 8006dec:	e035      	b.n	8006e5a <UART_SetConfig+0x772>
 8006dee:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006df2:	f04f 0400 	mov.w	r4, #0
 8006df6:	e030      	b.n	8006e5a <UART_SetConfig+0x772>
 8006df8:	f04f 0340 	mov.w	r3, #64	; 0x40
 8006dfc:	f04f 0400 	mov.w	r4, #0
 8006e00:	e02b      	b.n	8006e5a <UART_SetConfig+0x772>
 8006e02:	f04f 0320 	mov.w	r3, #32
 8006e06:	f04f 0400 	mov.w	r4, #0
 8006e0a:	e026      	b.n	8006e5a <UART_SetConfig+0x772>
 8006e0c:	f04f 0310 	mov.w	r3, #16
 8006e10:	f04f 0400 	mov.w	r4, #0
 8006e14:	e021      	b.n	8006e5a <UART_SetConfig+0x772>
 8006e16:	f04f 030c 	mov.w	r3, #12
 8006e1a:	f04f 0400 	mov.w	r4, #0
 8006e1e:	e01c      	b.n	8006e5a <UART_SetConfig+0x772>
 8006e20:	f04f 030a 	mov.w	r3, #10
 8006e24:	f04f 0400 	mov.w	r4, #0
 8006e28:	e017      	b.n	8006e5a <UART_SetConfig+0x772>
 8006e2a:	f04f 0308 	mov.w	r3, #8
 8006e2e:	f04f 0400 	mov.w	r4, #0
 8006e32:	e012      	b.n	8006e5a <UART_SetConfig+0x772>
 8006e34:	f04f 0306 	mov.w	r3, #6
 8006e38:	f04f 0400 	mov.w	r4, #0
 8006e3c:	e00d      	b.n	8006e5a <UART_SetConfig+0x772>
 8006e3e:	f04f 0304 	mov.w	r3, #4
 8006e42:	f04f 0400 	mov.w	r4, #0
 8006e46:	e008      	b.n	8006e5a <UART_SetConfig+0x772>
 8006e48:	f04f 0302 	mov.w	r3, #2
 8006e4c:	f04f 0400 	mov.w	r4, #0
 8006e50:	e003      	b.n	8006e5a <UART_SetConfig+0x772>
 8006e52:	f04f 0301 	mov.w	r3, #1
 8006e56:	f04f 0400 	mov.w	r4, #0
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	4623      	mov	r3, r4
 8006e5e:	f7f9 f9e7 	bl	8000230 <__aeabi_uldivmod>
 8006e62:	4603      	mov	r3, r0
 8006e64:	460c      	mov	r4, r1
 8006e66:	4619      	mov	r1, r3
 8006e68:	4622      	mov	r2, r4
 8006e6a:	f04f 0300 	mov.w	r3, #0
 8006e6e:	f04f 0400 	mov.w	r4, #0
 8006e72:	0214      	lsls	r4, r2, #8
 8006e74:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006e78:	020b      	lsls	r3, r1, #8
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	6852      	ldr	r2, [r2, #4]
 8006e7e:	0852      	lsrs	r2, r2, #1
 8006e80:	4611      	mov	r1, r2
 8006e82:	f04f 0200 	mov.w	r2, #0
 8006e86:	eb13 0b01 	adds.w	fp, r3, r1
 8006e8a:	eb44 0c02 	adc.w	ip, r4, r2
 8006e8e:	4658      	mov	r0, fp
 8006e90:	4661      	mov	r1, ip
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	f04f 0400 	mov.w	r4, #0
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	4623      	mov	r3, r4
 8006e9e:	f7f9 f9c7 	bl	8000230 <__aeabi_uldivmod>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	460c      	mov	r4, r1
 8006ea6:	61fb      	str	r3, [r7, #28]
            break;
 8006ea8:	e1c7      	b.n	800723a <UART_SetConfig+0xb52>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d05b      	beq.n	8006f6a <UART_SetConfig+0x882>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d053      	beq.n	8006f62 <UART_SetConfig+0x87a>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d04b      	beq.n	8006f5a <UART_SetConfig+0x872>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec6:	2b03      	cmp	r3, #3
 8006ec8:	d043      	beq.n	8006f52 <UART_SetConfig+0x86a>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ece:	2b04      	cmp	r3, #4
 8006ed0:	d03b      	beq.n	8006f4a <UART_SetConfig+0x862>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed6:	2b05      	cmp	r3, #5
 8006ed8:	d033      	beq.n	8006f42 <UART_SetConfig+0x85a>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ede:	2b06      	cmp	r3, #6
 8006ee0:	d02b      	beq.n	8006f3a <UART_SetConfig+0x852>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee6:	2b07      	cmp	r3, #7
 8006ee8:	d023      	beq.n	8006f32 <UART_SetConfig+0x84a>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eee:	2b08      	cmp	r3, #8
 8006ef0:	d01b      	beq.n	8006f2a <UART_SetConfig+0x842>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef6:	2b09      	cmp	r3, #9
 8006ef8:	d013      	beq.n	8006f22 <UART_SetConfig+0x83a>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efe:	2b0a      	cmp	r3, #10
 8006f00:	d00b      	beq.n	8006f1a <UART_SetConfig+0x832>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f06:	2b0b      	cmp	r3, #11
 8006f08:	d103      	bne.n	8006f12 <UART_SetConfig+0x82a>
 8006f0a:	4baf      	ldr	r3, [pc, #700]	; (80071c8 <UART_SetConfig+0xae0>)
 8006f0c:	f04f 0400 	mov.w	r4, #0
 8006f10:	e02e      	b.n	8006f70 <UART_SetConfig+0x888>
 8006f12:	4bae      	ldr	r3, [pc, #696]	; (80071cc <UART_SetConfig+0xae4>)
 8006f14:	f04f 0400 	mov.w	r4, #0
 8006f18:	e02a      	b.n	8006f70 <UART_SetConfig+0x888>
 8006f1a:	4bad      	ldr	r3, [pc, #692]	; (80071d0 <UART_SetConfig+0xae8>)
 8006f1c:	f04f 0400 	mov.w	r4, #0
 8006f20:	e026      	b.n	8006f70 <UART_SetConfig+0x888>
 8006f22:	4bac      	ldr	r3, [pc, #688]	; (80071d4 <UART_SetConfig+0xaec>)
 8006f24:	f04f 0400 	mov.w	r4, #0
 8006f28:	e022      	b.n	8006f70 <UART_SetConfig+0x888>
 8006f2a:	4bab      	ldr	r3, [pc, #684]	; (80071d8 <UART_SetConfig+0xaf0>)
 8006f2c:	f04f 0400 	mov.w	r4, #0
 8006f30:	e01e      	b.n	8006f70 <UART_SetConfig+0x888>
 8006f32:	4baa      	ldr	r3, [pc, #680]	; (80071dc <UART_SetConfig+0xaf4>)
 8006f34:	f04f 0400 	mov.w	r4, #0
 8006f38:	e01a      	b.n	8006f70 <UART_SetConfig+0x888>
 8006f3a:	a49f      	add	r4, pc, #636	; (adr r4, 80071b8 <UART_SetConfig+0xad0>)
 8006f3c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006f40:	e016      	b.n	8006f70 <UART_SetConfig+0x888>
 8006f42:	4ba7      	ldr	r3, [pc, #668]	; (80071e0 <UART_SetConfig+0xaf8>)
 8006f44:	f04f 0400 	mov.w	r4, #0
 8006f48:	e012      	b.n	8006f70 <UART_SetConfig+0x888>
 8006f4a:	4ba6      	ldr	r3, [pc, #664]	; (80071e4 <UART_SetConfig+0xafc>)
 8006f4c:	f04f 0400 	mov.w	r4, #0
 8006f50:	e00e      	b.n	8006f70 <UART_SetConfig+0x888>
 8006f52:	a49b      	add	r4, pc, #620	; (adr r4, 80071c0 <UART_SetConfig+0xad8>)
 8006f54:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006f58:	e00a      	b.n	8006f70 <UART_SetConfig+0x888>
 8006f5a:	4ba3      	ldr	r3, [pc, #652]	; (80071e8 <UART_SetConfig+0xb00>)
 8006f5c:	f04f 0400 	mov.w	r4, #0
 8006f60:	e006      	b.n	8006f70 <UART_SetConfig+0x888>
 8006f62:	4ba2      	ldr	r3, [pc, #648]	; (80071ec <UART_SetConfig+0xb04>)
 8006f64:	f04f 0400 	mov.w	r4, #0
 8006f68:	e002      	b.n	8006f70 <UART_SetConfig+0x888>
 8006f6a:	4b98      	ldr	r3, [pc, #608]	; (80071cc <UART_SetConfig+0xae4>)
 8006f6c:	f04f 0400 	mov.w	r4, #0
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	6852      	ldr	r2, [r2, #4]
 8006f74:	0852      	lsrs	r2, r2, #1
 8006f76:	4611      	mov	r1, r2
 8006f78:	f04f 0200 	mov.w	r2, #0
 8006f7c:	eb13 0b01 	adds.w	fp, r3, r1
 8006f80:	eb44 0c02 	adc.w	ip, r4, r2
 8006f84:	4658      	mov	r0, fp
 8006f86:	4661      	mov	r1, ip
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	f04f 0400 	mov.w	r4, #0
 8006f90:	461a      	mov	r2, r3
 8006f92:	4623      	mov	r3, r4
 8006f94:	f7f9 f94c 	bl	8000230 <__aeabi_uldivmod>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	460c      	mov	r4, r1
 8006f9c:	61fb      	str	r3, [r7, #28]
            break;
 8006f9e:	e14c      	b.n	800723a <UART_SetConfig+0xb52>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8006fa0:	f7fe f99c 	bl	80052dc <HAL_RCC_GetSysClockFreq>
 8006fa4:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f04f 0100 	mov.w	r1, #0
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d067      	beq.n	8007086 <UART_SetConfig+0x99e>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d05e      	beq.n	800707c <UART_SetConfig+0x994>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d055      	beq.n	8007072 <UART_SetConfig+0x98a>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fca:	2b03      	cmp	r3, #3
 8006fcc:	d04c      	beq.n	8007068 <UART_SetConfig+0x980>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd2:	2b04      	cmp	r3, #4
 8006fd4:	d043      	beq.n	800705e <UART_SetConfig+0x976>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fda:	2b05      	cmp	r3, #5
 8006fdc:	d03a      	beq.n	8007054 <UART_SetConfig+0x96c>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe2:	2b06      	cmp	r3, #6
 8006fe4:	d031      	beq.n	800704a <UART_SetConfig+0x962>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fea:	2b07      	cmp	r3, #7
 8006fec:	d028      	beq.n	8007040 <UART_SetConfig+0x958>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff2:	2b08      	cmp	r3, #8
 8006ff4:	d01f      	beq.n	8007036 <UART_SetConfig+0x94e>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffa:	2b09      	cmp	r3, #9
 8006ffc:	d016      	beq.n	800702c <UART_SetConfig+0x944>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007002:	2b0a      	cmp	r3, #10
 8007004:	d00d      	beq.n	8007022 <UART_SetConfig+0x93a>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700a:	2b0b      	cmp	r3, #11
 800700c:	d104      	bne.n	8007018 <UART_SetConfig+0x930>
 800700e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007012:	f04f 0400 	mov.w	r4, #0
 8007016:	e03a      	b.n	800708e <UART_SetConfig+0x9a6>
 8007018:	f04f 0301 	mov.w	r3, #1
 800701c:	f04f 0400 	mov.w	r4, #0
 8007020:	e035      	b.n	800708e <UART_SetConfig+0x9a6>
 8007022:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007026:	f04f 0400 	mov.w	r4, #0
 800702a:	e030      	b.n	800708e <UART_SetConfig+0x9a6>
 800702c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007030:	f04f 0400 	mov.w	r4, #0
 8007034:	e02b      	b.n	800708e <UART_SetConfig+0x9a6>
 8007036:	f04f 0320 	mov.w	r3, #32
 800703a:	f04f 0400 	mov.w	r4, #0
 800703e:	e026      	b.n	800708e <UART_SetConfig+0x9a6>
 8007040:	f04f 0310 	mov.w	r3, #16
 8007044:	f04f 0400 	mov.w	r4, #0
 8007048:	e021      	b.n	800708e <UART_SetConfig+0x9a6>
 800704a:	f04f 030c 	mov.w	r3, #12
 800704e:	f04f 0400 	mov.w	r4, #0
 8007052:	e01c      	b.n	800708e <UART_SetConfig+0x9a6>
 8007054:	f04f 030a 	mov.w	r3, #10
 8007058:	f04f 0400 	mov.w	r4, #0
 800705c:	e017      	b.n	800708e <UART_SetConfig+0x9a6>
 800705e:	f04f 0308 	mov.w	r3, #8
 8007062:	f04f 0400 	mov.w	r4, #0
 8007066:	e012      	b.n	800708e <UART_SetConfig+0x9a6>
 8007068:	f04f 0306 	mov.w	r3, #6
 800706c:	f04f 0400 	mov.w	r4, #0
 8007070:	e00d      	b.n	800708e <UART_SetConfig+0x9a6>
 8007072:	f04f 0304 	mov.w	r3, #4
 8007076:	f04f 0400 	mov.w	r4, #0
 800707a:	e008      	b.n	800708e <UART_SetConfig+0x9a6>
 800707c:	f04f 0302 	mov.w	r3, #2
 8007080:	f04f 0400 	mov.w	r4, #0
 8007084:	e003      	b.n	800708e <UART_SetConfig+0x9a6>
 8007086:	f04f 0301 	mov.w	r3, #1
 800708a:	f04f 0400 	mov.w	r4, #0
 800708e:	461a      	mov	r2, r3
 8007090:	4623      	mov	r3, r4
 8007092:	f7f9 f8cd 	bl	8000230 <__aeabi_uldivmod>
 8007096:	4603      	mov	r3, r0
 8007098:	460c      	mov	r4, r1
 800709a:	4619      	mov	r1, r3
 800709c:	4622      	mov	r2, r4
 800709e:	f04f 0300 	mov.w	r3, #0
 80070a2:	f04f 0400 	mov.w	r4, #0
 80070a6:	0214      	lsls	r4, r2, #8
 80070a8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80070ac:	020b      	lsls	r3, r1, #8
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	6852      	ldr	r2, [r2, #4]
 80070b2:	0852      	lsrs	r2, r2, #1
 80070b4:	4611      	mov	r1, r2
 80070b6:	f04f 0200 	mov.w	r2, #0
 80070ba:	eb13 0b01 	adds.w	fp, r3, r1
 80070be:	eb44 0c02 	adc.w	ip, r4, r2
 80070c2:	4658      	mov	r0, fp
 80070c4:	4661      	mov	r1, ip
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	f04f 0400 	mov.w	r4, #0
 80070ce:	461a      	mov	r2, r3
 80070d0:	4623      	mov	r3, r4
 80070d2:	f7f9 f8ad 	bl	8000230 <__aeabi_uldivmod>
 80070d6:	4603      	mov	r3, r0
 80070d8:	460c      	mov	r4, r1
 80070da:	61fb      	str	r3, [r7, #28]
            break;
 80070dc:	e0ad      	b.n	800723a <UART_SetConfig+0xb52>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f000 808a 	beq.w	80071fc <UART_SetConfig+0xb14>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d05b      	beq.n	80071a8 <UART_SetConfig+0xac0>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d052      	beq.n	800719e <UART_SetConfig+0xab6>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fc:	2b03      	cmp	r3, #3
 80070fe:	d04a      	beq.n	8007196 <UART_SetConfig+0xaae>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007104:	2b04      	cmp	r3, #4
 8007106:	d041      	beq.n	800718c <UART_SetConfig+0xaa4>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710c:	2b05      	cmp	r3, #5
 800710e:	d039      	beq.n	8007184 <UART_SetConfig+0xa9c>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007114:	2b06      	cmp	r3, #6
 8007116:	d031      	beq.n	800717c <UART_SetConfig+0xa94>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711c:	2b07      	cmp	r3, #7
 800711e:	d028      	beq.n	8007172 <UART_SetConfig+0xa8a>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007124:	2b08      	cmp	r3, #8
 8007126:	d01f      	beq.n	8007168 <UART_SetConfig+0xa80>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712c:	2b09      	cmp	r3, #9
 800712e:	d016      	beq.n	800715e <UART_SetConfig+0xa76>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007134:	2b0a      	cmp	r3, #10
 8007136:	d00d      	beq.n	8007154 <UART_SetConfig+0xa6c>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713c:	2b0b      	cmp	r3, #11
 800713e:	d104      	bne.n	800714a <UART_SetConfig+0xa62>
 8007140:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007144:	f04f 0400 	mov.w	r4, #0
 8007148:	e05c      	b.n	8007204 <UART_SetConfig+0xb1c>
 800714a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800714e:	f04f 0400 	mov.w	r4, #0
 8007152:	e057      	b.n	8007204 <UART_SetConfig+0xb1c>
 8007154:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007158:	f04f 0400 	mov.w	r4, #0
 800715c:	e052      	b.n	8007204 <UART_SetConfig+0xb1c>
 800715e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007162:	f04f 0400 	mov.w	r4, #0
 8007166:	e04d      	b.n	8007204 <UART_SetConfig+0xb1c>
 8007168:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800716c:	f04f 0400 	mov.w	r4, #0
 8007170:	e048      	b.n	8007204 <UART_SetConfig+0xb1c>
 8007172:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007176:	f04f 0400 	mov.w	r4, #0
 800717a:	e043      	b.n	8007204 <UART_SetConfig+0xb1c>
 800717c:	4b1c      	ldr	r3, [pc, #112]	; (80071f0 <UART_SetConfig+0xb08>)
 800717e:	f04f 0400 	mov.w	r4, #0
 8007182:	e03f      	b.n	8007204 <UART_SetConfig+0xb1c>
 8007184:	4b1b      	ldr	r3, [pc, #108]	; (80071f4 <UART_SetConfig+0xb0c>)
 8007186:	f04f 0400 	mov.w	r4, #0
 800718a:	e03b      	b.n	8007204 <UART_SetConfig+0xb1c>
 800718c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007190:	f04f 0400 	mov.w	r4, #0
 8007194:	e036      	b.n	8007204 <UART_SetConfig+0xb1c>
 8007196:	4b18      	ldr	r3, [pc, #96]	; (80071f8 <UART_SetConfig+0xb10>)
 8007198:	f04f 0400 	mov.w	r4, #0
 800719c:	e032      	b.n	8007204 <UART_SetConfig+0xb1c>
 800719e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80071a2:	f04f 0400 	mov.w	r4, #0
 80071a6:	e02d      	b.n	8007204 <UART_SetConfig+0xb1c>
 80071a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80071ac:	f04f 0400 	mov.w	r4, #0
 80071b0:	e028      	b.n	8007204 <UART_SetConfig+0xb1c>
 80071b2:	bf00      	nop
 80071b4:	f3af 8000 	nop.w
 80071b8:	14585500 	.word	0x14585500
 80071bc:	00000000 	.word	0x00000000
 80071c0:	28b0aa00 	.word	0x28b0aa00
 80071c4:	00000000 	.word	0x00000000
 80071c8:	00f42400 	.word	0x00f42400
 80071cc:	f4240000 	.word	0xf4240000
 80071d0:	01e84800 	.word	0x01e84800
 80071d4:	03d09000 	.word	0x03d09000
 80071d8:	07a12000 	.word	0x07a12000
 80071dc:	0f424000 	.word	0x0f424000
 80071e0:	186a0000 	.word	0x186a0000
 80071e4:	1e848000 	.word	0x1e848000
 80071e8:	3d090000 	.word	0x3d090000
 80071ec:	7a120000 	.word	0x7a120000
 80071f0:	000aaa00 	.word	0x000aaa00
 80071f4:	000ccc00 	.word	0x000ccc00
 80071f8:	00155500 	.word	0x00155500
 80071fc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007200:	f04f 0400 	mov.w	r4, #0
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	6852      	ldr	r2, [r2, #4]
 8007208:	0852      	lsrs	r2, r2, #1
 800720a:	4611      	mov	r1, r2
 800720c:	f04f 0200 	mov.w	r2, #0
 8007210:	eb13 0b01 	adds.w	fp, r3, r1
 8007214:	eb44 0c02 	adc.w	ip, r4, r2
 8007218:	4658      	mov	r0, fp
 800721a:	4661      	mov	r1, ip
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	f04f 0400 	mov.w	r4, #0
 8007224:	461a      	mov	r2, r3
 8007226:	4623      	mov	r3, r4
 8007228:	f7f9 f802 	bl	8000230 <__aeabi_uldivmod>
 800722c:	4603      	mov	r3, r0
 800722e:	460c      	mov	r4, r1
 8007230:	61fb      	str	r3, [r7, #28]
            break;
 8007232:	e002      	b.n	800723a <UART_SetConfig+0xb52>
          default:
            ret = HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	76fb      	strb	r3, [r7, #27]
            break;
 8007238:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007240:	d308      	bcc.n	8007254 <UART_SetConfig+0xb6c>
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007248:	d204      	bcs.n	8007254 <UART_SetConfig+0xb6c>
        {
          huart->Instance->BRR = usartdiv;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	69fa      	ldr	r2, [r7, #28]
 8007250:	60da      	str	r2, [r3, #12]
 8007252:	e35b      	b.n	800790c <UART_SetConfig+0x1224>
        }
        else
        {
          ret = HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	76fb      	strb	r3, [r7, #27]
 8007258:	e358      	b.n	800790c <UART_SetConfig+0x1224>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	69db      	ldr	r3, [r3, #28]
 800725e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007262:	f040 81a6 	bne.w	80075b2 <UART_SetConfig+0xeca>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007266:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800726a:	3b01      	subs	r3, #1
 800726c:	2b07      	cmp	r3, #7
 800726e:	f200 8180 	bhi.w	8007572 <UART_SetConfig+0xe8a>
 8007272:	a201      	add	r2, pc, #4	; (adr r2, 8007278 <UART_SetConfig+0xb90>)
 8007274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007278:	08007299 	.word	0x08007299
 800727c:	08007351 	.word	0x08007351
 8007280:	08007573 	.word	0x08007573
 8007284:	080073f9 	.word	0x080073f9
 8007288:	08007573 	.word	0x08007573
 800728c:	08007573 	.word	0x08007573
 8007290:	08007573 	.word	0x08007573
 8007294:	080074b1 	.word	0x080074b1
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007298:	f7fe f8b4 	bl	8005404 <HAL_RCC_GetPCLK2Freq>
 800729c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d044      	beq.n	8007330 <UART_SetConfig+0xc48>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d03e      	beq.n	800732c <UART_SetConfig+0xc44>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	d038      	beq.n	8007328 <UART_SetConfig+0xc40>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ba:	2b03      	cmp	r3, #3
 80072bc:	d032      	beq.n	8007324 <UART_SetConfig+0xc3c>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c2:	2b04      	cmp	r3, #4
 80072c4:	d02c      	beq.n	8007320 <UART_SetConfig+0xc38>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ca:	2b05      	cmp	r3, #5
 80072cc:	d026      	beq.n	800731c <UART_SetConfig+0xc34>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d2:	2b06      	cmp	r3, #6
 80072d4:	d020      	beq.n	8007318 <UART_SetConfig+0xc30>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072da:	2b07      	cmp	r3, #7
 80072dc:	d01a      	beq.n	8007314 <UART_SetConfig+0xc2c>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e2:	2b08      	cmp	r3, #8
 80072e4:	d014      	beq.n	8007310 <UART_SetConfig+0xc28>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ea:	2b09      	cmp	r3, #9
 80072ec:	d00e      	beq.n	800730c <UART_SetConfig+0xc24>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f2:	2b0a      	cmp	r3, #10
 80072f4:	d008      	beq.n	8007308 <UART_SetConfig+0xc20>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fa:	2b0b      	cmp	r3, #11
 80072fc:	d102      	bne.n	8007304 <UART_SetConfig+0xc1c>
 80072fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007302:	e016      	b.n	8007332 <UART_SetConfig+0xc4a>
 8007304:	2301      	movs	r3, #1
 8007306:	e014      	b.n	8007332 <UART_SetConfig+0xc4a>
 8007308:	2380      	movs	r3, #128	; 0x80
 800730a:	e012      	b.n	8007332 <UART_SetConfig+0xc4a>
 800730c:	2340      	movs	r3, #64	; 0x40
 800730e:	e010      	b.n	8007332 <UART_SetConfig+0xc4a>
 8007310:	2320      	movs	r3, #32
 8007312:	e00e      	b.n	8007332 <UART_SetConfig+0xc4a>
 8007314:	2310      	movs	r3, #16
 8007316:	e00c      	b.n	8007332 <UART_SetConfig+0xc4a>
 8007318:	230c      	movs	r3, #12
 800731a:	e00a      	b.n	8007332 <UART_SetConfig+0xc4a>
 800731c:	230a      	movs	r3, #10
 800731e:	e008      	b.n	8007332 <UART_SetConfig+0xc4a>
 8007320:	2308      	movs	r3, #8
 8007322:	e006      	b.n	8007332 <UART_SetConfig+0xc4a>
 8007324:	2306      	movs	r3, #6
 8007326:	e004      	b.n	8007332 <UART_SetConfig+0xc4a>
 8007328:	2304      	movs	r3, #4
 800732a:	e002      	b.n	8007332 <UART_SetConfig+0xc4a>
 800732c:	2302      	movs	r3, #2
 800732e:	e000      	b.n	8007332 <UART_SetConfig+0xc4a>
 8007330:	2301      	movs	r3, #1
 8007332:	693a      	ldr	r2, [r7, #16]
 8007334:	fbb2 f3f3 	udiv	r3, r2, r3
 8007338:	005a      	lsls	r2, r3, #1
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	085b      	lsrs	r3, r3, #1
 8007340:	441a      	add	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	fbb2 f3f3 	udiv	r3, r2, r3
 800734a:	b29b      	uxth	r3, r3
 800734c:	61fb      	str	r3, [r7, #28]
        break;
 800734e:	e113      	b.n	8007578 <UART_SetConfig+0xe90>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007354:	2b00      	cmp	r3, #0
 8007356:	d043      	beq.n	80073e0 <UART_SetConfig+0xcf8>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735c:	2b01      	cmp	r3, #1
 800735e:	d03d      	beq.n	80073dc <UART_SetConfig+0xcf4>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007364:	2b02      	cmp	r3, #2
 8007366:	d037      	beq.n	80073d8 <UART_SetConfig+0xcf0>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736c:	2b03      	cmp	r3, #3
 800736e:	d031      	beq.n	80073d4 <UART_SetConfig+0xcec>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007374:	2b04      	cmp	r3, #4
 8007376:	d02b      	beq.n	80073d0 <UART_SetConfig+0xce8>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737c:	2b05      	cmp	r3, #5
 800737e:	d025      	beq.n	80073cc <UART_SetConfig+0xce4>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007384:	2b06      	cmp	r3, #6
 8007386:	d01f      	beq.n	80073c8 <UART_SetConfig+0xce0>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738c:	2b07      	cmp	r3, #7
 800738e:	d019      	beq.n	80073c4 <UART_SetConfig+0xcdc>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007394:	2b08      	cmp	r3, #8
 8007396:	d013      	beq.n	80073c0 <UART_SetConfig+0xcd8>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739c:	2b09      	cmp	r3, #9
 800739e:	d00d      	beq.n	80073bc <UART_SetConfig+0xcd4>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a4:	2b0a      	cmp	r3, #10
 80073a6:	d007      	beq.n	80073b8 <UART_SetConfig+0xcd0>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ac:	2b0b      	cmp	r3, #11
 80073ae:	d101      	bne.n	80073b4 <UART_SetConfig+0xccc>
 80073b0:	4b8c      	ldr	r3, [pc, #560]	; (80075e4 <UART_SetConfig+0xefc>)
 80073b2:	e016      	b.n	80073e2 <UART_SetConfig+0xcfa>
 80073b4:	4b8c      	ldr	r3, [pc, #560]	; (80075e8 <UART_SetConfig+0xf00>)
 80073b6:	e014      	b.n	80073e2 <UART_SetConfig+0xcfa>
 80073b8:	4b8c      	ldr	r3, [pc, #560]	; (80075ec <UART_SetConfig+0xf04>)
 80073ba:	e012      	b.n	80073e2 <UART_SetConfig+0xcfa>
 80073bc:	4b8c      	ldr	r3, [pc, #560]	; (80075f0 <UART_SetConfig+0xf08>)
 80073be:	e010      	b.n	80073e2 <UART_SetConfig+0xcfa>
 80073c0:	4b8c      	ldr	r3, [pc, #560]	; (80075f4 <UART_SetConfig+0xf0c>)
 80073c2:	e00e      	b.n	80073e2 <UART_SetConfig+0xcfa>
 80073c4:	4b8c      	ldr	r3, [pc, #560]	; (80075f8 <UART_SetConfig+0xf10>)
 80073c6:	e00c      	b.n	80073e2 <UART_SetConfig+0xcfa>
 80073c8:	4b8c      	ldr	r3, [pc, #560]	; (80075fc <UART_SetConfig+0xf14>)
 80073ca:	e00a      	b.n	80073e2 <UART_SetConfig+0xcfa>
 80073cc:	4b8c      	ldr	r3, [pc, #560]	; (8007600 <UART_SetConfig+0xf18>)
 80073ce:	e008      	b.n	80073e2 <UART_SetConfig+0xcfa>
 80073d0:	4b8c      	ldr	r3, [pc, #560]	; (8007604 <UART_SetConfig+0xf1c>)
 80073d2:	e006      	b.n	80073e2 <UART_SetConfig+0xcfa>
 80073d4:	4b8c      	ldr	r3, [pc, #560]	; (8007608 <UART_SetConfig+0xf20>)
 80073d6:	e004      	b.n	80073e2 <UART_SetConfig+0xcfa>
 80073d8:	4b8c      	ldr	r3, [pc, #560]	; (800760c <UART_SetConfig+0xf24>)
 80073da:	e002      	b.n	80073e2 <UART_SetConfig+0xcfa>
 80073dc:	4b8c      	ldr	r3, [pc, #560]	; (8007610 <UART_SetConfig+0xf28>)
 80073de:	e000      	b.n	80073e2 <UART_SetConfig+0xcfa>
 80073e0:	4b81      	ldr	r3, [pc, #516]	; (80075e8 <UART_SetConfig+0xf00>)
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	6852      	ldr	r2, [r2, #4]
 80073e6:	0852      	lsrs	r2, r2, #1
 80073e8:	441a      	add	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	61fb      	str	r3, [r7, #28]
        break;
 80073f6:	e0bf      	b.n	8007578 <UART_SetConfig+0xe90>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073f8:	f7fd ff70 	bl	80052dc <HAL_RCC_GetSysClockFreq>
 80073fc:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007402:	2b00      	cmp	r3, #0
 8007404:	d044      	beq.n	8007490 <UART_SetConfig+0xda8>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740a:	2b01      	cmp	r3, #1
 800740c:	d03e      	beq.n	800748c <UART_SetConfig+0xda4>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007412:	2b02      	cmp	r3, #2
 8007414:	d038      	beq.n	8007488 <UART_SetConfig+0xda0>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741a:	2b03      	cmp	r3, #3
 800741c:	d032      	beq.n	8007484 <UART_SetConfig+0xd9c>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007422:	2b04      	cmp	r3, #4
 8007424:	d02c      	beq.n	8007480 <UART_SetConfig+0xd98>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742a:	2b05      	cmp	r3, #5
 800742c:	d026      	beq.n	800747c <UART_SetConfig+0xd94>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007432:	2b06      	cmp	r3, #6
 8007434:	d020      	beq.n	8007478 <UART_SetConfig+0xd90>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743a:	2b07      	cmp	r3, #7
 800743c:	d01a      	beq.n	8007474 <UART_SetConfig+0xd8c>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007442:	2b08      	cmp	r3, #8
 8007444:	d014      	beq.n	8007470 <UART_SetConfig+0xd88>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744a:	2b09      	cmp	r3, #9
 800744c:	d00e      	beq.n	800746c <UART_SetConfig+0xd84>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007452:	2b0a      	cmp	r3, #10
 8007454:	d008      	beq.n	8007468 <UART_SetConfig+0xd80>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745a:	2b0b      	cmp	r3, #11
 800745c:	d102      	bne.n	8007464 <UART_SetConfig+0xd7c>
 800745e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007462:	e016      	b.n	8007492 <UART_SetConfig+0xdaa>
 8007464:	2301      	movs	r3, #1
 8007466:	e014      	b.n	8007492 <UART_SetConfig+0xdaa>
 8007468:	2380      	movs	r3, #128	; 0x80
 800746a:	e012      	b.n	8007492 <UART_SetConfig+0xdaa>
 800746c:	2340      	movs	r3, #64	; 0x40
 800746e:	e010      	b.n	8007492 <UART_SetConfig+0xdaa>
 8007470:	2320      	movs	r3, #32
 8007472:	e00e      	b.n	8007492 <UART_SetConfig+0xdaa>
 8007474:	2310      	movs	r3, #16
 8007476:	e00c      	b.n	8007492 <UART_SetConfig+0xdaa>
 8007478:	230c      	movs	r3, #12
 800747a:	e00a      	b.n	8007492 <UART_SetConfig+0xdaa>
 800747c:	230a      	movs	r3, #10
 800747e:	e008      	b.n	8007492 <UART_SetConfig+0xdaa>
 8007480:	2308      	movs	r3, #8
 8007482:	e006      	b.n	8007492 <UART_SetConfig+0xdaa>
 8007484:	2306      	movs	r3, #6
 8007486:	e004      	b.n	8007492 <UART_SetConfig+0xdaa>
 8007488:	2304      	movs	r3, #4
 800748a:	e002      	b.n	8007492 <UART_SetConfig+0xdaa>
 800748c:	2302      	movs	r3, #2
 800748e:	e000      	b.n	8007492 <UART_SetConfig+0xdaa>
 8007490:	2301      	movs	r3, #1
 8007492:	693a      	ldr	r2, [r7, #16]
 8007494:	fbb2 f3f3 	udiv	r3, r2, r3
 8007498:	005a      	lsls	r2, r3, #1
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	085b      	lsrs	r3, r3, #1
 80074a0:	441a      	add	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	61fb      	str	r3, [r7, #28]
        break;
 80074ae:	e063      	b.n	8007578 <UART_SetConfig+0xe90>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d04f      	beq.n	8007558 <UART_SetConfig+0xe70>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d048      	beq.n	8007552 <UART_SetConfig+0xe6a>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c4:	2b02      	cmp	r3, #2
 80074c6:	d041      	beq.n	800754c <UART_SetConfig+0xe64>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074cc:	2b03      	cmp	r3, #3
 80074ce:	d03a      	beq.n	8007546 <UART_SetConfig+0xe5e>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d4:	2b04      	cmp	r3, #4
 80074d6:	d033      	beq.n	8007540 <UART_SetConfig+0xe58>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074dc:	2b05      	cmp	r3, #5
 80074de:	d02c      	beq.n	800753a <UART_SetConfig+0xe52>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e4:	2b06      	cmp	r3, #6
 80074e6:	d025      	beq.n	8007534 <UART_SetConfig+0xe4c>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ec:	2b07      	cmp	r3, #7
 80074ee:	d01e      	beq.n	800752e <UART_SetConfig+0xe46>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f4:	2b08      	cmp	r3, #8
 80074f6:	d017      	beq.n	8007528 <UART_SetConfig+0xe40>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fc:	2b09      	cmp	r3, #9
 80074fe:	d010      	beq.n	8007522 <UART_SetConfig+0xe3a>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007504:	2b0a      	cmp	r3, #10
 8007506:	d009      	beq.n	800751c <UART_SetConfig+0xe34>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750c:	2b0b      	cmp	r3, #11
 800750e:	d102      	bne.n	8007516 <UART_SetConfig+0xe2e>
 8007510:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007514:	e022      	b.n	800755c <UART_SetConfig+0xe74>
 8007516:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800751a:	e01f      	b.n	800755c <UART_SetConfig+0xe74>
 800751c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007520:	e01c      	b.n	800755c <UART_SetConfig+0xe74>
 8007522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007526:	e019      	b.n	800755c <UART_SetConfig+0xe74>
 8007528:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800752c:	e016      	b.n	800755c <UART_SetConfig+0xe74>
 800752e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007532:	e013      	b.n	800755c <UART_SetConfig+0xe74>
 8007534:	f241 5354 	movw	r3, #5460	; 0x1554
 8007538:	e010      	b.n	800755c <UART_SetConfig+0xe74>
 800753a:	f641 1398 	movw	r3, #6552	; 0x1998
 800753e:	e00d      	b.n	800755c <UART_SetConfig+0xe74>
 8007540:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007544:	e00a      	b.n	800755c <UART_SetConfig+0xe74>
 8007546:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800754a:	e007      	b.n	800755c <UART_SetConfig+0xe74>
 800754c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007550:	e004      	b.n	800755c <UART_SetConfig+0xe74>
 8007552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007556:	e001      	b.n	800755c <UART_SetConfig+0xe74>
 8007558:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	6852      	ldr	r2, [r2, #4]
 8007560:	0852      	lsrs	r2, r2, #1
 8007562:	441a      	add	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	fbb2 f3f3 	udiv	r3, r2, r3
 800756c:	b29b      	uxth	r3, r3
 800756e:	61fb      	str	r3, [r7, #28]
        break;
 8007570:	e002      	b.n	8007578 <UART_SetConfig+0xe90>
      default:
        ret = HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	76fb      	strb	r3, [r7, #27]
        break;
 8007576:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	2b0f      	cmp	r3, #15
 800757c:	d916      	bls.n	80075ac <UART_SetConfig+0xec4>
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007584:	d212      	bcs.n	80075ac <UART_SetConfig+0xec4>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	b29b      	uxth	r3, r3
 800758a:	f023 030f 	bic.w	r3, r3, #15
 800758e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	085b      	lsrs	r3, r3, #1
 8007594:	b29b      	uxth	r3, r3
 8007596:	f003 0307 	and.w	r3, r3, #7
 800759a:	b29a      	uxth	r2, r3
 800759c:	89fb      	ldrh	r3, [r7, #14]
 800759e:	4313      	orrs	r3, r2
 80075a0:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	89fa      	ldrh	r2, [r7, #14]
 80075a8:	60da      	str	r2, [r3, #12]
 80075aa:	e1af      	b.n	800790c <UART_SetConfig+0x1224>
    }
    else
    {
      ret = HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	76fb      	strb	r3, [r7, #27]
 80075b0:	e1ac      	b.n	800790c <UART_SetConfig+0x1224>
    }
  }
  else
  {
    switch (clocksource)
 80075b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075b6:	3b01      	subs	r3, #1
 80075b8:	2b07      	cmp	r3, #7
 80075ba:	f200 8196 	bhi.w	80078ea <UART_SetConfig+0x1202>
 80075be:	a201      	add	r2, pc, #4	; (adr r2, 80075c4 <UART_SetConfig+0xedc>)
 80075c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c4:	08007615 	.word	0x08007615
 80075c8:	080076cb 	.word	0x080076cb
 80075cc:	080078eb 	.word	0x080078eb
 80075d0:	08007775 	.word	0x08007775
 80075d4:	080078eb 	.word	0x080078eb
 80075d8:	080078eb 	.word	0x080078eb
 80075dc:	080078eb 	.word	0x080078eb
 80075e0:	0800782b 	.word	0x0800782b
 80075e4:	0001e848 	.word	0x0001e848
 80075e8:	01e84800 	.word	0x01e84800
 80075ec:	0003d090 	.word	0x0003d090
 80075f0:	0007a120 	.word	0x0007a120
 80075f4:	000f4240 	.word	0x000f4240
 80075f8:	001e8480 	.word	0x001e8480
 80075fc:	0028b0aa 	.word	0x0028b0aa
 8007600:	0030d400 	.word	0x0030d400
 8007604:	003d0900 	.word	0x003d0900
 8007608:	00516154 	.word	0x00516154
 800760c:	007a1200 	.word	0x007a1200
 8007610:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007614:	f7fd fef6 	bl	8005404 <HAL_RCC_GetPCLK2Freq>
 8007618:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761e:	2b00      	cmp	r3, #0
 8007620:	d044      	beq.n	80076ac <UART_SetConfig+0xfc4>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007626:	2b01      	cmp	r3, #1
 8007628:	d03e      	beq.n	80076a8 <UART_SetConfig+0xfc0>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762e:	2b02      	cmp	r3, #2
 8007630:	d038      	beq.n	80076a4 <UART_SetConfig+0xfbc>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007636:	2b03      	cmp	r3, #3
 8007638:	d032      	beq.n	80076a0 <UART_SetConfig+0xfb8>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763e:	2b04      	cmp	r3, #4
 8007640:	d02c      	beq.n	800769c <UART_SetConfig+0xfb4>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007646:	2b05      	cmp	r3, #5
 8007648:	d026      	beq.n	8007698 <UART_SetConfig+0xfb0>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764e:	2b06      	cmp	r3, #6
 8007650:	d020      	beq.n	8007694 <UART_SetConfig+0xfac>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007656:	2b07      	cmp	r3, #7
 8007658:	d01a      	beq.n	8007690 <UART_SetConfig+0xfa8>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765e:	2b08      	cmp	r3, #8
 8007660:	d014      	beq.n	800768c <UART_SetConfig+0xfa4>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007666:	2b09      	cmp	r3, #9
 8007668:	d00e      	beq.n	8007688 <UART_SetConfig+0xfa0>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766e:	2b0a      	cmp	r3, #10
 8007670:	d008      	beq.n	8007684 <UART_SetConfig+0xf9c>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007676:	2b0b      	cmp	r3, #11
 8007678:	d102      	bne.n	8007680 <UART_SetConfig+0xf98>
 800767a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800767e:	e016      	b.n	80076ae <UART_SetConfig+0xfc6>
 8007680:	2301      	movs	r3, #1
 8007682:	e014      	b.n	80076ae <UART_SetConfig+0xfc6>
 8007684:	2380      	movs	r3, #128	; 0x80
 8007686:	e012      	b.n	80076ae <UART_SetConfig+0xfc6>
 8007688:	2340      	movs	r3, #64	; 0x40
 800768a:	e010      	b.n	80076ae <UART_SetConfig+0xfc6>
 800768c:	2320      	movs	r3, #32
 800768e:	e00e      	b.n	80076ae <UART_SetConfig+0xfc6>
 8007690:	2310      	movs	r3, #16
 8007692:	e00c      	b.n	80076ae <UART_SetConfig+0xfc6>
 8007694:	230c      	movs	r3, #12
 8007696:	e00a      	b.n	80076ae <UART_SetConfig+0xfc6>
 8007698:	230a      	movs	r3, #10
 800769a:	e008      	b.n	80076ae <UART_SetConfig+0xfc6>
 800769c:	2308      	movs	r3, #8
 800769e:	e006      	b.n	80076ae <UART_SetConfig+0xfc6>
 80076a0:	2306      	movs	r3, #6
 80076a2:	e004      	b.n	80076ae <UART_SetConfig+0xfc6>
 80076a4:	2304      	movs	r3, #4
 80076a6:	e002      	b.n	80076ae <UART_SetConfig+0xfc6>
 80076a8:	2302      	movs	r3, #2
 80076aa:	e000      	b.n	80076ae <UART_SetConfig+0xfc6>
 80076ac:	2301      	movs	r3, #1
 80076ae:	693a      	ldr	r2, [r7, #16]
 80076b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	085b      	lsrs	r3, r3, #1
 80076ba:	441a      	add	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	61fb      	str	r3, [r7, #28]
        break;
 80076c8:	e112      	b.n	80078f0 <UART_SetConfig+0x1208>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d044      	beq.n	800775c <UART_SetConfig+0x1074>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d03e      	beq.n	8007758 <UART_SetConfig+0x1070>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076de:	2b02      	cmp	r3, #2
 80076e0:	d038      	beq.n	8007754 <UART_SetConfig+0x106c>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e6:	2b03      	cmp	r3, #3
 80076e8:	d032      	beq.n	8007750 <UART_SetConfig+0x1068>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ee:	2b04      	cmp	r3, #4
 80076f0:	d02c      	beq.n	800774c <UART_SetConfig+0x1064>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f6:	2b05      	cmp	r3, #5
 80076f8:	d026      	beq.n	8007748 <UART_SetConfig+0x1060>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fe:	2b06      	cmp	r3, #6
 8007700:	d020      	beq.n	8007744 <UART_SetConfig+0x105c>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007706:	2b07      	cmp	r3, #7
 8007708:	d01a      	beq.n	8007740 <UART_SetConfig+0x1058>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770e:	2b08      	cmp	r3, #8
 8007710:	d014      	beq.n	800773c <UART_SetConfig+0x1054>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007716:	2b09      	cmp	r3, #9
 8007718:	d00e      	beq.n	8007738 <UART_SetConfig+0x1050>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771e:	2b0a      	cmp	r3, #10
 8007720:	d008      	beq.n	8007734 <UART_SetConfig+0x104c>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007726:	2b0b      	cmp	r3, #11
 8007728:	d102      	bne.n	8007730 <UART_SetConfig+0x1048>
 800772a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800772e:	e016      	b.n	800775e <UART_SetConfig+0x1076>
 8007730:	4b80      	ldr	r3, [pc, #512]	; (8007934 <UART_SetConfig+0x124c>)
 8007732:	e014      	b.n	800775e <UART_SetConfig+0x1076>
 8007734:	4b80      	ldr	r3, [pc, #512]	; (8007938 <UART_SetConfig+0x1250>)
 8007736:	e012      	b.n	800775e <UART_SetConfig+0x1076>
 8007738:	4b80      	ldr	r3, [pc, #512]	; (800793c <UART_SetConfig+0x1254>)
 800773a:	e010      	b.n	800775e <UART_SetConfig+0x1076>
 800773c:	4b80      	ldr	r3, [pc, #512]	; (8007940 <UART_SetConfig+0x1258>)
 800773e:	e00e      	b.n	800775e <UART_SetConfig+0x1076>
 8007740:	4b80      	ldr	r3, [pc, #512]	; (8007944 <UART_SetConfig+0x125c>)
 8007742:	e00c      	b.n	800775e <UART_SetConfig+0x1076>
 8007744:	4b80      	ldr	r3, [pc, #512]	; (8007948 <UART_SetConfig+0x1260>)
 8007746:	e00a      	b.n	800775e <UART_SetConfig+0x1076>
 8007748:	4b80      	ldr	r3, [pc, #512]	; (800794c <UART_SetConfig+0x1264>)
 800774a:	e008      	b.n	800775e <UART_SetConfig+0x1076>
 800774c:	4b80      	ldr	r3, [pc, #512]	; (8007950 <UART_SetConfig+0x1268>)
 800774e:	e006      	b.n	800775e <UART_SetConfig+0x1076>
 8007750:	4b80      	ldr	r3, [pc, #512]	; (8007954 <UART_SetConfig+0x126c>)
 8007752:	e004      	b.n	800775e <UART_SetConfig+0x1076>
 8007754:	4b80      	ldr	r3, [pc, #512]	; (8007958 <UART_SetConfig+0x1270>)
 8007756:	e002      	b.n	800775e <UART_SetConfig+0x1076>
 8007758:	4b80      	ldr	r3, [pc, #512]	; (800795c <UART_SetConfig+0x1274>)
 800775a:	e000      	b.n	800775e <UART_SetConfig+0x1076>
 800775c:	4b75      	ldr	r3, [pc, #468]	; (8007934 <UART_SetConfig+0x124c>)
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	6852      	ldr	r2, [r2, #4]
 8007762:	0852      	lsrs	r2, r2, #1
 8007764:	441a      	add	r2, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	fbb2 f3f3 	udiv	r3, r2, r3
 800776e:	b29b      	uxth	r3, r3
 8007770:	61fb      	str	r3, [r7, #28]
        break;
 8007772:	e0bd      	b.n	80078f0 <UART_SetConfig+0x1208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007774:	f7fd fdb2 	bl	80052dc <HAL_RCC_GetSysClockFreq>
 8007778:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777e:	2b00      	cmp	r3, #0
 8007780:	d044      	beq.n	800780c <UART_SetConfig+0x1124>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007786:	2b01      	cmp	r3, #1
 8007788:	d03e      	beq.n	8007808 <UART_SetConfig+0x1120>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778e:	2b02      	cmp	r3, #2
 8007790:	d038      	beq.n	8007804 <UART_SetConfig+0x111c>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007796:	2b03      	cmp	r3, #3
 8007798:	d032      	beq.n	8007800 <UART_SetConfig+0x1118>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779e:	2b04      	cmp	r3, #4
 80077a0:	d02c      	beq.n	80077fc <UART_SetConfig+0x1114>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a6:	2b05      	cmp	r3, #5
 80077a8:	d026      	beq.n	80077f8 <UART_SetConfig+0x1110>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ae:	2b06      	cmp	r3, #6
 80077b0:	d020      	beq.n	80077f4 <UART_SetConfig+0x110c>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b6:	2b07      	cmp	r3, #7
 80077b8:	d01a      	beq.n	80077f0 <UART_SetConfig+0x1108>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077be:	2b08      	cmp	r3, #8
 80077c0:	d014      	beq.n	80077ec <UART_SetConfig+0x1104>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c6:	2b09      	cmp	r3, #9
 80077c8:	d00e      	beq.n	80077e8 <UART_SetConfig+0x1100>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ce:	2b0a      	cmp	r3, #10
 80077d0:	d008      	beq.n	80077e4 <UART_SetConfig+0x10fc>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d6:	2b0b      	cmp	r3, #11
 80077d8:	d102      	bne.n	80077e0 <UART_SetConfig+0x10f8>
 80077da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077de:	e016      	b.n	800780e <UART_SetConfig+0x1126>
 80077e0:	2301      	movs	r3, #1
 80077e2:	e014      	b.n	800780e <UART_SetConfig+0x1126>
 80077e4:	2380      	movs	r3, #128	; 0x80
 80077e6:	e012      	b.n	800780e <UART_SetConfig+0x1126>
 80077e8:	2340      	movs	r3, #64	; 0x40
 80077ea:	e010      	b.n	800780e <UART_SetConfig+0x1126>
 80077ec:	2320      	movs	r3, #32
 80077ee:	e00e      	b.n	800780e <UART_SetConfig+0x1126>
 80077f0:	2310      	movs	r3, #16
 80077f2:	e00c      	b.n	800780e <UART_SetConfig+0x1126>
 80077f4:	230c      	movs	r3, #12
 80077f6:	e00a      	b.n	800780e <UART_SetConfig+0x1126>
 80077f8:	230a      	movs	r3, #10
 80077fa:	e008      	b.n	800780e <UART_SetConfig+0x1126>
 80077fc:	2308      	movs	r3, #8
 80077fe:	e006      	b.n	800780e <UART_SetConfig+0x1126>
 8007800:	2306      	movs	r3, #6
 8007802:	e004      	b.n	800780e <UART_SetConfig+0x1126>
 8007804:	2304      	movs	r3, #4
 8007806:	e002      	b.n	800780e <UART_SetConfig+0x1126>
 8007808:	2302      	movs	r3, #2
 800780a:	e000      	b.n	800780e <UART_SetConfig+0x1126>
 800780c:	2301      	movs	r3, #1
 800780e:	693a      	ldr	r2, [r7, #16]
 8007810:	fbb2 f2f3 	udiv	r2, r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	085b      	lsrs	r3, r3, #1
 800781a:	441a      	add	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	fbb2 f3f3 	udiv	r3, r2, r3
 8007824:	b29b      	uxth	r3, r3
 8007826:	61fb      	str	r3, [r7, #28]
        break;
 8007828:	e062      	b.n	80078f0 <UART_SetConfig+0x1208>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782e:	2b00      	cmp	r3, #0
 8007830:	d04e      	beq.n	80078d0 <UART_SetConfig+0x11e8>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007836:	2b01      	cmp	r3, #1
 8007838:	d047      	beq.n	80078ca <UART_SetConfig+0x11e2>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783e:	2b02      	cmp	r3, #2
 8007840:	d040      	beq.n	80078c4 <UART_SetConfig+0x11dc>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007846:	2b03      	cmp	r3, #3
 8007848:	d039      	beq.n	80078be <UART_SetConfig+0x11d6>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784e:	2b04      	cmp	r3, #4
 8007850:	d032      	beq.n	80078b8 <UART_SetConfig+0x11d0>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007856:	2b05      	cmp	r3, #5
 8007858:	d02b      	beq.n	80078b2 <UART_SetConfig+0x11ca>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785e:	2b06      	cmp	r3, #6
 8007860:	d024      	beq.n	80078ac <UART_SetConfig+0x11c4>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007866:	2b07      	cmp	r3, #7
 8007868:	d01d      	beq.n	80078a6 <UART_SetConfig+0x11be>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786e:	2b08      	cmp	r3, #8
 8007870:	d016      	beq.n	80078a0 <UART_SetConfig+0x11b8>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007876:	2b09      	cmp	r3, #9
 8007878:	d00f      	beq.n	800789a <UART_SetConfig+0x11b2>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787e:	2b0a      	cmp	r3, #10
 8007880:	d008      	beq.n	8007894 <UART_SetConfig+0x11ac>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007886:	2b0b      	cmp	r3, #11
 8007888:	d101      	bne.n	800788e <UART_SetConfig+0x11a6>
 800788a:	2380      	movs	r3, #128	; 0x80
 800788c:	e022      	b.n	80078d4 <UART_SetConfig+0x11ec>
 800788e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007892:	e01f      	b.n	80078d4 <UART_SetConfig+0x11ec>
 8007894:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007898:	e01c      	b.n	80078d4 <UART_SetConfig+0x11ec>
 800789a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800789e:	e019      	b.n	80078d4 <UART_SetConfig+0x11ec>
 80078a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078a4:	e016      	b.n	80078d4 <UART_SetConfig+0x11ec>
 80078a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80078aa:	e013      	b.n	80078d4 <UART_SetConfig+0x11ec>
 80078ac:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80078b0:	e010      	b.n	80078d4 <UART_SetConfig+0x11ec>
 80078b2:	f640 43cc 	movw	r3, #3276	; 0xccc
 80078b6:	e00d      	b.n	80078d4 <UART_SetConfig+0x11ec>
 80078b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078bc:	e00a      	b.n	80078d4 <UART_SetConfig+0x11ec>
 80078be:	f241 5355 	movw	r3, #5461	; 0x1555
 80078c2:	e007      	b.n	80078d4 <UART_SetConfig+0x11ec>
 80078c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80078c8:	e004      	b.n	80078d4 <UART_SetConfig+0x11ec>
 80078ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80078ce:	e001      	b.n	80078d4 <UART_SetConfig+0x11ec>
 80078d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	6852      	ldr	r2, [r2, #4]
 80078d8:	0852      	lsrs	r2, r2, #1
 80078da:	441a      	add	r2, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	61fb      	str	r3, [r7, #28]
        break;
 80078e8:	e002      	b.n	80078f0 <UART_SetConfig+0x1208>
      default:
        ret = HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	76fb      	strb	r3, [r7, #27]
        break;
 80078ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	2b0f      	cmp	r3, #15
 80078f4:	d908      	bls.n	8007908 <UART_SetConfig+0x1220>
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078fc:	d204      	bcs.n	8007908 <UART_SetConfig+0x1220>
    {
      huart->Instance->BRR = usartdiv;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	69fa      	ldr	r2, [r7, #28]
 8007904:	60da      	str	r2, [r3, #12]
 8007906:	e001      	b.n	800790c <UART_SetConfig+0x1224>
    }
    else
    {
      ret = HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8007928:	7efb      	ldrb	r3, [r7, #27]
}
 800792a:	4618      	mov	r0, r3
 800792c:	3728      	adds	r7, #40	; 0x28
 800792e:	46bd      	mov	sp, r7
 8007930:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007934:	00f42400 	.word	0x00f42400
 8007938:	0001e848 	.word	0x0001e848
 800793c:	0003d090 	.word	0x0003d090
 8007940:	0007a120 	.word	0x0007a120
 8007944:	000f4240 	.word	0x000f4240
 8007948:	00145855 	.word	0x00145855
 800794c:	00186a00 	.word	0x00186a00
 8007950:	001e8480 	.word	0x001e8480
 8007954:	0028b0aa 	.word	0x0028b0aa
 8007958:	003d0900 	.word	0x003d0900
 800795c:	007a1200 	.word	0x007a1200

08007960 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800796c:	2bff      	cmp	r3, #255	; 0xff
 800796e:	d904      	bls.n	800797a <UART_AdvFeatureConfig+0x1a>
 8007970:	f640 411f 	movw	r1, #3103	; 0xc1f
 8007974:	4898      	ldr	r0, [pc, #608]	; (8007bd8 <UART_AdvFeatureConfig+0x278>)
 8007976:	f7f9 ffaf 	bl	80018d8 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800797e:	f003 0301 	and.w	r3, r3, #1
 8007982:	2b00      	cmp	r3, #0
 8007984:	d018      	beq.n	80079b8 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798a:	2b00      	cmp	r3, #0
 800798c:	d009      	beq.n	80079a2 <UART_AdvFeatureConfig+0x42>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007992:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007996:	d004      	beq.n	80079a2 <UART_AdvFeatureConfig+0x42>
 8007998:	f640 4124 	movw	r1, #3108	; 0xc24
 800799c:	488e      	ldr	r0, [pc, #568]	; (8007bd8 <UART_AdvFeatureConfig+0x278>)
 800799e:	f7f9 ff9b 	bl	80018d8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	430a      	orrs	r2, r1
 80079b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079bc:	f003 0302 	and.w	r3, r3, #2
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d018      	beq.n	80079f6 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d009      	beq.n	80079e0 <UART_AdvFeatureConfig+0x80>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079d4:	d004      	beq.n	80079e0 <UART_AdvFeatureConfig+0x80>
 80079d6:	f640 412b 	movw	r1, #3115	; 0xc2b
 80079da:	487f      	ldr	r0, [pc, #508]	; (8007bd8 <UART_AdvFeatureConfig+0x278>)
 80079dc:	f7f9 ff7c 	bl	80018d8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	430a      	orrs	r2, r1
 80079f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079fa:	f003 0304 	and.w	r3, r3, #4
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d018      	beq.n	8007a34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d009      	beq.n	8007a1e <UART_AdvFeatureConfig+0xbe>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007a12:	d004      	beq.n	8007a1e <UART_AdvFeatureConfig+0xbe>
 8007a14:	f640 4132 	movw	r1, #3122	; 0xc32
 8007a18:	486f      	ldr	r0, [pc, #444]	; (8007bd8 <UART_AdvFeatureConfig+0x278>)
 8007a1a:	f7f9 ff5d 	bl	80018d8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	430a      	orrs	r2, r1
 8007a32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a38:	f003 0308 	and.w	r3, r3, #8
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d018      	beq.n	8007a72 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d009      	beq.n	8007a5c <UART_AdvFeatureConfig+0xfc>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a50:	d004      	beq.n	8007a5c <UART_AdvFeatureConfig+0xfc>
 8007a52:	f640 4139 	movw	r1, #3129	; 0xc39
 8007a56:	4860      	ldr	r0, [pc, #384]	; (8007bd8 <UART_AdvFeatureConfig+0x278>)
 8007a58:	f7f9 ff3e 	bl	80018d8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	430a      	orrs	r2, r1
 8007a70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a76:	f003 0310 	and.w	r3, r3, #16
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d018      	beq.n	8007ab0 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d009      	beq.n	8007a9a <UART_AdvFeatureConfig+0x13a>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a8e:	d004      	beq.n	8007a9a <UART_AdvFeatureConfig+0x13a>
 8007a90:	f44f 6144 	mov.w	r1, #3136	; 0xc40
 8007a94:	4850      	ldr	r0, [pc, #320]	; (8007bd8 <UART_AdvFeatureConfig+0x278>)
 8007a96:	f7f9 ff1f 	bl	80018d8 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	430a      	orrs	r2, r1
 8007aae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab4:	f003 0320 	and.w	r3, r3, #32
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d018      	beq.n	8007aee <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d009      	beq.n	8007ad8 <UART_AdvFeatureConfig+0x178>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007acc:	d004      	beq.n	8007ad8 <UART_AdvFeatureConfig+0x178>
 8007ace:	f640 4147 	movw	r1, #3143	; 0xc47
 8007ad2:	4841      	ldr	r0, [pc, #260]	; (8007bd8 <UART_AdvFeatureConfig+0x278>)
 8007ad4:	f7f9 ff00 	bl	80018d8 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	430a      	orrs	r2, r1
 8007aec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d04a      	beq.n	8007b90 <UART_AdvFeatureConfig+0x230>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a37      	ldr	r2, [pc, #220]	; (8007bdc <UART_AdvFeatureConfig+0x27c>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d004      	beq.n	8007b0e <UART_AdvFeatureConfig+0x1ae>
 8007b04:	f640 414e 	movw	r1, #3150	; 0xc4e
 8007b08:	4833      	ldr	r0, [pc, #204]	; (8007bd8 <UART_AdvFeatureConfig+0x278>)
 8007b0a:	f7f9 fee5 	bl	80018d8 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d009      	beq.n	8007b2a <UART_AdvFeatureConfig+0x1ca>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b1e:	d004      	beq.n	8007b2a <UART_AdvFeatureConfig+0x1ca>
 8007b20:	f640 414f 	movw	r1, #3151	; 0xc4f
 8007b24:	482c      	ldr	r0, [pc, #176]	; (8007bd8 <UART_AdvFeatureConfig+0x278>)
 8007b26:	f7f9 fed7 	bl	80018d8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	430a      	orrs	r2, r1
 8007b3e:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b48:	d122      	bne.n	8007b90 <UART_AdvFeatureConfig+0x230>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d013      	beq.n	8007b7a <UART_AdvFeatureConfig+0x21a>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b5a:	d00e      	beq.n	8007b7a <UART_AdvFeatureConfig+0x21a>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b64:	d009      	beq.n	8007b7a <UART_AdvFeatureConfig+0x21a>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b6a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007b6e:	d004      	beq.n	8007b7a <UART_AdvFeatureConfig+0x21a>
 8007b70:	f640 4154 	movw	r1, #3156	; 0xc54
 8007b74:	4818      	ldr	r0, [pc, #96]	; (8007bd8 <UART_AdvFeatureConfig+0x278>)
 8007b76:	f7f9 feaf 	bl	80018d8 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	430a      	orrs	r2, r1
 8007b8e:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d018      	beq.n	8007bce <UART_AdvFeatureConfig+0x26e>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d009      	beq.n	8007bb8 <UART_AdvFeatureConfig+0x258>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ba8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007bac:	d004      	beq.n	8007bb8 <UART_AdvFeatureConfig+0x258>
 8007bae:	f640 415c 	movw	r1, #3164	; 0xc5c
 8007bb2:	4809      	ldr	r0, [pc, #36]	; (8007bd8 <UART_AdvFeatureConfig+0x278>)
 8007bb4:	f7f9 fe90 	bl	80018d8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	430a      	orrs	r2, r1
 8007bcc:	605a      	str	r2, [r3, #4]
  }
}
 8007bce:	bf00      	nop
 8007bd0:	3708      	adds	r7, #8
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	0800ee0c 	.word	0x0800ee0c
 8007bdc:	40013800 	.word	0x40013800

08007be0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b086      	sub	sp, #24
 8007be4:	af02      	add	r7, sp, #8
 8007be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007bf0:	f7fa fc8c 	bl	800250c <HAL_GetTick>
 8007bf4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 0308 	and.w	r3, r3, #8
 8007c00:	2b08      	cmp	r3, #8
 8007c02:	d10e      	bne.n	8007c22 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 f82c 	bl	8007c70 <UART_WaitOnFlagUntilTimeout>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d001      	beq.n	8007c22 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	e022      	b.n	8007c68 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f003 0304 	and.w	r3, r3, #4
 8007c2c:	2b04      	cmp	r3, #4
 8007c2e:	d10e      	bne.n	8007c4e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c34:	9300      	str	r3, [sp, #0]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 f816 	bl	8007c70 <UART_WaitOnFlagUntilTimeout>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d001      	beq.n	8007c4e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	e00c      	b.n	8007c68 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2220      	movs	r2, #32
 8007c52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2220      	movs	r2, #32
 8007c5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007c66:	2300      	movs	r3, #0
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3710      	adds	r7, #16
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	603b      	str	r3, [r7, #0]
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c80:	e062      	b.n	8007d48 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c82:	69bb      	ldr	r3, [r7, #24]
 8007c84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c88:	d05e      	beq.n	8007d48 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c8a:	f7fa fc3f 	bl	800250c <HAL_GetTick>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	1ad3      	subs	r3, r2, r3
 8007c94:	69ba      	ldr	r2, [r7, #24]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d302      	bcc.n	8007ca0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d11d      	bne.n	8007cdc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007cae:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	689a      	ldr	r2, [r3, #8]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f022 0201 	bic.w	r2, r2, #1
 8007cbe:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2220      	movs	r2, #32
 8007cc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2220      	movs	r2, #32
 8007ccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	e045      	b.n	8007d68 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 0304 	and.w	r3, r3, #4
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d02e      	beq.n	8007d48 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	69db      	ldr	r3, [r3, #28]
 8007cf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cf8:	d126      	bne.n	8007d48 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d02:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007d12:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	689a      	ldr	r2, [r3, #8]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f022 0201 	bic.w	r2, r2, #1
 8007d22:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2220      	movs	r2, #32
 8007d28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2220      	movs	r2, #32
 8007d30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2220      	movs	r2, #32
 8007d38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8007d44:	2303      	movs	r3, #3
 8007d46:	e00f      	b.n	8007d68 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	69da      	ldr	r2, [r3, #28]
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	4013      	ands	r3, r2
 8007d52:	68ba      	ldr	r2, [r7, #8]
 8007d54:	429a      	cmp	r2, r3
 8007d56:	bf0c      	ite	eq
 8007d58:	2301      	moveq	r3, #1
 8007d5a:	2300      	movne	r3, #0
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	461a      	mov	r2, r3
 8007d60:	79fb      	ldrb	r3, [r7, #7]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d08d      	beq.n	8007c82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a1f      	ldr	r2, [pc, #124]	; (8007dfc <HAL_UARTEx_DisableFifoMode+0x8c>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d009      	beq.n	8007d96 <HAL_UARTEx_DisableFifoMode+0x26>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a1e      	ldr	r2, [pc, #120]	; (8007e00 <HAL_UARTEx_DisableFifoMode+0x90>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d004      	beq.n	8007d96 <HAL_UARTEx_DisableFifoMode+0x26>
 8007d8c:	f240 2111 	movw	r1, #529	; 0x211
 8007d90:	481c      	ldr	r0, [pc, #112]	; (8007e04 <HAL_UARTEx_DisableFifoMode+0x94>)
 8007d92:	f7f9 fda1 	bl	80018d8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d101      	bne.n	8007da4 <HAL_UARTEx_DisableFifoMode+0x34>
 8007da0:	2302      	movs	r3, #2
 8007da2:	e027      	b.n	8007df4 <HAL_UARTEx_DisableFifoMode+0x84>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2224      	movs	r2, #36	; 0x24
 8007db0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f022 0201 	bic.w	r2, r2, #1
 8007dca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007dd2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2220      	movs	r2, #32
 8007de6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	40013800 	.word	0x40013800
 8007e00:	40008000 	.word	0x40008000
 8007e04:	0800ee48 	.word	0x0800ee48

08007e08 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a31      	ldr	r2, [pc, #196]	; (8007edc <HAL_UARTEx_SetTxFifoThreshold+0xd4>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d009      	beq.n	8007e30 <HAL_UARTEx_SetTxFifoThreshold+0x28>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a2f      	ldr	r2, [pc, #188]	; (8007ee0 <HAL_UARTEx_SetTxFifoThreshold+0xd8>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d004      	beq.n	8007e30 <HAL_UARTEx_SetTxFifoThreshold+0x28>
 8007e26:	f240 213f 	movw	r1, #575	; 0x23f
 8007e2a:	482e      	ldr	r0, [pc, #184]	; (8007ee4 <HAL_UARTEx_SetTxFifoThreshold+0xdc>)
 8007e2c:	f7f9 fd54 	bl	80018d8 <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d018      	beq.n	8007e68 <HAL_UARTEx_SetTxFifoThreshold+0x60>
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e3c:	d014      	beq.n	8007e68 <HAL_UARTEx_SetTxFifoThreshold+0x60>
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e44:	d010      	beq.n	8007e68 <HAL_UARTEx_SetTxFifoThreshold+0x60>
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007e4c:	d00c      	beq.n	8007e68 <HAL_UARTEx_SetTxFifoThreshold+0x60>
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e54:	d008      	beq.n	8007e68 <HAL_UARTEx_SetTxFifoThreshold+0x60>
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 8007e5c:	d004      	beq.n	8007e68 <HAL_UARTEx_SetTxFifoThreshold+0x60>
 8007e5e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007e62:	4820      	ldr	r0, [pc, #128]	; (8007ee4 <HAL_UARTEx_SetTxFifoThreshold+0xdc>)
 8007e64:	f7f9 fd38 	bl	80018d8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d101      	bne.n	8007e76 <HAL_UARTEx_SetTxFifoThreshold+0x6e>
 8007e72:	2302      	movs	r3, #2
 8007e74:	e02d      	b.n	8007ed2 <HAL_UARTEx_SetTxFifoThreshold+0xca>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2224      	movs	r2, #36	; 0x24
 8007e82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f022 0201 	bic.w	r2, r2, #1
 8007e9c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	683a      	ldr	r2, [r7, #0]
 8007eae:	430a      	orrs	r2, r1
 8007eb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 f888 	bl	8007fc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2220      	movs	r2, #32
 8007ec4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007ed0:	2300      	movs	r3, #0
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	40013800 	.word	0x40013800
 8007ee0:	40008000 	.word	0x40008000
 8007ee4:	0800ee48 	.word	0x0800ee48

08007ee8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a31      	ldr	r2, [pc, #196]	; (8007fbc <HAL_UARTEx_SetRxFifoThreshold+0xd4>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d009      	beq.n	8007f10 <HAL_UARTEx_SetRxFifoThreshold+0x28>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a2f      	ldr	r2, [pc, #188]	; (8007fc0 <HAL_UARTEx_SetRxFifoThreshold+0xd8>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d004      	beq.n	8007f10 <HAL_UARTEx_SetRxFifoThreshold+0x28>
 8007f06:	f44f 711c 	mov.w	r1, #624	; 0x270
 8007f0a:	482e      	ldr	r0, [pc, #184]	; (8007fc4 <HAL_UARTEx_SetRxFifoThreshold+0xdc>)
 8007f0c:	f7f9 fce4 	bl	80018d8 <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d018      	beq.n	8007f48 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f1c:	d014      	beq.n	8007f48 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f24:	d010      	beq.n	8007f48 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8007f2c:	d00c      	beq.n	8007f48 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f34:	d008      	beq.n	8007f48 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8007f3c:	d004      	beq.n	8007f48 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 8007f3e:	f240 2171 	movw	r1, #625	; 0x271
 8007f42:	4820      	ldr	r0, [pc, #128]	; (8007fc4 <HAL_UARTEx_SetRxFifoThreshold+0xdc>)
 8007f44:	f7f9 fcc8 	bl	80018d8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d101      	bne.n	8007f56 <HAL_UARTEx_SetRxFifoThreshold+0x6e>
 8007f52:	2302      	movs	r3, #2
 8007f54:	e02d      	b.n	8007fb2 <HAL_UARTEx_SetRxFifoThreshold+0xca>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2224      	movs	r2, #36	; 0x24
 8007f62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f022 0201 	bic.w	r2, r2, #1
 8007f7c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	683a      	ldr	r2, [r7, #0]
 8007f8e:	430a      	orrs	r2, r1
 8007f90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f818 	bl	8007fc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2220      	movs	r2, #32
 8007fa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	40013800 	.word	0x40013800
 8007fc0:	40008000 	.word	0x40008000
 8007fc4:	0800ee48 	.word	0x0800ee48

08007fc8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b089      	sub	sp, #36	; 0x24
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007fd0:	4a2f      	ldr	r2, [pc, #188]	; (8008090 <UARTEx_SetNbDataToProcess+0xc8>)
 8007fd2:	f107 0314 	add.w	r3, r7, #20
 8007fd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007fda:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8007fde:	4a2d      	ldr	r2, [pc, #180]	; (8008094 <UARTEx_SetNbDataToProcess+0xcc>)
 8007fe0:	f107 030c 	add.w	r3, r7, #12
 8007fe4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007fe8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d108      	bne.n	8008006 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008004:	e03d      	b.n	8008082 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008006:	2308      	movs	r3, #8
 8008008:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800800a:	2308      	movs	r3, #8
 800800c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	0e5b      	lsrs	r3, r3, #25
 8008016:	b2db      	uxtb	r3, r3
 8008018:	f003 0307 	and.w	r3, r3, #7
 800801c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	0f5b      	lsrs	r3, r3, #29
 8008026:	b2db      	uxtb	r3, r3
 8008028:	f003 0307 	and.w	r3, r3, #7
 800802c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800802e:	7fbb      	ldrb	r3, [r7, #30]
 8008030:	7f3a      	ldrb	r2, [r7, #28]
 8008032:	f107 0120 	add.w	r1, r7, #32
 8008036:	440a      	add	r2, r1
 8008038:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800803c:	fb02 f303 	mul.w	r3, r2, r3
 8008040:	7f3a      	ldrb	r2, [r7, #28]
 8008042:	f107 0120 	add.w	r1, r7, #32
 8008046:	440a      	add	r2, r1
 8008048:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800804c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008050:	b29a      	uxth	r2, r3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008058:	7ffb      	ldrb	r3, [r7, #31]
 800805a:	7f7a      	ldrb	r2, [r7, #29]
 800805c:	f107 0120 	add.w	r1, r7, #32
 8008060:	440a      	add	r2, r1
 8008062:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008066:	fb02 f303 	mul.w	r3, r2, r3
 800806a:	7f7a      	ldrb	r2, [r7, #29]
 800806c:	f107 0120 	add.w	r1, r7, #32
 8008070:	440a      	add	r2, r1
 8008072:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008076:	fb93 f3f2 	sdiv	r3, r3, r2
 800807a:	b29a      	uxth	r2, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008082:	bf00      	nop
 8008084:	3724      	adds	r7, #36	; 0x24
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	0800ee84 	.word	0x0800ee84
 8008094:	0800ee8c 	.word	0x0800ee8c

08008098 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008098:	b480      	push	{r7}
 800809a:	b085      	sub	sp, #20
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80080a0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80080a4:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80080ac:	b29a      	uxth	r2, r3
 80080ae:	89fb      	ldrh	r3, [r7, #14]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3714      	adds	r7, #20
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80080d0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80080d4:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80080dc:	b29b      	uxth	r3, r3
 80080de:	b21a      	sxth	r2, r3
 80080e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80080e4:	43db      	mvns	r3, r3
 80080e6:	b21b      	sxth	r3, r3
 80080e8:	4013      	ands	r3, r2
 80080ea:	b21b      	sxth	r3, r3
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3714      	adds	r7, #20
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr

08008102 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008102:	b084      	sub	sp, #16
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	f107 0014 	add.w	r0, r7, #20
 8008110:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f7ff ffaf 	bl	8008098 <USB_EnableGlobalInt>

  return HAL_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3708      	adds	r7, #8
 8008140:	46bd      	mov	sp, r7
 8008142:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008146:	b004      	add	sp, #16
 8008148:	4770      	bx	lr
	...

0800814c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800814c:	b490      	push	{r4, r7}
 800814e:	b086      	sub	sp, #24
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008156:	2300      	movs	r3, #0
 8008158:	75fb      	strb	r3, [r7, #23]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	4413      	add	r3, r2
 8008164:	881b      	ldrh	r3, [r3, #0]
 8008166:	b29b      	uxth	r3, r3
 8008168:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800816c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008170:	82bb      	strh	r3, [r7, #20]

  /* initialize Endpoint */
  switch (ep->type)
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	78db      	ldrb	r3, [r3, #3]
 8008176:	2b03      	cmp	r3, #3
 8008178:	d819      	bhi.n	80081ae <USB_ActivateEndpoint+0x62>
 800817a:	a201      	add	r2, pc, #4	; (adr r2, 8008180 <USB_ActivateEndpoint+0x34>)
 800817c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008180:	08008191 	.word	0x08008191
 8008184:	080081a5 	.word	0x080081a5
 8008188:	080081b5 	.word	0x080081b5
 800818c:	0800819b 	.word	0x0800819b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008190:	8abb      	ldrh	r3, [r7, #20]
 8008192:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008196:	82bb      	strh	r3, [r7, #20]
      break;
 8008198:	e00d      	b.n	80081b6 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800819a:	8abb      	ldrh	r3, [r7, #20]
 800819c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80081a0:	82bb      	strh	r3, [r7, #20]
      break;
 80081a2:	e008      	b.n	80081b6 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80081a4:	8abb      	ldrh	r3, [r7, #20]
 80081a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80081aa:	82bb      	strh	r3, [r7, #20]
      break;
 80081ac:	e003      	b.n	80081b6 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	75fb      	strb	r3, [r7, #23]
      break;
 80081b2:	e000      	b.n	80081b6 <USB_ActivateEndpoint+0x6a>
      break;
 80081b4:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	441a      	add	r2, r3
 80081c0:	8abb      	ldrh	r3, [r7, #20]
 80081c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	4413      	add	r3, r2
 80081e0:	881b      	ldrh	r3, [r3, #0]
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	b21b      	sxth	r3, r3
 80081e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ee:	b21a      	sxth	r2, r3
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	b21b      	sxth	r3, r3
 80081f6:	4313      	orrs	r3, r2
 80081f8:	b21b      	sxth	r3, r3
 80081fa:	b29c      	uxth	r4, r3
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	441a      	add	r2, r3
 8008206:	4b87      	ldr	r3, [pc, #540]	; (8008424 <USB_ActivateEndpoint+0x2d8>)
 8008208:	4323      	orrs	r3, r4
 800820a:	b29b      	uxth	r3, r3
 800820c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	7b1b      	ldrb	r3, [r3, #12]
 8008212:	2b00      	cmp	r3, #0
 8008214:	f040 810c 	bne.w	8008430 <USB_ActivateEndpoint+0x2e4>
  {
    if (ep->is_in != 0U)
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	785b      	ldrb	r3, [r3, #1]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d067      	beq.n	80082f0 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008220:	687c      	ldr	r4, [r7, #4]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008228:	b29b      	uxth	r3, r3
 800822a:	441c      	add	r4, r3
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	00db      	lsls	r3, r3, #3
 8008232:	4423      	add	r3, r4
 8008234:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008238:	461c      	mov	r4, r3
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	88db      	ldrh	r3, [r3, #6]
 800823e:	085b      	lsrs	r3, r3, #1
 8008240:	b29b      	uxth	r3, r3
 8008242:	005b      	lsls	r3, r3, #1
 8008244:	b29b      	uxth	r3, r3
 8008246:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	4413      	add	r3, r2
 8008252:	881b      	ldrh	r3, [r3, #0]
 8008254:	b29c      	uxth	r4, r3
 8008256:	4623      	mov	r3, r4
 8008258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800825c:	2b00      	cmp	r3, #0
 800825e:	d014      	beq.n	800828a <USB_ActivateEndpoint+0x13e>
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	4413      	add	r3, r2
 800826a:	881b      	ldrh	r3, [r3, #0]
 800826c:	b29b      	uxth	r3, r3
 800826e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008276:	b29c      	uxth	r4, r3
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	441a      	add	r2, r3
 8008282:	4b69      	ldr	r3, [pc, #420]	; (8008428 <USB_ActivateEndpoint+0x2dc>)
 8008284:	4323      	orrs	r3, r4
 8008286:	b29b      	uxth	r3, r3
 8008288:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	78db      	ldrb	r3, [r3, #3]
 800828e:	2b01      	cmp	r3, #1
 8008290:	d018      	beq.n	80082c4 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	4413      	add	r3, r2
 800829c:	881b      	ldrh	r3, [r3, #0]
 800829e:	b29b      	uxth	r3, r3
 80082a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082a8:	b29c      	uxth	r4, r3
 80082aa:	f084 0320 	eor.w	r3, r4, #32
 80082ae:	b29c      	uxth	r4, r3
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	441a      	add	r2, r3
 80082ba:	4b5a      	ldr	r3, [pc, #360]	; (8008424 <USB_ActivateEndpoint+0x2d8>)
 80082bc:	4323      	orrs	r3, r4
 80082be:	b29b      	uxth	r3, r3
 80082c0:	8013      	strh	r3, [r2, #0]
 80082c2:	e225      	b.n	8008710 <USB_ActivateEndpoint+0x5c4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	4413      	add	r3, r2
 80082ce:	881b      	ldrh	r3, [r3, #0]
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082da:	b29c      	uxth	r4, r3
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	441a      	add	r2, r3
 80082e6:	4b4f      	ldr	r3, [pc, #316]	; (8008424 <USB_ActivateEndpoint+0x2d8>)
 80082e8:	4323      	orrs	r3, r4
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	8013      	strh	r3, [r2, #0]
 80082ee:	e20f      	b.n	8008710 <USB_ActivateEndpoint+0x5c4>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80082f0:	687c      	ldr	r4, [r7, #4]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	441c      	add	r4, r3
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	00db      	lsls	r3, r3, #3
 8008302:	4423      	add	r3, r4
 8008304:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008308:	461c      	mov	r4, r3
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	88db      	ldrh	r3, [r3, #6]
 800830e:	085b      	lsrs	r3, r3, #1
 8008310:	b29b      	uxth	r3, r3
 8008312:	005b      	lsls	r3, r3, #1
 8008314:	b29b      	uxth	r3, r3
 8008316:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008318:	687c      	ldr	r4, [r7, #4]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008320:	b29b      	uxth	r3, r3
 8008322:	441c      	add	r4, r3
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	00db      	lsls	r3, r3, #3
 800832a:	4423      	add	r3, r4
 800832c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008330:	60fb      	str	r3, [r7, #12]
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	691b      	ldr	r3, [r3, #16]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d110      	bne.n	800835c <USB_ActivateEndpoint+0x210>
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	881b      	ldrh	r3, [r3, #0]
 800833e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008342:	b29a      	uxth	r2, r3
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	801a      	strh	r2, [r3, #0]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	881b      	ldrh	r3, [r3, #0]
 800834c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008350:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008354:	b29a      	uxth	r2, r3
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	801a      	strh	r2, [r3, #0]
 800835a:	e026      	b.n	80083aa <USB_ActivateEndpoint+0x25e>
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	2b3d      	cmp	r3, #61	; 0x3d
 8008362:	d813      	bhi.n	800838c <USB_ActivateEndpoint+0x240>
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	691b      	ldr	r3, [r3, #16]
 8008368:	085b      	lsrs	r3, r3, #1
 800836a:	613b      	str	r3, [r7, #16]
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	f003 0301 	and.w	r3, r3, #1
 8008374:	2b00      	cmp	r3, #0
 8008376:	d002      	beq.n	800837e <USB_ActivateEndpoint+0x232>
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	3301      	adds	r3, #1
 800837c:	613b      	str	r3, [r7, #16]
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	b29b      	uxth	r3, r3
 8008382:	029b      	lsls	r3, r3, #10
 8008384:	b29a      	uxth	r2, r3
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	801a      	strh	r2, [r3, #0]
 800838a:	e00e      	b.n	80083aa <USB_ActivateEndpoint+0x25e>
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	095b      	lsrs	r3, r3, #5
 8008392:	613b      	str	r3, [r7, #16]
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	b29b      	uxth	r3, r3
 8008398:	029b      	lsls	r3, r3, #10
 800839a:	b29b      	uxth	r3, r3
 800839c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083a4:	b29a      	uxth	r2, r3
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	4413      	add	r3, r2
 80083b4:	881b      	ldrh	r3, [r3, #0]
 80083b6:	b29c      	uxth	r4, r3
 80083b8:	4623      	mov	r3, r4
 80083ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d014      	beq.n	80083ec <USB_ActivateEndpoint+0x2a0>
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	4413      	add	r3, r2
 80083cc:	881b      	ldrh	r3, [r3, #0]
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083d8:	b29c      	uxth	r4, r3
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	441a      	add	r2, r3
 80083e4:	4b11      	ldr	r3, [pc, #68]	; (800842c <USB_ActivateEndpoint+0x2e0>)
 80083e6:	4323      	orrs	r3, r4
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	4413      	add	r3, r2
 80083f6:	881b      	ldrh	r3, [r3, #0]
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008402:	b29c      	uxth	r4, r3
 8008404:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008408:	b29c      	uxth	r4, r3
 800840a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800840e:	b29c      	uxth	r4, r3
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	441a      	add	r2, r3
 800841a:	4b02      	ldr	r3, [pc, #8]	; (8008424 <USB_ActivateEndpoint+0x2d8>)
 800841c:	4323      	orrs	r3, r4
 800841e:	b29b      	uxth	r3, r3
 8008420:	8013      	strh	r3, [r2, #0]
 8008422:	e175      	b.n	8008710 <USB_ActivateEndpoint+0x5c4>
 8008424:	ffff8080 	.word	0xffff8080
 8008428:	ffff80c0 	.word	0xffff80c0
 800842c:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	4413      	add	r3, r2
 800843a:	881b      	ldrh	r3, [r3, #0]
 800843c:	b29b      	uxth	r3, r3
 800843e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008446:	b29c      	uxth	r4, r3
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	441a      	add	r2, r3
 8008452:	4b96      	ldr	r3, [pc, #600]	; (80086ac <USB_ActivateEndpoint+0x560>)
 8008454:	4323      	orrs	r3, r4
 8008456:	b29b      	uxth	r3, r3
 8008458:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800845a:	687c      	ldr	r4, [r7, #4]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008462:	b29b      	uxth	r3, r3
 8008464:	441c      	add	r4, r3
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	00db      	lsls	r3, r3, #3
 800846c:	4423      	add	r3, r4
 800846e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008472:	461c      	mov	r4, r3
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	891b      	ldrh	r3, [r3, #8]
 8008478:	085b      	lsrs	r3, r3, #1
 800847a:	b29b      	uxth	r3, r3
 800847c:	005b      	lsls	r3, r3, #1
 800847e:	b29b      	uxth	r3, r3
 8008480:	8023      	strh	r3, [r4, #0]
 8008482:	687c      	ldr	r4, [r7, #4]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800848a:	b29b      	uxth	r3, r3
 800848c:	441c      	add	r4, r3
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	00db      	lsls	r3, r3, #3
 8008494:	4423      	add	r3, r4
 8008496:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800849a:	461c      	mov	r4, r3
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	895b      	ldrh	r3, [r3, #10]
 80084a0:	085b      	lsrs	r3, r3, #1
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	005b      	lsls	r3, r3, #1
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	785b      	ldrb	r3, [r3, #1]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	f040 8088 	bne.w	80085c4 <USB_ActivateEndpoint+0x478>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	4413      	add	r3, r2
 80084be:	881b      	ldrh	r3, [r3, #0]
 80084c0:	b29c      	uxth	r4, r3
 80084c2:	4623      	mov	r3, r4
 80084c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d014      	beq.n	80084f6 <USB_ActivateEndpoint+0x3aa>
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	4413      	add	r3, r2
 80084d6:	881b      	ldrh	r3, [r3, #0]
 80084d8:	b29b      	uxth	r3, r3
 80084da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084e2:	b29c      	uxth	r4, r3
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	441a      	add	r2, r3
 80084ee:	4b70      	ldr	r3, [pc, #448]	; (80086b0 <USB_ActivateEndpoint+0x564>)
 80084f0:	4323      	orrs	r3, r4
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	4413      	add	r3, r2
 8008500:	881b      	ldrh	r3, [r3, #0]
 8008502:	b29c      	uxth	r4, r3
 8008504:	4623      	mov	r3, r4
 8008506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800850a:	2b00      	cmp	r3, #0
 800850c:	d014      	beq.n	8008538 <USB_ActivateEndpoint+0x3ec>
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	4413      	add	r3, r2
 8008518:	881b      	ldrh	r3, [r3, #0]
 800851a:	b29b      	uxth	r3, r3
 800851c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008524:	b29c      	uxth	r4, r3
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	441a      	add	r2, r3
 8008530:	4b60      	ldr	r3, [pc, #384]	; (80086b4 <USB_ActivateEndpoint+0x568>)
 8008532:	4323      	orrs	r3, r4
 8008534:	b29b      	uxth	r3, r3
 8008536:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	4413      	add	r3, r2
 8008542:	881b      	ldrh	r3, [r3, #0]
 8008544:	b29b      	uxth	r3, r3
 8008546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800854a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800854e:	b29c      	uxth	r4, r3
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	441a      	add	r2, r3
 800855a:	4b56      	ldr	r3, [pc, #344]	; (80086b4 <USB_ActivateEndpoint+0x568>)
 800855c:	4323      	orrs	r3, r4
 800855e:	b29b      	uxth	r3, r3
 8008560:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	4413      	add	r3, r2
 800856c:	881b      	ldrh	r3, [r3, #0]
 800856e:	b29b      	uxth	r3, r3
 8008570:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008578:	b29c      	uxth	r4, r3
 800857a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800857e:	b29c      	uxth	r4, r3
 8008580:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8008584:	b29c      	uxth	r4, r3
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	441a      	add	r2, r3
 8008590:	4b49      	ldr	r3, [pc, #292]	; (80086b8 <USB_ActivateEndpoint+0x56c>)
 8008592:	4323      	orrs	r3, r4
 8008594:	b29b      	uxth	r3, r3
 8008596:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	4413      	add	r3, r2
 80085a2:	881b      	ldrh	r3, [r3, #0]
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085ae:	b29c      	uxth	r4, r3
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	441a      	add	r2, r3
 80085ba:	4b3f      	ldr	r3, [pc, #252]	; (80086b8 <USB_ActivateEndpoint+0x56c>)
 80085bc:	4323      	orrs	r3, r4
 80085be:	b29b      	uxth	r3, r3
 80085c0:	8013      	strh	r3, [r2, #0]
 80085c2:	e0a5      	b.n	8008710 <USB_ActivateEndpoint+0x5c4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	4413      	add	r3, r2
 80085ce:	881b      	ldrh	r3, [r3, #0]
 80085d0:	b29c      	uxth	r4, r3
 80085d2:	4623      	mov	r3, r4
 80085d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d014      	beq.n	8008606 <USB_ActivateEndpoint+0x4ba>
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	4413      	add	r3, r2
 80085e6:	881b      	ldrh	r3, [r3, #0]
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085f2:	b29c      	uxth	r4, r3
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	441a      	add	r2, r3
 80085fe:	4b2c      	ldr	r3, [pc, #176]	; (80086b0 <USB_ActivateEndpoint+0x564>)
 8008600:	4323      	orrs	r3, r4
 8008602:	b29b      	uxth	r3, r3
 8008604:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	4413      	add	r3, r2
 8008610:	881b      	ldrh	r3, [r3, #0]
 8008612:	b29c      	uxth	r4, r3
 8008614:	4623      	mov	r3, r4
 8008616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800861a:	2b00      	cmp	r3, #0
 800861c:	d014      	beq.n	8008648 <USB_ActivateEndpoint+0x4fc>
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	4413      	add	r3, r2
 8008628:	881b      	ldrh	r3, [r3, #0]
 800862a:	b29b      	uxth	r3, r3
 800862c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008634:	b29c      	uxth	r4, r3
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	441a      	add	r2, r3
 8008640:	4b1c      	ldr	r3, [pc, #112]	; (80086b4 <USB_ActivateEndpoint+0x568>)
 8008642:	4323      	orrs	r3, r4
 8008644:	b29b      	uxth	r3, r3
 8008646:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	4413      	add	r3, r2
 8008652:	881b      	ldrh	r3, [r3, #0]
 8008654:	b29b      	uxth	r3, r3
 8008656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800865a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800865e:	b29c      	uxth	r4, r3
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	441a      	add	r2, r3
 800866a:	4b11      	ldr	r3, [pc, #68]	; (80086b0 <USB_ActivateEndpoint+0x564>)
 800866c:	4323      	orrs	r3, r4
 800866e:	b29b      	uxth	r3, r3
 8008670:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	78db      	ldrb	r3, [r3, #3]
 8008676:	2b01      	cmp	r3, #1
 8008678:	d020      	beq.n	80086bc <USB_ActivateEndpoint+0x570>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	4413      	add	r3, r2
 8008684:	881b      	ldrh	r3, [r3, #0]
 8008686:	b29b      	uxth	r3, r3
 8008688:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800868c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008690:	b29c      	uxth	r4, r3
 8008692:	f084 0320 	eor.w	r3, r4, #32
 8008696:	b29c      	uxth	r4, r3
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	441a      	add	r2, r3
 80086a2:	4b05      	ldr	r3, [pc, #20]	; (80086b8 <USB_ActivateEndpoint+0x56c>)
 80086a4:	4323      	orrs	r3, r4
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	8013      	strh	r3, [r2, #0]
 80086aa:	e01c      	b.n	80086e6 <USB_ActivateEndpoint+0x59a>
 80086ac:	ffff8180 	.word	0xffff8180
 80086b0:	ffffc080 	.word	0xffffc080
 80086b4:	ffff80c0 	.word	0xffff80c0
 80086b8:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	4413      	add	r3, r2
 80086c6:	881b      	ldrh	r3, [r3, #0]
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086d2:	b29c      	uxth	r4, r3
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	441a      	add	r2, r3
 80086de:	4b0f      	ldr	r3, [pc, #60]	; (800871c <USB_ActivateEndpoint+0x5d0>)
 80086e0:	4323      	orrs	r3, r4
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	4413      	add	r3, r2
 80086f0:	881b      	ldrh	r3, [r3, #0]
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086fc:	b29c      	uxth	r4, r3
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	441a      	add	r2, r3
 8008708:	4b04      	ldr	r3, [pc, #16]	; (800871c <USB_ActivateEndpoint+0x5d0>)
 800870a:	4323      	orrs	r3, r4
 800870c:	b29b      	uxth	r3, r3
 800870e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8008710:	7dfb      	ldrb	r3, [r7, #23]
}
 8008712:	4618      	mov	r0, r3
 8008714:	3718      	adds	r7, #24
 8008716:	46bd      	mov	sp, r7
 8008718:	bc90      	pop	{r4, r7}
 800871a:	4770      	bx	lr
 800871c:	ffff8080 	.word	0xffff8080

08008720 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008720:	b490      	push	{r4, r7}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	7b1b      	ldrb	r3, [r3, #12]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d171      	bne.n	8008816 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	785b      	ldrb	r3, [r3, #1]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d036      	beq.n	80087a8 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	4413      	add	r3, r2
 8008744:	881b      	ldrh	r3, [r3, #0]
 8008746:	b29c      	uxth	r4, r3
 8008748:	4623      	mov	r3, r4
 800874a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800874e:	2b00      	cmp	r3, #0
 8008750:	d014      	beq.n	800877c <USB_DeactivateEndpoint+0x5c>
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	4413      	add	r3, r2
 800875c:	881b      	ldrh	r3, [r3, #0]
 800875e:	b29b      	uxth	r3, r3
 8008760:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008768:	b29c      	uxth	r4, r3
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	441a      	add	r2, r3
 8008774:	4b6b      	ldr	r3, [pc, #428]	; (8008924 <USB_DeactivateEndpoint+0x204>)
 8008776:	4323      	orrs	r3, r4
 8008778:	b29b      	uxth	r3, r3
 800877a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	4413      	add	r3, r2
 8008786:	881b      	ldrh	r3, [r3, #0]
 8008788:	b29b      	uxth	r3, r3
 800878a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800878e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008792:	b29c      	uxth	r4, r3
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	441a      	add	r2, r3
 800879e:	4b62      	ldr	r3, [pc, #392]	; (8008928 <USB_DeactivateEndpoint+0x208>)
 80087a0:	4323      	orrs	r3, r4
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	8013      	strh	r3, [r2, #0]
 80087a6:	e144      	b.n	8008a32 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	4413      	add	r3, r2
 80087b2:	881b      	ldrh	r3, [r3, #0]
 80087b4:	b29c      	uxth	r4, r3
 80087b6:	4623      	mov	r3, r4
 80087b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d014      	beq.n	80087ea <USB_DeactivateEndpoint+0xca>
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	4413      	add	r3, r2
 80087ca:	881b      	ldrh	r3, [r3, #0]
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087d6:	b29c      	uxth	r4, r3
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	441a      	add	r2, r3
 80087e2:	4b52      	ldr	r3, [pc, #328]	; (800892c <USB_DeactivateEndpoint+0x20c>)
 80087e4:	4323      	orrs	r3, r4
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	4413      	add	r3, r2
 80087f4:	881b      	ldrh	r3, [r3, #0]
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008800:	b29c      	uxth	r4, r3
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	441a      	add	r2, r3
 800880c:	4b46      	ldr	r3, [pc, #280]	; (8008928 <USB_DeactivateEndpoint+0x208>)
 800880e:	4323      	orrs	r3, r4
 8008810:	b29b      	uxth	r3, r3
 8008812:	8013      	strh	r3, [r2, #0]
 8008814:	e10d      	b.n	8008a32 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	785b      	ldrb	r3, [r3, #1]
 800881a:	2b00      	cmp	r3, #0
 800881c:	f040 8088 	bne.w	8008930 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	4413      	add	r3, r2
 800882a:	881b      	ldrh	r3, [r3, #0]
 800882c:	b29c      	uxth	r4, r3
 800882e:	4623      	mov	r3, r4
 8008830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008834:	2b00      	cmp	r3, #0
 8008836:	d014      	beq.n	8008862 <USB_DeactivateEndpoint+0x142>
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	4413      	add	r3, r2
 8008842:	881b      	ldrh	r3, [r3, #0]
 8008844:	b29b      	uxth	r3, r3
 8008846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800884a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800884e:	b29c      	uxth	r4, r3
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	441a      	add	r2, r3
 800885a:	4b34      	ldr	r3, [pc, #208]	; (800892c <USB_DeactivateEndpoint+0x20c>)
 800885c:	4323      	orrs	r3, r4
 800885e:	b29b      	uxth	r3, r3
 8008860:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	4413      	add	r3, r2
 800886c:	881b      	ldrh	r3, [r3, #0]
 800886e:	b29c      	uxth	r4, r3
 8008870:	4623      	mov	r3, r4
 8008872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008876:	2b00      	cmp	r3, #0
 8008878:	d014      	beq.n	80088a4 <USB_DeactivateEndpoint+0x184>
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	4413      	add	r3, r2
 8008884:	881b      	ldrh	r3, [r3, #0]
 8008886:	b29b      	uxth	r3, r3
 8008888:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800888c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008890:	b29c      	uxth	r4, r3
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	441a      	add	r2, r3
 800889c:	4b21      	ldr	r3, [pc, #132]	; (8008924 <USB_DeactivateEndpoint+0x204>)
 800889e:	4323      	orrs	r3, r4
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	4413      	add	r3, r2
 80088ae:	881b      	ldrh	r3, [r3, #0]
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088ba:	b29c      	uxth	r4, r3
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	441a      	add	r2, r3
 80088c6:	4b17      	ldr	r3, [pc, #92]	; (8008924 <USB_DeactivateEndpoint+0x204>)
 80088c8:	4323      	orrs	r3, r4
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	4413      	add	r3, r2
 80088d8:	881b      	ldrh	r3, [r3, #0]
 80088da:	b29b      	uxth	r3, r3
 80088dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088e4:	b29c      	uxth	r4, r3
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	441a      	add	r2, r3
 80088f0:	4b0d      	ldr	r3, [pc, #52]	; (8008928 <USB_DeactivateEndpoint+0x208>)
 80088f2:	4323      	orrs	r3, r4
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	4413      	add	r3, r2
 8008902:	881b      	ldrh	r3, [r3, #0]
 8008904:	b29b      	uxth	r3, r3
 8008906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800890a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800890e:	b29c      	uxth	r4, r3
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	441a      	add	r2, r3
 800891a:	4b03      	ldr	r3, [pc, #12]	; (8008928 <USB_DeactivateEndpoint+0x208>)
 800891c:	4323      	orrs	r3, r4
 800891e:	b29b      	uxth	r3, r3
 8008920:	8013      	strh	r3, [r2, #0]
 8008922:	e086      	b.n	8008a32 <USB_DeactivateEndpoint+0x312>
 8008924:	ffff80c0 	.word	0xffff80c0
 8008928:	ffff8080 	.word	0xffff8080
 800892c:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	4413      	add	r3, r2
 800893a:	881b      	ldrh	r3, [r3, #0]
 800893c:	b29c      	uxth	r4, r3
 800893e:	4623      	mov	r3, r4
 8008940:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008944:	2b00      	cmp	r3, #0
 8008946:	d014      	beq.n	8008972 <USB_DeactivateEndpoint+0x252>
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	4413      	add	r3, r2
 8008952:	881b      	ldrh	r3, [r3, #0]
 8008954:	b29b      	uxth	r3, r3
 8008956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800895a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800895e:	b29c      	uxth	r4, r3
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	441a      	add	r2, r3
 800896a:	4b35      	ldr	r3, [pc, #212]	; (8008a40 <USB_DeactivateEndpoint+0x320>)
 800896c:	4323      	orrs	r3, r4
 800896e:	b29b      	uxth	r3, r3
 8008970:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	4413      	add	r3, r2
 800897c:	881b      	ldrh	r3, [r3, #0]
 800897e:	b29c      	uxth	r4, r3
 8008980:	4623      	mov	r3, r4
 8008982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008986:	2b00      	cmp	r3, #0
 8008988:	d014      	beq.n	80089b4 <USB_DeactivateEndpoint+0x294>
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	4413      	add	r3, r2
 8008994:	881b      	ldrh	r3, [r3, #0]
 8008996:	b29b      	uxth	r3, r3
 8008998:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800899c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089a0:	b29c      	uxth	r4, r3
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	441a      	add	r2, r3
 80089ac:	4b25      	ldr	r3, [pc, #148]	; (8008a44 <USB_DeactivateEndpoint+0x324>)
 80089ae:	4323      	orrs	r3, r4
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	4413      	add	r3, r2
 80089be:	881b      	ldrh	r3, [r3, #0]
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089ca:	b29c      	uxth	r4, r3
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	441a      	add	r2, r3
 80089d6:	4b1a      	ldr	r3, [pc, #104]	; (8008a40 <USB_DeactivateEndpoint+0x320>)
 80089d8:	4323      	orrs	r3, r4
 80089da:	b29b      	uxth	r3, r3
 80089dc:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	4413      	add	r3, r2
 80089e8:	881b      	ldrh	r3, [r3, #0]
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089f4:	b29c      	uxth	r4, r3
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	441a      	add	r2, r3
 8008a00:	4b11      	ldr	r3, [pc, #68]	; (8008a48 <USB_DeactivateEndpoint+0x328>)
 8008a02:	4323      	orrs	r3, r4
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	4413      	add	r3, r2
 8008a12:	881b      	ldrh	r3, [r3, #0]
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a1e:	b29c      	uxth	r4, r3
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	441a      	add	r2, r3
 8008a2a:	4b07      	ldr	r3, [pc, #28]	; (8008a48 <USB_DeactivateEndpoint+0x328>)
 8008a2c:	4323      	orrs	r3, r4
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3708      	adds	r7, #8
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bc90      	pop	{r4, r7}
 8008a3c:	4770      	bx	lr
 8008a3e:	bf00      	nop
 8008a40:	ffffc080 	.word	0xffffc080
 8008a44:	ffff80c0 	.word	0xffff80c0
 8008a48:	ffff8080 	.word	0xffff8080

08008a4c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008a4c:	b590      	push	{r4, r7, lr}
 8008a4e:	b095      	sub	sp, #84	; 0x54
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	785b      	ldrb	r3, [r3, #1]
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	f040 815d 	bne.w	8008d1a <USB_EPStartXfer+0x2ce>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	699a      	ldr	r2, [r3, #24]
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d909      	bls.n	8008a80 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	691b      	ldr	r3, [r3, #16]
 8008a70:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	699a      	ldr	r2, [r3, #24]
 8008a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a78:	1ad2      	subs	r2, r2, r3
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	619a      	str	r2, [r3, #24]
 8008a7e:	e005      	b.n	8008a8c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	699b      	ldr	r3, [r3, #24]
 8008a84:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	7b1b      	ldrb	r3, [r3, #12]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d11a      	bne.n	8008aca <USB_EPStartXfer+0x7e>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	6959      	ldr	r1, [r3, #20]
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	88da      	ldrh	r2, [r3, #6]
 8008a9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 fb9c 	bl	80091de <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008aa6:	687c      	ldr	r4, [r7, #4]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	441c      	add	r4, r3
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	00db      	lsls	r3, r3, #3
 8008ab8:	4423      	add	r3, r4
 8008aba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008abe:	60fb      	str	r3, [r7, #12]
 8008ac0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ac2:	b29a      	uxth	r2, r3
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	801a      	strh	r2, [r3, #0]
 8008ac8:	e10b      	b.n	8008ce2 <USB_EPStartXfer+0x296>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4413      	add	r3, r2
 8008ad4:	881b      	ldrh	r3, [r3, #0]
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d062      	beq.n	8008ba6 <USB_EPStartXfer+0x15a>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008ae0:	687c      	ldr	r4, [r7, #4]
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	785b      	ldrb	r3, [r3, #1]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d144      	bne.n	8008b74 <USB_EPStartXfer+0x128>
 8008aea:	687c      	ldr	r4, [r7, #4]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	441c      	add	r4, r3
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	00db      	lsls	r3, r3, #3
 8008afc:	4423      	add	r3, r4
 8008afe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008b02:	613b      	str	r3, [r7, #16]
 8008b04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d110      	bne.n	8008b2c <USB_EPStartXfer+0xe0>
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	881b      	ldrh	r3, [r3, #0]
 8008b0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	801a      	strh	r2, [r3, #0]
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	881b      	ldrh	r3, [r3, #0]
 8008b1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b24:	b29a      	uxth	r2, r3
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	801a      	strh	r2, [r3, #0]
 8008b2a:	e037      	b.n	8008b9c <USB_EPStartXfer+0x150>
 8008b2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b2e:	2b3d      	cmp	r3, #61	; 0x3d
 8008b30:	d811      	bhi.n	8008b56 <USB_EPStartXfer+0x10a>
 8008b32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b34:	085b      	lsrs	r3, r3, #1
 8008b36:	647b      	str	r3, [r7, #68]	; 0x44
 8008b38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b3a:	f003 0301 	and.w	r3, r3, #1
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d002      	beq.n	8008b48 <USB_EPStartXfer+0xfc>
 8008b42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b44:	3301      	adds	r3, #1
 8008b46:	647b      	str	r3, [r7, #68]	; 0x44
 8008b48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	029b      	lsls	r3, r3, #10
 8008b4e:	b29a      	uxth	r2, r3
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	801a      	strh	r2, [r3, #0]
 8008b54:	e022      	b.n	8008b9c <USB_EPStartXfer+0x150>
 8008b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b58:	095b      	lsrs	r3, r3, #5
 8008b5a:	647b      	str	r3, [r7, #68]	; 0x44
 8008b5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	029b      	lsls	r3, r3, #10
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b6c:	b29a      	uxth	r2, r3
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	801a      	strh	r2, [r3, #0]
 8008b72:	e013      	b.n	8008b9c <USB_EPStartXfer+0x150>
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	785b      	ldrb	r3, [r3, #1]
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d10f      	bne.n	8008b9c <USB_EPStartXfer+0x150>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	441c      	add	r4, r3
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	00db      	lsls	r3, r3, #3
 8008b8c:	4423      	add	r3, r4
 8008b8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008b92:	617b      	str	r3, [r7, #20]
 8008b94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b96:	b29a      	uxth	r2, r3
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	895b      	ldrh	r3, [r3, #10]
 8008ba0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008ba4:	e061      	b.n	8008c6a <USB_EPStartXfer+0x21e>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	785b      	ldrb	r3, [r3, #1]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d144      	bne.n	8008c38 <USB_EPStartXfer+0x1ec>
 8008bae:	687c      	ldr	r4, [r7, #4]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	441c      	add	r4, r3
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	00db      	lsls	r3, r3, #3
 8008bc0:	4423      	add	r3, r4
 8008bc2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008bc6:	61bb      	str	r3, [r7, #24]
 8008bc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d110      	bne.n	8008bf0 <USB_EPStartXfer+0x1a4>
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	881b      	ldrh	r3, [r3, #0]
 8008bd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008bd6:	b29a      	uxth	r2, r3
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	801a      	strh	r2, [r3, #0]
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	881b      	ldrh	r3, [r3, #0]
 8008be0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008be4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008be8:	b29a      	uxth	r2, r3
 8008bea:	69bb      	ldr	r3, [r7, #24]
 8008bec:	801a      	strh	r2, [r3, #0]
 8008bee:	e038      	b.n	8008c62 <USB_EPStartXfer+0x216>
 8008bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bf2:	2b3d      	cmp	r3, #61	; 0x3d
 8008bf4:	d811      	bhi.n	8008c1a <USB_EPStartXfer+0x1ce>
 8008bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bf8:	085b      	lsrs	r3, r3, #1
 8008bfa:	643b      	str	r3, [r7, #64]	; 0x40
 8008bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bfe:	f003 0301 	and.w	r3, r3, #1
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d002      	beq.n	8008c0c <USB_EPStartXfer+0x1c0>
 8008c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c08:	3301      	adds	r3, #1
 8008c0a:	643b      	str	r3, [r7, #64]	; 0x40
 8008c0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	029b      	lsls	r3, r3, #10
 8008c12:	b29a      	uxth	r2, r3
 8008c14:	69bb      	ldr	r3, [r7, #24]
 8008c16:	801a      	strh	r2, [r3, #0]
 8008c18:	e023      	b.n	8008c62 <USB_EPStartXfer+0x216>
 8008c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c1c:	095b      	lsrs	r3, r3, #5
 8008c1e:	643b      	str	r3, [r7, #64]	; 0x40
 8008c20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	029b      	lsls	r3, r3, #10
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c30:	b29a      	uxth	r2, r3
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	801a      	strh	r2, [r3, #0]
 8008c36:	e014      	b.n	8008c62 <USB_EPStartXfer+0x216>
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	785b      	ldrb	r3, [r3, #1]
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d110      	bne.n	8008c62 <USB_EPStartXfer+0x216>
 8008c40:	687c      	ldr	r4, [r7, #4]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	441c      	add	r4, r3
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	00db      	lsls	r3, r3, #3
 8008c52:	4423      	add	r3, r4
 8008c54:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008c58:	61fb      	str	r3, [r7, #28]
 8008c5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c5c:	b29a      	uxth	r2, r3
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	891b      	ldrh	r3, [r3, #8]
 8008c66:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	6959      	ldr	r1, [r3, #20]
 8008c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 fab1 	bl	80091de <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	785b      	ldrb	r3, [r3, #1]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d115      	bne.n	8008cb0 <USB_EPStartXfer+0x264>
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	4413      	add	r3, r2
 8008c8e:	881b      	ldrh	r3, [r3, #0]
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c9a:	b29c      	uxth	r4, r3
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	441a      	add	r2, r3
 8008ca6:	4b99      	ldr	r3, [pc, #612]	; (8008f0c <USB_EPStartXfer+0x4c0>)
 8008ca8:	4323      	orrs	r3, r4
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	8013      	strh	r3, [r2, #0]
 8008cae:	e018      	b.n	8008ce2 <USB_EPStartXfer+0x296>
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	785b      	ldrb	r3, [r3, #1]
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d114      	bne.n	8008ce2 <USB_EPStartXfer+0x296>
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	4413      	add	r3, r2
 8008cc2:	881b      	ldrh	r3, [r3, #0]
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cce:	b29c      	uxth	r4, r3
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	441a      	add	r2, r3
 8008cda:	4b8d      	ldr	r3, [pc, #564]	; (8008f10 <USB_EPStartXfer+0x4c4>)
 8008cdc:	4323      	orrs	r3, r4
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	4413      	add	r3, r2
 8008cec:	881b      	ldrh	r3, [r3, #0]
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cf8:	b29c      	uxth	r4, r3
 8008cfa:	f084 0310 	eor.w	r3, r4, #16
 8008cfe:	b29c      	uxth	r4, r3
 8008d00:	f084 0320 	eor.w	r3, r4, #32
 8008d04:	b29c      	uxth	r4, r3
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	441a      	add	r2, r3
 8008d10:	4b80      	ldr	r3, [pc, #512]	; (8008f14 <USB_EPStartXfer+0x4c8>)
 8008d12:	4323      	orrs	r3, r4
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	8013      	strh	r3, [r2, #0]
 8008d18:	e13c      	b.n	8008f94 <USB_EPStartXfer+0x548>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	699a      	ldr	r2, [r3, #24]
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	691b      	ldr	r3, [r3, #16]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d909      	bls.n	8008d3a <USB_EPStartXfer+0x2ee>
    {
      len = ep->maxpacket;
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	691b      	ldr	r3, [r3, #16]
 8008d2a:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	699a      	ldr	r2, [r3, #24]
 8008d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d32:	1ad2      	subs	r2, r2, r3
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	619a      	str	r2, [r3, #24]
 8008d38:	e005      	b.n	8008d46 <USB_EPStartXfer+0x2fa>
    }
    else
    {
      len = ep->xfer_len;
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	699b      	ldr	r3, [r3, #24]
 8008d3e:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	2200      	movs	r2, #0
 8008d44:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	7b1b      	ldrb	r3, [r3, #12]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d144      	bne.n	8008dd8 <USB_EPStartXfer+0x38c>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008d4e:	687c      	ldr	r4, [r7, #4]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	441c      	add	r4, r3
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	00db      	lsls	r3, r3, #3
 8008d60:	4423      	add	r3, r4
 8008d62:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008d66:	623b      	str	r3, [r7, #32]
 8008d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d110      	bne.n	8008d90 <USB_EPStartXfer+0x344>
 8008d6e:	6a3b      	ldr	r3, [r7, #32]
 8008d70:	881b      	ldrh	r3, [r3, #0]
 8008d72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d76:	b29a      	uxth	r2, r3
 8008d78:	6a3b      	ldr	r3, [r7, #32]
 8008d7a:	801a      	strh	r2, [r3, #0]
 8008d7c:	6a3b      	ldr	r3, [r7, #32]
 8008d7e:	881b      	ldrh	r3, [r3, #0]
 8008d80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d88:	b29a      	uxth	r2, r3
 8008d8a:	6a3b      	ldr	r3, [r7, #32]
 8008d8c:	801a      	strh	r2, [r3, #0]
 8008d8e:	e0e6      	b.n	8008f5e <USB_EPStartXfer+0x512>
 8008d90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d92:	2b3d      	cmp	r3, #61	; 0x3d
 8008d94:	d811      	bhi.n	8008dba <USB_EPStartXfer+0x36e>
 8008d96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d98:	085b      	lsrs	r3, r3, #1
 8008d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d9e:	f003 0301 	and.w	r3, r3, #1
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d002      	beq.n	8008dac <USB_EPStartXfer+0x360>
 8008da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008da8:	3301      	adds	r3, #1
 8008daa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	029b      	lsls	r3, r3, #10
 8008db2:	b29a      	uxth	r2, r3
 8008db4:	6a3b      	ldr	r3, [r7, #32]
 8008db6:	801a      	strh	r2, [r3, #0]
 8008db8:	e0d1      	b.n	8008f5e <USB_EPStartXfer+0x512>
 8008dba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dbc:	095b      	lsrs	r3, r3, #5
 8008dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	029b      	lsls	r3, r3, #10
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dd0:	b29a      	uxth	r2, r3
 8008dd2:	6a3b      	ldr	r3, [r7, #32]
 8008dd4:	801a      	strh	r2, [r3, #0]
 8008dd6:	e0c2      	b.n	8008f5e <USB_EPStartXfer+0x512>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	785b      	ldrb	r3, [r3, #1]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d144      	bne.n	8008e6a <USB_EPStartXfer+0x41e>
 8008de0:	687c      	ldr	r4, [r7, #4]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	441c      	add	r4, r3
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	00db      	lsls	r3, r3, #3
 8008df2:	4423      	add	r3, r4
 8008df4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008df8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008dfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d110      	bne.n	8008e22 <USB_EPStartXfer+0x3d6>
 8008e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e02:	881b      	ldrh	r3, [r3, #0]
 8008e04:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008e08:	b29a      	uxth	r2, r3
 8008e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e0c:	801a      	strh	r2, [r3, #0]
 8008e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e10:	881b      	ldrh	r3, [r3, #0]
 8008e12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e1a:	b29a      	uxth	r2, r3
 8008e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e1e:	801a      	strh	r2, [r3, #0]
 8008e20:	e038      	b.n	8008e94 <USB_EPStartXfer+0x448>
 8008e22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e24:	2b3d      	cmp	r3, #61	; 0x3d
 8008e26:	d811      	bhi.n	8008e4c <USB_EPStartXfer+0x400>
 8008e28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e2a:	085b      	lsrs	r3, r3, #1
 8008e2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e30:	f003 0301 	and.w	r3, r3, #1
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d002      	beq.n	8008e3e <USB_EPStartXfer+0x3f2>
 8008e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	029b      	lsls	r3, r3, #10
 8008e44:	b29a      	uxth	r2, r3
 8008e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e48:	801a      	strh	r2, [r3, #0]
 8008e4a:	e023      	b.n	8008e94 <USB_EPStartXfer+0x448>
 8008e4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e4e:	095b      	lsrs	r3, r3, #5
 8008e50:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	029b      	lsls	r3, r3, #10
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e62:	b29a      	uxth	r2, r3
 8008e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e66:	801a      	strh	r2, [r3, #0]
 8008e68:	e014      	b.n	8008e94 <USB_EPStartXfer+0x448>
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	785b      	ldrb	r3, [r3, #1]
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	d110      	bne.n	8008e94 <USB_EPStartXfer+0x448>
 8008e72:	687c      	ldr	r4, [r7, #4]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	441c      	add	r4, r3
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	00db      	lsls	r3, r3, #3
 8008e84:	4423      	add	r3, r4
 8008e86:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008e8a:	633b      	str	r3, [r7, #48]	; 0x30
 8008e8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e8e:	b29a      	uxth	r2, r3
 8008e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e92:	801a      	strh	r2, [r3, #0]
 8008e94:	687c      	ldr	r4, [r7, #4]
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	785b      	ldrb	r3, [r3, #1]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d14b      	bne.n	8008f36 <USB_EPStartXfer+0x4ea>
 8008e9e:	687c      	ldr	r4, [r7, #4]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	441c      	add	r4, r3
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	00db      	lsls	r3, r3, #3
 8008eb0:	4423      	add	r3, r4
 8008eb2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8008eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d110      	bne.n	8008ee0 <USB_EPStartXfer+0x494>
 8008ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec0:	881b      	ldrh	r3, [r3, #0]
 8008ec2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008ec6:	b29a      	uxth	r2, r3
 8008ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eca:	801a      	strh	r2, [r3, #0]
 8008ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ece:	881b      	ldrh	r3, [r3, #0]
 8008ed0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ed4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ed8:	b29a      	uxth	r2, r3
 8008eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008edc:	801a      	strh	r2, [r3, #0]
 8008ede:	e03e      	b.n	8008f5e <USB_EPStartXfer+0x512>
 8008ee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ee2:	2b3d      	cmp	r3, #61	; 0x3d
 8008ee4:	d818      	bhi.n	8008f18 <USB_EPStartXfer+0x4cc>
 8008ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ee8:	085b      	lsrs	r3, r3, #1
 8008eea:	637b      	str	r3, [r7, #52]	; 0x34
 8008eec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008eee:	f003 0301 	and.w	r3, r3, #1
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d002      	beq.n	8008efc <USB_EPStartXfer+0x4b0>
 8008ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ef8:	3301      	adds	r3, #1
 8008efa:	637b      	str	r3, [r7, #52]	; 0x34
 8008efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	029b      	lsls	r3, r3, #10
 8008f02:	b29a      	uxth	r2, r3
 8008f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f06:	801a      	strh	r2, [r3, #0]
 8008f08:	e029      	b.n	8008f5e <USB_EPStartXfer+0x512>
 8008f0a:	bf00      	nop
 8008f0c:	ffff80c0 	.word	0xffff80c0
 8008f10:	ffffc080 	.word	0xffffc080
 8008f14:	ffff8080 	.word	0xffff8080
 8008f18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f1a:	095b      	lsrs	r3, r3, #5
 8008f1c:	637b      	str	r3, [r7, #52]	; 0x34
 8008f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	029b      	lsls	r3, r3, #10
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f2e:	b29a      	uxth	r2, r3
 8008f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f32:	801a      	strh	r2, [r3, #0]
 8008f34:	e013      	b.n	8008f5e <USB_EPStartXfer+0x512>
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	785b      	ldrb	r3, [r3, #1]
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d10f      	bne.n	8008f5e <USB_EPStartXfer+0x512>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	441c      	add	r4, r3
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	00db      	lsls	r3, r3, #3
 8008f4e:	4423      	add	r3, r4
 8008f50:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008f54:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f58:	b29a      	uxth	r2, r3
 8008f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5c:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	4413      	add	r3, r2
 8008f68:	881b      	ldrh	r3, [r3, #0]
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f74:	b29c      	uxth	r4, r3
 8008f76:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008f7a:	b29c      	uxth	r4, r3
 8008f7c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8008f80:	b29c      	uxth	r4, r3
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	441a      	add	r2, r3
 8008f8c:	4b04      	ldr	r3, [pc, #16]	; (8008fa0 <USB_EPStartXfer+0x554>)
 8008f8e:	4323      	orrs	r3, r4
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008f94:	2300      	movs	r3, #0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3754      	adds	r7, #84	; 0x54
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd90      	pop	{r4, r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	ffff8080 	.word	0xffff8080

08008fa4 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008fa4:	b490      	push	{r4, r7}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	785b      	ldrb	r3, [r3, #1]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d018      	beq.n	8008fe8 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	4413      	add	r3, r2
 8008fc0:	881b      	ldrh	r3, [r3, #0]
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fcc:	b29c      	uxth	r4, r3
 8008fce:	f084 0310 	eor.w	r3, r4, #16
 8008fd2:	b29c      	uxth	r4, r3
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	009b      	lsls	r3, r3, #2
 8008fdc:	441a      	add	r2, r3
 8008fde:	4b11      	ldr	r3, [pc, #68]	; (8009024 <USB_EPSetStall+0x80>)
 8008fe0:	4323      	orrs	r3, r4
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	8013      	strh	r3, [r2, #0]
 8008fe6:	e017      	b.n	8009018 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	4413      	add	r3, r2
 8008ff2:	881b      	ldrh	r3, [r3, #0]
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ffe:	b29c      	uxth	r4, r3
 8009000:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8009004:	b29c      	uxth	r4, r3
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	441a      	add	r2, r3
 8009010:	4b04      	ldr	r3, [pc, #16]	; (8009024 <USB_EPSetStall+0x80>)
 8009012:	4323      	orrs	r3, r4
 8009014:	b29b      	uxth	r3, r3
 8009016:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009018:	2300      	movs	r3, #0
}
 800901a:	4618      	mov	r0, r3
 800901c:	3708      	adds	r7, #8
 800901e:	46bd      	mov	sp, r7
 8009020:	bc90      	pop	{r4, r7}
 8009022:	4770      	bx	lr
 8009024:	ffff8080 	.word	0xffff8080

08009028 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009028:	b490      	push	{r4, r7}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	7b1b      	ldrb	r3, [r3, #12]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d17d      	bne.n	8009136 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	785b      	ldrb	r3, [r3, #1]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d03d      	beq.n	80090be <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	4413      	add	r3, r2
 800904c:	881b      	ldrh	r3, [r3, #0]
 800904e:	b29c      	uxth	r4, r3
 8009050:	4623      	mov	r3, r4
 8009052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009056:	2b00      	cmp	r3, #0
 8009058:	d014      	beq.n	8009084 <USB_EPClearStall+0x5c>
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	009b      	lsls	r3, r3, #2
 8009062:	4413      	add	r3, r2
 8009064:	881b      	ldrh	r3, [r3, #0]
 8009066:	b29b      	uxth	r3, r3
 8009068:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800906c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009070:	b29c      	uxth	r4, r3
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	441a      	add	r2, r3
 800907c:	4b31      	ldr	r3, [pc, #196]	; (8009144 <USB_EPClearStall+0x11c>)
 800907e:	4323      	orrs	r3, r4
 8009080:	b29b      	uxth	r3, r3
 8009082:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	78db      	ldrb	r3, [r3, #3]
 8009088:	2b01      	cmp	r3, #1
 800908a:	d054      	beq.n	8009136 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	009b      	lsls	r3, r3, #2
 8009094:	4413      	add	r3, r2
 8009096:	881b      	ldrh	r3, [r3, #0]
 8009098:	b29b      	uxth	r3, r3
 800909a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800909e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090a2:	b29c      	uxth	r4, r3
 80090a4:	f084 0320 	eor.w	r3, r4, #32
 80090a8:	b29c      	uxth	r4, r3
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	441a      	add	r2, r3
 80090b4:	4b24      	ldr	r3, [pc, #144]	; (8009148 <USB_EPClearStall+0x120>)
 80090b6:	4323      	orrs	r3, r4
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	8013      	strh	r3, [r2, #0]
 80090bc:	e03b      	b.n	8009136 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	4413      	add	r3, r2
 80090c8:	881b      	ldrh	r3, [r3, #0]
 80090ca:	b29c      	uxth	r4, r3
 80090cc:	4623      	mov	r3, r4
 80090ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d014      	beq.n	8009100 <USB_EPClearStall+0xd8>
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	4413      	add	r3, r2
 80090e0:	881b      	ldrh	r3, [r3, #0]
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090ec:	b29c      	uxth	r4, r3
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	441a      	add	r2, r3
 80090f8:	4b14      	ldr	r3, [pc, #80]	; (800914c <USB_EPClearStall+0x124>)
 80090fa:	4323      	orrs	r3, r4
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	4413      	add	r3, r2
 800910a:	881b      	ldrh	r3, [r3, #0]
 800910c:	b29b      	uxth	r3, r3
 800910e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009116:	b29c      	uxth	r4, r3
 8009118:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800911c:	b29c      	uxth	r4, r3
 800911e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8009122:	b29c      	uxth	r4, r3
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	441a      	add	r2, r3
 800912e:	4b06      	ldr	r3, [pc, #24]	; (8009148 <USB_EPClearStall+0x120>)
 8009130:	4323      	orrs	r3, r4
 8009132:	b29b      	uxth	r3, r3
 8009134:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009136:	2300      	movs	r3, #0
}
 8009138:	4618      	mov	r0, r3
 800913a:	3708      	adds	r7, #8
 800913c:	46bd      	mov	sp, r7
 800913e:	bc90      	pop	{r4, r7}
 8009140:	4770      	bx	lr
 8009142:	bf00      	nop
 8009144:	ffff80c0 	.word	0xffff80c0
 8009148:	ffff8080 	.word	0xffff8080
 800914c:	ffffc080 	.word	0xffffc080

08009150 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009150:	b480      	push	{r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	460b      	mov	r3, r1
 800915a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800915c:	78fb      	ldrb	r3, [r7, #3]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d103      	bne.n	800916a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2280      	movs	r2, #128	; 0x80
 8009166:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	370c      	adds	r7, #12
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009186:	b29b      	uxth	r3, r3
 8009188:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800918c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009190:	b29a      	uxth	r2, r3
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009198:	2300      	movs	r3, #0
}
 800919a:	4618      	mov	r0, r3
 800919c:	370c      	adds	r7, #12
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr

080091a6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80091a6:	b480      	push	{r7}
 80091a8:	b085      	sub	sp, #20
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80091b8:	68fb      	ldr	r3, [r7, #12]
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3714      	adds	r7, #20
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr

080091c6 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80091c6:	b480      	push	{r7}
 80091c8:	b083      	sub	sp, #12
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
 80091ce:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	370c      	adds	r7, #12
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr

080091de <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80091de:	b480      	push	{r7}
 80091e0:	b08d      	sub	sp, #52	; 0x34
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	60f8      	str	r0, [r7, #12]
 80091e6:	60b9      	str	r1, [r7, #8]
 80091e8:	4611      	mov	r1, r2
 80091ea:	461a      	mov	r2, r3
 80091ec:	460b      	mov	r3, r1
 80091ee:	80fb      	strh	r3, [r7, #6]
 80091f0:	4613      	mov	r3, r2
 80091f2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80091f4:	88bb      	ldrh	r3, [r7, #4]
 80091f6:	3301      	adds	r3, #1
 80091f8:	085b      	lsrs	r3, r3, #1
 80091fa:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009204:	88fa      	ldrh	r2, [r7, #6]
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	4413      	add	r3, r2
 800920a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800920e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009210:	6a3b      	ldr	r3, [r7, #32]
 8009212:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009214:	e01b      	b.n	800924e <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8009216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800921c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921e:	3301      	adds	r3, #1
 8009220:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	b29b      	uxth	r3, r3
 8009228:	021b      	lsls	r3, r3, #8
 800922a:	b29b      	uxth	r3, r3
 800922c:	461a      	mov	r2, r3
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	4313      	orrs	r3, r2
 8009232:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	b29a      	uxth	r2, r3
 8009238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800923c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923e:	3302      	adds	r3, #2
 8009240:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8009242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009244:	3301      	adds	r3, #1
 8009246:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800924a:	3b01      	subs	r3, #1
 800924c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800924e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009250:	2b00      	cmp	r3, #0
 8009252:	d1e0      	bne.n	8009216 <USB_WritePMA+0x38>
  }
}
 8009254:	bf00      	nop
 8009256:	3734      	adds	r7, #52	; 0x34
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr

08009260 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009260:	b480      	push	{r7}
 8009262:	b08b      	sub	sp, #44	; 0x2c
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	4611      	mov	r1, r2
 800926c:	461a      	mov	r2, r3
 800926e:	460b      	mov	r3, r1
 8009270:	80fb      	strh	r3, [r7, #6]
 8009272:	4613      	mov	r3, r2
 8009274:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009276:	88bb      	ldrh	r3, [r7, #4]
 8009278:	085b      	lsrs	r3, r3, #1
 800927a:	b29b      	uxth	r3, r3
 800927c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009286:	88fa      	ldrh	r2, [r7, #6]
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	4413      	add	r3, r2
 800928c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009290:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009292:	69bb      	ldr	r3, [r7, #24]
 8009294:	627b      	str	r3, [r7, #36]	; 0x24
 8009296:	e018      	b.n	80092ca <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009298:	6a3b      	ldr	r3, [r7, #32]
 800929a:	881b      	ldrh	r3, [r3, #0]
 800929c:	b29b      	uxth	r3, r3
 800929e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80092a0:	6a3b      	ldr	r3, [r7, #32]
 80092a2:	3302      	adds	r3, #2
 80092a4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	b2da      	uxtb	r2, r3
 80092aa:	69fb      	ldr	r3, [r7, #28]
 80092ac:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80092ae:	69fb      	ldr	r3, [r7, #28]
 80092b0:	3301      	adds	r3, #1
 80092b2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	0a1b      	lsrs	r3, r3, #8
 80092b8:	b2da      	uxtb	r2, r3
 80092ba:	69fb      	ldr	r3, [r7, #28]
 80092bc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	3301      	adds	r3, #1
 80092c2:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80092c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c6:	3b01      	subs	r3, #1
 80092c8:	627b      	str	r3, [r7, #36]	; 0x24
 80092ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d1e3      	bne.n	8009298 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80092d0:	88bb      	ldrh	r3, [r7, #4]
 80092d2:	f003 0301 	and.w	r3, r3, #1
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d007      	beq.n	80092ec <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80092dc:	6a3b      	ldr	r3, [r7, #32]
 80092de:	881b      	ldrh	r3, [r3, #0]
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	b2da      	uxtb	r2, r3
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	701a      	strb	r2, [r3, #0]
  }
}
 80092ec:	bf00      	nop
 80092ee:	372c      	adds	r7, #44	; 0x2c
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	460b      	mov	r3, r1
 8009302:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009304:	2300      	movs	r3, #0
 8009306:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	7c1b      	ldrb	r3, [r3, #16]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d115      	bne.n	800933c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009310:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009314:	2202      	movs	r2, #2
 8009316:	2181      	movs	r1, #129	; 0x81
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f004 feb8 	bl	800e08e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2201      	movs	r2, #1
 8009322:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009324:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009328:	2202      	movs	r2, #2
 800932a:	2101      	movs	r1, #1
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f004 feae 	bl	800e08e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2201      	movs	r2, #1
 8009336:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800933a:	e012      	b.n	8009362 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800933c:	2340      	movs	r3, #64	; 0x40
 800933e:	2202      	movs	r2, #2
 8009340:	2181      	movs	r1, #129	; 0x81
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f004 fea3 	bl	800e08e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2201      	movs	r2, #1
 800934c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800934e:	2340      	movs	r3, #64	; 0x40
 8009350:	2202      	movs	r2, #2
 8009352:	2101      	movs	r1, #1
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f004 fe9a 	bl	800e08e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2201      	movs	r2, #1
 800935e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009362:	2308      	movs	r3, #8
 8009364:	2203      	movs	r2, #3
 8009366:	2182      	movs	r1, #130	; 0x82
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f004 fe90 	bl	800e08e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2201      	movs	r2, #1
 8009372:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009374:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009378:	f004 ffe0 	bl	800e33c <USBD_static_malloc>
 800937c:	4602      	mov	r2, r0
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800938a:	2b00      	cmp	r3, #0
 800938c:	d102      	bne.n	8009394 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800938e:	2301      	movs	r3, #1
 8009390:	73fb      	strb	r3, [r7, #15]
 8009392:	e026      	b.n	80093e2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800939a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	2200      	movs	r2, #0
 80093aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	2200      	movs	r2, #0
 80093b2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	7c1b      	ldrb	r3, [r3, #16]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d109      	bne.n	80093d2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093c8:	2101      	movs	r1, #1
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f004 ff4a 	bl	800e264 <USBD_LL_PrepareReceive>
 80093d0:	e007      	b.n	80093e2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093d8:	2340      	movs	r3, #64	; 0x40
 80093da:	2101      	movs	r1, #1
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f004 ff41 	bl	800e264 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80093e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3710      	adds	r7, #16
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	460b      	mov	r3, r1
 80093f6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80093f8:	2300      	movs	r3, #0
 80093fa:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80093fc:	2181      	movs	r1, #129	; 0x81
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f004 fe6b 	bl	800e0da <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800940a:	2101      	movs	r1, #1
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f004 fe64 	bl	800e0da <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800941a:	2182      	movs	r1, #130	; 0x82
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f004 fe5c 	bl	800e0da <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2200      	movs	r2, #0
 8009426:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800942e:	2b00      	cmp	r3, #0
 8009430:	d00e      	beq.n	8009450 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009442:	4618      	mov	r0, r3
 8009444:	f004 ff88 	bl	800e358 <USBD_static_free>
    pdev->pClassData = NULL;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009450:	7bfb      	ldrb	r3, [r7, #15]
}
 8009452:	4618      	mov	r0, r3
 8009454:	3710      	adds	r7, #16
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}

0800945a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800945a:	b580      	push	{r7, lr}
 800945c:	b086      	sub	sp, #24
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]
 8009462:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800946a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800946c:	2300      	movs	r3, #0
 800946e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009470:	2300      	movs	r3, #0
 8009472:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009474:	2300      	movs	r3, #0
 8009476:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009480:	2b00      	cmp	r3, #0
 8009482:	d039      	beq.n	80094f8 <USBD_CDC_Setup+0x9e>
 8009484:	2b20      	cmp	r3, #32
 8009486:	d17c      	bne.n	8009582 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	88db      	ldrh	r3, [r3, #6]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d029      	beq.n	80094e4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	b25b      	sxtb	r3, r3
 8009496:	2b00      	cmp	r3, #0
 8009498:	da11      	bge.n	80094be <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	683a      	ldr	r2, [r7, #0]
 80094a4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80094a6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80094a8:	683a      	ldr	r2, [r7, #0]
 80094aa:	88d2      	ldrh	r2, [r2, #6]
 80094ac:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80094ae:	6939      	ldr	r1, [r7, #16]
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	88db      	ldrh	r3, [r3, #6]
 80094b4:	461a      	mov	r2, r3
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f001 fa2a 	bl	800a910 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80094bc:	e068      	b.n	8009590 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	785a      	ldrb	r2, [r3, #1]
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	88db      	ldrh	r3, [r3, #6]
 80094cc:	b2da      	uxtb	r2, r3
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80094d4:	6939      	ldr	r1, [r7, #16]
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	88db      	ldrh	r3, [r3, #6]
 80094da:	461a      	mov	r2, r3
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f001 fa45 	bl	800a96c <USBD_CtlPrepareRx>
      break;
 80094e2:	e055      	b.n	8009590 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	683a      	ldr	r2, [r7, #0]
 80094ee:	7850      	ldrb	r0, [r2, #1]
 80094f0:	2200      	movs	r2, #0
 80094f2:	6839      	ldr	r1, [r7, #0]
 80094f4:	4798      	blx	r3
      break;
 80094f6:	e04b      	b.n	8009590 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	785b      	ldrb	r3, [r3, #1]
 80094fc:	2b0a      	cmp	r3, #10
 80094fe:	d017      	beq.n	8009530 <USBD_CDC_Setup+0xd6>
 8009500:	2b0b      	cmp	r3, #11
 8009502:	d029      	beq.n	8009558 <USBD_CDC_Setup+0xfe>
 8009504:	2b00      	cmp	r3, #0
 8009506:	d133      	bne.n	8009570 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800950e:	2b03      	cmp	r3, #3
 8009510:	d107      	bne.n	8009522 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009512:	f107 030c 	add.w	r3, r7, #12
 8009516:	2202      	movs	r2, #2
 8009518:	4619      	mov	r1, r3
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f001 f9f8 	bl	800a910 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009520:	e02e      	b.n	8009580 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8009522:	6839      	ldr	r1, [r7, #0]
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f001 f988 	bl	800a83a <USBD_CtlError>
            ret = USBD_FAIL;
 800952a:	2302      	movs	r3, #2
 800952c:	75fb      	strb	r3, [r7, #23]
          break;
 800952e:	e027      	b.n	8009580 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009536:	2b03      	cmp	r3, #3
 8009538:	d107      	bne.n	800954a <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800953a:	f107 030f 	add.w	r3, r7, #15
 800953e:	2201      	movs	r2, #1
 8009540:	4619      	mov	r1, r3
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f001 f9e4 	bl	800a910 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009548:	e01a      	b.n	8009580 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800954a:	6839      	ldr	r1, [r7, #0]
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f001 f974 	bl	800a83a <USBD_CtlError>
            ret = USBD_FAIL;
 8009552:	2302      	movs	r3, #2
 8009554:	75fb      	strb	r3, [r7, #23]
          break;
 8009556:	e013      	b.n	8009580 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800955e:	2b03      	cmp	r3, #3
 8009560:	d00d      	beq.n	800957e <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8009562:	6839      	ldr	r1, [r7, #0]
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f001 f968 	bl	800a83a <USBD_CtlError>
            ret = USBD_FAIL;
 800956a:	2302      	movs	r3, #2
 800956c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800956e:	e006      	b.n	800957e <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8009570:	6839      	ldr	r1, [r7, #0]
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f001 f961 	bl	800a83a <USBD_CtlError>
          ret = USBD_FAIL;
 8009578:	2302      	movs	r3, #2
 800957a:	75fb      	strb	r3, [r7, #23]
          break;
 800957c:	e000      	b.n	8009580 <USBD_CDC_Setup+0x126>
          break;
 800957e:	bf00      	nop
      }
      break;
 8009580:	e006      	b.n	8009590 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8009582:	6839      	ldr	r1, [r7, #0]
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f001 f958 	bl	800a83a <USBD_CtlError>
      ret = USBD_FAIL;
 800958a:	2302      	movs	r3, #2
 800958c:	75fb      	strb	r3, [r7, #23]
      break;
 800958e:	bf00      	nop
  }

  return ret;
 8009590:	7dfb      	ldrb	r3, [r7, #23]
}
 8009592:	4618      	mov	r0, r3
 8009594:	3718      	adds	r7, #24
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b084      	sub	sp, #16
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
 80095a2:	460b      	mov	r3, r1
 80095a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095ac:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095b4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d037      	beq.n	8009630 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80095c0:	78fa      	ldrb	r2, [r7, #3]
 80095c2:	6879      	ldr	r1, [r7, #4]
 80095c4:	4613      	mov	r3, r2
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	4413      	add	r3, r2
 80095ca:	009b      	lsls	r3, r3, #2
 80095cc:	440b      	add	r3, r1
 80095ce:	331c      	adds	r3, #28
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d026      	beq.n	8009624 <USBD_CDC_DataIn+0x8a>
 80095d6:	78fa      	ldrb	r2, [r7, #3]
 80095d8:	6879      	ldr	r1, [r7, #4]
 80095da:	4613      	mov	r3, r2
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	4413      	add	r3, r2
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	440b      	add	r3, r1
 80095e4:	331c      	adds	r3, #28
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	78fa      	ldrb	r2, [r7, #3]
 80095ea:	68b9      	ldr	r1, [r7, #8]
 80095ec:	0152      	lsls	r2, r2, #5
 80095ee:	440a      	add	r2, r1
 80095f0:	3238      	adds	r2, #56	; 0x38
 80095f2:	6812      	ldr	r2, [r2, #0]
 80095f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80095f8:	fb02 f201 	mul.w	r2, r2, r1
 80095fc:	1a9b      	subs	r3, r3, r2
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d110      	bne.n	8009624 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009602:	78fa      	ldrb	r2, [r7, #3]
 8009604:	6879      	ldr	r1, [r7, #4]
 8009606:	4613      	mov	r3, r2
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	4413      	add	r3, r2
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	440b      	add	r3, r1
 8009610:	331c      	adds	r3, #28
 8009612:	2200      	movs	r2, #0
 8009614:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009616:	78f9      	ldrb	r1, [r7, #3]
 8009618:	2300      	movs	r3, #0
 800961a:	2200      	movs	r2, #0
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f004 fdfe 	bl	800e21e <USBD_LL_Transmit>
 8009622:	e003      	b.n	800962c <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2200      	movs	r2, #0
 8009628:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800962c:	2300      	movs	r3, #0
 800962e:	e000      	b.n	8009632 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8009630:	2302      	movs	r3, #2
  }
}
 8009632:	4618      	mov	r0, r3
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b084      	sub	sp, #16
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
 8009642:	460b      	mov	r3, r1
 8009644:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800964c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800964e:	78fb      	ldrb	r3, [r7, #3]
 8009650:	4619      	mov	r1, r3
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f004 fe29 	bl	800e2aa <USBD_LL_GetRxDataSize>
 8009658:	4602      	mov	r2, r0
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009666:	2b00      	cmp	r3, #0
 8009668:	d00d      	beq.n	8009686 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	68fa      	ldr	r2, [r7, #12]
 8009674:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009678:	68fa      	ldr	r2, [r7, #12]
 800967a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800967e:	4611      	mov	r1, r2
 8009680:	4798      	blx	r3

    return USBD_OK;
 8009682:	2300      	movs	r3, #0
 8009684:	e000      	b.n	8009688 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009686:	2302      	movs	r3, #2
  }
}
 8009688:	4618      	mov	r0, r3
 800968a:	3710      	adds	r7, #16
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800969e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d015      	beq.n	80096d6 <USBD_CDC_EP0_RxReady+0x46>
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80096b0:	2bff      	cmp	r3, #255	; 0xff
 80096b2:	d010      	beq.n	80096d6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	68fa      	ldr	r2, [r7, #12]
 80096be:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80096c2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80096c4:	68fa      	ldr	r2, [r7, #12]
 80096c6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80096ca:	b292      	uxth	r2, r2
 80096cc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	22ff      	movs	r2, #255	; 0xff
 80096d2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80096d6:	2300      	movs	r3, #0
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3710      	adds	r7, #16
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b083      	sub	sp, #12
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2243      	movs	r2, #67	; 0x43
 80096ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80096ee:	4b03      	ldr	r3, [pc, #12]	; (80096fc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	370c      	adds	r7, #12
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr
 80096fc:	200000a0 	.word	0x200000a0

08009700 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2243      	movs	r2, #67	; 0x43
 800970c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800970e:	4b03      	ldr	r3, [pc, #12]	; (800971c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009710:	4618      	mov	r0, r3
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr
 800971c:	2000005c 	.word	0x2000005c

08009720 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2243      	movs	r2, #67	; 0x43
 800972c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800972e:	4b03      	ldr	r3, [pc, #12]	; (800973c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009730:	4618      	mov	r0, r3
 8009732:	370c      	adds	r7, #12
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr
 800973c:	200000e4 	.word	0x200000e4

08009740 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009740:	b480      	push	{r7}
 8009742:	b083      	sub	sp, #12
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	220a      	movs	r2, #10
 800974c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800974e:	4b03      	ldr	r3, [pc, #12]	; (800975c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009750:	4618      	mov	r0, r3
 8009752:	370c      	adds	r7, #12
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr
 800975c:	20000018 	.word	0x20000018

08009760 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009760:	b480      	push	{r7}
 8009762:	b085      	sub	sp, #20
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800976a:	2302      	movs	r3, #2
 800976c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d005      	beq.n	8009780 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	683a      	ldr	r2, [r7, #0]
 8009778:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800977c:	2300      	movs	r3, #0
 800977e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009780:	7bfb      	ldrb	r3, [r7, #15]
}
 8009782:	4618      	mov	r0, r3
 8009784:	3714      	adds	r7, #20
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr

0800978e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800978e:	b480      	push	{r7}
 8009790:	b087      	sub	sp, #28
 8009792:	af00      	add	r7, sp, #0
 8009794:	60f8      	str	r0, [r7, #12]
 8009796:	60b9      	str	r1, [r7, #8]
 8009798:	4613      	mov	r3, r2
 800979a:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097a2:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	68ba      	ldr	r2, [r7, #8]
 80097a8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80097ac:	88fa      	ldrh	r2, [r7, #6]
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80097b4:	2300      	movs	r3, #0
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	371c      	adds	r7, #28
 80097ba:	46bd      	mov	sp, r7
 80097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c0:	4770      	bx	lr

080097c2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80097c2:	b480      	push	{r7}
 80097c4:	b085      	sub	sp, #20
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
 80097ca:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097d2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	683a      	ldr	r2, [r7, #0]
 80097d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80097dc:	2300      	movs	r3, #0
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3714      	adds	r7, #20
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr

080097ea <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b084      	sub	sp, #16
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097f8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009800:	2b00      	cmp	r3, #0
 8009802:	d01c      	beq.n	800983e <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800980a:	2b00      	cmp	r3, #0
 800980c:	d115      	bne.n	800983a <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2201      	movs	r2, #1
 8009812:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800982c:	b29b      	uxth	r3, r3
 800982e:	2181      	movs	r1, #129	; 0x81
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f004 fcf4 	bl	800e21e <USBD_LL_Transmit>

      return USBD_OK;
 8009836:	2300      	movs	r3, #0
 8009838:	e002      	b.n	8009840 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800983a:	2301      	movs	r3, #1
 800983c:	e000      	b.n	8009840 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800983e:	2302      	movs	r3, #2
  }
}
 8009840:	4618      	mov	r0, r3
 8009842:	3710      	adds	r7, #16
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009856:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800985e:	2b00      	cmp	r3, #0
 8009860:	d017      	beq.n	8009892 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	7c1b      	ldrb	r3, [r3, #16]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d109      	bne.n	800987e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009870:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009874:	2101      	movs	r1, #1
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f004 fcf4 	bl	800e264 <USBD_LL_PrepareReceive>
 800987c:	e007      	b.n	800988e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009884:	2340      	movs	r3, #64	; 0x40
 8009886:	2101      	movs	r1, #1
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f004 fceb 	bl	800e264 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800988e:	2300      	movs	r3, #0
 8009890:	e000      	b.n	8009894 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009892:	2302      	movs	r3, #2
  }
}
 8009894:	4618      	mov	r0, r3
 8009896:	3710      	adds	r7, #16
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b084      	sub	sp, #16
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	60b9      	str	r1, [r7, #8]
 80098a6:	4613      	mov	r3, r2
 80098a8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d101      	bne.n	80098b4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80098b0:	2302      	movs	r3, #2
 80098b2:	e01a      	b.n	80098ea <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d003      	beq.n	80098c6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2200      	movs	r2, #0
 80098c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d003      	beq.n	80098d4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	68ba      	ldr	r2, [r7, #8]
 80098d0:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2201      	movs	r2, #1
 80098d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	79fa      	ldrb	r2, [r7, #7]
 80098e0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80098e2:	68f8      	ldr	r0, [r7, #12]
 80098e4:	f004 fb56 	bl	800df94 <USBD_LL_Init>

  return USBD_OK;
 80098e8:	2300      	movs	r3, #0
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3710      	adds	r7, #16
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}

080098f2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80098f2:	b480      	push	{r7}
 80098f4:	b085      	sub	sp, #20
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	6078      	str	r0, [r7, #4]
 80098fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80098fc:	2300      	movs	r3, #0
 80098fe:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d006      	beq.n	8009914 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	683a      	ldr	r2, [r7, #0]
 800990a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800990e:	2300      	movs	r3, #0
 8009910:	73fb      	strb	r3, [r7, #15]
 8009912:	e001      	b.n	8009918 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009914:	2302      	movs	r3, #2
 8009916:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009918:	7bfb      	ldrb	r3, [r7, #15]
}
 800991a:	4618      	mov	r0, r3
 800991c:	3714      	adds	r7, #20
 800991e:	46bd      	mov	sp, r7
 8009920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009924:	4770      	bx	lr

08009926 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009926:	b580      	push	{r7, lr}
 8009928:	b082      	sub	sp, #8
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f004 fb92 	bl	800e058 <USBD_LL_Start>

  return USBD_OK;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	3708      	adds	r7, #8
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800993e:	b480      	push	{r7}
 8009940:	b083      	sub	sp, #12
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009946:	2300      	movs	r3, #0
}
 8009948:	4618      	mov	r0, r3
 800994a:	370c      	adds	r7, #12
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	460b      	mov	r3, r1
 800995e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009960:	2302      	movs	r3, #2
 8009962:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800996a:	2b00      	cmp	r3, #0
 800996c:	d00c      	beq.n	8009988 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	78fa      	ldrb	r2, [r7, #3]
 8009978:	4611      	mov	r1, r2
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	4798      	blx	r3
 800997e:	4603      	mov	r3, r0
 8009980:	2b00      	cmp	r3, #0
 8009982:	d101      	bne.n	8009988 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009984:	2300      	movs	r3, #0
 8009986:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009988:	7bfb      	ldrb	r3, [r7, #15]
}
 800998a:	4618      	mov	r0, r3
 800998c:	3710      	adds	r7, #16
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}

08009992 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009992:	b580      	push	{r7, lr}
 8009994:	b082      	sub	sp, #8
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
 800999a:	460b      	mov	r3, r1
 800999c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	78fa      	ldrb	r2, [r7, #3]
 80099a8:	4611      	mov	r1, r2
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	4798      	blx	r3

  return USBD_OK;
 80099ae:	2300      	movs	r3, #0
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3708      	adds	r7, #8
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80099c8:	6839      	ldr	r1, [r7, #0]
 80099ca:	4618      	mov	r0, r3
 80099cc:	f000 fef8 	bl	800a7c0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2201      	movs	r2, #1
 80099d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80099de:	461a      	mov	r2, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80099ec:	f003 031f 	and.w	r3, r3, #31
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d00c      	beq.n	8009a0e <USBD_LL_SetupStage+0x56>
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d302      	bcc.n	80099fe <USBD_LL_SetupStage+0x46>
 80099f8:	2b02      	cmp	r3, #2
 80099fa:	d010      	beq.n	8009a1e <USBD_LL_SetupStage+0x66>
 80099fc:	e017      	b.n	8009a2e <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009a04:	4619      	mov	r1, r3
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 f9ce 	bl	8009da8 <USBD_StdDevReq>
      break;
 8009a0c:	e01a      	b.n	8009a44 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009a14:	4619      	mov	r1, r3
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 fa30 	bl	8009e7c <USBD_StdItfReq>
      break;
 8009a1c:	e012      	b.n	8009a44 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009a24:	4619      	mov	r1, r3
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 fa6e 	bl	8009f08 <USBD_StdEPReq>
      break;
 8009a2c:	e00a      	b.n	8009a44 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009a34:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f004 fb6b 	bl	800e118 <USBD_LL_StallEP>
      break;
 8009a42:	bf00      	nop
  }

  return USBD_OK;
 8009a44:	2300      	movs	r3, #0
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3708      	adds	r7, #8
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b086      	sub	sp, #24
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	60f8      	str	r0, [r7, #12]
 8009a56:	460b      	mov	r3, r1
 8009a58:	607a      	str	r2, [r7, #4]
 8009a5a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009a5c:	7afb      	ldrb	r3, [r7, #11]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d14b      	bne.n	8009afa <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009a68:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009a70:	2b03      	cmp	r3, #3
 8009a72:	d134      	bne.n	8009ade <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	68da      	ldr	r2, [r3, #12]
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	691b      	ldr	r3, [r3, #16]
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d919      	bls.n	8009ab4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	68da      	ldr	r2, [r3, #12]
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	691b      	ldr	r3, [r3, #16]
 8009a88:	1ad2      	subs	r2, r2, r3
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	68da      	ldr	r2, [r3, #12]
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d203      	bcs.n	8009aa2 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	e002      	b.n	8009aa8 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	6879      	ldr	r1, [r7, #4]
 8009aac:	68f8      	ldr	r0, [r7, #12]
 8009aae:	f000 ff7b 	bl	800a9a8 <USBD_CtlContinueRx>
 8009ab2:	e038      	b.n	8009b26 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aba:	691b      	ldr	r3, [r3, #16]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d00a      	beq.n	8009ad6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009ac6:	2b03      	cmp	r3, #3
 8009ac8:	d105      	bne.n	8009ad6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ad0:	691b      	ldr	r3, [r3, #16]
 8009ad2:	68f8      	ldr	r0, [r7, #12]
 8009ad4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009ad6:	68f8      	ldr	r0, [r7, #12]
 8009ad8:	f000 ff78 	bl	800a9cc <USBD_CtlSendStatus>
 8009adc:	e023      	b.n	8009b26 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009ae4:	2b05      	cmp	r3, #5
 8009ae6:	d11e      	bne.n	8009b26 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2200      	movs	r2, #0
 8009aec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009af0:	2100      	movs	r1, #0
 8009af2:	68f8      	ldr	r0, [r7, #12]
 8009af4:	f004 fb10 	bl	800e118 <USBD_LL_StallEP>
 8009af8:	e015      	b.n	8009b26 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b00:	699b      	ldr	r3, [r3, #24]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d00d      	beq.n	8009b22 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009b0c:	2b03      	cmp	r3, #3
 8009b0e:	d108      	bne.n	8009b22 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b16:	699b      	ldr	r3, [r3, #24]
 8009b18:	7afa      	ldrb	r2, [r7, #11]
 8009b1a:	4611      	mov	r1, r2
 8009b1c:	68f8      	ldr	r0, [r7, #12]
 8009b1e:	4798      	blx	r3
 8009b20:	e001      	b.n	8009b26 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009b22:	2302      	movs	r3, #2
 8009b24:	e000      	b.n	8009b28 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009b26:	2300      	movs	r3, #0
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3718      	adds	r7, #24
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b086      	sub	sp, #24
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	460b      	mov	r3, r1
 8009b3a:	607a      	str	r2, [r7, #4]
 8009b3c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009b3e:	7afb      	ldrb	r3, [r7, #11]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d17f      	bne.n	8009c44 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	3314      	adds	r3, #20
 8009b48:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009b50:	2b02      	cmp	r3, #2
 8009b52:	d15c      	bne.n	8009c0e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	68da      	ldr	r2, [r3, #12]
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	691b      	ldr	r3, [r3, #16]
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d915      	bls.n	8009b8c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	68da      	ldr	r2, [r3, #12]
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	691b      	ldr	r3, [r3, #16]
 8009b68:	1ad2      	subs	r2, r2, r3
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	461a      	mov	r2, r3
 8009b76:	6879      	ldr	r1, [r7, #4]
 8009b78:	68f8      	ldr	r0, [r7, #12]
 8009b7a:	f000 fee5 	bl	800a948 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b7e:	2300      	movs	r3, #0
 8009b80:	2200      	movs	r2, #0
 8009b82:	2100      	movs	r1, #0
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f004 fb6d 	bl	800e264 <USBD_LL_PrepareReceive>
 8009b8a:	e04e      	b.n	8009c2a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	697a      	ldr	r2, [r7, #20]
 8009b92:	6912      	ldr	r2, [r2, #16]
 8009b94:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b98:	fb02 f201 	mul.w	r2, r2, r1
 8009b9c:	1a9b      	subs	r3, r3, r2
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d11c      	bne.n	8009bdc <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	689a      	ldr	r2, [r3, #8]
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d316      	bcc.n	8009bdc <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	689a      	ldr	r2, [r3, #8]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d20f      	bcs.n	8009bdc <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	2100      	movs	r1, #0
 8009bc0:	68f8      	ldr	r0, [r7, #12]
 8009bc2:	f000 fec1 	bl	800a948 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009bce:	2300      	movs	r3, #0
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	2100      	movs	r1, #0
 8009bd4:	68f8      	ldr	r0, [r7, #12]
 8009bd6:	f004 fb45 	bl	800e264 <USBD_LL_PrepareReceive>
 8009bda:	e026      	b.n	8009c2a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d00a      	beq.n	8009bfe <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009bee:	2b03      	cmp	r3, #3
 8009bf0:	d105      	bne.n	8009bfe <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bf8:	68db      	ldr	r3, [r3, #12]
 8009bfa:	68f8      	ldr	r0, [r7, #12]
 8009bfc:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009bfe:	2180      	movs	r1, #128	; 0x80
 8009c00:	68f8      	ldr	r0, [r7, #12]
 8009c02:	f004 fa89 	bl	800e118 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009c06:	68f8      	ldr	r0, [r7, #12]
 8009c08:	f000 fef3 	bl	800a9f2 <USBD_CtlReceiveStatus>
 8009c0c:	e00d      	b.n	8009c2a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009c14:	2b04      	cmp	r3, #4
 8009c16:	d004      	beq.n	8009c22 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d103      	bne.n	8009c2a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009c22:	2180      	movs	r1, #128	; 0x80
 8009c24:	68f8      	ldr	r0, [r7, #12]
 8009c26:	f004 fa77 	bl	800e118 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d11d      	bne.n	8009c70 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009c34:	68f8      	ldr	r0, [r7, #12]
 8009c36:	f7ff fe82 	bl	800993e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009c42:	e015      	b.n	8009c70 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c4a:	695b      	ldr	r3, [r3, #20]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d00d      	beq.n	8009c6c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009c56:	2b03      	cmp	r3, #3
 8009c58:	d108      	bne.n	8009c6c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c60:	695b      	ldr	r3, [r3, #20]
 8009c62:	7afa      	ldrb	r2, [r7, #11]
 8009c64:	4611      	mov	r1, r2
 8009c66:	68f8      	ldr	r0, [r7, #12]
 8009c68:	4798      	blx	r3
 8009c6a:	e001      	b.n	8009c70 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009c6c:	2302      	movs	r3, #2
 8009c6e:	e000      	b.n	8009c72 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009c70:	2300      	movs	r3, #0
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3718      	adds	r7, #24
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}

08009c7a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009c7a:	b580      	push	{r7, lr}
 8009c7c:	b082      	sub	sp, #8
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009c82:	2340      	movs	r3, #64	; 0x40
 8009c84:	2200      	movs	r2, #0
 8009c86:	2100      	movs	r1, #0
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f004 fa00 	bl	800e08e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2201      	movs	r2, #1
 8009c92:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2240      	movs	r2, #64	; 0x40
 8009c9a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009c9e:	2340      	movs	r3, #64	; 0x40
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	2180      	movs	r1, #128	; 0x80
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f004 f9f2 	bl	800e08e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2201      	movs	r2, #1
 8009cae:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2240      	movs	r2, #64	; 0x40
 8009cb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2201      	movs	r2, #1
 8009cba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d009      	beq.n	8009cf2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	6852      	ldr	r2, [r2, #4]
 8009cea:	b2d2      	uxtb	r2, r2
 8009cec:	4611      	mov	r1, r2
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	4798      	blx	r3
  }

  return USBD_OK;
 8009cf2:	2300      	movs	r3, #0
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3708      	adds	r7, #8
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	460b      	mov	r3, r1
 8009d06:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	78fa      	ldrb	r2, [r7, #3]
 8009d0c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009d0e:	2300      	movs	r3, #0
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	370c      	adds	r7, #12
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr

08009d1c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b083      	sub	sp, #12
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2204      	movs	r2, #4
 8009d34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009d38:	2300      	movs	r3, #0
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	370c      	adds	r7, #12
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr

08009d46 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009d46:	b480      	push	{r7}
 8009d48:	b083      	sub	sp, #12
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d54:	2b04      	cmp	r3, #4
 8009d56:	d105      	bne.n	8009d64 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009d64:	2300      	movs	r3, #0
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	370c      	adds	r7, #12
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr

08009d72 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009d72:	b580      	push	{r7, lr}
 8009d74:	b082      	sub	sp, #8
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d80:	2b03      	cmp	r3, #3
 8009d82:	d10b      	bne.n	8009d9c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d8a:	69db      	ldr	r3, [r3, #28]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d005      	beq.n	8009d9c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d96:	69db      	ldr	r3, [r3, #28]
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009d9c:	2300      	movs	r3, #0
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3708      	adds	r7, #8
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
	...

08009da8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009db2:	2300      	movs	r3, #0
 8009db4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	781b      	ldrb	r3, [r3, #0]
 8009dba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009dbe:	2b20      	cmp	r3, #32
 8009dc0:	d004      	beq.n	8009dcc <USBD_StdDevReq+0x24>
 8009dc2:	2b40      	cmp	r3, #64	; 0x40
 8009dc4:	d002      	beq.n	8009dcc <USBD_StdDevReq+0x24>
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d008      	beq.n	8009ddc <USBD_StdDevReq+0x34>
 8009dca:	e04c      	b.n	8009e66 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dd2:	689b      	ldr	r3, [r3, #8]
 8009dd4:	6839      	ldr	r1, [r7, #0]
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	4798      	blx	r3
      break;
 8009dda:	e049      	b.n	8009e70 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	785b      	ldrb	r3, [r3, #1]
 8009de0:	2b09      	cmp	r3, #9
 8009de2:	d83a      	bhi.n	8009e5a <USBD_StdDevReq+0xb2>
 8009de4:	a201      	add	r2, pc, #4	; (adr r2, 8009dec <USBD_StdDevReq+0x44>)
 8009de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dea:	bf00      	nop
 8009dec:	08009e3d 	.word	0x08009e3d
 8009df0:	08009e51 	.word	0x08009e51
 8009df4:	08009e5b 	.word	0x08009e5b
 8009df8:	08009e47 	.word	0x08009e47
 8009dfc:	08009e5b 	.word	0x08009e5b
 8009e00:	08009e1f 	.word	0x08009e1f
 8009e04:	08009e15 	.word	0x08009e15
 8009e08:	08009e5b 	.word	0x08009e5b
 8009e0c:	08009e33 	.word	0x08009e33
 8009e10:	08009e29 	.word	0x08009e29
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009e14:	6839      	ldr	r1, [r7, #0]
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 f9d4 	bl	800a1c4 <USBD_GetDescriptor>
          break;
 8009e1c:	e022      	b.n	8009e64 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009e1e:	6839      	ldr	r1, [r7, #0]
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f000 fb61 	bl	800a4e8 <USBD_SetAddress>
          break;
 8009e26:	e01d      	b.n	8009e64 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009e28:	6839      	ldr	r1, [r7, #0]
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 fb9e 	bl	800a56c <USBD_SetConfig>
          break;
 8009e30:	e018      	b.n	8009e64 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009e32:	6839      	ldr	r1, [r7, #0]
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 fc27 	bl	800a688 <USBD_GetConfig>
          break;
 8009e3a:	e013      	b.n	8009e64 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009e3c:	6839      	ldr	r1, [r7, #0]
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 fc56 	bl	800a6f0 <USBD_GetStatus>
          break;
 8009e44:	e00e      	b.n	8009e64 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009e46:	6839      	ldr	r1, [r7, #0]
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 fc84 	bl	800a756 <USBD_SetFeature>
          break;
 8009e4e:	e009      	b.n	8009e64 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009e50:	6839      	ldr	r1, [r7, #0]
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 fc93 	bl	800a77e <USBD_ClrFeature>
          break;
 8009e58:	e004      	b.n	8009e64 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009e5a:	6839      	ldr	r1, [r7, #0]
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 fcec 	bl	800a83a <USBD_CtlError>
          break;
 8009e62:	bf00      	nop
      }
      break;
 8009e64:	e004      	b.n	8009e70 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009e66:	6839      	ldr	r1, [r7, #0]
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f000 fce6 	bl	800a83a <USBD_CtlError>
      break;
 8009e6e:	bf00      	nop
  }

  return ret;
 8009e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3710      	adds	r7, #16
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop

08009e7c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e86:	2300      	movs	r3, #0
 8009e88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e92:	2b20      	cmp	r3, #32
 8009e94:	d003      	beq.n	8009e9e <USBD_StdItfReq+0x22>
 8009e96:	2b40      	cmp	r3, #64	; 0x40
 8009e98:	d001      	beq.n	8009e9e <USBD_StdItfReq+0x22>
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d12a      	bne.n	8009ef4 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ea4:	3b01      	subs	r3, #1
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	d81d      	bhi.n	8009ee6 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	889b      	ldrh	r3, [r3, #4]
 8009eae:	b2db      	uxtb	r3, r3
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d813      	bhi.n	8009edc <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009eba:	689b      	ldr	r3, [r3, #8]
 8009ebc:	6839      	ldr	r1, [r7, #0]
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	4798      	blx	r3
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	88db      	ldrh	r3, [r3, #6]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d110      	bne.n	8009ef0 <USBD_StdItfReq+0x74>
 8009ece:	7bfb      	ldrb	r3, [r7, #15]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d10d      	bne.n	8009ef0 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f000 fd79 	bl	800a9cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009eda:	e009      	b.n	8009ef0 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8009edc:	6839      	ldr	r1, [r7, #0]
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 fcab 	bl	800a83a <USBD_CtlError>
          break;
 8009ee4:	e004      	b.n	8009ef0 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8009ee6:	6839      	ldr	r1, [r7, #0]
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 fca6 	bl	800a83a <USBD_CtlError>
          break;
 8009eee:	e000      	b.n	8009ef2 <USBD_StdItfReq+0x76>
          break;
 8009ef0:	bf00      	nop
      }
      break;
 8009ef2:	e004      	b.n	8009efe <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8009ef4:	6839      	ldr	r1, [r7, #0]
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 fc9f 	bl	800a83a <USBD_CtlError>
      break;
 8009efc:	bf00      	nop
  }

  return USBD_OK;
 8009efe:	2300      	movs	r3, #0
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3710      	adds	r7, #16
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b084      	sub	sp, #16
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009f12:	2300      	movs	r3, #0
 8009f14:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	889b      	ldrh	r3, [r3, #4]
 8009f1a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f24:	2b20      	cmp	r3, #32
 8009f26:	d004      	beq.n	8009f32 <USBD_StdEPReq+0x2a>
 8009f28:	2b40      	cmp	r3, #64	; 0x40
 8009f2a:	d002      	beq.n	8009f32 <USBD_StdEPReq+0x2a>
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d008      	beq.n	8009f42 <USBD_StdEPReq+0x3a>
 8009f30:	e13d      	b.n	800a1ae <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f38:	689b      	ldr	r3, [r3, #8]
 8009f3a:	6839      	ldr	r1, [r7, #0]
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	4798      	blx	r3
      break;
 8009f40:	e13a      	b.n	800a1b8 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f4a:	2b20      	cmp	r3, #32
 8009f4c:	d10a      	bne.n	8009f64 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f54:	689b      	ldr	r3, [r3, #8]
 8009f56:	6839      	ldr	r1, [r7, #0]
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	4798      	blx	r3
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009f60:	7bfb      	ldrb	r3, [r7, #15]
 8009f62:	e12a      	b.n	800a1ba <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	785b      	ldrb	r3, [r3, #1]
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d03e      	beq.n	8009fea <USBD_StdEPReq+0xe2>
 8009f6c:	2b03      	cmp	r3, #3
 8009f6e:	d002      	beq.n	8009f76 <USBD_StdEPReq+0x6e>
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d070      	beq.n	800a056 <USBD_StdEPReq+0x14e>
 8009f74:	e115      	b.n	800a1a2 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f7c:	2b02      	cmp	r3, #2
 8009f7e:	d002      	beq.n	8009f86 <USBD_StdEPReq+0x7e>
 8009f80:	2b03      	cmp	r3, #3
 8009f82:	d015      	beq.n	8009fb0 <USBD_StdEPReq+0xa8>
 8009f84:	e02b      	b.n	8009fde <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f86:	7bbb      	ldrb	r3, [r7, #14]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d00c      	beq.n	8009fa6 <USBD_StdEPReq+0x9e>
 8009f8c:	7bbb      	ldrb	r3, [r7, #14]
 8009f8e:	2b80      	cmp	r3, #128	; 0x80
 8009f90:	d009      	beq.n	8009fa6 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009f92:	7bbb      	ldrb	r3, [r7, #14]
 8009f94:	4619      	mov	r1, r3
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f004 f8be 	bl	800e118 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009f9c:	2180      	movs	r1, #128	; 0x80
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f004 f8ba 	bl	800e118 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009fa4:	e020      	b.n	8009fe8 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8009fa6:	6839      	ldr	r1, [r7, #0]
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f000 fc46 	bl	800a83a <USBD_CtlError>
              break;
 8009fae:	e01b      	b.n	8009fe8 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	885b      	ldrh	r3, [r3, #2]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d10e      	bne.n	8009fd6 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8009fb8:	7bbb      	ldrb	r3, [r7, #14]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d00b      	beq.n	8009fd6 <USBD_StdEPReq+0xce>
 8009fbe:	7bbb      	ldrb	r3, [r7, #14]
 8009fc0:	2b80      	cmp	r3, #128	; 0x80
 8009fc2:	d008      	beq.n	8009fd6 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	88db      	ldrh	r3, [r3, #6]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d104      	bne.n	8009fd6 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009fcc:	7bbb      	ldrb	r3, [r7, #14]
 8009fce:	4619      	mov	r1, r3
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f004 f8a1 	bl	800e118 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 fcf8 	bl	800a9cc <USBD_CtlSendStatus>

              break;
 8009fdc:	e004      	b.n	8009fe8 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8009fde:	6839      	ldr	r1, [r7, #0]
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f000 fc2a 	bl	800a83a <USBD_CtlError>
              break;
 8009fe6:	bf00      	nop
          }
          break;
 8009fe8:	e0e0      	b.n	800a1ac <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ff0:	2b02      	cmp	r3, #2
 8009ff2:	d002      	beq.n	8009ffa <USBD_StdEPReq+0xf2>
 8009ff4:	2b03      	cmp	r3, #3
 8009ff6:	d015      	beq.n	800a024 <USBD_StdEPReq+0x11c>
 8009ff8:	e026      	b.n	800a048 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ffa:	7bbb      	ldrb	r3, [r7, #14]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d00c      	beq.n	800a01a <USBD_StdEPReq+0x112>
 800a000:	7bbb      	ldrb	r3, [r7, #14]
 800a002:	2b80      	cmp	r3, #128	; 0x80
 800a004:	d009      	beq.n	800a01a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a006:	7bbb      	ldrb	r3, [r7, #14]
 800a008:	4619      	mov	r1, r3
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f004 f884 	bl	800e118 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a010:	2180      	movs	r1, #128	; 0x80
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f004 f880 	bl	800e118 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a018:	e01c      	b.n	800a054 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800a01a:	6839      	ldr	r1, [r7, #0]
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f000 fc0c 	bl	800a83a <USBD_CtlError>
              break;
 800a022:	e017      	b.n	800a054 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	885b      	ldrh	r3, [r3, #2]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d112      	bne.n	800a052 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a02c:	7bbb      	ldrb	r3, [r7, #14]
 800a02e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a032:	2b00      	cmp	r3, #0
 800a034:	d004      	beq.n	800a040 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a036:	7bbb      	ldrb	r3, [r7, #14]
 800a038:	4619      	mov	r1, r3
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f004 f88b 	bl	800e156 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f000 fcc3 	bl	800a9cc <USBD_CtlSendStatus>
              }
              break;
 800a046:	e004      	b.n	800a052 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800a048:	6839      	ldr	r1, [r7, #0]
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 fbf5 	bl	800a83a <USBD_CtlError>
              break;
 800a050:	e000      	b.n	800a054 <USBD_StdEPReq+0x14c>
              break;
 800a052:	bf00      	nop
          }
          break;
 800a054:	e0aa      	b.n	800a1ac <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a05c:	2b02      	cmp	r3, #2
 800a05e:	d002      	beq.n	800a066 <USBD_StdEPReq+0x15e>
 800a060:	2b03      	cmp	r3, #3
 800a062:	d032      	beq.n	800a0ca <USBD_StdEPReq+0x1c2>
 800a064:	e097      	b.n	800a196 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a066:	7bbb      	ldrb	r3, [r7, #14]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d007      	beq.n	800a07c <USBD_StdEPReq+0x174>
 800a06c:	7bbb      	ldrb	r3, [r7, #14]
 800a06e:	2b80      	cmp	r3, #128	; 0x80
 800a070:	d004      	beq.n	800a07c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800a072:	6839      	ldr	r1, [r7, #0]
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 fbe0 	bl	800a83a <USBD_CtlError>
                break;
 800a07a:	e091      	b.n	800a1a0 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a07c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a080:	2b00      	cmp	r3, #0
 800a082:	da0b      	bge.n	800a09c <USBD_StdEPReq+0x194>
 800a084:	7bbb      	ldrb	r3, [r7, #14]
 800a086:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a08a:	4613      	mov	r3, r2
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	4413      	add	r3, r2
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	3310      	adds	r3, #16
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	4413      	add	r3, r2
 800a098:	3304      	adds	r3, #4
 800a09a:	e00b      	b.n	800a0b4 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a09c:	7bbb      	ldrb	r3, [r7, #14]
 800a09e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a0a2:	4613      	mov	r3, r2
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	4413      	add	r3, r2
 800a0a8:	009b      	lsls	r3, r3, #2
 800a0aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	4413      	add	r3, r2
 800a0b2:	3304      	adds	r3, #4
 800a0b4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	2202      	movs	r2, #2
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 fc24 	bl	800a910 <USBD_CtlSendData>
              break;
 800a0c8:	e06a      	b.n	800a1a0 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a0ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	da11      	bge.n	800a0f6 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a0d2:	7bbb      	ldrb	r3, [r7, #14]
 800a0d4:	f003 020f 	and.w	r2, r3, #15
 800a0d8:	6879      	ldr	r1, [r7, #4]
 800a0da:	4613      	mov	r3, r2
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	4413      	add	r3, r2
 800a0e0:	009b      	lsls	r3, r3, #2
 800a0e2:	440b      	add	r3, r1
 800a0e4:	3318      	adds	r3, #24
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d117      	bne.n	800a11c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800a0ec:	6839      	ldr	r1, [r7, #0]
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 fba3 	bl	800a83a <USBD_CtlError>
                  break;
 800a0f4:	e054      	b.n	800a1a0 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a0f6:	7bbb      	ldrb	r3, [r7, #14]
 800a0f8:	f003 020f 	and.w	r2, r3, #15
 800a0fc:	6879      	ldr	r1, [r7, #4]
 800a0fe:	4613      	mov	r3, r2
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	4413      	add	r3, r2
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	440b      	add	r3, r1
 800a108:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d104      	bne.n	800a11c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800a112:	6839      	ldr	r1, [r7, #0]
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 fb90 	bl	800a83a <USBD_CtlError>
                  break;
 800a11a:	e041      	b.n	800a1a0 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a11c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a120:	2b00      	cmp	r3, #0
 800a122:	da0b      	bge.n	800a13c <USBD_StdEPReq+0x234>
 800a124:	7bbb      	ldrb	r3, [r7, #14]
 800a126:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a12a:	4613      	mov	r3, r2
 800a12c:	009b      	lsls	r3, r3, #2
 800a12e:	4413      	add	r3, r2
 800a130:	009b      	lsls	r3, r3, #2
 800a132:	3310      	adds	r3, #16
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	4413      	add	r3, r2
 800a138:	3304      	adds	r3, #4
 800a13a:	e00b      	b.n	800a154 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a13c:	7bbb      	ldrb	r3, [r7, #14]
 800a13e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a142:	4613      	mov	r3, r2
 800a144:	009b      	lsls	r3, r3, #2
 800a146:	4413      	add	r3, r2
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	4413      	add	r3, r2
 800a152:	3304      	adds	r3, #4
 800a154:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a156:	7bbb      	ldrb	r3, [r7, #14]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d002      	beq.n	800a162 <USBD_StdEPReq+0x25a>
 800a15c:	7bbb      	ldrb	r3, [r7, #14]
 800a15e:	2b80      	cmp	r3, #128	; 0x80
 800a160:	d103      	bne.n	800a16a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	2200      	movs	r2, #0
 800a166:	601a      	str	r2, [r3, #0]
 800a168:	e00e      	b.n	800a188 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a16a:	7bbb      	ldrb	r3, [r7, #14]
 800a16c:	4619      	mov	r1, r3
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f004 f810 	bl	800e194 <USBD_LL_IsStallEP>
 800a174:	4603      	mov	r3, r0
 800a176:	2b00      	cmp	r3, #0
 800a178:	d003      	beq.n	800a182 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	2201      	movs	r2, #1
 800a17e:	601a      	str	r2, [r3, #0]
 800a180:	e002      	b.n	800a188 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	2200      	movs	r2, #0
 800a186:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	2202      	movs	r2, #2
 800a18c:	4619      	mov	r1, r3
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 fbbe 	bl	800a910 <USBD_CtlSendData>
              break;
 800a194:	e004      	b.n	800a1a0 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800a196:	6839      	ldr	r1, [r7, #0]
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 fb4e 	bl	800a83a <USBD_CtlError>
              break;
 800a19e:	bf00      	nop
          }
          break;
 800a1a0:	e004      	b.n	800a1ac <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800a1a2:	6839      	ldr	r1, [r7, #0]
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f000 fb48 	bl	800a83a <USBD_CtlError>
          break;
 800a1aa:	bf00      	nop
      }
      break;
 800a1ac:	e004      	b.n	800a1b8 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800a1ae:	6839      	ldr	r1, [r7, #0]
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f000 fb42 	bl	800a83a <USBD_CtlError>
      break;
 800a1b6:	bf00      	nop
  }

  return ret;
 800a1b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3710      	adds	r7, #16
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
	...

0800a1c4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b084      	sub	sp, #16
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	885b      	ldrh	r3, [r3, #2]
 800a1de:	0a1b      	lsrs	r3, r3, #8
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	3b01      	subs	r3, #1
 800a1e4:	2b0e      	cmp	r3, #14
 800a1e6:	f200 8152 	bhi.w	800a48e <USBD_GetDescriptor+0x2ca>
 800a1ea:	a201      	add	r2, pc, #4	; (adr r2, 800a1f0 <USBD_GetDescriptor+0x2c>)
 800a1ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1f0:	0800a261 	.word	0x0800a261
 800a1f4:	0800a279 	.word	0x0800a279
 800a1f8:	0800a2b9 	.word	0x0800a2b9
 800a1fc:	0800a48f 	.word	0x0800a48f
 800a200:	0800a48f 	.word	0x0800a48f
 800a204:	0800a42f 	.word	0x0800a42f
 800a208:	0800a45b 	.word	0x0800a45b
 800a20c:	0800a48f 	.word	0x0800a48f
 800a210:	0800a48f 	.word	0x0800a48f
 800a214:	0800a48f 	.word	0x0800a48f
 800a218:	0800a48f 	.word	0x0800a48f
 800a21c:	0800a48f 	.word	0x0800a48f
 800a220:	0800a48f 	.word	0x0800a48f
 800a224:	0800a48f 	.word	0x0800a48f
 800a228:	0800a22d 	.word	0x0800a22d
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a232:	69db      	ldr	r3, [r3, #28]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d00b      	beq.n	800a250 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a23e:	69db      	ldr	r3, [r3, #28]
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	7c12      	ldrb	r2, [r2, #16]
 800a244:	f107 0108 	add.w	r1, r7, #8
 800a248:	4610      	mov	r0, r2
 800a24a:	4798      	blx	r3
 800a24c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a24e:	e126      	b.n	800a49e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a250:	6839      	ldr	r1, [r7, #0]
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 faf1 	bl	800a83a <USBD_CtlError>
        err++;
 800a258:	7afb      	ldrb	r3, [r7, #11]
 800a25a:	3301      	adds	r3, #1
 800a25c:	72fb      	strb	r3, [r7, #11]
      break;
 800a25e:	e11e      	b.n	800a49e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	7c12      	ldrb	r2, [r2, #16]
 800a26c:	f107 0108 	add.w	r1, r7, #8
 800a270:	4610      	mov	r0, r2
 800a272:	4798      	blx	r3
 800a274:	60f8      	str	r0, [r7, #12]
      break;
 800a276:	e112      	b.n	800a49e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	7c1b      	ldrb	r3, [r3, #16]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d10d      	bne.n	800a29c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a288:	f107 0208 	add.w	r2, r7, #8
 800a28c:	4610      	mov	r0, r2
 800a28e:	4798      	blx	r3
 800a290:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	3301      	adds	r3, #1
 800a296:	2202      	movs	r2, #2
 800a298:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a29a:	e100      	b.n	800a49e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a4:	f107 0208 	add.w	r2, r7, #8
 800a2a8:	4610      	mov	r0, r2
 800a2aa:	4798      	blx	r3
 800a2ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	2202      	movs	r2, #2
 800a2b4:	701a      	strb	r2, [r3, #0]
      break;
 800a2b6:	e0f2      	b.n	800a49e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	885b      	ldrh	r3, [r3, #2]
 800a2bc:	b2db      	uxtb	r3, r3
 800a2be:	2b05      	cmp	r3, #5
 800a2c0:	f200 80ac 	bhi.w	800a41c <USBD_GetDescriptor+0x258>
 800a2c4:	a201      	add	r2, pc, #4	; (adr r2, 800a2cc <USBD_GetDescriptor+0x108>)
 800a2c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ca:	bf00      	nop
 800a2cc:	0800a2e5 	.word	0x0800a2e5
 800a2d0:	0800a319 	.word	0x0800a319
 800a2d4:	0800a34d 	.word	0x0800a34d
 800a2d8:	0800a381 	.word	0x0800a381
 800a2dc:	0800a3b5 	.word	0x0800a3b5
 800a2e0:	0800a3e9 	.word	0x0800a3e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d00b      	beq.n	800a308 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	687a      	ldr	r2, [r7, #4]
 800a2fa:	7c12      	ldrb	r2, [r2, #16]
 800a2fc:	f107 0108 	add.w	r1, r7, #8
 800a300:	4610      	mov	r0, r2
 800a302:	4798      	blx	r3
 800a304:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a306:	e091      	b.n	800a42c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a308:	6839      	ldr	r1, [r7, #0]
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f000 fa95 	bl	800a83a <USBD_CtlError>
            err++;
 800a310:	7afb      	ldrb	r3, [r7, #11]
 800a312:	3301      	adds	r3, #1
 800a314:	72fb      	strb	r3, [r7, #11]
          break;
 800a316:	e089      	b.n	800a42c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a31e:	689b      	ldr	r3, [r3, #8]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d00b      	beq.n	800a33c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a32a:	689b      	ldr	r3, [r3, #8]
 800a32c:	687a      	ldr	r2, [r7, #4]
 800a32e:	7c12      	ldrb	r2, [r2, #16]
 800a330:	f107 0108 	add.w	r1, r7, #8
 800a334:	4610      	mov	r0, r2
 800a336:	4798      	blx	r3
 800a338:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a33a:	e077      	b.n	800a42c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a33c:	6839      	ldr	r1, [r7, #0]
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f000 fa7b 	bl	800a83a <USBD_CtlError>
            err++;
 800a344:	7afb      	ldrb	r3, [r7, #11]
 800a346:	3301      	adds	r3, #1
 800a348:	72fb      	strb	r3, [r7, #11]
          break;
 800a34a:	e06f      	b.n	800a42c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a352:	68db      	ldr	r3, [r3, #12]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d00b      	beq.n	800a370 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	7c12      	ldrb	r2, [r2, #16]
 800a364:	f107 0108 	add.w	r1, r7, #8
 800a368:	4610      	mov	r0, r2
 800a36a:	4798      	blx	r3
 800a36c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a36e:	e05d      	b.n	800a42c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a370:	6839      	ldr	r1, [r7, #0]
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 fa61 	bl	800a83a <USBD_CtlError>
            err++;
 800a378:	7afb      	ldrb	r3, [r7, #11]
 800a37a:	3301      	adds	r3, #1
 800a37c:	72fb      	strb	r3, [r7, #11]
          break;
 800a37e:	e055      	b.n	800a42c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a386:	691b      	ldr	r3, [r3, #16]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d00b      	beq.n	800a3a4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a392:	691b      	ldr	r3, [r3, #16]
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	7c12      	ldrb	r2, [r2, #16]
 800a398:	f107 0108 	add.w	r1, r7, #8
 800a39c:	4610      	mov	r0, r2
 800a39e:	4798      	blx	r3
 800a3a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3a2:	e043      	b.n	800a42c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a3a4:	6839      	ldr	r1, [r7, #0]
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f000 fa47 	bl	800a83a <USBD_CtlError>
            err++;
 800a3ac:	7afb      	ldrb	r3, [r7, #11]
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	72fb      	strb	r3, [r7, #11]
          break;
 800a3b2:	e03b      	b.n	800a42c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a3ba:	695b      	ldr	r3, [r3, #20]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d00b      	beq.n	800a3d8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a3c6:	695b      	ldr	r3, [r3, #20]
 800a3c8:	687a      	ldr	r2, [r7, #4]
 800a3ca:	7c12      	ldrb	r2, [r2, #16]
 800a3cc:	f107 0108 	add.w	r1, r7, #8
 800a3d0:	4610      	mov	r0, r2
 800a3d2:	4798      	blx	r3
 800a3d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3d6:	e029      	b.n	800a42c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a3d8:	6839      	ldr	r1, [r7, #0]
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 fa2d 	bl	800a83a <USBD_CtlError>
            err++;
 800a3e0:	7afb      	ldrb	r3, [r7, #11]
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	72fb      	strb	r3, [r7, #11]
          break;
 800a3e6:	e021      	b.n	800a42c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a3ee:	699b      	ldr	r3, [r3, #24]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d00b      	beq.n	800a40c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a3fa:	699b      	ldr	r3, [r3, #24]
 800a3fc:	687a      	ldr	r2, [r7, #4]
 800a3fe:	7c12      	ldrb	r2, [r2, #16]
 800a400:	f107 0108 	add.w	r1, r7, #8
 800a404:	4610      	mov	r0, r2
 800a406:	4798      	blx	r3
 800a408:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a40a:	e00f      	b.n	800a42c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a40c:	6839      	ldr	r1, [r7, #0]
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f000 fa13 	bl	800a83a <USBD_CtlError>
            err++;
 800a414:	7afb      	ldrb	r3, [r7, #11]
 800a416:	3301      	adds	r3, #1
 800a418:	72fb      	strb	r3, [r7, #11]
          break;
 800a41a:	e007      	b.n	800a42c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a41c:	6839      	ldr	r1, [r7, #0]
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f000 fa0b 	bl	800a83a <USBD_CtlError>
          err++;
 800a424:	7afb      	ldrb	r3, [r7, #11]
 800a426:	3301      	adds	r3, #1
 800a428:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a42a:	e038      	b.n	800a49e <USBD_GetDescriptor+0x2da>
 800a42c:	e037      	b.n	800a49e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	7c1b      	ldrb	r3, [r3, #16]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d109      	bne.n	800a44a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a43c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a43e:	f107 0208 	add.w	r2, r7, #8
 800a442:	4610      	mov	r0, r2
 800a444:	4798      	blx	r3
 800a446:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a448:	e029      	b.n	800a49e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a44a:	6839      	ldr	r1, [r7, #0]
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f000 f9f4 	bl	800a83a <USBD_CtlError>
        err++;
 800a452:	7afb      	ldrb	r3, [r7, #11]
 800a454:	3301      	adds	r3, #1
 800a456:	72fb      	strb	r3, [r7, #11]
      break;
 800a458:	e021      	b.n	800a49e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	7c1b      	ldrb	r3, [r3, #16]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d10d      	bne.n	800a47e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a46a:	f107 0208 	add.w	r2, r7, #8
 800a46e:	4610      	mov	r0, r2
 800a470:	4798      	blx	r3
 800a472:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	3301      	adds	r3, #1
 800a478:	2207      	movs	r2, #7
 800a47a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a47c:	e00f      	b.n	800a49e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a47e:	6839      	ldr	r1, [r7, #0]
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f000 f9da 	bl	800a83a <USBD_CtlError>
        err++;
 800a486:	7afb      	ldrb	r3, [r7, #11]
 800a488:	3301      	adds	r3, #1
 800a48a:	72fb      	strb	r3, [r7, #11]
      break;
 800a48c:	e007      	b.n	800a49e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a48e:	6839      	ldr	r1, [r7, #0]
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 f9d2 	bl	800a83a <USBD_CtlError>
      err++;
 800a496:	7afb      	ldrb	r3, [r7, #11]
 800a498:	3301      	adds	r3, #1
 800a49a:	72fb      	strb	r3, [r7, #11]
      break;
 800a49c:	bf00      	nop
  }

  if (err != 0U)
 800a49e:	7afb      	ldrb	r3, [r7, #11]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d11c      	bne.n	800a4de <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a4a4:	893b      	ldrh	r3, [r7, #8]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d011      	beq.n	800a4ce <USBD_GetDescriptor+0x30a>
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	88db      	ldrh	r3, [r3, #6]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d00d      	beq.n	800a4ce <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	88da      	ldrh	r2, [r3, #6]
 800a4b6:	893b      	ldrh	r3, [r7, #8]
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	bf28      	it	cs
 800a4bc:	4613      	movcs	r3, r2
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a4c2:	893b      	ldrh	r3, [r7, #8]
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	68f9      	ldr	r1, [r7, #12]
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f000 fa21 	bl	800a910 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	88db      	ldrh	r3, [r3, #6]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d104      	bne.n	800a4e0 <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 fa78 	bl	800a9cc <USBD_CtlSendStatus>
 800a4dc:	e000      	b.n	800a4e0 <USBD_GetDescriptor+0x31c>
    return;
 800a4de:	bf00      	nop
    }
  }
}
 800a4e0:	3710      	adds	r7, #16
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
 800a4e6:	bf00      	nop

0800a4e8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b084      	sub	sp, #16
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	889b      	ldrh	r3, [r3, #4]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d130      	bne.n	800a55c <USBD_SetAddress+0x74>
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	88db      	ldrh	r3, [r3, #6]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d12c      	bne.n	800a55c <USBD_SetAddress+0x74>
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	885b      	ldrh	r3, [r3, #2]
 800a506:	2b7f      	cmp	r3, #127	; 0x7f
 800a508:	d828      	bhi.n	800a55c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	885b      	ldrh	r3, [r3, #2]
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a514:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a51c:	2b03      	cmp	r3, #3
 800a51e:	d104      	bne.n	800a52a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a520:	6839      	ldr	r1, [r7, #0]
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 f989 	bl	800a83a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a528:	e01c      	b.n	800a564 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	7bfa      	ldrb	r2, [r7, #15]
 800a52e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a532:	7bfb      	ldrb	r3, [r7, #15]
 800a534:	4619      	mov	r1, r3
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f003 fe52 	bl	800e1e0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 fa45 	bl	800a9cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a542:	7bfb      	ldrb	r3, [r7, #15]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d004      	beq.n	800a552 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2202      	movs	r2, #2
 800a54c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a550:	e008      	b.n	800a564 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2201      	movs	r2, #1
 800a556:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a55a:	e003      	b.n	800a564 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a55c:	6839      	ldr	r1, [r7, #0]
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f000 f96b 	bl	800a83a <USBD_CtlError>
  }
}
 800a564:	bf00      	nop
 800a566:	3710      	adds	r7, #16
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	885b      	ldrh	r3, [r3, #2]
 800a57a:	b2da      	uxtb	r2, r3
 800a57c:	4b41      	ldr	r3, [pc, #260]	; (800a684 <USBD_SetConfig+0x118>)
 800a57e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a580:	4b40      	ldr	r3, [pc, #256]	; (800a684 <USBD_SetConfig+0x118>)
 800a582:	781b      	ldrb	r3, [r3, #0]
 800a584:	2b01      	cmp	r3, #1
 800a586:	d904      	bls.n	800a592 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a588:	6839      	ldr	r1, [r7, #0]
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 f955 	bl	800a83a <USBD_CtlError>
 800a590:	e075      	b.n	800a67e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a598:	2b02      	cmp	r3, #2
 800a59a:	d002      	beq.n	800a5a2 <USBD_SetConfig+0x36>
 800a59c:	2b03      	cmp	r3, #3
 800a59e:	d023      	beq.n	800a5e8 <USBD_SetConfig+0x7c>
 800a5a0:	e062      	b.n	800a668 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a5a2:	4b38      	ldr	r3, [pc, #224]	; (800a684 <USBD_SetConfig+0x118>)
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d01a      	beq.n	800a5e0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a5aa:	4b36      	ldr	r3, [pc, #216]	; (800a684 <USBD_SetConfig+0x118>)
 800a5ac:	781b      	ldrb	r3, [r3, #0]
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2203      	movs	r2, #3
 800a5b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a5bc:	4b31      	ldr	r3, [pc, #196]	; (800a684 <USBD_SetConfig+0x118>)
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f7ff f9c6 	bl	8009954 <USBD_SetClassConfig>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	2b02      	cmp	r3, #2
 800a5cc:	d104      	bne.n	800a5d8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a5ce:	6839      	ldr	r1, [r7, #0]
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f000 f932 	bl	800a83a <USBD_CtlError>
            return;
 800a5d6:	e052      	b.n	800a67e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f000 f9f7 	bl	800a9cc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a5de:	e04e      	b.n	800a67e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f000 f9f3 	bl	800a9cc <USBD_CtlSendStatus>
        break;
 800a5e6:	e04a      	b.n	800a67e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a5e8:	4b26      	ldr	r3, [pc, #152]	; (800a684 <USBD_SetConfig+0x118>)
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d112      	bne.n	800a616 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2202      	movs	r2, #2
 800a5f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a5f8:	4b22      	ldr	r3, [pc, #136]	; (800a684 <USBD_SetConfig+0x118>)
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a602:	4b20      	ldr	r3, [pc, #128]	; (800a684 <USBD_SetConfig+0x118>)
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	4619      	mov	r1, r3
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f7ff f9c2 	bl	8009992 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 f9dc 	bl	800a9cc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a614:	e033      	b.n	800a67e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a616:	4b1b      	ldr	r3, [pc, #108]	; (800a684 <USBD_SetConfig+0x118>)
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	461a      	mov	r2, r3
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	429a      	cmp	r2, r3
 800a622:	d01d      	beq.n	800a660 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	4619      	mov	r1, r3
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f7ff f9b0 	bl	8009992 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a632:	4b14      	ldr	r3, [pc, #80]	; (800a684 <USBD_SetConfig+0x118>)
 800a634:	781b      	ldrb	r3, [r3, #0]
 800a636:	461a      	mov	r2, r3
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a63c:	4b11      	ldr	r3, [pc, #68]	; (800a684 <USBD_SetConfig+0x118>)
 800a63e:	781b      	ldrb	r3, [r3, #0]
 800a640:	4619      	mov	r1, r3
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f7ff f986 	bl	8009954 <USBD_SetClassConfig>
 800a648:	4603      	mov	r3, r0
 800a64a:	2b02      	cmp	r3, #2
 800a64c:	d104      	bne.n	800a658 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a64e:	6839      	ldr	r1, [r7, #0]
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f000 f8f2 	bl	800a83a <USBD_CtlError>
            return;
 800a656:	e012      	b.n	800a67e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 f9b7 	bl	800a9cc <USBD_CtlSendStatus>
        break;
 800a65e:	e00e      	b.n	800a67e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f000 f9b3 	bl	800a9cc <USBD_CtlSendStatus>
        break;
 800a666:	e00a      	b.n	800a67e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a668:	6839      	ldr	r1, [r7, #0]
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 f8e5 	bl	800a83a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a670:	4b04      	ldr	r3, [pc, #16]	; (800a684 <USBD_SetConfig+0x118>)
 800a672:	781b      	ldrb	r3, [r3, #0]
 800a674:	4619      	mov	r1, r3
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f7ff f98b 	bl	8009992 <USBD_ClrClassConfig>
        break;
 800a67c:	bf00      	nop
    }
  }
}
 800a67e:	3708      	adds	r7, #8
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}
 800a684:	20000454 	.word	0x20000454

0800a688 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	88db      	ldrh	r3, [r3, #6]
 800a696:	2b01      	cmp	r3, #1
 800a698:	d004      	beq.n	800a6a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a69a:	6839      	ldr	r1, [r7, #0]
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f000 f8cc 	bl	800a83a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a6a2:	e021      	b.n	800a6e8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6aa:	2b01      	cmp	r3, #1
 800a6ac:	db17      	blt.n	800a6de <USBD_GetConfig+0x56>
 800a6ae:	2b02      	cmp	r3, #2
 800a6b0:	dd02      	ble.n	800a6b8 <USBD_GetConfig+0x30>
 800a6b2:	2b03      	cmp	r3, #3
 800a6b4:	d00b      	beq.n	800a6ce <USBD_GetConfig+0x46>
 800a6b6:	e012      	b.n	800a6de <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	3308      	adds	r3, #8
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f000 f922 	bl	800a910 <USBD_CtlSendData>
        break;
 800a6cc:	e00c      	b.n	800a6e8 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	3304      	adds	r3, #4
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 f91a 	bl	800a910 <USBD_CtlSendData>
        break;
 800a6dc:	e004      	b.n	800a6e8 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800a6de:	6839      	ldr	r1, [r7, #0]
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f000 f8aa 	bl	800a83a <USBD_CtlError>
        break;
 800a6e6:	bf00      	nop
}
 800a6e8:	bf00      	nop
 800a6ea:	3708      	adds	r7, #8
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b082      	sub	sp, #8
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a700:	3b01      	subs	r3, #1
 800a702:	2b02      	cmp	r3, #2
 800a704:	d81e      	bhi.n	800a744 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	88db      	ldrh	r3, [r3, #6]
 800a70a:	2b02      	cmp	r3, #2
 800a70c:	d004      	beq.n	800a718 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a70e:	6839      	ldr	r1, [r7, #0]
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f000 f892 	bl	800a83a <USBD_CtlError>
        break;
 800a716:	e01a      	b.n	800a74e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2201      	movs	r2, #1
 800a71c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a724:	2b00      	cmp	r3, #0
 800a726:	d005      	beq.n	800a734 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	68db      	ldr	r3, [r3, #12]
 800a72c:	f043 0202 	orr.w	r2, r3, #2
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	330c      	adds	r3, #12
 800a738:	2202      	movs	r2, #2
 800a73a:	4619      	mov	r1, r3
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f000 f8e7 	bl	800a910 <USBD_CtlSendData>
      break;
 800a742:	e004      	b.n	800a74e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a744:	6839      	ldr	r1, [r7, #0]
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f000 f877 	bl	800a83a <USBD_CtlError>
      break;
 800a74c:	bf00      	nop
  }
}
 800a74e:	bf00      	nop
 800a750:	3708      	adds	r7, #8
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}

0800a756 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a756:	b580      	push	{r7, lr}
 800a758:	b082      	sub	sp, #8
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
 800a75e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	885b      	ldrh	r3, [r3, #2]
 800a764:	2b01      	cmp	r3, #1
 800a766:	d106      	bne.n	800a776 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2201      	movs	r2, #1
 800a76c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f000 f92b 	bl	800a9cc <USBD_CtlSendStatus>
  }
}
 800a776:	bf00      	nop
 800a778:	3708      	adds	r7, #8
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}

0800a77e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a77e:	b580      	push	{r7, lr}
 800a780:	b082      	sub	sp, #8
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
 800a786:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a78e:	3b01      	subs	r3, #1
 800a790:	2b02      	cmp	r3, #2
 800a792:	d80b      	bhi.n	800a7ac <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	885b      	ldrh	r3, [r3, #2]
 800a798:	2b01      	cmp	r3, #1
 800a79a:	d10c      	bne.n	800a7b6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f000 f911 	bl	800a9cc <USBD_CtlSendStatus>
      }
      break;
 800a7aa:	e004      	b.n	800a7b6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a7ac:	6839      	ldr	r1, [r7, #0]
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f000 f843 	bl	800a83a <USBD_CtlError>
      break;
 800a7b4:	e000      	b.n	800a7b8 <USBD_ClrFeature+0x3a>
      break;
 800a7b6:	bf00      	nop
  }
}
 800a7b8:	bf00      	nop
 800a7ba:	3708      	adds	r7, #8
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	781a      	ldrb	r2, [r3, #0]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	785a      	ldrb	r2, [r3, #1]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	3302      	adds	r3, #2
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	b29a      	uxth	r2, r3
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	3303      	adds	r3, #3
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	b29b      	uxth	r3, r3
 800a7ea:	021b      	lsls	r3, r3, #8
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	4413      	add	r3, r2
 800a7f0:	b29a      	uxth	r2, r3
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	3304      	adds	r3, #4
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	b29a      	uxth	r2, r3
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	3305      	adds	r3, #5
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	b29b      	uxth	r3, r3
 800a806:	021b      	lsls	r3, r3, #8
 800a808:	b29b      	uxth	r3, r3
 800a80a:	4413      	add	r3, r2
 800a80c:	b29a      	uxth	r2, r3
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	3306      	adds	r3, #6
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	b29a      	uxth	r2, r3
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	3307      	adds	r3, #7
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	b29b      	uxth	r3, r3
 800a822:	021b      	lsls	r3, r3, #8
 800a824:	b29b      	uxth	r3, r3
 800a826:	4413      	add	r3, r2
 800a828:	b29a      	uxth	r2, r3
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	80da      	strh	r2, [r3, #6]

}
 800a82e:	bf00      	nop
 800a830:	370c      	adds	r7, #12
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr

0800a83a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b082      	sub	sp, #8
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
 800a842:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a844:	2180      	movs	r1, #128	; 0x80
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f003 fc66 	bl	800e118 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a84c:	2100      	movs	r1, #0
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f003 fc62 	bl	800e118 <USBD_LL_StallEP>
}
 800a854:	bf00      	nop
 800a856:	3708      	adds	r7, #8
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b086      	sub	sp, #24
 800a860:	af00      	add	r7, sp, #0
 800a862:	60f8      	str	r0, [r7, #12]
 800a864:	60b9      	str	r1, [r7, #8]
 800a866:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a868:	2300      	movs	r3, #0
 800a86a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d032      	beq.n	800a8d8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a872:	68f8      	ldr	r0, [r7, #12]
 800a874:	f000 f834 	bl	800a8e0 <USBD_GetLen>
 800a878:	4603      	mov	r3, r0
 800a87a:	3301      	adds	r3, #1
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	005b      	lsls	r3, r3, #1
 800a880:	b29a      	uxth	r2, r3
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a886:	7dfb      	ldrb	r3, [r7, #23]
 800a888:	1c5a      	adds	r2, r3, #1
 800a88a:	75fa      	strb	r2, [r7, #23]
 800a88c:	461a      	mov	r2, r3
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	4413      	add	r3, r2
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	7812      	ldrb	r2, [r2, #0]
 800a896:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a898:	7dfb      	ldrb	r3, [r7, #23]
 800a89a:	1c5a      	adds	r2, r3, #1
 800a89c:	75fa      	strb	r2, [r7, #23]
 800a89e:	461a      	mov	r2, r3
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	4413      	add	r3, r2
 800a8a4:	2203      	movs	r2, #3
 800a8a6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a8a8:	e012      	b.n	800a8d0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	1c5a      	adds	r2, r3, #1
 800a8ae:	60fa      	str	r2, [r7, #12]
 800a8b0:	7dfa      	ldrb	r2, [r7, #23]
 800a8b2:	1c51      	adds	r1, r2, #1
 800a8b4:	75f9      	strb	r1, [r7, #23]
 800a8b6:	4611      	mov	r1, r2
 800a8b8:	68ba      	ldr	r2, [r7, #8]
 800a8ba:	440a      	add	r2, r1
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a8c0:	7dfb      	ldrb	r3, [r7, #23]
 800a8c2:	1c5a      	adds	r2, r3, #1
 800a8c4:	75fa      	strb	r2, [r7, #23]
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	4413      	add	r3, r2
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	781b      	ldrb	r3, [r3, #0]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d1e8      	bne.n	800a8aa <USBD_GetString+0x4e>
    }
  }
}
 800a8d8:	bf00      	nop
 800a8da:	3718      	adds	r7, #24
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b085      	sub	sp, #20
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a8ec:	e005      	b.n	800a8fa <USBD_GetLen+0x1a>
  {
    len++;
 800a8ee:	7bfb      	ldrb	r3, [r7, #15]
 800a8f0:	3301      	adds	r3, #1
 800a8f2:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	3301      	adds	r3, #1
 800a8f8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	781b      	ldrb	r3, [r3, #0]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d1f5      	bne.n	800a8ee <USBD_GetLen+0xe>
  }

  return len;
 800a902:	7bfb      	ldrb	r3, [r7, #15]
}
 800a904:	4618      	mov	r0, r3
 800a906:	3714      	adds	r7, #20
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr

0800a910 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	60b9      	str	r1, [r7, #8]
 800a91a:	4613      	mov	r3, r2
 800a91c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	2202      	movs	r2, #2
 800a922:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a926:	88fa      	ldrh	r2, [r7, #6]
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a92c:	88fa      	ldrh	r2, [r7, #6]
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a932:	88fb      	ldrh	r3, [r7, #6]
 800a934:	68ba      	ldr	r2, [r7, #8]
 800a936:	2100      	movs	r1, #0
 800a938:	68f8      	ldr	r0, [r7, #12]
 800a93a:	f003 fc70 	bl	800e21e <USBD_LL_Transmit>

  return USBD_OK;
 800a93e:	2300      	movs	r3, #0
}
 800a940:	4618      	mov	r0, r3
 800a942:	3710      	adds	r7, #16
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b084      	sub	sp, #16
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	60b9      	str	r1, [r7, #8]
 800a952:	4613      	mov	r3, r2
 800a954:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a956:	88fb      	ldrh	r3, [r7, #6]
 800a958:	68ba      	ldr	r2, [r7, #8]
 800a95a:	2100      	movs	r1, #0
 800a95c:	68f8      	ldr	r0, [r7, #12]
 800a95e:	f003 fc5e 	bl	800e21e <USBD_LL_Transmit>

  return USBD_OK;
 800a962:	2300      	movs	r3, #0
}
 800a964:	4618      	mov	r0, r3
 800a966:	3710      	adds	r7, #16
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
 800a972:	60f8      	str	r0, [r7, #12]
 800a974:	60b9      	str	r1, [r7, #8]
 800a976:	4613      	mov	r3, r2
 800a978:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2203      	movs	r2, #3
 800a97e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a982:	88fa      	ldrh	r2, [r7, #6]
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a98a:	88fa      	ldrh	r2, [r7, #6]
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a992:	88fb      	ldrh	r3, [r7, #6]
 800a994:	68ba      	ldr	r2, [r7, #8]
 800a996:	2100      	movs	r1, #0
 800a998:	68f8      	ldr	r0, [r7, #12]
 800a99a:	f003 fc63 	bl	800e264 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a99e:	2300      	movs	r3, #0
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3710      	adds	r7, #16
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}

0800a9a8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b084      	sub	sp, #16
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	60f8      	str	r0, [r7, #12]
 800a9b0:	60b9      	str	r1, [r7, #8]
 800a9b2:	4613      	mov	r3, r2
 800a9b4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a9b6:	88fb      	ldrh	r3, [r7, #6]
 800a9b8:	68ba      	ldr	r2, [r7, #8]
 800a9ba:	2100      	movs	r1, #0
 800a9bc:	68f8      	ldr	r0, [r7, #12]
 800a9be:	f003 fc51 	bl	800e264 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a9c2:	2300      	movs	r3, #0
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3710      	adds	r7, #16
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2204      	movs	r2, #4
 800a9d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a9dc:	2300      	movs	r3, #0
 800a9de:	2200      	movs	r2, #0
 800a9e0:	2100      	movs	r1, #0
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f003 fc1b 	bl	800e21e <USBD_LL_Transmit>

  return USBD_OK;
 800a9e8:	2300      	movs	r3, #0
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3708      	adds	r7, #8
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}

0800a9f2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a9f2:	b580      	push	{r7, lr}
 800a9f4:	b082      	sub	sp, #8
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2205      	movs	r2, #5
 800a9fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa02:	2300      	movs	r3, #0
 800aa04:	2200      	movs	r2, #0
 800aa06:	2100      	movs	r1, #0
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f003 fc2b 	bl	800e264 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aa0e:	2300      	movs	r3, #0
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3708      	adds	r7, #8
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}

0800aa18 <aci_gap_set_io_capability>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b0cc      	sub	sp, #304	; 0x130
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	4602      	mov	r2, r0
 800aa20:	1dfb      	adds	r3, r7, #7
 800aa22:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800aa24:	f107 0310 	add.w	r3, r7, #16
 800aa28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800aa2c:	f107 030f 	add.w	r3, r7, #15
 800aa30:	2200      	movs	r2, #0
 800aa32:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800aa34:	2300      	movs	r3, #0
 800aa36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = htob(IO_Capability, 1);
 800aa3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa3e:	1dfa      	adds	r2, r7, #7
 800aa40:	7812      	ldrb	r2, [r2, #0]
 800aa42:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800aa44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa48:	3301      	adds	r3, #1
 800aa4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800aa4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800aa52:	2218      	movs	r2, #24
 800aa54:	2100      	movs	r1, #0
 800aa56:	4618      	mov	r0, r3
 800aa58:	f000 ff61 	bl	800b91e <Osal_MemSet>
  rq.ogf = 0x3f;
 800aa5c:	233f      	movs	r3, #63	; 0x3f
 800aa5e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800aa62:	2385      	movs	r3, #133	; 0x85
 800aa64:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800aa68:	f107 0310 	add.w	r3, r7, #16
 800aa6c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800aa70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa74:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800aa78:	f107 030f 	add.w	r3, r7, #15
 800aa7c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800aa80:	2301      	movs	r3, #1
 800aa82:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800aa86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800aa8a:	2100      	movs	r1, #0
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f001 f901 	bl	800bc94 <hci_send_req>
 800aa92:	4603      	mov	r3, r0
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	da01      	bge.n	800aa9c <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 800aa98:	23ff      	movs	r3, #255	; 0xff
 800aa9a:	e009      	b.n	800aab0 <aci_gap_set_io_capability+0x98>
  if (status) 
 800aa9c:	f107 030f 	add.w	r3, r7, #15
 800aaa0:	781b      	ldrb	r3, [r3, #0]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d003      	beq.n	800aaae <aci_gap_set_io_capability+0x96>
  {
    return status;
 800aaa6:	f107 030f 	add.w	r3, r7, #15
 800aaaa:	781b      	ldrb	r3, [r3, #0]
 800aaac:	e000      	b.n	800aab0 <aci_gap_set_io_capability+0x98>
  }
  return BLE_STATUS_SUCCESS;
 800aaae:	2300      	movs	r3, #0
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}

0800aaba <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 800aaba:	b5b0      	push	{r4, r5, r7, lr}
 800aabc:	b0cc      	sub	sp, #304	; 0x130
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	4605      	mov	r5, r0
 800aac2:	460c      	mov	r4, r1
 800aac4:	4610      	mov	r0, r2
 800aac6:	4619      	mov	r1, r3
 800aac8:	1dfb      	adds	r3, r7, #7
 800aaca:	462a      	mov	r2, r5
 800aacc:	701a      	strb	r2, [r3, #0]
 800aace:	1dbb      	adds	r3, r7, #6
 800aad0:	4622      	mov	r2, r4
 800aad2:	701a      	strb	r2, [r3, #0]
 800aad4:	1d7b      	adds	r3, r7, #5
 800aad6:	4602      	mov	r2, r0
 800aad8:	701a      	strb	r2, [r3, #0]
 800aada:	1d3b      	adds	r3, r7, #4
 800aadc:	460a      	mov	r2, r1
 800aade:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800aae0:	f107 0310 	add.w	r3, r7, #16
 800aae4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800aae8:	f107 030f 	add.w	r3, r7, #15
 800aaec:	2200      	movs	r2, #0
 800aaee:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 800aaf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aafa:	1dfa      	adds	r2, r7, #7
 800aafc:	7812      	ldrb	r2, [r2, #0]
 800aafe:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ab00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab04:	3301      	adds	r3, #1
 800ab06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 800ab0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab0e:	1dba      	adds	r2, r7, #6
 800ab10:	7812      	ldrb	r2, [r2, #0]
 800ab12:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ab14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab18:	3301      	adds	r3, #1
 800ab1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = htob(SC_Support, 1);
 800ab1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab22:	1d7a      	adds	r2, r7, #5
 800ab24:	7812      	ldrb	r2, [r2, #0]
 800ab26:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ab28:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab2c:	3301      	adds	r3, #1
 800ab2e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 800ab32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab36:	1d3a      	adds	r2, r7, #4
 800ab38:	7812      	ldrb	r2, [r2, #0]
 800ab3a:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800ab3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab40:	3301      	adds	r3, #1
 800ab42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 800ab46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab4a:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800ab4e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800ab50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab54:	3301      	adds	r3, #1
 800ab56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 800ab5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab5e:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800ab62:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800ab64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab68:	3301      	adds	r3, #1
 800ab6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 800ab6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab72:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800ab76:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800ab78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab7c:	3301      	adds	r3, #1
 800ab7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 800ab82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab86:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800ab8a:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800ab8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab92:	3304      	adds	r3, #4
 800ab94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 800ab98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab9c:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800aba0:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800aba2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aba6:	3301      	adds	r3, #1
 800aba8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800abac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800abb0:	2218      	movs	r2, #24
 800abb2:	2100      	movs	r1, #0
 800abb4:	4618      	mov	r0, r3
 800abb6:	f000 feb2 	bl	800b91e <Osal_MemSet>
  rq.ogf = 0x3f;
 800abba:	233f      	movs	r3, #63	; 0x3f
 800abbc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800abc0:	2386      	movs	r3, #134	; 0x86
 800abc2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800abc6:	f107 0310 	add.w	r3, r7, #16
 800abca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800abce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800abd2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800abd6:	f107 030f 	add.w	r3, r7, #15
 800abda:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800abde:	2301      	movs	r3, #1
 800abe0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800abe4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800abe8:	2100      	movs	r1, #0
 800abea:	4618      	mov	r0, r3
 800abec:	f001 f852 	bl	800bc94 <hci_send_req>
 800abf0:	4603      	mov	r3, r0
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	da01      	bge.n	800abfa <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 800abf6:	23ff      	movs	r3, #255	; 0xff
 800abf8:	e009      	b.n	800ac0e <aci_gap_set_authentication_requirement+0x154>
  if (status) 
 800abfa:	f107 030f 	add.w	r3, r7, #15
 800abfe:	781b      	ldrb	r3, [r3, #0]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d003      	beq.n	800ac0c <aci_gap_set_authentication_requirement+0x152>
  {
    return status;
 800ac04:	f107 030f 	add.w	r3, r7, #15
 800ac08:	781b      	ldrb	r3, [r3, #0]
 800ac0a:	e000      	b.n	800ac0e <aci_gap_set_authentication_requirement+0x154>
  }
  return BLE_STATUS_SUCCESS;
 800ac0c:	2300      	movs	r3, #0
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bdb0      	pop	{r4, r5, r7, pc}

0800ac18 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 800ac18:	b590      	push	{r4, r7, lr}
 800ac1a:	b0cd      	sub	sp, #308	; 0x134
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	4604      	mov	r4, r0
 800ac20:	4608      	mov	r0, r1
 800ac22:	4611      	mov	r1, r2
 800ac24:	463a      	mov	r2, r7
 800ac26:	6013      	str	r3, [r2, #0]
 800ac28:	1dfb      	adds	r3, r7, #7
 800ac2a:	4622      	mov	r2, r4
 800ac2c:	701a      	strb	r2, [r3, #0]
 800ac2e:	1dbb      	adds	r3, r7, #6
 800ac30:	4602      	mov	r2, r0
 800ac32:	701a      	strb	r2, [r3, #0]
 800ac34:	1d7b      	adds	r3, r7, #5
 800ac36:	460a      	mov	r2, r1
 800ac38:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800ac3a:	f107 0310 	add.w	r3, r7, #16
 800ac3e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800ac42:	f107 0308 	add.w	r3, r7, #8
 800ac46:	2207      	movs	r2, #7
 800ac48:	2100      	movs	r1, #0
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f000 fe67 	bl	800b91e <Osal_MemSet>
  int index_input = 0;
 800ac50:	2300      	movs	r3, #0
 800ac52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = htob(Role, 1);
 800ac56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac5a:	1dfa      	adds	r2, r7, #7
 800ac5c:	7812      	ldrb	r2, [r2, #0]
 800ac5e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ac60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac64:	3301      	adds	r3, #1
 800ac66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 800ac6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac6e:	1dba      	adds	r2, r7, #6
 800ac70:	7812      	ldrb	r2, [r2, #0]
 800ac72:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ac74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac78:	3301      	adds	r3, #1
 800ac7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 800ac7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac82:	1d7a      	adds	r2, r7, #5
 800ac84:	7812      	ldrb	r2, [r2, #0]
 800ac86:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ac88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac8c:	3301      	adds	r3, #1
 800ac8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800ac92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ac96:	2218      	movs	r2, #24
 800ac98:	2100      	movs	r1, #0
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f000 fe3f 	bl	800b91e <Osal_MemSet>
  rq.ogf = 0x3f;
 800aca0:	233f      	movs	r3, #63	; 0x3f
 800aca2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800aca6:	238a      	movs	r3, #138	; 0x8a
 800aca8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800acac:	f107 0310 	add.w	r3, r7, #16
 800acb0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800acb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800acb8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800acbc:	f107 0308 	add.w	r3, r7, #8
 800acc0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800acc4:	2307      	movs	r3, #7
 800acc6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800acca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800acce:	2100      	movs	r1, #0
 800acd0:	4618      	mov	r0, r3
 800acd2:	f000 ffdf 	bl	800bc94 <hci_send_req>
 800acd6:	4603      	mov	r3, r0
 800acd8:	2b00      	cmp	r3, #0
 800acda:	da01      	bge.n	800ace0 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 800acdc:	23ff      	movs	r3, #255	; 0xff
 800acde:	e021      	b.n	800ad24 <aci_gap_init+0x10c>
  if (resp.Status) 
 800ace0:	f107 0308 	add.w	r3, r7, #8
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d003      	beq.n	800acf2 <aci_gap_init+0xda>
  {
    return resp.Status;
 800acea:	f107 0308 	add.w	r3, r7, #8
 800acee:	781b      	ldrb	r3, [r3, #0]
 800acf0:	e018      	b.n	800ad24 <aci_gap_init+0x10c>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800acf2:	f107 0308 	add.w	r3, r7, #8
 800acf6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800acfa:	b29a      	uxth	r2, r3
 800acfc:	463b      	mov	r3, r7
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 800ad02:	f107 0308 	add.w	r3, r7, #8
 800ad06:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800ad0a:	b29a      	uxth	r2, r3
 800ad0c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800ad10:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 800ad12:	f107 0308 	add.w	r3, r7, #8
 800ad16:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800ad1a:	b29a      	uxth	r2, r3
 800ad1c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800ad20:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800ad22:	2300      	movs	r3, #0
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd90      	pop	{r4, r7, pc}

0800ad2e <aci_gap_configure_whitelist>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_configure_whitelist(void)
{
 800ad2e:	b580      	push	{r7, lr}
 800ad30:	b088      	sub	sp, #32
 800ad32:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800ad34:	2300      	movs	r3, #0
 800ad36:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800ad38:	f107 0308 	add.w	r3, r7, #8
 800ad3c:	2218      	movs	r2, #24
 800ad3e:	2100      	movs	r1, #0
 800ad40:	4618      	mov	r0, r3
 800ad42:	f000 fdec 	bl	800b91e <Osal_MemSet>
  rq.ogf = 0x3f;
 800ad46:	233f      	movs	r3, #63	; 0x3f
 800ad48:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800ad4a:	2392      	movs	r3, #146	; 0x92
 800ad4c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ad4e:	1dfb      	adds	r3, r7, #7
 800ad50:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ad52:	2301      	movs	r3, #1
 800ad54:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800ad56:	f107 0308 	add.w	r3, r7, #8
 800ad5a:	2100      	movs	r1, #0
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f000 ff99 	bl	800bc94 <hci_send_req>
 800ad62:	4603      	mov	r3, r0
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	da01      	bge.n	800ad6c <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800ad68:	23ff      	movs	r3, #255	; 0xff
 800ad6a:	e005      	b.n	800ad78 <aci_gap_configure_whitelist+0x4a>
  if (status) 
 800ad6c:	79fb      	ldrb	r3, [r7, #7]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d001      	beq.n	800ad76 <aci_gap_configure_whitelist+0x48>
  {
    return status;
 800ad72:	79fb      	ldrb	r3, [r7, #7]
 800ad74:	e000      	b.n	800ad78 <aci_gap_configure_whitelist+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800ad76:	2300      	movs	r3, #0
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3720      	adds	r7, #32
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <aci_gap_start_general_discovery_proc>:

tBleStatus aci_gap_start_general_discovery_proc(uint16_t LE_Scan_Interval,
                                                uint16_t LE_Scan_Window,
                                                uint8_t Own_Address_Type,
                                                uint8_t Filter_Duplicates)
{
 800ad80:	b5b0      	push	{r4, r5, r7, lr}
 800ad82:	b0cc      	sub	sp, #304	; 0x130
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	4605      	mov	r5, r0
 800ad88:	460c      	mov	r4, r1
 800ad8a:	4610      	mov	r0, r2
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	1dbb      	adds	r3, r7, #6
 800ad90:	462a      	mov	r2, r5
 800ad92:	801a      	strh	r2, [r3, #0]
 800ad94:	1d3b      	adds	r3, r7, #4
 800ad96:	4622      	mov	r2, r4
 800ad98:	801a      	strh	r2, [r3, #0]
 800ad9a:	1cfb      	adds	r3, r7, #3
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	701a      	strb	r2, [r3, #0]
 800ada0:	1cbb      	adds	r3, r7, #2
 800ada2:	460a      	mov	r2, r1
 800ada4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_start_general_discovery_proc_cp0 *cp0 = (aci_gap_start_general_discovery_proc_cp0*)(cmd_buffer);
 800ada6:	f107 0310 	add.w	r3, r7, #16
 800adaa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800adae:	f107 030f 	add.w	r3, r7, #15
 800adb2:	2200      	movs	r2, #0
 800adb4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800adb6:	2300      	movs	r3, #0
 800adb8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Interval = htob(LE_Scan_Interval, 2);
 800adbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800adc0:	1dba      	adds	r2, r7, #6
 800adc2:	8812      	ldrh	r2, [r2, #0]
 800adc4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800adc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800adca:	3302      	adds	r3, #2
 800adcc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Window = htob(LE_Scan_Window, 2);
 800add0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800add4:	1d3a      	adds	r2, r7, #4
 800add6:	8812      	ldrh	r2, [r2, #0]
 800add8:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800adda:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800adde:	3302      	adds	r3, #2
 800ade0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800ade4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ade8:	1cfa      	adds	r2, r7, #3
 800adea:	7812      	ldrb	r2, [r2, #0]
 800adec:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800adee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800adf2:	3301      	adds	r3, #1
 800adf4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Filter_Duplicates = htob(Filter_Duplicates, 1);
 800adf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800adfc:	1cba      	adds	r2, r7, #2
 800adfe:	7812      	ldrb	r2, [r2, #0]
 800ae00:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800ae02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae06:	3301      	adds	r3, #1
 800ae08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800ae0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ae10:	2218      	movs	r2, #24
 800ae12:	2100      	movs	r1, #0
 800ae14:	4618      	mov	r0, r3
 800ae16:	f000 fd82 	bl	800b91e <Osal_MemSet>
  rq.ogf = 0x3f;
 800ae1a:	233f      	movs	r3, #63	; 0x3f
 800ae1c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x097;
 800ae20:	2397      	movs	r3, #151	; 0x97
 800ae22:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800ae26:	230f      	movs	r3, #15
 800ae28:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800ae2c:	f107 0310 	add.w	r3, r7, #16
 800ae30:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ae34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae38:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ae3c:	f107 030f 	add.w	r3, r7, #15
 800ae40:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ae44:	2301      	movs	r3, #1
 800ae46:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800ae4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ae4e:	2100      	movs	r1, #0
 800ae50:	4618      	mov	r0, r3
 800ae52:	f000 ff1f 	bl	800bc94 <hci_send_req>
 800ae56:	4603      	mov	r3, r0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	da01      	bge.n	800ae60 <aci_gap_start_general_discovery_proc+0xe0>
    return BLE_STATUS_TIMEOUT;
 800ae5c:	23ff      	movs	r3, #255	; 0xff
 800ae5e:	e009      	b.n	800ae74 <aci_gap_start_general_discovery_proc+0xf4>
  if (status) 
 800ae60:	f107 030f 	add.w	r3, r7, #15
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d003      	beq.n	800ae72 <aci_gap_start_general_discovery_proc+0xf2>
  {
    return status;
 800ae6a:	f107 030f 	add.w	r3, r7, #15
 800ae6e:	781b      	ldrb	r3, [r3, #0]
 800ae70:	e000      	b.n	800ae74 <aci_gap_start_general_discovery_proc+0xf4>
  }
  return BLE_STATUS_SUCCESS;
 800ae72:	2300      	movs	r3, #0
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bdb0      	pop	{r4, r5, r7, pc}

0800ae7e <aci_gap_create_connection>:
                                     uint16_t Conn_Interval_Max,
                                     uint16_t Conn_Latency,
                                     uint16_t Supervision_Timeout,
                                     uint16_t Minimum_CE_Length,
                                     uint16_t Maximum_CE_Length)
{
 800ae7e:	b590      	push	{r4, r7, lr}
 800ae80:	b0cf      	sub	sp, #316	; 0x13c
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	4604      	mov	r4, r0
 800ae86:	4608      	mov	r0, r1
 800ae88:	4611      	mov	r1, r2
 800ae8a:	1d3a      	adds	r2, r7, #4
 800ae8c:	6013      	str	r3, [r2, #0]
 800ae8e:	f107 030e 	add.w	r3, r7, #14
 800ae92:	4622      	mov	r2, r4
 800ae94:	801a      	strh	r2, [r3, #0]
 800ae96:	f107 030c 	add.w	r3, r7, #12
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	801a      	strh	r2, [r3, #0]
 800ae9e:	f107 030b 	add.w	r3, r7, #11
 800aea2:	460a      	mov	r2, r1
 800aea4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_create_connection_cp0 *cp0 = (aci_gap_create_connection_cp0*)(cmd_buffer);
 800aea6:	f107 0318 	add.w	r3, r7, #24
 800aeaa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 800aeae:	f107 0317 	add.w	r3, r7, #23
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->LE_Scan_Interval = htob(LE_Scan_Interval, 2);
 800aebc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800aec0:	f107 020e 	add.w	r2, r7, #14
 800aec4:	8812      	ldrh	r2, [r2, #0]
 800aec6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800aec8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800aecc:	3302      	adds	r3, #2
 800aece:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->LE_Scan_Window = htob(LE_Scan_Window, 2);
 800aed2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800aed6:	f107 020c 	add.w	r2, r7, #12
 800aeda:	8812      	ldrh	r2, [r2, #0]
 800aedc:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800aede:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800aee2:	3302      	adds	r3, #2
 800aee4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Peer_Address_Type = htob(Peer_Address_Type, 1);
 800aee8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800aeec:	f107 020b 	add.w	r2, r7, #11
 800aef0:	7812      	ldrb	r2, [r2, #0]
 800aef2:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800aef4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800aef8:	3301      	adds	r3, #1
 800aefa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy((void *) &cp0->Peer_Address, (const void *) Peer_Address, 6);
 800aefe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800af02:	1d58      	adds	r0, r3, #5
 800af04:	1d3b      	adds	r3, r7, #4
 800af06:	2206      	movs	r2, #6
 800af08:	6819      	ldr	r1, [r3, #0]
 800af0a:	f000 fcf8 	bl	800b8fe <Osal_MemCpy>
  index_input += 6;
 800af0e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800af12:	3306      	adds	r3, #6
 800af14:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800af18:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800af1c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800af20:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800af22:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800af26:	3301      	adds	r3, #1
 800af28:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Interval_Min = htob(Conn_Interval_Min, 2);
 800af2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800af30:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 800af34:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 800af36:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800af3a:	3302      	adds	r3, #2
 800af3c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Interval_Max = htob(Conn_Interval_Max, 2);
 800af40:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800af44:	f8b7 2150 	ldrh.w	r2, [r7, #336]	; 0x150
 800af48:	81da      	strh	r2, [r3, #14]
  index_input += 2;
 800af4a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800af4e:	3302      	adds	r3, #2
 800af50:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Latency = htob(Conn_Latency, 2);
 800af54:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800af58:	f8b7 2154 	ldrh.w	r2, [r7, #340]	; 0x154
 800af5c:	821a      	strh	r2, [r3, #16]
  index_input += 2;
 800af5e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800af62:	3302      	adds	r3, #2
 800af64:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Supervision_Timeout = htob(Supervision_Timeout, 2);
 800af68:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800af6c:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 800af70:	825a      	strh	r2, [r3, #18]
  index_input += 2;
 800af72:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800af76:	3302      	adds	r3, #2
 800af78:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Minimum_CE_Length = htob(Minimum_CE_Length, 2);
 800af7c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800af80:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800af84:	829a      	strh	r2, [r3, #20]
  index_input += 2;
 800af86:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800af8a:	3302      	adds	r3, #2
 800af8c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Maximum_CE_Length = htob(Maximum_CE_Length, 2);
 800af90:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800af94:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800af98:	82da      	strh	r2, [r3, #22]
  index_input += 2;
 800af9a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800af9e:	3302      	adds	r3, #2
 800afa0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet(&rq, 0, sizeof(rq));
 800afa4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800afa8:	2218      	movs	r2, #24
 800afaa:	2100      	movs	r1, #0
 800afac:	4618      	mov	r0, r3
 800afae:	f000 fcb6 	bl	800b91e <Osal_MemSet>
  rq.ogf = 0x3f;
 800afb2:	233f      	movs	r3, #63	; 0x3f
 800afb4:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x09c;
 800afb8:	239c      	movs	r3, #156	; 0x9c
 800afba:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 800afbe:	230f      	movs	r3, #15
 800afc0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 800afc4:	f107 0318 	add.w	r3, r7, #24
 800afc8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800afcc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800afd0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 800afd4:	f107 0317 	add.w	r3, r7, #23
 800afd8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 800afdc:	2301      	movs	r3, #1
 800afde:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800afe2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800afe6:	2100      	movs	r1, #0
 800afe8:	4618      	mov	r0, r3
 800afea:	f000 fe53 	bl	800bc94 <hci_send_req>
 800afee:	4603      	mov	r3, r0
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	da01      	bge.n	800aff8 <aci_gap_create_connection+0x17a>
    return BLE_STATUS_TIMEOUT;
 800aff4:	23ff      	movs	r3, #255	; 0xff
 800aff6:	e009      	b.n	800b00c <aci_gap_create_connection+0x18e>
  if (status) 
 800aff8:	f107 0317 	add.w	r3, r7, #23
 800affc:	781b      	ldrb	r3, [r3, #0]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d003      	beq.n	800b00a <aci_gap_create_connection+0x18c>
  {
    return status;
 800b002:	f107 0317 	add.w	r3, r7, #23
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	e000      	b.n	800b00c <aci_gap_create_connection+0x18e>
  }
  return BLE_STATUS_SUCCESS;
 800b00a:	2300      	movs	r3, #0
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800b012:	46bd      	mov	sp, r7
 800b014:	bd90      	pop	{r4, r7, pc}

0800b016 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init(void)
{
 800b016:	b580      	push	{r7, lr}
 800b018:	b088      	sub	sp, #32
 800b01a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b01c:	2300      	movs	r3, #0
 800b01e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b020:	f107 0308 	add.w	r3, r7, #8
 800b024:	2218      	movs	r2, #24
 800b026:	2100      	movs	r1, #0
 800b028:	4618      	mov	r0, r3
 800b02a:	f000 fc78 	bl	800b91e <Osal_MemSet>
  rq.ogf = 0x3f;
 800b02e:	233f      	movs	r3, #63	; 0x3f
 800b030:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800b032:	f240 1301 	movw	r3, #257	; 0x101
 800b036:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b038:	1dfb      	adds	r3, r7, #7
 800b03a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b03c:	2301      	movs	r3, #1
 800b03e:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800b040:	f107 0308 	add.w	r3, r7, #8
 800b044:	2100      	movs	r1, #0
 800b046:	4618      	mov	r0, r3
 800b048:	f000 fe24 	bl	800bc94 <hci_send_req>
 800b04c:	4603      	mov	r3, r0
 800b04e:	2b00      	cmp	r3, #0
 800b050:	da01      	bge.n	800b056 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800b052:	23ff      	movs	r3, #255	; 0xff
 800b054:	e005      	b.n	800b062 <aci_gatt_init+0x4c>
  if (status) 
 800b056:	79fb      	ldrb	r3, [r7, #7]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d001      	beq.n	800b060 <aci_gatt_init+0x4a>
  {
    return status;
 800b05c:	79fb      	ldrb	r3, [r7, #7]
 800b05e:	e000      	b.n	800b062 <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 800b060:	2300      	movs	r3, #0
}
 800b062:	4618      	mov	r0, r3
 800b064:	3720      	adds	r7, #32
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}

0800b06a <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 800b06a:	b5b0      	push	{r4, r5, r7, lr}
 800b06c:	b0cc      	sub	sp, #304	; 0x130
 800b06e:	af00      	add	r7, sp, #0
 800b070:	4605      	mov	r5, r0
 800b072:	460c      	mov	r4, r1
 800b074:	4610      	mov	r0, r2
 800b076:	4619      	mov	r1, r3
 800b078:	1dbb      	adds	r3, r7, #6
 800b07a:	462a      	mov	r2, r5
 800b07c:	801a      	strh	r2, [r3, #0]
 800b07e:	1d3b      	adds	r3, r7, #4
 800b080:	4622      	mov	r2, r4
 800b082:	801a      	strh	r2, [r3, #0]
 800b084:	1cfb      	adds	r3, r7, #3
 800b086:	4602      	mov	r2, r0
 800b088:	701a      	strb	r2, [r3, #0]
 800b08a:	1cbb      	adds	r3, r7, #2
 800b08c:	460a      	mov	r2, r1
 800b08e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800b090:	f107 0310 	add.w	r3, r7, #16
 800b094:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b098:	f107 030f 	add.w	r3, r7, #15
 800b09c:	2200      	movs	r2, #0
 800b09e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = htob(Service_Handle, 2);
 800b0a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b0aa:	1dba      	adds	r2, r7, #6
 800b0ac:	8812      	ldrh	r2, [r2, #0]
 800b0ae:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b0b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b0b4:	3302      	adds	r3, #2
 800b0b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = htob(Char_Handle, 2);
 800b0ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b0be:	1d3a      	adds	r2, r7, #4
 800b0c0:	8812      	ldrh	r2, [r2, #0]
 800b0c2:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800b0c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b0c8:	3302      	adds	r3, #2
 800b0ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = htob(Val_Offset, 1);
 800b0ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b0d2:	1cfa      	adds	r2, r7, #3
 800b0d4:	7812      	ldrb	r2, [r2, #0]
 800b0d6:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800b0d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b0dc:	3301      	adds	r3, #1
 800b0de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 800b0e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b0e6:	1cba      	adds	r2, r7, #2
 800b0e8:	7812      	ldrb	r2, [r2, #0]
 800b0ea:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800b0ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b0f0:	3301      	adds	r3, #1
 800b0f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 800b0f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b0fa:	1d98      	adds	r0, r3, #6
 800b0fc:	1cbb      	adds	r3, r7, #2
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	461a      	mov	r2, r3
 800b102:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800b106:	f000 fbfa 	bl	800b8fe <Osal_MemCpy>
  index_input += Char_Value_Length;
 800b10a:	1cbb      	adds	r3, r7, #2
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b112:	4413      	add	r3, r2
 800b114:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b118:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b11c:	2218      	movs	r2, #24
 800b11e:	2100      	movs	r1, #0
 800b120:	4618      	mov	r0, r3
 800b122:	f000 fbfc 	bl	800b91e <Osal_MemSet>
  rq.ogf = 0x3f;
 800b126:	233f      	movs	r3, #63	; 0x3f
 800b128:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800b12c:	f44f 7383 	mov.w	r3, #262	; 0x106
 800b130:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b134:	f107 0310 	add.w	r3, r7, #16
 800b138:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b13c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b140:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b144:	f107 030f 	add.w	r3, r7, #15
 800b148:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b14c:	2301      	movs	r3, #1
 800b14e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b152:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b156:	2100      	movs	r1, #0
 800b158:	4618      	mov	r0, r3
 800b15a:	f000 fd9b 	bl	800bc94 <hci_send_req>
 800b15e:	4603      	mov	r3, r0
 800b160:	2b00      	cmp	r3, #0
 800b162:	da01      	bge.n	800b168 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 800b164:	23ff      	movs	r3, #255	; 0xff
 800b166:	e009      	b.n	800b17c <aci_gatt_update_char_value+0x112>
  if (status) 
 800b168:	f107 030f 	add.w	r3, r7, #15
 800b16c:	781b      	ldrb	r3, [r3, #0]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d003      	beq.n	800b17a <aci_gatt_update_char_value+0x110>
  {
    return status;
 800b172:	f107 030f 	add.w	r3, r7, #15
 800b176:	781b      	ldrb	r3, [r3, #0]
 800b178:	e000      	b.n	800b17c <aci_gatt_update_char_value+0x112>
  }
  return BLE_STATUS_SUCCESS;
 800b17a:	2300      	movs	r3, #0
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b182:	46bd      	mov	sp, r7
 800b184:	bdb0      	pop	{r4, r5, r7, pc}

0800b186 <aci_gatt_disc_all_primary_services>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gatt_disc_all_primary_services(uint16_t Connection_Handle)
{
 800b186:	b580      	push	{r7, lr}
 800b188:	b0cc      	sub	sp, #304	; 0x130
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	4602      	mov	r2, r0
 800b18e:	1dbb      	adds	r3, r7, #6
 800b190:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_primary_services_cp0 *cp0 = (aci_gatt_disc_all_primary_services_cp0*)(cmd_buffer);
 800b192:	f107 0310 	add.w	r3, r7, #16
 800b196:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b19a:	f107 030f 	add.w	r3, r7, #15
 800b19e:	2200      	movs	r2, #0
 800b1a0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800b1a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b1ac:	1dba      	adds	r2, r7, #6
 800b1ae:	8812      	ldrh	r2, [r2, #0]
 800b1b0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b1b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b1b6:	3302      	adds	r3, #2
 800b1b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b1bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b1c0:	2218      	movs	r2, #24
 800b1c2:	2100      	movs	r1, #0
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f000 fbaa 	bl	800b91e <Osal_MemSet>
  rq.ogf = 0x3f;
 800b1ca:	233f      	movs	r3, #63	; 0x3f
 800b1cc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x112;
 800b1d0:	f44f 7389 	mov.w	r3, #274	; 0x112
 800b1d4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800b1d8:	230f      	movs	r3, #15
 800b1da:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800b1de:	f107 0310 	add.w	r3, r7, #16
 800b1e2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b1e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b1ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b1ee:	f107 030f 	add.w	r3, r7, #15
 800b1f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b1fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b200:	2100      	movs	r1, #0
 800b202:	4618      	mov	r0, r3
 800b204:	f000 fd46 	bl	800bc94 <hci_send_req>
 800b208:	4603      	mov	r3, r0
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	da01      	bge.n	800b212 <aci_gatt_disc_all_primary_services+0x8c>
    return BLE_STATUS_TIMEOUT;
 800b20e:	23ff      	movs	r3, #255	; 0xff
 800b210:	e009      	b.n	800b226 <aci_gatt_disc_all_primary_services+0xa0>
  if (status) 
 800b212:	f107 030f 	add.w	r3, r7, #15
 800b216:	781b      	ldrb	r3, [r3, #0]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d003      	beq.n	800b224 <aci_gatt_disc_all_primary_services+0x9e>
  {
    return status;
 800b21c:	f107 030f 	add.w	r3, r7, #15
 800b220:	781b      	ldrb	r3, [r3, #0]
 800b222:	e000      	b.n	800b226 <aci_gatt_disc_all_primary_services+0xa0>
  }
  return BLE_STATUS_SUCCESS;
 800b224:	2300      	movs	r3, #0
}
 800b226:	4618      	mov	r0, r3
 800b228:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}

0800b230 <aci_gatt_disc_all_char_of_service>:
}

tBleStatus aci_gatt_disc_all_char_of_service(uint16_t Connection_Handle,
                                             uint16_t Start_Handle,
                                             uint16_t End_Handle)
{
 800b230:	b590      	push	{r4, r7, lr}
 800b232:	b0cd      	sub	sp, #308	; 0x134
 800b234:	af00      	add	r7, sp, #0
 800b236:	4604      	mov	r4, r0
 800b238:	4608      	mov	r0, r1
 800b23a:	4611      	mov	r1, r2
 800b23c:	1dbb      	adds	r3, r7, #6
 800b23e:	4622      	mov	r2, r4
 800b240:	801a      	strh	r2, [r3, #0]
 800b242:	1d3b      	adds	r3, r7, #4
 800b244:	4602      	mov	r2, r0
 800b246:	801a      	strh	r2, [r3, #0]
 800b248:	1cbb      	adds	r3, r7, #2
 800b24a:	460a      	mov	r2, r1
 800b24c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_of_service_cp0 *cp0 = (aci_gatt_disc_all_char_of_service_cp0*)(cmd_buffer);
 800b24e:	f107 0310 	add.w	r3, r7, #16
 800b252:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b256:	f107 030f 	add.w	r3, r7, #15
 800b25a:	2200      	movs	r2, #0
 800b25c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b25e:	2300      	movs	r3, #0
 800b260:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800b264:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b268:	1dba      	adds	r2, r7, #6
 800b26a:	8812      	ldrh	r2, [r2, #0]
 800b26c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b26e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b272:	3302      	adds	r3, #2
 800b274:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Start_Handle = htob(Start_Handle, 2);
 800b278:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b27c:	1d3a      	adds	r2, r7, #4
 800b27e:	8812      	ldrh	r2, [r2, #0]
 800b280:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800b282:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b286:	3302      	adds	r3, #2
 800b288:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = htob(End_Handle, 2);
 800b28c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b290:	1cba      	adds	r2, r7, #2
 800b292:	8812      	ldrh	r2, [r2, #0]
 800b294:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800b296:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b29a:	3302      	adds	r3, #2
 800b29c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b2a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b2a4:	2218      	movs	r2, #24
 800b2a6:	2100      	movs	r1, #0
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f000 fb38 	bl	800b91e <Osal_MemSet>
  rq.ogf = 0x3f;
 800b2ae:	233f      	movs	r3, #63	; 0x3f
 800b2b0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x115;
 800b2b4:	f240 1315 	movw	r3, #277	; 0x115
 800b2b8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800b2bc:	230f      	movs	r3, #15
 800b2be:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800b2c2:	f107 0310 	add.w	r3, r7, #16
 800b2c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b2ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b2ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b2d2:	f107 030f 	add.w	r3, r7, #15
 800b2d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b2da:	2301      	movs	r3, #1
 800b2dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b2e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b2e4:	2100      	movs	r1, #0
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f000 fcd4 	bl	800bc94 <hci_send_req>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	da01      	bge.n	800b2f6 <aci_gatt_disc_all_char_of_service+0xc6>
    return BLE_STATUS_TIMEOUT;
 800b2f2:	23ff      	movs	r3, #255	; 0xff
 800b2f4:	e009      	b.n	800b30a <aci_gatt_disc_all_char_of_service+0xda>
  if (status) 
 800b2f6:	f107 030f 	add.w	r3, r7, #15
 800b2fa:	781b      	ldrb	r3, [r3, #0]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d003      	beq.n	800b308 <aci_gatt_disc_all_char_of_service+0xd8>
  {
    return status;
 800b300:	f107 030f 	add.w	r3, r7, #15
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	e000      	b.n	800b30a <aci_gatt_disc_all_char_of_service+0xda>
  }
  return BLE_STATUS_SUCCESS;
 800b308:	2300      	movs	r3, #0
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800b310:	46bd      	mov	sp, r7
 800b312:	bd90      	pop	{r4, r7, pc}

0800b314 <aci_gatt_disc_all_char_desc>:
}

tBleStatus aci_gatt_disc_all_char_desc(uint16_t Connection_Handle,
                                       uint16_t Char_Handle,
                                       uint16_t End_Handle)
{
 800b314:	b590      	push	{r4, r7, lr}
 800b316:	b0cd      	sub	sp, #308	; 0x134
 800b318:	af00      	add	r7, sp, #0
 800b31a:	4604      	mov	r4, r0
 800b31c:	4608      	mov	r0, r1
 800b31e:	4611      	mov	r1, r2
 800b320:	1dbb      	adds	r3, r7, #6
 800b322:	4622      	mov	r2, r4
 800b324:	801a      	strh	r2, [r3, #0]
 800b326:	1d3b      	adds	r3, r7, #4
 800b328:	4602      	mov	r2, r0
 800b32a:	801a      	strh	r2, [r3, #0]
 800b32c:	1cbb      	adds	r3, r7, #2
 800b32e:	460a      	mov	r2, r1
 800b330:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_desc_cp0 *cp0 = (aci_gatt_disc_all_char_desc_cp0*)(cmd_buffer);
 800b332:	f107 0310 	add.w	r3, r7, #16
 800b336:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b33a:	f107 030f 	add.w	r3, r7, #15
 800b33e:	2200      	movs	r2, #0
 800b340:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b342:	2300      	movs	r3, #0
 800b344:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800b348:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b34c:	1dba      	adds	r2, r7, #6
 800b34e:	8812      	ldrh	r2, [r2, #0]
 800b350:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b352:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b356:	3302      	adds	r3, #2
 800b358:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = htob(Char_Handle, 2);
 800b35c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b360:	1d3a      	adds	r2, r7, #4
 800b362:	8812      	ldrh	r2, [r2, #0]
 800b364:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800b366:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b36a:	3302      	adds	r3, #2
 800b36c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = htob(End_Handle, 2);
 800b370:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b374:	1cba      	adds	r2, r7, #2
 800b376:	8812      	ldrh	r2, [r2, #0]
 800b378:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800b37a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b37e:	3302      	adds	r3, #2
 800b380:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b384:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b388:	2218      	movs	r2, #24
 800b38a:	2100      	movs	r1, #0
 800b38c:	4618      	mov	r0, r3
 800b38e:	f000 fac6 	bl	800b91e <Osal_MemSet>
  rq.ogf = 0x3f;
 800b392:	233f      	movs	r3, #63	; 0x3f
 800b394:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x117;
 800b398:	f240 1317 	movw	r3, #279	; 0x117
 800b39c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800b3a0:	230f      	movs	r3, #15
 800b3a2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800b3a6:	f107 0310 	add.w	r3, r7, #16
 800b3aa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b3ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b3b2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b3b6:	f107 030f 	add.w	r3, r7, #15
 800b3ba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b3c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b3c8:	2100      	movs	r1, #0
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f000 fc62 	bl	800bc94 <hci_send_req>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	da01      	bge.n	800b3da <aci_gatt_disc_all_char_desc+0xc6>
    return BLE_STATUS_TIMEOUT;
 800b3d6:	23ff      	movs	r3, #255	; 0xff
 800b3d8:	e009      	b.n	800b3ee <aci_gatt_disc_all_char_desc+0xda>
  if (status) 
 800b3da:	f107 030f 	add.w	r3, r7, #15
 800b3de:	781b      	ldrb	r3, [r3, #0]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d003      	beq.n	800b3ec <aci_gatt_disc_all_char_desc+0xd8>
  {
    return status;
 800b3e4:	f107 030f 	add.w	r3, r7, #15
 800b3e8:	781b      	ldrb	r3, [r3, #0]
 800b3ea:	e000      	b.n	800b3ee <aci_gatt_disc_all_char_desc+0xda>
  }
  return BLE_STATUS_SUCCESS;
 800b3ec:	2300      	movs	r3, #0
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd90      	pop	{r4, r7, pc}

0800b3f8 <aci_gatt_write_char_desc>:

tBleStatus aci_gatt_write_char_desc(uint16_t Connection_Handle,
                                    uint16_t Attr_Handle,
                                    uint8_t Attribute_Val_Length,
                                    uint8_t Attribute_Val[])
{
 800b3f8:	b590      	push	{r4, r7, lr}
 800b3fa:	b0cf      	sub	sp, #316	; 0x13c
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	4604      	mov	r4, r0
 800b400:	4608      	mov	r0, r1
 800b402:	4611      	mov	r1, r2
 800b404:	1d3a      	adds	r2, r7, #4
 800b406:	6013      	str	r3, [r2, #0]
 800b408:	f107 030e 	add.w	r3, r7, #14
 800b40c:	4622      	mov	r2, r4
 800b40e:	801a      	strh	r2, [r3, #0]
 800b410:	f107 030c 	add.w	r3, r7, #12
 800b414:	4602      	mov	r2, r0
 800b416:	801a      	strh	r2, [r3, #0]
 800b418:	f107 030b 	add.w	r3, r7, #11
 800b41c:	460a      	mov	r2, r1
 800b41e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_char_desc_cp0 *cp0 = (aci_gatt_write_char_desc_cp0*)(cmd_buffer);
 800b420:	f107 0318 	add.w	r3, r7, #24
 800b424:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 800b428:	f107 0317 	add.w	r3, r7, #23
 800b42c:	2200      	movs	r2, #0
 800b42e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b430:	2300      	movs	r3, #0
 800b432:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800b436:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b43a:	f107 020e 	add.w	r2, r7, #14
 800b43e:	8812      	ldrh	r2, [r2, #0]
 800b440:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b442:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b446:	3302      	adds	r3, #2
 800b448:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attr_Handle = htob(Attr_Handle, 2);
 800b44c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b450:	f107 020c 	add.w	r2, r7, #12
 800b454:	8812      	ldrh	r2, [r2, #0]
 800b456:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800b458:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b45c:	3302      	adds	r3, #2
 800b45e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attribute_Val_Length = htob(Attribute_Val_Length, 1);
 800b462:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b466:	f107 020b 	add.w	r2, r7, #11
 800b46a:	7812      	ldrb	r2, [r2, #0]
 800b46c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800b46e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b472:	3301      	adds	r3, #1
 800b474:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy((void *) &cp0->Attribute_Val, (const void *) Attribute_Val, Attribute_Val_Length);
 800b478:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b47c:	1d58      	adds	r0, r3, #5
 800b47e:	f107 030b 	add.w	r3, r7, #11
 800b482:	781a      	ldrb	r2, [r3, #0]
 800b484:	1d3b      	adds	r3, r7, #4
 800b486:	6819      	ldr	r1, [r3, #0]
 800b488:	f000 fa39 	bl	800b8fe <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 800b48c:	f107 030b 	add.w	r3, r7, #11
 800b490:	781b      	ldrb	r3, [r3, #0]
 800b492:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800b496:	4413      	add	r3, r2
 800b498:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b49c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b4a0:	2218      	movs	r2, #24
 800b4a2:	2100      	movs	r1, #0
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f000 fa3a 	bl	800b91e <Osal_MemSet>
  rq.ogf = 0x3f;
 800b4aa:	233f      	movs	r3, #63	; 0x3f
 800b4ac:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x121;
 800b4b0:	f240 1321 	movw	r3, #289	; 0x121
 800b4b4:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 800b4b8:	230f      	movs	r3, #15
 800b4ba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 800b4be:	f107 0318 	add.w	r3, r7, #24
 800b4c2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800b4c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b4ca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 800b4ce:	f107 0317 	add.w	r3, r7, #23
 800b4d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800b4dc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b4e0:	2100      	movs	r1, #0
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f000 fbd6 	bl	800bc94 <hci_send_req>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	da01      	bge.n	800b4f2 <aci_gatt_write_char_desc+0xfa>
    return BLE_STATUS_TIMEOUT;
 800b4ee:	23ff      	movs	r3, #255	; 0xff
 800b4f0:	e009      	b.n	800b506 <aci_gatt_write_char_desc+0x10e>
  if (status) 
 800b4f2:	f107 0317 	add.w	r3, r7, #23
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d003      	beq.n	800b504 <aci_gatt_write_char_desc+0x10c>
  {
    return status;
 800b4fc:	f107 0317 	add.w	r3, r7, #23
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	e000      	b.n	800b506 <aci_gatt_write_char_desc+0x10e>
  }
  return BLE_STATUS_SUCCESS;
 800b504:	2300      	movs	r3, #0
}
 800b506:	4618      	mov	r0, r3
 800b508:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd90      	pop	{r4, r7, pc}

0800b510 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b0cc      	sub	sp, #304	; 0x130
 800b514:	af00      	add	r7, sp, #0
 800b516:	463b      	mov	r3, r7
 800b518:	601a      	str	r2, [r3, #0]
 800b51a:	1dfb      	adds	r3, r7, #7
 800b51c:	4602      	mov	r2, r0
 800b51e:	701a      	strb	r2, [r3, #0]
 800b520:	1dbb      	adds	r3, r7, #6
 800b522:	460a      	mov	r2, r1
 800b524:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800b526:	f107 0310 	add.w	r3, r7, #16
 800b52a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b52e:	f107 030f 	add.w	r3, r7, #15
 800b532:	2200      	movs	r2, #0
 800b534:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b536:	2300      	movs	r3, #0
 800b538:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = htob(Offset, 1);
 800b53c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b540:	1dfa      	adds	r2, r7, #7
 800b542:	7812      	ldrb	r2, [r2, #0]
 800b544:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b546:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b54a:	3301      	adds	r3, #1
 800b54c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = htob(Length, 1);
 800b550:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b554:	1dba      	adds	r2, r7, #6
 800b556:	7812      	ldrb	r2, [r2, #0]
 800b558:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b55a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b55e:	3301      	adds	r3, #1
 800b560:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->Value, (const void *) Value, Length);
 800b564:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b568:	1c98      	adds	r0, r3, #2
 800b56a:	1dbb      	adds	r3, r7, #6
 800b56c:	781a      	ldrb	r2, [r3, #0]
 800b56e:	463b      	mov	r3, r7
 800b570:	6819      	ldr	r1, [r3, #0]
 800b572:	f000 f9c4 	bl	800b8fe <Osal_MemCpy>
  index_input += Length;
 800b576:	1dbb      	adds	r3, r7, #6
 800b578:	781b      	ldrb	r3, [r3, #0]
 800b57a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b57e:	4413      	add	r3, r2
 800b580:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b584:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b588:	2218      	movs	r2, #24
 800b58a:	2100      	movs	r1, #0
 800b58c:	4618      	mov	r0, r3
 800b58e:	f000 f9c6 	bl	800b91e <Osal_MemSet>
  rq.ogf = 0x3f;
 800b592:	233f      	movs	r3, #63	; 0x3f
 800b594:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800b598:	230c      	movs	r3, #12
 800b59a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b59e:	f107 0310 	add.w	r3, r7, #16
 800b5a2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b5a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b5aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b5ae:	f107 030f 	add.w	r3, r7, #15
 800b5b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b5bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b5c0:	2100      	movs	r1, #0
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f000 fb66 	bl	800bc94 <hci_send_req>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	da01      	bge.n	800b5d2 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 800b5ce:	23ff      	movs	r3, #255	; 0xff
 800b5d0:	e009      	b.n	800b5e6 <aci_hal_write_config_data+0xd6>
  if (status) 
 800b5d2:	f107 030f 	add.w	r3, r7, #15
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d003      	beq.n	800b5e4 <aci_hal_write_config_data+0xd4>
  {
    return status;
 800b5dc:	f107 030f 	add.w	r3, r7, #15
 800b5e0:	781b      	ldrb	r3, [r3, #0]
 800b5e2:	e000      	b.n	800b5e6 <aci_hal_write_config_data+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 800b5e4:	2300      	movs	r3, #0
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}

0800b5f0 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b0cc      	sub	sp, #304	; 0x130
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	4602      	mov	r2, r0
 800b5f8:	1dfb      	adds	r3, r7, #7
 800b5fa:	701a      	strb	r2, [r3, #0]
 800b5fc:	1dbb      	adds	r3, r7, #6
 800b5fe:	460a      	mov	r2, r1
 800b600:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800b602:	f107 0310 	add.w	r3, r7, #16
 800b606:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b60a:	f107 030f 	add.w	r3, r7, #15
 800b60e:	2200      	movs	r2, #0
 800b610:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b612:	2300      	movs	r3, #0
 800b614:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = htob(En_High_Power, 1);
 800b618:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b61c:	1dfa      	adds	r2, r7, #7
 800b61e:	7812      	ldrb	r2, [r2, #0]
 800b620:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b622:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b626:	3301      	adds	r3, #1
 800b628:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = htob(PA_Level, 1);
 800b62c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b630:	1dba      	adds	r2, r7, #6
 800b632:	7812      	ldrb	r2, [r2, #0]
 800b634:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b636:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b63a:	3301      	adds	r3, #1
 800b63c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b640:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b644:	2218      	movs	r2, #24
 800b646:	2100      	movs	r1, #0
 800b648:	4618      	mov	r0, r3
 800b64a:	f000 f968 	bl	800b91e <Osal_MemSet>
  rq.ogf = 0x3f;
 800b64e:	233f      	movs	r3, #63	; 0x3f
 800b650:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800b654:	230f      	movs	r3, #15
 800b656:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b65a:	f107 0310 	add.w	r3, r7, #16
 800b65e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b662:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b666:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b66a:	f107 030f 	add.w	r3, r7, #15
 800b66e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b672:	2301      	movs	r3, #1
 800b674:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b678:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b67c:	2100      	movs	r1, #0
 800b67e:	4618      	mov	r0, r3
 800b680:	f000 fb08 	bl	800bc94 <hci_send_req>
 800b684:	4603      	mov	r3, r0
 800b686:	2b00      	cmp	r3, #0
 800b688:	da01      	bge.n	800b68e <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 800b68a:	23ff      	movs	r3, #255	; 0xff
 800b68c:	e009      	b.n	800b6a2 <aci_hal_set_tx_power_level+0xb2>
  if (status) 
 800b68e:	f107 030f 	add.w	r3, r7, #15
 800b692:	781b      	ldrb	r3, [r3, #0]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d003      	beq.n	800b6a0 <aci_hal_set_tx_power_level+0xb0>
  {
    return status;
 800b698:	f107 030f 	add.w	r3, r7, #15
 800b69c:	781b      	ldrb	r3, [r3, #0]
 800b69e:	e000      	b.n	800b6a2 <aci_hal_set_tx_power_level+0xb2>
  }
  return BLE_STATUS_SUCCESS;
 800b6a0:	2300      	movs	r3, #0
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}

0800b6ac <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy((void *) Link_Connection_Handle, (const void *) resp.Link_Connection_Handle, 16);
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask(uint16_t Radio_Activity_Mask)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b0cc      	sub	sp, #304	; 0x130
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	4602      	mov	r2, r0
 800b6b4:	1dbb      	adds	r3, r7, #6
 800b6b6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800b6b8:	f107 0310 	add.w	r3, r7, #16
 800b6bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b6c0:	f107 030f 	add.w	r3, r7, #15
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = htob(Radio_Activity_Mask, 2);
 800b6ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b6d2:	1dba      	adds	r2, r7, #6
 800b6d4:	8812      	ldrh	r2, [r2, #0]
 800b6d6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b6d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b6dc:	3302      	adds	r3, #2
 800b6de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b6e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b6e6:	2218      	movs	r2, #24
 800b6e8:	2100      	movs	r1, #0
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f000 f917 	bl	800b91e <Osal_MemSet>
  rq.ogf = 0x3f;
 800b6f0:	233f      	movs	r3, #63	; 0x3f
 800b6f2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800b6f6:	2318      	movs	r3, #24
 800b6f8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b6fc:	f107 0310 	add.w	r3, r7, #16
 800b700:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b704:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b708:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b70c:	f107 030f 	add.w	r3, r7, #15
 800b710:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b714:	2301      	movs	r3, #1
 800b716:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b71a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b71e:	2100      	movs	r1, #0
 800b720:	4618      	mov	r0, r3
 800b722:	f000 fab7 	bl	800bc94 <hci_send_req>
 800b726:	4603      	mov	r3, r0
 800b728:	2b00      	cmp	r3, #0
 800b72a:	da01      	bge.n	800b730 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 800b72c:	23ff      	movs	r3, #255	; 0xff
 800b72e:	e009      	b.n	800b744 <aci_hal_set_radio_activity_mask+0x98>
  if (status) 
 800b730:	f107 030f 	add.w	r3, r7, #15
 800b734:	781b      	ldrb	r3, [r3, #0]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d003      	beq.n	800b742 <aci_hal_set_radio_activity_mask+0x96>
  {
    return status;
 800b73a:	f107 030f 	add.w	r3, r7, #15
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	e000      	b.n	800b744 <aci_hal_set_radio_activity_mask+0x98>
  }
  return BLE_STATUS_SUCCESS;
 800b742:	2300      	movs	r3, #0
}
 800b744:	4618      	mov	r0, r3
 800b746:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}

0800b74e <hci_reset>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_reset(void)
{
 800b74e:	b580      	push	{r7, lr}
 800b750:	b088      	sub	sp, #32
 800b752:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b754:	2300      	movs	r3, #0
 800b756:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b758:	f107 0308 	add.w	r3, r7, #8
 800b75c:	2218      	movs	r2, #24
 800b75e:	2100      	movs	r1, #0
 800b760:	4618      	mov	r0, r3
 800b762:	f000 f8dc 	bl	800b91e <Osal_MemSet>
  rq.ogf = 0x03;
 800b766:	2303      	movs	r3, #3
 800b768:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800b76a:	2303      	movs	r3, #3
 800b76c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b76e:	1dfb      	adds	r3, r7, #7
 800b770:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b772:	2301      	movs	r3, #1
 800b774:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800b776:	f107 0308 	add.w	r3, r7, #8
 800b77a:	2100      	movs	r1, #0
 800b77c:	4618      	mov	r0, r3
 800b77e:	f000 fa89 	bl	800bc94 <hci_send_req>
 800b782:	4603      	mov	r3, r0
 800b784:	2b00      	cmp	r3, #0
 800b786:	da01      	bge.n	800b78c <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800b788:	23ff      	movs	r3, #255	; 0xff
 800b78a:	e005      	b.n	800b798 <hci_reset+0x4a>
  if (status) 
 800b78c:	79fb      	ldrb	r3, [r7, #7]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d001      	beq.n	800b796 <hci_reset+0x48>
  {
    return status;
 800b792:	79fb      	ldrb	r3, [r7, #7]
 800b794:	e000      	b.n	800b798 <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800b796:	2300      	movs	r3, #0
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3720      	adds	r7, #32
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <aci_l2cap_connection_parameter_update_resp>:
                                                      uint16_t Timeout_Multiplier,
                                                      uint16_t Minimum_CE_Length,
                                                      uint16_t Maximum_CE_Length,
                                                      uint8_t Identifier,
                                                      uint8_t Accept)
{
 800b7a0:	b5b0      	push	{r4, r5, r7, lr}
 800b7a2:	b0cc      	sub	sp, #304	; 0x130
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	4605      	mov	r5, r0
 800b7a8:	460c      	mov	r4, r1
 800b7aa:	4610      	mov	r0, r2
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	1dbb      	adds	r3, r7, #6
 800b7b0:	462a      	mov	r2, r5
 800b7b2:	801a      	strh	r2, [r3, #0]
 800b7b4:	1d3b      	adds	r3, r7, #4
 800b7b6:	4622      	mov	r2, r4
 800b7b8:	801a      	strh	r2, [r3, #0]
 800b7ba:	1cbb      	adds	r3, r7, #2
 800b7bc:	4602      	mov	r2, r0
 800b7be:	801a      	strh	r2, [r3, #0]
 800b7c0:	463b      	mov	r3, r7
 800b7c2:	460a      	mov	r2, r1
 800b7c4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_resp_cp0 *cp0 = (aci_l2cap_connection_parameter_update_resp_cp0*)(cmd_buffer);
 800b7c6:	f107 0310 	add.w	r3, r7, #16
 800b7ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b7ce:	f107 030f 	add.w	r3, r7, #15
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800b7dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b7e0:	1dba      	adds	r2, r7, #6
 800b7e2:	8812      	ldrh	r2, [r2, #0]
 800b7e4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b7e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b7ea:	3302      	adds	r3, #2
 800b7ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = htob(Conn_Interval_Min, 2);
 800b7f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b7f4:	1d3a      	adds	r2, r7, #4
 800b7f6:	8812      	ldrh	r2, [r2, #0]
 800b7f8:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800b7fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b7fe:	3302      	adds	r3, #2
 800b800:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = htob(Conn_Interval_Max, 2);
 800b804:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b808:	1cba      	adds	r2, r7, #2
 800b80a:	8812      	ldrh	r2, [r2, #0]
 800b80c:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800b80e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b812:	3302      	adds	r3, #2
 800b814:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Slave_latency = htob(Slave_latency, 2);
 800b818:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b81c:	463a      	mov	r2, r7
 800b81e:	8812      	ldrh	r2, [r2, #0]
 800b820:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 800b822:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b826:	3302      	adds	r3, #2
 800b828:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = htob(Timeout_Multiplier, 2);
 800b82c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b830:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 800b834:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 800b836:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b83a:	3302      	adds	r3, #2
 800b83c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Minimum_CE_Length = htob(Minimum_CE_Length, 2);
 800b840:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b844:	f8b7 2144 	ldrh.w	r2, [r7, #324]	; 0x144
 800b848:	815a      	strh	r2, [r3, #10]
  index_input += 2;
 800b84a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b84e:	3302      	adds	r3, #2
 800b850:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Maximum_CE_Length = htob(Maximum_CE_Length, 2);
 800b854:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b858:	f8b7 2148 	ldrh.w	r2, [r7, #328]	; 0x148
 800b85c:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 800b85e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b862:	3302      	adds	r3, #2
 800b864:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identifier = htob(Identifier, 1);
 800b868:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b86c:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800b870:	739a      	strb	r2, [r3, #14]
  index_input += 1;
 800b872:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b876:	3301      	adds	r3, #1
 800b878:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Accept = htob(Accept, 1);
 800b87c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b880:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800b884:	73da      	strb	r2, [r3, #15]
  index_input += 1;
 800b886:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b88a:	3301      	adds	r3, #1
 800b88c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b890:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b894:	2218      	movs	r2, #24
 800b896:	2100      	movs	r1, #0
 800b898:	4618      	mov	r0, r3
 800b89a:	f000 f840 	bl	800b91e <Osal_MemSet>
  rq.ogf = 0x3f;
 800b89e:	233f      	movs	r3, #63	; 0x3f
 800b8a0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x182;
 800b8a4:	f44f 73c1 	mov.w	r3, #386	; 0x182
 800b8a8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b8ac:	f107 0310 	add.w	r3, r7, #16
 800b8b0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b8b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b8b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b8bc:	f107 030f 	add.w	r3, r7, #15
 800b8c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b8ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b8ce:	2100      	movs	r1, #0
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f000 f9df 	bl	800bc94 <hci_send_req>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	da01      	bge.n	800b8e0 <aci_l2cap_connection_parameter_update_resp+0x140>
    return BLE_STATUS_TIMEOUT;
 800b8dc:	23ff      	movs	r3, #255	; 0xff
 800b8de:	e009      	b.n	800b8f4 <aci_l2cap_connection_parameter_update_resp+0x154>
  if (status) 
 800b8e0:	f107 030f 	add.w	r3, r7, #15
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d003      	beq.n	800b8f2 <aci_l2cap_connection_parameter_update_resp+0x152>
  {
    return status;
 800b8ea:	f107 030f 	add.w	r3, r7, #15
 800b8ee:	781b      	ldrb	r3, [r3, #0]
 800b8f0:	e000      	b.n	800b8f4 <aci_l2cap_connection_parameter_update_resp+0x154>
  }
  return BLE_STATUS_SUCCESS;
 800b8f2:	2300      	movs	r3, #0
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bdb0      	pop	{r4, r5, r7, pc}

0800b8fe <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800b8fe:	b580      	push	{r7, lr}
 800b900:	b084      	sub	sp, #16
 800b902:	af00      	add	r7, sp, #0
 800b904:	60f8      	str	r0, [r7, #12]
 800b906:	60b9      	str	r1, [r7, #8]
 800b908:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800b90a:	687a      	ldr	r2, [r7, #4]
 800b90c:	68b9      	ldr	r1, [r7, #8]
 800b90e:	68f8      	ldr	r0, [r7, #12]
 800b910:	f002 fd88 	bl	800e424 <memcpy>
 800b914:	4603      	mov	r3, r0
}
 800b916:	4618      	mov	r0, r3
 800b918:	3710      	adds	r7, #16
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}

0800b91e <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800b91e:	b580      	push	{r7, lr}
 800b920:	b084      	sub	sp, #16
 800b922:	af00      	add	r7, sp, #0
 800b924:	60f8      	str	r0, [r7, #12]
 800b926:	60b9      	str	r1, [r7, #8]
 800b928:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800b92a:	687a      	ldr	r2, [r7, #4]
 800b92c:	68b9      	ldr	r1, [r7, #8]
 800b92e:	68f8      	ldr	r0, [r7, #12]
 800b930:	f002 fd83 	bl	800e43a <memset>
 800b934:	4603      	mov	r3, r0
}
 800b936:	4618      	mov	r0, r3
 800b938:	3710      	adds	r7, #16
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}

0800b93e <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 800b93e:	b480      	push	{r7}
 800b940:	af00      	add	r7, sp, #0
  return;
 800b942:	bf00      	nop
}
 800b944:	46bd      	mov	sp, r7
 800b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94a:	4770      	bx	lr

0800b94c <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 800b94c:	b480      	push	{r7}
 800b94e:	af00      	add	r7, sp, #0
  return;
 800b950:	bf00      	nop
}
 800b952:	46bd      	mov	sp, r7
 800b954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b958:	4770      	bx	lr

0800b95a <DIS_Init>:
__weak void DIS_Init( void )
{
 800b95a:	b480      	push	{r7}
 800b95c:	af00      	add	r7, sp, #0
  return;
 800b95e:	bf00      	nop
}
 800b960:	46bd      	mov	sp, r7
 800b962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b966:	4770      	bx	lr

0800b968 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 800b968:	b480      	push	{r7}
 800b96a:	af00      	add	r7, sp, #0
  return;
 800b96c:	bf00      	nop
}
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr

0800b976 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 800b976:	b480      	push	{r7}
 800b978:	af00      	add	r7, sp, #0
  return;
 800b97a:	bf00      	nop
}
 800b97c:	46bd      	mov	sp, r7
 800b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b982:	4770      	bx	lr

0800b984 <HRS_Init>:
__weak void HRS_Init( void )
{
 800b984:	b480      	push	{r7}
 800b986:	af00      	add	r7, sp, #0
  return;
 800b988:	bf00      	nop
}
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr

0800b992 <HTS_Init>:
__weak void HTS_Init( void )
{
 800b992:	b480      	push	{r7}
 800b994:	af00      	add	r7, sp, #0
  return;
 800b996:	bf00      	nop
}
 800b998:	46bd      	mov	sp, r7
 800b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99e:	4770      	bx	lr

0800b9a0 <IAS_Init>:
__weak void IAS_Init( void )
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	af00      	add	r7, sp, #0
  return;
 800b9a4:	bf00      	nop
}
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr

0800b9ae <LLS_Init>:
__weak void LLS_Init( void )
{
 800b9ae:	b480      	push	{r7}
 800b9b0:	af00      	add	r7, sp, #0
  return;
 800b9b2:	bf00      	nop
}
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ba:	4770      	bx	lr

0800b9bc <TPS_Init>:
__weak void TPS_Init( void )
{
 800b9bc:	b480      	push	{r7}
 800b9be:	af00      	add	r7, sp, #0
  return;
 800b9c0:	bf00      	nop
}
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c8:	4770      	bx	lr

0800b9ca <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 800b9ca:	b480      	push	{r7}
 800b9cc:	af00      	add	r7, sp, #0
  return;
 800b9ce:	bf00      	nop
}
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d6:	4770      	bx	lr

0800b9d8 <P2PS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
 800b9d8:	b480      	push	{r7}
 800b9da:	af00      	add	r7, sp, #0
  return;
 800b9dc:	bf00      	nop
}
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e4:	4770      	bx	lr

0800b9e6 <OTAS_STM_Init>:
__weak void OTAS_STM_Init( void )
{
 800b9e6:	b480      	push	{r7}
 800b9e8:	af00      	add	r7, sp, #0
  return;
 800b9ea:	bf00      	nop
}
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f2:	4770      	bx	lr

0800b9f4 <MESH_Init>:
__weak void MESH_Init( void )
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	af00      	add	r7, sp, #0
  return;
 800b9f8:	bf00      	nop
}
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba00:	4770      	bx	lr

0800ba02 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 800ba02:	b480      	push	{r7}
 800ba04:	af00      	add	r7, sp, #0
  return;
 800ba06:	bf00      	nop
}
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0e:	4770      	bx	lr

0800ba10 <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 800ba10:	b480      	push	{r7}
 800ba12:	af00      	add	r7, sp, #0
  return;
 800ba14:	bf00      	nop
}
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr
	...

0800ba20 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800ba24:	4b04      	ldr	r3, [pc, #16]	; (800ba38 <SVCCTL_Init+0x18>)
 800ba26:	2200      	movs	r2, #0
 800ba28:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800ba2a:	4b04      	ldr	r3, [pc, #16]	; (800ba3c <SVCCTL_Init+0x1c>)
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	711a      	strb	r2, [r3, #4]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800ba30:	f000 f806 	bl	800ba40 <SVCCTL_SvcInit>

  return;
 800ba34:	bf00      	nop
}
 800ba36:	bd80      	pop	{r7, pc}
 800ba38:	2000028c 	.word	0x2000028c
 800ba3c:	200002ac 	.word	0x200002ac

0800ba40 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	af00      	add	r7, sp, #0
  BLS_Init();
 800ba44:	f7ff ff7b 	bl	800b93e <BLS_Init>

  CRS_STM_Init();
 800ba48:	f7ff ff80 	bl	800b94c <CRS_STM_Init>

  DIS_Init();
 800ba4c:	f7ff ff85 	bl	800b95a <DIS_Init>

  EDS_STM_Init();
 800ba50:	f7ff ff8a 	bl	800b968 <EDS_STM_Init>

  HIDS_Init();
 800ba54:	f7ff ff8f 	bl	800b976 <HIDS_Init>

  HRS_Init();
 800ba58:	f7ff ff94 	bl	800b984 <HRS_Init>

  HTS_Init();
 800ba5c:	f7ff ff99 	bl	800b992 <HTS_Init>

  IAS_Init();
 800ba60:	f7ff ff9e 	bl	800b9a0 <IAS_Init>

  LLS_Init();
 800ba64:	f7ff ffa3 	bl	800b9ae <LLS_Init>

  TPS_Init();
 800ba68:	f7ff ffa8 	bl	800b9bc <TPS_Init>

  MOTENV_STM_Init();
 800ba6c:	f7ff ffad 	bl	800b9ca <MOTENV_STM_Init>

  P2PS_STM_Init();
 800ba70:	f7ff ffb2 	bl	800b9d8 <P2PS_STM_Init>

  OTAS_STM_Init();
 800ba74:	f7ff ffb7 	bl	800b9e6 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800ba78:	f7ff ffc3 	bl	800ba02 <BVOPUS_STM_Init>

  MESH_Init();
 800ba7c:	f7ff ffba 	bl	800b9f4 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800ba80:	f7ff ffc6 	bl	800ba10 <SVCCTL_InitCustomSvc>
  
  return;
 800ba84:	bf00      	nop
}
 800ba86:	bd80      	pop	{r7, pc}

0800ba88 <SVCCTL_RegisterCltHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterCltHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Client_Event_Handler )
{
 800ba88:	b480      	push	{r7}
 800ba8a:	b083      	sub	sp, #12
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
  SVCCTL_CltHandler.SVCCTL_CltHandlerTable[SVCCTL_CltHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Client_Event_Handler;
 800ba90:	4b09      	ldr	r3, [pc, #36]	; (800bab8 <SVCCTL_RegisterCltHandler+0x30>)
 800ba92:	791b      	ldrb	r3, [r3, #4]
 800ba94:	4619      	mov	r1, r3
 800ba96:	4a08      	ldr	r2, [pc, #32]	; (800bab8 <SVCCTL_RegisterCltHandler+0x30>)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif
  SVCCTL_CltHandler.NbreOfRegisteredHandler++;
 800ba9e:	4b06      	ldr	r3, [pc, #24]	; (800bab8 <SVCCTL_RegisterCltHandler+0x30>)
 800baa0:	791b      	ldrb	r3, [r3, #4]
 800baa2:	3301      	adds	r3, #1
 800baa4:	b2da      	uxtb	r2, r3
 800baa6:	4b04      	ldr	r3, [pc, #16]	; (800bab8 <SVCCTL_RegisterCltHandler+0x30>)
 800baa8:	711a      	strb	r2, [r3, #4]

  return;
 800baaa:	bf00      	nop
}
 800baac:	370c      	adds	r7, #12
 800baae:	46bd      	mov	sp, r7
 800bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab4:	4770      	bx	lr
 800bab6:	bf00      	nop
 800bab8:	200002ac 	.word	0x200002ac

0800babc <SVCCTL_UserEvtRx>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b086      	sub	sp, #24
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	3301      	adds	r3, #1
 800bac8:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800baca:	2300      	movs	r3, #0
 800bacc:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	781b      	ldrb	r3, [r3, #0]
 800bad2:	2bff      	cmp	r3, #255	; 0xff
 800bad4:	d000      	beq.n	800bad8 <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800bad6:	e03f      	b.n	800bb58 <SVCCTL_UserEvtRx+0x9c>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	3302      	adds	r3, #2
 800badc:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	881b      	ldrh	r3, [r3, #0]
 800bae2:	b29b      	uxth	r3, r3
 800bae4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bae8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800baec:	d000      	beq.n	800baf0 <SVCCTL_UserEvtRx+0x34>
          break;
 800baee:	e032      	b.n	800bb56 <SVCCTL_UserEvtRx+0x9a>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800baf0:	2300      	movs	r3, #0
 800baf2:	757b      	strb	r3, [r7, #21]
 800baf4:	e00d      	b.n	800bb12 <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800baf6:	7d7b      	ldrb	r3, [r7, #21]
 800baf8:	4a25      	ldr	r2, [pc, #148]	; (800bb90 <SVCCTL_UserEvtRx+0xd4>)
 800bafa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	4798      	blx	r3
 800bb02:	4603      	mov	r3, r0
 800bb04:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 800bb06:	7dfb      	ldrb	r3, [r7, #23]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d108      	bne.n	800bb1e <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800bb0c:	7d7b      	ldrb	r3, [r7, #21]
 800bb0e:	3301      	adds	r3, #1
 800bb10:	757b      	strb	r3, [r7, #21]
 800bb12:	4b1f      	ldr	r3, [pc, #124]	; (800bb90 <SVCCTL_UserEvtRx+0xd4>)
 800bb14:	7f1b      	ldrb	r3, [r3, #28]
 800bb16:	7d7a      	ldrb	r2, [r7, #21]
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d3ec      	bcc.n	800baf6 <SVCCTL_UserEvtRx+0x3a>
 800bb1c:	e000      	b.n	800bb20 <SVCCTL_UserEvtRx+0x64>
              break;
 800bb1e:	bf00      	nop
          event_notification_status = SVCCTL_EvtNotAck;
 800bb20:	2300      	movs	r3, #0
 800bb22:	75fb      	strb	r3, [r7, #23]
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 800bb24:	2300      	movs	r3, #0
 800bb26:	757b      	strb	r3, [r7, #21]
 800bb28:	e00d      	b.n	800bb46 <SVCCTL_UserEvtRx+0x8a>
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 800bb2a:	7d7b      	ldrb	r3, [r7, #21]
 800bb2c:	4a19      	ldr	r2, [pc, #100]	; (800bb94 <SVCCTL_UserEvtRx+0xd8>)
 800bb2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	4798      	blx	r3
 800bb36:	4603      	mov	r3, r0
 800bb38:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 800bb3a:	7dfb      	ldrb	r3, [r7, #23]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d108      	bne.n	800bb52 <SVCCTL_UserEvtRx+0x96>
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 800bb40:	7d7b      	ldrb	r3, [r7, #21]
 800bb42:	3301      	adds	r3, #1
 800bb44:	757b      	strb	r3, [r7, #21]
 800bb46:	4b13      	ldr	r3, [pc, #76]	; (800bb94 <SVCCTL_UserEvtRx+0xd8>)
 800bb48:	791b      	ldrb	r3, [r3, #4]
 800bb4a:	7d7a      	ldrb	r2, [r7, #21]
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	d3ec      	bcc.n	800bb2a <SVCCTL_UserEvtRx+0x6e>
          break;
 800bb50:	e000      	b.n	800bb54 <SVCCTL_UserEvtRx+0x98>
              break;
 800bb52:	bf00      	nop
          break;
 800bb54:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 800bb56:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800bb58:	7dfb      	ldrb	r3, [r7, #23]
 800bb5a:	2b01      	cmp	r3, #1
 800bb5c:	d009      	beq.n	800bb72 <SVCCTL_UserEvtRx+0xb6>
 800bb5e:	2b02      	cmp	r3, #2
 800bb60:	d00a      	beq.n	800bb78 <SVCCTL_UserEvtRx+0xbc>
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d10b      	bne.n	800bb7e <SVCCTL_UserEvtRx+0xc2>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f000 fdfa 	bl	800c760 <SVCCTL_App_Notification>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	75bb      	strb	r3, [r7, #22]
      break;
 800bb70:	e008      	b.n	800bb84 <SVCCTL_UserEvtRx+0xc8>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800bb72:	2301      	movs	r3, #1
 800bb74:	75bb      	strb	r3, [r7, #22]
      break;
 800bb76:	e005      	b.n	800bb84 <SVCCTL_UserEvtRx+0xc8>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	75bb      	strb	r3, [r7, #22]
      break;
 800bb7c:	e002      	b.n	800bb84 <SVCCTL_UserEvtRx+0xc8>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800bb7e:	2301      	movs	r3, #1
 800bb80:	75bb      	strb	r3, [r7, #22]
      break;
 800bb82:	bf00      	nop
  }

  return (return_status);
 800bb84:	7dbb      	ldrb	r3, [r7, #22]
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3718      	adds	r7, #24
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}
 800bb8e:	bf00      	nop
 800bb90:	2000028c 	.word	0x2000028c
 800bb94:	200002ac 	.word	0x200002ac

0800bb98 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b088      	sub	sp, #32
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800bba0:	f107 030c 	add.w	r3, r7, #12
 800bba4:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800bbac:	69fb      	ldr	r3, [r7, #28]
 800bbae:	2121      	movs	r1, #33	; 0x21
 800bbb0:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800bbb4:	f000 fa00 	bl	800bfb8 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800bbb8:	69fb      	ldr	r3, [r7, #28]
 800bbba:	330b      	adds	r3, #11
 800bbbc:	78db      	ldrb	r3, [r3, #3]
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3720      	adds	r7, #32
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
	...

0800bbc8 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b082      	sub	sp, #8
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	685b      	ldr	r3, [r3, #4]
 800bbd6:	4a08      	ldr	r2, [pc, #32]	; (800bbf8 <hci_init+0x30>)
 800bbd8:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800bbda:	4a08      	ldr	r2, [pc, #32]	; (800bbfc <hci_init+0x34>)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800bbe0:	4806      	ldr	r0, [pc, #24]	; (800bbfc <hci_init+0x34>)
 800bbe2:	f000 f96f 	bl	800bec4 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	4618      	mov	r0, r3
 800bbec:	f000 f8d0 	bl	800bd90 <TlInit>

  return;
 800bbf0:	bf00      	nop
}
 800bbf2:	3708      	adds	r7, #8
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}
 800bbf8:	20000480 	.word	0x20000480
 800bbfc:	20000458 	.word	0x20000458

0800bc00 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b084      	sub	sp, #16
 800bc04:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800bc06:	4820      	ldr	r0, [pc, #128]	; (800bc88 <hci_user_evt_proc+0x88>)
 800bc08:	f000 fc92 	bl	800c530 <LST_is_empty>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d128      	bne.n	800bc64 <hci_user_evt_proc+0x64>
 800bc12:	4b1e      	ldr	r3, [pc, #120]	; (800bc8c <hci_user_evt_proc+0x8c>)
 800bc14:	781b      	ldrb	r3, [r3, #0]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d024      	beq.n	800bc64 <hci_user_evt_proc+0x64>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800bc1a:	f107 030c 	add.w	r3, r7, #12
 800bc1e:	4619      	mov	r1, r3
 800bc20:	4819      	ldr	r0, [pc, #100]	; (800bc88 <hci_user_evt_proc+0x88>)
 800bc22:	f000 fd0c 	bl	800c63e <LST_remove_head>

    UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800bc26:	4b19      	ldr	r3, [pc, #100]	; (800bc8c <hci_user_evt_proc+0x8c>)
 800bc28:	2201      	movs	r2, #1
 800bc2a:	701a      	strb	r2, [r3, #0]

    if (hciContext.UserEvtRx != NULL)
 800bc2c:	4b18      	ldr	r3, [pc, #96]	; (800bc90 <hci_user_evt_proc+0x90>)
 800bc2e:	69db      	ldr	r3, [r3, #28]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d009      	beq.n	800bc48 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	60bb      	str	r3, [r7, #8]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800bc38:	4b15      	ldr	r3, [pc, #84]	; (800bc90 <hci_user_evt_proc+0x90>)
 800bc3a:	69db      	ldr	r3, [r3, #28]
 800bc3c:	1d3a      	adds	r2, r7, #4
 800bc3e:	4610      	mov	r0, r2
 800bc40:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800bc42:	793a      	ldrb	r2, [r7, #4]
 800bc44:	4b11      	ldr	r3, [pc, #68]	; (800bc8c <hci_user_evt_proc+0x8c>)
 800bc46:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800bc48:	4b10      	ldr	r3, [pc, #64]	; (800bc8c <hci_user_evt_proc+0x8c>)
 800bc4a:	781b      	ldrb	r3, [r3, #0]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d004      	beq.n	800bc5a <hci_user_evt_proc+0x5a>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	4618      	mov	r0, r3
 800bc54:	f000 fbca 	bl	800c3ec <TL_MM_EvtDone>
 800bc58:	e004      	b.n	800bc64 <hci_user_evt_proc+0x64>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	4619      	mov	r1, r3
 800bc5e:	480a      	ldr	r0, [pc, #40]	; (800bc88 <hci_user_evt_proc+0x88>)
 800bc60:	f000 fc86 	bl	800c570 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800bc64:	4808      	ldr	r0, [pc, #32]	; (800bc88 <hci_user_evt_proc+0x88>)
 800bc66:	f000 fc63 	bl	800c530 <LST_is_empty>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d107      	bne.n	800bc80 <hci_user_evt_proc+0x80>
 800bc70:	4b06      	ldr	r3, [pc, #24]	; (800bc8c <hci_user_evt_proc+0x8c>)
 800bc72:	781b      	ldrb	r3, [r3, #0]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d003      	beq.n	800bc80 <hci_user_evt_proc+0x80>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800bc78:	4803      	ldr	r0, [pc, #12]	; (800bc88 <hci_user_evt_proc+0x88>)
 800bc7a:	f001 f85b 	bl	800cd34 <hci_notify_asynch_evt>
  }


  return;
 800bc7e:	bf00      	nop
 800bc80:	bf00      	nop
}
 800bc82:	3710      	adds	r7, #16
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}
 800bc88:	200002b8 	.word	0x200002b8
 800bc8c:	200002c4 	.word	0x200002c4
 800bc90:	20000458 	.word	0x20000458

0800bc94 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b088      	sub	sp, #32
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
 800bc9c:	460b      	mov	r3, r1
 800bc9e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800bca0:	2000      	movs	r0, #0
 800bca2:	f000 f8cb 	bl	800be3c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800bca6:	2300      	movs	r3, #0
 800bca8:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	885b      	ldrh	r3, [r3, #2]
 800bcae:	b21b      	sxth	r3, r3
 800bcb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bcb4:	b21a      	sxth	r2, r3
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	881b      	ldrh	r3, [r3, #0]
 800bcba:	029b      	lsls	r3, r3, #10
 800bcbc:	b21b      	sxth	r3, r3
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	b21b      	sxth	r3, r3
 800bcc2:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	68db      	ldr	r3, [r3, #12]
 800bcc8:	b2d9      	uxtb	r1, r3
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	689a      	ldr	r2, [r3, #8]
 800bcce:	8bbb      	ldrh	r3, [r7, #28]
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f000 f88d 	bl	800bdf0 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800bcd6:	e04e      	b.n	800bd76 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800bcd8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800bcdc:	f001 f841 	bl	800cd62 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800bce0:	e043      	b.n	800bd6a <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800bce2:	f107 030c 	add.w	r3, r7, #12
 800bce6:	4619      	mov	r1, r3
 800bce8:	4828      	ldr	r0, [pc, #160]	; (800bd8c <hci_send_req+0xf8>)
 800bcea:	f000 fca8 	bl	800c63e <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	7a5b      	ldrb	r3, [r3, #9]
 800bcf2:	2b0f      	cmp	r3, #15
 800bcf4:	d114      	bne.n	800bd20 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	330b      	adds	r3, #11
 800bcfa:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	885b      	ldrh	r3, [r3, #2]
 800bd00:	b29b      	uxth	r3, r3
 800bd02:	8bba      	ldrh	r2, [r7, #28]
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d104      	bne.n	800bd12 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	691b      	ldr	r3, [r3, #16]
 800bd0c:	693a      	ldr	r2, [r7, #16]
 800bd0e:	7812      	ldrb	r2, [r2, #0]
 800bd10:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	785b      	ldrb	r3, [r3, #1]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d027      	beq.n	800bd6a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	77fb      	strb	r3, [r7, #31]
 800bd1e:	e024      	b.n	800bd6a <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	330b      	adds	r3, #11
 800bd24:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800bd26:	69bb      	ldr	r3, [r7, #24]
 800bd28:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800bd2c:	b29b      	uxth	r3, r3
 800bd2e:	8bba      	ldrh	r2, [r7, #28]
 800bd30:	429a      	cmp	r2, r3
 800bd32:	d114      	bne.n	800bd5e <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	7a9b      	ldrb	r3, [r3, #10]
 800bd38:	3b03      	subs	r3, #3
 800bd3a:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	695a      	ldr	r2, [r3, #20]
 800bd40:	7dfb      	ldrb	r3, [r7, #23]
 800bd42:	429a      	cmp	r2, r3
 800bd44:	bfa8      	it	ge
 800bd46:	461a      	movge	r2, r3
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6918      	ldr	r0, [r3, #16]
 800bd50:	69bb      	ldr	r3, [r7, #24]
 800bd52:	1cd9      	adds	r1, r3, #3
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	695b      	ldr	r3, [r3, #20]
 800bd58:	461a      	mov	r2, r3
 800bd5a:	f002 fb63 	bl	800e424 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800bd5e:	69bb      	ldr	r3, [r7, #24]
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d001      	beq.n	800bd6a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800bd66:	2301      	movs	r3, #1
 800bd68:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800bd6a:	4808      	ldr	r0, [pc, #32]	; (800bd8c <hci_send_req+0xf8>)
 800bd6c:	f000 fbe0 	bl	800c530 <LST_is_empty>
 800bd70:	4603      	mov	r3, r0
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d0b5      	beq.n	800bce2 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800bd76:	7ffb      	ldrb	r3, [r7, #31]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d0ad      	beq.n	800bcd8 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800bd7c:	2001      	movs	r0, #1
 800bd7e:	f000 f85d 	bl	800be3c <NotifyCmdStatus>

  return 0;
 800bd82:	2300      	movs	r3, #0
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3720      	adds	r7, #32
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}
 800bd8c:	20000478 	.word	0x20000478

0800bd90 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b086      	sub	sp, #24
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800bd98:	480f      	ldr	r0, [pc, #60]	; (800bdd8 <TlInit+0x48>)
 800bd9a:	f000 fbb9 	bl	800c510 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800bd9e:	4a0f      	ldr	r2, [pc, #60]	; (800bddc <TlInit+0x4c>)
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800bda4:	480e      	ldr	r0, [pc, #56]	; (800bde0 <TlInit+0x50>)
 800bda6:	f000 fbb3 	bl	800c510 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800bdaa:	4b0e      	ldr	r3, [pc, #56]	; (800bde4 <TlInit+0x54>)
 800bdac:	2201      	movs	r2, #1
 800bdae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800bdb0:	4b0d      	ldr	r3, [pc, #52]	; (800bde8 <TlInit+0x58>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d00a      	beq.n	800bdce <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800bdbc:	4b0b      	ldr	r3, [pc, #44]	; (800bdec <TlInit+0x5c>)
 800bdbe:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800bdc0:	4b09      	ldr	r3, [pc, #36]	; (800bde8 <TlInit+0x58>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	f107 0208 	add.w	r2, r7, #8
 800bdc8:	4610      	mov	r0, r2
 800bdca:	4798      	blx	r3
  }

  return;
 800bdcc:	bf00      	nop
 800bdce:	bf00      	nop
}
 800bdd0:	3718      	adds	r7, #24
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	20000478 	.word	0x20000478
 800bddc:	200002c0 	.word	0x200002c0
 800bde0:	200002b8 	.word	0x200002b8
 800bde4:	200002c4 	.word	0x200002c4
 800bde8:	20000458 	.word	0x20000458
 800bdec:	0800be7d 	.word	0x0800be7d

0800bdf0 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b082      	sub	sp, #8
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	603a      	str	r2, [r7, #0]
 800bdfa:	80fb      	strh	r3, [r7, #6]
 800bdfc:	460b      	mov	r3, r1
 800bdfe:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800be00:	4b0c      	ldr	r3, [pc, #48]	; (800be34 <SendCmd+0x44>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	88fa      	ldrh	r2, [r7, #6]
 800be06:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800be0a:	4b0a      	ldr	r3, [pc, #40]	; (800be34 <SendCmd+0x44>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	797a      	ldrb	r2, [r7, #5]
 800be10:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800be12:	4b08      	ldr	r3, [pc, #32]	; (800be34 <SendCmd+0x44>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	330c      	adds	r3, #12
 800be18:	797a      	ldrb	r2, [r7, #5]
 800be1a:	6839      	ldr	r1, [r7, #0]
 800be1c:	4618      	mov	r0, r3
 800be1e:	f002 fb01 	bl	800e424 <memcpy>

  hciContext.io.Send(0,0);
 800be22:	4b05      	ldr	r3, [pc, #20]	; (800be38 <SendCmd+0x48>)
 800be24:	691b      	ldr	r3, [r3, #16]
 800be26:	2100      	movs	r1, #0
 800be28:	2000      	movs	r0, #0
 800be2a:	4798      	blx	r3

  return;
 800be2c:	bf00      	nop
}
 800be2e:	3708      	adds	r7, #8
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}
 800be34:	200002c0 	.word	0x200002c0
 800be38:	20000458 	.word	0x20000458

0800be3c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b082      	sub	sp, #8
 800be40:	af00      	add	r7, sp, #0
 800be42:	4603      	mov	r3, r0
 800be44:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800be46:	79fb      	ldrb	r3, [r7, #7]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d108      	bne.n	800be5e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800be4c:	4b0a      	ldr	r3, [pc, #40]	; (800be78 <NotifyCmdStatus+0x3c>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d00d      	beq.n	800be70 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800be54:	4b08      	ldr	r3, [pc, #32]	; (800be78 <NotifyCmdStatus+0x3c>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	2000      	movs	r0, #0
 800be5a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800be5c:	e008      	b.n	800be70 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800be5e:	4b06      	ldr	r3, [pc, #24]	; (800be78 <NotifyCmdStatus+0x3c>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d004      	beq.n	800be70 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800be66:	4b04      	ldr	r3, [pc, #16]	; (800be78 <NotifyCmdStatus+0x3c>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	2001      	movs	r0, #1
 800be6c:	4798      	blx	r3
  return;
 800be6e:	bf00      	nop
 800be70:	bf00      	nop
}
 800be72:	3708      	adds	r7, #8
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}
 800be78:	20000480 	.word	0x20000480

0800be7c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b082      	sub	sp, #8
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	7a5b      	ldrb	r3, [r3, #9]
 800be88:	2b0f      	cmp	r3, #15
 800be8a:	d003      	beq.n	800be94 <TlEvtReceived+0x18>
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	7a5b      	ldrb	r3, [r3, #9]
 800be90:	2b0e      	cmp	r3, #14
 800be92:	d107      	bne.n	800bea4 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800be94:	6879      	ldr	r1, [r7, #4]
 800be96:	4809      	ldr	r0, [pc, #36]	; (800bebc <TlEvtReceived+0x40>)
 800be98:	f000 fb8e 	bl	800c5b8 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800be9c:	2000      	movs	r0, #0
 800be9e:	f000 ff55 	bl	800cd4c <hci_cmd_resp_release>
 800bea2:	e006      	b.n	800beb2 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800bea4:	6879      	ldr	r1, [r7, #4]
 800bea6:	4806      	ldr	r0, [pc, #24]	; (800bec0 <TlEvtReceived+0x44>)
 800bea8:	f000 fb86 	bl	800c5b8 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800beac:	4804      	ldr	r0, [pc, #16]	; (800bec0 <TlEvtReceived+0x44>)
 800beae:	f000 ff41 	bl	800cd34 <hci_notify_asynch_evt>
  }

  return;
 800beb2:	bf00      	nop
}
 800beb4:	3708      	adds	r7, #8
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	bf00      	nop
 800bebc:	20000478 	.word	0x20000478
 800bec0:	200002b8 	.word	0x200002b8

0800bec4 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800bec4:	b480      	push	{r7}
 800bec6:	b083      	sub	sp, #12
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	4a05      	ldr	r2, [pc, #20]	; (800bee4 <hci_register_io_bus+0x20>)
 800bed0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	4a04      	ldr	r2, [pc, #16]	; (800bee8 <hci_register_io_bus+0x24>)
 800bed6:	611a      	str	r2, [r3, #16]

  return;
 800bed8:	bf00      	nop
}
 800beda:	370c      	adds	r7, #12
 800bedc:	46bd      	mov	sp, r7
 800bede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee2:	4770      	bx	lr
 800bee4:	0800c1c5 	.word	0x0800c1c5
 800bee8:	0800c22d 	.word	0x0800c22d

0800beec <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b082      	sub	sp, #8
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	685b      	ldr	r3, [r3, #4]
 800befa:	4a08      	ldr	r2, [pc, #32]	; (800bf1c <shci_init+0x30>)
 800befc:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800befe:	4a08      	ldr	r2, [pc, #32]	; (800bf20 <shci_init+0x34>)
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800bf04:	4806      	ldr	r0, [pc, #24]	; (800bf20 <shci_init+0x34>)
 800bf06:	f000 f90d 	bl	800c124 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f000 f890 	bl	800c034 <TlInit>

  return;
 800bf14:	bf00      	nop
}
 800bf16:	3708      	adds	r7, #8
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}
 800bf1c:	200004a4 	.word	0x200004a4
 800bf20:	20000484 	.word	0x20000484

0800bf24 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b084      	sub	sp, #16
 800bf28:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800bf2a:	4820      	ldr	r0, [pc, #128]	; (800bfac <shci_user_evt_proc+0x88>)
 800bf2c:	f000 fb00 	bl	800c530 <LST_is_empty>
 800bf30:	4603      	mov	r3, r0
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d128      	bne.n	800bf88 <shci_user_evt_proc+0x64>
 800bf36:	4b1e      	ldr	r3, [pc, #120]	; (800bfb0 <shci_user_evt_proc+0x8c>)
 800bf38:	781b      	ldrb	r3, [r3, #0]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d024      	beq.n	800bf88 <shci_user_evt_proc+0x64>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800bf3e:	f107 030c 	add.w	r3, r7, #12
 800bf42:	4619      	mov	r1, r3
 800bf44:	4819      	ldr	r0, [pc, #100]	; (800bfac <shci_user_evt_proc+0x88>)
 800bf46:	f000 fb7a 	bl	800c63e <LST_remove_head>

    SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800bf4a:	4b19      	ldr	r3, [pc, #100]	; (800bfb0 <shci_user_evt_proc+0x8c>)
 800bf4c:	2201      	movs	r2, #1
 800bf4e:	701a      	strb	r2, [r3, #0]

    if (shciContext.UserEvtRx != NULL)
 800bf50:	4b18      	ldr	r3, [pc, #96]	; (800bfb4 <shci_user_evt_proc+0x90>)
 800bf52:	69db      	ldr	r3, [r3, #28]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d009      	beq.n	800bf6c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	60bb      	str	r3, [r7, #8]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800bf5c:	4b15      	ldr	r3, [pc, #84]	; (800bfb4 <shci_user_evt_proc+0x90>)
 800bf5e:	69db      	ldr	r3, [r3, #28]
 800bf60:	1d3a      	adds	r2, r7, #4
 800bf62:	4610      	mov	r0, r2
 800bf64:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800bf66:	793a      	ldrb	r2, [r7, #4]
 800bf68:	4b11      	ldr	r3, [pc, #68]	; (800bfb0 <shci_user_evt_proc+0x8c>)
 800bf6a:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800bf6c:	4b10      	ldr	r3, [pc, #64]	; (800bfb0 <shci_user_evt_proc+0x8c>)
 800bf6e:	781b      	ldrb	r3, [r3, #0]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d004      	beq.n	800bf7e <shci_user_evt_proc+0x5a>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	4618      	mov	r0, r3
 800bf78:	f000 fa38 	bl	800c3ec <TL_MM_EvtDone>
 800bf7c:	e004      	b.n	800bf88 <shci_user_evt_proc+0x64>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	4619      	mov	r1, r3
 800bf82:	480a      	ldr	r0, [pc, #40]	; (800bfac <shci_user_evt_proc+0x88>)
 800bf84:	f000 faf4 	bl	800c570 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800bf88:	4808      	ldr	r0, [pc, #32]	; (800bfac <shci_user_evt_proc+0x88>)
 800bf8a:	f000 fad1 	bl	800c530 <LST_is_empty>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d107      	bne.n	800bfa4 <shci_user_evt_proc+0x80>
 800bf94:	4b06      	ldr	r3, [pc, #24]	; (800bfb0 <shci_user_evt_proc+0x8c>)
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d003      	beq.n	800bfa4 <shci_user_evt_proc+0x80>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800bf9c:	4803      	ldr	r0, [pc, #12]	; (800bfac <shci_user_evt_proc+0x88>)
 800bf9e:	f7f4 fb5b 	bl	8000658 <shci_notify_asynch_evt>
  }


  return;
 800bfa2:	bf00      	nop
 800bfa4:	bf00      	nop
}
 800bfa6:	3710      	adds	r7, #16
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}
 800bfac:	200002c8 	.word	0x200002c8
 800bfb0:	200002d8 	.word	0x200002d8
 800bfb4:	20000484 	.word	0x20000484

0800bfb8 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b084      	sub	sp, #16
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	60ba      	str	r2, [r7, #8]
 800bfc0:	607b      	str	r3, [r7, #4]
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	81fb      	strh	r3, [r7, #14]
 800bfc6:	460b      	mov	r3, r1
 800bfc8:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800bfca:	2000      	movs	r0, #0
 800bfcc:	f000 f864 	bl	800c098 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800bfd0:	4b16      	ldr	r3, [pc, #88]	; (800c02c <shci_send+0x74>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	89fa      	ldrh	r2, [r7, #14]
 800bfd6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800bfda:	4b14      	ldr	r3, [pc, #80]	; (800c02c <shci_send+0x74>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	7b7a      	ldrb	r2, [r7, #13]
 800bfe0:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800bfe2:	4b12      	ldr	r3, [pc, #72]	; (800c02c <shci_send+0x74>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	330c      	adds	r3, #12
 800bfe8:	7b7a      	ldrb	r2, [r7, #13]
 800bfea:	68b9      	ldr	r1, [r7, #8]
 800bfec:	4618      	mov	r0, r3
 800bfee:	f002 fa19 	bl	800e424 <memcpy>

  shciContext.io.Send(0,0);
 800bff2:	4b0f      	ldr	r3, [pc, #60]	; (800c030 <shci_send+0x78>)
 800bff4:	691b      	ldr	r3, [r3, #16]
 800bff6:	2100      	movs	r1, #0
 800bff8:	2000      	movs	r0, #0
 800bffa:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800bffc:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800c000:	f7f4 fb41 	bl	8000686 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f103 0008 	add.w	r0, r3, #8
 800c00a:	4b08      	ldr	r3, [pc, #32]	; (800c02c <shci_send+0x74>)
 800c00c:	6819      	ldr	r1, [r3, #0]
 800c00e:	4b07      	ldr	r3, [pc, #28]	; (800c02c <shci_send+0x74>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	789b      	ldrb	r3, [r3, #2]
 800c014:	3303      	adds	r3, #3
 800c016:	461a      	mov	r2, r3
 800c018:	f002 fa04 	bl	800e424 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c01c:	2001      	movs	r0, #1
 800c01e:	f000 f83b 	bl	800c098 <Cmd_SetStatus>

  return;
 800c022:	bf00      	nop
}
 800c024:	3710      	adds	r7, #16
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}
 800c02a:	bf00      	nop
 800c02c:	200002d4 	.word	0x200002d4
 800c030:	20000484 	.word	0x20000484

0800c034 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b086      	sub	sp, #24
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800c03c:	4a10      	ldr	r2, [pc, #64]	; (800c080 <TlInit+0x4c>)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800c042:	4810      	ldr	r0, [pc, #64]	; (800c084 <TlInit+0x50>)
 800c044:	f000 fa64 	bl	800c510 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c048:	2001      	movs	r0, #1
 800c04a:	f000 f825 	bl	800c098 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c04e:	4b0e      	ldr	r3, [pc, #56]	; (800c088 <TlInit+0x54>)
 800c050:	2201      	movs	r2, #1
 800c052:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800c054:	4b0d      	ldr	r3, [pc, #52]	; (800c08c <TlInit+0x58>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d00c      	beq.n	800c076 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800c060:	4b0b      	ldr	r3, [pc, #44]	; (800c090 <TlInit+0x5c>)
 800c062:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800c064:	4b0b      	ldr	r3, [pc, #44]	; (800c094 <TlInit+0x60>)
 800c066:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800c068:	4b08      	ldr	r3, [pc, #32]	; (800c08c <TlInit+0x58>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f107 020c 	add.w	r2, r7, #12
 800c070:	4610      	mov	r0, r2
 800c072:	4798      	blx	r3
  }

  return;
 800c074:	bf00      	nop
 800c076:	bf00      	nop
}
 800c078:	3718      	adds	r7, #24
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}
 800c07e:	bf00      	nop
 800c080:	200002d4 	.word	0x200002d4
 800c084:	200002c8 	.word	0x200002c8
 800c088:	200002d8 	.word	0x200002d8
 800c08c:	20000484 	.word	0x20000484
 800c090:	0800c0e9 	.word	0x0800c0e9
 800c094:	0800c101 	.word	0x0800c101

0800c098 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b082      	sub	sp, #8
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	4603      	mov	r3, r0
 800c0a0:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800c0a2:	79fb      	ldrb	r3, [r7, #7]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d10b      	bne.n	800c0c0 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800c0a8:	4b0d      	ldr	r3, [pc, #52]	; (800c0e0 <Cmd_SetStatus+0x48>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d003      	beq.n	800c0b8 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800c0b0:	4b0b      	ldr	r3, [pc, #44]	; (800c0e0 <Cmd_SetStatus+0x48>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	2000      	movs	r0, #0
 800c0b6:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800c0b8:	4b0a      	ldr	r3, [pc, #40]	; (800c0e4 <Cmd_SetStatus+0x4c>)
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800c0be:	e00b      	b.n	800c0d8 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800c0c0:	4b08      	ldr	r3, [pc, #32]	; (800c0e4 <Cmd_SetStatus+0x4c>)
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800c0c6:	4b06      	ldr	r3, [pc, #24]	; (800c0e0 <Cmd_SetStatus+0x48>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d004      	beq.n	800c0d8 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800c0ce:	4b04      	ldr	r3, [pc, #16]	; (800c0e0 <Cmd_SetStatus+0x48>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	2001      	movs	r0, #1
 800c0d4:	4798      	blx	r3
  return;
 800c0d6:	bf00      	nop
 800c0d8:	bf00      	nop
}
 800c0da:	3708      	adds	r7, #8
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}
 800c0e0:	200004a4 	.word	0x200004a4
 800c0e4:	200002d0 	.word	0x200002d0

0800c0e8 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b082      	sub	sp, #8
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800c0f0:	2000      	movs	r0, #0
 800c0f2:	f7f4 fabd 	bl	8000670 <shci_cmd_resp_release>

  return;
 800c0f6:	bf00      	nop
}
 800c0f8:	3708      	adds	r7, #8
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}
	...

0800c100 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b082      	sub	sp, #8
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800c108:	6879      	ldr	r1, [r7, #4]
 800c10a:	4805      	ldr	r0, [pc, #20]	; (800c120 <TlUserEvtReceived+0x20>)
 800c10c:	f000 fa54 	bl	800c5b8 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800c110:	4803      	ldr	r0, [pc, #12]	; (800c120 <TlUserEvtReceived+0x20>)
 800c112:	f7f4 faa1 	bl	8000658 <shci_notify_asynch_evt>

  return;
 800c116:	bf00      	nop
}
 800c118:	3708      	adds	r7, #8
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}
 800c11e:	bf00      	nop
 800c120:	200002c8 	.word	0x200002c8

0800c124 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800c124:	b480      	push	{r7}
 800c126:	b083      	sub	sp, #12
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	4a05      	ldr	r2, [pc, #20]	; (800c144 <shci_register_io_bus+0x20>)
 800c130:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	4a04      	ldr	r2, [pc, #16]	; (800c148 <shci_register_io_bus+0x24>)
 800c136:	611a      	str	r2, [r3, #16]

  return;
 800c138:	bf00      	nop
}
 800c13a:	370c      	adds	r7, #12
 800c13c:	46bd      	mov	sp, r7
 800c13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c142:	4770      	bx	lr
 800c144:	0800c2a1 	.word	0x0800c2a1
 800c148:	0800c2f5 	.word	0x0800c2f5

0800c14c <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800c150:	f001 fb4e 	bl	800d7f0 <HW_IPCC_Enable>

  return;
 800c154:	bf00      	nop
}
 800c156:	bd80      	pop	{r7, pc}

0800c158 <TL_Init>:


void TL_Init( void )
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800c15c:	4b0f      	ldr	r3, [pc, #60]	; (800c19c <TL_Init+0x44>)
 800c15e:	4a10      	ldr	r2, [pc, #64]	; (800c1a0 <TL_Init+0x48>)
 800c160:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800c162:	4b0e      	ldr	r3, [pc, #56]	; (800c19c <TL_Init+0x44>)
 800c164:	4a0f      	ldr	r2, [pc, #60]	; (800c1a4 <TL_Init+0x4c>)
 800c166:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800c168:	4b0c      	ldr	r3, [pc, #48]	; (800c19c <TL_Init+0x44>)
 800c16a:	4a0f      	ldr	r2, [pc, #60]	; (800c1a8 <TL_Init+0x50>)
 800c16c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800c16e:	4b0b      	ldr	r3, [pc, #44]	; (800c19c <TL_Init+0x44>)
 800c170:	4a0e      	ldr	r2, [pc, #56]	; (800c1ac <TL_Init+0x54>)
 800c172:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_sys_table = &TL_SysTable;
 800c174:	4b09      	ldr	r3, [pc, #36]	; (800c19c <TL_Init+0x44>)
 800c176:	4a0e      	ldr	r2, [pc, #56]	; (800c1b0 <TL_Init+0x58>)
 800c178:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800c17a:	4b08      	ldr	r3, [pc, #32]	; (800c19c <TL_Init+0x44>)
 800c17c:	4a0d      	ldr	r2, [pc, #52]	; (800c1b4 <TL_Init+0x5c>)
 800c17e:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800c180:	4b06      	ldr	r3, [pc, #24]	; (800c19c <TL_Init+0x44>)
 800c182:	4a0d      	ldr	r2, [pc, #52]	; (800c1b8 <TL_Init+0x60>)
 800c184:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800c186:	4b05      	ldr	r3, [pc, #20]	; (800c19c <TL_Init+0x44>)
 800c188:	4a0c      	ldr	r2, [pc, #48]	; (800c1bc <TL_Init+0x64>)
 800c18a:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800c18c:	4b03      	ldr	r3, [pc, #12]	; (800c19c <TL_Init+0x44>)
 800c18e:	4a0c      	ldr	r2, [pc, #48]	; (800c1c0 <TL_Init+0x68>)
 800c190:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800c192:	f001 fb35 	bl	800d800 <HW_IPCC_Init>

  return;
 800c196:	bf00      	nop
}
 800c198:	bd80      	pop	{r7, pc}
 800c19a:	bf00      	nop
 800c19c:	20030000 	.word	0x20030000
 800c1a0:	20030024 	.word	0x20030024
 800c1a4:	20030044 	.word	0x20030044
 800c1a8:	20030054 	.word	0x20030054
 800c1ac:	20030060 	.word	0x20030060
 800c1b0:	20030068 	.word	0x20030068
 800c1b4:	20030070 	.word	0x20030070
 800c1b8:	2003008c 	.word	0x2003008c
 800c1bc:	20030090 	.word	0x20030090
 800c1c0:	2003009c 	.word	0x2003009c

0800c1c4 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b084      	sub	sp, #16
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800c1d0:	4811      	ldr	r0, [pc, #68]	; (800c218 <TL_BLE_Init+0x54>)
 800c1d2:	f000 f99d 	bl	800c510 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800c1d6:	4b11      	ldr	r3, [pc, #68]	; (800c21c <TL_BLE_Init+0x58>)
 800c1d8:	685b      	ldr	r3, [r3, #4]
 800c1da:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	689a      	ldr	r2, [r3, #8]
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	68da      	ldr	r2, [r3, #12]
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	4a0c      	ldr	r2, [pc, #48]	; (800c220 <TL_BLE_Init+0x5c>)
 800c1f0:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	4a08      	ldr	r2, [pc, #32]	; (800c218 <TL_BLE_Init+0x54>)
 800c1f6:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800c1f8:	f001 fb18 	bl	800d82c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	4a08      	ldr	r2, [pc, #32]	; (800c224 <TL_BLE_Init+0x60>)
 800c202:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	685b      	ldr	r3, [r3, #4]
 800c208:	4a07      	ldr	r2, [pc, #28]	; (800c228 <TL_BLE_Init+0x64>)
 800c20a:	6013      	str	r3, [r2, #0]

  return 0;
 800c20c:	2300      	movs	r3, #0
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3710      	adds	r7, #16
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
 800c216:	bf00      	nop
 800c218:	20030a34 	.word	0x20030a34
 800c21c:	20030000 	.word	0x20030000
 800c220:	20030a24 	.word	0x20030a24
 800c224:	200004b0 	.word	0x200004b0
 800c228:	200004b4 	.word	0x200004b4

0800c22c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b082      	sub	sp, #8
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
 800c234:	460b      	mov	r3, r1
 800c236:	807b      	strh	r3, [r7, #2]
  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800c238:	4b05      	ldr	r3, [pc, #20]	; (800c250 <TL_BLE_SendCmd+0x24>)
 800c23a:	685b      	ldr	r3, [r3, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	2201      	movs	r2, #1
 800c240:	721a      	strb	r2, [r3, #8]

  HW_IPCC_BLE_SendCmd();
 800c242:	f001 fafd 	bl	800d840 <HW_IPCC_BLE_SendCmd>

  return 0;
 800c246:	2300      	movs	r3, #0
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3708      	adds	r7, #8
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}
 800c250:	20030000 	.word	0x20030000

0800c254 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b082      	sub	sp, #8
 800c258:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800c25a:	e009      	b.n	800c270 <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800c25c:	1d3b      	adds	r3, r7, #4
 800c25e:	4619      	mov	r1, r3
 800c260:	4808      	ldr	r0, [pc, #32]	; (800c284 <HW_IPCC_BLE_RxEvtNot+0x30>)
 800c262:	f000 f9ec 	bl	800c63e <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 800c266:	4b08      	ldr	r3, [pc, #32]	; (800c288 <HW_IPCC_BLE_RxEvtNot+0x34>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	687a      	ldr	r2, [r7, #4]
 800c26c:	4610      	mov	r0, r2
 800c26e:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800c270:	4804      	ldr	r0, [pc, #16]	; (800c284 <HW_IPCC_BLE_RxEvtNot+0x30>)
 800c272:	f000 f95d 	bl	800c530 <LST_is_empty>
 800c276:	4603      	mov	r3, r0
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d0ef      	beq.n	800c25c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800c27c:	bf00      	nop
}
 800c27e:	3708      	adds	r7, #8
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}
 800c284:	20030a34 	.word	0x20030a34
 800c288:	200004b0 	.word	0x200004b0

0800c28c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800c290:	4b02      	ldr	r3, [pc, #8]	; (800c29c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	4798      	blx	r3

  return;
 800c296:	bf00      	nop
}
 800c298:	bd80      	pop	{r7, pc}
 800c29a:	bf00      	nop
 800c29c:	200004b4 	.word	0x200004b4

0800c2a0 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b084      	sub	sp, #16
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800c2ac:	480d      	ldr	r0, [pc, #52]	; (800c2e4 <TL_SYS_Init+0x44>)
 800c2ae:	f000 f92f 	bl	800c510 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800c2b2:	4b0d      	ldr	r3, [pc, #52]	; (800c2e8 <TL_SYS_Init+0x48>)
 800c2b4:	68db      	ldr	r3, [r3, #12]
 800c2b6:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	689a      	ldr	r2, [r3, #8]
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	4a08      	ldr	r2, [pc, #32]	; (800c2e4 <TL_SYS_Init+0x44>)
 800c2c4:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800c2c6:	f001 fadd 	bl	800d884 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	4a07      	ldr	r2, [pc, #28]	; (800c2ec <TL_SYS_Init+0x4c>)
 800c2d0:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	685b      	ldr	r3, [r3, #4]
 800c2d6:	4a06      	ldr	r2, [pc, #24]	; (800c2f0 <TL_SYS_Init+0x50>)
 800c2d8:	6013      	str	r3, [r2, #0]

  return 0;
 800c2da:	2300      	movs	r3, #0
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3710      	adds	r7, #16
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}
 800c2e4:	20030a3c 	.word	0x20030a3c
 800c2e8:	20030000 	.word	0x20030000
 800c2ec:	200004b8 	.word	0x200004b8
 800c2f0:	200004bc 	.word	0x200004bc

0800c2f4 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b082      	sub	sp, #8
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
 800c2fc:	460b      	mov	r3, r1
 800c2fe:	807b      	strh	r3, [r7, #2]
  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800c300:	4b05      	ldr	r3, [pc, #20]	; (800c318 <TL_SYS_SendCmd+0x24>)
 800c302:	68db      	ldr	r3, [r3, #12]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	2210      	movs	r2, #16
 800c308:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 800c30a:	f001 fac5 	bl	800d898 <HW_IPCC_SYS_SendCmd>

  return 0;
 800c30e:	2300      	movs	r3, #0
}
 800c310:	4618      	mov	r0, r3
 800c312:	3708      	adds	r7, #8
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}
 800c318:	20030000 	.word	0x20030000

0800c31c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c320:	4b04      	ldr	r3, [pc, #16]	; (800c334 <HW_IPCC_SYS_CmdEvtNot+0x18>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	4a04      	ldr	r2, [pc, #16]	; (800c338 <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 800c326:	68d2      	ldr	r2, [r2, #12]
 800c328:	6812      	ldr	r2, [r2, #0]
 800c32a:	4610      	mov	r0, r2
 800c32c:	4798      	blx	r3

  return;
 800c32e:	bf00      	nop
}
 800c330:	bd80      	pop	{r7, pc}
 800c332:	bf00      	nop
 800c334:	200004b8 	.word	0x200004b8
 800c338:	20030000 	.word	0x20030000

0800c33c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b082      	sub	sp, #8
 800c340:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c342:	e009      	b.n	800c358 <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800c344:	1d3b      	adds	r3, r7, #4
 800c346:	4619      	mov	r1, r3
 800c348:	4808      	ldr	r0, [pc, #32]	; (800c36c <HW_IPCC_SYS_EvtNot+0x30>)
 800c34a:	f000 f978 	bl	800c63e <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 800c34e:	4b08      	ldr	r3, [pc, #32]	; (800c370 <HW_IPCC_SYS_EvtNot+0x34>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	4610      	mov	r0, r2
 800c356:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c358:	4804      	ldr	r0, [pc, #16]	; (800c36c <HW_IPCC_SYS_EvtNot+0x30>)
 800c35a:	f000 f8e9 	bl	800c530 <LST_is_empty>
 800c35e:	4603      	mov	r3, r0
 800c360:	2b00      	cmp	r3, #0
 800c362:	d0ef      	beq.n	800c344 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800c364:	bf00      	nop
}
 800c366:	3708      	adds	r7, #8
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}
 800c36c:	20030a3c 	.word	0x20030a3c
 800c370:	200004bc 	.word	0x200004bc

0800c374 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b082      	sub	sp, #8
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800c37c:	4817      	ldr	r0, [pc, #92]	; (800c3dc <TL_MM_Init+0x68>)
 800c37e:	f000 f8c7 	bl	800c510 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800c382:	4817      	ldr	r0, [pc, #92]	; (800c3e0 <TL_MM_Init+0x6c>)
 800c384:	f000 f8c4 	bl	800c510 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800c388:	4b16      	ldr	r3, [pc, #88]	; (800c3e4 <TL_MM_Init+0x70>)
 800c38a:	691b      	ldr	r3, [r3, #16]
 800c38c:	4a16      	ldr	r2, [pc, #88]	; (800c3e8 <TL_MM_Init+0x74>)
 800c38e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800c390:	4b15      	ldr	r3, [pc, #84]	; (800c3e8 <TL_MM_Init+0x74>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	687a      	ldr	r2, [r7, #4]
 800c396:	6892      	ldr	r2, [r2, #8]
 800c398:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800c39a:	4b13      	ldr	r3, [pc, #76]	; (800c3e8 <TL_MM_Init+0x74>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	687a      	ldr	r2, [r7, #4]
 800c3a0:	68d2      	ldr	r2, [r2, #12]
 800c3a2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800c3a4:	4b10      	ldr	r3, [pc, #64]	; (800c3e8 <TL_MM_Init+0x74>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	4a0c      	ldr	r2, [pc, #48]	; (800c3dc <TL_MM_Init+0x68>)
 800c3aa:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800c3ac:	4b0e      	ldr	r3, [pc, #56]	; (800c3e8 <TL_MM_Init+0x74>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	687a      	ldr	r2, [r7, #4]
 800c3b2:	6812      	ldr	r2, [r2, #0]
 800c3b4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800c3b6:	4b0c      	ldr	r3, [pc, #48]	; (800c3e8 <TL_MM_Init+0x74>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	687a      	ldr	r2, [r7, #4]
 800c3bc:	6852      	ldr	r2, [r2, #4]
 800c3be:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800c3c0:	4b09      	ldr	r3, [pc, #36]	; (800c3e8 <TL_MM_Init+0x74>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	687a      	ldr	r2, [r7, #4]
 800c3c6:	6912      	ldr	r2, [r2, #16]
 800c3c8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800c3ca:	4b07      	ldr	r3, [pc, #28]	; (800c3e8 <TL_MM_Init+0x74>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	687a      	ldr	r2, [r7, #4]
 800c3d0:	6952      	ldr	r2, [r2, #20]
 800c3d2:	619a      	str	r2, [r3, #24]

  return;
 800c3d4:	bf00      	nop
}
 800c3d6:	3708      	adds	r7, #8
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}
 800c3dc:	200300a8 	.word	0x200300a8
 800c3e0:	200004a8 	.word	0x200004a8
 800c3e4:	20030000 	.word	0x20030000
 800c3e8:	200004c0 	.word	0x200004c0

0800c3ec <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b082      	sub	sp, #8
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800c3f4:	6879      	ldr	r1, [r7, #4]
 800c3f6:	4805      	ldr	r0, [pc, #20]	; (800c40c <TL_MM_EvtDone+0x20>)
 800c3f8:	f000 f8de 	bl	800c5b8 <LST_insert_tail>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800c3fc:	4804      	ldr	r0, [pc, #16]	; (800c410 <TL_MM_EvtDone+0x24>)
 800c3fe:	f001 fa71 	bl	800d8e4 <HW_IPCC_MM_SendFreeBuf>

  return;
 800c402:	bf00      	nop
}
 800c404:	3708      	adds	r7, #8
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}
 800c40a:	bf00      	nop
 800c40c:	200004a8 	.word	0x200004a8
 800c410:	0800c415 	.word	0x0800c415

0800c414 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b082      	sub	sp, #8
 800c418:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c41a:	e00c      	b.n	800c436 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800c41c:	1d3b      	adds	r3, r7, #4
 800c41e:	4619      	mov	r1, r3
 800c420:	480a      	ldr	r0, [pc, #40]	; (800c44c <SendFreeBuf+0x38>)
 800c422:	f000 f90c 	bl	800c63e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800c426:	4b0a      	ldr	r3, [pc, #40]	; (800c450 <SendFreeBuf+0x3c>)
 800c428:	691b      	ldr	r3, [r3, #16]
 800c42a:	691b      	ldr	r3, [r3, #16]
 800c42c:	687a      	ldr	r2, [r7, #4]
 800c42e:	4611      	mov	r1, r2
 800c430:	4618      	mov	r0, r3
 800c432:	f000 f8c1 	bl	800c5b8 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c436:	4805      	ldr	r0, [pc, #20]	; (800c44c <SendFreeBuf+0x38>)
 800c438:	f000 f87a 	bl	800c530 <LST_is_empty>
 800c43c:	4603      	mov	r3, r0
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d0ec      	beq.n	800c41c <SendFreeBuf+0x8>
  }

  return;
 800c442:	bf00      	nop
}
 800c444:	3708      	adds	r7, #8
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}
 800c44a:	bf00      	nop
 800c44c:	200004a8 	.word	0x200004a8
 800c450:	20030000 	.word	0x20030000

0800c454 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800c454:	b580      	push	{r7, lr}
 800c456:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800c458:	4805      	ldr	r0, [pc, #20]	; (800c470 <TL_TRACES_Init+0x1c>)
 800c45a:	f000 f859 	bl	800c510 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800c45e:	4b05      	ldr	r3, [pc, #20]	; (800c474 <TL_TRACES_Init+0x20>)
 800c460:	695b      	ldr	r3, [r3, #20]
 800c462:	4a03      	ldr	r2, [pc, #12]	; (800c470 <TL_TRACES_Init+0x1c>)
 800c464:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800c466:	f001 fa73 	bl	800d950 <HW_IPCC_TRACES_Init>

  return;
 800c46a:	bf00      	nop
}
 800c46c:	bd80      	pop	{r7, pc}
 800c46e:	bf00      	nop
 800c470:	200300b0 	.word	0x200300b0
 800c474:	20030000 	.word	0x20030000

0800c478 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b082      	sub	sp, #8
 800c47c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c47e:	e008      	b.n	800c492 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800c480:	1d3b      	adds	r3, r7, #4
 800c482:	4619      	mov	r1, r3
 800c484:	4808      	ldr	r0, [pc, #32]	; (800c4a8 <HW_IPCC_TRACES_EvtNot+0x30>)
 800c486:	f000 f8da 	bl	800c63e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	4618      	mov	r0, r3
 800c48e:	f000 f80d 	bl	800c4ac <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c492:	4805      	ldr	r0, [pc, #20]	; (800c4a8 <HW_IPCC_TRACES_EvtNot+0x30>)
 800c494:	f000 f84c 	bl	800c530 <LST_is_empty>
 800c498:	4603      	mov	r3, r0
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d0f0      	beq.n	800c480 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800c49e:	bf00      	nop
}
 800c4a0:	3708      	adds	r7, #8
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}
 800c4a6:	bf00      	nop
 800c4a8:	200300b0 	.word	0x200300b0

0800c4ac <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt ){};
 800c4ac:	b480      	push	{r7}
 800c4ae:	b083      	sub	sp, #12
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
 800c4b4:	bf00      	nop
 800c4b6:	370c      	adds	r7, #12
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4be:	4770      	bx	lr

0800c4c0 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b085      	sub	sp, #20
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800c4ca:	4b0f      	ldr	r3, [pc, #60]	; (800c508 <OTP_Read+0x48>)
 800c4cc:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800c4ce:	e002      	b.n	800c4d6 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	3b08      	subs	r3, #8
 800c4d4:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	3307      	adds	r3, #7
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	79fa      	ldrb	r2, [r7, #7]
 800c4de:	429a      	cmp	r2, r3
 800c4e0:	d003      	beq.n	800c4ea <OTP_Read+0x2a>
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	4a09      	ldr	r2, [pc, #36]	; (800c50c <OTP_Read+0x4c>)
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	d1f2      	bne.n	800c4d0 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	3307      	adds	r3, #7
 800c4ee:	781b      	ldrb	r3, [r3, #0]
 800c4f0:	79fa      	ldrb	r2, [r7, #7]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d001      	beq.n	800c4fa <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3714      	adds	r7, #20
 800c500:	46bd      	mov	sp, r7
 800c502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c506:	4770      	bx	lr
 800c508:	1fff73f8 	.word	0x1fff73f8
 800c50c:	1fff7000 	.word	0x1fff7000

0800c510 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800c510:	b480      	push	{r7}
 800c512:	b083      	sub	sp, #12
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	687a      	ldr	r2, [r7, #4]
 800c51c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	687a      	ldr	r2, [r7, #4]
 800c522:	605a      	str	r2, [r3, #4]
}
 800c524:	bf00      	nop
 800c526:	370c      	adds	r7, #12
 800c528:	46bd      	mov	sp, r7
 800c52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52e:	4770      	bx	lr

0800c530 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800c530:	b480      	push	{r7}
 800c532:	b087      	sub	sp, #28
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c538:	f3ef 8310 	mrs	r3, PRIMASK
 800c53c:	60fb      	str	r3, [r7, #12]
  return(result);
 800c53e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c540:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c542:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	687a      	ldr	r2, [r7, #4]
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d102      	bne.n	800c554 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800c54e:	2301      	movs	r3, #1
 800c550:	75fb      	strb	r3, [r7, #23]
 800c552:	e001      	b.n	800c558 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800c554:	2300      	movs	r3, #0
 800c556:	75fb      	strb	r3, [r7, #23]
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800c562:	7dfb      	ldrb	r3, [r7, #23]
}
 800c564:	4618      	mov	r0, r3
 800c566:	371c      	adds	r7, #28
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr

0800c570 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800c570:	b480      	push	{r7}
 800c572:	b087      	sub	sp, #28
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
 800c578:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c57a:	f3ef 8310 	mrs	r3, PRIMASK
 800c57e:	60fb      	str	r3, [r7, #12]
  return(result);
 800c580:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c582:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c584:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681a      	ldr	r2, [r3, #0]
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	687a      	ldr	r2, [r7, #4]
 800c592:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	683a      	ldr	r2, [r7, #0]
 800c598:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	683a      	ldr	r2, [r7, #0]
 800c5a0:	605a      	str	r2, [r3, #4]
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c5ac:	bf00      	nop
 800c5ae:	371c      	adds	r7, #28
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b6:	4770      	bx	lr

0800c5b8 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b087      	sub	sp, #28
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
 800c5c0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c5c2:	f3ef 8310 	mrs	r3, PRIMASK
 800c5c6:	60fb      	str	r3, [r7, #12]
  return(result);
 800c5c8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c5ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c5cc:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	687a      	ldr	r2, [r7, #4]
 800c5d2:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	685a      	ldr	r2, [r3, #4]
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	683a      	ldr	r2, [r7, #0]
 800c5e0:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	685b      	ldr	r3, [r3, #4]
 800c5e6:	683a      	ldr	r2, [r7, #0]
 800c5e8:	601a      	str	r2, [r3, #0]
 800c5ea:	697b      	ldr	r3, [r7, #20]
 800c5ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c5f4:	bf00      	nop
 800c5f6:	371c      	adds	r7, #28
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fe:	4770      	bx	lr

0800c600 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800c600:	b480      	push	{r7}
 800c602:	b087      	sub	sp, #28
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c608:	f3ef 8310 	mrs	r3, PRIMASK
 800c60c:	60fb      	str	r3, [r7, #12]
  return(result);
 800c60e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c610:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c612:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	685b      	ldr	r3, [r3, #4]
 800c618:	687a      	ldr	r2, [r7, #4]
 800c61a:	6812      	ldr	r2, [r2, #0]
 800c61c:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	687a      	ldr	r2, [r7, #4]
 800c624:	6852      	ldr	r2, [r2, #4]
 800c626:	605a      	str	r2, [r3, #4]
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c62c:	693b      	ldr	r3, [r7, #16]
 800c62e:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c632:	bf00      	nop
 800c634:	371c      	adds	r7, #28
 800c636:	46bd      	mov	sp, r7
 800c638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63c:	4770      	bx	lr

0800c63e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800c63e:	b580      	push	{r7, lr}
 800c640:	b086      	sub	sp, #24
 800c642:	af00      	add	r7, sp, #0
 800c644:	6078      	str	r0, [r7, #4]
 800c646:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c648:	f3ef 8310 	mrs	r3, PRIMASK
 800c64c:	60fb      	str	r3, [r7, #12]
  return(result);
 800c64e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c650:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c652:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681a      	ldr	r2, [r3, #0]
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	4618      	mov	r0, r3
 800c662:	f7ff ffcd 	bl	800c600 <LST_remove_node>
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c66a:	693b      	ldr	r3, [r7, #16]
 800c66c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c670:	bf00      	nop
 800c672:	3718      	adds	r7, #24
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}

0800c678 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800c678:	b480      	push	{r7}
 800c67a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800c67c:	4b03      	ldr	r3, [pc, #12]	; (800c68c <LL_FLASH_GetUDN+0x14>)
 800c67e:	681b      	ldr	r3, [r3, #0]
}
 800c680:	4618      	mov	r0, r3
 800c682:	46bd      	mov	sp, r7
 800c684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c688:	4770      	bx	lr
 800c68a:	bf00      	nop
 800c68c:	1fff7580 	.word	0x1fff7580

0800c690 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800c690:	b480      	push	{r7}
 800c692:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800c694:	4b03      	ldr	r3, [pc, #12]	; (800c6a4 <LL_FLASH_GetDeviceID+0x14>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	b2db      	uxtb	r3, r3
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	46bd      	mov	sp, r7
 800c69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a2:	4770      	bx	lr
 800c6a4:	1fff7584 	.word	0x1fff7584

0800c6a8 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800c6ac:	4b03      	ldr	r3, [pc, #12]	; (800c6bc <LL_FLASH_GetSTCompanyID+0x14>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	0a1b      	lsrs	r3, r3, #8
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr
 800c6bc:	1fff7584 	.word	0x1fff7584

0800c6c0 <APP_BLE_Init>:

/* USER CODE END 0 */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 800c6c0:	b5b0      	push	{r4, r5, r7, lr}
 800c6c2:	b08c      	sub	sp, #48	; 0x30
 800c6c4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */
	//messege_ble(0);
/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800c6c6:	4b1f      	ldr	r3, [pc, #124]	; (800c744 <APP_BLE_Init+0x84>)
 800c6c8:	463c      	mov	r4, r7
 800c6ca:	461d      	mov	r5, r3
 800c6cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c6ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c6d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c6d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c6d4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c6d8:	c407      	stmia	r4!, {r0, r1, r2}
 800c6da:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 800c6dc:	f000 f9b4 	bl	800ca48 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800c6e0:	2101      	movs	r1, #1
 800c6e2:	2002      	movs	r0, #2
 800c6e4:	f7f5 f95e 	bl	80019a4 <UTIL_LPM_SetOffMode>

/**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800c6e8:	4a17      	ldr	r2, [pc, #92]	; (800c748 <APP_BLE_Init+0x88>)
 800c6ea:	2100      	movs	r1, #0
 800c6ec:	2020      	movs	r0, #32
 800c6ee:	f7f5 fac1 	bl	8001c74 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 800c6f2:	463b      	mov	r3, r7
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f7ff fa4f 	bl	800bb98 <SHCI_C2_BLE_Init>

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800c6fa:	f000 f9bb 	bl	800ca74 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800c6fe:	f7ff f98f 	bl	800ba20 <SVCCTL_Init>

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_START_SCAN_ID, UTIL_SEQ_RFU, Scan_Request);
 800c702:	4a12      	ldr	r2, [pc, #72]	; (800c74c <APP_BLE_Init+0x8c>)
 800c704:	2100      	movs	r1, #0
 800c706:	2001      	movs	r0, #1
 800c708:	f7f5 fab4 	bl	8001c74 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_DEV_1_ID, UTIL_SEQ_RFU, Connect_Request);
 800c70c:	4a10      	ldr	r2, [pc, #64]	; (800c750 <APP_BLE_Init+0x90>)
 800c70e:	2100      	movs	r1, #0
 800c710:	2002      	movs	r0, #2
 800c712:	f7f5 faaf 	bl	8001c74 <UTIL_SEQ_RegTask>

  /**
   * Initialization of the BLE App Context
   */

      BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c716:	4b0f      	ldr	r3, [pc, #60]	; (800c754 <APP_BLE_Init+0x94>)
 800c718:	2200      	movs	r2, #0
 800c71a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    /*Radio mask Activity*/
#if (OOB_DEMO != 0)  
  aci_hal_set_radio_activity_mask(0x0020);
 800c71e:	2020      	movs	r0, #32
 800c720:	f7fe ffc4 	bl	800b6ac <aci_hal_set_radio_activity_mask>
#endif 
  /**
   * Initialize P2P Client Application
   */
  P2PC_APP_Init();
 800c724:	f000 fb60 	bl	800cde8 <P2PC_APP_Init>

#if (OOB_DEMO != 0)
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800c728:	4b0b      	ldr	r3, [pc, #44]	; (800c758 <APP_BLE_Init+0x98>)
 800c72a:	2200      	movs	r2, #0
 800c72c:	490b      	ldr	r1, [pc, #44]	; (800c75c <APP_BLE_Init+0x9c>)
 800c72e:	2000      	movs	r0, #0
 800c730:	f7f4 fd7e 	bl	8001230 <HW_TS_Create>
  /**
   * Start scanning
   */
  UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0);
#endif 
  UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0);
 800c734:	2100      	movs	r1, #0
 800c736:	2001      	movs	r0, #1
 800c738:	f7f5 fabc 	bl	8001cb4 <UTIL_SEQ_SetTask>
  
  return;
 800c73c:	bf00      	nop
}
 800c73e:	3730      	adds	r7, #48	; 0x30
 800c740:	46bd      	mov	sp, r7
 800c742:	bdb0      	pop	{r4, r5, r7, pc}
 800c744:	0800ee94 	.word	0x0800ee94
 800c748:	0800bc01 	.word	0x0800bc01
 800c74c:	0800cbe9 	.word	0x0800cbe9
 800c750:	0800cc31 	.word	0x0800cc31
 800c754:	200002dc 	.word	0x200002dc
 800c758:	0800cc9d 	.word	0x0800cc9d
 800c75c:	2000036d 	.word	0x2000036d

0800c760 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 800c760:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c762:	b097      	sub	sp, #92	; 0x5c
 800c764:	af06      	add	r7, sp, #24
 800c766:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  hci_le_connection_complete_event_rp0 * connection_complete_event;
  evt_blue_aci *blue_evt;
  hci_le_advertising_report_event_rp0 * le_advertising_event;
  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	3301      	adds	r3, #1
 800c76c:	63bb      	str	r3, [r7, #56]	; 0x38
  hci_disconnection_complete_event_rp0 *cc = (void *) event_pckt->data;
 800c76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c770:	3302      	adds	r3, #2
 800c772:	637b      	str	r3, [r7, #52]	; 0x34
  uint8_t result;
  uint8_t event_type, event_data_size;
  int k = 0;
 800c774:	2300      	movs	r3, #0
 800c776:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint8_t adtype, adlength;
  uint8_t *adv_report_data;

  switch (event_pckt->evt)
 800c778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	2b3e      	cmp	r3, #62	; 0x3e
 800c77e:	f000 809f 	beq.w	800c8c0 <SVCCTL_App_Notification+0x160>
 800c782:	2bff      	cmp	r3, #255	; 0xff
 800c784:	d002      	beq.n	800c78c <SVCCTL_App_Notification+0x2c>
 800c786:	2b05      	cmp	r3, #5
 800c788:	d07a      	beq.n	800c880 <SVCCTL_App_Notification+0x120>

      default:
        /* USER CODE BEGIN evt_default */

        /* USER CODE END evt_default */
        break;
 800c78a:	e135      	b.n	800c9f8 <SVCCTL_App_Notification+0x298>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800c78c:	4b9d      	ldr	r3, [pc, #628]	; (800ca04 <SVCCTL_App_Notification+0x2a4>)
 800c78e:	2201      	movs	r2, #1
 800c790:	701a      	strb	r2, [r3, #0]
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800c792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c794:	3302      	adds	r3, #2
 800c796:	633b      	str	r3, [r7, #48]	; 0x30
      switch (blue_evt->ecode)
 800c798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c79a:	881b      	ldrh	r3, [r3, #0]
 800c79c:	b29b      	uxth	r3, r3
 800c79e:	f240 4207 	movw	r2, #1031	; 0x407
 800c7a2:	4293      	cmp	r3, r2
 800c7a4:	d006      	beq.n	800c7b4 <SVCCTL_App_Notification+0x54>
 800c7a6:	f640 0202 	movw	r2, #2050	; 0x802
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	d01c      	beq.n	800c7e8 <SVCCTL_App_Notification+0x88>
 800c7ae:	2b04      	cmp	r3, #4
 800c7b0:	d062      	beq.n	800c878 <SVCCTL_App_Notification+0x118>
          break;
 800c7b2:	e064      	b.n	800c87e <SVCCTL_App_Notification+0x11e>
          aci_gap_proc_complete_event_rp0 *gap_evt_proc_complete = (void*) blue_evt->data;
 800c7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b6:	3302      	adds	r3, #2
 800c7b8:	627b      	str	r3, [r7, #36]	; 0x24
          if (gap_evt_proc_complete->Procedure_Code == GAP_GENERAL_DISCOVERY_PROC
 800c7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7bc:	781b      	ldrb	r3, [r3, #0]
 800c7be:	2b02      	cmp	r3, #2
 800c7c0:	d15c      	bne.n	800c87c <SVCCTL_App_Notification+0x11c>
              && gap_evt_proc_complete->Status == 0x00)
 800c7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c4:	785b      	ldrb	r3, [r3, #1]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d158      	bne.n	800c87c <SVCCTL_App_Notification+0x11c>
            if (BleApplicationContext.DeviceServerFound == 0x01 && BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 800c7ca:	4b8f      	ldr	r3, [pc, #572]	; (800ca08 <SVCCTL_App_Notification+0x2a8>)
 800c7cc:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800c7d0:	2b01      	cmp	r3, #1
 800c7d2:	d153      	bne.n	800c87c <SVCCTL_App_Notification+0x11c>
 800c7d4:	4b8c      	ldr	r3, [pc, #560]	; (800ca08 <SVCCTL_App_Notification+0x2a8>)
 800c7d6:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800c7da:	2b06      	cmp	r3, #6
 800c7dc:	d04e      	beq.n	800c87c <SVCCTL_App_Notification+0x11c>
              UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_1_ID, CFG_SCH_PRIO_0);
 800c7de:	2100      	movs	r1, #0
 800c7e0:	2002      	movs	r0, #2
 800c7e2:	f7f5 fa67 	bl	8001cb4 <UTIL_SEQ_SetTask>
        break;
 800c7e6:	e049      	b.n	800c87c <SVCCTL_App_Notification+0x11c>
          aci_l2cap_connection_update_req_event_rp0 *pr = (aci_l2cap_connection_update_req_event_rp0 *) blue_evt->data;
 800c7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ea:	3302      	adds	r3, #2
 800c7ec:	62fb      	str	r3, [r7, #44]	; 0x2c
          aci_hal_set_radio_activity_mask(0x0000);
 800c7ee:	2000      	movs	r0, #0
 800c7f0:	f7fe ff5c 	bl	800b6ac <aci_hal_set_radio_activity_mask>
          APP_BLE_p2p_Conn_Update_req.Identifier = pr->Identifier;
 800c7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f6:	789a      	ldrb	r2, [r3, #2]
 800c7f8:	4b84      	ldr	r3, [pc, #528]	; (800ca0c <SVCCTL_App_Notification+0x2ac>)
 800c7fa:	701a      	strb	r2, [r3, #0]
          APP_BLE_p2p_Conn_Update_req.L2CAP_Length = pr->L2CAP_Length;
 800c7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7fe:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800c802:	b29a      	uxth	r2, r3
 800c804:	4b81      	ldr	r3, [pc, #516]	; (800ca0c <SVCCTL_App_Notification+0x2ac>)
 800c806:	805a      	strh	r2, [r3, #2]
          APP_BLE_p2p_Conn_Update_req.Interval_Min = pr->Interval_Min;
 800c808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c80a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800c80e:	b29a      	uxth	r2, r3
 800c810:	4b7e      	ldr	r3, [pc, #504]	; (800ca0c <SVCCTL_App_Notification+0x2ac>)
 800c812:	809a      	strh	r2, [r3, #4]
          APP_BLE_p2p_Conn_Update_req.Interval_Max = pr->Interval_Max;
 800c814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c816:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800c81a:	b29a      	uxth	r2, r3
 800c81c:	4b7b      	ldr	r3, [pc, #492]	; (800ca0c <SVCCTL_App_Notification+0x2ac>)
 800c81e:	80da      	strh	r2, [r3, #6]
          APP_BLE_p2p_Conn_Update_req.Slave_Latency = pr->Slave_Latency;
 800c820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c822:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800c826:	b29a      	uxth	r2, r3
 800c828:	4b78      	ldr	r3, [pc, #480]	; (800ca0c <SVCCTL_App_Notification+0x2ac>)
 800c82a:	811a      	strh	r2, [r3, #8]
          APP_BLE_p2p_Conn_Update_req.Timeout_Multiplier = pr->Timeout_Multiplier;
 800c82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c82e:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800c832:	b29a      	uxth	r2, r3
 800c834:	4b75      	ldr	r3, [pc, #468]	; (800ca0c <SVCCTL_App_Notification+0x2ac>)
 800c836:	815a      	strh	r2, [r3, #10]
          result = aci_l2cap_connection_parameter_update_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 800c838:	4b73      	ldr	r3, [pc, #460]	; (800ca08 <SVCCTL_App_Notification+0x2a8>)
 800c83a:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
 800c83c:	4b73      	ldr	r3, [pc, #460]	; (800ca0c <SVCCTL_App_Notification+0x2ac>)
 800c83e:	889c      	ldrh	r4, [r3, #4]
 800c840:	4b72      	ldr	r3, [pc, #456]	; (800ca0c <SVCCTL_App_Notification+0x2ac>)
 800c842:	88dd      	ldrh	r5, [r3, #6]
 800c844:	4b71      	ldr	r3, [pc, #452]	; (800ca0c <SVCCTL_App_Notification+0x2ac>)
 800c846:	891e      	ldrh	r6, [r3, #8]
 800c848:	4b70      	ldr	r3, [pc, #448]	; (800ca0c <SVCCTL_App_Notification+0x2ac>)
 800c84a:	895b      	ldrh	r3, [r3, #10]
 800c84c:	4a6f      	ldr	r2, [pc, #444]	; (800ca0c <SVCCTL_App_Notification+0x2ac>)
 800c84e:	7812      	ldrb	r2, [r2, #0]
 800c850:	2101      	movs	r1, #1
 800c852:	9104      	str	r1, [sp, #16]
 800c854:	9203      	str	r2, [sp, #12]
 800c856:	2210      	movs	r2, #16
 800c858:	9202      	str	r2, [sp, #8]
 800c85a:	2210      	movs	r2, #16
 800c85c:	9201      	str	r2, [sp, #4]
 800c85e:	9300      	str	r3, [sp, #0]
 800c860:	4633      	mov	r3, r6
 800c862:	462a      	mov	r2, r5
 800c864:	4621      	mov	r1, r4
 800c866:	f7fe ff9b 	bl	800b7a0 <aci_l2cap_connection_parameter_update_resp>
 800c86a:	4603      	mov	r3, r0
 800c86c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
          aci_hal_set_radio_activity_mask(0x0020);
 800c870:	2020      	movs	r0, #32
 800c872:	f7fe ff1b 	bl	800b6ac <aci_hal_set_radio_activity_mask>
        break;
 800c876:	e002      	b.n	800c87e <SVCCTL_App_Notification+0x11e>
        break; 
 800c878:	bf00      	nop
 800c87a:	e0bd      	b.n	800c9f8 <SVCCTL_App_Notification+0x298>
        break;
 800c87c:	bf00      	nop
    break; 
 800c87e:	e0bb      	b.n	800c9f8 <SVCCTL_App_Notification+0x298>
      if (cc->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800c880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c882:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c886:	b29a      	uxth	r2, r3
 800c888:	4b5f      	ldr	r3, [pc, #380]	; (800ca08 <SVCCTL_App_Notification+0x2a8>)
 800c88a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c88c:	429a      	cmp	r2, r3
 800c88e:	f040 80b2 	bne.w	800c9f6 <SVCCTL_App_Notification+0x296>
            BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800c892:	4b5d      	ldr	r3, [pc, #372]	; (800ca08 <SVCCTL_App_Notification+0x2a8>)
 800c894:	2200      	movs	r2, #0
 800c896:	84da      	strh	r2, [r3, #38]	; 0x26
            BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c898:	4b5b      	ldr	r3, [pc, #364]	; (800ca08 <SVCCTL_App_Notification+0x2a8>)
 800c89a:	2200      	movs	r2, #0
 800c89c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
            HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	2101      	movs	r1, #1
 800c8a4:	485a      	ldr	r0, [pc, #360]	; (800ca10 <SVCCTL_App_Notification+0x2b0>)
 800c8a6:	f7f6 fa8f 	bl	8002dc8 <HAL_GPIO_WritePin>
            handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800c8aa:	4b56      	ldr	r3, [pc, #344]	; (800ca04 <SVCCTL_App_Notification+0x2a4>)
 800c8ac:	2201      	movs	r2, #1
 800c8ae:	701a      	strb	r2, [r3, #0]
            handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800c8b0:	4b55      	ldr	r3, [pc, #340]	; (800ca08 <SVCCTL_App_Notification+0x2a8>)
 800c8b2:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800c8b4:	4b53      	ldr	r3, [pc, #332]	; (800ca04 <SVCCTL_App_Notification+0x2a4>)
 800c8b6:	805a      	strh	r2, [r3, #2]
            P2PC_APP_Notification(&handleNotification);
 800c8b8:	4852      	ldr	r0, [pc, #328]	; (800ca04 <SVCCTL_App_Notification+0x2a4>)
 800c8ba:	f000 fabb 	bl	800ce34 <P2PC_APP_Notification>
      break; /* EVT_DISCONN_COMPLETE */
 800c8be:	e09a      	b.n	800c9f6 <SVCCTL_App_Notification+0x296>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 800c8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8c2:	3302      	adds	r3, #2
 800c8c4:	623b      	str	r3, [r7, #32]
      switch (meta_evt->subevent)
 800c8c6:	6a3b      	ldr	r3, [r7, #32]
 800c8c8:	781b      	ldrb	r3, [r3, #0]
 800c8ca:	2b01      	cmp	r3, #1
 800c8cc:	d002      	beq.n	800c8d4 <SVCCTL_App_Notification+0x174>
 800c8ce:	2b02      	cmp	r3, #2
 800c8d0:	d025      	beq.n	800c91e <SVCCTL_App_Notification+0x1be>
          break;
 800c8d2:	e08f      	b.n	800c9f4 <SVCCTL_App_Notification+0x294>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 800c8d4:	6a3b      	ldr	r3, [r7, #32]
 800c8d6:	3301      	adds	r3, #1
 800c8d8:	60fb      	str	r3, [r7, #12]
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c8e0:	b29a      	uxth	r2, r3
 800c8e2:	4b49      	ldr	r3, [pc, #292]	; (800ca08 <SVCCTL_App_Notification+0x2a8>)
 800c8e4:	84da      	strh	r2, [r3, #38]	; 0x26
          BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800c8e6:	4b48      	ldr	r3, [pc, #288]	; (800ca08 <SVCCTL_App_Notification+0x2a8>)
 800c8e8:	2206      	movs	r2, #6
 800c8ea:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
          HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800c8ee:	2201      	movs	r2, #1
 800c8f0:	2101      	movs	r1, #1
 800c8f2:	4847      	ldr	r0, [pc, #284]	; (800ca10 <SVCCTL_App_Notification+0x2b0>)
 800c8f4:	f7f6 fa68 	bl	8002dc8 <HAL_GPIO_WritePin>
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800c8f8:	4b42      	ldr	r3, [pc, #264]	; (800ca04 <SVCCTL_App_Notification+0x2a4>)
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800c8fe:	4b42      	ldr	r3, [pc, #264]	; (800ca08 <SVCCTL_App_Notification+0x2a8>)
 800c900:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800c902:	4b40      	ldr	r3, [pc, #256]	; (800ca04 <SVCCTL_App_Notification+0x2a4>)
 800c904:	805a      	strh	r2, [r3, #2]
          P2PC_APP_Notification(&handleNotification);
 800c906:	483f      	ldr	r0, [pc, #252]	; (800ca04 <SVCCTL_App_Notification+0x2a4>)
 800c908:	f000 fa94 	bl	800ce34 <P2PC_APP_Notification>
          result = aci_gatt_disc_all_primary_services(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800c90c:	4b3e      	ldr	r3, [pc, #248]	; (800ca08 <SVCCTL_App_Notification+0x2a8>)
 800c90e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c910:	4618      	mov	r0, r3
 800c912:	f7fe fc38 	bl	800b186 <aci_gatt_disc_all_primary_services>
 800c916:	4603      	mov	r3, r0
 800c918:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
          break; /* HCI_EVT_LE_CONN_COMPLETE */
 800c91c:	e06a      	b.n	800c9f4 <SVCCTL_App_Notification+0x294>
          le_advertising_event = (hci_le_advertising_report_event_rp0 *) meta_evt->data;
 800c91e:	6a3b      	ldr	r3, [r7, #32]
 800c920:	3301      	adds	r3, #1
 800c922:	61fb      	str	r3, [r7, #28]
          event_type = le_advertising_event->Advertising_Report[0].Event_Type;
 800c924:	69fb      	ldr	r3, [r7, #28]
 800c926:	785b      	ldrb	r3, [r3, #1]
 800c928:	76fb      	strb	r3, [r7, #27]
          event_data_size = le_advertising_event->Advertising_Report[0].Length_Data;
 800c92a:	69fb      	ldr	r3, [r7, #28]
 800c92c:	7a5b      	ldrb	r3, [r3, #9]
 800c92e:	76bb      	strb	r3, [r7, #26]
          adv_report_data = (uint8_t*)(&le_advertising_event->Advertising_Report[0].Length_Data) + 1;
 800c930:	69fb      	ldr	r3, [r7, #28]
 800c932:	3309      	adds	r3, #9
 800c934:	3301      	adds	r3, #1
 800c936:	617b      	str	r3, [r7, #20]
          k = 0;
 800c938:	2300      	movs	r3, #0
 800c93a:	63fb      	str	r3, [r7, #60]	; 0x3c
          if (event_type == ADV_IND)
 800c93c:	7efb      	ldrb	r3, [r7, #27]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d157      	bne.n	800c9f2 <SVCCTL_App_Notification+0x292>
            while(k < event_data_size)
 800c942:	e052      	b.n	800c9ea <SVCCTL_App_Notification+0x28a>
              adlength = adv_report_data[k];
 800c944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c946:	697a      	ldr	r2, [r7, #20]
 800c948:	4413      	add	r3, r2
 800c94a:	781b      	ldrb	r3, [r3, #0]
 800c94c:	74fb      	strb	r3, [r7, #19]
              adtype = adv_report_data[k + 1];
 800c94e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c950:	3301      	adds	r3, #1
 800c952:	697a      	ldr	r2, [r7, #20]
 800c954:	4413      	add	r3, r2
 800c956:	781b      	ldrb	r3, [r3, #0]
 800c958:	74bb      	strb	r3, [r7, #18]
              switch (adtype)
 800c95a:	7cbb      	ldrb	r3, [r7, #18]
 800c95c:	2b0a      	cmp	r3, #10
 800c95e:	d03a      	beq.n	800c9d6 <SVCCTL_App_Notification+0x276>
 800c960:	2b0a      	cmp	r3, #10
 800c962:	dc02      	bgt.n	800c96a <SVCCTL_App_Notification+0x20a>
 800c964:	2b01      	cmp	r3, #1
 800c966:	d038      	beq.n	800c9da <SVCCTL_App_Notification+0x27a>
                  break;
 800c968:	e03a      	b.n	800c9e0 <SVCCTL_App_Notification+0x280>
              switch (adtype)
 800c96a:	2b16      	cmp	r3, #22
 800c96c:	d037      	beq.n	800c9de <SVCCTL_App_Notification+0x27e>
 800c96e:	2bff      	cmp	r3, #255	; 0xff
 800c970:	d000      	beq.n	800c974 <SVCCTL_App_Notification+0x214>
                  break;
 800c972:	e035      	b.n	800c9e0 <SVCCTL_App_Notification+0x280>
                  if (adlength >= 7 && adv_report_data[k + 2] == 0x01)
 800c974:	7cfb      	ldrb	r3, [r7, #19]
 800c976:	2b06      	cmp	r3, #6
 800c978:	d92b      	bls.n	800c9d2 <SVCCTL_App_Notification+0x272>
 800c97a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c97c:	3302      	adds	r3, #2
 800c97e:	697a      	ldr	r2, [r7, #20]
 800c980:	4413      	add	r3, r2
 800c982:	781b      	ldrb	r3, [r3, #0]
 800c984:	2b01      	cmp	r3, #1
 800c986:	d124      	bne.n	800c9d2 <SVCCTL_App_Notification+0x272>
                    switch (adv_report_data[k + 3])
 800c988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c98a:	3303      	adds	r3, #3
 800c98c:	697a      	ldr	r2, [r7, #20]
 800c98e:	4413      	add	r3, r2
 800c990:	781b      	ldrb	r3, [r3, #0]
 800c992:	2b83      	cmp	r3, #131	; 0x83
 800c994:	d000      	beq.n	800c998 <SVCCTL_App_Notification+0x238>
                        break;
 800c996:	e01d      	b.n	800c9d4 <SVCCTL_App_Notification+0x274>
                        BleApplicationContext.DeviceServerFound = 0x01;
 800c998:	4b1b      	ldr	r3, [pc, #108]	; (800ca08 <SVCCTL_App_Notification+0x2a8>)
 800c99a:	2201      	movs	r2, #1
 800c99c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                        SERVER_REMOTE_BDADDR[0] = le_advertising_event->Advertising_Report[0].Address[0];
 800c9a0:	69fb      	ldr	r3, [r7, #28]
 800c9a2:	78da      	ldrb	r2, [r3, #3]
 800c9a4:	4b1b      	ldr	r3, [pc, #108]	; (800ca14 <SVCCTL_App_Notification+0x2b4>)
 800c9a6:	701a      	strb	r2, [r3, #0]
                        SERVER_REMOTE_BDADDR[1] = le_advertising_event->Advertising_Report[0].Address[1];
 800c9a8:	69fb      	ldr	r3, [r7, #28]
 800c9aa:	791a      	ldrb	r2, [r3, #4]
 800c9ac:	4b19      	ldr	r3, [pc, #100]	; (800ca14 <SVCCTL_App_Notification+0x2b4>)
 800c9ae:	705a      	strb	r2, [r3, #1]
                        SERVER_REMOTE_BDADDR[2] = le_advertising_event->Advertising_Report[0].Address[2];
 800c9b0:	69fb      	ldr	r3, [r7, #28]
 800c9b2:	795a      	ldrb	r2, [r3, #5]
 800c9b4:	4b17      	ldr	r3, [pc, #92]	; (800ca14 <SVCCTL_App_Notification+0x2b4>)
 800c9b6:	709a      	strb	r2, [r3, #2]
                        SERVER_REMOTE_BDADDR[3] = le_advertising_event->Advertising_Report[0].Address[3];
 800c9b8:	69fb      	ldr	r3, [r7, #28]
 800c9ba:	799a      	ldrb	r2, [r3, #6]
 800c9bc:	4b15      	ldr	r3, [pc, #84]	; (800ca14 <SVCCTL_App_Notification+0x2b4>)
 800c9be:	70da      	strb	r2, [r3, #3]
                        SERVER_REMOTE_BDADDR[4] = le_advertising_event->Advertising_Report[0].Address[4];
 800c9c0:	69fb      	ldr	r3, [r7, #28]
 800c9c2:	79da      	ldrb	r2, [r3, #7]
 800c9c4:	4b13      	ldr	r3, [pc, #76]	; (800ca14 <SVCCTL_App_Notification+0x2b4>)
 800c9c6:	711a      	strb	r2, [r3, #4]
                        SERVER_REMOTE_BDADDR[5] = le_advertising_event->Advertising_Report[0].Address[5];
 800c9c8:	69fb      	ldr	r3, [r7, #28]
 800c9ca:	7a1a      	ldrb	r2, [r3, #8]
 800c9cc:	4b11      	ldr	r3, [pc, #68]	; (800ca14 <SVCCTL_App_Notification+0x2b4>)
 800c9ce:	715a      	strb	r2, [r3, #5]
                        break;
 800c9d0:	e000      	b.n	800c9d4 <SVCCTL_App_Notification+0x274>
                  }
 800c9d2:	bf00      	nop
                  break;
 800c9d4:	e004      	b.n	800c9e0 <SVCCTL_App_Notification+0x280>
                break;
 800c9d6:	bf00      	nop
 800c9d8:	e002      	b.n	800c9e0 <SVCCTL_App_Notification+0x280>
                  break;
 800c9da:	bf00      	nop
 800c9dc:	e000      	b.n	800c9e0 <SVCCTL_App_Notification+0x280>
                  break;
 800c9de:	bf00      	nop
              k += adlength + 1;
 800c9e0:	7cfb      	ldrb	r3, [r7, #19]
 800c9e2:	3301      	adds	r3, #1
 800c9e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c9e6:	4413      	add	r3, r2
 800c9e8:	63fb      	str	r3, [r7, #60]	; 0x3c
            while(k < event_data_size)
 800c9ea:	7ebb      	ldrb	r3, [r7, #26]
 800c9ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c9ee:	429a      	cmp	r2, r3
 800c9f0:	dba8      	blt.n	800c944 <SVCCTL_App_Notification+0x1e4>
          break;
 800c9f2:	bf00      	nop
      break; /* HCI_EVT_LE_META_EVENT */
 800c9f4:	e000      	b.n	800c9f8 <SVCCTL_App_Notification+0x298>
      break; /* EVT_DISCONN_COMPLETE */
 800c9f6:	bf00      	nop
   }
  return (SVCCTL_UserEvtFlowEnable);
 800c9f8:	2301      	movs	r3, #1
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	3744      	adds	r7, #68	; 0x44
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca02:	bf00      	nop
 800ca04:	200007b0 	.word	0x200007b0
 800ca08:	200002dc 	.word	0x200002dc
 800ca0c:	200007bc 	.word	0x200007bc
 800ca10:	48000400 	.word	0x48000400
 800ca14:	200007b4 	.word	0x200007b4

0800ca18 <APP_BLE_Get_Client_Connection_Status>:

APP_BLE_ConnStatus_t APP_BLE_Get_Client_Connection_Status( uint16_t Connection_Handle )
{
 800ca18:	b480      	push	{r7}
 800ca1a:	b083      	sub	sp, #12
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	4603      	mov	r3, r0
 800ca20:	80fb      	strh	r3, [r7, #6]

  if (BleApplicationContext.BleApplicationContext_legacy.connectionHandle == Connection_Handle)
 800ca22:	4b08      	ldr	r3, [pc, #32]	; (800ca44 <APP_BLE_Get_Client_Connection_Status+0x2c>)
 800ca24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ca26:	88fa      	ldrh	r2, [r7, #6]
 800ca28:	429a      	cmp	r2, r3
 800ca2a:	d103      	bne.n	800ca34 <APP_BLE_Get_Client_Connection_Status+0x1c>
  {
    return BleApplicationContext.Device_Connection_Status;
 800ca2c:	4b05      	ldr	r3, [pc, #20]	; (800ca44 <APP_BLE_Get_Client_Connection_Status+0x2c>)
 800ca2e:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800ca32:	e000      	b.n	800ca36 <APP_BLE_Get_Client_Connection_Status+0x1e>
  }
  return APP_BLE_IDLE;
 800ca34:	2300      	movs	r3, #0
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	370c      	adds	r7, #12
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca40:	4770      	bx	lr
 800ca42:	bf00      	nop
 800ca44:	200002dc 	.word	0x200002dc

0800ca48 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b082      	sub	sp, #8
 800ca4c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800ca4e:	4b06      	ldr	r3, [pc, #24]	; (800ca68 <Ble_Tl_Init+0x20>)
 800ca50:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800ca52:	4b06      	ldr	r3, [pc, #24]	; (800ca6c <Ble_Tl_Init+0x24>)
 800ca54:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800ca56:	463b      	mov	r3, r7
 800ca58:	4619      	mov	r1, r3
 800ca5a:	4805      	ldr	r0, [pc, #20]	; (800ca70 <Ble_Tl_Init+0x28>)
 800ca5c:	f7ff f8b4 	bl	800bbc8 <hci_init>

  return;
 800ca60:	bf00      	nop
}
 800ca62:	3708      	adds	r7, #8
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}
 800ca68:	200300b8 	.word	0x200300b8
 800ca6c:	0800cdb1 	.word	0x0800cdb1
 800ca70:	0800cd79 	.word	0x0800cd79

0800ca74 <Ble_Hci_Gap_Gatt_Init>:

 static void Ble_Hci_Gap_Gatt_Init(void){
 800ca74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca76:	b091      	sub	sp, #68	; 0x44
 800ca78:	af06      	add	r7, sp, #24
  uint8_t role;
  uint8_t index;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE }; 
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	80bb      	strh	r3, [r7, #4]
  
  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
   hci_reset();
 800ca7e:	f7fe fe66 	bl	800b74e <hci_reset>
  
   /**
   * Write the BD Address
   */
 
  bd_addr = BleGetBdAddress();
 800ca82:	f000 f913 	bl	800ccac <BleGetBdAddress>
 800ca86:	6238      	str	r0, [r7, #32]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800ca88:	6a3a      	ldr	r2, [r7, #32]
 800ca8a:	2106      	movs	r1, #6
 800ca8c:	2000      	movs	r0, #0
 800ca8e:	f7fe fd3f 	bl	800b510 <aci_hal_write_config_data>
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 800ca92:	f64e 536e 	movw	r3, #60782	; 0xed6e
 800ca96:	60fb      	str	r3, [r7, #12]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 800ca98:	f7ff fdee 	bl	800c678 <LL_FLASH_GetUDN>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	60bb      	str	r3, [r7, #8]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 800caa0:	f107 0308 	add.w	r3, r7, #8
 800caa4:	461a      	mov	r2, r3
 800caa6:	2106      	movs	r1, #6
 800caa8:	202e      	movs	r0, #46	; 0x2e
 800caaa:	f7fe fd31 	bl	800b510 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK 
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800caae:	4a49      	ldr	r2, [pc, #292]	; (800cbd4 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800cab0:	2110      	movs	r1, #16
 800cab2:	2018      	movs	r0, #24
 800cab4:	f7fe fd2c 	bl	800b510 <aci_hal_write_config_data>
    
   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 800cab8:	4a47      	ldr	r2, [pc, #284]	; (800cbd8 <Ble_Hci_Gap_Gatt_Init+0x164>)
 800caba:	2110      	movs	r1, #16
 800cabc:	2008      	movs	r0, #8
 800cabe:	f7fe fd27 	bl	800b510 <aci_hal_write_config_data>
  
  /**
     * Set TX Power to 0dBm.
     */
    aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800cac2:	2118      	movs	r1, #24
 800cac4:	2001      	movs	r0, #1
 800cac6:	f7fe fd93 	bl	800b5f0 <aci_hal_set_tx_power_level>
  
/**
   * Initialize GATT interface
   */
  aci_gatt_init();
 800caca:	f7fe faa4 	bl	800b016 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 800cace:	2300      	movs	r3, #0
 800cad0:	77fb      	strb	r3, [r7, #31]
#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
#endif

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
 800cad2:	7ffb      	ldrb	r3, [r7, #31]
 800cad4:	f043 0304 	orr.w	r3, r3, #4
 800cad8:	77fb      	strb	r3, [r7, #31]
#endif

  if (role > 0)
 800cada:	7ffb      	ldrb	r3, [r7, #31]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d01e      	beq.n	800cb1e <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    const char *name = "STM32WB";
 800cae0:	4b3e      	ldr	r3, [pc, #248]	; (800cbdc <Ble_Hci_Gap_Gatt_Init+0x168>)
 800cae2:	61bb      	str	r3, [r7, #24]

    aci_gap_init(role, 0,
 800cae4:	f107 0216 	add.w	r2, r7, #22
 800cae8:	7ff8      	ldrb	r0, [r7, #31]
 800caea:	f107 0312 	add.w	r3, r7, #18
 800caee:	9301      	str	r3, [sp, #4]
 800caf0:	f107 0314 	add.w	r3, r7, #20
 800caf4:	9300      	str	r3, [sp, #0]
 800caf6:	4613      	mov	r3, r2
 800caf8:	2207      	movs	r2, #7
 800cafa:	2100      	movs	r1, #0
 800cafc:	f7fe f88c 	bl	800ac18 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800cb00:	8afc      	ldrh	r4, [r7, #22]
 800cb02:	8abd      	ldrh	r5, [r7, #20]
 800cb04:	69b8      	ldr	r0, [r7, #24]
 800cb06:	f7f3 fb3b 	bl	8000180 <strlen>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	b2da      	uxtb	r2, r3
 800cb0e:	69bb      	ldr	r3, [r7, #24]
 800cb10:	9300      	str	r3, [sp, #0]
 800cb12:	4613      	mov	r3, r2
 800cb14:	2200      	movs	r2, #0
 800cb16:	4629      	mov	r1, r5
 800cb18:	4620      	mov	r0, r4
 800cb1a:	f7fe faa6 	bl	800b06a <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

    if(aci_gatt_update_char_value(gap_service_handle,
 800cb1e:	8af8      	ldrh	r0, [r7, #22]
 800cb20:	8a79      	ldrh	r1, [r7, #18]
 800cb22:	1d3b      	adds	r3, r7, #4
 800cb24:	9300      	str	r3, [sp, #0]
 800cb26:	2302      	movs	r3, #2
 800cb28:	2200      	movs	r2, #0
 800cb2a:	f7fe fa9e 	bl	800b06a <aci_gatt_update_char_value>
    }

    /**
     * Initialize IO capability
     */
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800cb2e:	4b2c      	ldr	r3, [pc, #176]	; (800cbe0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800cb30:	2201      	movs	r2, #1
 800cb32:	701a      	strb	r2, [r3, #0]
    aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800cb34:	4b2a      	ldr	r3, [pc, #168]	; (800cbe0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800cb36:	781b      	ldrb	r3, [r3, #0]
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f7fd ff6d 	bl	800aa18 <aci_gap_set_io_capability>

    /**
     * Initialize authentication
     */
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800cb3e:	4b28      	ldr	r3, [pc, #160]	; (800cbe0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800cb40:	2201      	movs	r2, #1
 800cb42:	705a      	strb	r2, [r3, #1]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 800cb44:	4b26      	ldr	r3, [pc, #152]	; (800cbe0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800cb46:	2200      	movs	r2, #0
 800cb48:	70da      	strb	r2, [r3, #3]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = 8;
 800cb4a:	4b25      	ldr	r3, [pc, #148]	; (800cbe0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800cb4c:	2208      	movs	r2, #8
 800cb4e:	755a      	strb	r2, [r3, #21]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
 800cb50:	4b23      	ldr	r3, [pc, #140]	; (800cbe0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800cb52:	2210      	movs	r2, #16
 800cb54:	759a      	strb	r2, [r3, #22]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = 1;
 800cb56:	4b22      	ldr	r3, [pc, #136]	; (800cbe0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800cb58:	2201      	movs	r2, #1
 800cb5a:	751a      	strb	r2, [r3, #20]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
 800cb5c:	4b20      	ldr	r3, [pc, #128]	; (800cbe0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800cb5e:	4a21      	ldr	r2, [pc, #132]	; (800cbe4 <Ble_Hci_Gap_Gatt_Init+0x170>)
 800cb60:	619a      	str	r2, [r3, #24]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = 1;
 800cb62:	4b1f      	ldr	r3, [pc, #124]	; (800cbe0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800cb64:	2201      	movs	r2, #1
 800cb66:	709a      	strb	r2, [r3, #2]
    for (index = 0; index < 16; index++)
 800cb68:	2300      	movs	r3, #0
 800cb6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cb6e:	e00b      	b.n	800cb88 <Ble_Hci_Gap_Gatt_Init+0x114>
    {
      BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 800cb70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb74:	4a1a      	ldr	r2, [pc, #104]	; (800cbe0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800cb76:	4413      	add	r3, r2
 800cb78:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cb7c:	711a      	strb	r2, [r3, #4]
    for (index = 0; index < 16; index++)
 800cb7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb82:	3301      	adds	r3, #1
 800cb84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cb88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb8c:	2b0f      	cmp	r3, #15
 800cb8e:	d9ef      	bls.n	800cb70 <Ble_Hci_Gap_Gatt_Init+0xfc>
    }

    aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800cb90:	4b13      	ldr	r3, [pc, #76]	; (800cbe0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800cb92:	789d      	ldrb	r5, [r3, #2]
 800cb94:	4b12      	ldr	r3, [pc, #72]	; (800cbe0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800cb96:	785e      	ldrb	r6, [r3, #1]
 800cb98:	4b11      	ldr	r3, [pc, #68]	; (800cbe0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800cb9a:	7d5b      	ldrb	r3, [r3, #21]
 800cb9c:	4a10      	ldr	r2, [pc, #64]	; (800cbe0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800cb9e:	7d92      	ldrb	r2, [r2, #22]
 800cba0:	490f      	ldr	r1, [pc, #60]	; (800cbe0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800cba2:	7d09      	ldrb	r1, [r1, #20]
 800cba4:	480e      	ldr	r0, [pc, #56]	; (800cbe0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800cba6:	6980      	ldr	r0, [r0, #24]
 800cba8:	2400      	movs	r4, #0
 800cbaa:	9404      	str	r4, [sp, #16]
 800cbac:	9003      	str	r0, [sp, #12]
 800cbae:	9102      	str	r1, [sp, #8]
 800cbb0:	9201      	str	r2, [sp, #4]
 800cbb2:	9300      	str	r3, [sp, #0]
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	4631      	mov	r1, r6
 800cbba:	4628      	mov	r0, r5
 800cbbc:	f7fd ff7d 	bl	800aaba <aci_gap_set_authentication_requirement>
                                           );

    /**
     * Initialize whitelist
     */
    if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800cbc0:	4b07      	ldr	r3, [pc, #28]	; (800cbe0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800cbc2:	789b      	ldrb	r3, [r3, #2]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d001      	beq.n	800cbcc <Ble_Hci_Gap_Gatt_Init+0x158>
    {
      aci_gap_configure_whitelist();
 800cbc8:	f7fe f8b1 	bl	800ad2e <aci_gap_configure_whitelist>
    }
  
}
 800cbcc:	bf00      	nop
 800cbce:	372c      	adds	r7, #44	; 0x2c
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbd4:	0800efe4 	.word	0x0800efe4
 800cbd8:	0800eff4 	.word	0x0800eff4
 800cbdc:	0800eec4 	.word	0x0800eec4
 800cbe0:	200002dc 	.word	0x200002dc
 800cbe4:	0001b207 	.word	0x0001b207

0800cbe8 <Scan_Request>:

static void Scan_Request( void )
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b082      	sub	sp, #8
 800cbec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Scan_Request_1 */

  /* USER CODE END Scan_Request_1 */
  tBleStatus result;
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 800cbee:	4b0e      	ldr	r3, [pc, #56]	; (800cc28 <Scan_Request+0x40>)
 800cbf0:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800cbf4:	2b06      	cmp	r3, #6
 800cbf6:	d012      	beq.n	800cc1e <Scan_Request+0x36>
  {
    /* USER CODE BEGIN APP_BLE_CONNECTED_CLIENT */

    /* USER CODE END APP_BLE_CONNECTED_CLIENT */
    result = aci_gap_start_general_discovery_proc(SCAN_P, SCAN_L, PUBLIC_ADDR, 1);
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	f44f 7148 	mov.w	r1, #800	; 0x320
 800cc00:	f44f 7048 	mov.w	r0, #800	; 0x320
 800cc04:	f7fe f8bc 	bl	800ad80 <aci_gap_start_general_discovery_proc>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	71fb      	strb	r3, [r7, #7]
    if (result == BLE_STATUS_SUCCESS)
 800cc0c:	79fb      	ldrb	r3, [r7, #7]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d105      	bne.n	800cc1e <Scan_Request+0x36>
    {
    /* USER CODE BEGIN BLE_SCAN_SUCCESS */
    	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 800cc12:	2201      	movs	r2, #1
 800cc14:	2120      	movs	r1, #32
 800cc16:	4805      	ldr	r0, [pc, #20]	; (800cc2c <Scan_Request+0x44>)
 800cc18:	f7f6 f8d6 	bl	8002dc8 <HAL_GPIO_WritePin>
    }
  }
  /* USER CODE BEGIN Scan_Request_2 */

  /* USER CODE END Scan_Request_2 */
  return;
 800cc1c:	bf00      	nop
 800cc1e:	bf00      	nop
}
 800cc20:	3708      	adds	r7, #8
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}
 800cc26:	bf00      	nop
 800cc28:	200002dc 	.word	0x200002dc
 800cc2c:	48000400 	.word	0x48000400

0800cc30 <Connect_Request>:

static void Connect_Request( void )
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b08a      	sub	sp, #40	; 0x28
 800cc34:	af08      	add	r7, sp, #32

  /* USER CODE END Connect_Request_1 */
  tBleStatus result;
  APP_DBG_MSG("\r\n\r** CREATE CONNECTION TO SERVER **  \r\n\r");

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 800cc36:	4b17      	ldr	r3, [pc, #92]	; (800cc94 <Connect_Request+0x64>)
 800cc38:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800cc3c:	2b06      	cmp	r3, #6
 800cc3e:	d025      	beq.n	800cc8c <Connect_Request+0x5c>
  {
    result = aci_gap_create_connection(SCAN_P,
 800cc40:	2310      	movs	r3, #16
 800cc42:	9306      	str	r3, [sp, #24]
 800cc44:	2310      	movs	r3, #16
 800cc46:	9305      	str	r3, [sp, #20]
 800cc48:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800cc4c:	9304      	str	r3, [sp, #16]
 800cc4e:	2300      	movs	r3, #0
 800cc50:	9303      	str	r3, [sp, #12]
 800cc52:	2350      	movs	r3, #80	; 0x50
 800cc54:	9302      	str	r3, [sp, #8]
 800cc56:	2328      	movs	r3, #40	; 0x28
 800cc58:	9301      	str	r3, [sp, #4]
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	9300      	str	r3, [sp, #0]
 800cc5e:	4b0e      	ldr	r3, [pc, #56]	; (800cc98 <Connect_Request+0x68>)
 800cc60:	2200      	movs	r2, #0
 800cc62:	f44f 7148 	mov.w	r1, #800	; 0x320
 800cc66:	f44f 7048 	mov.w	r0, #800	; 0x320
 800cc6a:	f7fe f908 	bl	800ae7e <aci_gap_create_connection>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	71fb      	strb	r3, [r7, #7]
                                       0,
                                       SUPERV_TIMEOUT,
                                       CONN_L1,
                                       CONN_L2);

    if (result == BLE_STATUS_SUCCESS)
 800cc72:	79fb      	ldrb	r3, [r7, #7]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d104      	bne.n	800cc82 <Connect_Request+0x52>
    {
    /* USER CODE BEGIN BLE_CONNECT_SUCCESS */

    /* USER CODE END BLE_CONNECT_SUCCESS */
    BleApplicationContext.Device_Connection_Status = APP_BLE_LP_CONNECTING;
 800cc78:	4b06      	ldr	r3, [pc, #24]	; (800cc94 <Connect_Request+0x64>)
 800cc7a:	2204      	movs	r2, #4
 800cc7c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
    }
  }
  /* USER CODE BEGIN Connect_Request_2 */

  /* USER CODE END Connect_Request_2 */
  return;
 800cc80:	e004      	b.n	800cc8c <Connect_Request+0x5c>
      BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800cc82:	4b04      	ldr	r3, [pc, #16]	; (800cc94 <Connect_Request+0x64>)
 800cc84:	2200      	movs	r2, #0
 800cc86:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  return;
 800cc8a:	bf00      	nop
 800cc8c:	bf00      	nop
}
 800cc8e:	3708      	adds	r7, #8
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}
 800cc94:	200002dc 	.word	0x200002dc
 800cc98:	200007b4 	.word	0x200007b4

0800cc9c <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 800cc9c:	b480      	push	{r7}
 800cc9e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */
	//BSP_LED_Off(LED_GREEN);
	//HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
/* USER CODE END Switch_OFF_GPIO */
}
 800cca0:	bf00      	nop
 800cca2:	46bd      	mov	sp, r7
 800cca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca8:	4770      	bx	lr
	...

0800ccac <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b086      	sub	sp, #24
 800ccb0:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800ccb2:	f7ff fce1 	bl	800c678 <LL_FLASH_GetUDN>
 800ccb6:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ccbe:	d023      	beq.n	800cd08 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800ccc0:	f7ff fcf2 	bl	800c6a8 <LL_FLASH_GetSTCompanyID>
 800ccc4:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800ccc6:	f7ff fce3 	bl	800c690 <LL_FLASH_GetDeviceID>
 800ccca:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 800cccc:	693b      	ldr	r3, [r7, #16]
 800ccce:	b2da      	uxtb	r2, r3
 800ccd0:	4b16      	ldr	r3, [pc, #88]	; (800cd2c <BleGetBdAddress+0x80>)
 800ccd2:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 800ccd4:	693b      	ldr	r3, [r7, #16]
 800ccd6:	0a1b      	lsrs	r3, r3, #8
 800ccd8:	b2da      	uxtb	r2, r3
 800ccda:	4b14      	ldr	r3, [pc, #80]	; (800cd2c <BleGetBdAddress+0x80>)
 800ccdc:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 800ccde:	693b      	ldr	r3, [r7, #16]
 800cce0:	0c1b      	lsrs	r3, r3, #16
 800cce2:	b2da      	uxtb	r2, r3
 800cce4:	4b11      	ldr	r3, [pc, #68]	; (800cd2c <BleGetBdAddress+0x80>)
 800cce6:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	b2da      	uxtb	r2, r3
 800ccec:	4b0f      	ldr	r3, [pc, #60]	; (800cd2c <BleGetBdAddress+0x80>)
 800ccee:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	b2da      	uxtb	r2, r3
 800ccf4:	4b0d      	ldr	r3, [pc, #52]	; (800cd2c <BleGetBdAddress+0x80>)
 800ccf6:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800ccf8:	68bb      	ldr	r3, [r7, #8]
 800ccfa:	0a1b      	lsrs	r3, r3, #8
 800ccfc:	b2da      	uxtb	r2, r3
 800ccfe:	4b0b      	ldr	r3, [pc, #44]	; (800cd2c <BleGetBdAddress+0x80>)
 800cd00:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 800cd02:	4b0a      	ldr	r3, [pc, #40]	; (800cd2c <BleGetBdAddress+0x80>)
 800cd04:	617b      	str	r3, [r7, #20]
 800cd06:	e00b      	b.n	800cd20 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800cd08:	2000      	movs	r0, #0
 800cd0a:	f7ff fbd9 	bl	800c4c0 <OTP_Read>
 800cd0e:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d002      	beq.n	800cd1c <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	617b      	str	r3, [r7, #20]
 800cd1a:	e001      	b.n	800cd20 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 800cd1c:	4b04      	ldr	r3, [pc, #16]	; (800cd30 <BleGetBdAddress+0x84>)
 800cd1e:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 800cd20:	697b      	ldr	r3, [r7, #20]
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	3718      	adds	r7, #24
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}
 800cd2a:	bf00      	nop
 800cd2c:	200004c4 	.word	0x200004c4
 800cd30:	0800efdc 	.word	0x0800efdc

0800cd34 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b082      	sub	sp, #8
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800cd3c:	2100      	movs	r1, #0
 800cd3e:	2020      	movs	r0, #32
 800cd40:	f7f4 ffb8 	bl	8001cb4 <UTIL_SEQ_SetTask>
  return;
 800cd44:	bf00      	nop
}
 800cd46:	3708      	adds	r7, #8
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}

0800cd4c <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b082      	sub	sp, #8
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800cd54:	2001      	movs	r0, #1
 800cd56:	f7f5 f813 	bl	8001d80 <UTIL_SEQ_SetEvt>
  return;
 800cd5a:	bf00      	nop
}
 800cd5c:	3708      	adds	r7, #8
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}

0800cd62 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800cd62:	b580      	push	{r7, lr}
 800cd64:	b082      	sub	sp, #8
 800cd66:	af00      	add	r7, sp, #0
 800cd68:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800cd6a:	2001      	movs	r0, #1
 800cd6c:	f7f5 f826 	bl	8001dbc <UTIL_SEQ_WaitEvt>
  return;
 800cd70:	bf00      	nop
}
 800cd72:	3708      	adds	r7, #8
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}

0800cd78 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b084      	sub	sp, #16
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload; 
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	60fb      	str	r3, [r7, #12]
  
  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	685b      	ldr	r3, [r3, #4]
 800cd88:	3308      	adds	r3, #8
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f7fe fe96 	bl	800babc <SVCCTL_UserEvtRx>
 800cd90:	4603      	mov	r3, r0
 800cd92:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800cd94:	7afb      	ldrb	r3, [r7, #11]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d003      	beq.n	800cda2 <BLE_UserEvtRx+0x2a>
{
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	2201      	movs	r2, #1
 800cd9e:	701a      	strb	r2, [r3, #0]
}
  else
{
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 800cda0:	e002      	b.n	800cda8 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	2200      	movs	r2, #0
 800cda6:	701a      	strb	r2, [r3, #0]
}
 800cda8:	bf00      	nop
 800cdaa:	3710      	adds	r7, #16
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b084      	sub	sp, #16
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 800cdba:	79fb      	ldrb	r3, [r7, #7]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d002      	beq.n	800cdc6 <BLE_StatusNot+0x16>
 800cdc0:	2b01      	cmp	r3, #1
 800cdc2:	d006      	beq.n	800cdd2 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 800cdc4:	e00b      	b.n	800cdde <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800cdc6:	233f      	movs	r3, #63	; 0x3f
 800cdc8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800cdca:	68f8      	ldr	r0, [r7, #12]
 800cdcc:	f7f4 ff9c 	bl	8001d08 <UTIL_SEQ_PauseTask>
      break;
 800cdd0:	e005      	b.n	800cdde <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800cdd2:	233f      	movs	r3, #63	; 0x3f
 800cdd4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800cdd6:	68f8      	ldr	r0, [r7, #12]
 800cdd8:	f7f4 ffb4 	bl	8001d44 <UTIL_SEQ_ResumeTask>
      break;
 800cddc:	bf00      	nop
  }
  return;
 800cdde:	bf00      	nop
}
 800cde0:	3710      	adds	r7, #16
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}
	...

0800cde8 <P2PC_APP_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PC_APP_Init(void)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b082      	sub	sp, #8
 800cdec:	af00      	add	r7, sp, #0
  uint8_t index =0;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN P2PC_APP_Init_1 */

  UTIL_SEQ_RegTask( 1<< CFG_TASK_SEARCH_SERVICE_ID, UTIL_SEQ_RFU, Update_Service );
 800cdf2:	4a0d      	ldr	r2, [pc, #52]	; (800ce28 <P2PC_APP_Init+0x40>)
 800cdf4:	2100      	movs	r1, #0
 800cdf6:	2004      	movs	r0, #4
 800cdf8:	f7f4 ff3c 	bl	8001c74 <UTIL_SEQ_RegTask>

  /**
   * Initialize LedButton Service
   */

  for(index = 0; index < BLE_CFG_CLT_MAX_NBR_CB; index++)
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	71fb      	strb	r3, [r7, #7]
 800ce00:	e008      	b.n	800ce14 <P2PC_APP_Init+0x2c>
  {
    aP2PClientContext[index].state= APP_BLE_IDLE;
 800ce02:	79fb      	ldrb	r3, [r7, #7]
 800ce04:	4a09      	ldr	r2, [pc, #36]	; (800ce2c <P2PC_APP_Init+0x44>)
 800ce06:	011b      	lsls	r3, r3, #4
 800ce08:	4413      	add	r3, r2
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	701a      	strb	r2, [r3, #0]
  for(index = 0; index < BLE_CFG_CLT_MAX_NBR_CB; index++)
 800ce0e:	79fb      	ldrb	r3, [r7, #7]
 800ce10:	3301      	adds	r3, #1
 800ce12:	71fb      	strb	r3, [r7, #7]
 800ce14:	79fb      	ldrb	r3, [r7, #7]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d0f3      	beq.n	800ce02 <P2PC_APP_Init+0x1a>
  }

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterCltHandler(Event_Handler);
 800ce1a:	4805      	ldr	r0, [pc, #20]	; (800ce30 <P2PC_APP_Init+0x48>)
 800ce1c:	f7fe fe34 	bl	800ba88 <SVCCTL_RegisterCltHandler>
#endif

/* USER CODE BEGIN P2PC_APP_Init_2 */

/* USER CODE END P2PC_APP_Init_2 */
  return;
 800ce20:	bf00      	nop
}
 800ce22:	3708      	adds	r7, #8
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}
 800ce28:	0800d3f9 	.word	0x0800d3f9
 800ce2c:	20000370 	.word	0x20000370
 800ce30:	0800ce91 	.word	0x0800ce91

0800ce34 <P2PC_APP_Notification>:

void P2PC_APP_Notification(P2PC_APP_ConnHandle_Not_evt_t *pNotification)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b084      	sub	sp, #16
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PC_APP_Notification_1 */

/* USER CODE END P2PC_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	781b      	ldrb	r3, [r3, #0]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d01b      	beq.n	800ce7c <P2PC_APP_Notification+0x48>
 800ce44:	2b01      	cmp	r3, #1
 800ce46:	d000      	beq.n	800ce4a <P2PC_APP_Notification+0x16>

    default:
/* USER CODE BEGIN P2P_Evt_Opcode_Default */

/* USER CODE END P2P_Evt_Opcode_Default */
      break;
 800ce48:	e019      	b.n	800ce7e <P2PC_APP_Notification+0x4a>
      uint8_t index = 0;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	73fb      	strb	r3, [r7, #15]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800ce4e:	e005      	b.n	800ce5c <P2PC_APP_Notification+0x28>
        aP2PClientContext[index].state = APP_BLE_IDLE;
 800ce50:	7bfb      	ldrb	r3, [r7, #15]
 800ce52:	4a0d      	ldr	r2, [pc, #52]	; (800ce88 <P2PC_APP_Notification+0x54>)
 800ce54:	011b      	lsls	r3, r3, #4
 800ce56:	4413      	add	r3, r2
 800ce58:	2200      	movs	r2, #0
 800ce5a:	701a      	strb	r2, [r3, #0]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800ce5c:	7bfb      	ldrb	r3, [r7, #15]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d106      	bne.n	800ce70 <P2PC_APP_Notification+0x3c>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
 800ce62:	7bfb      	ldrb	r3, [r7, #15]
 800ce64:	4a08      	ldr	r2, [pc, #32]	; (800ce88 <P2PC_APP_Notification+0x54>)
 800ce66:	011b      	lsls	r3, r3, #4
 800ce68:	4413      	add	r3, r2
 800ce6a:	781b      	ldrb	r3, [r3, #0]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d1ef      	bne.n	800ce50 <P2PC_APP_Notification+0x1c>
      HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800ce70:	2200      	movs	r2, #0
 800ce72:	2120      	movs	r1, #32
 800ce74:	4805      	ldr	r0, [pc, #20]	; (800ce8c <P2PC_APP_Notification+0x58>)
 800ce76:	f7f5 ffa7 	bl	8002dc8 <HAL_GPIO_WritePin>
      break;
 800ce7a:	e000      	b.n	800ce7e <P2PC_APP_Notification+0x4a>
      break;
 800ce7c:	bf00      	nop
/* USER CODE BEGIN P2PC_APP_Notification_2 */

/* USER CODE END P2PC_APP_Notification_2 */
  return;
  }
}
 800ce7e:	bf00      	nop
 800ce80:	3710      	adds	r7, #16
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}
 800ce86:	bf00      	nop
 800ce88:	20000370 	.word	0x20000370
 800ce8c:	48000400 	.word	0x48000400

0800ce90 <Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Event_Handler(void *Event)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b094      	sub	sp, #80	; 0x50
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;

  P2P_Client_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	3301      	adds	r3, #1
 800cea2:	643b      	str	r3, [r7, #64]	; 0x40

  switch(event_pckt->evt)
 800cea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cea6:	781b      	ldrb	r3, [r3, #0]
 800cea8:	2bff      	cmp	r3, #255	; 0xff
 800ceaa:	d000      	beq.n	800ceae <Event_Handler+0x1e>
    }

    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800ceac:	e27b      	b.n	800d3a6 <Event_Handler+0x516>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 800ceae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ceb0:	3302      	adds	r3, #2
 800ceb2:	63fb      	str	r3, [r7, #60]	; 0x3c
      switch(blue_evt->ecode)
 800ceb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ceb6:	881b      	ldrh	r3, [r3, #0]
 800ceb8:	b29b      	uxth	r3, r3
 800ceba:	f6a3 4304 	subw	r3, r3, #3076	; 0xc04
 800cebe:	2b0c      	cmp	r3, #12
 800cec0:	f200 8265 	bhi.w	800d38e <Event_Handler+0x4fe>
 800cec4:	a201      	add	r2, pc, #4	; (adr r2, 800cecc <Event_Handler+0x3c>)
 800cec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceca:	bf00      	nop
 800cecc:	0800d1bf 	.word	0x0800d1bf
 800ced0:	0800d38f 	.word	0x0800d38f
 800ced4:	0800d0a1 	.word	0x0800d0a1
 800ced8:	0800d38f 	.word	0x0800d38f
 800cedc:	0800d38f 	.word	0x0800d38f
 800cee0:	0800d38f 	.word	0x0800d38f
 800cee4:	0800cf01 	.word	0x0800cf01
 800cee8:	0800d38f 	.word	0x0800d38f
 800ceec:	0800d38f 	.word	0x0800d38f
 800cef0:	0800d38f 	.word	0x0800d38f
 800cef4:	0800d38f 	.word	0x0800d38f
 800cef8:	0800d2c9 	.word	0x0800d2c9
 800cefc:	0800d345 	.word	0x0800d345
          aci_att_read_by_group_type_resp_event_rp0 *pr = (void*)blue_evt->data;
 800cf00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf02:	3302      	adds	r3, #2
 800cf04:	633b      	str	r3, [r7, #48]	; 0x30
          handle = pr->Connection_Handle;
 800cf06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf08:	781a      	ldrb	r2, [r3, #0]
 800cf0a:	785b      	ldrb	r3, [r3, #1]
 800cf0c:	021b      	lsls	r3, r3, #8
 800cf0e:	4313      	orrs	r3, r2
 800cf10:	85fb      	strh	r3, [r7, #46]	; 0x2e
          index = 0;
 800cf12:	2300      	movs	r3, #0
 800cf14:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800cf18:	e02e      	b.n	800cf78 <Event_Handler+0xe8>
            status = APP_BLE_Get_Client_Connection_Status(aP2PClientContext[index].connHandle);
 800cf1a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800cf1e:	4aab      	ldr	r2, [pc, #684]	; (800d1cc <Event_Handler+0x33c>)
 800cf20:	011b      	lsls	r3, r3, #4
 800cf22:	4413      	add	r3, r2
 800cf24:	3302      	adds	r3, #2
 800cf26:	881b      	ldrh	r3, [r3, #0]
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f7ff fd75 	bl	800ca18 <APP_BLE_Get_Client_Connection_Status>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            if((aP2PClientContext[index].state == APP_BLE_CONNECTED_CLIENT)&&
 800cf34:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800cf38:	4aa4      	ldr	r2, [pc, #656]	; (800d1cc <Event_Handler+0x33c>)
 800cf3a:	011b      	lsls	r3, r3, #4
 800cf3c:	4413      	add	r3, r2
 800cf3e:	781b      	ldrb	r3, [r3, #0]
 800cf40:	2b06      	cmp	r3, #6
 800cf42:	d114      	bne.n	800cf6e <Event_Handler+0xde>
 800cf44:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d110      	bne.n	800cf6e <Event_Handler+0xde>
              aP2PClientContext[index].state = APP_BLE_IDLE;
 800cf4c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800cf50:	4a9e      	ldr	r2, [pc, #632]	; (800d1cc <Event_Handler+0x33c>)
 800cf52:	011b      	lsls	r3, r3, #4
 800cf54:	4413      	add	r3, r2
 800cf56:	2200      	movs	r2, #0
 800cf58:	701a      	strb	r2, [r3, #0]
              aP2PClientContext[index].connHandle = 0xFFFF;
 800cf5a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800cf5e:	4a9b      	ldr	r2, [pc, #620]	; (800d1cc <Event_Handler+0x33c>)
 800cf60:	011b      	lsls	r3, r3, #4
 800cf62:	4413      	add	r3, r2
 800cf64:	3302      	adds	r3, #2
 800cf66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf6a:	801a      	strh	r2, [r3, #0]
              break;
 800cf6c:	e010      	b.n	800cf90 <Event_Handler+0x100>
            index++;
 800cf6e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800cf72:	3301      	adds	r3, #1
 800cf74:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800cf78:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d107      	bne.n	800cf90 <Event_Handler+0x100>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
 800cf80:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800cf84:	4a91      	ldr	r2, [pc, #580]	; (800d1cc <Event_Handler+0x33c>)
 800cf86:	011b      	lsls	r3, r3, #4
 800cf88:	4413      	add	r3, r2
 800cf8a:	781b      	ldrb	r3, [r3, #0]
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d1c4      	bne.n	800cf1a <Event_Handler+0x8a>
          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800cf90:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	f040 81fc 	bne.w	800d392 <Event_Handler+0x502>
            aP2PClientContext[index].connHandle= handle;
 800cf9a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800cf9e:	4a8b      	ldr	r2, [pc, #556]	; (800d1cc <Event_Handler+0x33c>)
 800cfa0:	011b      	lsls	r3, r3, #4
 800cfa2:	4413      	add	r3, r2
 800cfa4:	3302      	adds	r3, #2
 800cfa6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cfa8:	801a      	strh	r2, [r3, #0]
            numServ = (pr->Data_Length) / pr->Attribute_Data_Length;
 800cfaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfac:	78da      	ldrb	r2, [r3, #3]
 800cfae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb0:	789b      	ldrb	r3, [r3, #2]
 800cfb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfb6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
          if (pr->Attribute_Data_Length == 20)
 800cfba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfbc:	789b      	ldrb	r3, [r3, #2]
 800cfbe:	2b14      	cmp	r3, #20
 800cfc0:	f040 81e7 	bne.w	800d392 <Event_Handler+0x502>
            idx = 16;
 800cfc4:	2310      	movs	r3, #16
 800cfc6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
              for (i=0; i<numServ; i++)
 800cfca:	2300      	movs	r3, #0
 800cfcc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800cfd0:	e05f      	b.n	800d092 <Event_Handler+0x202>
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx]);
 800cfd2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800cfd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cfd8:	4413      	add	r3, r2
 800cfda:	791b      	ldrb	r3, [r3, #4]
 800cfdc:	b29a      	uxth	r2, r3
 800cfde:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800cfe2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cfe4:	440b      	add	r3, r1
 800cfe6:	3304      	adds	r3, #4
 800cfe8:	3301      	adds	r3, #1
 800cfea:	781b      	ldrb	r3, [r3, #0]
 800cfec:	b29b      	uxth	r3, r3
 800cfee:	021b      	lsls	r3, r3, #8
 800cff0:	b29b      	uxth	r3, r3
 800cff2:	4313      	orrs	r3, r2
 800cff4:	857b      	strh	r3, [r7, #42]	; 0x2a
                if(uuid == P2P_SERVICE_UUID)
 800cff6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cff8:	f64f 6240 	movw	r2, #65088	; 0xfe40
 800cffc:	4293      	cmp	r3, r2
 800cffe:	d13e      	bne.n	800d07e <Event_Handler+0x1ee>
                aP2PClientContext[index].P2PServiceHandle = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-16]);
 800d000:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800d004:	3b10      	subs	r3, #16
 800d006:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d008:	4413      	add	r3, r2
 800d00a:	791b      	ldrb	r3, [r3, #4]
 800d00c:	b299      	uxth	r1, r3
 800d00e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800d012:	3b10      	subs	r3, #16
 800d014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d016:	4413      	add	r3, r2
 800d018:	3304      	adds	r3, #4
 800d01a:	3301      	adds	r3, #1
 800d01c:	781b      	ldrb	r3, [r3, #0]
 800d01e:	b29b      	uxth	r3, r3
 800d020:	021b      	lsls	r3, r3, #8
 800d022:	b29a      	uxth	r2, r3
 800d024:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800d028:	430a      	orrs	r2, r1
 800d02a:	b291      	uxth	r1, r2
 800d02c:	4a67      	ldr	r2, [pc, #412]	; (800d1cc <Event_Handler+0x33c>)
 800d02e:	011b      	lsls	r3, r3, #4
 800d030:	4413      	add	r3, r2
 800d032:	3304      	adds	r3, #4
 800d034:	460a      	mov	r2, r1
 800d036:	801a      	strh	r2, [r3, #0]
                aP2PClientContext[index].P2PServiceEndHandle = UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-14]);
 800d038:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800d03c:	3b0e      	subs	r3, #14
 800d03e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d040:	4413      	add	r3, r2
 800d042:	791b      	ldrb	r3, [r3, #4]
 800d044:	b299      	uxth	r1, r3
 800d046:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800d04a:	3b0e      	subs	r3, #14
 800d04c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d04e:	4413      	add	r3, r2
 800d050:	3304      	adds	r3, #4
 800d052:	3301      	adds	r3, #1
 800d054:	781b      	ldrb	r3, [r3, #0]
 800d056:	b29b      	uxth	r3, r3
 800d058:	021b      	lsls	r3, r3, #8
 800d05a:	b29a      	uxth	r2, r3
 800d05c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800d060:	430a      	orrs	r2, r1
 800d062:	b291      	uxth	r1, r2
 800d064:	4a59      	ldr	r2, [pc, #356]	; (800d1cc <Event_Handler+0x33c>)
 800d066:	011b      	lsls	r3, r3, #4
 800d068:	4413      	add	r3, r2
 800d06a:	3306      	adds	r3, #6
 800d06c:	460a      	mov	r2, r1
 800d06e:	801a      	strh	r2, [r3, #0]
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_CHARACS ;
 800d070:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800d074:	4a55      	ldr	r2, [pc, #340]	; (800d1cc <Event_Handler+0x33c>)
 800d076:	011b      	lsls	r3, r3, #4
 800d078:	4413      	add	r3, r2
 800d07a:	2208      	movs	r2, #8
 800d07c:	701a      	strb	r2, [r3, #0]
                idx += 6;
 800d07e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800d082:	3306      	adds	r3, #6
 800d084:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
              for (i=0; i<numServ; i++)
 800d088:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d08c:	3301      	adds	r3, #1
 800d08e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800d092:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800d096:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d09a:	429a      	cmp	r2, r3
 800d09c:	d399      	bcc.n	800cfd2 <Event_Handler+0x142>
        break;
 800d09e:	e178      	b.n	800d392 <Event_Handler+0x502>
          aci_att_read_by_type_resp_event_rp0 *pr = (void*)blue_evt->data;
 800d0a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0a2:	3302      	adds	r3, #2
 800d0a4:	627b      	str	r3, [r7, #36]	; 0x24
          index = 0;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d0ac:	e004      	b.n	800d0b8 <Event_Handler+0x228>
            index++;
 800d0ae:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800d0b2:	3301      	adds	r3, #1
 800d0b4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d0b8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d10b      	bne.n	800d0d8 <Event_Handler+0x248>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800d0c0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800d0c4:	4a41      	ldr	r2, [pc, #260]	; (800d1cc <Event_Handler+0x33c>)
 800d0c6:	011b      	lsls	r3, r3, #4
 800d0c8:	4413      	add	r3, r2
 800d0ca:	3302      	adds	r3, #2
 800d0cc:	881a      	ldrh	r2, [r3, #0]
 800d0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d0:	881b      	ldrh	r3, [r3, #0]
 800d0d2:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d0d4:	429a      	cmp	r2, r3
 800d0d6:	d1ea      	bne.n	800d0ae <Event_Handler+0x21e>
          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800d0d8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	f040 815a 	bne.w	800d396 <Event_Handler+0x506>
            idx = 17;
 800d0e2:	2311      	movs	r3, #17
 800d0e4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
            if (pr->Handle_Value_Pair_Length == 21)
 800d0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ea:	789b      	ldrb	r3, [r3, #2]
 800d0ec:	2b15      	cmp	r3, #21
 800d0ee:	f040 8152 	bne.w	800d396 <Event_Handler+0x506>
              pr->Data_Length -= 1;
 800d0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0f4:	78db      	ldrb	r3, [r3, #3]
 800d0f6:	3b01      	subs	r3, #1
 800d0f8:	b2da      	uxtb	r2, r3
 800d0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0fc:	70da      	strb	r2, [r3, #3]
              while(pr->Data_Length > 0)
 800d0fe:	e059      	b.n	800d1b4 <Event_Handler+0x324>
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx]);
 800d100:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800d104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d106:	4413      	add	r3, r2
 800d108:	791b      	ldrb	r3, [r3, #4]
 800d10a:	b29a      	uxth	r2, r3
 800d10c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800d110:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d112:	440b      	add	r3, r1
 800d114:	3304      	adds	r3, #4
 800d116:	3301      	adds	r3, #1
 800d118:	781b      	ldrb	r3, [r3, #0]
 800d11a:	b29b      	uxth	r3, r3
 800d11c:	021b      	lsls	r3, r3, #8
 800d11e:	b29b      	uxth	r3, r3
 800d120:	4313      	orrs	r3, r2
 800d122:	847b      	strh	r3, [r7, #34]	; 0x22
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-14]);
 800d124:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800d128:	3b0e      	subs	r3, #14
 800d12a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d12c:	4413      	add	r3, r2
 800d12e:	791b      	ldrb	r3, [r3, #4]
 800d130:	b29a      	uxth	r2, r3
 800d132:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800d136:	3b0e      	subs	r3, #14
 800d138:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d13a:	440b      	add	r3, r1
 800d13c:	3304      	adds	r3, #4
 800d13e:	3301      	adds	r3, #1
 800d140:	781b      	ldrb	r3, [r3, #0]
 800d142:	b29b      	uxth	r3, r3
 800d144:	021b      	lsls	r3, r3, #8
 800d146:	b29b      	uxth	r3, r3
 800d148:	4313      	orrs	r3, r2
 800d14a:	843b      	strh	r3, [r7, #32]
                if(uuid == P2P_WRITE_CHAR_UUID)
 800d14c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d14e:	f64f 6241 	movw	r2, #65089	; 0xfe41
 800d152:	4293      	cmp	r3, r2
 800d154:	d10f      	bne.n	800d176 <Event_Handler+0x2e6>
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_WRITE_DESC;
 800d156:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800d15a:	4a1c      	ldr	r2, [pc, #112]	; (800d1cc <Event_Handler+0x33c>)
 800d15c:	011b      	lsls	r3, r3, #4
 800d15e:	4413      	add	r3, r2
 800d160:	2209      	movs	r2, #9
 800d162:	701a      	strb	r2, [r3, #0]
                  aP2PClientContext[index].P2PWriteToServerCharHdle = handle;
 800d164:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800d168:	4a18      	ldr	r2, [pc, #96]	; (800d1cc <Event_Handler+0x33c>)
 800d16a:	011b      	lsls	r3, r3, #4
 800d16c:	4413      	add	r3, r2
 800d16e:	3308      	adds	r3, #8
 800d170:	8c3a      	ldrh	r2, [r7, #32]
 800d172:	801a      	strh	r2, [r3, #0]
 800d174:	e013      	b.n	800d19e <Event_Handler+0x30e>
                else if(uuid == P2P_NOTIFY_CHAR_UUID)
 800d176:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d178:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800d17c:	4293      	cmp	r3, r2
 800d17e:	d10e      	bne.n	800d19e <Event_Handler+0x30e>
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC;
 800d180:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800d184:	4a11      	ldr	r2, [pc, #68]	; (800d1cc <Event_Handler+0x33c>)
 800d186:	011b      	lsls	r3, r3, #4
 800d188:	4413      	add	r3, r2
 800d18a:	220a      	movs	r2, #10
 800d18c:	701a      	strb	r2, [r3, #0]
                  aP2PClientContext[index].P2PNotificationCharHdle = handle;
 800d18e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800d192:	4a0e      	ldr	r2, [pc, #56]	; (800d1cc <Event_Handler+0x33c>)
 800d194:	011b      	lsls	r3, r3, #4
 800d196:	4413      	add	r3, r2
 800d198:	330c      	adds	r3, #12
 800d19a:	8c3a      	ldrh	r2, [r7, #32]
 800d19c:	801a      	strh	r2, [r3, #0]
                pr->Data_Length -= 21;
 800d19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a0:	78db      	ldrb	r3, [r3, #3]
 800d1a2:	3b15      	subs	r3, #21
 800d1a4:	b2da      	uxtb	r2, r3
 800d1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a8:	70da      	strb	r2, [r3, #3]
                idx += 21;
 800d1aa:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800d1ae:	3315      	adds	r3, #21
 800d1b0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
              while(pr->Data_Length > 0)
 800d1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b6:	78db      	ldrb	r3, [r3, #3]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d1a1      	bne.n	800d100 <Event_Handler+0x270>
        break;
 800d1bc:	e0eb      	b.n	800d396 <Event_Handler+0x506>
          aci_att_find_info_resp_event_rp0 *pr = (void*)blue_evt->data;
 800d1be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1c0:	3302      	adds	r3, #2
 800d1c2:	61fb      	str	r3, [r7, #28]
          index = 0;
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d1ca:	e006      	b.n	800d1da <Event_Handler+0x34a>
 800d1cc:	20000370 	.word	0x20000370
            index++;
 800d1d0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d1d4:	3301      	adds	r3, #1
 800d1d6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d1da:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d10b      	bne.n	800d1fa <Event_Handler+0x36a>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800d1e2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d1e6:	4a73      	ldr	r2, [pc, #460]	; (800d3b4 <Event_Handler+0x524>)
 800d1e8:	011b      	lsls	r3, r3, #4
 800d1ea:	4413      	add	r3, r2
 800d1ec:	3302      	adds	r3, #2
 800d1ee:	881a      	ldrh	r2, [r3, #0]
 800d1f0:	69fb      	ldr	r3, [r7, #28]
 800d1f2:	881b      	ldrh	r3, [r3, #0]
 800d1f4:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d1f6:	429a      	cmp	r2, r3
 800d1f8:	d1ea      	bne.n	800d1d0 <Event_Handler+0x340>
          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800d1fa:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	f040 80cb 	bne.w	800d39a <Event_Handler+0x50a>
            numDesc = (pr->Event_Data_Length) / 4;
 800d204:	69fb      	ldr	r3, [r7, #28]
 800d206:	78db      	ldrb	r3, [r3, #3]
 800d208:	089b      	lsrs	r3, r3, #2
 800d20a:	76fb      	strb	r3, [r7, #27]
            idx = 0;
 800d20c:	2300      	movs	r3, #0
 800d20e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            if (pr->Format == UUID_TYPE_16)
 800d212:	69fb      	ldr	r3, [r7, #28]
 800d214:	789b      	ldrb	r3, [r3, #2]
 800d216:	2b01      	cmp	r3, #1
 800d218:	f040 80bf 	bne.w	800d39a <Event_Handler+0x50a>
              for (i=0; i<numDesc; i++)
 800d21c:	2300      	movs	r3, #0
 800d21e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800d222:	e04b      	b.n	800d2bc <Event_Handler+0x42c>
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx]);
 800d224:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800d228:	69fa      	ldr	r2, [r7, #28]
 800d22a:	4413      	add	r3, r2
 800d22c:	791b      	ldrb	r3, [r3, #4]
 800d22e:	b29a      	uxth	r2, r3
 800d230:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800d234:	69f9      	ldr	r1, [r7, #28]
 800d236:	440b      	add	r3, r1
 800d238:	3304      	adds	r3, #4
 800d23a:	3301      	adds	r3, #1
 800d23c:	781b      	ldrb	r3, [r3, #0]
 800d23e:	b29b      	uxth	r3, r3
 800d240:	021b      	lsls	r3, r3, #8
 800d242:	b29b      	uxth	r3, r3
 800d244:	4313      	orrs	r3, r2
 800d246:	833b      	strh	r3, [r7, #24]
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx+2]);
 800d248:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800d24c:	3302      	adds	r3, #2
 800d24e:	69fa      	ldr	r2, [r7, #28]
 800d250:	4413      	add	r3, r2
 800d252:	791b      	ldrb	r3, [r3, #4]
 800d254:	b29a      	uxth	r2, r3
 800d256:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800d25a:	3302      	adds	r3, #2
 800d25c:	69f9      	ldr	r1, [r7, #28]
 800d25e:	440b      	add	r3, r1
 800d260:	3304      	adds	r3, #4
 800d262:	3301      	adds	r3, #1
 800d264:	781b      	ldrb	r3, [r3, #0]
 800d266:	b29b      	uxth	r3, r3
 800d268:	021b      	lsls	r3, r3, #8
 800d26a:	b29b      	uxth	r3, r3
 800d26c:	4313      	orrs	r3, r2
 800d26e:	82fb      	strh	r3, [r7, #22]
                if(uuid == CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID)
 800d270:	8afb      	ldrh	r3, [r7, #22]
 800d272:	f642 1202 	movw	r2, #10498	; 0x2902
 800d276:	4293      	cmp	r3, r2
 800d278:	d116      	bne.n	800d2a8 <Event_Handler+0x418>
                  if( aP2PClientContext[index].state == APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC)
 800d27a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d27e:	4a4d      	ldr	r2, [pc, #308]	; (800d3b4 <Event_Handler+0x524>)
 800d280:	011b      	lsls	r3, r3, #4
 800d282:	4413      	add	r3, r2
 800d284:	781b      	ldrb	r3, [r3, #0]
 800d286:	2b0a      	cmp	r3, #10
 800d288:	d10e      	bne.n	800d2a8 <Event_Handler+0x418>
                    aP2PClientContext[index].P2PNotificationDescHandle = handle;
 800d28a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d28e:	4a49      	ldr	r2, [pc, #292]	; (800d3b4 <Event_Handler+0x524>)
 800d290:	011b      	lsls	r3, r3, #4
 800d292:	4413      	add	r3, r2
 800d294:	330e      	adds	r3, #14
 800d296:	8b3a      	ldrh	r2, [r7, #24]
 800d298:	801a      	strh	r2, [r3, #0]
                    aP2PClientContext[index].state = APP_BLE_ENABLE_NOTIFICATION_DESC;
 800d29a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d29e:	4a45      	ldr	r2, [pc, #276]	; (800d3b4 <Event_Handler+0x524>)
 800d2a0:	011b      	lsls	r3, r3, #4
 800d2a2:	4413      	add	r3, r2
 800d2a4:	220b      	movs	r2, #11
 800d2a6:	701a      	strb	r2, [r3, #0]
                idx += 4;
 800d2a8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800d2ac:	3304      	adds	r3, #4
 800d2ae:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
              for (i=0; i<numDesc; i++)
 800d2b2:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800d2b6:	3301      	adds	r3, #1
 800d2b8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800d2bc:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800d2c0:	7efb      	ldrb	r3, [r7, #27]
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	d3ae      	bcc.n	800d224 <Event_Handler+0x394>
        break; /*EVT_BLUE_ATT_FIND_INFORMATION_RESP*/
 800d2c6:	e068      	b.n	800d39a <Event_Handler+0x50a>
          aci_gatt_notification_event_rp0 *pr = (void*)blue_evt->data;
 800d2c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2ca:	3302      	adds	r3, #2
 800d2cc:	637b      	str	r3, [r7, #52]	; 0x34
          index = 0;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d2d4:	e004      	b.n	800d2e0 <Event_Handler+0x450>
            index++;
 800d2d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d2da:	3301      	adds	r3, #1
 800d2dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d2e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d10b      	bne.n	800d300 <Event_Handler+0x470>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800d2e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d2ec:	4a31      	ldr	r2, [pc, #196]	; (800d3b4 <Event_Handler+0x524>)
 800d2ee:	011b      	lsls	r3, r3, #4
 800d2f0:	4413      	add	r3, r2
 800d2f2:	3302      	adds	r3, #2
 800d2f4:	881a      	ldrh	r2, [r3, #0]
 800d2f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2f8:	881b      	ldrh	r3, [r3, #0]
 800d2fa:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d2fc:	429a      	cmp	r2, r3
 800d2fe:	d1ea      	bne.n	800d2d6 <Event_Handler+0x446>
          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800d300:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d304:	2b00      	cmp	r3, #0
 800d306:	d14a      	bne.n	800d39e <Event_Handler+0x50e>
            if ( (pr->Attribute_Handle == aP2PClientContext[index].P2PNotificationCharHdle) &&
 800d308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d30a:	885b      	ldrh	r3, [r3, #2]
 800d30c:	b29a      	uxth	r2, r3
 800d30e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d312:	4928      	ldr	r1, [pc, #160]	; (800d3b4 <Event_Handler+0x524>)
 800d314:	011b      	lsls	r3, r3, #4
 800d316:	440b      	add	r3, r1
 800d318:	330c      	adds	r3, #12
 800d31a:	881b      	ldrh	r3, [r3, #0]
 800d31c:	429a      	cmp	r2, r3
 800d31e:	d13e      	bne.n	800d39e <Event_Handler+0x50e>
                    (pr->Attribute_Value_Length == (PAYLOAD_LENGTH)) )
 800d320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d322:	791b      	ldrb	r3, [r3, #4]
            if ( (pr->Attribute_Handle == aP2PClientContext[index].P2PNotificationCharHdle) &&
 800d324:	2b28      	cmp	r3, #40	; 0x28
 800d326:	d13a      	bne.n	800d39e <Event_Handler+0x50e>
              Notification.P2P_Client_Evt_Opcode = P2P_NOTIFICATION_INFO_RECEIVED_EVT;
 800d328:	2302      	movs	r3, #2
 800d32a:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length = pr->Attribute_Value_Length;
 800d32c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d32e:	791b      	ldrb	r3, [r3, #4]
 800d330:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload = &pr->Attribute_Value[0];
 800d332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d334:	3305      	adds	r3, #5
 800d336:	60fb      	str	r3, [r7, #12]
              Gatt_Notification(&Notification);
 800d338:	f107 0308 	add.w	r3, r7, #8
 800d33c:	4618      	mov	r0, r3
 800d33e:	f000 f83b 	bl	800d3b8 <Gatt_Notification>
        break;/* end EVT_BLUE_GATT_NOTIFICATION */
 800d342:	e02c      	b.n	800d39e <Event_Handler+0x50e>
          aci_gatt_proc_complete_event_rp0 *pr = (void*)blue_evt->data;
 800d344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d346:	3302      	adds	r3, #2
 800d348:	63bb      	str	r3, [r7, #56]	; 0x38
          index = 0;
 800d34a:	2300      	movs	r3, #0
 800d34c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d350:	e004      	b.n	800d35c <Event_Handler+0x4cc>
            index++;
 800d352:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d356:	3301      	adds	r3, #1
 800d358:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d35c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d360:	2b00      	cmp	r3, #0
 800d362:	d10b      	bne.n	800d37c <Event_Handler+0x4ec>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800d364:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d368:	4a12      	ldr	r2, [pc, #72]	; (800d3b4 <Event_Handler+0x524>)
 800d36a:	011b      	lsls	r3, r3, #4
 800d36c:	4413      	add	r3, r2
 800d36e:	3302      	adds	r3, #2
 800d370:	881a      	ldrh	r2, [r3, #0]
 800d372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d374:	881b      	ldrh	r3, [r3, #0]
 800d376:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d378:	429a      	cmp	r2, r3
 800d37a:	d1ea      	bne.n	800d352 <Event_Handler+0x4c2>
          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800d37c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d380:	2b00      	cmp	r3, #0
 800d382:	d10e      	bne.n	800d3a2 <Event_Handler+0x512>
            UTIL_SEQ_SetTask( 1<<CFG_TASK_SEARCH_SERVICE_ID, CFG_SCH_PRIO_0);
 800d384:	2100      	movs	r1, #0
 800d386:	2004      	movs	r0, #4
 800d388:	f7f4 fc94 	bl	8001cb4 <UTIL_SEQ_SetTask>
        break; /*EVT_BLUE_GATT_PROCEDURE_COMPLETE*/
 800d38c:	e009      	b.n	800d3a2 <Event_Handler+0x512>
          break;
 800d38e:	bf00      	nop
 800d390:	e008      	b.n	800d3a4 <Event_Handler+0x514>
        break;
 800d392:	bf00      	nop
 800d394:	e006      	b.n	800d3a4 <Event_Handler+0x514>
        break;
 800d396:	bf00      	nop
 800d398:	e004      	b.n	800d3a4 <Event_Handler+0x514>
        break; /*EVT_BLUE_ATT_FIND_INFORMATION_RESP*/
 800d39a:	bf00      	nop
 800d39c:	e002      	b.n	800d3a4 <Event_Handler+0x514>
        break;/* end EVT_BLUE_GATT_NOTIFICATION */
 800d39e:	bf00      	nop
 800d3a0:	e000      	b.n	800d3a4 <Event_Handler+0x514>
        break; /*EVT_BLUE_GATT_PROCEDURE_COMPLETE*/
 800d3a2:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 800d3a4:	bf00      	nop
  }

  return(return_value);
 800d3a6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
}/* end BLE_CTRL_Event_Acknowledged_Status_t */
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	3750      	adds	r7, #80	; 0x50
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}
 800d3b2:	bf00      	nop
 800d3b4:	20000370 	.word	0x20000370

0800d3b8 <Gatt_Notification>:

void Gatt_Notification(P2P_Client_App_Notification_evt_t *pNotification)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b082      	sub	sp, #8
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Gatt_Notification_1*/

/* USER CODE END Gatt_Notification_1 */
  switch(pNotification->P2P_Client_Evt_Opcode)
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	781b      	ldrb	r3, [r3, #0]
 800d3c4:	2b02      	cmp	r3, #2
 800d3c6:	d000      	beq.n	800d3ca <Gatt_Notification+0x12>

    default:
/* USER CODE BEGIN P2P_Client_Evt_Opcode_Default */

/* USER CODE END P2P_Client_Evt_Opcode_Default */
      break;
 800d3c8:	e00f      	b.n	800d3ea <Gatt_Notification+0x32>
		transmit_CDC_messege(pNotification->DataTransfered.pPayload, PAYLOAD_LENGTH);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	685b      	ldr	r3, [r3, #4]
 800d3ce:	2128      	movs	r1, #40	; 0x28
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f7f4 f987 	bl	80016e4 <transmit_CDC_messege>
    	HAL_GPIO_TogglePin(TEST_GPIO_Port, TEST_Pin);
 800d3d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d3da:	4806      	ldr	r0, [pc, #24]	; (800d3f4 <Gatt_Notification+0x3c>)
 800d3dc:	f7f5 fd24 	bl	8002e28 <HAL_GPIO_TogglePin>
    	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800d3e0:	2102      	movs	r1, #2
 800d3e2:	4804      	ldr	r0, [pc, #16]	; (800d3f4 <Gatt_Notification+0x3c>)
 800d3e4:	f7f5 fd20 	bl	8002e28 <HAL_GPIO_TogglePin>
    break;
 800d3e8:	bf00      	nop
  }
/* USER CODE BEGIN Gatt_Notification_2*/
}
 800d3ea:	bf00      	nop
 800d3ec:	3708      	adds	r7, #8
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}
 800d3f2:	bf00      	nop
 800d3f4:	48000400 	.word	0x48000400

0800d3f8 <Update_Service>:
//
//  return;
//}

void Update_Service()
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b082      	sub	sp, #8
 800d3fc:	af00      	add	r7, sp, #0
  uint16_t enable = 0x0001;
 800d3fe:	2301      	movs	r3, #1
 800d400:	80bb      	strh	r3, [r7, #4]


  uint8_t index;

  index = 0;
 800d402:	2300      	movs	r3, #0
 800d404:	71fb      	strb	r3, [r7, #7]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d406:	e094      	b.n	800d532 <Update_Service+0x13a>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
  {


    switch(aP2PClientContext[index].state)
 800d408:	79fb      	ldrb	r3, [r7, #7]
 800d40a:	4a52      	ldr	r2, [pc, #328]	; (800d554 <Update_Service+0x15c>)
 800d40c:	011b      	lsls	r3, r3, #4
 800d40e:	4413      	add	r3, r2
 800d410:	781b      	ldrb	r3, [r3, #0]
 800d412:	3b07      	subs	r3, #7
 800d414:	2b05      	cmp	r3, #5
 800d416:	f200 8088 	bhi.w	800d52a <Update_Service+0x132>
 800d41a:	a201      	add	r2, pc, #4	; (adr r2, 800d420 <Update_Service+0x28>)
 800d41c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d420:	0800d52b 	.word	0x0800d52b
 800d424:	0800d439 	.word	0x0800d439
 800d428:	0800d465 	.word	0x0800d465
 800d42c:	0800d495 	.word	0x0800d495
 800d430:	0800d4c5 	.word	0x0800d4c5
 800d434:	0800d4fd 	.word	0x0800d4fd
      case APP_BLE_DISCOVER_SERVICES:
        //APP_DBG_MSG("P2P_DISCOVER_SERVICES\n");
        break;
      case APP_BLE_DISCOVER_CHARACS:
        //APP_DBG_MSG("* GATT : Discover P2P Characteristics\n");
        aci_gatt_disc_all_char_of_service(aP2PClientContext[index].connHandle,
 800d438:	79fb      	ldrb	r3, [r7, #7]
 800d43a:	4a46      	ldr	r2, [pc, #280]	; (800d554 <Update_Service+0x15c>)
 800d43c:	011b      	lsls	r3, r3, #4
 800d43e:	4413      	add	r3, r2
 800d440:	3302      	adds	r3, #2
 800d442:	8818      	ldrh	r0, [r3, #0]
 800d444:	79fb      	ldrb	r3, [r7, #7]
 800d446:	4a43      	ldr	r2, [pc, #268]	; (800d554 <Update_Service+0x15c>)
 800d448:	011b      	lsls	r3, r3, #4
 800d44a:	4413      	add	r3, r2
 800d44c:	3304      	adds	r3, #4
 800d44e:	8819      	ldrh	r1, [r3, #0]
 800d450:	79fb      	ldrb	r3, [r7, #7]
 800d452:	4a40      	ldr	r2, [pc, #256]	; (800d554 <Update_Service+0x15c>)
 800d454:	011b      	lsls	r3, r3, #4
 800d456:	4413      	add	r3, r2
 800d458:	3306      	adds	r3, #6
 800d45a:	881b      	ldrh	r3, [r3, #0]
 800d45c:	461a      	mov	r2, r3
 800d45e:	f7fd fee7 	bl	800b230 <aci_gatt_disc_all_char_of_service>
                                          aP2PClientContext[index].P2PServiceHandle,
                                         aP2PClientContext[index].P2PServiceEndHandle);

        break;
 800d462:	e063      	b.n	800d52c <Update_Service+0x134>
      case APP_BLE_DISCOVER_WRITE_DESC: /* Not Used - No decriptor */
        //APP_DBG_MSG("* GATT : Discover Descriptor of TX - Write Characteritic\n");
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800d464:	79fb      	ldrb	r3, [r7, #7]
 800d466:	4a3b      	ldr	r2, [pc, #236]	; (800d554 <Update_Service+0x15c>)
 800d468:	011b      	lsls	r3, r3, #4
 800d46a:	4413      	add	r3, r2
 800d46c:	3302      	adds	r3, #2
 800d46e:	8818      	ldrh	r0, [r3, #0]
 800d470:	79fb      	ldrb	r3, [r7, #7]
 800d472:	4a38      	ldr	r2, [pc, #224]	; (800d554 <Update_Service+0x15c>)
 800d474:	011b      	lsls	r3, r3, #4
 800d476:	4413      	add	r3, r2
 800d478:	3308      	adds	r3, #8
 800d47a:	8819      	ldrh	r1, [r3, #0]
                                    aP2PClientContext[index].P2PWriteToServerCharHdle,
                                    aP2PClientContext[index].P2PWriteToServerCharHdle+2);
 800d47c:	79fb      	ldrb	r3, [r7, #7]
 800d47e:	4a35      	ldr	r2, [pc, #212]	; (800d554 <Update_Service+0x15c>)
 800d480:	011b      	lsls	r3, r3, #4
 800d482:	4413      	add	r3, r2
 800d484:	3308      	adds	r3, #8
 800d486:	881b      	ldrh	r3, [r3, #0]
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800d488:	3302      	adds	r3, #2
 800d48a:	b29b      	uxth	r3, r3
 800d48c:	461a      	mov	r2, r3
 800d48e:	f7fd ff41 	bl	800b314 <aci_gatt_disc_all_char_desc>

        break;
 800d492:	e04b      	b.n	800d52c <Update_Service+0x134>
      case APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC:
        //APP_DBG_MSG("* GATT : Discover Descriptor of Rx - Notification Characteritic\n");
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800d494:	79fb      	ldrb	r3, [r7, #7]
 800d496:	4a2f      	ldr	r2, [pc, #188]	; (800d554 <Update_Service+0x15c>)
 800d498:	011b      	lsls	r3, r3, #4
 800d49a:	4413      	add	r3, r2
 800d49c:	3302      	adds	r3, #2
 800d49e:	8818      	ldrh	r0, [r3, #0]
 800d4a0:	79fb      	ldrb	r3, [r7, #7]
 800d4a2:	4a2c      	ldr	r2, [pc, #176]	; (800d554 <Update_Service+0x15c>)
 800d4a4:	011b      	lsls	r3, r3, #4
 800d4a6:	4413      	add	r3, r2
 800d4a8:	330c      	adds	r3, #12
 800d4aa:	8819      	ldrh	r1, [r3, #0]
                                    aP2PClientContext[index].P2PNotificationCharHdle,
                                    aP2PClientContext[index].P2PNotificationCharHdle+2);
 800d4ac:	79fb      	ldrb	r3, [r7, #7]
 800d4ae:	4a29      	ldr	r2, [pc, #164]	; (800d554 <Update_Service+0x15c>)
 800d4b0:	011b      	lsls	r3, r3, #4
 800d4b2:	4413      	add	r3, r2
 800d4b4:	330c      	adds	r3, #12
 800d4b6:	881b      	ldrh	r3, [r3, #0]
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800d4b8:	3302      	adds	r3, #2
 800d4ba:	b29b      	uxth	r3, r3
 800d4bc:	461a      	mov	r2, r3
 800d4be:	f7fd ff29 	bl	800b314 <aci_gatt_disc_all_char_desc>

        break;
 800d4c2:	e033      	b.n	800d52c <Update_Service+0x134>
      case APP_BLE_ENABLE_NOTIFICATION_DESC:
        //APP_DBG_MSG("* GATT : Enable Server Notification\n");
        aci_gatt_write_char_desc(aP2PClientContext[index].connHandle,
 800d4c4:	79fb      	ldrb	r3, [r7, #7]
 800d4c6:	4a23      	ldr	r2, [pc, #140]	; (800d554 <Update_Service+0x15c>)
 800d4c8:	011b      	lsls	r3, r3, #4
 800d4ca:	4413      	add	r3, r2
 800d4cc:	3302      	adds	r3, #2
 800d4ce:	8818      	ldrh	r0, [r3, #0]
 800d4d0:	79fb      	ldrb	r3, [r7, #7]
 800d4d2:	4a20      	ldr	r2, [pc, #128]	; (800d554 <Update_Service+0x15c>)
 800d4d4:	011b      	lsls	r3, r3, #4
 800d4d6:	4413      	add	r3, r2
 800d4d8:	330e      	adds	r3, #14
 800d4da:	8819      	ldrh	r1, [r3, #0]
 800d4dc:	1d3b      	adds	r3, r7, #4
 800d4de:	2202      	movs	r2, #2
 800d4e0:	f7fd ff8a 	bl	800b3f8 <aci_gatt_write_char_desc>
                                 aP2PClientContext[index].P2PNotificationDescHandle,
                                 2,
                                 (uint8_t *)&enable);

        aP2PClientContext[index].state = APP_BLE_CONNECTED_CLIENT;
 800d4e4:	79fb      	ldrb	r3, [r7, #7]
 800d4e6:	4a1b      	ldr	r2, [pc, #108]	; (800d554 <Update_Service+0x15c>)
 800d4e8:	011b      	lsls	r3, r3, #4
 800d4ea:	4413      	add	r3, r2
 800d4ec:	2206      	movs	r2, #6
 800d4ee:	701a      	strb	r2, [r3, #0]
        //BSP_LED_Off(LED_RED);
        HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	2102      	movs	r1, #2
 800d4f4:	4818      	ldr	r0, [pc, #96]	; (800d558 <Update_Service+0x160>)
 800d4f6:	f7f5 fc67 	bl	8002dc8 <HAL_GPIO_WritePin>

        break;
 800d4fa:	e017      	b.n	800d52c <Update_Service+0x134>
      case APP_BLE_DISABLE_NOTIFICATION_DESC :
        //APP_DBG_MSG("* GATT : Disable Server Notification\n");
        aci_gatt_write_char_desc(aP2PClientContext[index].connHandle,
 800d4fc:	79fb      	ldrb	r3, [r7, #7]
 800d4fe:	4a15      	ldr	r2, [pc, #84]	; (800d554 <Update_Service+0x15c>)
 800d500:	011b      	lsls	r3, r3, #4
 800d502:	4413      	add	r3, r2
 800d504:	3302      	adds	r3, #2
 800d506:	8818      	ldrh	r0, [r3, #0]
 800d508:	79fb      	ldrb	r3, [r7, #7]
 800d50a:	4a12      	ldr	r2, [pc, #72]	; (800d554 <Update_Service+0x15c>)
 800d50c:	011b      	lsls	r3, r3, #4
 800d50e:	4413      	add	r3, r2
 800d510:	330e      	adds	r3, #14
 800d512:	8819      	ldrh	r1, [r3, #0]
 800d514:	1d3b      	adds	r3, r7, #4
 800d516:	2202      	movs	r2, #2
 800d518:	f7fd ff6e 	bl	800b3f8 <aci_gatt_write_char_desc>
                                 aP2PClientContext[index].P2PNotificationDescHandle,
                                 2,
                                 (uint8_t *)&enable);

        aP2PClientContext[index].state = APP_BLE_CONNECTED_CLIENT;
 800d51c:	79fb      	ldrb	r3, [r7, #7]
 800d51e:	4a0d      	ldr	r2, [pc, #52]	; (800d554 <Update_Service+0x15c>)
 800d520:	011b      	lsls	r3, r3, #4
 800d522:	4413      	add	r3, r2
 800d524:	2206      	movs	r2, #6
 800d526:	701a      	strb	r2, [r3, #0]

        break;
 800d528:	e000      	b.n	800d52c <Update_Service+0x134>
      default:
        break;
 800d52a:	bf00      	nop
    }
    index++;
 800d52c:	79fb      	ldrb	r3, [r7, #7]
 800d52e:	3301      	adds	r3, #1
 800d530:	71fb      	strb	r3, [r7, #7]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d532:	79fb      	ldrb	r3, [r7, #7]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d108      	bne.n	800d54a <Update_Service+0x152>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
 800d538:	79fb      	ldrb	r3, [r7, #7]
 800d53a:	4a06      	ldr	r2, [pc, #24]	; (800d554 <Update_Service+0x15c>)
 800d53c:	011b      	lsls	r3, r3, #4
 800d53e:	4413      	add	r3, r2
 800d540:	781b      	ldrb	r3, [r3, #0]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d542:	2b00      	cmp	r3, #0
 800d544:	f47f af60 	bne.w	800d408 <Update_Service+0x10>
  }
  return;
 800d548:	bf00      	nop
 800d54a:	bf00      	nop
}
 800d54c:	3708      	adds	r7, #8
 800d54e:	46bd      	mov	sp, r7
 800d550:	bd80      	pop	{r7, pc}
 800d552:	bf00      	nop
 800d554:	20000370 	.word	0x20000370
 800d558:	48000400 	.word	0x48000400

0800d55c <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 800d55c:	b480      	push	{r7}
 800d55e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800d560:	4b05      	ldr	r3, [pc, #20]	; (800d578 <LL_PWR_EnableBootC2+0x1c>)
 800d562:	68db      	ldr	r3, [r3, #12]
 800d564:	4a04      	ldr	r2, [pc, #16]	; (800d578 <LL_PWR_EnableBootC2+0x1c>)
 800d566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d56a:	60d3      	str	r3, [r2, #12]
}
 800d56c:	bf00      	nop
 800d56e:	46bd      	mov	sp, r7
 800d570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d574:	4770      	bx	lr
 800d576:	bf00      	nop
 800d578:	58000400 	.word	0x58000400

0800d57c <LL_AHB3_GRP1_EnableClock>:
{
 800d57c:	b480      	push	{r7}
 800d57e:	b085      	sub	sp, #20
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800d584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d588:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d58a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	4313      	orrs	r3, r2
 800d592:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800d594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d598:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	4013      	ands	r3, r2
 800d59e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
}
 800d5a2:	bf00      	nop
 800d5a4:	3714      	adds	r7, #20
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ac:	4770      	bx	lr

0800d5ae <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800d5ae:	b480      	push	{r7}
 800d5b0:	b083      	sub	sp, #12
 800d5b2:	af00      	add	r7, sp, #0
 800d5b4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	601a      	str	r2, [r3, #0]
}
 800d5c2:	bf00      	nop
 800d5c4:	370c      	adds	r7, #12
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5cc:	4770      	bx	lr

0800d5ce <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800d5ce:	b480      	push	{r7}
 800d5d0:	b083      	sub	sp, #12
 800d5d2:	af00      	add	r7, sp, #0
 800d5d4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	f043 0201 	orr.w	r2, r3, #1
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	601a      	str	r2, [r3, #0]
}
 800d5e2:	bf00      	nop
 800d5e4:	370c      	adds	r7, #12
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ec:	4770      	bx	lr

0800d5ee <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d5ee:	b480      	push	{r7}
 800d5f0:	b083      	sub	sp, #12
 800d5f2:	af00      	add	r7, sp, #0
 800d5f4:	6078      	str	r0, [r7, #4]
 800d5f6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	685a      	ldr	r2, [r3, #4]
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	041b      	lsls	r3, r3, #16
 800d600:	43db      	mvns	r3, r3
 800d602:	401a      	ands	r2, r3
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	605a      	str	r2, [r3, #4]
}
 800d608:	bf00      	nop
 800d60a:	370c      	adds	r7, #12
 800d60c:	46bd      	mov	sp, r7
 800d60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d612:	4770      	bx	lr

0800d614 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d614:	b480      	push	{r7}
 800d616:	b083      	sub	sp, #12
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
 800d61c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	685a      	ldr	r2, [r3, #4]
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	041b      	lsls	r3, r3, #16
 800d626:	431a      	orrs	r2, r3
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	605a      	str	r2, [r3, #4]
}
 800d62c:	bf00      	nop
 800d62e:	370c      	adds	r7, #12
 800d630:	46bd      	mov	sp, r7
 800d632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d636:	4770      	bx	lr

0800d638 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d638:	b480      	push	{r7}
 800d63a:	b083      	sub	sp, #12
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
 800d640:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	685a      	ldr	r2, [r3, #4]
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	43db      	mvns	r3, r3
 800d64a:	401a      	ands	r2, r3
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	605a      	str	r2, [r3, #4]
}
 800d650:	bf00      	nop
 800d652:	370c      	adds	r7, #12
 800d654:	46bd      	mov	sp, r7
 800d656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65a:	4770      	bx	lr

0800d65c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d65c:	b480      	push	{r7}
 800d65e:	b083      	sub	sp, #12
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
 800d664:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	683a      	ldr	r2, [r7, #0]
 800d66a:	609a      	str	r2, [r3, #8]
}
 800d66c:	bf00      	nop
 800d66e:	370c      	adds	r7, #12
 800d670:	46bd      	mov	sp, r7
 800d672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d676:	4770      	bx	lr

0800d678 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d678:	b480      	push	{r7}
 800d67a:	b083      	sub	sp, #12
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
 800d680:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	041a      	lsls	r2, r3, #16
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	609a      	str	r2, [r3, #8]
}
 800d68a:	bf00      	nop
 800d68c:	370c      	adds	r7, #12
 800d68e:	46bd      	mov	sp, r7
 800d690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d694:	4770      	bx	lr

0800d696 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d696:	b480      	push	{r7}
 800d698:	b083      	sub	sp, #12
 800d69a:	af00      	add	r7, sp, #0
 800d69c:	6078      	str	r0, [r7, #4]
 800d69e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	68da      	ldr	r2, [r3, #12]
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	4013      	ands	r3, r2
 800d6a8:	683a      	ldr	r2, [r7, #0]
 800d6aa:	429a      	cmp	r2, r3
 800d6ac:	d101      	bne.n	800d6b2 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	e000      	b.n	800d6b4 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800d6b2:	2300      	movs	r3, #0
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	370c      	adds	r7, #12
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6be:	4770      	bx	lr

0800d6c0 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b083      	sub	sp, #12
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
 800d6c8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	69da      	ldr	r2, [r3, #28]
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	4013      	ands	r3, r2
 800d6d2:	683a      	ldr	r2, [r7, #0]
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	d101      	bne.n	800d6dc <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800d6d8:	2301      	movs	r3, #1
 800d6da:	e000      	b.n	800d6de <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800d6dc:	2300      	movs	r3, #0
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	370c      	adds	r7, #12
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e8:	4770      	bx	lr
	...

0800d6ec <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800d6f0:	2102      	movs	r1, #2
 800d6f2:	4819      	ldr	r0, [pc, #100]	; (800d758 <HW_IPCC_Rx_Handler+0x6c>)
 800d6f4:	f7ff ffe4 	bl	800d6c0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d009      	beq.n	800d712 <HW_IPCC_Rx_Handler+0x26>
 800d6fe:	4b16      	ldr	r3, [pc, #88]	; (800d758 <HW_IPCC_Rx_Handler+0x6c>)
 800d700:	685b      	ldr	r3, [r3, #4]
 800d702:	43db      	mvns	r3, r3
 800d704:	f003 0302 	and.w	r3, r3, #2
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d002      	beq.n	800d712 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800d70c:	f000 f8de 	bl	800d8cc <HW_IPCC_SYS_EvtHandler>
 800d710:	e01f      	b.n	800d752 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CliNotifEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800d712:	2101      	movs	r1, #1
 800d714:	4810      	ldr	r0, [pc, #64]	; (800d758 <HW_IPCC_Rx_Handler+0x6c>)
 800d716:	f7ff ffd3 	bl	800d6c0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d71a:	4603      	mov	r3, r0
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d008      	beq.n	800d732 <HW_IPCC_Rx_Handler+0x46>
 800d720:	4b0d      	ldr	r3, [pc, #52]	; (800d758 <HW_IPCC_Rx_Handler+0x6c>)
 800d722:	685b      	ldr	r3, [r3, #4]
 800d724:	f003 0301 	and.w	r3, r3, #1
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d102      	bne.n	800d732 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800d72c:	f000 f892 	bl	800d854 <HW_IPCC_BLE_EvtHandler>
 800d730:	e00f      	b.n	800d752 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800d732:	2108      	movs	r1, #8
 800d734:	4808      	ldr	r0, [pc, #32]	; (800d758 <HW_IPCC_Rx_Handler+0x6c>)
 800d736:	f7ff ffc3 	bl	800d6c0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d73a:	4603      	mov	r3, r0
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d009      	beq.n	800d754 <HW_IPCC_Rx_Handler+0x68>
 800d740:	4b05      	ldr	r3, [pc, #20]	; (800d758 <HW_IPCC_Rx_Handler+0x6c>)
 800d742:	685b      	ldr	r3, [r3, #4]
 800d744:	43db      	mvns	r3, r3
 800d746:	f003 0308 	and.w	r3, r3, #8
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d002      	beq.n	800d754 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800d74e:	f000 f909 	bl	800d964 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800d752:	bf00      	nop
 800d754:	bf00      	nop
}
 800d756:	bd80      	pop	{r7, pc}
 800d758:	58000c00 	.word	0x58000c00

0800d75c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800d760:	2102      	movs	r1, #2
 800d762:	4822      	ldr	r0, [pc, #136]	; (800d7ec <HW_IPCC_Tx_Handler+0x90>)
 800d764:	f7ff ff97 	bl	800d696 <LL_C1_IPCC_IsActiveFlag_CHx>
 800d768:	4603      	mov	r3, r0
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d109      	bne.n	800d782 <HW_IPCC_Tx_Handler+0x26>
 800d76e:	4b1f      	ldr	r3, [pc, #124]	; (800d7ec <HW_IPCC_Tx_Handler+0x90>)
 800d770:	685b      	ldr	r3, [r3, #4]
 800d772:	43db      	mvns	r3, r3
 800d774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d002      	beq.n	800d782 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800d77c:	f000 f89a 	bl	800d8b4 <HW_IPCC_SYS_CmdEvtHandler>
 800d780:	e031      	b.n	800d7e6 <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800d782:	2102      	movs	r1, #2
 800d784:	4819      	ldr	r0, [pc, #100]	; (800d7ec <HW_IPCC_Tx_Handler+0x90>)
 800d786:	f7ff ff86 	bl	800d696 <LL_C1_IPCC_IsActiveFlag_CHx>
 800d78a:	4603      	mov	r3, r0
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d109      	bne.n	800d7a4 <HW_IPCC_Tx_Handler+0x48>
 800d790:	4b16      	ldr	r3, [pc, #88]	; (800d7ec <HW_IPCC_Tx_Handler+0x90>)
 800d792:	685b      	ldr	r3, [r3, #4]
 800d794:	43db      	mvns	r3, r3
 800d796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d002      	beq.n	800d7a4 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800d79e:	f000 f889 	bl	800d8b4 <HW_IPCC_SYS_CmdEvtHandler>
 800d7a2:	e020      	b.n	800d7e6 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800d7a4:	2108      	movs	r1, #8
 800d7a6:	4811      	ldr	r0, [pc, #68]	; (800d7ec <HW_IPCC_Tx_Handler+0x90>)
 800d7a8:	f7ff ff75 	bl	800d696 <LL_C1_IPCC_IsActiveFlag_CHx>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d109      	bne.n	800d7c6 <HW_IPCC_Tx_Handler+0x6a>
 800d7b2:	4b0e      	ldr	r3, [pc, #56]	; (800d7ec <HW_IPCC_Tx_Handler+0x90>)
 800d7b4:	685b      	ldr	r3, [r3, #4]
 800d7b6:	43db      	mvns	r3, r3
 800d7b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d002      	beq.n	800d7c6 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 800d7c0:	f000 f8b2 	bl	800d928 <HW_IPCC_MM_FreeBufHandler>
 800d7c4:	e00f      	b.n	800d7e6 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800d7c6:	2120      	movs	r1, #32
 800d7c8:	4808      	ldr	r0, [pc, #32]	; (800d7ec <HW_IPCC_Tx_Handler+0x90>)
 800d7ca:	f7ff ff64 	bl	800d696 <LL_C1_IPCC_IsActiveFlag_CHx>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d109      	bne.n	800d7e8 <HW_IPCC_Tx_Handler+0x8c>
 800d7d4:	4b05      	ldr	r3, [pc, #20]	; (800d7ec <HW_IPCC_Tx_Handler+0x90>)
 800d7d6:	685b      	ldr	r3, [r3, #4]
 800d7d8:	43db      	mvns	r3, r3
 800d7da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d002      	beq.n	800d7e8 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800d7e2:	f000 f843 	bl	800d86c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800d7e6:	bf00      	nop
 800d7e8:	bf00      	nop
}
 800d7ea:	bd80      	pop	{r7, pc}
 800d7ec:	58000c00 	.word	0x58000c00

0800d7f0 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	af00      	add	r7, sp, #0
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800d7f4:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800d7f6:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800d7f8:	f7ff feb0 	bl	800d55c <LL_PWR_EnableBootC2>

  return;
 800d7fc:	bf00      	nop
}
 800d7fe:	bd80      	pop	{r7, pc}

0800d800 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800d800:	b580      	push	{r7, lr}
 800d802:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800d804:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800d808:	f7ff feb8 	bl	800d57c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800d80c:	4806      	ldr	r0, [pc, #24]	; (800d828 <HW_IPCC_Init+0x28>)
 800d80e:	f7ff fede 	bl	800d5ce <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800d812:	4805      	ldr	r0, [pc, #20]	; (800d828 <HW_IPCC_Init+0x28>)
 800d814:	f7ff fecb 	bl	800d5ae <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800d818:	202c      	movs	r0, #44	; 0x2c
 800d81a:	f7f5 f829 	bl	8002870 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800d81e:	202d      	movs	r0, #45	; 0x2d
 800d820:	f7f5 f826 	bl	8002870 <HAL_NVIC_EnableIRQ>

  return;
 800d824:	bf00      	nop
}
 800d826:	bd80      	pop	{r7, pc}
 800d828:	58000c00 	.word	0x58000c00

0800d82c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800d830:	2101      	movs	r1, #1
 800d832:	4802      	ldr	r0, [pc, #8]	; (800d83c <HW_IPCC_BLE_Init+0x10>)
 800d834:	f7ff ff00 	bl	800d638 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d838:	bf00      	nop
}
 800d83a:	bd80      	pop	{r7, pc}
 800d83c:	58000c00 	.word	0x58000c00

0800d840 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800d840:	b580      	push	{r7, lr}
 800d842:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800d844:	2101      	movs	r1, #1
 800d846:	4802      	ldr	r0, [pc, #8]	; (800d850 <HW_IPCC_BLE_SendCmd+0x10>)
 800d848:	f7ff ff16 	bl	800d678 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800d84c:	bf00      	nop
}
 800d84e:	bd80      	pop	{r7, pc}
 800d850:	58000c00 	.word	0x58000c00

0800d854 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800d854:	b580      	push	{r7, lr}
 800d856:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800d858:	f7fe fcfc 	bl	800c254 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800d85c:	2101      	movs	r1, #1
 800d85e:	4802      	ldr	r0, [pc, #8]	; (800d868 <HW_IPCC_BLE_EvtHandler+0x14>)
 800d860:	f7ff fefc 	bl	800d65c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d864:	bf00      	nop
}
 800d866:	bd80      	pop	{r7, pc}
 800d868:	58000c00 	.word	0x58000c00

0800d86c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800d870:	2120      	movs	r1, #32
 800d872:	4803      	ldr	r0, [pc, #12]	; (800d880 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800d874:	f7ff fece 	bl	800d614 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800d878:	f7fe fd08 	bl	800c28c <HW_IPCC_BLE_AclDataAckNot>

  return;
 800d87c:	bf00      	nop
}
 800d87e:	bd80      	pop	{r7, pc}
 800d880:	58000c00 	.word	0x58000c00

0800d884 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800d884:	b580      	push	{r7, lr}
 800d886:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800d888:	2102      	movs	r1, #2
 800d88a:	4802      	ldr	r0, [pc, #8]	; (800d894 <HW_IPCC_SYS_Init+0x10>)
 800d88c:	f7ff fed4 	bl	800d638 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d890:	bf00      	nop
}
 800d892:	bd80      	pop	{r7, pc}
 800d894:	58000c00 	.word	0x58000c00

0800d898 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d89c:	2102      	movs	r1, #2
 800d89e:	4804      	ldr	r0, [pc, #16]	; (800d8b0 <HW_IPCC_SYS_SendCmd+0x18>)
 800d8a0:	f7ff feea 	bl	800d678 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d8a4:	2102      	movs	r1, #2
 800d8a6:	4802      	ldr	r0, [pc, #8]	; (800d8b0 <HW_IPCC_SYS_SendCmd+0x18>)
 800d8a8:	f7ff fea1 	bl	800d5ee <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800d8ac:	bf00      	nop
}
 800d8ae:	bd80      	pop	{r7, pc}
 800d8b0:	58000c00 	.word	0x58000c00

0800d8b4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d8b8:	2102      	movs	r1, #2
 800d8ba:	4803      	ldr	r0, [pc, #12]	; (800d8c8 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800d8bc:	f7ff feaa 	bl	800d614 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800d8c0:	f7fe fd2c 	bl	800c31c <HW_IPCC_SYS_CmdEvtNot>

  return;
 800d8c4:	bf00      	nop
}
 800d8c6:	bd80      	pop	{r7, pc}
 800d8c8:	58000c00 	.word	0x58000c00

0800d8cc <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800d8d0:	f7fe fd34 	bl	800c33c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800d8d4:	2102      	movs	r1, #2
 800d8d6:	4802      	ldr	r0, [pc, #8]	; (800d8e0 <HW_IPCC_SYS_EvtHandler+0x14>)
 800d8d8:	f7ff fec0 	bl	800d65c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d8dc:	bf00      	nop
}
 800d8de:	bd80      	pop	{r7, pc}
 800d8e0:	58000c00 	.word	0x58000c00

0800d8e4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b082      	sub	sp, #8
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800d8ec:	2108      	movs	r1, #8
 800d8ee:	480c      	ldr	r0, [pc, #48]	; (800d920 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d8f0:	f7ff fed1 	bl	800d696 <LL_C1_IPCC_IsActiveFlag_CHx>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d007      	beq.n	800d90a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800d8fa:	4a0a      	ldr	r2, [pc, #40]	; (800d924 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d900:	2108      	movs	r1, #8
 800d902:	4807      	ldr	r0, [pc, #28]	; (800d920 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d904:	f7ff fe73 	bl	800d5ee <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800d908:	e006      	b.n	800d918 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d90e:	2108      	movs	r1, #8
 800d910:	4803      	ldr	r0, [pc, #12]	; (800d920 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d912:	f7ff feb1 	bl	800d678 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800d916:	bf00      	nop
}
 800d918:	3708      	adds	r7, #8
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}
 800d91e:	bf00      	nop
 800d920:	58000c00 	.word	0x58000c00
 800d924:	200004cc 	.word	0x200004cc

0800d928 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d92c:	2108      	movs	r1, #8
 800d92e:	4806      	ldr	r0, [pc, #24]	; (800d948 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800d930:	f7ff fe70 	bl	800d614 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800d934:	4b05      	ldr	r3, [pc, #20]	; (800d94c <HW_IPCC_MM_FreeBufHandler+0x24>)
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d93a:	2108      	movs	r1, #8
 800d93c:	4802      	ldr	r0, [pc, #8]	; (800d948 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800d93e:	f7ff fe9b 	bl	800d678 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800d942:	bf00      	nop
}
 800d944:	bd80      	pop	{r7, pc}
 800d946:	bf00      	nop
 800d948:	58000c00 	.word	0x58000c00
 800d94c:	200004cc 	.word	0x200004cc

0800d950 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800d950:	b580      	push	{r7, lr}
 800d952:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800d954:	2108      	movs	r1, #8
 800d956:	4802      	ldr	r0, [pc, #8]	; (800d960 <HW_IPCC_TRACES_Init+0x10>)
 800d958:	f7ff fe6e 	bl	800d638 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d95c:	bf00      	nop
}
 800d95e:	bd80      	pop	{r7, pc}
 800d960:	58000c00 	.word	0x58000c00

0800d964 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800d964:	b580      	push	{r7, lr}
 800d966:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800d968:	f7fe fd86 	bl	800c478 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800d96c:	2108      	movs	r1, #8
 800d96e:	4802      	ldr	r0, [pc, #8]	; (800d978 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800d970:	f7ff fe74 	bl	800d65c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d974:	bf00      	nop
}
 800d976:	bd80      	pop	{r7, pc}
 800d978:	58000c00 	.word	0x58000c00

0800d97c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  
  /* USER CODE END USB_Device_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800d980:	2200      	movs	r2, #0
 800d982:	4912      	ldr	r1, [pc, #72]	; (800d9cc <MX_USB_Device_Init+0x50>)
 800d984:	4812      	ldr	r0, [pc, #72]	; (800d9d0 <MX_USB_Device_Init+0x54>)
 800d986:	f7fb ff89 	bl	800989c <USBD_Init>
 800d98a:	4603      	mov	r3, r0
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d001      	beq.n	800d994 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800d990:	f7f3 ff96 	bl	80018c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800d994:	490f      	ldr	r1, [pc, #60]	; (800d9d4 <MX_USB_Device_Init+0x58>)
 800d996:	480e      	ldr	r0, [pc, #56]	; (800d9d0 <MX_USB_Device_Init+0x54>)
 800d998:	f7fb ffab 	bl	80098f2 <USBD_RegisterClass>
 800d99c:	4603      	mov	r3, r0
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d001      	beq.n	800d9a6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800d9a2:	f7f3 ff8d 	bl	80018c0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800d9a6:	490c      	ldr	r1, [pc, #48]	; (800d9d8 <MX_USB_Device_Init+0x5c>)
 800d9a8:	4809      	ldr	r0, [pc, #36]	; (800d9d0 <MX_USB_Device_Init+0x54>)
 800d9aa:	f7fb fed9 	bl	8009760 <USBD_CDC_RegisterInterface>
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d001      	beq.n	800d9b8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800d9b4:	f7f3 ff84 	bl	80018c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800d9b8:	4805      	ldr	r0, [pc, #20]	; (800d9d0 <MX_USB_Device_Init+0x54>)
 800d9ba:	f7fb ffb4 	bl	8009926 <USBD_Start>
 800d9be:	4603      	mov	r3, r0
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d001      	beq.n	800d9c8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800d9c4:	f7f3 ff7c 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */
  
  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800d9c8:	bf00      	nop
 800d9ca:	bd80      	pop	{r7, pc}
 800d9cc:	20000138 	.word	0x20000138
 800d9d0:	200007c8 	.word	0x200007c8
 800d9d4:	20000024 	.word	0x20000024
 800d9d8:	20000128 	.word	0x20000128

0800d9dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	4907      	ldr	r1, [pc, #28]	; (800da00 <CDC_Init_FS+0x24>)
 800d9e4:	4807      	ldr	r0, [pc, #28]	; (800da04 <CDC_Init_FS+0x28>)
 800d9e6:	f7fb fed2 	bl	800978e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d9ea:	4907      	ldr	r1, [pc, #28]	; (800da08 <CDC_Init_FS+0x2c>)
 800d9ec:	4805      	ldr	r0, [pc, #20]	; (800da04 <CDC_Init_FS+0x28>)
 800d9ee:	f7fb fee8 	bl	80097c2 <USBD_CDC_SetRxBuffer>
  VCPInitialized=1;
 800d9f2:	4b06      	ldr	r3, [pc, #24]	; (800da0c <CDC_Init_FS+0x30>)
 800d9f4:	2201      	movs	r2, #1
 800d9f6:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800d9f8:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	bd80      	pop	{r7, pc}
 800d9fe:	bf00      	nop
 800da00:	20000a9c 	.word	0x20000a9c
 800da04:	200007c8 	.word	0x200007c8
 800da08:	20000a8c 	.word	0x20000a8c
 800da0c:	200004d0 	.word	0x200004d0

0800da10 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800da10:	b480      	push	{r7}
 800da12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  VCPInitialized=0;
 800da14:	4b04      	ldr	r3, [pc, #16]	; (800da28 <CDC_DeInit_FS+0x18>)
 800da16:	2200      	movs	r2, #0
 800da18:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800da1a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800da1c:	4618      	mov	r0, r3
 800da1e:	46bd      	mov	sp, r7
 800da20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da24:	4770      	bx	lr
 800da26:	bf00      	nop
 800da28:	200004d0 	.word	0x200004d0

0800da2c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800da2c:	b480      	push	{r7}
 800da2e:	b083      	sub	sp, #12
 800da30:	af00      	add	r7, sp, #0
 800da32:	4603      	mov	r3, r0
 800da34:	6039      	str	r1, [r7, #0]
 800da36:	71fb      	strb	r3, [r7, #7]
 800da38:	4613      	mov	r3, r2
 800da3a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800da3c:	79fb      	ldrb	r3, [r7, #7]
 800da3e:	2b23      	cmp	r3, #35	; 0x23
 800da40:	d84a      	bhi.n	800dad8 <CDC_Control_FS+0xac>
 800da42:	a201      	add	r2, pc, #4	; (adr r2, 800da48 <CDC_Control_FS+0x1c>)
 800da44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da48:	0800dad9 	.word	0x0800dad9
 800da4c:	0800dad9 	.word	0x0800dad9
 800da50:	0800dad9 	.word	0x0800dad9
 800da54:	0800dad9 	.word	0x0800dad9
 800da58:	0800dad9 	.word	0x0800dad9
 800da5c:	0800dad9 	.word	0x0800dad9
 800da60:	0800dad9 	.word	0x0800dad9
 800da64:	0800dad9 	.word	0x0800dad9
 800da68:	0800dad9 	.word	0x0800dad9
 800da6c:	0800dad9 	.word	0x0800dad9
 800da70:	0800dad9 	.word	0x0800dad9
 800da74:	0800dad9 	.word	0x0800dad9
 800da78:	0800dad9 	.word	0x0800dad9
 800da7c:	0800dad9 	.word	0x0800dad9
 800da80:	0800dad9 	.word	0x0800dad9
 800da84:	0800dad9 	.word	0x0800dad9
 800da88:	0800dad9 	.word	0x0800dad9
 800da8c:	0800dad9 	.word	0x0800dad9
 800da90:	0800dad9 	.word	0x0800dad9
 800da94:	0800dad9 	.word	0x0800dad9
 800da98:	0800dad9 	.word	0x0800dad9
 800da9c:	0800dad9 	.word	0x0800dad9
 800daa0:	0800dad9 	.word	0x0800dad9
 800daa4:	0800dad9 	.word	0x0800dad9
 800daa8:	0800dad9 	.word	0x0800dad9
 800daac:	0800dad9 	.word	0x0800dad9
 800dab0:	0800dad9 	.word	0x0800dad9
 800dab4:	0800dad9 	.word	0x0800dad9
 800dab8:	0800dad9 	.word	0x0800dad9
 800dabc:	0800dad9 	.word	0x0800dad9
 800dac0:	0800dad9 	.word	0x0800dad9
 800dac4:	0800dad9 	.word	0x0800dad9
 800dac8:	0800dad9 	.word	0x0800dad9
 800dacc:	0800dad9 	.word	0x0800dad9
 800dad0:	0800dad9 	.word	0x0800dad9
 800dad4:	0800dad9 	.word	0x0800dad9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dad8:	bf00      	nop
  }

  return (USBD_OK);
 800dada:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800dadc:	4618      	mov	r0, r3
 800dade:	370c      	adds	r7, #12
 800dae0:	46bd      	mov	sp, r7
 800dae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae6:	4770      	bx	lr

0800dae8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b082      	sub	sp, #8
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
 800daf0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800daf2:	6879      	ldr	r1, [r7, #4]
 800daf4:	4805      	ldr	r0, [pc, #20]	; (800db0c <CDC_Receive_FS+0x24>)
 800daf6:	f7fb fe64 	bl	80097c2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800dafa:	4804      	ldr	r0, [pc, #16]	; (800db0c <CDC_Receive_FS+0x24>)
 800dafc:	f7fb fea4 	bl	8009848 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800db00:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800db02:	4618      	mov	r0, r3
 800db04:	3708      	adds	r7, #8
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}
 800db0a:	bf00      	nop
 800db0c:	200007c8 	.word	0x200007c8

0800db10 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b084      	sub	sp, #16
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
 800db18:	460b      	mov	r3, r1
 800db1a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800db1c:	2300      	movs	r3, #0
 800db1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800db20:	4b0d      	ldr	r3, [pc, #52]	; (800db58 <CDC_Transmit_FS+0x48>)
 800db22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db26:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800db28:	68bb      	ldr	r3, [r7, #8]
 800db2a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d001      	beq.n	800db36 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800db32:	2301      	movs	r3, #1
 800db34:	e00b      	b.n	800db4e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800db36:	887b      	ldrh	r3, [r7, #2]
 800db38:	461a      	mov	r2, r3
 800db3a:	6879      	ldr	r1, [r7, #4]
 800db3c:	4806      	ldr	r0, [pc, #24]	; (800db58 <CDC_Transmit_FS+0x48>)
 800db3e:	f7fb fe26 	bl	800978e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800db42:	4805      	ldr	r0, [pc, #20]	; (800db58 <CDC_Transmit_FS+0x48>)
 800db44:	f7fb fe51 	bl	80097ea <USBD_CDC_TransmitPacket>
 800db48:	4603      	mov	r3, r0
 800db4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800db4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800db4e:	4618      	mov	r0, r3
 800db50:	3710      	adds	r7, #16
 800db52:	46bd      	mov	sp, r7
 800db54:	bd80      	pop	{r7, pc}
 800db56:	bf00      	nop
 800db58:	200007c8 	.word	0x200007c8

0800db5c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db5c:	b480      	push	{r7}
 800db5e:	b083      	sub	sp, #12
 800db60:	af00      	add	r7, sp, #0
 800db62:	4603      	mov	r3, r0
 800db64:	6039      	str	r1, [r7, #0]
 800db66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	2212      	movs	r2, #18
 800db6c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800db6e:	4b03      	ldr	r3, [pc, #12]	; (800db7c <USBD_CDC_DeviceDescriptor+0x20>)
}
 800db70:	4618      	mov	r0, r3
 800db72:	370c      	adds	r7, #12
 800db74:	46bd      	mov	sp, r7
 800db76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7a:	4770      	bx	lr
 800db7c:	20000158 	.word	0x20000158

0800db80 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db80:	b480      	push	{r7}
 800db82:	b083      	sub	sp, #12
 800db84:	af00      	add	r7, sp, #0
 800db86:	4603      	mov	r3, r0
 800db88:	6039      	str	r1, [r7, #0]
 800db8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	2204      	movs	r2, #4
 800db90:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800db92:	4b03      	ldr	r3, [pc, #12]	; (800dba0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800db94:	4618      	mov	r0, r3
 800db96:	370c      	adds	r7, #12
 800db98:	46bd      	mov	sp, r7
 800db9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9e:	4770      	bx	lr
 800dba0:	2000016c 	.word	0x2000016c

0800dba4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b082      	sub	sp, #8
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	4603      	mov	r3, r0
 800dbac:	6039      	str	r1, [r7, #0]
 800dbae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dbb0:	79fb      	ldrb	r3, [r7, #7]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d105      	bne.n	800dbc2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800dbb6:	683a      	ldr	r2, [r7, #0]
 800dbb8:	4907      	ldr	r1, [pc, #28]	; (800dbd8 <USBD_CDC_ProductStrDescriptor+0x34>)
 800dbba:	4808      	ldr	r0, [pc, #32]	; (800dbdc <USBD_CDC_ProductStrDescriptor+0x38>)
 800dbbc:	f7fc fe4e 	bl	800a85c <USBD_GetString>
 800dbc0:	e004      	b.n	800dbcc <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800dbc2:	683a      	ldr	r2, [r7, #0]
 800dbc4:	4904      	ldr	r1, [pc, #16]	; (800dbd8 <USBD_CDC_ProductStrDescriptor+0x34>)
 800dbc6:	4805      	ldr	r0, [pc, #20]	; (800dbdc <USBD_CDC_ProductStrDescriptor+0x38>)
 800dbc8:	f7fc fe48 	bl	800a85c <USBD_GetString>
  }
  return USBD_StrDesc;
 800dbcc:	4b02      	ldr	r3, [pc, #8]	; (800dbd8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800dbce:	4618      	mov	r0, r3
 800dbd0:	3708      	adds	r7, #8
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bd80      	pop	{r7, pc}
 800dbd6:	bf00      	nop
 800dbd8:	20000aac 	.word	0x20000aac
 800dbdc:	0800eecc 	.word	0x0800eecc

0800dbe0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b082      	sub	sp, #8
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	6039      	str	r1, [r7, #0]
 800dbea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dbec:	683a      	ldr	r2, [r7, #0]
 800dbee:	4904      	ldr	r1, [pc, #16]	; (800dc00 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800dbf0:	4804      	ldr	r0, [pc, #16]	; (800dc04 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800dbf2:	f7fc fe33 	bl	800a85c <USBD_GetString>
  return USBD_StrDesc;
 800dbf6:	4b02      	ldr	r3, [pc, #8]	; (800dc00 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	3708      	adds	r7, #8
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}
 800dc00:	20000aac 	.word	0x20000aac
 800dc04:	0800eee4 	.word	0x0800eee4

0800dc08 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b082      	sub	sp, #8
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	4603      	mov	r3, r0
 800dc10:	6039      	str	r1, [r7, #0]
 800dc12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	221a      	movs	r2, #26
 800dc18:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dc1a:	f000 f843 	bl	800dca4 <Get_SerialNum>
  
  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */
  
  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800dc1e:	4b02      	ldr	r3, [pc, #8]	; (800dc28 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800dc20:	4618      	mov	r0, r3
 800dc22:	3708      	adds	r7, #8
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}
 800dc28:	20000170 	.word	0x20000170

0800dc2c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b082      	sub	sp, #8
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	4603      	mov	r3, r0
 800dc34:	6039      	str	r1, [r7, #0]
 800dc36:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dc38:	79fb      	ldrb	r3, [r7, #7]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d105      	bne.n	800dc4a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800dc3e:	683a      	ldr	r2, [r7, #0]
 800dc40:	4907      	ldr	r1, [pc, #28]	; (800dc60 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800dc42:	4808      	ldr	r0, [pc, #32]	; (800dc64 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800dc44:	f7fc fe0a 	bl	800a85c <USBD_GetString>
 800dc48:	e004      	b.n	800dc54 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800dc4a:	683a      	ldr	r2, [r7, #0]
 800dc4c:	4904      	ldr	r1, [pc, #16]	; (800dc60 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800dc4e:	4805      	ldr	r0, [pc, #20]	; (800dc64 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800dc50:	f7fc fe04 	bl	800a85c <USBD_GetString>
  }
  return USBD_StrDesc;
 800dc54:	4b02      	ldr	r3, [pc, #8]	; (800dc60 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3708      	adds	r7, #8
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}
 800dc5e:	bf00      	nop
 800dc60:	20000aac 	.word	0x20000aac
 800dc64:	0800eef8 	.word	0x0800eef8

0800dc68 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b082      	sub	sp, #8
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	4603      	mov	r3, r0
 800dc70:	6039      	str	r1, [r7, #0]
 800dc72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dc74:	79fb      	ldrb	r3, [r7, #7]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d105      	bne.n	800dc86 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800dc7a:	683a      	ldr	r2, [r7, #0]
 800dc7c:	4907      	ldr	r1, [pc, #28]	; (800dc9c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800dc7e:	4808      	ldr	r0, [pc, #32]	; (800dca0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800dc80:	f7fc fdec 	bl	800a85c <USBD_GetString>
 800dc84:	e004      	b.n	800dc90 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800dc86:	683a      	ldr	r2, [r7, #0]
 800dc88:	4904      	ldr	r1, [pc, #16]	; (800dc9c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800dc8a:	4805      	ldr	r0, [pc, #20]	; (800dca0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800dc8c:	f7fc fde6 	bl	800a85c <USBD_GetString>
  }
  return USBD_StrDesc;
 800dc90:	4b02      	ldr	r3, [pc, #8]	; (800dc9c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800dc92:	4618      	mov	r0, r3
 800dc94:	3708      	adds	r7, #8
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd80      	pop	{r7, pc}
 800dc9a:	bf00      	nop
 800dc9c:	20000aac 	.word	0x20000aac
 800dca0:	0800ef04 	.word	0x0800ef04

0800dca4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b084      	sub	sp, #16
 800dca8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800dcaa:	4b0f      	ldr	r3, [pc, #60]	; (800dce8 <Get_SerialNum+0x44>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800dcb0:	4b0e      	ldr	r3, [pc, #56]	; (800dcec <Get_SerialNum+0x48>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800dcb6:	4b0e      	ldr	r3, [pc, #56]	; (800dcf0 <Get_SerialNum+0x4c>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800dcbc:	68fa      	ldr	r2, [r7, #12]
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	4413      	add	r3, r2
 800dcc2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d009      	beq.n	800dcde <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800dcca:	2208      	movs	r2, #8
 800dccc:	4909      	ldr	r1, [pc, #36]	; (800dcf4 <Get_SerialNum+0x50>)
 800dcce:	68f8      	ldr	r0, [r7, #12]
 800dcd0:	f000 f814 	bl	800dcfc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800dcd4:	2204      	movs	r2, #4
 800dcd6:	4908      	ldr	r1, [pc, #32]	; (800dcf8 <Get_SerialNum+0x54>)
 800dcd8:	68b8      	ldr	r0, [r7, #8]
 800dcda:	f000 f80f 	bl	800dcfc <IntToUnicode>
  }
}
 800dcde:	bf00      	nop
 800dce0:	3710      	adds	r7, #16
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}
 800dce6:	bf00      	nop
 800dce8:	1fff7590 	.word	0x1fff7590
 800dcec:	1fff7594 	.word	0x1fff7594
 800dcf0:	1fff7598 	.word	0x1fff7598
 800dcf4:	20000172 	.word	0x20000172
 800dcf8:	20000182 	.word	0x20000182

0800dcfc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	b087      	sub	sp, #28
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	60f8      	str	r0, [r7, #12]
 800dd04:	60b9      	str	r1, [r7, #8]
 800dd06:	4613      	mov	r3, r2
 800dd08:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dd0e:	2300      	movs	r3, #0
 800dd10:	75fb      	strb	r3, [r7, #23]
 800dd12:	e027      	b.n	800dd64 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	0f1b      	lsrs	r3, r3, #28
 800dd18:	2b09      	cmp	r3, #9
 800dd1a:	d80b      	bhi.n	800dd34 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	0f1b      	lsrs	r3, r3, #28
 800dd20:	b2da      	uxtb	r2, r3
 800dd22:	7dfb      	ldrb	r3, [r7, #23]
 800dd24:	005b      	lsls	r3, r3, #1
 800dd26:	4619      	mov	r1, r3
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	440b      	add	r3, r1
 800dd2c:	3230      	adds	r2, #48	; 0x30
 800dd2e:	b2d2      	uxtb	r2, r2
 800dd30:	701a      	strb	r2, [r3, #0]
 800dd32:	e00a      	b.n	800dd4a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	0f1b      	lsrs	r3, r3, #28
 800dd38:	b2da      	uxtb	r2, r3
 800dd3a:	7dfb      	ldrb	r3, [r7, #23]
 800dd3c:	005b      	lsls	r3, r3, #1
 800dd3e:	4619      	mov	r1, r3
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	440b      	add	r3, r1
 800dd44:	3237      	adds	r2, #55	; 0x37
 800dd46:	b2d2      	uxtb	r2, r2
 800dd48:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	011b      	lsls	r3, r3, #4
 800dd4e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dd50:	7dfb      	ldrb	r3, [r7, #23]
 800dd52:	005b      	lsls	r3, r3, #1
 800dd54:	3301      	adds	r3, #1
 800dd56:	68ba      	ldr	r2, [r7, #8]
 800dd58:	4413      	add	r3, r2
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dd5e:	7dfb      	ldrb	r3, [r7, #23]
 800dd60:	3301      	adds	r3, #1
 800dd62:	75fb      	strb	r3, [r7, #23]
 800dd64:	7dfa      	ldrb	r2, [r7, #23]
 800dd66:	79fb      	ldrb	r3, [r7, #7]
 800dd68:	429a      	cmp	r2, r3
 800dd6a:	d3d3      	bcc.n	800dd14 <IntToUnicode+0x18>
  }
}
 800dd6c:	bf00      	nop
 800dd6e:	371c      	adds	r7, #28
 800dd70:	46bd      	mov	sp, r7
 800dd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd76:	4770      	bx	lr

0800dd78 <LL_AHB2_GRP1_EnableClock>:
{
 800dd78:	b480      	push	{r7}
 800dd7a:	b085      	sub	sp, #20
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800dd80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dd84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dd86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	4313      	orrs	r3, r2
 800dd8e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800dd90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dd94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	4013      	ands	r3, r2
 800dd9a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800dd9c:	68fb      	ldr	r3, [r7, #12]
}
 800dd9e:	bf00      	nop
 800dda0:	3714      	adds	r7, #20
 800dda2:	46bd      	mov	sp, r7
 800dda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda8:	4770      	bx	lr

0800ddaa <LL_APB1_GRP1_EnableClock>:
{
 800ddaa:	b480      	push	{r7}
 800ddac:	b085      	sub	sp, #20
 800ddae:	af00      	add	r7, sp, #0
 800ddb0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800ddb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ddb6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ddb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	4313      	orrs	r3, r2
 800ddc0:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800ddc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ddc6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	4013      	ands	r3, r2
 800ddcc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ddce:	68fb      	ldr	r3, [r7, #12]
}
 800ddd0:	bf00      	nop
 800ddd2:	3714      	adds	r7, #20
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddda:	4770      	bx	lr

0800dddc <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b088      	sub	sp, #32
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dde4:	f107 030c 	add.w	r3, r7, #12
 800dde8:	2200      	movs	r2, #0
 800ddea:	601a      	str	r2, [r3, #0]
 800ddec:	605a      	str	r2, [r3, #4]
 800ddee:	609a      	str	r2, [r3, #8]
 800ddf0:	60da      	str	r2, [r3, #12]
 800ddf2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	4a13      	ldr	r2, [pc, #76]	; (800de48 <HAL_PCD_MspInit+0x6c>)
 800ddfa:	4293      	cmp	r3, r2
 800ddfc:	d120      	bne.n	800de40 <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ddfe:	2001      	movs	r0, #1
 800de00:	f7ff ffba 	bl	800dd78 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800de04:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800de08:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de0a:	2302      	movs	r3, #2
 800de0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de0e:	2300      	movs	r3, #0
 800de10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800de12:	2302      	movs	r3, #2
 800de14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800de16:	230a      	movs	r3, #10
 800de18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800de1a:	f107 030c 	add.w	r3, r7, #12
 800de1e:	4619      	mov	r1, r3
 800de20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800de24:	f7f4 fd94 	bl	8002950 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800de28:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800de2c:	f7ff ffbd 	bl	800ddaa <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800de30:	2200      	movs	r2, #0
 800de32:	2100      	movs	r1, #0
 800de34:	2014      	movs	r0, #20
 800de36:	f7f4 fcf1 	bl	800281c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800de3a:	2014      	movs	r0, #20
 800de3c:	f7f4 fd18 	bl	8002870 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800de40:	bf00      	nop
 800de42:	3720      	adds	r7, #32
 800de44:	46bd      	mov	sp, r7
 800de46:	bd80      	pop	{r7, pc}
 800de48:	40006800 	.word	0x40006800

0800de4c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b082      	sub	sp, #8
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);  
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800de60:	4619      	mov	r1, r3
 800de62:	4610      	mov	r0, r2
 800de64:	f7fb fda8 	bl	80099b8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800de68:	bf00      	nop
 800de6a:	3708      	adds	r7, #8
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bd80      	pop	{r7, pc}

0800de70 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b082      	sub	sp, #8
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
 800de78:	460b      	mov	r3, r1
 800de7a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);  
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800de82:	78fb      	ldrb	r3, [r7, #3]
 800de84:	687a      	ldr	r2, [r7, #4]
 800de86:	015b      	lsls	r3, r3, #5
 800de88:	4413      	add	r3, r2
 800de8a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800de8e:	681a      	ldr	r2, [r3, #0]
 800de90:	78fb      	ldrb	r3, [r7, #3]
 800de92:	4619      	mov	r1, r3
 800de94:	f7fb fddb 	bl	8009a4e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800de98:	bf00      	nop
 800de9a:	3708      	adds	r7, #8
 800de9c:	46bd      	mov	sp, r7
 800de9e:	bd80      	pop	{r7, pc}

0800dea0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b082      	sub	sp, #8
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
 800dea8:	460b      	mov	r3, r1
 800deaa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */  
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);  
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800deb2:	78fb      	ldrb	r3, [r7, #3]
 800deb4:	687a      	ldr	r2, [r7, #4]
 800deb6:	015b      	lsls	r3, r3, #5
 800deb8:	4413      	add	r3, r2
 800deba:	333c      	adds	r3, #60	; 0x3c
 800debc:	681a      	ldr	r2, [r3, #0]
 800debe:	78fb      	ldrb	r3, [r7, #3]
 800dec0:	4619      	mov	r1, r3
 800dec2:	f7fb fe35 	bl	8009b30 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800dec6:	bf00      	nop
 800dec8:	3708      	adds	r7, #8
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}

0800dece <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dece:	b580      	push	{r7, lr}
 800ded0:	b082      	sub	sp, #8
 800ded2:	af00      	add	r7, sp, #0
 800ded4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */  
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);  
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800dedc:	4618      	mov	r0, r3
 800dede:	f7fb ff48 	bl	8009d72 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800dee2:	bf00      	nop
 800dee4:	3708      	adds	r7, #8
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}

0800deea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800deea:	b580      	push	{r7, lr}
 800deec:	b084      	sub	sp, #16
 800deee:	af00      	add	r7, sp, #0
 800def0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800def2:	2301      	movs	r3, #1
 800def4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	689b      	ldr	r3, [r3, #8]
 800defa:	2b02      	cmp	r3, #2
 800defc:	d001      	beq.n	800df02 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800defe:	f7f3 fcdf 	bl	80018c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800df08:	7bfa      	ldrb	r2, [r7, #15]
 800df0a:	4611      	mov	r1, r2
 800df0c:	4618      	mov	r0, r3
 800df0e:	f7fb fef5 	bl	8009cfc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800df18:	4618      	mov	r0, r3
 800df1a:	f7fb feae 	bl	8009c7a <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800df1e:	bf00      	nop
 800df20:	3710      	adds	r7, #16
 800df22:	46bd      	mov	sp, r7
 800df24:	bd80      	pop	{r7, pc}
	...

0800df28 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b082      	sub	sp, #8
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800df36:	4618      	mov	r0, r3
 800df38:	f7fb fef0 	bl	8009d1c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	699b      	ldr	r3, [r3, #24]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d005      	beq.n	800df50 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800df44:	4b04      	ldr	r3, [pc, #16]	; (800df58 <HAL_PCD_SuspendCallback+0x30>)
 800df46:	691b      	ldr	r3, [r3, #16]
 800df48:	4a03      	ldr	r2, [pc, #12]	; (800df58 <HAL_PCD_SuspendCallback+0x30>)
 800df4a:	f043 0306 	orr.w	r3, r3, #6
 800df4e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800df50:	bf00      	nop
 800df52:	3708      	adds	r7, #8
 800df54:	46bd      	mov	sp, r7
 800df56:	bd80      	pop	{r7, pc}
 800df58:	e000ed00 	.word	0xe000ed00

0800df5c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b082      	sub	sp, #8
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	699b      	ldr	r3, [r3, #24]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d007      	beq.n	800df7c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800df6c:	4b08      	ldr	r3, [pc, #32]	; (800df90 <HAL_PCD_ResumeCallback+0x34>)
 800df6e:	691b      	ldr	r3, [r3, #16]
 800df70:	4a07      	ldr	r2, [pc, #28]	; (800df90 <HAL_PCD_ResumeCallback+0x34>)
 800df72:	f023 0306 	bic.w	r3, r3, #6
 800df76:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800df78:	f000 f9f8 	bl	800e36c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
 
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800df82:	4618      	mov	r0, r3
 800df84:	f7fb fedf 	bl	8009d46 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800df88:	bf00      	nop
 800df8a:	3708      	adds	r7, #8
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd80      	pop	{r7, pc}
 800df90:	e000ed00 	.word	0xe000ed00

0800df94 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b082      	sub	sp, #8
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800df9c:	4a2c      	ldr	r2, [pc, #176]	; (800e050 <USBD_LL_Init+0xbc>)
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	4a2a      	ldr	r2, [pc, #168]	; (800e050 <USBD_LL_Init+0xbc>)
 800dfa8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800dfac:	f7f5 fec2 	bl	8003d34 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800dfb0:	4b27      	ldr	r3, [pc, #156]	; (800e050 <USBD_LL_Init+0xbc>)
 800dfb2:	4a28      	ldr	r2, [pc, #160]	; (800e054 <USBD_LL_Init+0xc0>)
 800dfb4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800dfb6:	4b26      	ldr	r3, [pc, #152]	; (800e050 <USBD_LL_Init+0xbc>)
 800dfb8:	2208      	movs	r2, #8
 800dfba:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800dfbc:	4b24      	ldr	r3, [pc, #144]	; (800e050 <USBD_LL_Init+0xbc>)
 800dfbe:	2202      	movs	r2, #2
 800dfc0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800dfc2:	4b23      	ldr	r3, [pc, #140]	; (800e050 <USBD_LL_Init+0xbc>)
 800dfc4:	2202      	movs	r2, #2
 800dfc6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800dfc8:	4b21      	ldr	r3, [pc, #132]	; (800e050 <USBD_LL_Init+0xbc>)
 800dfca:	2200      	movs	r2, #0
 800dfcc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800dfce:	4b20      	ldr	r3, [pc, #128]	; (800e050 <USBD_LL_Init+0xbc>)
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800dfd4:	4b1e      	ldr	r3, [pc, #120]	; (800e050 <USBD_LL_Init+0xbc>)
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800dfda:	4b1d      	ldr	r3, [pc, #116]	; (800e050 <USBD_LL_Init+0xbc>)
 800dfdc:	2200      	movs	r2, #0
 800dfde:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800dfe0:	481b      	ldr	r0, [pc, #108]	; (800e050 <USBD_LL_Init+0xbc>)
 800dfe2:	f7f4 ff5f 	bl	8002ea4 <HAL_PCD_Init>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d001      	beq.n	800dff0 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800dfec:	f7f3 fc68 	bl	80018c0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */
  
  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800dff6:	2318      	movs	r3, #24
 800dff8:	2200      	movs	r2, #0
 800dffa:	2100      	movs	r1, #0
 800dffc:	f7f5 fe14 	bl	8003c28 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e006:	2358      	movs	r3, #88	; 0x58
 800e008:	2200      	movs	r2, #0
 800e00a:	2180      	movs	r1, #128	; 0x80
 800e00c:	f7f5 fe0c 	bl	8003c28 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e016:	23c0      	movs	r3, #192	; 0xc0
 800e018:	2200      	movs	r2, #0
 800e01a:	2181      	movs	r1, #129	; 0x81
 800e01c:	f7f5 fe04 	bl	8003c28 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e026:	f44f 7388 	mov.w	r3, #272	; 0x110
 800e02a:	2200      	movs	r2, #0
 800e02c:	2101      	movs	r1, #1
 800e02e:	f7f5 fdfb 	bl	8003c28 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e038:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e03c:	2200      	movs	r2, #0
 800e03e:	2182      	movs	r1, #130	; 0x82
 800e040:	f7f5 fdf2 	bl	8003c28 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800e044:	2300      	movs	r3, #0
}
 800e046:	4618      	mov	r0, r3
 800e048:	3708      	adds	r7, #8
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}
 800e04e:	bf00      	nop
 800e050:	20000cac 	.word	0x20000cac
 800e054:	40006800 	.word	0x40006800

0800e058 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b084      	sub	sp, #16
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e060:	2300      	movs	r3, #0
 800e062:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e064:	2300      	movs	r3, #0
 800e066:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e06e:	4618      	mov	r0, r3
 800e070:	f7f4 ffe0 	bl	8003034 <HAL_PCD_Start>
 800e074:	4603      	mov	r3, r0
 800e076:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e078:	7bfb      	ldrb	r3, [r7, #15]
 800e07a:	4618      	mov	r0, r3
 800e07c:	f000 f97c 	bl	800e378 <USBD_Get_USB_Status>
 800e080:	4603      	mov	r3, r0
 800e082:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800e084:	7bbb      	ldrb	r3, [r7, #14]
}
 800e086:	4618      	mov	r0, r3
 800e088:	3710      	adds	r7, #16
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}

0800e08e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e08e:	b580      	push	{r7, lr}
 800e090:	b084      	sub	sp, #16
 800e092:	af00      	add	r7, sp, #0
 800e094:	6078      	str	r0, [r7, #4]
 800e096:	4608      	mov	r0, r1
 800e098:	4611      	mov	r1, r2
 800e09a:	461a      	mov	r2, r3
 800e09c:	4603      	mov	r3, r0
 800e09e:	70fb      	strb	r3, [r7, #3]
 800e0a0:	460b      	mov	r3, r1
 800e0a2:	70bb      	strb	r3, [r7, #2]
 800e0a4:	4613      	mov	r3, r2
 800e0a6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e0b6:	78bb      	ldrb	r3, [r7, #2]
 800e0b8:	883a      	ldrh	r2, [r7, #0]
 800e0ba:	78f9      	ldrb	r1, [r7, #3]
 800e0bc:	f7f5 f95a 	bl	8003374 <HAL_PCD_EP_Open>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0c4:	7bfb      	ldrb	r3, [r7, #15]
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f000 f956 	bl	800e378 <USBD_Get_USB_Status>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800e0d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3710      	adds	r7, #16
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}

0800e0da <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e0da:	b580      	push	{r7, lr}
 800e0dc:	b084      	sub	sp, #16
 800e0de:	af00      	add	r7, sp, #0
 800e0e0:	6078      	str	r0, [r7, #4]
 800e0e2:	460b      	mov	r3, r1
 800e0e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e0f4:	78fa      	ldrb	r2, [r7, #3]
 800e0f6:	4611      	mov	r1, r2
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f7f5 f99b 	bl	8003434 <HAL_PCD_EP_Close>
 800e0fe:	4603      	mov	r3, r0
 800e100:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e102:	7bfb      	ldrb	r3, [r7, #15]
 800e104:	4618      	mov	r0, r3
 800e106:	f000 f937 	bl	800e378 <USBD_Get_USB_Status>
 800e10a:	4603      	mov	r3, r0
 800e10c:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800e10e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e110:	4618      	mov	r0, r3
 800e112:	3710      	adds	r7, #16
 800e114:	46bd      	mov	sp, r7
 800e116:	bd80      	pop	{r7, pc}

0800e118 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b084      	sub	sp, #16
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
 800e120:	460b      	mov	r3, r1
 800e122:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e124:	2300      	movs	r3, #0
 800e126:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e128:	2300      	movs	r3, #0
 800e12a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e132:	78fa      	ldrb	r2, [r7, #3]
 800e134:	4611      	mov	r1, r2
 800e136:	4618      	mov	r0, r3
 800e138:	f7f5 fa46 	bl	80035c8 <HAL_PCD_EP_SetStall>
 800e13c:	4603      	mov	r3, r0
 800e13e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e140:	7bfb      	ldrb	r3, [r7, #15]
 800e142:	4618      	mov	r0, r3
 800e144:	f000 f918 	bl	800e378 <USBD_Get_USB_Status>
 800e148:	4603      	mov	r3, r0
 800e14a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800e14c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e14e:	4618      	mov	r0, r3
 800e150:	3710      	adds	r7, #16
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}

0800e156 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e156:	b580      	push	{r7, lr}
 800e158:	b084      	sub	sp, #16
 800e15a:	af00      	add	r7, sp, #0
 800e15c:	6078      	str	r0, [r7, #4]
 800e15e:	460b      	mov	r3, r1
 800e160:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e162:	2300      	movs	r3, #0
 800e164:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e166:	2300      	movs	r3, #0
 800e168:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e170:	78fa      	ldrb	r2, [r7, #3]
 800e172:	4611      	mov	r1, r2
 800e174:	4618      	mov	r0, r3
 800e176:	f7f5 fa81 	bl	800367c <HAL_PCD_EP_ClrStall>
 800e17a:	4603      	mov	r3, r0
 800e17c:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e17e:	7bfb      	ldrb	r3, [r7, #15]
 800e180:	4618      	mov	r0, r3
 800e182:	f000 f8f9 	bl	800e378 <USBD_Get_USB_Status>
 800e186:	4603      	mov	r3, r0
 800e188:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 800e18a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e18c:	4618      	mov	r0, r3
 800e18e:	3710      	adds	r7, #16
 800e190:	46bd      	mov	sp, r7
 800e192:	bd80      	pop	{r7, pc}

0800e194 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e194:	b480      	push	{r7}
 800e196:	b085      	sub	sp, #20
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
 800e19c:	460b      	mov	r3, r1
 800e19e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e1a6:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800e1a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	da08      	bge.n	800e1c2 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800e1b0:	78fb      	ldrb	r3, [r7, #3]
 800e1b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e1b6:	68fa      	ldr	r2, [r7, #12]
 800e1b8:	015b      	lsls	r3, r3, #5
 800e1ba:	4413      	add	r3, r2
 800e1bc:	332a      	adds	r3, #42	; 0x2a
 800e1be:	781b      	ldrb	r3, [r3, #0]
 800e1c0:	e008      	b.n	800e1d4 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800e1c2:	78fb      	ldrb	r3, [r7, #3]
 800e1c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e1c8:	68fa      	ldr	r2, [r7, #12]
 800e1ca:	015b      	lsls	r3, r3, #5
 800e1cc:	4413      	add	r3, r2
 800e1ce:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800e1d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	3714      	adds	r7, #20
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1de:	4770      	bx	lr

0800e1e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b084      	sub	sp, #16
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
 800e1e8:	460b      	mov	r3, r1
 800e1ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e1fa:	78fa      	ldrb	r2, [r7, #3]
 800e1fc:	4611      	mov	r1, r2
 800e1fe:	4618      	mov	r0, r3
 800e200:	f7f5 f893 	bl	800332a <HAL_PCD_SetAddress>
 800e204:	4603      	mov	r3, r0
 800e206:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e208:	7bfb      	ldrb	r3, [r7, #15]
 800e20a:	4618      	mov	r0, r3
 800e20c:	f000 f8b4 	bl	800e378 <USBD_Get_USB_Status>
 800e210:	4603      	mov	r3, r0
 800e212:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800e214:	7bbb      	ldrb	r3, [r7, #14]
}
 800e216:	4618      	mov	r0, r3
 800e218:	3710      	adds	r7, #16
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}

0800e21e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e21e:	b580      	push	{r7, lr}
 800e220:	b086      	sub	sp, #24
 800e222:	af00      	add	r7, sp, #0
 800e224:	60f8      	str	r0, [r7, #12]
 800e226:	607a      	str	r2, [r7, #4]
 800e228:	461a      	mov	r2, r3
 800e22a:	460b      	mov	r3, r1
 800e22c:	72fb      	strb	r3, [r7, #11]
 800e22e:	4613      	mov	r3, r2
 800e230:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e232:	2300      	movs	r3, #0
 800e234:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e236:	2300      	movs	r3, #0
 800e238:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e240:	893b      	ldrh	r3, [r7, #8]
 800e242:	7af9      	ldrb	r1, [r7, #11]
 800e244:	687a      	ldr	r2, [r7, #4]
 800e246:	f7f5 f986 	bl	8003556 <HAL_PCD_EP_Transmit>
 800e24a:	4603      	mov	r3, r0
 800e24c:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e24e:	7dfb      	ldrb	r3, [r7, #23]
 800e250:	4618      	mov	r0, r3
 800e252:	f000 f891 	bl	800e378 <USBD_Get_USB_Status>
 800e256:	4603      	mov	r3, r0
 800e258:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800e25a:	7dbb      	ldrb	r3, [r7, #22]
}
 800e25c:	4618      	mov	r0, r3
 800e25e:	3718      	adds	r7, #24
 800e260:	46bd      	mov	sp, r7
 800e262:	bd80      	pop	{r7, pc}

0800e264 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b086      	sub	sp, #24
 800e268:	af00      	add	r7, sp, #0
 800e26a:	60f8      	str	r0, [r7, #12]
 800e26c:	607a      	str	r2, [r7, #4]
 800e26e:	461a      	mov	r2, r3
 800e270:	460b      	mov	r3, r1
 800e272:	72fb      	strb	r3, [r7, #11]
 800e274:	4613      	mov	r3, r2
 800e276:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e278:	2300      	movs	r3, #0
 800e27a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e27c:	2300      	movs	r3, #0
 800e27e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e286:	893b      	ldrh	r3, [r7, #8]
 800e288:	7af9      	ldrb	r1, [r7, #11]
 800e28a:	687a      	ldr	r2, [r7, #4]
 800e28c:	f7f5 f914 	bl	80034b8 <HAL_PCD_EP_Receive>
 800e290:	4603      	mov	r3, r0
 800e292:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e294:	7dfb      	ldrb	r3, [r7, #23]
 800e296:	4618      	mov	r0, r3
 800e298:	f000 f86e 	bl	800e378 <USBD_Get_USB_Status>
 800e29c:	4603      	mov	r3, r0
 800e29e:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 800e2a0:	7dbb      	ldrb	r3, [r7, #22]
}
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	3718      	adds	r7, #24
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}

0800e2aa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e2aa:	b580      	push	{r7, lr}
 800e2ac:	b082      	sub	sp, #8
 800e2ae:	af00      	add	r7, sp, #0
 800e2b0:	6078      	str	r0, [r7, #4]
 800e2b2:	460b      	mov	r3, r1
 800e2b4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e2bc:	78fa      	ldrb	r2, [r7, #3]
 800e2be:	4611      	mov	r1, r2
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	f7f5 f933 	bl	800352c <HAL_PCD_EP_GetRxCount>
 800e2c6:	4603      	mov	r3, r0
}
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	3708      	adds	r7, #8
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd80      	pop	{r7, pc}

0800e2d0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b082      	sub	sp, #8
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
 800e2d8:	460b      	mov	r3, r1
 800e2da:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800e2dc:	78fb      	ldrb	r3, [r7, #3]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d002      	beq.n	800e2e8 <HAL_PCDEx_LPM_Callback+0x18>
 800e2e2:	2b01      	cmp	r3, #1
 800e2e4:	d013      	beq.n	800e30e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
  /* USER CODE END LPM_Callback */
}
 800e2e6:	e023      	b.n	800e330 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	699b      	ldr	r3, [r3, #24]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d007      	beq.n	800e300 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e2f0:	f000 f83c 	bl	800e36c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e2f4:	4b10      	ldr	r3, [pc, #64]	; (800e338 <HAL_PCDEx_LPM_Callback+0x68>)
 800e2f6:	691b      	ldr	r3, [r3, #16]
 800e2f8:	4a0f      	ldr	r2, [pc, #60]	; (800e338 <HAL_PCDEx_LPM_Callback+0x68>)
 800e2fa:	f023 0306 	bic.w	r3, r3, #6
 800e2fe:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e306:	4618      	mov	r0, r3
 800e308:	f7fb fd1d 	bl	8009d46 <USBD_LL_Resume>
    break;
 800e30c:	e010      	b.n	800e330 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e314:	4618      	mov	r0, r3
 800e316:	f7fb fd01 	bl	8009d1c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	699b      	ldr	r3, [r3, #24]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d005      	beq.n	800e32e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e322:	4b05      	ldr	r3, [pc, #20]	; (800e338 <HAL_PCDEx_LPM_Callback+0x68>)
 800e324:	691b      	ldr	r3, [r3, #16]
 800e326:	4a04      	ldr	r2, [pc, #16]	; (800e338 <HAL_PCDEx_LPM_Callback+0x68>)
 800e328:	f043 0306 	orr.w	r3, r3, #6
 800e32c:	6113      	str	r3, [r2, #16]
    break;   
 800e32e:	bf00      	nop
}
 800e330:	bf00      	nop
 800e332:	3708      	adds	r7, #8
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}
 800e338:	e000ed00 	.word	0xe000ed00

0800e33c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e33c:	b480      	push	{r7}
 800e33e:	b083      	sub	sp, #12
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e344:	4b03      	ldr	r3, [pc, #12]	; (800e354 <USBD_static_malloc+0x18>)
}
 800e346:	4618      	mov	r0, r3
 800e348:	370c      	adds	r7, #12
 800e34a:	46bd      	mov	sp, r7
 800e34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e350:	4770      	bx	lr
 800e352:	bf00      	nop
 800e354:	200004d4 	.word	0x200004d4

0800e358 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e358:	b480      	push	{r7}
 800e35a:	b083      	sub	sp, #12
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]

}
 800e360:	bf00      	nop
 800e362:	370c      	adds	r7, #12
 800e364:	46bd      	mov	sp, r7
 800e366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36a:	4770      	bx	lr

0800e36c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e370:	f7f3 f936 	bl	80015e0 <SystemClock_Config>
}
 800e374:	bf00      	nop
 800e376:	bd80      	pop	{r7, pc}

0800e378 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e378:	b480      	push	{r7}
 800e37a:	b085      	sub	sp, #20
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	4603      	mov	r3, r0
 800e380:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e382:	2300      	movs	r3, #0
 800e384:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e386:	79fb      	ldrb	r3, [r7, #7]
 800e388:	2b03      	cmp	r3, #3
 800e38a:	d817      	bhi.n	800e3bc <USBD_Get_USB_Status+0x44>
 800e38c:	a201      	add	r2, pc, #4	; (adr r2, 800e394 <USBD_Get_USB_Status+0x1c>)
 800e38e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e392:	bf00      	nop
 800e394:	0800e3a5 	.word	0x0800e3a5
 800e398:	0800e3ab 	.word	0x0800e3ab
 800e39c:	0800e3b1 	.word	0x0800e3b1
 800e3a0:	0800e3b7 	.word	0x0800e3b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	73fb      	strb	r3, [r7, #15]
    break;
 800e3a8:	e00b      	b.n	800e3c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e3aa:	2302      	movs	r3, #2
 800e3ac:	73fb      	strb	r3, [r7, #15]
    break;
 800e3ae:	e008      	b.n	800e3c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e3b0:	2301      	movs	r3, #1
 800e3b2:	73fb      	strb	r3, [r7, #15]
    break;
 800e3b4:	e005      	b.n	800e3c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e3b6:	2302      	movs	r3, #2
 800e3b8:	73fb      	strb	r3, [r7, #15]
    break;
 800e3ba:	e002      	b.n	800e3c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e3bc:	2302      	movs	r3, #2
 800e3be:	73fb      	strb	r3, [r7, #15]
    break;
 800e3c0:	bf00      	nop
  }
  return usb_status;
 800e3c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	3714      	adds	r7, #20
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ce:	4770      	bx	lr

0800e3d0 <__errno>:
 800e3d0:	4b01      	ldr	r3, [pc, #4]	; (800e3d8 <__errno+0x8>)
 800e3d2:	6818      	ldr	r0, [r3, #0]
 800e3d4:	4770      	bx	lr
 800e3d6:	bf00      	nop
 800e3d8:	2000018c 	.word	0x2000018c

0800e3dc <__libc_init_array>:
 800e3dc:	b570      	push	{r4, r5, r6, lr}
 800e3de:	4e0d      	ldr	r6, [pc, #52]	; (800e414 <__libc_init_array+0x38>)
 800e3e0:	4c0d      	ldr	r4, [pc, #52]	; (800e418 <__libc_init_array+0x3c>)
 800e3e2:	1ba4      	subs	r4, r4, r6
 800e3e4:	10a4      	asrs	r4, r4, #2
 800e3e6:	2500      	movs	r5, #0
 800e3e8:	42a5      	cmp	r5, r4
 800e3ea:	d109      	bne.n	800e400 <__libc_init_array+0x24>
 800e3ec:	4e0b      	ldr	r6, [pc, #44]	; (800e41c <__libc_init_array+0x40>)
 800e3ee:	4c0c      	ldr	r4, [pc, #48]	; (800e420 <__libc_init_array+0x44>)
 800e3f0:	f000 fc38 	bl	800ec64 <_init>
 800e3f4:	1ba4      	subs	r4, r4, r6
 800e3f6:	10a4      	asrs	r4, r4, #2
 800e3f8:	2500      	movs	r5, #0
 800e3fa:	42a5      	cmp	r5, r4
 800e3fc:	d105      	bne.n	800e40a <__libc_init_array+0x2e>
 800e3fe:	bd70      	pop	{r4, r5, r6, pc}
 800e400:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e404:	4798      	blx	r3
 800e406:	3501      	adds	r5, #1
 800e408:	e7ee      	b.n	800e3e8 <__libc_init_array+0xc>
 800e40a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e40e:	4798      	blx	r3
 800e410:	3501      	adds	r5, #1
 800e412:	e7f2      	b.n	800e3fa <__libc_init_array+0x1e>
 800e414:	0800f0a0 	.word	0x0800f0a0
 800e418:	0800f0a0 	.word	0x0800f0a0
 800e41c:	0800f0a0 	.word	0x0800f0a0
 800e420:	0800f0a4 	.word	0x0800f0a4

0800e424 <memcpy>:
 800e424:	b510      	push	{r4, lr}
 800e426:	1e43      	subs	r3, r0, #1
 800e428:	440a      	add	r2, r1
 800e42a:	4291      	cmp	r1, r2
 800e42c:	d100      	bne.n	800e430 <memcpy+0xc>
 800e42e:	bd10      	pop	{r4, pc}
 800e430:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e434:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e438:	e7f7      	b.n	800e42a <memcpy+0x6>

0800e43a <memset>:
 800e43a:	4402      	add	r2, r0
 800e43c:	4603      	mov	r3, r0
 800e43e:	4293      	cmp	r3, r2
 800e440:	d100      	bne.n	800e444 <memset+0xa>
 800e442:	4770      	bx	lr
 800e444:	f803 1b01 	strb.w	r1, [r3], #1
 800e448:	e7f9      	b.n	800e43e <memset+0x4>
	...

0800e44c <siprintf>:
 800e44c:	b40e      	push	{r1, r2, r3}
 800e44e:	b500      	push	{lr}
 800e450:	b09c      	sub	sp, #112	; 0x70
 800e452:	ab1d      	add	r3, sp, #116	; 0x74
 800e454:	9002      	str	r0, [sp, #8]
 800e456:	9006      	str	r0, [sp, #24]
 800e458:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e45c:	4809      	ldr	r0, [pc, #36]	; (800e484 <siprintf+0x38>)
 800e45e:	9107      	str	r1, [sp, #28]
 800e460:	9104      	str	r1, [sp, #16]
 800e462:	4909      	ldr	r1, [pc, #36]	; (800e488 <siprintf+0x3c>)
 800e464:	f853 2b04 	ldr.w	r2, [r3], #4
 800e468:	9105      	str	r1, [sp, #20]
 800e46a:	6800      	ldr	r0, [r0, #0]
 800e46c:	9301      	str	r3, [sp, #4]
 800e46e:	a902      	add	r1, sp, #8
 800e470:	f000 f8d0 	bl	800e614 <_svfiprintf_r>
 800e474:	9b02      	ldr	r3, [sp, #8]
 800e476:	2200      	movs	r2, #0
 800e478:	701a      	strb	r2, [r3, #0]
 800e47a:	b01c      	add	sp, #112	; 0x70
 800e47c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e480:	b003      	add	sp, #12
 800e482:	4770      	bx	lr
 800e484:	2000018c 	.word	0x2000018c
 800e488:	ffff0208 	.word	0xffff0208

0800e48c <strcat>:
 800e48c:	b510      	push	{r4, lr}
 800e48e:	4603      	mov	r3, r0
 800e490:	781a      	ldrb	r2, [r3, #0]
 800e492:	1c5c      	adds	r4, r3, #1
 800e494:	b93a      	cbnz	r2, 800e4a6 <strcat+0x1a>
 800e496:	3b01      	subs	r3, #1
 800e498:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e49c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e4a0:	2a00      	cmp	r2, #0
 800e4a2:	d1f9      	bne.n	800e498 <strcat+0xc>
 800e4a4:	bd10      	pop	{r4, pc}
 800e4a6:	4623      	mov	r3, r4
 800e4a8:	e7f2      	b.n	800e490 <strcat+0x4>
	...

0800e4ac <_malloc_r>:
 800e4ac:	b570      	push	{r4, r5, r6, lr}
 800e4ae:	1ccd      	adds	r5, r1, #3
 800e4b0:	f025 0503 	bic.w	r5, r5, #3
 800e4b4:	3508      	adds	r5, #8
 800e4b6:	2d0c      	cmp	r5, #12
 800e4b8:	bf38      	it	cc
 800e4ba:	250c      	movcc	r5, #12
 800e4bc:	2d00      	cmp	r5, #0
 800e4be:	4606      	mov	r6, r0
 800e4c0:	db01      	blt.n	800e4c6 <_malloc_r+0x1a>
 800e4c2:	42a9      	cmp	r1, r5
 800e4c4:	d903      	bls.n	800e4ce <_malloc_r+0x22>
 800e4c6:	230c      	movs	r3, #12
 800e4c8:	6033      	str	r3, [r6, #0]
 800e4ca:	2000      	movs	r0, #0
 800e4cc:	bd70      	pop	{r4, r5, r6, pc}
 800e4ce:	f000 fb4a 	bl	800eb66 <__malloc_lock>
 800e4d2:	4a21      	ldr	r2, [pc, #132]	; (800e558 <_malloc_r+0xac>)
 800e4d4:	6814      	ldr	r4, [r2, #0]
 800e4d6:	4621      	mov	r1, r4
 800e4d8:	b991      	cbnz	r1, 800e500 <_malloc_r+0x54>
 800e4da:	4c20      	ldr	r4, [pc, #128]	; (800e55c <_malloc_r+0xb0>)
 800e4dc:	6823      	ldr	r3, [r4, #0]
 800e4de:	b91b      	cbnz	r3, 800e4e8 <_malloc_r+0x3c>
 800e4e0:	4630      	mov	r0, r6
 800e4e2:	f000 fb17 	bl	800eb14 <_sbrk_r>
 800e4e6:	6020      	str	r0, [r4, #0]
 800e4e8:	4629      	mov	r1, r5
 800e4ea:	4630      	mov	r0, r6
 800e4ec:	f000 fb12 	bl	800eb14 <_sbrk_r>
 800e4f0:	1c43      	adds	r3, r0, #1
 800e4f2:	d124      	bne.n	800e53e <_malloc_r+0x92>
 800e4f4:	230c      	movs	r3, #12
 800e4f6:	6033      	str	r3, [r6, #0]
 800e4f8:	4630      	mov	r0, r6
 800e4fa:	f000 fb35 	bl	800eb68 <__malloc_unlock>
 800e4fe:	e7e4      	b.n	800e4ca <_malloc_r+0x1e>
 800e500:	680b      	ldr	r3, [r1, #0]
 800e502:	1b5b      	subs	r3, r3, r5
 800e504:	d418      	bmi.n	800e538 <_malloc_r+0x8c>
 800e506:	2b0b      	cmp	r3, #11
 800e508:	d90f      	bls.n	800e52a <_malloc_r+0x7e>
 800e50a:	600b      	str	r3, [r1, #0]
 800e50c:	50cd      	str	r5, [r1, r3]
 800e50e:	18cc      	adds	r4, r1, r3
 800e510:	4630      	mov	r0, r6
 800e512:	f000 fb29 	bl	800eb68 <__malloc_unlock>
 800e516:	f104 000b 	add.w	r0, r4, #11
 800e51a:	1d23      	adds	r3, r4, #4
 800e51c:	f020 0007 	bic.w	r0, r0, #7
 800e520:	1ac3      	subs	r3, r0, r3
 800e522:	d0d3      	beq.n	800e4cc <_malloc_r+0x20>
 800e524:	425a      	negs	r2, r3
 800e526:	50e2      	str	r2, [r4, r3]
 800e528:	e7d0      	b.n	800e4cc <_malloc_r+0x20>
 800e52a:	428c      	cmp	r4, r1
 800e52c:	684b      	ldr	r3, [r1, #4]
 800e52e:	bf16      	itet	ne
 800e530:	6063      	strne	r3, [r4, #4]
 800e532:	6013      	streq	r3, [r2, #0]
 800e534:	460c      	movne	r4, r1
 800e536:	e7eb      	b.n	800e510 <_malloc_r+0x64>
 800e538:	460c      	mov	r4, r1
 800e53a:	6849      	ldr	r1, [r1, #4]
 800e53c:	e7cc      	b.n	800e4d8 <_malloc_r+0x2c>
 800e53e:	1cc4      	adds	r4, r0, #3
 800e540:	f024 0403 	bic.w	r4, r4, #3
 800e544:	42a0      	cmp	r0, r4
 800e546:	d005      	beq.n	800e554 <_malloc_r+0xa8>
 800e548:	1a21      	subs	r1, r4, r0
 800e54a:	4630      	mov	r0, r6
 800e54c:	f000 fae2 	bl	800eb14 <_sbrk_r>
 800e550:	3001      	adds	r0, #1
 800e552:	d0cf      	beq.n	800e4f4 <_malloc_r+0x48>
 800e554:	6025      	str	r5, [r4, #0]
 800e556:	e7db      	b.n	800e510 <_malloc_r+0x64>
 800e558:	200006f4 	.word	0x200006f4
 800e55c:	200006f8 	.word	0x200006f8

0800e560 <__ssputs_r>:
 800e560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e564:	688e      	ldr	r6, [r1, #8]
 800e566:	429e      	cmp	r6, r3
 800e568:	4682      	mov	sl, r0
 800e56a:	460c      	mov	r4, r1
 800e56c:	4690      	mov	r8, r2
 800e56e:	4699      	mov	r9, r3
 800e570:	d837      	bhi.n	800e5e2 <__ssputs_r+0x82>
 800e572:	898a      	ldrh	r2, [r1, #12]
 800e574:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e578:	d031      	beq.n	800e5de <__ssputs_r+0x7e>
 800e57a:	6825      	ldr	r5, [r4, #0]
 800e57c:	6909      	ldr	r1, [r1, #16]
 800e57e:	1a6f      	subs	r7, r5, r1
 800e580:	6965      	ldr	r5, [r4, #20]
 800e582:	2302      	movs	r3, #2
 800e584:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e588:	fb95 f5f3 	sdiv	r5, r5, r3
 800e58c:	f109 0301 	add.w	r3, r9, #1
 800e590:	443b      	add	r3, r7
 800e592:	429d      	cmp	r5, r3
 800e594:	bf38      	it	cc
 800e596:	461d      	movcc	r5, r3
 800e598:	0553      	lsls	r3, r2, #21
 800e59a:	d530      	bpl.n	800e5fe <__ssputs_r+0x9e>
 800e59c:	4629      	mov	r1, r5
 800e59e:	f7ff ff85 	bl	800e4ac <_malloc_r>
 800e5a2:	4606      	mov	r6, r0
 800e5a4:	b950      	cbnz	r0, 800e5bc <__ssputs_r+0x5c>
 800e5a6:	230c      	movs	r3, #12
 800e5a8:	f8ca 3000 	str.w	r3, [sl]
 800e5ac:	89a3      	ldrh	r3, [r4, #12]
 800e5ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5b2:	81a3      	strh	r3, [r4, #12]
 800e5b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e5b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5bc:	463a      	mov	r2, r7
 800e5be:	6921      	ldr	r1, [r4, #16]
 800e5c0:	f7ff ff30 	bl	800e424 <memcpy>
 800e5c4:	89a3      	ldrh	r3, [r4, #12]
 800e5c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e5ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e5ce:	81a3      	strh	r3, [r4, #12]
 800e5d0:	6126      	str	r6, [r4, #16]
 800e5d2:	6165      	str	r5, [r4, #20]
 800e5d4:	443e      	add	r6, r7
 800e5d6:	1bed      	subs	r5, r5, r7
 800e5d8:	6026      	str	r6, [r4, #0]
 800e5da:	60a5      	str	r5, [r4, #8]
 800e5dc:	464e      	mov	r6, r9
 800e5de:	454e      	cmp	r6, r9
 800e5e0:	d900      	bls.n	800e5e4 <__ssputs_r+0x84>
 800e5e2:	464e      	mov	r6, r9
 800e5e4:	4632      	mov	r2, r6
 800e5e6:	4641      	mov	r1, r8
 800e5e8:	6820      	ldr	r0, [r4, #0]
 800e5ea:	f000 faa3 	bl	800eb34 <memmove>
 800e5ee:	68a3      	ldr	r3, [r4, #8]
 800e5f0:	1b9b      	subs	r3, r3, r6
 800e5f2:	60a3      	str	r3, [r4, #8]
 800e5f4:	6823      	ldr	r3, [r4, #0]
 800e5f6:	441e      	add	r6, r3
 800e5f8:	6026      	str	r6, [r4, #0]
 800e5fa:	2000      	movs	r0, #0
 800e5fc:	e7dc      	b.n	800e5b8 <__ssputs_r+0x58>
 800e5fe:	462a      	mov	r2, r5
 800e600:	f000 fb02 	bl	800ec08 <_realloc_r>
 800e604:	4606      	mov	r6, r0
 800e606:	2800      	cmp	r0, #0
 800e608:	d1e2      	bne.n	800e5d0 <__ssputs_r+0x70>
 800e60a:	6921      	ldr	r1, [r4, #16]
 800e60c:	4650      	mov	r0, sl
 800e60e:	f000 faad 	bl	800eb6c <_free_r>
 800e612:	e7c8      	b.n	800e5a6 <__ssputs_r+0x46>

0800e614 <_svfiprintf_r>:
 800e614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e618:	461d      	mov	r5, r3
 800e61a:	898b      	ldrh	r3, [r1, #12]
 800e61c:	061f      	lsls	r7, r3, #24
 800e61e:	b09d      	sub	sp, #116	; 0x74
 800e620:	4680      	mov	r8, r0
 800e622:	460c      	mov	r4, r1
 800e624:	4616      	mov	r6, r2
 800e626:	d50f      	bpl.n	800e648 <_svfiprintf_r+0x34>
 800e628:	690b      	ldr	r3, [r1, #16]
 800e62a:	b96b      	cbnz	r3, 800e648 <_svfiprintf_r+0x34>
 800e62c:	2140      	movs	r1, #64	; 0x40
 800e62e:	f7ff ff3d 	bl	800e4ac <_malloc_r>
 800e632:	6020      	str	r0, [r4, #0]
 800e634:	6120      	str	r0, [r4, #16]
 800e636:	b928      	cbnz	r0, 800e644 <_svfiprintf_r+0x30>
 800e638:	230c      	movs	r3, #12
 800e63a:	f8c8 3000 	str.w	r3, [r8]
 800e63e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e642:	e0c8      	b.n	800e7d6 <_svfiprintf_r+0x1c2>
 800e644:	2340      	movs	r3, #64	; 0x40
 800e646:	6163      	str	r3, [r4, #20]
 800e648:	2300      	movs	r3, #0
 800e64a:	9309      	str	r3, [sp, #36]	; 0x24
 800e64c:	2320      	movs	r3, #32
 800e64e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e652:	2330      	movs	r3, #48	; 0x30
 800e654:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e658:	9503      	str	r5, [sp, #12]
 800e65a:	f04f 0b01 	mov.w	fp, #1
 800e65e:	4637      	mov	r7, r6
 800e660:	463d      	mov	r5, r7
 800e662:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e666:	b10b      	cbz	r3, 800e66c <_svfiprintf_r+0x58>
 800e668:	2b25      	cmp	r3, #37	; 0x25
 800e66a:	d13e      	bne.n	800e6ea <_svfiprintf_r+0xd6>
 800e66c:	ebb7 0a06 	subs.w	sl, r7, r6
 800e670:	d00b      	beq.n	800e68a <_svfiprintf_r+0x76>
 800e672:	4653      	mov	r3, sl
 800e674:	4632      	mov	r2, r6
 800e676:	4621      	mov	r1, r4
 800e678:	4640      	mov	r0, r8
 800e67a:	f7ff ff71 	bl	800e560 <__ssputs_r>
 800e67e:	3001      	adds	r0, #1
 800e680:	f000 80a4 	beq.w	800e7cc <_svfiprintf_r+0x1b8>
 800e684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e686:	4453      	add	r3, sl
 800e688:	9309      	str	r3, [sp, #36]	; 0x24
 800e68a:	783b      	ldrb	r3, [r7, #0]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	f000 809d 	beq.w	800e7cc <_svfiprintf_r+0x1b8>
 800e692:	2300      	movs	r3, #0
 800e694:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e698:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e69c:	9304      	str	r3, [sp, #16]
 800e69e:	9307      	str	r3, [sp, #28]
 800e6a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e6a4:	931a      	str	r3, [sp, #104]	; 0x68
 800e6a6:	462f      	mov	r7, r5
 800e6a8:	2205      	movs	r2, #5
 800e6aa:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e6ae:	4850      	ldr	r0, [pc, #320]	; (800e7f0 <_svfiprintf_r+0x1dc>)
 800e6b0:	f7f1 fd6e 	bl	8000190 <memchr>
 800e6b4:	9b04      	ldr	r3, [sp, #16]
 800e6b6:	b9d0      	cbnz	r0, 800e6ee <_svfiprintf_r+0xda>
 800e6b8:	06d9      	lsls	r1, r3, #27
 800e6ba:	bf44      	itt	mi
 800e6bc:	2220      	movmi	r2, #32
 800e6be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e6c2:	071a      	lsls	r2, r3, #28
 800e6c4:	bf44      	itt	mi
 800e6c6:	222b      	movmi	r2, #43	; 0x2b
 800e6c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e6cc:	782a      	ldrb	r2, [r5, #0]
 800e6ce:	2a2a      	cmp	r2, #42	; 0x2a
 800e6d0:	d015      	beq.n	800e6fe <_svfiprintf_r+0xea>
 800e6d2:	9a07      	ldr	r2, [sp, #28]
 800e6d4:	462f      	mov	r7, r5
 800e6d6:	2000      	movs	r0, #0
 800e6d8:	250a      	movs	r5, #10
 800e6da:	4639      	mov	r1, r7
 800e6dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e6e0:	3b30      	subs	r3, #48	; 0x30
 800e6e2:	2b09      	cmp	r3, #9
 800e6e4:	d94d      	bls.n	800e782 <_svfiprintf_r+0x16e>
 800e6e6:	b1b8      	cbz	r0, 800e718 <_svfiprintf_r+0x104>
 800e6e8:	e00f      	b.n	800e70a <_svfiprintf_r+0xf6>
 800e6ea:	462f      	mov	r7, r5
 800e6ec:	e7b8      	b.n	800e660 <_svfiprintf_r+0x4c>
 800e6ee:	4a40      	ldr	r2, [pc, #256]	; (800e7f0 <_svfiprintf_r+0x1dc>)
 800e6f0:	1a80      	subs	r0, r0, r2
 800e6f2:	fa0b f000 	lsl.w	r0, fp, r0
 800e6f6:	4318      	orrs	r0, r3
 800e6f8:	9004      	str	r0, [sp, #16]
 800e6fa:	463d      	mov	r5, r7
 800e6fc:	e7d3      	b.n	800e6a6 <_svfiprintf_r+0x92>
 800e6fe:	9a03      	ldr	r2, [sp, #12]
 800e700:	1d11      	adds	r1, r2, #4
 800e702:	6812      	ldr	r2, [r2, #0]
 800e704:	9103      	str	r1, [sp, #12]
 800e706:	2a00      	cmp	r2, #0
 800e708:	db01      	blt.n	800e70e <_svfiprintf_r+0xfa>
 800e70a:	9207      	str	r2, [sp, #28]
 800e70c:	e004      	b.n	800e718 <_svfiprintf_r+0x104>
 800e70e:	4252      	negs	r2, r2
 800e710:	f043 0302 	orr.w	r3, r3, #2
 800e714:	9207      	str	r2, [sp, #28]
 800e716:	9304      	str	r3, [sp, #16]
 800e718:	783b      	ldrb	r3, [r7, #0]
 800e71a:	2b2e      	cmp	r3, #46	; 0x2e
 800e71c:	d10c      	bne.n	800e738 <_svfiprintf_r+0x124>
 800e71e:	787b      	ldrb	r3, [r7, #1]
 800e720:	2b2a      	cmp	r3, #42	; 0x2a
 800e722:	d133      	bne.n	800e78c <_svfiprintf_r+0x178>
 800e724:	9b03      	ldr	r3, [sp, #12]
 800e726:	1d1a      	adds	r2, r3, #4
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	9203      	str	r2, [sp, #12]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	bfb8      	it	lt
 800e730:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e734:	3702      	adds	r7, #2
 800e736:	9305      	str	r3, [sp, #20]
 800e738:	4d2e      	ldr	r5, [pc, #184]	; (800e7f4 <_svfiprintf_r+0x1e0>)
 800e73a:	7839      	ldrb	r1, [r7, #0]
 800e73c:	2203      	movs	r2, #3
 800e73e:	4628      	mov	r0, r5
 800e740:	f7f1 fd26 	bl	8000190 <memchr>
 800e744:	b138      	cbz	r0, 800e756 <_svfiprintf_r+0x142>
 800e746:	2340      	movs	r3, #64	; 0x40
 800e748:	1b40      	subs	r0, r0, r5
 800e74a:	fa03 f000 	lsl.w	r0, r3, r0
 800e74e:	9b04      	ldr	r3, [sp, #16]
 800e750:	4303      	orrs	r3, r0
 800e752:	3701      	adds	r7, #1
 800e754:	9304      	str	r3, [sp, #16]
 800e756:	7839      	ldrb	r1, [r7, #0]
 800e758:	4827      	ldr	r0, [pc, #156]	; (800e7f8 <_svfiprintf_r+0x1e4>)
 800e75a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e75e:	2206      	movs	r2, #6
 800e760:	1c7e      	adds	r6, r7, #1
 800e762:	f7f1 fd15 	bl	8000190 <memchr>
 800e766:	2800      	cmp	r0, #0
 800e768:	d038      	beq.n	800e7dc <_svfiprintf_r+0x1c8>
 800e76a:	4b24      	ldr	r3, [pc, #144]	; (800e7fc <_svfiprintf_r+0x1e8>)
 800e76c:	bb13      	cbnz	r3, 800e7b4 <_svfiprintf_r+0x1a0>
 800e76e:	9b03      	ldr	r3, [sp, #12]
 800e770:	3307      	adds	r3, #7
 800e772:	f023 0307 	bic.w	r3, r3, #7
 800e776:	3308      	adds	r3, #8
 800e778:	9303      	str	r3, [sp, #12]
 800e77a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e77c:	444b      	add	r3, r9
 800e77e:	9309      	str	r3, [sp, #36]	; 0x24
 800e780:	e76d      	b.n	800e65e <_svfiprintf_r+0x4a>
 800e782:	fb05 3202 	mla	r2, r5, r2, r3
 800e786:	2001      	movs	r0, #1
 800e788:	460f      	mov	r7, r1
 800e78a:	e7a6      	b.n	800e6da <_svfiprintf_r+0xc6>
 800e78c:	2300      	movs	r3, #0
 800e78e:	3701      	adds	r7, #1
 800e790:	9305      	str	r3, [sp, #20]
 800e792:	4619      	mov	r1, r3
 800e794:	250a      	movs	r5, #10
 800e796:	4638      	mov	r0, r7
 800e798:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e79c:	3a30      	subs	r2, #48	; 0x30
 800e79e:	2a09      	cmp	r2, #9
 800e7a0:	d903      	bls.n	800e7aa <_svfiprintf_r+0x196>
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d0c8      	beq.n	800e738 <_svfiprintf_r+0x124>
 800e7a6:	9105      	str	r1, [sp, #20]
 800e7a8:	e7c6      	b.n	800e738 <_svfiprintf_r+0x124>
 800e7aa:	fb05 2101 	mla	r1, r5, r1, r2
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	4607      	mov	r7, r0
 800e7b2:	e7f0      	b.n	800e796 <_svfiprintf_r+0x182>
 800e7b4:	ab03      	add	r3, sp, #12
 800e7b6:	9300      	str	r3, [sp, #0]
 800e7b8:	4622      	mov	r2, r4
 800e7ba:	4b11      	ldr	r3, [pc, #68]	; (800e800 <_svfiprintf_r+0x1ec>)
 800e7bc:	a904      	add	r1, sp, #16
 800e7be:	4640      	mov	r0, r8
 800e7c0:	f3af 8000 	nop.w
 800e7c4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800e7c8:	4681      	mov	r9, r0
 800e7ca:	d1d6      	bne.n	800e77a <_svfiprintf_r+0x166>
 800e7cc:	89a3      	ldrh	r3, [r4, #12]
 800e7ce:	065b      	lsls	r3, r3, #25
 800e7d0:	f53f af35 	bmi.w	800e63e <_svfiprintf_r+0x2a>
 800e7d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e7d6:	b01d      	add	sp, #116	; 0x74
 800e7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7dc:	ab03      	add	r3, sp, #12
 800e7de:	9300      	str	r3, [sp, #0]
 800e7e0:	4622      	mov	r2, r4
 800e7e2:	4b07      	ldr	r3, [pc, #28]	; (800e800 <_svfiprintf_r+0x1ec>)
 800e7e4:	a904      	add	r1, sp, #16
 800e7e6:	4640      	mov	r0, r8
 800e7e8:	f000 f882 	bl	800e8f0 <_printf_i>
 800e7ec:	e7ea      	b.n	800e7c4 <_svfiprintf_r+0x1b0>
 800e7ee:	bf00      	nop
 800e7f0:	0800f064 	.word	0x0800f064
 800e7f4:	0800f06a 	.word	0x0800f06a
 800e7f8:	0800f06e 	.word	0x0800f06e
 800e7fc:	00000000 	.word	0x00000000
 800e800:	0800e561 	.word	0x0800e561

0800e804 <_printf_common>:
 800e804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e808:	4691      	mov	r9, r2
 800e80a:	461f      	mov	r7, r3
 800e80c:	688a      	ldr	r2, [r1, #8]
 800e80e:	690b      	ldr	r3, [r1, #16]
 800e810:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e814:	4293      	cmp	r3, r2
 800e816:	bfb8      	it	lt
 800e818:	4613      	movlt	r3, r2
 800e81a:	f8c9 3000 	str.w	r3, [r9]
 800e81e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e822:	4606      	mov	r6, r0
 800e824:	460c      	mov	r4, r1
 800e826:	b112      	cbz	r2, 800e82e <_printf_common+0x2a>
 800e828:	3301      	adds	r3, #1
 800e82a:	f8c9 3000 	str.w	r3, [r9]
 800e82e:	6823      	ldr	r3, [r4, #0]
 800e830:	0699      	lsls	r1, r3, #26
 800e832:	bf42      	ittt	mi
 800e834:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e838:	3302      	addmi	r3, #2
 800e83a:	f8c9 3000 	strmi.w	r3, [r9]
 800e83e:	6825      	ldr	r5, [r4, #0]
 800e840:	f015 0506 	ands.w	r5, r5, #6
 800e844:	d107      	bne.n	800e856 <_printf_common+0x52>
 800e846:	f104 0a19 	add.w	sl, r4, #25
 800e84a:	68e3      	ldr	r3, [r4, #12]
 800e84c:	f8d9 2000 	ldr.w	r2, [r9]
 800e850:	1a9b      	subs	r3, r3, r2
 800e852:	42ab      	cmp	r3, r5
 800e854:	dc28      	bgt.n	800e8a8 <_printf_common+0xa4>
 800e856:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e85a:	6822      	ldr	r2, [r4, #0]
 800e85c:	3300      	adds	r3, #0
 800e85e:	bf18      	it	ne
 800e860:	2301      	movne	r3, #1
 800e862:	0692      	lsls	r2, r2, #26
 800e864:	d42d      	bmi.n	800e8c2 <_printf_common+0xbe>
 800e866:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e86a:	4639      	mov	r1, r7
 800e86c:	4630      	mov	r0, r6
 800e86e:	47c0      	blx	r8
 800e870:	3001      	adds	r0, #1
 800e872:	d020      	beq.n	800e8b6 <_printf_common+0xb2>
 800e874:	6823      	ldr	r3, [r4, #0]
 800e876:	68e5      	ldr	r5, [r4, #12]
 800e878:	f8d9 2000 	ldr.w	r2, [r9]
 800e87c:	f003 0306 	and.w	r3, r3, #6
 800e880:	2b04      	cmp	r3, #4
 800e882:	bf08      	it	eq
 800e884:	1aad      	subeq	r5, r5, r2
 800e886:	68a3      	ldr	r3, [r4, #8]
 800e888:	6922      	ldr	r2, [r4, #16]
 800e88a:	bf0c      	ite	eq
 800e88c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e890:	2500      	movne	r5, #0
 800e892:	4293      	cmp	r3, r2
 800e894:	bfc4      	itt	gt
 800e896:	1a9b      	subgt	r3, r3, r2
 800e898:	18ed      	addgt	r5, r5, r3
 800e89a:	f04f 0900 	mov.w	r9, #0
 800e89e:	341a      	adds	r4, #26
 800e8a0:	454d      	cmp	r5, r9
 800e8a2:	d11a      	bne.n	800e8da <_printf_common+0xd6>
 800e8a4:	2000      	movs	r0, #0
 800e8a6:	e008      	b.n	800e8ba <_printf_common+0xb6>
 800e8a8:	2301      	movs	r3, #1
 800e8aa:	4652      	mov	r2, sl
 800e8ac:	4639      	mov	r1, r7
 800e8ae:	4630      	mov	r0, r6
 800e8b0:	47c0      	blx	r8
 800e8b2:	3001      	adds	r0, #1
 800e8b4:	d103      	bne.n	800e8be <_printf_common+0xba>
 800e8b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e8ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8be:	3501      	adds	r5, #1
 800e8c0:	e7c3      	b.n	800e84a <_printf_common+0x46>
 800e8c2:	18e1      	adds	r1, r4, r3
 800e8c4:	1c5a      	adds	r2, r3, #1
 800e8c6:	2030      	movs	r0, #48	; 0x30
 800e8c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e8cc:	4422      	add	r2, r4
 800e8ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e8d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e8d6:	3302      	adds	r3, #2
 800e8d8:	e7c5      	b.n	800e866 <_printf_common+0x62>
 800e8da:	2301      	movs	r3, #1
 800e8dc:	4622      	mov	r2, r4
 800e8de:	4639      	mov	r1, r7
 800e8e0:	4630      	mov	r0, r6
 800e8e2:	47c0      	blx	r8
 800e8e4:	3001      	adds	r0, #1
 800e8e6:	d0e6      	beq.n	800e8b6 <_printf_common+0xb2>
 800e8e8:	f109 0901 	add.w	r9, r9, #1
 800e8ec:	e7d8      	b.n	800e8a0 <_printf_common+0x9c>
	...

0800e8f0 <_printf_i>:
 800e8f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e8f4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e8f8:	460c      	mov	r4, r1
 800e8fa:	7e09      	ldrb	r1, [r1, #24]
 800e8fc:	b085      	sub	sp, #20
 800e8fe:	296e      	cmp	r1, #110	; 0x6e
 800e900:	4617      	mov	r7, r2
 800e902:	4606      	mov	r6, r0
 800e904:	4698      	mov	r8, r3
 800e906:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e908:	f000 80b3 	beq.w	800ea72 <_printf_i+0x182>
 800e90c:	d822      	bhi.n	800e954 <_printf_i+0x64>
 800e90e:	2963      	cmp	r1, #99	; 0x63
 800e910:	d036      	beq.n	800e980 <_printf_i+0x90>
 800e912:	d80a      	bhi.n	800e92a <_printf_i+0x3a>
 800e914:	2900      	cmp	r1, #0
 800e916:	f000 80b9 	beq.w	800ea8c <_printf_i+0x19c>
 800e91a:	2958      	cmp	r1, #88	; 0x58
 800e91c:	f000 8083 	beq.w	800ea26 <_printf_i+0x136>
 800e920:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e924:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e928:	e032      	b.n	800e990 <_printf_i+0xa0>
 800e92a:	2964      	cmp	r1, #100	; 0x64
 800e92c:	d001      	beq.n	800e932 <_printf_i+0x42>
 800e92e:	2969      	cmp	r1, #105	; 0x69
 800e930:	d1f6      	bne.n	800e920 <_printf_i+0x30>
 800e932:	6820      	ldr	r0, [r4, #0]
 800e934:	6813      	ldr	r3, [r2, #0]
 800e936:	0605      	lsls	r5, r0, #24
 800e938:	f103 0104 	add.w	r1, r3, #4
 800e93c:	d52a      	bpl.n	800e994 <_printf_i+0xa4>
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	6011      	str	r1, [r2, #0]
 800e942:	2b00      	cmp	r3, #0
 800e944:	da03      	bge.n	800e94e <_printf_i+0x5e>
 800e946:	222d      	movs	r2, #45	; 0x2d
 800e948:	425b      	negs	r3, r3
 800e94a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e94e:	486f      	ldr	r0, [pc, #444]	; (800eb0c <_printf_i+0x21c>)
 800e950:	220a      	movs	r2, #10
 800e952:	e039      	b.n	800e9c8 <_printf_i+0xd8>
 800e954:	2973      	cmp	r1, #115	; 0x73
 800e956:	f000 809d 	beq.w	800ea94 <_printf_i+0x1a4>
 800e95a:	d808      	bhi.n	800e96e <_printf_i+0x7e>
 800e95c:	296f      	cmp	r1, #111	; 0x6f
 800e95e:	d020      	beq.n	800e9a2 <_printf_i+0xb2>
 800e960:	2970      	cmp	r1, #112	; 0x70
 800e962:	d1dd      	bne.n	800e920 <_printf_i+0x30>
 800e964:	6823      	ldr	r3, [r4, #0]
 800e966:	f043 0320 	orr.w	r3, r3, #32
 800e96a:	6023      	str	r3, [r4, #0]
 800e96c:	e003      	b.n	800e976 <_printf_i+0x86>
 800e96e:	2975      	cmp	r1, #117	; 0x75
 800e970:	d017      	beq.n	800e9a2 <_printf_i+0xb2>
 800e972:	2978      	cmp	r1, #120	; 0x78
 800e974:	d1d4      	bne.n	800e920 <_printf_i+0x30>
 800e976:	2378      	movs	r3, #120	; 0x78
 800e978:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e97c:	4864      	ldr	r0, [pc, #400]	; (800eb10 <_printf_i+0x220>)
 800e97e:	e055      	b.n	800ea2c <_printf_i+0x13c>
 800e980:	6813      	ldr	r3, [r2, #0]
 800e982:	1d19      	adds	r1, r3, #4
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	6011      	str	r1, [r2, #0]
 800e988:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e98c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e990:	2301      	movs	r3, #1
 800e992:	e08c      	b.n	800eaae <_printf_i+0x1be>
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	6011      	str	r1, [r2, #0]
 800e998:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e99c:	bf18      	it	ne
 800e99e:	b21b      	sxthne	r3, r3
 800e9a0:	e7cf      	b.n	800e942 <_printf_i+0x52>
 800e9a2:	6813      	ldr	r3, [r2, #0]
 800e9a4:	6825      	ldr	r5, [r4, #0]
 800e9a6:	1d18      	adds	r0, r3, #4
 800e9a8:	6010      	str	r0, [r2, #0]
 800e9aa:	0628      	lsls	r0, r5, #24
 800e9ac:	d501      	bpl.n	800e9b2 <_printf_i+0xc2>
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	e002      	b.n	800e9b8 <_printf_i+0xc8>
 800e9b2:	0668      	lsls	r0, r5, #25
 800e9b4:	d5fb      	bpl.n	800e9ae <_printf_i+0xbe>
 800e9b6:	881b      	ldrh	r3, [r3, #0]
 800e9b8:	4854      	ldr	r0, [pc, #336]	; (800eb0c <_printf_i+0x21c>)
 800e9ba:	296f      	cmp	r1, #111	; 0x6f
 800e9bc:	bf14      	ite	ne
 800e9be:	220a      	movne	r2, #10
 800e9c0:	2208      	moveq	r2, #8
 800e9c2:	2100      	movs	r1, #0
 800e9c4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e9c8:	6865      	ldr	r5, [r4, #4]
 800e9ca:	60a5      	str	r5, [r4, #8]
 800e9cc:	2d00      	cmp	r5, #0
 800e9ce:	f2c0 8095 	blt.w	800eafc <_printf_i+0x20c>
 800e9d2:	6821      	ldr	r1, [r4, #0]
 800e9d4:	f021 0104 	bic.w	r1, r1, #4
 800e9d8:	6021      	str	r1, [r4, #0]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d13d      	bne.n	800ea5a <_printf_i+0x16a>
 800e9de:	2d00      	cmp	r5, #0
 800e9e0:	f040 808e 	bne.w	800eb00 <_printf_i+0x210>
 800e9e4:	4665      	mov	r5, ip
 800e9e6:	2a08      	cmp	r2, #8
 800e9e8:	d10b      	bne.n	800ea02 <_printf_i+0x112>
 800e9ea:	6823      	ldr	r3, [r4, #0]
 800e9ec:	07db      	lsls	r3, r3, #31
 800e9ee:	d508      	bpl.n	800ea02 <_printf_i+0x112>
 800e9f0:	6923      	ldr	r3, [r4, #16]
 800e9f2:	6862      	ldr	r2, [r4, #4]
 800e9f4:	429a      	cmp	r2, r3
 800e9f6:	bfde      	ittt	le
 800e9f8:	2330      	movle	r3, #48	; 0x30
 800e9fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e9fe:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ea02:	ebac 0305 	sub.w	r3, ip, r5
 800ea06:	6123      	str	r3, [r4, #16]
 800ea08:	f8cd 8000 	str.w	r8, [sp]
 800ea0c:	463b      	mov	r3, r7
 800ea0e:	aa03      	add	r2, sp, #12
 800ea10:	4621      	mov	r1, r4
 800ea12:	4630      	mov	r0, r6
 800ea14:	f7ff fef6 	bl	800e804 <_printf_common>
 800ea18:	3001      	adds	r0, #1
 800ea1a:	d14d      	bne.n	800eab8 <_printf_i+0x1c8>
 800ea1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ea20:	b005      	add	sp, #20
 800ea22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea26:	4839      	ldr	r0, [pc, #228]	; (800eb0c <_printf_i+0x21c>)
 800ea28:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ea2c:	6813      	ldr	r3, [r2, #0]
 800ea2e:	6821      	ldr	r1, [r4, #0]
 800ea30:	1d1d      	adds	r5, r3, #4
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	6015      	str	r5, [r2, #0]
 800ea36:	060a      	lsls	r2, r1, #24
 800ea38:	d50b      	bpl.n	800ea52 <_printf_i+0x162>
 800ea3a:	07ca      	lsls	r2, r1, #31
 800ea3c:	bf44      	itt	mi
 800ea3e:	f041 0120 	orrmi.w	r1, r1, #32
 800ea42:	6021      	strmi	r1, [r4, #0]
 800ea44:	b91b      	cbnz	r3, 800ea4e <_printf_i+0x15e>
 800ea46:	6822      	ldr	r2, [r4, #0]
 800ea48:	f022 0220 	bic.w	r2, r2, #32
 800ea4c:	6022      	str	r2, [r4, #0]
 800ea4e:	2210      	movs	r2, #16
 800ea50:	e7b7      	b.n	800e9c2 <_printf_i+0xd2>
 800ea52:	064d      	lsls	r5, r1, #25
 800ea54:	bf48      	it	mi
 800ea56:	b29b      	uxthmi	r3, r3
 800ea58:	e7ef      	b.n	800ea3a <_printf_i+0x14a>
 800ea5a:	4665      	mov	r5, ip
 800ea5c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ea60:	fb02 3311 	mls	r3, r2, r1, r3
 800ea64:	5cc3      	ldrb	r3, [r0, r3]
 800ea66:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ea6a:	460b      	mov	r3, r1
 800ea6c:	2900      	cmp	r1, #0
 800ea6e:	d1f5      	bne.n	800ea5c <_printf_i+0x16c>
 800ea70:	e7b9      	b.n	800e9e6 <_printf_i+0xf6>
 800ea72:	6813      	ldr	r3, [r2, #0]
 800ea74:	6825      	ldr	r5, [r4, #0]
 800ea76:	6961      	ldr	r1, [r4, #20]
 800ea78:	1d18      	adds	r0, r3, #4
 800ea7a:	6010      	str	r0, [r2, #0]
 800ea7c:	0628      	lsls	r0, r5, #24
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	d501      	bpl.n	800ea86 <_printf_i+0x196>
 800ea82:	6019      	str	r1, [r3, #0]
 800ea84:	e002      	b.n	800ea8c <_printf_i+0x19c>
 800ea86:	066a      	lsls	r2, r5, #25
 800ea88:	d5fb      	bpl.n	800ea82 <_printf_i+0x192>
 800ea8a:	8019      	strh	r1, [r3, #0]
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	6123      	str	r3, [r4, #16]
 800ea90:	4665      	mov	r5, ip
 800ea92:	e7b9      	b.n	800ea08 <_printf_i+0x118>
 800ea94:	6813      	ldr	r3, [r2, #0]
 800ea96:	1d19      	adds	r1, r3, #4
 800ea98:	6011      	str	r1, [r2, #0]
 800ea9a:	681d      	ldr	r5, [r3, #0]
 800ea9c:	6862      	ldr	r2, [r4, #4]
 800ea9e:	2100      	movs	r1, #0
 800eaa0:	4628      	mov	r0, r5
 800eaa2:	f7f1 fb75 	bl	8000190 <memchr>
 800eaa6:	b108      	cbz	r0, 800eaac <_printf_i+0x1bc>
 800eaa8:	1b40      	subs	r0, r0, r5
 800eaaa:	6060      	str	r0, [r4, #4]
 800eaac:	6863      	ldr	r3, [r4, #4]
 800eaae:	6123      	str	r3, [r4, #16]
 800eab0:	2300      	movs	r3, #0
 800eab2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eab6:	e7a7      	b.n	800ea08 <_printf_i+0x118>
 800eab8:	6923      	ldr	r3, [r4, #16]
 800eaba:	462a      	mov	r2, r5
 800eabc:	4639      	mov	r1, r7
 800eabe:	4630      	mov	r0, r6
 800eac0:	47c0      	blx	r8
 800eac2:	3001      	adds	r0, #1
 800eac4:	d0aa      	beq.n	800ea1c <_printf_i+0x12c>
 800eac6:	6823      	ldr	r3, [r4, #0]
 800eac8:	079b      	lsls	r3, r3, #30
 800eaca:	d413      	bmi.n	800eaf4 <_printf_i+0x204>
 800eacc:	68e0      	ldr	r0, [r4, #12]
 800eace:	9b03      	ldr	r3, [sp, #12]
 800ead0:	4298      	cmp	r0, r3
 800ead2:	bfb8      	it	lt
 800ead4:	4618      	movlt	r0, r3
 800ead6:	e7a3      	b.n	800ea20 <_printf_i+0x130>
 800ead8:	2301      	movs	r3, #1
 800eada:	464a      	mov	r2, r9
 800eadc:	4639      	mov	r1, r7
 800eade:	4630      	mov	r0, r6
 800eae0:	47c0      	blx	r8
 800eae2:	3001      	adds	r0, #1
 800eae4:	d09a      	beq.n	800ea1c <_printf_i+0x12c>
 800eae6:	3501      	adds	r5, #1
 800eae8:	68e3      	ldr	r3, [r4, #12]
 800eaea:	9a03      	ldr	r2, [sp, #12]
 800eaec:	1a9b      	subs	r3, r3, r2
 800eaee:	42ab      	cmp	r3, r5
 800eaf0:	dcf2      	bgt.n	800ead8 <_printf_i+0x1e8>
 800eaf2:	e7eb      	b.n	800eacc <_printf_i+0x1dc>
 800eaf4:	2500      	movs	r5, #0
 800eaf6:	f104 0919 	add.w	r9, r4, #25
 800eafa:	e7f5      	b.n	800eae8 <_printf_i+0x1f8>
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d1ac      	bne.n	800ea5a <_printf_i+0x16a>
 800eb00:	7803      	ldrb	r3, [r0, #0]
 800eb02:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eb06:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eb0a:	e76c      	b.n	800e9e6 <_printf_i+0xf6>
 800eb0c:	0800f075 	.word	0x0800f075
 800eb10:	0800f086 	.word	0x0800f086

0800eb14 <_sbrk_r>:
 800eb14:	b538      	push	{r3, r4, r5, lr}
 800eb16:	4c06      	ldr	r4, [pc, #24]	; (800eb30 <_sbrk_r+0x1c>)
 800eb18:	2300      	movs	r3, #0
 800eb1a:	4605      	mov	r5, r0
 800eb1c:	4608      	mov	r0, r1
 800eb1e:	6023      	str	r3, [r4, #0]
 800eb20:	f7f3 fa7e 	bl	8002020 <_sbrk>
 800eb24:	1c43      	adds	r3, r0, #1
 800eb26:	d102      	bne.n	800eb2e <_sbrk_r+0x1a>
 800eb28:	6823      	ldr	r3, [r4, #0]
 800eb2a:	b103      	cbz	r3, 800eb2e <_sbrk_r+0x1a>
 800eb2c:	602b      	str	r3, [r5, #0]
 800eb2e:	bd38      	pop	{r3, r4, r5, pc}
 800eb30:	20000f20 	.word	0x20000f20

0800eb34 <memmove>:
 800eb34:	4288      	cmp	r0, r1
 800eb36:	b510      	push	{r4, lr}
 800eb38:	eb01 0302 	add.w	r3, r1, r2
 800eb3c:	d807      	bhi.n	800eb4e <memmove+0x1a>
 800eb3e:	1e42      	subs	r2, r0, #1
 800eb40:	4299      	cmp	r1, r3
 800eb42:	d00a      	beq.n	800eb5a <memmove+0x26>
 800eb44:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb48:	f802 4f01 	strb.w	r4, [r2, #1]!
 800eb4c:	e7f8      	b.n	800eb40 <memmove+0xc>
 800eb4e:	4283      	cmp	r3, r0
 800eb50:	d9f5      	bls.n	800eb3e <memmove+0xa>
 800eb52:	1881      	adds	r1, r0, r2
 800eb54:	1ad2      	subs	r2, r2, r3
 800eb56:	42d3      	cmn	r3, r2
 800eb58:	d100      	bne.n	800eb5c <memmove+0x28>
 800eb5a:	bd10      	pop	{r4, pc}
 800eb5c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eb60:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800eb64:	e7f7      	b.n	800eb56 <memmove+0x22>

0800eb66 <__malloc_lock>:
 800eb66:	4770      	bx	lr

0800eb68 <__malloc_unlock>:
 800eb68:	4770      	bx	lr
	...

0800eb6c <_free_r>:
 800eb6c:	b538      	push	{r3, r4, r5, lr}
 800eb6e:	4605      	mov	r5, r0
 800eb70:	2900      	cmp	r1, #0
 800eb72:	d045      	beq.n	800ec00 <_free_r+0x94>
 800eb74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb78:	1f0c      	subs	r4, r1, #4
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	bfb8      	it	lt
 800eb7e:	18e4      	addlt	r4, r4, r3
 800eb80:	f7ff fff1 	bl	800eb66 <__malloc_lock>
 800eb84:	4a1f      	ldr	r2, [pc, #124]	; (800ec04 <_free_r+0x98>)
 800eb86:	6813      	ldr	r3, [r2, #0]
 800eb88:	4610      	mov	r0, r2
 800eb8a:	b933      	cbnz	r3, 800eb9a <_free_r+0x2e>
 800eb8c:	6063      	str	r3, [r4, #4]
 800eb8e:	6014      	str	r4, [r2, #0]
 800eb90:	4628      	mov	r0, r5
 800eb92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb96:	f7ff bfe7 	b.w	800eb68 <__malloc_unlock>
 800eb9a:	42a3      	cmp	r3, r4
 800eb9c:	d90c      	bls.n	800ebb8 <_free_r+0x4c>
 800eb9e:	6821      	ldr	r1, [r4, #0]
 800eba0:	1862      	adds	r2, r4, r1
 800eba2:	4293      	cmp	r3, r2
 800eba4:	bf04      	itt	eq
 800eba6:	681a      	ldreq	r2, [r3, #0]
 800eba8:	685b      	ldreq	r3, [r3, #4]
 800ebaa:	6063      	str	r3, [r4, #4]
 800ebac:	bf04      	itt	eq
 800ebae:	1852      	addeq	r2, r2, r1
 800ebb0:	6022      	streq	r2, [r4, #0]
 800ebb2:	6004      	str	r4, [r0, #0]
 800ebb4:	e7ec      	b.n	800eb90 <_free_r+0x24>
 800ebb6:	4613      	mov	r3, r2
 800ebb8:	685a      	ldr	r2, [r3, #4]
 800ebba:	b10a      	cbz	r2, 800ebc0 <_free_r+0x54>
 800ebbc:	42a2      	cmp	r2, r4
 800ebbe:	d9fa      	bls.n	800ebb6 <_free_r+0x4a>
 800ebc0:	6819      	ldr	r1, [r3, #0]
 800ebc2:	1858      	adds	r0, r3, r1
 800ebc4:	42a0      	cmp	r0, r4
 800ebc6:	d10b      	bne.n	800ebe0 <_free_r+0x74>
 800ebc8:	6820      	ldr	r0, [r4, #0]
 800ebca:	4401      	add	r1, r0
 800ebcc:	1858      	adds	r0, r3, r1
 800ebce:	4282      	cmp	r2, r0
 800ebd0:	6019      	str	r1, [r3, #0]
 800ebd2:	d1dd      	bne.n	800eb90 <_free_r+0x24>
 800ebd4:	6810      	ldr	r0, [r2, #0]
 800ebd6:	6852      	ldr	r2, [r2, #4]
 800ebd8:	605a      	str	r2, [r3, #4]
 800ebda:	4401      	add	r1, r0
 800ebdc:	6019      	str	r1, [r3, #0]
 800ebde:	e7d7      	b.n	800eb90 <_free_r+0x24>
 800ebe0:	d902      	bls.n	800ebe8 <_free_r+0x7c>
 800ebe2:	230c      	movs	r3, #12
 800ebe4:	602b      	str	r3, [r5, #0]
 800ebe6:	e7d3      	b.n	800eb90 <_free_r+0x24>
 800ebe8:	6820      	ldr	r0, [r4, #0]
 800ebea:	1821      	adds	r1, r4, r0
 800ebec:	428a      	cmp	r2, r1
 800ebee:	bf04      	itt	eq
 800ebf0:	6811      	ldreq	r1, [r2, #0]
 800ebf2:	6852      	ldreq	r2, [r2, #4]
 800ebf4:	6062      	str	r2, [r4, #4]
 800ebf6:	bf04      	itt	eq
 800ebf8:	1809      	addeq	r1, r1, r0
 800ebfa:	6021      	streq	r1, [r4, #0]
 800ebfc:	605c      	str	r4, [r3, #4]
 800ebfe:	e7c7      	b.n	800eb90 <_free_r+0x24>
 800ec00:	bd38      	pop	{r3, r4, r5, pc}
 800ec02:	bf00      	nop
 800ec04:	200006f4 	.word	0x200006f4

0800ec08 <_realloc_r>:
 800ec08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec0a:	4607      	mov	r7, r0
 800ec0c:	4614      	mov	r4, r2
 800ec0e:	460e      	mov	r6, r1
 800ec10:	b921      	cbnz	r1, 800ec1c <_realloc_r+0x14>
 800ec12:	4611      	mov	r1, r2
 800ec14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ec18:	f7ff bc48 	b.w	800e4ac <_malloc_r>
 800ec1c:	b922      	cbnz	r2, 800ec28 <_realloc_r+0x20>
 800ec1e:	f7ff ffa5 	bl	800eb6c <_free_r>
 800ec22:	4625      	mov	r5, r4
 800ec24:	4628      	mov	r0, r5
 800ec26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec28:	f000 f814 	bl	800ec54 <_malloc_usable_size_r>
 800ec2c:	42a0      	cmp	r0, r4
 800ec2e:	d20f      	bcs.n	800ec50 <_realloc_r+0x48>
 800ec30:	4621      	mov	r1, r4
 800ec32:	4638      	mov	r0, r7
 800ec34:	f7ff fc3a 	bl	800e4ac <_malloc_r>
 800ec38:	4605      	mov	r5, r0
 800ec3a:	2800      	cmp	r0, #0
 800ec3c:	d0f2      	beq.n	800ec24 <_realloc_r+0x1c>
 800ec3e:	4631      	mov	r1, r6
 800ec40:	4622      	mov	r2, r4
 800ec42:	f7ff fbef 	bl	800e424 <memcpy>
 800ec46:	4631      	mov	r1, r6
 800ec48:	4638      	mov	r0, r7
 800ec4a:	f7ff ff8f 	bl	800eb6c <_free_r>
 800ec4e:	e7e9      	b.n	800ec24 <_realloc_r+0x1c>
 800ec50:	4635      	mov	r5, r6
 800ec52:	e7e7      	b.n	800ec24 <_realloc_r+0x1c>

0800ec54 <_malloc_usable_size_r>:
 800ec54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec58:	1f18      	subs	r0, r3, #4
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	bfbc      	itt	lt
 800ec5e:	580b      	ldrlt	r3, [r1, r0]
 800ec60:	18c0      	addlt	r0, r0, r3
 800ec62:	4770      	bx	lr

0800ec64 <_init>:
 800ec64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec66:	bf00      	nop
 800ec68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec6a:	bc08      	pop	{r3}
 800ec6c:	469e      	mov	lr, r3
 800ec6e:	4770      	bx	lr

0800ec70 <_fini>:
 800ec70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec72:	bf00      	nop
 800ec74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec76:	bc08      	pop	{r3}
 800ec78:	469e      	mov	lr, r3
 800ec7a:	4770      	bx	lr
