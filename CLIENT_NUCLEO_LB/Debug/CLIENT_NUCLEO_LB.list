
CLIENT_NUCLEO_LB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e0a0  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  0800e1e0  0800e1e0  0001e1e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e560  0800e560  0001e560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e568  0800e568  0001e568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e56c  0800e56c  0001e56c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000188  20000004  0800e570  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  2000018c  0800e6f8  0002018c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000039  20000228  0800e791  00020228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000264  0800e7ca  00020264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 000000a4  20000278  0800e7db  00020278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000b94  2000031c  0800e87f  0002031c  2**2
                  ALLOC
 12 ._user_heap_stack 00001000  20000eb0  0800e87f  00020eb0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0002031c  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000024  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       0000019f  20030024  20030024  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000880  200301c4  200301c4  00030000  2**2
                  ALLOC
 17 .debug_info   0003cc59  00000000  00000000  0002034c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 00007311  00000000  00000000  0005cfa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 00002818  00000000  00000000  000642b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 000024d0  00000000  00000000  00066ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_macro  0002dcf1  00000000  00000000  00068fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   0002749e  00000000  00000000  00096c91  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    000f3389  00000000  00000000  000be12f  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  001b14b8  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000a32c  00000000  00000000  001b1534  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000031c 	.word	0x2000031c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800e1c8 	.word	0x0800e1c8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000320 	.word	0x20000320
 800017c:	0800e1c8 	.word	0x0800e1c8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_uldivmod>:
 8000190:	b953      	cbnz	r3, 80001a8 <__aeabi_uldivmod+0x18>
 8000192:	b94a      	cbnz	r2, 80001a8 <__aeabi_uldivmod+0x18>
 8000194:	2900      	cmp	r1, #0
 8000196:	bf08      	it	eq
 8000198:	2800      	cmpeq	r0, #0
 800019a:	bf1c      	itt	ne
 800019c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001a4:	f000 b972 	b.w	800048c <__aeabi_idiv0>
 80001a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b0:	f000 f806 	bl	80001c0 <__udivmoddi4>
 80001b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001bc:	b004      	add	sp, #16
 80001be:	4770      	bx	lr

080001c0 <__udivmoddi4>:
 80001c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c4:	9e08      	ldr	r6, [sp, #32]
 80001c6:	4604      	mov	r4, r0
 80001c8:	4688      	mov	r8, r1
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d14b      	bne.n	8000266 <__udivmoddi4+0xa6>
 80001ce:	428a      	cmp	r2, r1
 80001d0:	4615      	mov	r5, r2
 80001d2:	d967      	bls.n	80002a4 <__udivmoddi4+0xe4>
 80001d4:	fab2 f282 	clz	r2, r2
 80001d8:	b14a      	cbz	r2, 80001ee <__udivmoddi4+0x2e>
 80001da:	f1c2 0720 	rsb	r7, r2, #32
 80001de:	fa01 f302 	lsl.w	r3, r1, r2
 80001e2:	fa20 f707 	lsr.w	r7, r0, r7
 80001e6:	4095      	lsls	r5, r2
 80001e8:	ea47 0803 	orr.w	r8, r7, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80001f8:	fa1f fc85 	uxth.w	ip, r5
 80001fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000200:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000204:	fb07 f10c 	mul.w	r1, r7, ip
 8000208:	4299      	cmp	r1, r3
 800020a:	d909      	bls.n	8000220 <__udivmoddi4+0x60>
 800020c:	18eb      	adds	r3, r5, r3
 800020e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000212:	f080 811b 	bcs.w	800044c <__udivmoddi4+0x28c>
 8000216:	4299      	cmp	r1, r3
 8000218:	f240 8118 	bls.w	800044c <__udivmoddi4+0x28c>
 800021c:	3f02      	subs	r7, #2
 800021e:	442b      	add	r3, r5
 8000220:	1a5b      	subs	r3, r3, r1
 8000222:	b2a4      	uxth	r4, r4
 8000224:	fbb3 f0fe 	udiv	r0, r3, lr
 8000228:	fb0e 3310 	mls	r3, lr, r0, r3
 800022c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000230:	fb00 fc0c 	mul.w	ip, r0, ip
 8000234:	45a4      	cmp	ip, r4
 8000236:	d909      	bls.n	800024c <__udivmoddi4+0x8c>
 8000238:	192c      	adds	r4, r5, r4
 800023a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800023e:	f080 8107 	bcs.w	8000450 <__udivmoddi4+0x290>
 8000242:	45a4      	cmp	ip, r4
 8000244:	f240 8104 	bls.w	8000450 <__udivmoddi4+0x290>
 8000248:	3802      	subs	r0, #2
 800024a:	442c      	add	r4, r5
 800024c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000250:	eba4 040c 	sub.w	r4, r4, ip
 8000254:	2700      	movs	r7, #0
 8000256:	b11e      	cbz	r6, 8000260 <__udivmoddi4+0xa0>
 8000258:	40d4      	lsrs	r4, r2
 800025a:	2300      	movs	r3, #0
 800025c:	e9c6 4300 	strd	r4, r3, [r6]
 8000260:	4639      	mov	r1, r7
 8000262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000266:	428b      	cmp	r3, r1
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0xbe>
 800026a:	2e00      	cmp	r6, #0
 800026c:	f000 80eb 	beq.w	8000446 <__udivmoddi4+0x286>
 8000270:	2700      	movs	r7, #0
 8000272:	e9c6 0100 	strd	r0, r1, [r6]
 8000276:	4638      	mov	r0, r7
 8000278:	4639      	mov	r1, r7
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f783 	clz	r7, r3
 8000282:	2f00      	cmp	r7, #0
 8000284:	d147      	bne.n	8000316 <__udivmoddi4+0x156>
 8000286:	428b      	cmp	r3, r1
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd0>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fa 	bhi.w	8000484 <__udivmoddi4+0x2c4>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb61 0303 	sbc.w	r3, r1, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e0      	beq.n	8000260 <__udivmoddi4+0xa0>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7dd      	b.n	8000260 <__udivmoddi4+0xa0>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xe8>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 808f 	bne.w	80003d0 <__udivmoddi4+0x210>
 80002b2:	1b49      	subs	r1, r1, r5
 80002b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002b8:	fa1f f885 	uxth.w	r8, r5
 80002bc:	2701      	movs	r7, #1
 80002be:	fbb1 fcfe 	udiv	ip, r1, lr
 80002c2:	0c23      	lsrs	r3, r4, #16
 80002c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80002c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002cc:	fb08 f10c 	mul.w	r1, r8, ip
 80002d0:	4299      	cmp	r1, r3
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0x124>
 80002d4:	18eb      	adds	r3, r5, r3
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0x122>
 80002dc:	4299      	cmp	r1, r3
 80002de:	f200 80cd 	bhi.w	800047c <__udivmoddi4+0x2bc>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1a59      	subs	r1, r3, r1
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80002f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x14c>
 80002fc:	192c      	adds	r4, r5, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x14a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80b6 	bhi.w	8000476 <__udivmoddi4+0x2b6>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e79f      	b.n	8000256 <__udivmoddi4+0x96>
 8000316:	f1c7 0c20 	rsb	ip, r7, #32
 800031a:	40bb      	lsls	r3, r7
 800031c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000320:	ea4e 0e03 	orr.w	lr, lr, r3
 8000324:	fa01 f407 	lsl.w	r4, r1, r7
 8000328:	fa20 f50c 	lsr.w	r5, r0, ip
 800032c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000330:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000334:	4325      	orrs	r5, r4
 8000336:	fbb3 f9f8 	udiv	r9, r3, r8
 800033a:	0c2c      	lsrs	r4, r5, #16
 800033c:	fb08 3319 	mls	r3, r8, r9, r3
 8000340:	fa1f fa8e 	uxth.w	sl, lr
 8000344:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000348:	fb09 f40a 	mul.w	r4, r9, sl
 800034c:	429c      	cmp	r4, r3
 800034e:	fa02 f207 	lsl.w	r2, r2, r7
 8000352:	fa00 f107 	lsl.w	r1, r0, r7
 8000356:	d90b      	bls.n	8000370 <__udivmoddi4+0x1b0>
 8000358:	eb1e 0303 	adds.w	r3, lr, r3
 800035c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000360:	f080 8087 	bcs.w	8000472 <__udivmoddi4+0x2b2>
 8000364:	429c      	cmp	r4, r3
 8000366:	f240 8084 	bls.w	8000472 <__udivmoddi4+0x2b2>
 800036a:	f1a9 0902 	sub.w	r9, r9, #2
 800036e:	4473      	add	r3, lr
 8000370:	1b1b      	subs	r3, r3, r4
 8000372:	b2ad      	uxth	r5, r5
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000380:	fb00 fa0a 	mul.w	sl, r0, sl
 8000384:	45a2      	cmp	sl, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x1da>
 8000388:	eb1e 0404 	adds.w	r4, lr, r4
 800038c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000390:	d26b      	bcs.n	800046a <__udivmoddi4+0x2aa>
 8000392:	45a2      	cmp	sl, r4
 8000394:	d969      	bls.n	800046a <__udivmoddi4+0x2aa>
 8000396:	3802      	subs	r0, #2
 8000398:	4474      	add	r4, lr
 800039a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800039e:	fba0 8902 	umull	r8, r9, r0, r2
 80003a2:	eba4 040a 	sub.w	r4, r4, sl
 80003a6:	454c      	cmp	r4, r9
 80003a8:	46c2      	mov	sl, r8
 80003aa:	464b      	mov	r3, r9
 80003ac:	d354      	bcc.n	8000458 <__udivmoddi4+0x298>
 80003ae:	d051      	beq.n	8000454 <__udivmoddi4+0x294>
 80003b0:	2e00      	cmp	r6, #0
 80003b2:	d069      	beq.n	8000488 <__udivmoddi4+0x2c8>
 80003b4:	ebb1 050a 	subs.w	r5, r1, sl
 80003b8:	eb64 0403 	sbc.w	r4, r4, r3
 80003bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003c0:	40fd      	lsrs	r5, r7
 80003c2:	40fc      	lsrs	r4, r7
 80003c4:	ea4c 0505 	orr.w	r5, ip, r5
 80003c8:	e9c6 5400 	strd	r5, r4, [r6]
 80003cc:	2700      	movs	r7, #0
 80003ce:	e747      	b.n	8000260 <__udivmoddi4+0xa0>
 80003d0:	f1c2 0320 	rsb	r3, r2, #32
 80003d4:	fa20 f703 	lsr.w	r7, r0, r3
 80003d8:	4095      	lsls	r5, r2
 80003da:	fa01 f002 	lsl.w	r0, r1, r2
 80003de:	fa21 f303 	lsr.w	r3, r1, r3
 80003e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e6:	4338      	orrs	r0, r7
 80003e8:	0c01      	lsrs	r1, r0, #16
 80003ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80003ee:	fa1f f885 	uxth.w	r8, r5
 80003f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80003f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fa:	fb07 f308 	mul.w	r3, r7, r8
 80003fe:	428b      	cmp	r3, r1
 8000400:	fa04 f402 	lsl.w	r4, r4, r2
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x256>
 8000406:	1869      	adds	r1, r5, r1
 8000408:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800040c:	d22f      	bcs.n	800046e <__udivmoddi4+0x2ae>
 800040e:	428b      	cmp	r3, r1
 8000410:	d92d      	bls.n	800046e <__udivmoddi4+0x2ae>
 8000412:	3f02      	subs	r7, #2
 8000414:	4429      	add	r1, r5
 8000416:	1acb      	subs	r3, r1, r3
 8000418:	b281      	uxth	r1, r0
 800041a:	fbb3 f0fe 	udiv	r0, r3, lr
 800041e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000422:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000426:	fb00 f308 	mul.w	r3, r0, r8
 800042a:	428b      	cmp	r3, r1
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x27e>
 800042e:	1869      	adds	r1, r5, r1
 8000430:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000434:	d217      	bcs.n	8000466 <__udivmoddi4+0x2a6>
 8000436:	428b      	cmp	r3, r1
 8000438:	d915      	bls.n	8000466 <__udivmoddi4+0x2a6>
 800043a:	3802      	subs	r0, #2
 800043c:	4429      	add	r1, r5
 800043e:	1ac9      	subs	r1, r1, r3
 8000440:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000444:	e73b      	b.n	80002be <__udivmoddi4+0xfe>
 8000446:	4637      	mov	r7, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e709      	b.n	8000260 <__udivmoddi4+0xa0>
 800044c:	4607      	mov	r7, r0
 800044e:	e6e7      	b.n	8000220 <__udivmoddi4+0x60>
 8000450:	4618      	mov	r0, r3
 8000452:	e6fb      	b.n	800024c <__udivmoddi4+0x8c>
 8000454:	4541      	cmp	r1, r8
 8000456:	d2ab      	bcs.n	80003b0 <__udivmoddi4+0x1f0>
 8000458:	ebb8 0a02 	subs.w	sl, r8, r2
 800045c:	eb69 020e 	sbc.w	r2, r9, lr
 8000460:	3801      	subs	r0, #1
 8000462:	4613      	mov	r3, r2
 8000464:	e7a4      	b.n	80003b0 <__udivmoddi4+0x1f0>
 8000466:	4660      	mov	r0, ip
 8000468:	e7e9      	b.n	800043e <__udivmoddi4+0x27e>
 800046a:	4618      	mov	r0, r3
 800046c:	e795      	b.n	800039a <__udivmoddi4+0x1da>
 800046e:	4667      	mov	r7, ip
 8000470:	e7d1      	b.n	8000416 <__udivmoddi4+0x256>
 8000472:	4681      	mov	r9, r0
 8000474:	e77c      	b.n	8000370 <__udivmoddi4+0x1b0>
 8000476:	3802      	subs	r0, #2
 8000478:	442c      	add	r4, r5
 800047a:	e747      	b.n	800030c <__udivmoddi4+0x14c>
 800047c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000480:	442b      	add	r3, r5
 8000482:	e72f      	b.n	80002e4 <__udivmoddi4+0x124>
 8000484:	4638      	mov	r0, r7
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xda>
 8000488:	4637      	mov	r7, r6
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0xa0>

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop

08000490 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800049c:	689b      	ldr	r3, [r3, #8]
 800049e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80004a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4313      	orrs	r3, r2
 80004aa:	608b      	str	r3, [r1, #8]
}
 80004ac:	bf00      	nop
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr

080004b8 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 80004bc:	f000 f80e 	bl	80004dc <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80004c0:	4905      	ldr	r1, [pc, #20]	; (80004d8 <APPE_Init+0x20>)
 80004c2:	2000      	movs	r0, #0
 80004c4:	f000 fd84 	bl	8000fd0 <HW_TS_Init>

  /* Initialize the debug interface */
  Init_Debug();
#endif

  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 80004c8:	2101      	movs	r1, #1
 80004ca:	2001      	movs	r0, #1
 80004cc:	f001 f95c 	bl	8001788 <UTIL_LPM_SetOffMode>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80004d0:	f000 f80e 	bl	80004f0 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80004d4:	bf00      	nop
}
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	2000068c 	.word	0x2000068c

080004dc <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80004e0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80004e4:	f7ff ffd4 	bl	8000490 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 80004e8:	f001 f93c 	bl	8001764 <UTIL_LPM_Init>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 80004ec:	bf00      	nop
}
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b088      	sub	sp, #32
 80004f4:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80004f6:	f00b fcf3 	bl	800bee0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 80004fa:	4a11      	ldr	r2, [pc, #68]	; (8000540 <appe_Tl_Init+0x50>)
 80004fc:	2100      	movs	r1, #0
 80004fe:	2040      	movs	r0, #64	; 0x40
 8000500:	f001 faaa 	bl	8001a58 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000504:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <appe_Tl_Init+0x54>)
 8000506:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000508:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <appe_Tl_Init+0x58>)
 800050a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800050c:	463b      	mov	r3, r7
 800050e:	4619      	mov	r1, r3
 8000510:	480e      	ldr	r0, [pc, #56]	; (800054c <appe_Tl_Init+0x5c>)
 8000512:	f00b fbaf 	bl	800bc74 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000516:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <appe_Tl_Init+0x60>)
 8000518:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800051a:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <appe_Tl_Init+0x64>)
 800051c:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800051e:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <appe_Tl_Init+0x68>)
 8000520:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000522:	f240 533c 	movw	r3, #1340	; 0x53c
 8000526:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000528:	f107 0308 	add.w	r3, r7, #8
 800052c:	4618      	mov	r0, r3
 800052e:	f00b fde5 	bl	800c0fc <TL_MM_Init>

  TL_Enable();
 8000532:	f00b fccf 	bl	800bed4 <TL_Enable>

  return;
 8000536:	bf00      	nop
}
 8000538:	3720      	adds	r7, #32
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	0800bcad 	.word	0x0800bcad
 8000544:	20030700 	.word	0x20030700
 8000548:	0800055d 	.word	0x0800055d
 800054c:	08000573 	.word	0x08000573
 8000550:	20030918 	.word	0x20030918
 8000554:	2003080c 	.word	0x2003080c
 8000558:	200301c4 	.word	0x200301c4

0800055c <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000566:	bf00      	nop
}
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr

08000572 <APPE_SysUserEvtRx>:

static void APPE_SysUserEvtRx( void * pPayload )
{
 8000572:	b580      	push	{r7, lr}
 8000574:	b082      	sub	sp, #8
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  TL_TRACES_Init( );
 800057a:	f00b fe2f 	bl	800c1dc <TL_TRACES_Init>

  APP_BLE_Init( );
 800057e:	f00b ff63 	bl	800c448 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000582:	2100      	movs	r1, #0
 8000584:	2001      	movs	r0, #1
 8000586:	f001 f8ff 	bl	8001788 <UTIL_LPM_SetOffMode>
  return;
 800058a:	bf00      	nop
}
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}

08000592 <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 8000592:	b580      	push	{r7, lr}
 8000594:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
 8000596:	f001 f925 	bl	80017e4 <UTIL_LPM_EnterLowPower>
#endif
  return;
 800059a:	bf00      	nop
}
 800059c:	bd80      	pop	{r7, pc}

0800059e <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 800059e:	b580      	push	{r7, lr}
 80005a0:	b082      	sub	sp, #8
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
 80005a6:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 80005a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005ac:	f001 f978 	bl	80018a0 <UTIL_SEQ_Run>
}
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80005c0:	2100      	movs	r1, #0
 80005c2:	2040      	movs	r0, #64	; 0x40
 80005c4:	f001 fa68 	bl	8001a98 <UTIL_SEQ_SetTask>
  return;
 80005c8:	bf00      	nop
}
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80005d8:	2002      	movs	r0, #2
 80005da:	f001 fac3 	bl	8001b64 <UTIL_SEQ_SetEvt>
  return;
 80005de:	bf00      	nop
}
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b082      	sub	sp, #8
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80005ee:	2002      	movs	r0, #2
 80005f0:	f001 fad6 	bl	8001ba0 <UTIL_SEQ_WaitEvt>
  return;
 80005f4:	bf00      	nop
}
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000608:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800060a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4313      	orrs	r3, r2
 8000612:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000618:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4013      	ands	r3, r2
 800061e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000620:	68fb      	ldr	r3, [r7, #12]
}
 8000622:	bf00      	nop
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
	...

08000630 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000644:	2004      	movs	r0, #4
 8000646:	f7ff ffd9 	bl	80005fc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800064a:	2080      	movs	r0, #128	; 0x80
 800064c:	f7ff ffd6 	bl	80005fc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000650:	2002      	movs	r0, #2
 8000652:	f7ff ffd3 	bl	80005fc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	2001      	movs	r0, #1
 8000658:	f7ff ffd0 	bl	80005fc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800065c:	2010      	movs	r0, #16
 800065e:	f7ff ffcd 	bl	80005fc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000662:	2008      	movs	r0, #8
 8000664:	f7ff ffca 	bl	80005fc <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TEST_Pin|LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	f640 0123 	movw	r1, #2083	; 0x823
 800066e:	483f      	ldr	r0, [pc, #252]	; (800076c <MX_GPIO_Init+0x13c>)
 8000670:	f002 fa70 	bl	8002b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000674:	2308      	movs	r3, #8
 8000676:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000678:	2303      	movs	r3, #3
 800067a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	4619      	mov	r1, r3
 8000684:	483a      	ldr	r0, [pc, #232]	; (8000770 <MX_GPIO_Init+0x140>)
 8000686:	f002 f829 	bl	80026dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 PB2 PB10 
                           PB12 PB13 PB14 PB15 
                           PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_2|GPIO_PIN_10 
 800068a:	f24f 7314 	movw	r3, #63252	; 0xf714
 800068e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000690:	2303      	movs	r3, #3
 8000692:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	4619      	mov	r1, r3
 800069c:	4833      	ldr	r0, [pc, #204]	; (800076c <MX_GPIO_Init+0x13c>)
 800069e:	f002 f81d 	bl	80026dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 
                           PC5 PC6 PC10 PC11 
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80006a2:	f641 436f 	movw	r3, #7279	; 0x1c6f
 80006a6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a8:	2303      	movs	r3, #3
 80006aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	4619      	mov	r1, r3
 80006b4:	482f      	ldr	r0, [pc, #188]	; (8000774 <MX_GPIO_Init+0x144>)
 80006b6:	f002 f811 	bl	80026dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA5 PA6 PA7 
                           PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80006ba:	f248 73ff 	movw	r3, #34815	; 0x87ff
 80006be:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c0:	2303      	movs	r3, #3
 80006c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	4619      	mov	r1, r3
 80006cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d0:	f002 f804 	bl	80026dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW1_Pin;
 80006d4:	2310      	movs	r3, #16
 80006d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006d8:	4b27      	ldr	r3, [pc, #156]	; (8000778 <MX_GPIO_Init+0x148>)
 80006da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006dc:	2301      	movs	r3, #1
 80006de:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	4619      	mov	r1, r3
 80006e4:	4823      	ldr	r0, [pc, #140]	; (8000774 <MX_GPIO_Init+0x144>)
 80006e6:	f001 fff9 	bl	80026dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TEST_Pin|LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin;
 80006ea:	f640 0323 	movw	r3, #2083	; 0x823
 80006ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f0:	2301      	movs	r3, #1
 80006f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f8:	2300      	movs	r3, #0
 80006fa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	4619      	mov	r1, r3
 8000700:	481a      	ldr	r0, [pc, #104]	; (800076c <MX_GPIO_Init+0x13c>)
 8000702:	f001 ffeb 	bl	80026dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000706:	2310      	movs	r3, #16
 8000708:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800070a:	2303      	movs	r3, #3
 800070c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	4619      	mov	r1, r3
 8000716:	4819      	ldr	r0, [pc, #100]	; (800077c <MX_GPIO_Init+0x14c>)
 8000718:	f001 ffe0 	bl	80026dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = SW2_Pin|SW3_Pin;
 800071c:	2303      	movs	r3, #3
 800071e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000720:	4b15      	ldr	r3, [pc, #84]	; (8000778 <MX_GPIO_Init+0x148>)
 8000722:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000724:	2301      	movs	r3, #1
 8000726:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	4619      	mov	r1, r3
 800072c:	4814      	ldr	r0, [pc, #80]	; (8000780 <MX_GPIO_Init+0x150>)
 800072e:	f001 ffd5 	bl	80026dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	2100      	movs	r1, #0
 8000736:	2006      	movs	r0, #6
 8000738:	f001 ff36 	bl	80025a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800073c:	2006      	movs	r0, #6
 800073e:	f001 ff5d 	bl	80025fc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000742:	2200      	movs	r2, #0
 8000744:	2100      	movs	r1, #0
 8000746:	2007      	movs	r0, #7
 8000748:	f001 ff2e 	bl	80025a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800074c:	2007      	movs	r0, #7
 800074e:	f001 ff55 	bl	80025fc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	2100      	movs	r1, #0
 8000756:	200a      	movs	r0, #10
 8000758:	f001 ff26 	bl	80025a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800075c:	200a      	movs	r0, #10
 800075e:	f001 ff4d 	bl	80025fc <HAL_NVIC_EnableIRQ>

}
 8000762:	bf00      	nop
 8000764:	3718      	adds	r7, #24
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	48000400 	.word	0x48000400
 8000770:	48001c00 	.word	0x48001c00
 8000774:	48000800 	.word	0x48000800
 8000778:	10110000 	.word	0x10110000
 800077c:	48001000 	.word	0x48001000
 8000780:	48000c00 	.word	0x48000c00

08000784 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <LL_EXTI_EnableIT_0_31+0x24>)
 800078e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000792:	4905      	ldr	r1, [pc, #20]	; (80007a8 <LL_EXTI_EnableIT_0_31+0x24>)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	4313      	orrs	r3, r2
 8000798:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800079c:	bf00      	nop
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	58000800 	.word	0x58000800

080007ac <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	4904      	ldr	r1, [pc, #16]	; (80007cc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4313      	orrs	r3, r2
 80007be:	600b      	str	r3, [r1, #0]

}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	58000800 	.word	0x58000800

080007d0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80007d6:	4b0d      	ldr	r3, [pc, #52]	; (800080c <ReadRtcSsrValue+0x3c>)
 80007d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007da:	b29b      	uxth	r3, r3
 80007dc:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <ReadRtcSsrValue+0x3c>)
 80007e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80007e6:	e005      	b.n	80007f4 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <ReadRtcSsrValue+0x3c>)
 80007ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80007f4:	687a      	ldr	r2, [r7, #4]
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d1f5      	bne.n	80007e8 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80007fc:	683b      	ldr	r3, [r7, #0]
}
 80007fe:	4618      	mov	r0, r3
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	40002800 	.word	0x40002800

08000810 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	460a      	mov	r2, r1
 800081a:	71fb      	strb	r3, [r7, #7]
 800081c:	4613      	mov	r3, r2
 800081e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000820:	79ba      	ldrb	r2, [r7, #6]
 8000822:	491d      	ldr	r1, [pc, #116]	; (8000898 <LinkTimerAfter+0x88>)
 8000824:	4613      	mov	r3, r2
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	4413      	add	r3, r2
 800082a:	00db      	lsls	r3, r3, #3
 800082c:	440b      	add	r3, r1
 800082e:	3315      	adds	r3, #21
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000834:	7bfb      	ldrb	r3, [r7, #15]
 8000836:	2b06      	cmp	r3, #6
 8000838:	d009      	beq.n	800084e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800083a:	7bfa      	ldrb	r2, [r7, #15]
 800083c:	4916      	ldr	r1, [pc, #88]	; (8000898 <LinkTimerAfter+0x88>)
 800083e:	4613      	mov	r3, r2
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	4413      	add	r3, r2
 8000844:	00db      	lsls	r3, r3, #3
 8000846:	440b      	add	r3, r1
 8000848:	3314      	adds	r3, #20
 800084a:	79fa      	ldrb	r2, [r7, #7]
 800084c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800084e:	79fa      	ldrb	r2, [r7, #7]
 8000850:	4911      	ldr	r1, [pc, #68]	; (8000898 <LinkTimerAfter+0x88>)
 8000852:	4613      	mov	r3, r2
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	4413      	add	r3, r2
 8000858:	00db      	lsls	r3, r3, #3
 800085a:	440b      	add	r3, r1
 800085c:	3315      	adds	r3, #21
 800085e:	7bfa      	ldrb	r2, [r7, #15]
 8000860:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000862:	79fa      	ldrb	r2, [r7, #7]
 8000864:	490c      	ldr	r1, [pc, #48]	; (8000898 <LinkTimerAfter+0x88>)
 8000866:	4613      	mov	r3, r2
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	4413      	add	r3, r2
 800086c:	00db      	lsls	r3, r3, #3
 800086e:	440b      	add	r3, r1
 8000870:	3314      	adds	r3, #20
 8000872:	79ba      	ldrb	r2, [r7, #6]
 8000874:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000876:	79ba      	ldrb	r2, [r7, #6]
 8000878:	4907      	ldr	r1, [pc, #28]	; (8000898 <LinkTimerAfter+0x88>)
 800087a:	4613      	mov	r3, r2
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	4413      	add	r3, r2
 8000880:	00db      	lsls	r3, r3, #3
 8000882:	440b      	add	r3, r1
 8000884:	3315      	adds	r3, #21
 8000886:	79fa      	ldrb	r2, [r7, #7]
 8000888:	701a      	strb	r2, [r3, #0]

  return;
 800088a:	bf00      	nop
}
 800088c:	3714      	adds	r7, #20
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	2000018c 	.word	0x2000018c

0800089c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	460a      	mov	r2, r1
 80008a6:	71fb      	strb	r3, [r7, #7]
 80008a8:	4613      	mov	r3, r2
 80008aa:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80008ac:	4b29      	ldr	r3, [pc, #164]	; (8000954 <LinkTimerBefore+0xb8>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	79ba      	ldrb	r2, [r7, #6]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d032      	beq.n	800091e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80008b8:	79ba      	ldrb	r2, [r7, #6]
 80008ba:	4927      	ldr	r1, [pc, #156]	; (8000958 <LinkTimerBefore+0xbc>)
 80008bc:	4613      	mov	r3, r2
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	4413      	add	r3, r2
 80008c2:	00db      	lsls	r3, r3, #3
 80008c4:	440b      	add	r3, r1
 80008c6:	3314      	adds	r3, #20
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80008cc:	7bfa      	ldrb	r2, [r7, #15]
 80008ce:	4922      	ldr	r1, [pc, #136]	; (8000958 <LinkTimerBefore+0xbc>)
 80008d0:	4613      	mov	r3, r2
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	4413      	add	r3, r2
 80008d6:	00db      	lsls	r3, r3, #3
 80008d8:	440b      	add	r3, r1
 80008da:	3315      	adds	r3, #21
 80008dc:	79fa      	ldrb	r2, [r7, #7]
 80008de:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80008e0:	79fa      	ldrb	r2, [r7, #7]
 80008e2:	491d      	ldr	r1, [pc, #116]	; (8000958 <LinkTimerBefore+0xbc>)
 80008e4:	4613      	mov	r3, r2
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	4413      	add	r3, r2
 80008ea:	00db      	lsls	r3, r3, #3
 80008ec:	440b      	add	r3, r1
 80008ee:	3315      	adds	r3, #21
 80008f0:	79ba      	ldrb	r2, [r7, #6]
 80008f2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80008f4:	79fa      	ldrb	r2, [r7, #7]
 80008f6:	4918      	ldr	r1, [pc, #96]	; (8000958 <LinkTimerBefore+0xbc>)
 80008f8:	4613      	mov	r3, r2
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	4413      	add	r3, r2
 80008fe:	00db      	lsls	r3, r3, #3
 8000900:	440b      	add	r3, r1
 8000902:	3314      	adds	r3, #20
 8000904:	7bfa      	ldrb	r2, [r7, #15]
 8000906:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000908:	79ba      	ldrb	r2, [r7, #6]
 800090a:	4913      	ldr	r1, [pc, #76]	; (8000958 <LinkTimerBefore+0xbc>)
 800090c:	4613      	mov	r3, r2
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	4413      	add	r3, r2
 8000912:	00db      	lsls	r3, r3, #3
 8000914:	440b      	add	r3, r1
 8000916:	3314      	adds	r3, #20
 8000918:	79fa      	ldrb	r2, [r7, #7]
 800091a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 800091c:	e014      	b.n	8000948 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800091e:	79fa      	ldrb	r2, [r7, #7]
 8000920:	490d      	ldr	r1, [pc, #52]	; (8000958 <LinkTimerBefore+0xbc>)
 8000922:	4613      	mov	r3, r2
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	4413      	add	r3, r2
 8000928:	00db      	lsls	r3, r3, #3
 800092a:	440b      	add	r3, r1
 800092c:	3315      	adds	r3, #21
 800092e:	79ba      	ldrb	r2, [r7, #6]
 8000930:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000932:	79ba      	ldrb	r2, [r7, #6]
 8000934:	4908      	ldr	r1, [pc, #32]	; (8000958 <LinkTimerBefore+0xbc>)
 8000936:	4613      	mov	r3, r2
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	4413      	add	r3, r2
 800093c:	00db      	lsls	r3, r3, #3
 800093e:	440b      	add	r3, r1
 8000940:	3314      	adds	r3, #20
 8000942:	79fa      	ldrb	r2, [r7, #7]
 8000944:	701a      	strb	r2, [r3, #0]
  return;
 8000946:	bf00      	nop
}
 8000948:	3714      	adds	r7, #20
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	2000021c 	.word	0x2000021c
 8000958:	2000018c 	.word	0x2000018c

0800095c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000966:	4b4e      	ldr	r3, [pc, #312]	; (8000aa0 <linkTimer+0x144>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	b2db      	uxtb	r3, r3
 800096c:	2b06      	cmp	r3, #6
 800096e:	d118      	bne.n	80009a2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000970:	4b4b      	ldr	r3, [pc, #300]	; (8000aa0 <linkTimer+0x144>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	b2da      	uxtb	r2, r3
 8000976:	4b4b      	ldr	r3, [pc, #300]	; (8000aa4 <linkTimer+0x148>)
 8000978:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800097a:	4a49      	ldr	r2, [pc, #292]	; (8000aa0 <linkTimer+0x144>)
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000980:	79fa      	ldrb	r2, [r7, #7]
 8000982:	4949      	ldr	r1, [pc, #292]	; (8000aa8 <linkTimer+0x14c>)
 8000984:	4613      	mov	r3, r2
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	4413      	add	r3, r2
 800098a:	00db      	lsls	r3, r3, #3
 800098c:	440b      	add	r3, r1
 800098e:	3315      	adds	r3, #21
 8000990:	2206      	movs	r2, #6
 8000992:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000994:	4b45      	ldr	r3, [pc, #276]	; (8000aac <linkTimer+0x150>)
 8000996:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800099a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	81fb      	strh	r3, [r7, #14]
 80009a0:	e078      	b.n	8000a94 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80009a2:	f000 f909 	bl	8000bb8 <ReturnTimeElapsed>
 80009a6:	4603      	mov	r3, r0
 80009a8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80009aa:	79fa      	ldrb	r2, [r7, #7]
 80009ac:	493e      	ldr	r1, [pc, #248]	; (8000aa8 <linkTimer+0x14c>)
 80009ae:	4613      	mov	r3, r2
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	4413      	add	r3, r2
 80009b4:	00db      	lsls	r3, r3, #3
 80009b6:	440b      	add	r3, r1
 80009b8:	3308      	adds	r3, #8
 80009ba:	6819      	ldr	r1, [r3, #0]
 80009bc:	89fb      	ldrh	r3, [r7, #14]
 80009be:	79fa      	ldrb	r2, [r7, #7]
 80009c0:	4419      	add	r1, r3
 80009c2:	4839      	ldr	r0, [pc, #228]	; (8000aa8 <linkTimer+0x14c>)
 80009c4:	4613      	mov	r3, r2
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	4413      	add	r3, r2
 80009ca:	00db      	lsls	r3, r3, #3
 80009cc:	4403      	add	r3, r0
 80009ce:	3308      	adds	r3, #8
 80009d0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80009d2:	79fa      	ldrb	r2, [r7, #7]
 80009d4:	4934      	ldr	r1, [pc, #208]	; (8000aa8 <linkTimer+0x14c>)
 80009d6:	4613      	mov	r3, r2
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	4413      	add	r3, r2
 80009dc:	00db      	lsls	r3, r3, #3
 80009de:	440b      	add	r3, r1
 80009e0:	3308      	adds	r3, #8
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80009e6:	4b2e      	ldr	r3, [pc, #184]	; (8000aa0 <linkTimer+0x144>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	4619      	mov	r1, r3
 80009ee:	4a2e      	ldr	r2, [pc, #184]	; (8000aa8 <linkTimer+0x14c>)
 80009f0:	460b      	mov	r3, r1
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	440b      	add	r3, r1
 80009f6:	00db      	lsls	r3, r3, #3
 80009f8:	4413      	add	r3, r2
 80009fa:	3308      	adds	r3, #8
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	68ba      	ldr	r2, [r7, #8]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d337      	bcc.n	8000a74 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000a04:	4b26      	ldr	r3, [pc, #152]	; (8000aa0 <linkTimer+0x144>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000a0a:	7b7a      	ldrb	r2, [r7, #13]
 8000a0c:	4926      	ldr	r1, [pc, #152]	; (8000aa8 <linkTimer+0x14c>)
 8000a0e:	4613      	mov	r3, r2
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	4413      	add	r3, r2
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	440b      	add	r3, r1
 8000a18:	3315      	adds	r3, #21
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000a1e:	e013      	b.n	8000a48 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000a20:	7b7a      	ldrb	r2, [r7, #13]
 8000a22:	4921      	ldr	r1, [pc, #132]	; (8000aa8 <linkTimer+0x14c>)
 8000a24:	4613      	mov	r3, r2
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	4413      	add	r3, r2
 8000a2a:	00db      	lsls	r3, r3, #3
 8000a2c:	440b      	add	r3, r1
 8000a2e:	3315      	adds	r3, #21
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000a34:	7b7a      	ldrb	r2, [r7, #13]
 8000a36:	491c      	ldr	r1, [pc, #112]	; (8000aa8 <linkTimer+0x14c>)
 8000a38:	4613      	mov	r3, r2
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	4413      	add	r3, r2
 8000a3e:	00db      	lsls	r3, r3, #3
 8000a40:	440b      	add	r3, r1
 8000a42:	3315      	adds	r3, #21
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000a48:	7b3b      	ldrb	r3, [r7, #12]
 8000a4a:	2b06      	cmp	r3, #6
 8000a4c:	d00b      	beq.n	8000a66 <linkTimer+0x10a>
 8000a4e:	7b3a      	ldrb	r2, [r7, #12]
 8000a50:	4915      	ldr	r1, [pc, #84]	; (8000aa8 <linkTimer+0x14c>)
 8000a52:	4613      	mov	r3, r2
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	4413      	add	r3, r2
 8000a58:	00db      	lsls	r3, r3, #3
 8000a5a:	440b      	add	r3, r1
 8000a5c:	3308      	adds	r3, #8
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	68ba      	ldr	r2, [r7, #8]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d2dc      	bcs.n	8000a20 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000a66:	7b7a      	ldrb	r2, [r7, #13]
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	4611      	mov	r1, r2
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fecf 	bl	8000810 <LinkTimerAfter>
 8000a72:	e00f      	b.n	8000a94 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000a74:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <linkTimer+0x144>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff ff0c 	bl	800089c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <linkTimer+0x144>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <linkTimer+0x148>)
 8000a8c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000a8e:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <linkTimer+0x144>)
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000a94:	89fb      	ldrh	r3, [r7, #14]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	2000021c 	.word	0x2000021c
 8000aa4:	2000021d 	.word	0x2000021d
 8000aa8:	2000018c 	.word	0x2000018c
 8000aac:	20000220 	.word	0x20000220

08000ab0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	460a      	mov	r2, r1
 8000aba:	71fb      	strb	r3, [r7, #7]
 8000abc:	4613      	mov	r3, r2
 8000abe:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000ac0:	4b39      	ldr	r3, [pc, #228]	; (8000ba8 <UnlinkTimer+0xf8>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	79fa      	ldrb	r2, [r7, #7]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d111      	bne.n	8000af0 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000acc:	4b36      	ldr	r3, [pc, #216]	; (8000ba8 <UnlinkTimer+0xf8>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	4b36      	ldr	r3, [pc, #216]	; (8000bac <UnlinkTimer+0xfc>)
 8000ad4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000ad6:	79fa      	ldrb	r2, [r7, #7]
 8000ad8:	4935      	ldr	r1, [pc, #212]	; (8000bb0 <UnlinkTimer+0x100>)
 8000ada:	4613      	mov	r3, r2
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	4413      	add	r3, r2
 8000ae0:	00db      	lsls	r3, r3, #3
 8000ae2:	440b      	add	r3, r1
 8000ae4:	3315      	adds	r3, #21
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	4b2f      	ldr	r3, [pc, #188]	; (8000ba8 <UnlinkTimer+0xf8>)
 8000aec:	701a      	strb	r2, [r3, #0]
 8000aee:	e03e      	b.n	8000b6e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000af0:	79fa      	ldrb	r2, [r7, #7]
 8000af2:	492f      	ldr	r1, [pc, #188]	; (8000bb0 <UnlinkTimer+0x100>)
 8000af4:	4613      	mov	r3, r2
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	4413      	add	r3, r2
 8000afa:	00db      	lsls	r3, r3, #3
 8000afc:	440b      	add	r3, r1
 8000afe:	3314      	adds	r3, #20
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000b04:	79fa      	ldrb	r2, [r7, #7]
 8000b06:	492a      	ldr	r1, [pc, #168]	; (8000bb0 <UnlinkTimer+0x100>)
 8000b08:	4613      	mov	r3, r2
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	4413      	add	r3, r2
 8000b0e:	00db      	lsls	r3, r3, #3
 8000b10:	440b      	add	r3, r1
 8000b12:	3315      	adds	r3, #21
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000b18:	79f9      	ldrb	r1, [r7, #7]
 8000b1a:	7bfa      	ldrb	r2, [r7, #15]
 8000b1c:	4824      	ldr	r0, [pc, #144]	; (8000bb0 <UnlinkTimer+0x100>)
 8000b1e:	460b      	mov	r3, r1
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	440b      	add	r3, r1
 8000b24:	00db      	lsls	r3, r3, #3
 8000b26:	4403      	add	r3, r0
 8000b28:	3315      	adds	r3, #21
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	b2d8      	uxtb	r0, r3
 8000b2e:	4920      	ldr	r1, [pc, #128]	; (8000bb0 <UnlinkTimer+0x100>)
 8000b30:	4613      	mov	r3, r2
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	4413      	add	r3, r2
 8000b36:	00db      	lsls	r3, r3, #3
 8000b38:	440b      	add	r3, r1
 8000b3a:	3315      	adds	r3, #21
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000b40:	7bbb      	ldrb	r3, [r7, #14]
 8000b42:	2b06      	cmp	r3, #6
 8000b44:	d013      	beq.n	8000b6e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000b46:	79f9      	ldrb	r1, [r7, #7]
 8000b48:	7bba      	ldrb	r2, [r7, #14]
 8000b4a:	4819      	ldr	r0, [pc, #100]	; (8000bb0 <UnlinkTimer+0x100>)
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	440b      	add	r3, r1
 8000b52:	00db      	lsls	r3, r3, #3
 8000b54:	4403      	add	r3, r0
 8000b56:	3314      	adds	r3, #20
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	b2d8      	uxtb	r0, r3
 8000b5c:	4914      	ldr	r1, [pc, #80]	; (8000bb0 <UnlinkTimer+0x100>)
 8000b5e:	4613      	mov	r3, r2
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	4413      	add	r3, r2
 8000b64:	00db      	lsls	r3, r3, #3
 8000b66:	440b      	add	r3, r1
 8000b68:	3314      	adds	r3, #20
 8000b6a:	4602      	mov	r2, r0
 8000b6c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000b6e:	79fa      	ldrb	r2, [r7, #7]
 8000b70:	490f      	ldr	r1, [pc, #60]	; (8000bb0 <UnlinkTimer+0x100>)
 8000b72:	4613      	mov	r3, r2
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	4413      	add	r3, r2
 8000b78:	00db      	lsls	r3, r3, #3
 8000b7a:	440b      	add	r3, r1
 8000b7c:	330c      	adds	r3, #12
 8000b7e:	2201      	movs	r2, #1
 8000b80:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <UnlinkTimer+0xf8>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	2b06      	cmp	r3, #6
 8000b8a:	d107      	bne.n	8000b9c <UnlinkTimer+0xec>
 8000b8c:	79bb      	ldrb	r3, [r7, #6]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d104      	bne.n	8000b9c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000b92:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <UnlinkTimer+0x104>)
 8000b94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b98:	601a      	str	r2, [r3, #0]
  }

  return;
 8000b9a:	bf00      	nop
 8000b9c:	bf00      	nop
}
 8000b9e:	3714      	adds	r7, #20
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	2000021c 	.word	0x2000021c
 8000bac:	2000021d 	.word	0x2000021d
 8000bb0:	2000018c 	.word	0x2000018c
 8000bb4:	20000220 	.word	0x20000220

08000bb8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000bbe:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <ReturnTimeElapsed+0x70>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bc6:	d026      	beq.n	8000c16 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000bc8:	f7ff fe02 	bl	80007d0 <ReadRtcSsrValue>
 8000bcc:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000bce:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <ReturnTimeElapsed+0x70>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d805      	bhi.n	8000be4 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000bd8:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <ReturnTimeElapsed+0x70>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	1ad3      	subs	r3, r2, r3
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	e00a      	b.n	8000bfa <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <ReturnTimeElapsed+0x74>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000bf0:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <ReturnTimeElapsed+0x70>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	683a      	ldr	r2, [r7, #0]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <ReturnTimeElapsed+0x78>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	fb02 f303 	mul.w	r3, r2, r3
 8000c06:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000c08:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <ReturnTimeElapsed+0x7c>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	40d3      	lsrs	r3, r2
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	e001      	b.n	8000c1a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	b29b      	uxth	r3, r3
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000220 	.word	0x20000220
 8000c2c:	2000033e 	.word	0x2000033e
 8000c30:	2000033d 	.word	0x2000033d
 8000c34:	2000033c 	.word	0x2000033c

08000c38 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000c42:	88fb      	ldrh	r3, [r7, #6]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d108      	bne.n	8000c5a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000c48:	f7ff fdc2 	bl	80007d0 <ReadRtcSsrValue>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	4b24      	ldr	r3, [pc, #144]	; (8000ce0 <RestartWakeupCounter+0xa8>)
 8000c50:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000c52:	2003      	movs	r0, #3
 8000c54:	f001 fd0e 	bl	8002674 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000c58:	e03e      	b.n	8000cd8 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000c5a:	88fb      	ldrh	r3, [r7, #6]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d803      	bhi.n	8000c68 <RestartWakeupCounter+0x30>
 8000c60:	4b20      	ldr	r3, [pc, #128]	; (8000ce4 <RestartWakeupCounter+0xac>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d002      	beq.n	8000c6e <RestartWakeupCounter+0x36>
      Value -= 1;
 8000c68:	88fb      	ldrh	r3, [r7, #6]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000c6e:	bf00      	nop
 8000c70:	4b1d      	ldr	r3, [pc, #116]	; (8000ce8 <RestartWakeupCounter+0xb0>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	f003 0304 	and.w	r3, r3, #4
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d0f7      	beq.n	8000c70 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000c80:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <RestartWakeupCounter+0xb0>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <RestartWakeupCounter+0xb0>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000c94:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000c96:	4b15      	ldr	r3, [pc, #84]	; (8000cec <RestartWakeupCounter+0xb4>)
 8000c98:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000c9c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000c9e:	2003      	movs	r0, #3
 8000ca0:	f001 fd02 	bl	80026a8 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <RestartWakeupCounter+0xb8>)
 8000ca6:	695b      	ldr	r3, [r3, #20]
 8000ca8:	0c1b      	lsrs	r3, r3, #16
 8000caa:	041b      	lsls	r3, r3, #16
 8000cac:	88fa      	ldrh	r2, [r7, #6]
 8000cae:	4910      	ldr	r1, [pc, #64]	; (8000cf0 <RestartWakeupCounter+0xb8>)
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000cb4:	f7ff fd8c 	bl	80007d0 <ReadRtcSsrValue>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <RestartWakeupCounter+0xa8>)
 8000cbc:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <RestartWakeupCounter+0xb0>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	689a      	ldr	r2, [r3, #8]
 8000cc6:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <RestartWakeupCounter+0xb0>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000cd0:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000cd2:	f3af 8000 	nop.w
  return ;
 8000cd6:	bf00      	nop
}
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000220 	.word	0x20000220
 8000ce4:	2000033c 	.word	0x2000033c
 8000ce8:	20000338 	.word	0x20000338
 8000cec:	58000800 	.word	0x58000800
 8000cf0:	40002800 	.word	0x40002800

08000cf4 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000cfa:	4b47      	ldr	r3, [pc, #284]	; (8000e18 <RescheduleTimerList+0x124>)
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d06:	d108      	bne.n	8000d1a <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000d08:	bf00      	nop
 8000d0a:	4b44      	ldr	r3, [pc, #272]	; (8000e1c <RescheduleTimerList+0x128>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	68db      	ldr	r3, [r3, #12]
 8000d12:	f003 0304 	and.w	r3, r3, #4
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d1f7      	bne.n	8000d0a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000d1a:	4b40      	ldr	r3, [pc, #256]	; (8000e1c <RescheduleTimerList+0x128>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	689a      	ldr	r2, [r3, #8]
 8000d22:	4b3e      	ldr	r3, [pc, #248]	; (8000e1c <RescheduleTimerList+0x128>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d2c:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000d2e:	4b3c      	ldr	r3, [pc, #240]	; (8000e20 <RescheduleTimerList+0x12c>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000d34:	7bfa      	ldrb	r2, [r7, #15]
 8000d36:	493b      	ldr	r1, [pc, #236]	; (8000e24 <RescheduleTimerList+0x130>)
 8000d38:	4613      	mov	r3, r2
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	4413      	add	r3, r2
 8000d3e:	00db      	lsls	r3, r3, #3
 8000d40:	440b      	add	r3, r1
 8000d42:	3308      	adds	r3, #8
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000d48:	f7ff ff36 	bl	8000bb8 <ReturnTimeElapsed>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000d50:	88fb      	ldrh	r3, [r7, #6]
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d205      	bcs.n	8000d64 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000d5c:	4b32      	ldr	r3, [pc, #200]	; (8000e28 <RescheduleTimerList+0x134>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	701a      	strb	r2, [r3, #0]
 8000d62:	e04d      	b.n	8000e00 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000d64:	88fb      	ldrh	r3, [r7, #6]
 8000d66:	4a31      	ldr	r2, [pc, #196]	; (8000e2c <RescheduleTimerList+0x138>)
 8000d68:	8812      	ldrh	r2, [r2, #0]
 8000d6a:	b292      	uxth	r2, r2
 8000d6c:	4413      	add	r3, r2
 8000d6e:	461a      	mov	r2, r3
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d906      	bls.n	8000d84 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000d76:	4b2d      	ldr	r3, [pc, #180]	; (8000e2c <RescheduleTimerList+0x138>)
 8000d78:	881b      	ldrh	r3, [r3, #0]
 8000d7a:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000d7c:	4b2a      	ldr	r3, [pc, #168]	; (8000e28 <RescheduleTimerList+0x134>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	701a      	strb	r2, [r3, #0]
 8000d82:	e03d      	b.n	8000e00 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	88fb      	ldrh	r3, [r7, #6]
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000d8e:	4b26      	ldr	r3, [pc, #152]	; (8000e28 <RescheduleTimerList+0x134>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d94:	e034      	b.n	8000e00 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000d96:	7bfa      	ldrb	r2, [r7, #15]
 8000d98:	4922      	ldr	r1, [pc, #136]	; (8000e24 <RescheduleTimerList+0x130>)
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	4413      	add	r3, r2
 8000da0:	00db      	lsls	r3, r3, #3
 8000da2:	440b      	add	r3, r1
 8000da4:	3308      	adds	r3, #8
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	88fb      	ldrh	r3, [r7, #6]
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d20a      	bcs.n	8000dc4 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000dae:	7bfa      	ldrb	r2, [r7, #15]
 8000db0:	491c      	ldr	r1, [pc, #112]	; (8000e24 <RescheduleTimerList+0x130>)
 8000db2:	4613      	mov	r3, r2
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	4413      	add	r3, r2
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	440b      	add	r3, r1
 8000dbc:	3308      	adds	r3, #8
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	e013      	b.n	8000dec <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000dc4:	7bfa      	ldrb	r2, [r7, #15]
 8000dc6:	4917      	ldr	r1, [pc, #92]	; (8000e24 <RescheduleTimerList+0x130>)
 8000dc8:	4613      	mov	r3, r2
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	4413      	add	r3, r2
 8000dce:	00db      	lsls	r3, r3, #3
 8000dd0:	440b      	add	r3, r1
 8000dd2:	3308      	adds	r3, #8
 8000dd4:	6819      	ldr	r1, [r3, #0]
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
 8000dd8:	7bfa      	ldrb	r2, [r7, #15]
 8000dda:	1ac9      	subs	r1, r1, r3
 8000ddc:	4811      	ldr	r0, [pc, #68]	; (8000e24 <RescheduleTimerList+0x130>)
 8000dde:	4613      	mov	r3, r2
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	4413      	add	r3, r2
 8000de4:	00db      	lsls	r3, r3, #3
 8000de6:	4403      	add	r3, r0
 8000de8:	3308      	adds	r3, #8
 8000dea:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000dec:	7bfa      	ldrb	r2, [r7, #15]
 8000dee:	490d      	ldr	r1, [pc, #52]	; (8000e24 <RescheduleTimerList+0x130>)
 8000df0:	4613      	mov	r3, r2
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	4413      	add	r3, r2
 8000df6:	00db      	lsls	r3, r3, #3
 8000df8:	440b      	add	r3, r1
 8000dfa:	3315      	adds	r3, #21
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	2b06      	cmp	r3, #6
 8000e04:	d1c7      	bne.n	8000d96 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000e06:	89bb      	ldrh	r3, [r7, #12]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff15 	bl	8000c38 <RestartWakeupCounter>

  return ;
 8000e0e:	bf00      	nop
}
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40002800 	.word	0x40002800
 8000e1c:	20000338 	.word	0x20000338
 8000e20:	2000021c 	.word	0x2000021c
 8000e24:	2000018c 	.word	0x2000018c
 8000e28:	20000224 	.word	0x20000224
 8000e2c:	20000340 	.word	0x20000340

08000e30 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000e36:	f3ef 8310 	mrs	r3, PRIMASK
 8000e3a:	617b      	str	r3, [r7, #20]
  return(result);
 8000e3c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000e40:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000e42:	4b5e      	ldr	r3, [pc, #376]	; (8000fbc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	22ca      	movs	r2, #202	; 0xca
 8000e4a:	625a      	str	r2, [r3, #36]	; 0x24
 8000e4c:	4b5b      	ldr	r3, [pc, #364]	; (8000fbc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2253      	movs	r2, #83	; 0x53
 8000e54:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000e56:	4b59      	ldr	r3, [pc, #356]	; (8000fbc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	689a      	ldr	r2, [r3, #8]
 8000e5e:	4b57      	ldr	r3, [pc, #348]	; (8000fbc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e68:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000e6a:	4b55      	ldr	r3, [pc, #340]	; (8000fc0 <HW_TS_RTC_Wakeup_Handler+0x190>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000e72:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000e76:	4953      	ldr	r1, [pc, #332]	; (8000fc4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e78:	4613      	mov	r3, r2
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	4413      	add	r3, r2
 8000e7e:	00db      	lsls	r3, r3, #3
 8000e80:	440b      	add	r3, r1
 8000e82:	330c      	adds	r3, #12
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d170      	bne.n	8000f6e <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000e8c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000e90:	494c      	ldr	r1, [pc, #304]	; (8000fc4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e92:	4613      	mov	r3, r2
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	4413      	add	r3, r2
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	440b      	add	r3, r1
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000ea0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000ea4:	4947      	ldr	r1, [pc, #284]	; (8000fc4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	4413      	add	r3, r2
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	440b      	add	r3, r1
 8000eb0:	3310      	adds	r3, #16
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000eb6:	4b44      	ldr	r3, [pc, #272]	; (8000fc8 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d04e      	beq.n	8000f5e <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000ec0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000ec4:	493f      	ldr	r1, [pc, #252]	; (8000fc4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	4413      	add	r3, r2
 8000ecc:	00db      	lsls	r3, r3, #3
 8000ece:	440b      	add	r3, r1
 8000ed0:	330d      	adds	r3, #13
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d125      	bne.n	8000f26 <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000eda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ede:	2101      	movs	r1, #1
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff fde5 	bl	8000ab0 <UnlinkTimer>
 8000ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee8:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000ef0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000ef4:	4933      	ldr	r1, [pc, #204]	; (8000fc4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	4413      	add	r3, r2
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	440b      	add	r3, r1
 8000f00:	3304      	adds	r3, #4
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f08:	4611      	mov	r1, r2
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 fa40 	bl	8001390 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000f10:	4b2a      	ldr	r3, [pc, #168]	; (8000fbc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	22ca      	movs	r2, #202	; 0xca
 8000f18:	625a      	str	r2, [r3, #36]	; 0x24
 8000f1a:	4b28      	ldr	r3, [pc, #160]	; (8000fbc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2253      	movs	r2, #83	; 0x53
 8000f22:	625a      	str	r2, [r3, #36]	; 0x24
 8000f24:	e013      	b.n	8000f4e <HW_TS_RTC_Wakeup_Handler+0x11e>
 8000f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000f30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f34:	4618      	mov	r0, r3
 8000f36:	f000 f9a1 	bl	800127c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000f3a:	4b20      	ldr	r3, [pc, #128]	; (8000fbc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	22ca      	movs	r2, #202	; 0xca
 8000f42:	625a      	str	r2, [r3, #36]	; 0x24
 8000f44:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2253      	movs	r2, #83	; 0x53
 8000f4c:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000f4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f52:	69fa      	ldr	r2, [r7, #28]
 8000f54:	4619      	mov	r1, r3
 8000f56:	69b8      	ldr	r0, [r7, #24]
 8000f58:	f000 faa0 	bl	800149c <HW_TS_RTC_Int_AppNot>
 8000f5c:	e024      	b.n	8000fa8 <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 8000f5e:	f7ff fec9 	bl	8000cf4 <RescheduleTimerList>
 8000f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	f383 8810 	msr	PRIMASK, r3
 8000f6c:	e01c      	b.n	8000fa8 <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000f6e:	bf00      	nop
 8000f70:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	f003 0304 	and.w	r3, r3, #4
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d0f7      	beq.n	8000f70 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000f80:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000f94:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000f96:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000f98:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	22ff      	movs	r2, #255	; 0xff
 8000fb0:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8000fb2:	bf00      	nop
}
 8000fb4:	3728      	adds	r7, #40	; 0x28
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000338 	.word	0x20000338
 8000fc0:	2000021c 	.word	0x2000021c
 8000fc4:	2000018c 	.word	0x2000018c
 8000fc8:	20000224 	.word	0x20000224
 8000fcc:	58000800 	.word	0x58000800

08000fd0 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	6039      	str	r1, [r7, #0]
 8000fda:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000fdc:	4a61      	ldr	r2, [pc, #388]	; (8001164 <HW_TS_Init+0x194>)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000fe2:	4b60      	ldr	r3, [pc, #384]	; (8001164 <HW_TS_Init+0x194>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	22ca      	movs	r2, #202	; 0xca
 8000fea:	625a      	str	r2, [r3, #36]	; 0x24
 8000fec:	4b5d      	ldr	r3, [pc, #372]	; (8001164 <HW_TS_Init+0x194>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2253      	movs	r2, #83	; 0x53
 8000ff4:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000ff6:	4b5c      	ldr	r3, [pc, #368]	; (8001168 <HW_TS_Init+0x198>)
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	4a5b      	ldr	r2, [pc, #364]	; (8001168 <HW_TS_Init+0x198>)
 8000ffc:	f043 0320 	orr.w	r3, r3, #32
 8001000:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001002:	4b59      	ldr	r3, [pc, #356]	; (8001168 <HW_TS_Init+0x198>)
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	f003 0307 	and.w	r3, r3, #7
 800100c:	b2db      	uxtb	r3, r3
 800100e:	f1c3 0304 	rsb	r3, r3, #4
 8001012:	b2da      	uxtb	r2, r3
 8001014:	4b55      	ldr	r3, [pc, #340]	; (800116c <HW_TS_Init+0x19c>)
 8001016:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001018:	4b53      	ldr	r3, [pc, #332]	; (8001168 <HW_TS_Init+0x198>)
 800101a:	691b      	ldr	r3, [r3, #16]
 800101c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001020:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001024:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	fa92 f2a2 	rbit	r2, r2
 800102c:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	fab2 f282 	clz	r2, r2
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	40d3      	lsrs	r3, r2
 8001038:	b2db      	uxtb	r3, r3
 800103a:	3301      	adds	r3, #1
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4b4c      	ldr	r3, [pc, #304]	; (8001170 <HW_TS_Init+0x1a0>)
 8001040:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001042:	4b49      	ldr	r3, [pc, #292]	; (8001168 <HW_TS_Init+0x198>)
 8001044:	691b      	ldr	r3, [r3, #16]
 8001046:	b29b      	uxth	r3, r3
 8001048:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800104c:	b29b      	uxth	r3, r3
 800104e:	3301      	adds	r3, #1
 8001050:	b29a      	uxth	r2, r3
 8001052:	4b48      	ldr	r3, [pc, #288]	; (8001174 <HW_TS_Init+0x1a4>)
 8001054:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001056:	4b47      	ldr	r3, [pc, #284]	; (8001174 <HW_TS_Init+0x1a4>)
 8001058:	881b      	ldrh	r3, [r3, #0]
 800105a:	3b01      	subs	r3, #1
 800105c:	4a44      	ldr	r2, [pc, #272]	; (8001170 <HW_TS_Init+0x1a0>)
 800105e:	7812      	ldrb	r2, [r2, #0]
 8001060:	fb02 f303 	mul.w	r3, r2, r3
 8001064:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001068:	4a40      	ldr	r2, [pc, #256]	; (800116c <HW_TS_Init+0x19c>)
 800106a:	7812      	ldrb	r2, [r2, #0]
 800106c:	40d3      	lsrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001076:	4293      	cmp	r3, r2
 8001078:	d904      	bls.n	8001084 <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800107a:	4b3f      	ldr	r3, [pc, #252]	; (8001178 <HW_TS_Init+0x1a8>)
 800107c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001080:	801a      	strh	r2, [r3, #0]
 8001082:	e003      	b.n	800108c <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	b29a      	uxth	r2, r3
 8001088:	4b3b      	ldr	r3, [pc, #236]	; (8001178 <HW_TS_Init+0x1a8>)
 800108a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800108c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001090:	f7ff fb8c 	bl	80007ac <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001094:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001098:	f7ff fb74 	bl	8000784 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d143      	bne.n	800112a <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80010a2:	4b36      	ldr	r3, [pc, #216]	; (800117c <HW_TS_Init+0x1ac>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80010a8:	4b35      	ldr	r3, [pc, #212]	; (8001180 <HW_TS_Init+0x1b0>)
 80010aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010ae:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80010b0:	2300      	movs	r3, #0
 80010b2:	75fb      	strb	r3, [r7, #23]
 80010b4:	e00c      	b.n	80010d0 <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80010b6:	7dfa      	ldrb	r2, [r7, #23]
 80010b8:	4932      	ldr	r1, [pc, #200]	; (8001184 <HW_TS_Init+0x1b4>)
 80010ba:	4613      	mov	r3, r2
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	4413      	add	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	440b      	add	r3, r1
 80010c4:	330c      	adds	r3, #12
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80010ca:	7dfb      	ldrb	r3, [r7, #23]
 80010cc:	3301      	adds	r3, #1
 80010ce:	75fb      	strb	r3, [r7, #23]
 80010d0:	7dfb      	ldrb	r3, [r7, #23]
 80010d2:	2b05      	cmp	r3, #5
 80010d4:	d9ef      	bls.n	80010b6 <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80010d6:	4b2c      	ldr	r3, [pc, #176]	; (8001188 <HW_TS_Init+0x1b8>)
 80010d8:	2206      	movs	r2, #6
 80010da:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 80010dc:	4b21      	ldr	r3, [pc, #132]	; (8001164 <HW_TS_Init+0x194>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	689a      	ldr	r2, [r3, #8]
 80010e4:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <HW_TS_Init+0x194>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010ee:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80010f0:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <HW_TS_Init+0x194>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <HW_TS_Init+0x194>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001104:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001106:	4b21      	ldr	r3, [pc, #132]	; (800118c <HW_TS_Init+0x1bc>)
 8001108:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800110c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800110e:	2003      	movs	r0, #3
 8001110:	f001 faca 	bl	80026a8 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001114:	4b13      	ldr	r3, [pc, #76]	; (8001164 <HW_TS_Init+0x194>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	689a      	ldr	r2, [r3, #8]
 800111c:	4b11      	ldr	r3, [pc, #68]	; (8001164 <HW_TS_Init+0x194>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	e00a      	b.n	8001140 <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 800112a:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <HW_TS_Init+0x194>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001136:	2b00      	cmp	r3, #0
 8001138:	d002      	beq.n	8001140 <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800113a:	2003      	movs	r0, #3
 800113c:	f001 fa9a 	bl	8002674 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <HW_TS_Init+0x194>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	22ff      	movs	r2, #255	; 0xff
 8001148:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800114a:	2200      	movs	r2, #0
 800114c:	2103      	movs	r1, #3
 800114e:	2003      	movs	r0, #3
 8001150:	f001 fa2a 	bl	80025a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001154:	2003      	movs	r0, #3
 8001156:	f001 fa51 	bl	80025fc <HAL_NVIC_EnableIRQ>

  return;
 800115a:	bf00      	nop
}
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000338 	.word	0x20000338
 8001168:	40002800 	.word	0x40002800
 800116c:	2000033c 	.word	0x2000033c
 8001170:	2000033d 	.word	0x2000033d
 8001174:	2000033e 	.word	0x2000033e
 8001178:	20000340 	.word	0x20000340
 800117c:	20000224 	.word	0x20000224
 8001180:	20000220 	.word	0x20000220
 8001184:	2000018c 	.word	0x2000018c
 8001188:	2000021c 	.word	0x2000021c
 800118c:	58000800 	.word	0x58000800

08001190 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001190:	b480      	push	{r7}
 8001192:	b08b      	sub	sp, #44	; 0x2c
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	603b      	str	r3, [r7, #0]
 800119c:	4613      	mov	r3, r2
 800119e:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80011a6:	f3ef 8310 	mrs	r3, PRIMASK
 80011aa:	61fb      	str	r3, [r7, #28]
  return(result);
 80011ac:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80011ae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80011b0:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80011b2:	e004      	b.n	80011be <HW_TS_Create+0x2e>
  {
    loop++;
 80011b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011b8:	3301      	adds	r3, #1
 80011ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80011be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011c2:	2b05      	cmp	r3, #5
 80011c4:	d80c      	bhi.n	80011e0 <HW_TS_Create+0x50>
 80011c6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80011ca:	492b      	ldr	r1, [pc, #172]	; (8001278 <HW_TS_Create+0xe8>)
 80011cc:	4613      	mov	r3, r2
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	4413      	add	r3, r2
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	440b      	add	r3, r1
 80011d6:	330c      	adds	r3, #12
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1e9      	bne.n	80011b4 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80011e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011e4:	2b06      	cmp	r3, #6
 80011e6:	d037      	beq.n	8001258 <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80011e8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80011ec:	4922      	ldr	r1, [pc, #136]	; (8001278 <HW_TS_Create+0xe8>)
 80011ee:	4613      	mov	r3, r2
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	4413      	add	r3, r2
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	440b      	add	r3, r1
 80011f8:	330c      	adds	r3, #12
 80011fa:	2201      	movs	r2, #1
 80011fc:	701a      	strb	r2, [r3, #0]
 80011fe:	6a3b      	ldr	r3, [r7, #32]
 8001200:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001208:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800120c:	491a      	ldr	r1, [pc, #104]	; (8001278 <HW_TS_Create+0xe8>)
 800120e:	4613      	mov	r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4413      	add	r3, r2
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	440b      	add	r3, r1
 8001218:	3310      	adds	r3, #16
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800121e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001222:	4915      	ldr	r1, [pc, #84]	; (8001278 <HW_TS_Create+0xe8>)
 8001224:	4613      	mov	r3, r2
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	4413      	add	r3, r2
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	440b      	add	r3, r1
 800122e:	330d      	adds	r3, #13
 8001230:	79fa      	ldrb	r2, [r7, #7]
 8001232:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001234:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001238:	490f      	ldr	r1, [pc, #60]	; (8001278 <HW_TS_Create+0xe8>)
 800123a:	4613      	mov	r3, r2
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	4413      	add	r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	440b      	add	r3, r1
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800124e:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001250:	2300      	movs	r3, #0
 8001252:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001256:	e007      	b.n	8001268 <HW_TS_Create+0xd8>
 8001258:	6a3b      	ldr	r3, [r7, #32]
 800125a:	617b      	str	r3, [r7, #20]
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8001262:	2301      	movs	r3, #1
 8001264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8001268:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800126c:	4618      	mov	r0, r3
 800126e:	372c      	adds	r7, #44	; 0x2c
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	2000018c 	.word	0x2000018c

0800127c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001286:	f3ef 8310 	mrs	r3, PRIMASK
 800128a:	60fb      	str	r3, [r7, #12]
  return(result);
 800128c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800128e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001290:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001292:	2003      	movs	r0, #3
 8001294:	f001 f9ca 	bl	800262c <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001298:	4b37      	ldr	r3, [pc, #220]	; (8001378 <HW_TS_Stop+0xfc>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	22ca      	movs	r2, #202	; 0xca
 80012a0:	625a      	str	r2, [r3, #36]	; 0x24
 80012a2:	4b35      	ldr	r3, [pc, #212]	; (8001378 <HW_TS_Stop+0xfc>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2253      	movs	r2, #83	; 0x53
 80012aa:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80012ac:	79fa      	ldrb	r2, [r7, #7]
 80012ae:	4933      	ldr	r1, [pc, #204]	; (800137c <HW_TS_Stop+0x100>)
 80012b0:	4613      	mov	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	4413      	add	r3, r2
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	440b      	add	r3, r1
 80012ba:	330c      	adds	r3, #12
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d148      	bne.n	8001356 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	2100      	movs	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff fbf1 	bl	8000ab0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80012ce:	4b2c      	ldr	r3, [pc, #176]	; (8001380 <HW_TS_Stop+0x104>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80012d4:	7cfb      	ldrb	r3, [r7, #19]
 80012d6:	2b06      	cmp	r3, #6
 80012d8:	d135      	bne.n	8001346 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80012da:	4b2a      	ldr	r3, [pc, #168]	; (8001384 <HW_TS_Stop+0x108>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012e6:	d108      	bne.n	80012fa <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80012e8:	bf00      	nop
 80012ea:	4b23      	ldr	r3, [pc, #140]	; (8001378 <HW_TS_Stop+0xfc>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	f003 0304 	and.w	r3, r3, #4
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1f7      	bne.n	80012ea <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80012fa:	4b1f      	ldr	r3, [pc, #124]	; (8001378 <HW_TS_Stop+0xfc>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <HW_TS_Stop+0xfc>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800130c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800130e:	bf00      	nop
 8001310:	4b19      	ldr	r3, [pc, #100]	; (8001378 <HW_TS_Stop+0xfc>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	f003 0304 	and.w	r3, r3, #4
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0f7      	beq.n	8001310 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001320:	4b15      	ldr	r3, [pc, #84]	; (8001378 <HW_TS_Stop+0xfc>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4b13      	ldr	r3, [pc, #76]	; (8001378 <HW_TS_Stop+0xfc>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001334:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001336:	4b14      	ldr	r3, [pc, #80]	; (8001388 <HW_TS_Stop+0x10c>)
 8001338:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800133c:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800133e:	2003      	movs	r0, #3
 8001340:	f001 f9b2 	bl	80026a8 <HAL_NVIC_ClearPendingIRQ>
 8001344:	e007      	b.n	8001356 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <HW_TS_Stop+0x110>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	7cfa      	ldrb	r2, [r7, #19]
 800134e:	429a      	cmp	r2, r3
 8001350:	d001      	beq.n	8001356 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 8001352:	f7ff fccf 	bl	8000cf4 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <HW_TS_Stop+0xfc>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	22ff      	movs	r2, #255	; 0xff
 800135e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001360:	2003      	movs	r0, #3
 8001362:	f001 f94b 	bl	80025fc <HAL_NVIC_EnableIRQ>
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001370:	bf00      	nop
}
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000338 	.word	0x20000338
 800137c:	2000018c 	.word	0x2000018c
 8001380:	2000021c 	.word	0x2000021c
 8001384:	40002800 	.word	0x40002800
 8001388:	58000800 	.word	0x58000800
 800138c:	2000021d 	.word	0x2000021d

08001390 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	6039      	str	r1, [r7, #0]
 800139a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800139c:	79fa      	ldrb	r2, [r7, #7]
 800139e:	493b      	ldr	r1, [pc, #236]	; (800148c <HW_TS_Start+0xfc>)
 80013a0:	4613      	mov	r3, r2
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	4413      	add	r3, r2
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	440b      	add	r3, r1
 80013aa:	330c      	adds	r3, #12
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d103      	bne.n	80013bc <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff ff60 	bl	800127c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013bc:	f3ef 8310 	mrs	r3, PRIMASK
 80013c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80013c2:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80013c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80013c6:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80013c8:	2003      	movs	r0, #3
 80013ca:	f001 f92f 	bl	800262c <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80013ce:	4b30      	ldr	r3, [pc, #192]	; (8001490 <HW_TS_Start+0x100>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	22ca      	movs	r2, #202	; 0xca
 80013d6:	625a      	str	r2, [r3, #36]	; 0x24
 80013d8:	4b2d      	ldr	r3, [pc, #180]	; (8001490 <HW_TS_Start+0x100>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2253      	movs	r2, #83	; 0x53
 80013e0:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80013e2:	79fa      	ldrb	r2, [r7, #7]
 80013e4:	4929      	ldr	r1, [pc, #164]	; (800148c <HW_TS_Start+0xfc>)
 80013e6:	4613      	mov	r3, r2
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	4413      	add	r3, r2
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	440b      	add	r3, r1
 80013f0:	330c      	adds	r3, #12
 80013f2:	2202      	movs	r2, #2
 80013f4:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80013f6:	79fa      	ldrb	r2, [r7, #7]
 80013f8:	4924      	ldr	r1, [pc, #144]	; (800148c <HW_TS_Start+0xfc>)
 80013fa:	4613      	mov	r3, r2
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	4413      	add	r3, r2
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	440b      	add	r3, r1
 8001404:	3308      	adds	r3, #8
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800140a:	79fa      	ldrb	r2, [r7, #7]
 800140c:	491f      	ldr	r1, [pc, #124]	; (800148c <HW_TS_Start+0xfc>)
 800140e:	4613      	mov	r3, r2
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	4413      	add	r3, r2
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	440b      	add	r3, r1
 8001418:	3304      	adds	r3, #4
 800141a:	683a      	ldr	r2, [r7, #0]
 800141c:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff fa9b 	bl	800095c <linkTimer>
 8001426:	4603      	mov	r3, r0
 8001428:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800142a:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <HW_TS_Start+0x104>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001430:	4b19      	ldr	r3, [pc, #100]	; (8001498 <HW_TS_Start+0x108>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	7c7a      	ldrb	r2, [r7, #17]
 8001438:	429a      	cmp	r2, r3
 800143a:	d002      	beq.n	8001442 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 800143c:	f7ff fc5a 	bl	8000cf4 <RescheduleTimerList>
 8001440:	e013      	b.n	800146a <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001442:	79fa      	ldrb	r2, [r7, #7]
 8001444:	4911      	ldr	r1, [pc, #68]	; (800148c <HW_TS_Start+0xfc>)
 8001446:	4613      	mov	r3, r2
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4413      	add	r3, r2
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	440b      	add	r3, r1
 8001450:	3308      	adds	r3, #8
 8001452:	6819      	ldr	r1, [r3, #0]
 8001454:	8a7b      	ldrh	r3, [r7, #18]
 8001456:	79fa      	ldrb	r2, [r7, #7]
 8001458:	1ac9      	subs	r1, r1, r3
 800145a:	480c      	ldr	r0, [pc, #48]	; (800148c <HW_TS_Start+0xfc>)
 800145c:	4613      	mov	r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4413      	add	r3, r2
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	4403      	add	r3, r0
 8001466:	3308      	adds	r3, #8
 8001468:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <HW_TS_Start+0x100>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	22ff      	movs	r2, #255	; 0xff
 8001472:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001474:	2003      	movs	r0, #3
 8001476:	f001 f8c1 	bl	80025fc <HAL_NVIC_EnableIRQ>
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001484:	bf00      	nop
}
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	2000018c 	.word	0x2000018c
 8001490:	20000338 	.word	0x20000338
 8001494:	2000021c 	.word	0x2000021c
 8001498:	2000021d 	.word	0x2000021d

0800149c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	460b      	mov	r3, r1
 80014a6:	607a      	str	r2, [r7, #4]
 80014a8:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4798      	blx	r3

  return;
 80014ae:	bf00      	nop
}
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <LL_RCC_LSE_SetDriveCapability>:
{
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80014be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014c6:	f023 0218 	bic.w	r2, r3, #24
 80014ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
	...

080014e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014e8:	f000 fe6a 	bl	80021c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ec:	f000 f828 	bl	8001540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f0:	f7ff f89e 	bl	8000630 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80014f4:	f000 fdb0 	bl	8002058 <MX_USART1_UART_Init>
  MX_RF_Init();
 80014f8:	f000 f8eb 	bl	80016d2 <MX_RF_Init>
  MX_RTC_Init();
 80014fc:	f000 f902 	bl	8001704 <MX_RTC_Init>
  MX_USB_Device_Init();
 8001500:	f00c f900 	bl	800d704 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  while(!VCPInitialized) {
 8001504:	e007      	b.n	8001516 <main+0x32>
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin); // led red pisca se USB off
 8001506:	2102      	movs	r1, #2
 8001508:	480b      	ldr	r0, [pc, #44]	; (8001538 <main+0x54>)
 800150a:	f001 fb53 	bl	8002bb4 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800150e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001512:	f000 fed9 	bl	80022c8 <HAL_Delay>
  while(!VCPInitialized) {
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <main+0x58>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0f3      	beq.n	8001506 <main+0x22>
  }
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800151e:	2200      	movs	r2, #0
 8001520:	2102      	movs	r1, #2
 8001522:	4805      	ldr	r0, [pc, #20]	; (8001538 <main+0x54>)
 8001524:	f001 fb16 	bl	8002b54 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */  
  APPE_Init();
 8001528:	f7fe ffc6 	bl	80004b8 <APPE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800152c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001530:	f000 f9b6 	bl	80018a0 <UTIL_SEQ_Run>
 8001534:	e7fa      	b.n	800152c <main+0x48>
 8001536:	bf00      	nop
 8001538:	48000400 	.word	0x48000400
 800153c:	20000468 	.word	0x20000468

08001540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b0ae      	sub	sp, #184	; 0xb8
 8001544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001546:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800154a:	2248      	movs	r2, #72	; 0x48
 800154c:	2100      	movs	r1, #0
 800154e:	4618      	mov	r0, r3
 8001550:	f00c fe31 	bl	800e1b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001554:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
 8001564:	615a      	str	r2, [r3, #20]
 8001566:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	2250      	movs	r2, #80	; 0x50
 800156c:	2100      	movs	r1, #0
 800156e:	4618      	mov	r0, r3
 8001570:	f00c fe21 	bl	800e1b6 <memset>

  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001574:	2000      	movs	r0, #0
 8001576:	f7ff ff9e 	bl	80014b6 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800157a:	4b31      	ldr	r3, [pc, #196]	; (8001640 <SystemClock_Config+0x100>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001582:	4a2f      	ldr	r2, [pc, #188]	; (8001640 <SystemClock_Config+0x100>)
 8001584:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	4b2d      	ldr	r3, [pc, #180]	; (8001640 <SystemClock_Config+0x100>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001592:	603b      	str	r3, [r7, #0]
 8001594:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001596:	2347      	movs	r3, #71	; 0x47
 8001598:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800159a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800159e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80015a0:	2301      	movs	r3, #1
 80015a2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015a8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80015aa:	2301      	movs	r3, #1
 80015ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015b0:	2340      	movs	r3, #64	; 0x40
 80015b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015b6:	2300      	movs	r3, #0
 80015b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015bc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80015c0:	4618      	mov	r0, r3
 80015c2:	f002 fe21 	bl	8004208 <HAL_RCC_OscConfig>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80015cc:	f000 f86a 	bl	80016a4 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80015d0:	236f      	movs	r3, #111	; 0x6f
 80015d2:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80015d4:	2302      	movs	r3, #2
 80015d6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d8:	2300      	movs	r3, #0
 80015da:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015dc:	2300      	movs	r3, #0
 80015de:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015e0:	2300      	movs	r3, #0
 80015e2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80015e4:	2300      	movs	r3, #0
 80015e6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80015e8:	2300      	movs	r3, #0
 80015ea:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015f0:	2101      	movs	r1, #1
 80015f2:	4618      	mov	r0, r3
 80015f4:	f003 fad2 	bl	8004b9c <HAL_RCC_ClockConfig>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015fe:	f000 f851 	bl	80016a4 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8001602:	f643 1301 	movw	r3, #14593	; 0x3901
 8001606:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001608:	2300      	movs	r3, #0
 800160a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800160c:	2300      	movs	r3, #0
 800160e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001610:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001614:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001616:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800161a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 800161c:	2302      	movs	r3, #2
 800161e:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001620:	2310      	movs	r3, #16
 8001622:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	4618      	mov	r0, r3
 8001628:	f004 f848 	bl	80056bc <HAL_RCCEx_PeriphCLKConfig>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8001632:	f000 f837 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001636:	bf00      	nop
 8001638:	37b8      	adds	r7, #184	; 0xb8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	58000400 	.word	0x58000400

08001644 <transmit_CDC_messege>:

/* USER CODE BEGIN 4 */
void transmit_CDC_messege(uint8_t* Buf, uint16_t Len){
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	807b      	strh	r3, [r7, #2]

	uint8_t result = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	73fb      	strb	r3, [r7, #15]
	result = CDC_Transmit_FS(Buf, Len);
 8001654:	887b      	ldrh	r3, [r7, #2]
 8001656:	4619      	mov	r1, r3
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f00c f91d 	bl	800d898 <CDC_Transmit_FS>
 800165e:	4603      	mov	r3, r0
 8001660:	73fb      	strb	r3, [r7, #15]
	if (result == 1)
 8001662:	7bfb      	ldrb	r3, [r7, #15]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d105      	bne.n	8001674 <transmit_CDC_messege+0x30>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 8001668:	2201      	movs	r2, #1
 800166a:	2120      	movs	r1, #32
 800166c:	4806      	ldr	r0, [pc, #24]	; (8001688 <transmit_CDC_messege+0x44>)
 800166e:	f001 fa71 	bl	8002b54 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);


}
 8001672:	e004      	b.n	800167e <transmit_CDC_messege+0x3a>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8001674:	2200      	movs	r2, #0
 8001676:	2120      	movs	r1, #32
 8001678:	4803      	ldr	r0, [pc, #12]	; (8001688 <transmit_CDC_messege+0x44>)
 800167a:	f001 fa6b 	bl	8002b54 <HAL_GPIO_WritePin>
}
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	48000400 	.word	0x48000400

0800168c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == SW2_Pin){}
  if(GPIO_Pin == SW3_Pin){}
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
	...

080016a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80016a8:	2201      	movs	r2, #1
 80016aa:	2102      	movs	r1, #2
 80016ac:	4802      	ldr	r0, [pc, #8]	; (80016b8 <Error_Handler+0x14>)
 80016ae:	f001 fa51 	bl	8002b54 <HAL_GPIO_WritePin>
	while(1){
		__NOP();
 80016b2:	bf00      	nop
 80016b4:	e7fd      	b.n	80016b2 <Error_Handler+0xe>
 80016b6:	bf00      	nop
 80016b8:	48000400 	.word	0x48000400

080016bc <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0

}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80016e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001708:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <MX_RTC_Init+0x34>)
 800170a:	4a0c      	ldr	r2, [pc, #48]	; (800173c <MX_RTC_Init+0x38>)
 800170c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800170e:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <MX_RTC_Init+0x34>)
 8001710:	2200      	movs	r2, #0
 8001712:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001714:	4b08      	ldr	r3, [pc, #32]	; (8001738 <MX_RTC_Init+0x34>)
 8001716:	220f      	movs	r2, #15
 8001718:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800171a:	4b07      	ldr	r3, [pc, #28]	; (8001738 <MX_RTC_Init+0x34>)
 800171c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001720:	60da      	str	r2, [r3, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001722:	4805      	ldr	r0, [pc, #20]	; (8001738 <MX_RTC_Init+0x34>)
 8001724:	f004 fcb6 	bl	8006094 <HAL_RTC_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_RTC_Init+0x2e>
  {
    Error_Handler();
 800172e:	f7ff ffb9 	bl	80016a4 <Error_Handler>
  }

}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	2000068c 	.word	0x2000068c
 800173c:	40002800 	.word	0x40002800

08001740 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a04      	ldr	r2, [pc, #16]	; (8001760 <HAL_RTC_MspInit+0x20>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d101      	bne.n	8001756 <HAL_RTC_MspInit+0x16>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001752:	f7ff ffc5 	bl	80016e0 <LL_RCC_EnableRTC>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40002800 	.word	0x40002800

08001764 <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8001768:	4b05      	ldr	r3, [pc, #20]	; (8001780 <UTIL_LPM_Init+0x1c>)
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800176e:	4b05      	ldr	r3, [pc, #20]	; (8001784 <UTIL_LPM_Init+0x20>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	20000344 	.word	0x20000344
 8001784:	20000348 	.word	0x20000348

08001788 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8001788:	b480      	push	{r7}
 800178a:	b087      	sub	sp, #28
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001794:	f3ef 8310 	mrs	r3, PRIMASK
 8001798:	613b      	str	r3, [r7, #16]
  return(result);
 800179a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800179c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800179e:	b672      	cpsid	i
  
  switch(state)
 80017a0:	78fb      	ldrb	r3, [r7, #3]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d009      	beq.n	80017ba <UTIL_LPM_SetOffMode+0x32>
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d000      	beq.n	80017ac <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 80017aa:	e00e      	b.n	80017ca <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <UTIL_LPM_SetOffMode+0x58>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	4a0a      	ldr	r2, [pc, #40]	; (80017e0 <UTIL_LPM_SetOffMode+0x58>)
 80017b6:	6013      	str	r3, [r2, #0]
      break;
 80017b8:	e007      	b.n	80017ca <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	43da      	mvns	r2, r3
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <UTIL_LPM_SetOffMode+0x58>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4013      	ands	r3, r2
 80017c4:	4a06      	ldr	r2, [pc, #24]	; (80017e0 <UTIL_LPM_SetOffMode+0x58>)
 80017c6:	6013      	str	r3, [r2, #0]
      break;
 80017c8:	bf00      	nop
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80017d4:	bf00      	nop
 80017d6:	371c      	adds	r7, #28
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	20000348 	.word	0x20000348

080017e4 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017ea:	f3ef 8310 	mrs	r3, PRIMASK
 80017ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80017f0:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80017f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80017f4:	b672      	cpsid	i

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 80017f6:	4b12      	ldr	r3, [pc, #72]	; (8001840 <UTIL_LPM_EnterLowPower+0x5c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d006      	beq.n	800180c <UTIL_LPM_EnterLowPower+0x28>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 80017fe:	4b11      	ldr	r3, [pc, #68]	; (8001844 <UTIL_LPM_EnterLowPower+0x60>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8001804:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <UTIL_LPM_EnterLowPower+0x60>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	4798      	blx	r3
 800180a:	e010      	b.n	800182e <UTIL_LPM_EnterLowPower+0x4a>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800180c:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <UTIL_LPM_EnterLowPower+0x64>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d006      	beq.n	8001822 <UTIL_LPM_EnterLowPower+0x3e>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8001814:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <UTIL_LPM_EnterLowPower+0x60>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800181a:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <UTIL_LPM_EnterLowPower+0x60>)
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	4798      	blx	r3
 8001820:	e005      	b.n	800182e <UTIL_LPM_EnterLowPower+0x4a>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8001822:	4b08      	ldr	r3, [pc, #32]	; (8001844 <UTIL_LPM_EnterLowPower+0x60>)
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <UTIL_LPM_EnterLowPower+0x60>)
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	4798      	blx	r3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8001838:	bf00      	nop
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000344 	.word	0x20000344
 8001844:	0800e470 	.word	0x0800e470
 8001848:	20000348 	.word	0x20000348

0800184c <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode( void )
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterOffMode */

/* USER CODE END PWR_EnterOffMode */
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode( void )
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitOffMode */

/* USER CODE END PWR_ExitOffMode */
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode( void )
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterStopMode */

/* USER CODE END PWR_EnterStopMode */
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode( void )
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitStopMode */

/* USER CODE END PWR_ExitStopMode */
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode( void )
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode */

/* USER CODE END PWR_EnterSleepMode */
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode( void )
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode */

/* USER CODE END PWR_ExitSleepMode */
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t mask_bm )
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08c      	sub	sp, #48	; 0x30
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80018a8:	4b63      	ldr	r3, [pc, #396]	; (8001a38 <UTIL_SEQ_Run+0x198>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= mask_bm;
 80018ae:	4b62      	ldr	r3, [pc, #392]	; (8001a38 <UTIL_SEQ_Run+0x198>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4013      	ands	r3, r2
 80018b6:	4a60      	ldr	r2, [pc, #384]	; (8001a38 <UTIL_SEQ_Run+0x198>)
 80018b8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 80018ba:	e082      	b.n	80019c2 <UTIL_SEQ_Run+0x122>
  {
    counter = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 80018c0:	e002      	b.n	80018c8 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 80018c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c4:	3301      	adds	r3, #1
 80018c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 80018c8:	4a5c      	ldr	r2, [pc, #368]	; (8001a3c <UTIL_SEQ_Run+0x19c>)
 80018ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018cc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80018d0:	4b5b      	ldr	r3, [pc, #364]	; (8001a40 <UTIL_SEQ_Run+0x1a0>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	401a      	ands	r2, r3
 80018d6:	4b58      	ldr	r3, [pc, #352]	; (8001a38 <UTIL_SEQ_Run+0x198>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4013      	ands	r3, r2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0f0      	beq.n	80018c2 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 80018e0:	4a56      	ldr	r2, [pc, #344]	; (8001a3c <UTIL_SEQ_Run+0x19c>)
 80018e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80018e8:	4b55      	ldr	r3, [pc, #340]	; (8001a40 <UTIL_SEQ_Run+0x1a0>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	401a      	ands	r2, r3
 80018ee:	4b52      	ldr	r3, [pc, #328]	; (8001a38 <UTIL_SEQ_Run+0x198>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4013      	ands	r3, r2
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if (!(TaskPrio[counter].round_robin & current_task_set))
 80018f6:	4a51      	ldr	r2, [pc, #324]	; (8001a3c <UTIL_SEQ_Run+0x19c>)
 80018f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	4413      	add	r3, r2
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	4013      	ands	r3, r2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d106      	bne.n	8001916 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8001908:	4a4c      	ldr	r2, [pc, #304]	; (8001a3c <UTIL_SEQ_Run+0x19c>)
 800190a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	4413      	add	r3, r2
 8001910:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001914:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = bit_position(current_task_set & TaskPrio[counter].round_robin);
 8001916:	4a49      	ldr	r2, [pc, #292]	; (8001a3c <UTIL_SEQ_Run+0x19c>)
 8001918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	4413      	add	r3, r2
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	4013      	ands	r3, r2
 8001924:	4618      	mov	r0, r3
 8001926:	f000 f97d 	bl	8001c24 <bit_position>
 800192a:	4602      	mov	r2, r0
 800192c:	4b45      	ldr	r3, [pc, #276]	; (8001a44 <UTIL_SEQ_Run+0x1a4>)
 800192e:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1 << (CurrentTaskIdx));
 8001930:	4a42      	ldr	r2, [pc, #264]	; (8001a3c <UTIL_SEQ_Run+0x19c>)
 8001932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	4413      	add	r3, r2
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	4a42      	ldr	r2, [pc, #264]	; (8001a44 <UTIL_SEQ_Run+0x1a4>)
 800193c:	6812      	ldr	r2, [r2, #0]
 800193e:	2101      	movs	r1, #1
 8001940:	fa01 f202 	lsl.w	r2, r1, r2
 8001944:	43d2      	mvns	r2, r2
 8001946:	401a      	ands	r2, r3
 8001948:	493c      	ldr	r1, [pc, #240]	; (8001a3c <UTIL_SEQ_Run+0x19c>)
 800194a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	440b      	add	r3, r1
 8001950:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001952:	f3ef 8310 	mrs	r3, PRIMASK
 8001956:	61bb      	str	r3, [r7, #24]
  return(result);
 8001958:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800195a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800195c:	b672      	cpsid	i
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1 << (CurrentTaskIdx));
 800195e:	4b39      	ldr	r3, [pc, #228]	; (8001a44 <UTIL_SEQ_Run+0x1a4>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2201      	movs	r2, #1
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	461a      	mov	r2, r3
 800196c:	4b36      	ldr	r3, [pc, #216]	; (8001a48 <UTIL_SEQ_Run+0x1a8>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4013      	ands	r3, r2
 8001972:	4a35      	ldr	r2, [pc, #212]	; (8001a48 <UTIL_SEQ_Run+0x1a8>)
 8001974:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter; counter--)
 8001976:	2302      	movs	r3, #2
 8001978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800197a:	e014      	b.n	80019a6 <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1].priority &= ~(1 << (CurrentTaskIdx));
 800197c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197e:	3b01      	subs	r3, #1
 8001980:	4a2e      	ldr	r2, [pc, #184]	; (8001a3c <UTIL_SEQ_Run+0x19c>)
 8001982:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001986:	4b2f      	ldr	r3, [pc, #188]	; (8001a44 <UTIL_SEQ_Run+0x1a4>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2101      	movs	r1, #1
 800198c:	fa01 f303 	lsl.w	r3, r1, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	4619      	mov	r1, r3
 8001994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001996:	3b01      	subs	r3, #1
 8001998:	400a      	ands	r2, r1
 800199a:	4928      	ldr	r1, [pc, #160]	; (8001a3c <UTIL_SEQ_Run+0x19c>)
 800199c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter; counter--)
 80019a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a2:	3b01      	subs	r3, #1
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1e7      	bne.n	800197c <UTIL_SEQ_Run+0xdc>
 80019ac:	6a3b      	ldr	r3, [r7, #32]
 80019ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	f383 8810 	msr	PRIMASK, r3
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80019b6:	4b23      	ldr	r3, [pc, #140]	; (8001a44 <UTIL_SEQ_Run+0x1a4>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a24      	ldr	r2, [pc, #144]	; (8001a4c <UTIL_SEQ_Run+0x1ac>)
 80019bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c0:	4798      	blx	r3
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 80019c2:	4b21      	ldr	r3, [pc, #132]	; (8001a48 <UTIL_SEQ_Run+0x1a8>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	4b1e      	ldr	r3, [pc, #120]	; (8001a40 <UTIL_SEQ_Run+0x1a0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	401a      	ands	r2, r3
 80019cc:	4b1a      	ldr	r3, [pc, #104]	; (8001a38 <UTIL_SEQ_Run+0x198>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4013      	ands	r3, r2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d007      	beq.n	80019e6 <UTIL_SEQ_Run+0x146>
 80019d6:	4b1e      	ldr	r3, [pc, #120]	; (8001a50 <UTIL_SEQ_Run+0x1b0>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	4b1e      	ldr	r3, [pc, #120]	; (8001a54 <UTIL_SEQ_Run+0x1b4>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4013      	ands	r3, r2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f43f af6b 	beq.w	80018bc <UTIL_SEQ_Run+0x1c>
  }

  UTIL_SEQ_PreIdle( );
 80019e6:	f000 f90f 	bl	8001c08 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019ea:	f3ef 8310 	mrs	r3, PRIMASK
 80019ee:	613b      	str	r3, [r7, #16]
  return(result);
 80019f0:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80019f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80019f4:	b672      	cpsid	i
  if (!((TaskSet & TaskMask & SuperMask) || (EvtSet & EvtWaited)))
 80019f6:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <UTIL_SEQ_Run+0x1a8>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <UTIL_SEQ_Run+0x1a0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	401a      	ands	r2, r3
 8001a00:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <UTIL_SEQ_Run+0x198>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4013      	ands	r3, r2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d108      	bne.n	8001a1c <UTIL_SEQ_Run+0x17c>
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <UTIL_SEQ_Run+0x1b0>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <UTIL_SEQ_Run+0x1b4>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4013      	ands	r3, r2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <UTIL_SEQ_Run+0x17c>
  {
    UTIL_SEQ_Idle( );
 8001a18:	f7fe fdbb 	bl	8000592 <UTIL_SEQ_Idle>
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f383 8810 	msr	PRIMASK, r3
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  
  UTIL_SEQ_PostIdle( );
 8001a26:	f000 f8f6 	bl	8001c16 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8001a2a:	4a03      	ldr	r2, [pc, #12]	; (8001a38 <UTIL_SEQ_Run+0x198>)
 8001a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a2e:	6013      	str	r3, [r2, #0]

  return;
 8001a30:	bf00      	nop
}
 8001a32:	3730      	adds	r7, #48	; 0x30
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000008 	.word	0x20000008
 8001a3c:	200003dc 	.word	0x200003dc
 8001a40:	20000004 	.word	0x20000004
 8001a44:	20000358 	.word	0x20000358
 8001a48:	2000034c 	.word	0x2000034c
 8001a4c:	2000035c 	.word	0x2000035c
 8001a50:	20000350 	.word	0x20000350
 8001a54:	20000354 	.word	0x20000354

08001a58 <UTIL_SEQ_RegTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_RegTask( UTIL_SEQ_bm_t task_id_bm , uint32_t flags, void (*task)( void ) )
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a64:	f3ef 8310 	mrs	r3, PRIMASK
 8001a68:	617b      	str	r3, [r7, #20]
  return(result);
 8001a6a:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8001a6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a6e:	b672      	cpsid	i

  TaskCb[bit_position(task_id_bm)] = task;
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f000 f8d7 	bl	8001c24 <bit_position>
 8001a76:	4601      	mov	r1, r0
 8001a78:	4a06      	ldr	r2, [pc, #24]	; (8001a94 <UTIL_SEQ_RegTask+0x3c>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8001a8a:	bf00      	nop
}
 8001a8c:	3720      	adds	r7, #32
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	2000035c 	.word	0x2000035c

08001a98 <UTIL_SEQ_SetTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t task_id_bm , uint32_t task_prio )
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b087      	sub	sp, #28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001aa2:	f3ef 8310 	mrs	r3, PRIMASK
 8001aa6:	60fb      	str	r3, [r7, #12]
  return(result);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8001aaa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001aac:	b672      	cpsid	i

  TaskSet |= task_id_bm;
 8001aae:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <UTIL_SEQ_SetTask+0x4c>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	4a0b      	ldr	r2, [pc, #44]	; (8001ae4 <UTIL_SEQ_SetTask+0x4c>)
 8001ab8:	6013      	str	r3, [r2, #0]
  TaskPrio[task_prio].priority |= task_id_bm;
 8001aba:	4a0b      	ldr	r2, [pc, #44]	; (8001ae8 <UTIL_SEQ_SetTask+0x50>)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	4908      	ldr	r1, [pc, #32]	; (8001ae8 <UTIL_SEQ_SetTask+0x50>)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8001ad8:	bf00      	nop
}
 8001ada:	371c      	adds	r7, #28
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	2000034c 	.word	0x2000034c
 8001ae8:	200003dc 	.word	0x200003dc

08001aec <UTIL_SEQ_PauseTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t task_id_bm )
{
 8001aec:	b480      	push	{r7}
 8001aee:	b087      	sub	sp, #28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001af4:	f3ef 8310 	mrs	r3, PRIMASK
 8001af8:	60fb      	str	r3, [r7, #12]
  return(result);
 8001afa:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8001afc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001afe:	b672      	cpsid	i

  TaskMask &= (~task_id_bm);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	43da      	mvns	r2, r3
 8001b04:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <UTIL_SEQ_PauseTask+0x38>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	4a06      	ldr	r2, [pc, #24]	; (8001b24 <UTIL_SEQ_PauseTask+0x38>)
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8001b18:	bf00      	nop
}
 8001b1a:	371c      	adds	r7, #28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	20000004 	.word	0x20000004

08001b28 <UTIL_SEQ_ResumeTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t task_id_bm )
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b087      	sub	sp, #28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b30:	f3ef 8310 	mrs	r3, PRIMASK
 8001b34:	60fb      	str	r3, [r7, #12]
  return(result);
 8001b36:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8001b38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b3a:	b672      	cpsid	i

  TaskMask |= task_id_bm;
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <UTIL_SEQ_ResumeTask+0x38>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	4a06      	ldr	r2, [pc, #24]	; (8001b60 <UTIL_SEQ_ResumeTask+0x38>)
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8001b52:	bf00      	nop
}
 8001b54:	371c      	adds	r7, #28
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	20000004 	.word	0x20000004

08001b64 <UTIL_SEQ_SetEvt>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t evt_id_bm )
{
 8001b64:	b480      	push	{r7}
 8001b66:	b087      	sub	sp, #28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b6c:	f3ef 8310 	mrs	r3, PRIMASK
 8001b70:	60fb      	str	r3, [r7, #12]
  return(result);
 8001b72:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8001b74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b76:	b672      	cpsid	i

  EvtSet |= evt_id_bm;
 8001b78:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <UTIL_SEQ_SetEvt+0x38>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	4a06      	ldr	r2, [pc, #24]	; (8001b9c <UTIL_SEQ_SetEvt+0x38>)
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8001b8e:	bf00      	nop
}
 8001b90:	371c      	adds	r7, #28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	20000350 	.word	0x20000350

08001ba0 <UTIL_SEQ_WaitEvt>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_WaitEvt( UTIL_SEQ_bm_t evt_id_bm )
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_id_bm;

  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_id_bm = (1 << CurrentTaskIdx);
 8001ba8:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <UTIL_SEQ_WaitEvt+0x5c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2201      	movs	r2, #1
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	60fb      	str	r3, [r7, #12]

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <UTIL_SEQ_WaitEvt+0x60>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	60bb      	str	r3, [r7, #8]
  EvtWaited = evt_id_bm;
 8001bba:	4a11      	ldr	r2, [pc, #68]	; (8001c00 <UTIL_SEQ_WaitEvt+0x60>)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again fro the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while((EvtSet & EvtWaited) == 0)
 8001bc0:	e005      	b.n	8001bce <UTIL_SEQ_WaitEvt+0x2e>
  {
    UTIL_SEQ_EvtIdle(current_task_id_bm, EvtWaited);
 8001bc2:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <UTIL_SEQ_WaitEvt+0x60>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	f7fe fce8 	bl	800059e <UTIL_SEQ_EvtIdle>
  while((EvtSet & EvtWaited) == 0)
 8001bce:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <UTIL_SEQ_WaitEvt+0x64>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <UTIL_SEQ_WaitEvt+0x60>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0f2      	beq.n	8001bc2 <UTIL_SEQ_WaitEvt+0x22>
  }
  EvtSet &= (~EvtWaited);
 8001bdc:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <UTIL_SEQ_WaitEvt+0x60>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	43da      	mvns	r2, r3
 8001be2:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <UTIL_SEQ_WaitEvt+0x64>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4013      	ands	r3, r2
 8001be8:	4a06      	ldr	r2, [pc, #24]	; (8001c04 <UTIL_SEQ_WaitEvt+0x64>)
 8001bea:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 8001bec:	4a04      	ldr	r2, [pc, #16]	; (8001c00 <UTIL_SEQ_WaitEvt+0x60>)
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	6013      	str	r3, [r2, #0]

  return;
 8001bf2:	bf00      	nop
}
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000358 	.word	0x20000358
 8001c00:	20000354 	.word	0x20000354
 8001c04:	20000350 	.word	0x20000350

08001c08 <UTIL_SEQ_PreIdle>:
   */
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8001c0c:	bf00      	nop
}
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8001c16:	b480      	push	{r7}
 8001c18:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8001c1a:	bf00      	nop
}
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <bit_position>:

#if( __CORTEX_M == 0)
static const uint8_t clz_table_4bit[16] = { 4, 3, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 };	
static uint32_t bit_position(uint32_t value)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]

  uint32_t n = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60fb      	str	r3, [r7, #12]

  if ((value & 0xFFFF0000) == 0)  { n  = 16; value <<= 16;  }
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	0c1b      	lsrs	r3, r3, #16
 8001c34:	041b      	lsls	r3, r3, #16
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d104      	bne.n	8001c44 <bit_position+0x20>
 8001c3a:	2310      	movs	r3, #16
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	041b      	lsls	r3, r3, #16
 8001c42:	607b      	str	r3, [r7, #4]
  if ((value & 0xFF000000) == 0)  { n +=  8; value <<=  8;  }
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d105      	bne.n	8001c5a <bit_position+0x36>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	3308      	adds	r3, #8
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	021b      	lsls	r3, r3, #8
 8001c58:	607b      	str	r3, [r7, #4]
  if ((value & 0xF0000000) == 0)  { n +=  4; value <<=  4;  }
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d105      	bne.n	8001c70 <bit_position+0x4c>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	3304      	adds	r3, #4
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	011b      	lsls	r3, r3, #4
 8001c6e:	607b      	str	r3, [r7, #4]

  n += (uint32_t)clz_table_4bit[value >> (32-4)];
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	0f1b      	lsrs	r3, r3, #28
 8001c74:	4a07      	ldr	r2, [pc, #28]	; (8001c94 <bit_position+0x70>)
 8001c76:	5cd3      	ldrb	r3, [r2, r3]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	60fb      	str	r3, [r7, #12]

  return (31-n);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f1c3 031f 	rsb	r3, r3, #31
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	0800e488 	.word	0x0800e488

08001c98 <LL_RCC_HSE_SetCapacitorTuning>:
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca4:	4a0a      	ldr	r2, [pc, #40]	; (8001cd0 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001ca6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8001caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001cb2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	021b      	lsls	r3, r3, #8
 8001cba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	cafecafe 	.word	0xcafecafe

08001cd4 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ce2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
}
 8001cfa:	bf00      	nop
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0

	OTP_ID0_t * p_otp;
	/**
	* Read HSE_Tuning from OTP
	*/
	p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	f00a fa9b 	bl	800c248 <OTP_Read>
 8001d12:	6078      	str	r0, [r7, #4]
	if (p_otp)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d004      	beq.n	8001d24 <HAL_MspInit+0x1e>
	{
		LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	799b      	ldrb	r3, [r3, #6]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff ffba 	bl	8001c98 <LL_RCC_HSE_SetCapacitorTuning>
	}
  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001d24:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001d28:	f7ff ffd4 	bl	8001cd4 <LL_AHB3_GRP1_EnableClock>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d2c:	bf00      	nop
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
	...

08001d44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 8001d48:	2102      	movs	r1, #2
 8001d4a:	4802      	ldr	r0, [pc, #8]	; (8001d54 <HardFault_Handler+0x10>)
 8001d4c:	f000 ff32 	bl	8002bb4 <HAL_GPIO_TogglePin>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <HardFault_Handler+0xc>
 8001d52:	bf00      	nop
 8001d54:	48000400 	.word	0x48000400

08001d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <MemManage_Handler+0x4>

08001d5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d62:	e7fe      	b.n	8001d62 <BusFault_Handler+0x4>

08001d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d68:	e7fe      	b.n	8001d68 <UsageFault_Handler+0x4>

08001d6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d7c:	bf00      	nop
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d98:	f000 fa6c 	bl	8002274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001da4:	2001      	movs	r0, #1
 8001da6:	f000 ff2b 	bl	8002c00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}

08001dae <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001db2:	2002      	movs	r0, #2
 8001db4:	f000 ff24 	bl	8002c00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001db8:	bf00      	nop
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001dc0:	2010      	movs	r0, #16
 8001dc2:	f000 ff1d 	bl	8002c00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001dd0:	4802      	ldr	r0, [pc, #8]	; (8001ddc <USB_LP_IRQHandler+0x10>)
 8001dd2:	f001 f817 	bl	8002e04 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000c3c 	.word	0x20000c3c

08001de0 <RTC_WKUP_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
* @brief This function handles RTC wake-up interrupt through EXTI line 19.
*/
void RTC_WKUP_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
	HW_TS_RTC_Wakeup_Handler();
 8001de4:	f7ff f824 	bl	8000e30 <HW_TS_RTC_Wakeup_Handler>
}
 8001de8:	bf00      	nop
 8001dea:	bd80      	pop	{r7, pc}

08001dec <IPCC_C1_RX_IRQHandler>:
/**
* @brief This function handles IPCC RX occupied interrupt.
*/
void IPCC_C1_RX_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
	HW_IPCC_Rx_Handler();
 8001df0:	f00b fb40 	bl	800d474 <HW_IPCC_Rx_Handler>
}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <IPCC_C1_TX_IRQHandler>:
/**
* @brief This function handles IPCC TX free interrupt.
*/
void IPCC_C1_TX_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
	HW_IPCC_Tx_Handler();
 8001dfc:	f00b fb72 	bl	800d4e4 <HW_IPCC_Tx_Handler>
}
 8001e00:	bf00      	nop
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8001e08:	4b26      	ldr	r3, [pc, #152]	; (8001ea4 <SystemInit+0xa0>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001e0e:	4b25      	ldr	r3, [pc, #148]	; (8001ea4 <SystemInit+0xa0>)
 8001e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e14:	4a23      	ldr	r2, [pc, #140]	; (8001ea4 <SystemInit+0xa0>)
 8001e16:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e1a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e32:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001e36:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e42:	4b19      	ldr	r3, [pc, #100]	; (8001ea8 <SystemInit+0xa4>)
 8001e44:	4013      	ands	r3, r2
 8001e46:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e54:	f023 0305 	bic.w	r3, r3, #5
 8001e58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e68:	f023 0301 	bic.w	r3, r3, #1
 8001e6c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e74:	4a0d      	ldr	r2, [pc, #52]	; (8001eac <SystemInit+0xa8>)
 8001e76:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e7c:	4a0b      	ldr	r2, [pc, #44]	; (8001eac <SystemInit+0xa8>)
 8001e7e:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e8e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e94:	2200      	movs	r2, #0
 8001e96:	619a      	str	r2, [r3, #24]
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	e000ed00 	.word	0xe000ed00
 8001ea8:	faf6fefb 	.word	0xfaf6fefb
 8001eac:	22041000 	.word	0x22041000

08001eb0 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b087      	sub	sp, #28
 8001eb4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8001eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	091b      	lsrs	r3, r3, #4
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	4a47      	ldr	r2, [pc, #284]	; (8001fe0 <SystemCoreClockUpdate+0x130>)
 8001ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec8:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 030c 	and.w	r3, r3, #12
 8001ed4:	2b0c      	cmp	r3, #12
 8001ed6:	d867      	bhi.n	8001fa8 <SystemCoreClockUpdate+0xf8>
 8001ed8:	a201      	add	r2, pc, #4	; (adr r2, 8001ee0 <SystemCoreClockUpdate+0x30>)
 8001eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ede:	bf00      	nop
 8001ee0:	08001f15 	.word	0x08001f15
 8001ee4:	08001fa9 	.word	0x08001fa9
 8001ee8:	08001fa9 	.word	0x08001fa9
 8001eec:	08001fa9 	.word	0x08001fa9
 8001ef0:	08001f1d 	.word	0x08001f1d
 8001ef4:	08001fa9 	.word	0x08001fa9
 8001ef8:	08001fa9 	.word	0x08001fa9
 8001efc:	08001fa9 	.word	0x08001fa9
 8001f00:	08001f25 	.word	0x08001f25
 8001f04:	08001fa9 	.word	0x08001fa9
 8001f08:	08001fa9 	.word	0x08001fa9
 8001f0c:	08001fa9 	.word	0x08001fa9
 8001f10:	08001f2d 	.word	0x08001f2d
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001f14:	4a33      	ldr	r2, [pc, #204]	; (8001fe4 <SystemCoreClockUpdate+0x134>)
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	6013      	str	r3, [r2, #0]
      break;
 8001f1a:	e049      	b.n	8001fb0 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8001f1c:	4b31      	ldr	r3, [pc, #196]	; (8001fe4 <SystemCoreClockUpdate+0x134>)
 8001f1e:	4a32      	ldr	r2, [pc, #200]	; (8001fe8 <SystemCoreClockUpdate+0x138>)
 8001f20:	601a      	str	r2, [r3, #0]
      break;
 8001f22:	e045      	b.n	8001fb0 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001f24:	4b2f      	ldr	r3, [pc, #188]	; (8001fe4 <SystemCoreClockUpdate+0x134>)
 8001f26:	4a31      	ldr	r2, [pc, #196]	; (8001fec <SystemCoreClockUpdate+0x13c>)
 8001f28:	601a      	str	r2, [r3, #0]
      break;
 8001f2a:	e041      	b.n	8001fb0 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8001f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	091b      	lsrs	r3, r3, #4
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	3301      	adds	r3, #1
 8001f46:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d105      	bne.n	8001f5a <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8001f4e:	4a26      	ldr	r2, [pc, #152]	; (8001fe8 <SystemCoreClockUpdate+0x138>)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	e00d      	b.n	8001f76 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2b03      	cmp	r3, #3
 8001f5e:	d105      	bne.n	8001f6c <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8001f60:	4a22      	ldr	r2, [pc, #136]	; (8001fec <SystemCoreClockUpdate+0x13c>)
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f68:	617b      	str	r3, [r7, #20]
 8001f6a:	e004      	b.n	8001f76 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f74:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	0a1b      	lsrs	r3, r3, #8
 8001f7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	fb02 f303 	mul.w	r3, r2, r3
 8001f88:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8001f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	0f5b      	lsrs	r3, r3, #29
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	3301      	adds	r3, #1
 8001f98:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa2:	4a10      	ldr	r2, [pc, #64]	; (8001fe4 <SystemCoreClockUpdate+0x134>)
 8001fa4:	6013      	str	r3, [r2, #0]
      break;
 8001fa6:	e003      	b.n	8001fb0 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8001fa8:	4a0e      	ldr	r2, [pc, #56]	; (8001fe4 <SystemCoreClockUpdate+0x134>)
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	6013      	str	r3, [r2, #0]
      break;
 8001fae:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	091b      	lsrs	r3, r3, #4
 8001fb8:	f003 030f 	and.w	r3, r3, #15
 8001fbc:	4a0c      	ldr	r2, [pc, #48]	; (8001ff0 <SystemCoreClockUpdate+0x140>)
 8001fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc2:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8001fc4:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <SystemCoreClockUpdate+0x134>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fce:	4a05      	ldr	r2, [pc, #20]	; (8001fe4 <SystemCoreClockUpdate+0x134>)
 8001fd0:	6013      	str	r3, [r2, #0]

}
 8001fd2:	bf00      	nop
 8001fd4:	371c      	adds	r7, #28
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	0800e4f8 	.word	0x0800e4f8
 8001fe4:	2000000c 	.word	0x2000000c
 8001fe8:	00f42400 	.word	0x00f42400
 8001fec:	01e84800 	.word	0x01e84800
 8001ff0:	0800e498 	.word	0x0800e498

08001ff4 <LL_AHB2_GRP1_EnableClock>:
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002000:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002002:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4313      	orrs	r3, r2
 800200a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800200c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002010:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4013      	ands	r3, r2
 8002016:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002018:	68fb      	ldr	r3, [r7, #12]
}
 800201a:	bf00      	nop
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002026:	b480      	push	{r7}
 8002028:	b085      	sub	sp, #20
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800202e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002032:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002034:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4313      	orrs	r3, r2
 800203c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800203e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002042:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4013      	ands	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800204a:	68fb      	ldr	r3, [r7, #12]
}
 800204c:	bf00      	nop
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800205c:	4b22      	ldr	r3, [pc, #136]	; (80020e8 <MX_USART1_UART_Init+0x90>)
 800205e:	4a23      	ldr	r2, [pc, #140]	; (80020ec <MX_USART1_UART_Init+0x94>)
 8002060:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002062:	4b21      	ldr	r3, [pc, #132]	; (80020e8 <MX_USART1_UART_Init+0x90>)
 8002064:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002068:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800206a:	4b1f      	ldr	r3, [pc, #124]	; (80020e8 <MX_USART1_UART_Init+0x90>)
 800206c:	2200      	movs	r2, #0
 800206e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002070:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <MX_USART1_UART_Init+0x90>)
 8002072:	2200      	movs	r2, #0
 8002074:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002076:	4b1c      	ldr	r3, [pc, #112]	; (80020e8 <MX_USART1_UART_Init+0x90>)
 8002078:	2200      	movs	r2, #0
 800207a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800207c:	4b1a      	ldr	r3, [pc, #104]	; (80020e8 <MX_USART1_UART_Init+0x90>)
 800207e:	220c      	movs	r2, #12
 8002080:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002082:	4b19      	ldr	r3, [pc, #100]	; (80020e8 <MX_USART1_UART_Init+0x90>)
 8002084:	2200      	movs	r2, #0
 8002086:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002088:	4b17      	ldr	r3, [pc, #92]	; (80020e8 <MX_USART1_UART_Init+0x90>)
 800208a:	2200      	movs	r2, #0
 800208c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800208e:	4b16      	ldr	r3, [pc, #88]	; (80020e8 <MX_USART1_UART_Init+0x90>)
 8002090:	2200      	movs	r2, #0
 8002092:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002094:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <MX_USART1_UART_Init+0x90>)
 8002096:	2200      	movs	r2, #0
 8002098:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800209a:	4b13      	ldr	r3, [pc, #76]	; (80020e8 <MX_USART1_UART_Init+0x90>)
 800209c:	2200      	movs	r2, #0
 800209e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020a0:	4811      	ldr	r0, [pc, #68]	; (80020e8 <MX_USART1_UART_Init+0x90>)
 80020a2:	f004 f96b 	bl	800637c <HAL_UART_Init>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80020ac:	f7ff fafa 	bl	80016a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020b0:	2100      	movs	r1, #0
 80020b2:	480d      	ldr	r0, [pc, #52]	; (80020e8 <MX_USART1_UART_Init+0x90>)
 80020b4:	f005 fd6c 	bl	8007b90 <HAL_UARTEx_SetTxFifoThreshold>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80020be:	f7ff faf1 	bl	80016a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020c2:	2100      	movs	r1, #0
 80020c4:	4808      	ldr	r0, [pc, #32]	; (80020e8 <MX_USART1_UART_Init+0x90>)
 80020c6:	f005 fdd3 	bl	8007c70 <HAL_UARTEx_SetRxFifoThreshold>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80020d0:	f7ff fae8 	bl	80016a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80020d4:	4804      	ldr	r0, [pc, #16]	; (80020e8 <MX_USART1_UART_Init+0x90>)
 80020d6:	f005 fd0f 	bl	8007af8 <HAL_UARTEx_DisableFifoMode>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80020e0:	f7ff fae0 	bl	80016a4 <Error_Handler>
  }

}
 80020e4:	bf00      	nop
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	200006b0 	.word	0x200006b0
 80020ec:	40013800 	.word	0x40013800

080020f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b088      	sub	sp, #32
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	f107 030c 	add.w	r3, r7, #12
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a0e      	ldr	r2, [pc, #56]	; (8002148 <HAL_UART_MspInit+0x58>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d116      	bne.n	8002140 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002112:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002116:	f7ff ff86 	bl	8002026 <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800211a:	2002      	movs	r0, #2
 800211c:	f7ff ff6a 	bl	8001ff4 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002120:	23c0      	movs	r3, #192	; 0xc0
 8002122:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002124:	2302      	movs	r3, #2
 8002126:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212c:	2300      	movs	r3, #0
 800212e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002130:	2307      	movs	r3, #7
 8002132:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002134:	f107 030c 	add.w	r3, r7, #12
 8002138:	4619      	mov	r1, r3
 800213a:	4804      	ldr	r0, [pc, #16]	; (800214c <HAL_UART_MspInit+0x5c>)
 800213c:	f000 face 	bl	80026dc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002140:	bf00      	nop
 8002142:	3720      	adds	r7, #32
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40013800 	.word	0x40013800
 800214c:	48000400 	.word	0x48000400

08002150 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002150:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002152:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002154:	3304      	adds	r3, #4

08002156 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002156:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002158:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800215a:	d3f9      	bcc.n	8002150 <CopyDataInit>
  bx lr
 800215c:	4770      	bx	lr

0800215e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800215e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002160:	3004      	adds	r0, #4

08002162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002162:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002164:	d3fb      	bcc.n	800215e <FillZerobss>
  bx lr
 8002166:	4770      	bx	lr

08002168 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002168:	480c      	ldr	r0, [pc, #48]	; (800219c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800216a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800216c:	480c      	ldr	r0, [pc, #48]	; (80021a0 <LoopForever+0x8>)
 800216e:	490d      	ldr	r1, [pc, #52]	; (80021a4 <LoopForever+0xc>)
 8002170:	4a0d      	ldr	r2, [pc, #52]	; (80021a8 <LoopForever+0x10>)
 8002172:	2300      	movs	r3, #0
 8002174:	f7ff ffef 	bl	8002156 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002178:	480c      	ldr	r0, [pc, #48]	; (80021ac <LoopForever+0x14>)
 800217a:	490d      	ldr	r1, [pc, #52]	; (80021b0 <LoopForever+0x18>)
 800217c:	2300      	movs	r3, #0
 800217e:	f7ff fff0 	bl	8002162 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002182:	480c      	ldr	r0, [pc, #48]	; (80021b4 <LoopForever+0x1c>)
 8002184:	490c      	ldr	r1, [pc, #48]	; (80021b8 <LoopForever+0x20>)
 8002186:	2300      	movs	r3, #0
 8002188:	f7ff ffeb 	bl	8002162 <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800218c:	f7ff fe3a 	bl	8001e04 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002190:	f00b ffe2 	bl	800e158 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002194:	f7ff f9a6 	bl	80014e4 <main>

08002198 <LoopForever>:

LoopForever:
  b LoopForever
 8002198:	e7fe      	b.n	8002198 <LoopForever>
 800219a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800219c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80021a0:	20000004 	.word	0x20000004
 80021a4:	2000018c 	.word	0x2000018c
 80021a8:	0800e570 	.word	0x0800e570
  INIT_BSS _sbss, _ebss
 80021ac:	2000031c 	.word	0x2000031c
 80021b0:	20000eb0 	.word	0x20000eb0
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80021b4:	200301c4 	.word	0x200301c4
 80021b8:	20030a44 	.word	0x20030a44

080021bc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021bc:	e7fe      	b.n	80021bc <ADC1_IRQHandler>
	...

080021c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021ca:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <HAL_Init+0x3c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a0b      	ldr	r2, [pc, #44]	; (80021fc <HAL_Init+0x3c>)
 80021d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d6:	2003      	movs	r0, #3
 80021d8:	f000 f9c6 	bl	8002568 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021dc:	2000      	movs	r0, #0
 80021de:	f000 f80f 	bl	8002200 <HAL_InitTick>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d002      	beq.n	80021ee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	71fb      	strb	r3, [r7, #7]
 80021ec:	e001      	b.n	80021f2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021ee:	f7ff fd8a 	bl	8001d06 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021f2:	79fb      	ldrb	r3, [r7, #7]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	58004000 	.word	0x58004000

08002200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002208:	2300      	movs	r3, #0
 800220a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800220c:	4b17      	ldr	r3, [pc, #92]	; (800226c <HAL_InitTick+0x6c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d023      	beq.n	800225c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 8002214:	f002 ff92 	bl	800513c <HAL_RCC_GetHCLKFreq>
 8002218:	4601      	mov	r1, r0
 800221a:	4b14      	ldr	r3, [pc, #80]	; (800226c <HAL_InitTick+0x6c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002222:	fbb2 f3f3 	udiv	r3, r2, r3
 8002226:	fbb1 f3f3 	udiv	r3, r1, r3
 800222a:	4618      	mov	r0, r3
 800222c:	f000 fa16 	bl	800265c <HAL_SYSTICK_Config>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10f      	bne.n	8002256 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b0f      	cmp	r3, #15
 800223a:	d809      	bhi.n	8002250 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800223c:	2200      	movs	r2, #0
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002244:	f000 f9b0 	bl	80025a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002248:	4a09      	ldr	r2, [pc, #36]	; (8002270 <HAL_InitTick+0x70>)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	e007      	b.n	8002260 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	73fb      	strb	r3, [r7, #15]
 8002254:	e004      	b.n	8002260 <HAL_InitTick+0x60>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	73fb      	strb	r3, [r7, #15]
 800225a:	e001      	b.n	8002260 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002260:	7bfb      	ldrb	r3, [r7, #15]
}
 8002262:	4618      	mov	r0, r3
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20000014 	.word	0x20000014
 8002270:	20000010 	.word	0x20000010

08002274 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002278:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_IncTick+0x1c>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4b05      	ldr	r3, [pc, #20]	; (8002294 <HAL_IncTick+0x20>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4413      	add	r3, r2
 8002282:	4a03      	ldr	r2, [pc, #12]	; (8002290 <HAL_IncTick+0x1c>)
 8002284:	6013      	str	r3, [r2, #0]
}
 8002286:	bf00      	nop
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	2000073c 	.word	0x2000073c
 8002294:	20000014 	.word	0x20000014

08002298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  return uwTick;
 800229c:	4b03      	ldr	r3, [pc, #12]	; (80022ac <HAL_GetTick+0x14>)
 800229e:	681b      	ldr	r3, [r3, #0]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	2000073c 	.word	0x2000073c

080022b0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80022b4:	4b03      	ldr	r3, [pc, #12]	; (80022c4 <HAL_GetTickPrio+0x14>)
 80022b6:	681b      	ldr	r3, [r3, #0]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	20000010 	.word	0x20000010

080022c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 80022d0:	f7ff ffe2 	bl	8002298 <HAL_GetTick>
 80022d4:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022e0:	d004      	beq.n	80022ec <HAL_Delay+0x24>
    {
      wait += (uint32_t)(uwTickFreq);
 80022e2:	4b09      	ldr	r3, [pc, #36]	; (8002308 <HAL_Delay+0x40>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	4413      	add	r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 80022ec:	bf00      	nop
 80022ee:	f7ff ffd3 	bl	8002298 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d8f7      	bhi.n	80022ee <HAL_Delay+0x26>
    {
    }
  }
 80022fe:	bf00      	nop
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000014 	.word	0x20000014

0800230c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800231c:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <__NVIC_SetPriorityGrouping+0x44>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002328:	4013      	ands	r3, r2
 800232a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002334:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800233c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800233e:	4a04      	ldr	r2, [pc, #16]	; (8002350 <__NVIC_SetPriorityGrouping+0x44>)
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	60d3      	str	r3, [r2, #12]
}
 8002344:	bf00      	nop
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	e000ed00 	.word	0xe000ed00

08002354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002358:	4b04      	ldr	r3, [pc, #16]	; (800236c <__NVIC_GetPriorityGrouping+0x18>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	0a1b      	lsrs	r3, r3, #8
 800235e:	f003 0307 	and.w	r3, r3, #7
}
 8002362:	4618      	mov	r0, r3
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	e000ed00 	.word	0xe000ed00

08002370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800237a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237e:	2b00      	cmp	r3, #0
 8002380:	db0b      	blt.n	800239a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	f003 021f 	and.w	r2, r3, #31
 8002388:	4907      	ldr	r1, [pc, #28]	; (80023a8 <__NVIC_EnableIRQ+0x38>)
 800238a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238e:	095b      	lsrs	r3, r3, #5
 8002390:	2001      	movs	r0, #1
 8002392:	fa00 f202 	lsl.w	r2, r0, r2
 8002396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	e000e100 	.word	0xe000e100

080023ac <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	db10      	blt.n	80023e0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	f003 021f 	and.w	r2, r3, #31
 80023c4:	4909      	ldr	r1, [pc, #36]	; (80023ec <__NVIC_DisableIRQ+0x40>)
 80023c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ca:	095b      	lsrs	r3, r3, #5
 80023cc:	2001      	movs	r0, #1
 80023ce:	fa00 f202 	lsl.w	r2, r0, r2
 80023d2:	3320      	adds	r3, #32
 80023d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80023d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80023dc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	e000e100 	.word	0xe000e100

080023f0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	db0c      	blt.n	800241c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	f003 021f 	and.w	r2, r3, #31
 8002408:	4907      	ldr	r1, [pc, #28]	; (8002428 <__NVIC_SetPendingIRQ+0x38>)
 800240a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240e:	095b      	lsrs	r3, r3, #5
 8002410:	2001      	movs	r0, #1
 8002412:	fa00 f202 	lsl.w	r2, r0, r2
 8002416:	3340      	adds	r3, #64	; 0x40
 8002418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	e000e100 	.word	0xe000e100

0800242c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243a:	2b00      	cmp	r3, #0
 800243c:	db0c      	blt.n	8002458 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	f003 021f 	and.w	r2, r3, #31
 8002444:	4907      	ldr	r1, [pc, #28]	; (8002464 <__NVIC_ClearPendingIRQ+0x38>)
 8002446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244a:	095b      	lsrs	r3, r3, #5
 800244c:	2001      	movs	r0, #1
 800244e:	fa00 f202 	lsl.w	r2, r0, r2
 8002452:	3360      	adds	r3, #96	; 0x60
 8002454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	e000e100 	.word	0xe000e100

08002468 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	6039      	str	r1, [r7, #0]
 8002472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002478:	2b00      	cmp	r3, #0
 800247a:	db0a      	blt.n	8002492 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	b2da      	uxtb	r2, r3
 8002480:	490c      	ldr	r1, [pc, #48]	; (80024b4 <__NVIC_SetPriority+0x4c>)
 8002482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002486:	0112      	lsls	r2, r2, #4
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	440b      	add	r3, r1
 800248c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002490:	e00a      	b.n	80024a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	b2da      	uxtb	r2, r3
 8002496:	4908      	ldr	r1, [pc, #32]	; (80024b8 <__NVIC_SetPriority+0x50>)
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	3b04      	subs	r3, #4
 80024a0:	0112      	lsls	r2, r2, #4
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	440b      	add	r3, r1
 80024a6:	761a      	strb	r2, [r3, #24]
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	e000e100 	.word	0xe000e100
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024bc:	b480      	push	{r7}
 80024be:	b089      	sub	sp, #36	; 0x24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f1c3 0307 	rsb	r3, r3, #7
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	bf28      	it	cs
 80024da:	2304      	movcs	r3, #4
 80024dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	3304      	adds	r3, #4
 80024e2:	2b06      	cmp	r3, #6
 80024e4:	d902      	bls.n	80024ec <NVIC_EncodePriority+0x30>
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	3b03      	subs	r3, #3
 80024ea:	e000      	b.n	80024ee <NVIC_EncodePriority+0x32>
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	43da      	mvns	r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	401a      	ands	r2, r3
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002504:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	fa01 f303 	lsl.w	r3, r1, r3
 800250e:	43d9      	mvns	r1, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002514:	4313      	orrs	r3, r2
         );
}
 8002516:	4618      	mov	r0, r3
 8002518:	3724      	adds	r7, #36	; 0x24
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
	...

08002524 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3b01      	subs	r3, #1
 8002530:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002534:	d301      	bcc.n	800253a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002536:	2301      	movs	r3, #1
 8002538:	e00f      	b.n	800255a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800253a:	4a0a      	ldr	r2, [pc, #40]	; (8002564 <SysTick_Config+0x40>)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3b01      	subs	r3, #1
 8002540:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002542:	210f      	movs	r1, #15
 8002544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002548:	f7ff ff8e 	bl	8002468 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800254c:	4b05      	ldr	r3, [pc, #20]	; (8002564 <SysTick_Config+0x40>)
 800254e:	2200      	movs	r2, #0
 8002550:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002552:	4b04      	ldr	r3, [pc, #16]	; (8002564 <SysTick_Config+0x40>)
 8002554:	2207      	movs	r2, #7
 8002556:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	e000e010 	.word	0xe000e010

08002568 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b07      	cmp	r3, #7
 8002574:	d00f      	beq.n	8002596 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b06      	cmp	r3, #6
 800257a:	d00c      	beq.n	8002596 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b05      	cmp	r3, #5
 8002580:	d009      	beq.n	8002596 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b04      	cmp	r3, #4
 8002586:	d006      	beq.n	8002596 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b03      	cmp	r3, #3
 800258c:	d003      	beq.n	8002596 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800258e:	218d      	movs	r1, #141	; 0x8d
 8002590:	4804      	ldr	r0, [pc, #16]	; (80025a4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002592:	f7ff f893 	bl	80016bc <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7ff feb8 	bl	800230c <__NVIC_SetPriorityGrouping>
}
 800259c:	bf00      	nop
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	0800e1e0 	.word	0x0800e1e0

080025a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
 80025b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b0f      	cmp	r3, #15
 80025ba:	d903      	bls.n	80025c4 <HAL_NVIC_SetPriority+0x1c>
 80025bc:	21a5      	movs	r1, #165	; 0xa5
 80025be:	480e      	ldr	r0, [pc, #56]	; (80025f8 <HAL_NVIC_SetPriority+0x50>)
 80025c0:	f7ff f87c 	bl	80016bc <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2b0f      	cmp	r3, #15
 80025c8:	d903      	bls.n	80025d2 <HAL_NVIC_SetPriority+0x2a>
 80025ca:	21a6      	movs	r1, #166	; 0xa6
 80025cc:	480a      	ldr	r0, [pc, #40]	; (80025f8 <HAL_NVIC_SetPriority+0x50>)
 80025ce:	f7ff f875 	bl	80016bc <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 80025d2:	f7ff febf 	bl	8002354 <__NVIC_GetPriorityGrouping>
 80025d6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	68b9      	ldr	r1, [r7, #8]
 80025dc:	6978      	ldr	r0, [r7, #20]
 80025de:	f7ff ff6d 	bl	80024bc <NVIC_EncodePriority>
 80025e2:	4602      	mov	r2, r0
 80025e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025e8:	4611      	mov	r1, r2
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff ff3c 	bl	8002468 <__NVIC_SetPriority>
}
 80025f0:	bf00      	nop
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	0800e1e0 	.word	0x0800e1e0

080025fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260a:	2b00      	cmp	r3, #0
 800260c:	da03      	bge.n	8002616 <HAL_NVIC_EnableIRQ+0x1a>
 800260e:	21b7      	movs	r1, #183	; 0xb7
 8002610:	4805      	ldr	r0, [pc, #20]	; (8002628 <HAL_NVIC_EnableIRQ+0x2c>)
 8002612:	f7ff f853 	bl	80016bc <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff fea8 	bl	8002370 <__NVIC_EnableIRQ>
}
 8002620:	bf00      	nop
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	0800e1e0 	.word	0x0800e1e0

0800262c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263a:	2b00      	cmp	r3, #0
 800263c:	da03      	bge.n	8002646 <HAL_NVIC_DisableIRQ+0x1a>
 800263e:	21c7      	movs	r1, #199	; 0xc7
 8002640:	4805      	ldr	r0, [pc, #20]	; (8002658 <HAL_NVIC_DisableIRQ+0x2c>)
 8002642:	f7ff f83b 	bl	80016bc <assert_failed>
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff feae 	bl	80023ac <__NVIC_DisableIRQ>
}
 8002650:	bf00      	nop
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	0800e1e0 	.word	0x0800e1e0

0800265c <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7ff ff5d 	bl	8002524 <SysTick_Config>
 800266a:	4603      	mov	r3, r0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	4603      	mov	r3, r0
 800267c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800267e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002682:	2b00      	cmp	r3, #0
 8002684:	da04      	bge.n	8002690 <HAL_NVIC_SetPendingIRQ+0x1c>
 8002686:	f44f 7194 	mov.w	r1, #296	; 0x128
 800268a:	4806      	ldr	r0, [pc, #24]	; (80026a4 <HAL_NVIC_SetPendingIRQ+0x30>)
 800268c:	f7ff f816 	bl	80016bc <assert_failed>
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff feab 	bl	80023f0 <__NVIC_SetPendingIRQ>
}
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	0800e1e0 	.word	0x0800e1e0

080026a8 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80026b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	da04      	bge.n	80026c4 <HAL_NVIC_ClearPendingIRQ+0x1c>
 80026ba:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80026be:	4806      	ldr	r0, [pc, #24]	; (80026d8 <HAL_NVIC_ClearPendingIRQ+0x30>)
 80026c0:	f7fe fffc 	bl	80016bc <assert_failed>
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80026c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff feaf 	bl	800242c <__NVIC_ClearPendingIRQ>
}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	0800e1e0 	.word	0x0800e1e0

080026dc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80026f0:	d017      	beq.n	8002722 <HAL_GPIO_Init+0x46>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a39      	ldr	r2, [pc, #228]	; (80027dc <HAL_GPIO_Init+0x100>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d013      	beq.n	8002722 <HAL_GPIO_Init+0x46>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a38      	ldr	r2, [pc, #224]	; (80027e0 <HAL_GPIO_Init+0x104>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d00f      	beq.n	8002722 <HAL_GPIO_Init+0x46>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a37      	ldr	r2, [pc, #220]	; (80027e4 <HAL_GPIO_Init+0x108>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d00b      	beq.n	8002722 <HAL_GPIO_Init+0x46>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a36      	ldr	r2, [pc, #216]	; (80027e8 <HAL_GPIO_Init+0x10c>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d007      	beq.n	8002722 <HAL_GPIO_Init+0x46>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a35      	ldr	r2, [pc, #212]	; (80027ec <HAL_GPIO_Init+0x110>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d003      	beq.n	8002722 <HAL_GPIO_Init+0x46>
 800271a:	21b1      	movs	r1, #177	; 0xb1
 800271c:	4834      	ldr	r0, [pc, #208]	; (80027f0 <HAL_GPIO_Init+0x114>)
 800271e:	f7fe ffcd 	bl	80016bc <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	b29b      	uxth	r3, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	d005      	beq.n	8002738 <HAL_GPIO_Init+0x5c>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	0c1b      	lsrs	r3, r3, #16
 8002732:	041b      	lsls	r3, r3, #16
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <HAL_GPIO_Init+0x64>
 8002738:	21b2      	movs	r1, #178	; 0xb2
 800273a:	482d      	ldr	r0, [pc, #180]	; (80027f0 <HAL_GPIO_Init+0x114>)
 800273c:	f7fe ffbe 	bl	80016bc <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d035      	beq.n	80027b4 <HAL_GPIO_Init+0xd8>
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d031      	beq.n	80027b4 <HAL_GPIO_Init+0xd8>
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b11      	cmp	r3, #17
 8002756:	d02d      	beq.n	80027b4 <HAL_GPIO_Init+0xd8>
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b02      	cmp	r3, #2
 800275e:	d029      	beq.n	80027b4 <HAL_GPIO_Init+0xd8>
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	2b12      	cmp	r3, #18
 8002766:	d025      	beq.n	80027b4 <HAL_GPIO_Init+0xd8>
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	4a21      	ldr	r2, [pc, #132]	; (80027f4 <HAL_GPIO_Init+0x118>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d020      	beq.n	80027b4 <HAL_GPIO_Init+0xd8>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	4a20      	ldr	r2, [pc, #128]	; (80027f8 <HAL_GPIO_Init+0x11c>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d01b      	beq.n	80027b4 <HAL_GPIO_Init+0xd8>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	4a1e      	ldr	r2, [pc, #120]	; (80027fc <HAL_GPIO_Init+0x120>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d016      	beq.n	80027b4 <HAL_GPIO_Init+0xd8>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	4a1d      	ldr	r2, [pc, #116]	; (8002800 <HAL_GPIO_Init+0x124>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d011      	beq.n	80027b4 <HAL_GPIO_Init+0xd8>
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	4a1b      	ldr	r2, [pc, #108]	; (8002804 <HAL_GPIO_Init+0x128>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d00c      	beq.n	80027b4 <HAL_GPIO_Init+0xd8>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	4a1a      	ldr	r2, [pc, #104]	; (8002808 <HAL_GPIO_Init+0x12c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d007      	beq.n	80027b4 <HAL_GPIO_Init+0xd8>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b03      	cmp	r3, #3
 80027aa:	d003      	beq.n	80027b4 <HAL_GPIO_Init+0xd8>
 80027ac:	21b3      	movs	r1, #179	; 0xb3
 80027ae:	4810      	ldr	r0, [pc, #64]	; (80027f0 <HAL_GPIO_Init+0x114>)
 80027b0:	f7fe ff84 	bl	80016bc <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 81ba 	beq.w	8002b32 <HAL_GPIO_Init+0x456>
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	f000 81b5 	beq.w	8002b32 <HAL_GPIO_Init+0x456>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	f000 81b0 	beq.w	8002b32 <HAL_GPIO_Init+0x456>
 80027d2:	21b4      	movs	r1, #180	; 0xb4
 80027d4:	4806      	ldr	r0, [pc, #24]	; (80027f0 <HAL_GPIO_Init+0x114>)
 80027d6:	f7fe ff71 	bl	80016bc <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027da:	e1aa      	b.n	8002b32 <HAL_GPIO_Init+0x456>
 80027dc:	48000400 	.word	0x48000400
 80027e0:	48000800 	.word	0x48000800
 80027e4:	48000c00 	.word	0x48000c00
 80027e8:	48001000 	.word	0x48001000
 80027ec:	48001c00 	.word	0x48001c00
 80027f0:	0800e21c 	.word	0x0800e21c
 80027f4:	10110000 	.word	0x10110000
 80027f8:	10210000 	.word	0x10210000
 80027fc:	10310000 	.word	0x10310000
 8002800:	10120000 	.word	0x10120000
 8002804:	10220000 	.word	0x10220000
 8002808:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	2101      	movs	r1, #1
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	fa01 f303 	lsl.w	r3, r1, r3
 8002818:	4013      	ands	r3, r2
 800281a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 8184 	beq.w	8002b2c <HAL_GPIO_Init+0x450>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d003      	beq.n	8002834 <HAL_GPIO_Init+0x158>
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b12      	cmp	r3, #18
 8002832:	d147      	bne.n	80028c4 <HAL_GPIO_Init+0x1e8>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800283a:	d017      	beq.n	800286c <HAL_GPIO_Init+0x190>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a80      	ldr	r2, [pc, #512]	; (8002a40 <HAL_GPIO_Init+0x364>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d013      	beq.n	800286c <HAL_GPIO_Init+0x190>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a7f      	ldr	r2, [pc, #508]	; (8002a44 <HAL_GPIO_Init+0x368>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d00f      	beq.n	800286c <HAL_GPIO_Init+0x190>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a7e      	ldr	r2, [pc, #504]	; (8002a48 <HAL_GPIO_Init+0x36c>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d00b      	beq.n	800286c <HAL_GPIO_Init+0x190>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a7d      	ldr	r2, [pc, #500]	; (8002a4c <HAL_GPIO_Init+0x370>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d007      	beq.n	800286c <HAL_GPIO_Init+0x190>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a7c      	ldr	r2, [pc, #496]	; (8002a50 <HAL_GPIO_Init+0x374>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d003      	beq.n	800286c <HAL_GPIO_Init+0x190>
 8002864:	21c3      	movs	r1, #195	; 0xc3
 8002866:	487b      	ldr	r0, [pc, #492]	; (8002a54 <HAL_GPIO_Init+0x378>)
 8002868:	f7fe ff28 	bl	80016bc <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	2b0f      	cmp	r3, #15
 8002872:	d903      	bls.n	800287c <HAL_GPIO_Init+0x1a0>
 8002874:	21c4      	movs	r1, #196	; 0xc4
 8002876:	4877      	ldr	r0, [pc, #476]	; (8002a54 <HAL_GPIO_Init+0x378>)
 8002878:	f7fe ff20 	bl	80016bc <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	08da      	lsrs	r2, r3, #3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3208      	adds	r2, #8
 8002884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002888:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	220f      	movs	r2, #15
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4013      	ands	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	691a      	ldr	r2, [r3, #16]
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	08da      	lsrs	r2, r3, #3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	3208      	adds	r2, #8
 80028be:	6939      	ldr	r1, [r7, #16]
 80028c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	2203      	movs	r2, #3
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	43db      	mvns	r3, r3
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4013      	ands	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 0203 	and.w	r2, r3, #3
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d00b      	beq.n	8002918 <HAL_GPIO_Init+0x23c>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b02      	cmp	r3, #2
 8002906:	d007      	beq.n	8002918 <HAL_GPIO_Init+0x23c>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800290c:	2b11      	cmp	r3, #17
 800290e:	d003      	beq.n	8002918 <HAL_GPIO_Init+0x23c>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b12      	cmp	r3, #18
 8002916:	d144      	bne.n	80029a2 <HAL_GPIO_Init+0x2c6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00f      	beq.n	8002940 <HAL_GPIO_Init+0x264>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d00b      	beq.n	8002940 <HAL_GPIO_Init+0x264>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	2b02      	cmp	r3, #2
 800292e:	d007      	beq.n	8002940 <HAL_GPIO_Init+0x264>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	2b03      	cmp	r3, #3
 8002936:	d003      	beq.n	8002940 <HAL_GPIO_Init+0x264>
 8002938:	21d8      	movs	r1, #216	; 0xd8
 800293a:	4846      	ldr	r0, [pc, #280]	; (8002a54 <HAL_GPIO_Init+0x378>)
 800293c:	f7fe febe 	bl	80016bc <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	2203      	movs	r2, #3
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	43db      	mvns	r3, r3
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	4013      	ands	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	68da      	ldr	r2, [r3, #12]
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	4313      	orrs	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002976:	2201      	movs	r2, #1
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43db      	mvns	r3, r3
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	4013      	ands	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	091b      	lsrs	r3, r3, #4
 800298c:	f003 0201 	and.w	r2, r3, #1
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	4313      	orrs	r3, r2
 800299a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	2203      	movs	r2, #3
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43db      	mvns	r3, r3
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	4013      	ands	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f000 80a6 	beq.w	8002b2c <HAL_GPIO_Init+0x450>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80029e0:	4a1d      	ldr	r2, [pc, #116]	; (8002a58 <HAL_GPIO_Init+0x37c>)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	089b      	lsrs	r3, r3, #2
 80029e6:	3302      	adds	r3, #2
 80029e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	f003 0303 	and.w	r3, r3, #3
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	220f      	movs	r2, #15
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	43db      	mvns	r3, r3
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	4013      	ands	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a0a:	d027      	beq.n	8002a5c <HAL_GPIO_Init+0x380>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a0c      	ldr	r2, [pc, #48]	; (8002a40 <HAL_GPIO_Init+0x364>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d013      	beq.n	8002a3c <HAL_GPIO_Init+0x360>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a0b      	ldr	r2, [pc, #44]	; (8002a44 <HAL_GPIO_Init+0x368>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d00d      	beq.n	8002a38 <HAL_GPIO_Init+0x35c>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a0a      	ldr	r2, [pc, #40]	; (8002a48 <HAL_GPIO_Init+0x36c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d007      	beq.n	8002a34 <HAL_GPIO_Init+0x358>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a09      	ldr	r2, [pc, #36]	; (8002a4c <HAL_GPIO_Init+0x370>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d101      	bne.n	8002a30 <HAL_GPIO_Init+0x354>
 8002a2c:	2304      	movs	r3, #4
 8002a2e:	e016      	b.n	8002a5e <HAL_GPIO_Init+0x382>
 8002a30:	2307      	movs	r3, #7
 8002a32:	e014      	b.n	8002a5e <HAL_GPIO_Init+0x382>
 8002a34:	2303      	movs	r3, #3
 8002a36:	e012      	b.n	8002a5e <HAL_GPIO_Init+0x382>
 8002a38:	2302      	movs	r3, #2
 8002a3a:	e010      	b.n	8002a5e <HAL_GPIO_Init+0x382>
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e00e      	b.n	8002a5e <HAL_GPIO_Init+0x382>
 8002a40:	48000400 	.word	0x48000400
 8002a44:	48000800 	.word	0x48000800
 8002a48:	48000c00 	.word	0x48000c00
 8002a4c:	48001000 	.word	0x48001000
 8002a50:	48001c00 	.word	0x48001c00
 8002a54:	0800e21c 	.word	0x0800e21c
 8002a58:	40010000 	.word	0x40010000
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	f002 0203 	and.w	r2, r2, #3
 8002a64:	0092      	lsls	r2, r2, #2
 8002a66:	4093      	lsls	r3, r2
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a6e:	4937      	ldr	r1, [pc, #220]	; (8002b4c <HAL_GPIO_Init+0x470>)
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	089b      	lsrs	r3, r3, #2
 8002a74:	3302      	adds	r3, #2
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a7c:	4b34      	ldr	r3, [pc, #208]	; (8002b50 <HAL_GPIO_Init+0x474>)
 8002a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	43db      	mvns	r3, r3
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_GPIO_Init+0x3c6>
        {
          temp |= iocurrent;
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002aa2:	4a2b      	ldr	r2, [pc, #172]	; (8002b50 <HAL_GPIO_Init+0x474>)
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002aaa:	4b29      	ldr	r3, [pc, #164]	; (8002b50 <HAL_GPIO_Init+0x474>)
 8002aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_GPIO_Init+0x3f4>
        {
          temp |= iocurrent;
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ad0:	4a1f      	ldr	r2, [pc, #124]	; (8002b50 <HAL_GPIO_Init+0x474>)
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ad8:	4b1d      	ldr	r3, [pc, #116]	; (8002b50 <HAL_GPIO_Init+0x474>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_GPIO_Init+0x420>
        {
          temp |= iocurrent;
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002afc:	4a14      	ldr	r2, [pc, #80]	; (8002b50 <HAL_GPIO_Init+0x474>)
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002b02:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <HAL_GPIO_Init+0x474>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_GPIO_Init+0x44a>
        {
          temp |= iocurrent;
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b26:	4a0a      	ldr	r2, [pc, #40]	; (8002b50 <HAL_GPIO_Init+0x474>)
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	fa22 f303 	lsr.w	r3, r2, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f47f ae65 	bne.w	800280c <HAL_GPIO_Init+0x130>
  }
}
 8002b42:	bf00      	nop
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40010000 	.word	0x40010000
 8002b50:	58000800 	.word	0x58000800

08002b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	807b      	strh	r3, [r7, #2]
 8002b60:	4613      	mov	r3, r2
 8002b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002b64:	887b      	ldrh	r3, [r7, #2]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d004      	beq.n	8002b74 <HAL_GPIO_WritePin+0x20>
 8002b6a:	887b      	ldrh	r3, [r7, #2]
 8002b6c:	0c1b      	lsrs	r3, r3, #16
 8002b6e:	041b      	lsls	r3, r3, #16
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d004      	beq.n	8002b7e <HAL_GPIO_WritePin+0x2a>
 8002b74:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8002b78:	480d      	ldr	r0, [pc, #52]	; (8002bb0 <HAL_GPIO_WritePin+0x5c>)
 8002b7a:	f7fe fd9f 	bl	80016bc <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002b7e:	787b      	ldrb	r3, [r7, #1]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d007      	beq.n	8002b94 <HAL_GPIO_WritePin+0x40>
 8002b84:	787b      	ldrb	r3, [r7, #1]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d004      	beq.n	8002b94 <HAL_GPIO_WritePin+0x40>
 8002b8a:	f240 119b 	movw	r1, #411	; 0x19b
 8002b8e:	4808      	ldr	r0, [pc, #32]	; (8002bb0 <HAL_GPIO_WritePin+0x5c>)
 8002b90:	f7fe fd94 	bl	80016bc <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002b94:	787b      	ldrb	r3, [r7, #1]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b9a:	887a      	ldrh	r2, [r7, #2]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ba0:	e002      	b.n	8002ba8 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ba2:	887a      	ldrh	r2, [r7, #2]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ba8:	bf00      	nop
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	0800e21c 	.word	0x0800e21c

08002bb4 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002bc0:	887b      	ldrh	r3, [r7, #2]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d004      	beq.n	8002bd0 <HAL_GPIO_TogglePin+0x1c>
 8002bc6:	887b      	ldrh	r3, [r7, #2]
 8002bc8:	0c1b      	lsrs	r3, r3, #16
 8002bca:	041b      	lsls	r3, r3, #16
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d004      	beq.n	8002bda <HAL_GPIO_TogglePin+0x26>
 8002bd0:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8002bd4:	4809      	ldr	r0, [pc, #36]	; (8002bfc <HAL_GPIO_TogglePin+0x48>)
 8002bd6:	f7fe fd71 	bl	80016bc <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	695a      	ldr	r2, [r3, #20]
 8002bde:	887b      	ldrh	r3, [r7, #2]
 8002be0:	4013      	ands	r3, r2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_GPIO_TogglePin+0x3a>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002be6:	887a      	ldrh	r2, [r7, #2]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002bec:	e002      	b.n	8002bf4 <HAL_GPIO_TogglePin+0x40>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bee:	887a      	ldrh	r2, [r7, #2]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	619a      	str	r2, [r3, #24]
}
 8002bf4:	bf00      	nop
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	0800e21c 	.word	0x0800e21c

08002c00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c0a:	4b08      	ldr	r3, [pc, #32]	; (8002c2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	88fb      	ldrh	r3, [r7, #6]
 8002c10:	4013      	ands	r3, r2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d006      	beq.n	8002c24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c16:	4a05      	ldr	r2, [pc, #20]	; (8002c2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c18:	88fb      	ldrh	r3, [r7, #6]
 8002c1a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c1c:	88fb      	ldrh	r3, [r7, #6]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fe fd34 	bl	800168c <HAL_GPIO_EXTI_Callback>
  }
}
 8002c24:	bf00      	nop
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	58000800 	.word	0x58000800

08002c30 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c32:	b08b      	sub	sp, #44	; 0x2c
 8002c34:	af06      	add	r7, sp, #24
 8002c36:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e0b6      	b.n	8002db0 <HAL_PCD_Init+0x180>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a5c      	ldr	r2, [pc, #368]	; (8002db8 <HAL_PCD_Init+0x188>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d003      	beq.n	8002c54 <HAL_PCD_Init+0x24>
 8002c4c:	2183      	movs	r1, #131	; 0x83
 8002c4e:	485b      	ldr	r0, [pc, #364]	; (8002dbc <HAL_PCD_Init+0x18c>)
 8002c50:	f7fe fd34 	bl	80016bc <assert_failed>

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d106      	bne.n	8002c6e <HAL_PCD_Init+0x3e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f00a ff7b 	bl	800db64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2203      	movs	r2, #3
 8002c72:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f005 f8e8 	bl	8007e50 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c80:	2300      	movs	r3, #0
 8002c82:	73fb      	strb	r3, [r7, #15]
 8002c84:	e035      	b.n	8002cf2 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	015b      	lsls	r3, r3, #5
 8002c8c:	4413      	add	r3, r2
 8002c8e:	3329      	adds	r3, #41	; 0x29
 8002c90:	2201      	movs	r2, #1
 8002c92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	015b      	lsls	r3, r3, #5
 8002c9a:	4413      	add	r3, r2
 8002c9c:	3328      	adds	r3, #40	; 0x28
 8002c9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ca0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ca2:	7bfb      	ldrb	r3, [r7, #15]
 8002ca4:	7bfa      	ldrb	r2, [r7, #15]
 8002ca6:	b291      	uxth	r1, r2
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	015b      	lsls	r3, r3, #5
 8002cac:	4413      	add	r3, r2
 8002cae:	3336      	adds	r3, #54	; 0x36
 8002cb0:	460a      	mov	r2, r1
 8002cb2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	015b      	lsls	r3, r3, #5
 8002cba:	4413      	add	r3, r2
 8002cbc:	332b      	adds	r3, #43	; 0x2b
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cc2:	7bfb      	ldrb	r3, [r7, #15]
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	015b      	lsls	r3, r3, #5
 8002cc8:	4413      	add	r3, r2
 8002cca:	3338      	adds	r3, #56	; 0x38
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	015b      	lsls	r3, r3, #5
 8002cd6:	4413      	add	r3, r2
 8002cd8:	333c      	adds	r3, #60	; 0x3c
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	3302      	adds	r3, #2
 8002ce4:	015b      	lsls	r3, r3, #5
 8002ce6:	4413      	add	r3, r2
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	73fb      	strb	r3, [r7, #15]
 8002cf2:	7bfa      	ldrb	r2, [r7, #15]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d3c4      	bcc.n	8002c86 <HAL_PCD_Init+0x56>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	73fb      	strb	r3, [r7, #15]
 8002d00:	e031      	b.n	8002d66 <HAL_PCD_Init+0x136>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d02:	7bfb      	ldrb	r3, [r7, #15]
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	015b      	lsls	r3, r3, #5
 8002d08:	4413      	add	r3, r2
 8002d0a:	f203 1329 	addw	r3, r3, #297	; 0x129
 8002d0e:	2200      	movs	r2, #0
 8002d10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d12:	7bfb      	ldrb	r3, [r7, #15]
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	015b      	lsls	r3, r3, #5
 8002d18:	4413      	add	r3, r2
 8002d1a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002d1e:	7bfa      	ldrb	r2, [r7, #15]
 8002d20:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d22:	7bfb      	ldrb	r3, [r7, #15]
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	015b      	lsls	r3, r3, #5
 8002d28:	4413      	add	r3, r2
 8002d2a:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8002d2e:	2200      	movs	r2, #0
 8002d30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d32:	7bfb      	ldrb	r3, [r7, #15]
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	015b      	lsls	r3, r3, #5
 8002d38:	4413      	add	r3, r2
 8002d3a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	015b      	lsls	r3, r3, #5
 8002d48:	4413      	add	r3, r2
 8002d4a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	330a      	adds	r3, #10
 8002d58:	015b      	lsls	r3, r3, #5
 8002d5a:	4413      	add	r3, r2
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
 8002d62:	3301      	adds	r3, #1
 8002d64:	73fb      	strb	r3, [r7, #15]
 8002d66:	7bfa      	ldrb	r2, [r7, #15]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d3c8      	bcc.n	8002d02 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	603b      	str	r3, [r7, #0]
 8002d76:	687e      	ldr	r6, [r7, #4]
 8002d78:	466d      	mov	r5, sp
 8002d7a:	f106 0410 	add.w	r4, r6, #16
 8002d7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d82:	6823      	ldr	r3, [r4, #0]
 8002d84:	602b      	str	r3, [r5, #0]
 8002d86:	1d33      	adds	r3, r6, #4
 8002d88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d8a:	6838      	ldr	r0, [r7, #0]
 8002d8c:	f005 f87d 	bl	8007e8a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d102      	bne.n	8002dae <HAL_PCD_Init+0x17e>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 fe40 	bl	8003a2e <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3714      	adds	r7, #20
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002db8:	40006800 	.word	0x40006800
 8002dbc:	0800e258 	.word	0x0800e258

08002dc0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d101      	bne.n	8002dd6 <HAL_PCD_Start+0x16>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	e012      	b.n	8002dfc <HAL_PCD_Start+0x3c>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f006 f88c 	bl	8008f00 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f005 f817 	bl	8007e20 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f006 f88c 	bl	8008f2e <USB_ReadInterrupts>
 8002e16:	4603      	mov	r3, r0
 8002e18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e20:	d102      	bne.n	8002e28 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 fb3e 	bl	80034a4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f006 f87e 	bl	8008f2e <USB_ReadInterrupts>
 8002e32:	4603      	mov	r3, r0
 8002e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e3c:	d112      	bne.n	8002e64 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e50:	b292      	uxth	r2, r2
 8002e52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f00a ff0b 	bl	800dc72 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f929 	bl	80030b6 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f006 f860 	bl	8008f2e <USB_ReadInterrupts>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e78:	d10b      	bne.n	8002e92 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e8c:	b292      	uxth	r2, r2
 8002e8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f006 f849 	bl	8008f2e <USB_ReadInterrupts>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ea6:	d10b      	bne.n	8002ec0 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eba:	b292      	uxth	r2, r2
 8002ebc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f006 f832 	bl	8008f2e <USB_ReadInterrupts>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed4:	d133      	bne.n	8002f3e <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 0204 	bic.w	r2, r2, #4
 8002ee8:	b292      	uxth	r2, r2
 8002eea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 0208 	bic.w	r2, r2, #8
 8002f00:	b292      	uxth	r2, r2
 8002f02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d107      	bne.n	8002f20 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002f18:	2100      	movs	r1, #0
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f00b f89c 	bl	800e058 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f00a fedf 	bl	800dce4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f38:	b292      	uxth	r2, r2
 8002f3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f005 fff3 	bl	8008f2e <USB_ReadInterrupts>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f52:	d131      	bne.n	8002fb8 <HAL_PCD_IRQHandler+0x1b4>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0208 	orr.w	r2, r2, #8
 8002f66:	b292      	uxth	r2, r2
 8002f68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f7e:	b292      	uxth	r2, r2
 8002f80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0204 	orr.w	r2, r2, #4
 8002f96:	b292      	uxth	r2, r2
 8002f98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f005 ffc4 	bl	8008f2e <USB_ReadInterrupts>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb0:	d002      	beq.n	8002fb8 <HAL_PCD_IRQHandler+0x1b4>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f00a fe7c 	bl	800dcb0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f005 ffb6 	bl	8008f2e <USB_ReadInterrupts>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc8:	2b80      	cmp	r3, #128	; 0x80
 8002fca:	d13f      	bne.n	800304c <HAL_PCD_IRQHandler+0x248>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fde:	b292      	uxth	r2, r2
 8002fe0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d12b      	bne.n	8003046 <HAL_PCD_IRQHandler+0x242>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f042 0204 	orr.w	r2, r2, #4
 8003000:	b292      	uxth	r2, r2
 8003002:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800300e:	b29a      	uxth	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f042 0208 	orr.w	r2, r2, #8
 8003018:	b292      	uxth	r2, r2
 800301a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800302e:	b29b      	uxth	r3, r3
 8003030:	089b      	lsrs	r3, r3, #2
 8003032:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800303c:	2101      	movs	r1, #1
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f00b f80a 	bl	800e058 <HAL_PCDEx_LPM_Callback>
 8003044:	e002      	b.n	800304c <HAL_PCD_IRQHandler+0x248>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f00a fe32 	bl	800dcb0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4618      	mov	r0, r3
 8003052:	f005 ff6c 	bl	8008f2e <USB_ReadInterrupts>
 8003056:	4603      	mov	r3, r0
 8003058:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800305c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003060:	d10e      	bne.n	8003080 <HAL_PCD_IRQHandler+0x27c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800306a:	b29a      	uxth	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003074:	b292      	uxth	r2, r2
 8003076:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f00a fdeb 	bl	800dc56 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f005 ff52 	bl	8008f2e <USB_ReadInterrupts>
 800308a:	4603      	mov	r3, r0
 800308c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003094:	d10b      	bne.n	80030ae <HAL_PCD_IRQHandler+0x2aa>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800309e:	b29a      	uxth	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030a8:	b292      	uxth	r2, r2
 80030aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80030ae:	bf00      	nop
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b082      	sub	sp, #8
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
 80030be:	460b      	mov	r3, r1
 80030c0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d101      	bne.n	80030d0 <HAL_PCD_SetAddress+0x1a>
 80030cc:	2302      	movs	r3, #2
 80030ce:	e013      	b.n	80030f8 <HAL_PCD_SetAddress+0x42>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	78fa      	ldrb	r2, [r7, #3]
 80030dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	78fa      	ldrb	r2, [r7, #3]
 80030e6:	4611      	mov	r1, r2
 80030e8:	4618      	mov	r0, r3
 80030ea:	f005 fef5 	bl	8008ed8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	4608      	mov	r0, r1
 800310a:	4611      	mov	r1, r2
 800310c:	461a      	mov	r2, r3
 800310e:	4603      	mov	r3, r0
 8003110:	70fb      	strb	r3, [r7, #3]
 8003112:	460b      	mov	r3, r1
 8003114:	803b      	strh	r3, [r7, #0]
 8003116:	4613      	mov	r3, r2
 8003118:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800311a:	2300      	movs	r3, #0
 800311c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800311e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003122:	2b00      	cmp	r3, #0
 8003124:	da0b      	bge.n	800313e <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003126:	78fb      	ldrb	r3, [r7, #3]
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	015b      	lsls	r3, r3, #5
 800312e:	3328      	adds	r3, #40	; 0x28
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	4413      	add	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2201      	movs	r2, #1
 800313a:	705a      	strb	r2, [r3, #1]
 800313c:	e00b      	b.n	8003156 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800313e:	78fb      	ldrb	r3, [r7, #3]
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	015b      	lsls	r3, r3, #5
 8003146:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	4413      	add	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003156:	78fb      	ldrb	r3, [r7, #3]
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	b2da      	uxtb	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003162:	883a      	ldrh	r2, [r7, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	78ba      	ldrb	r2, [r7, #2]
 800316c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	785b      	ldrb	r3, [r3, #1]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d004      	beq.n	8003180 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	b29a      	uxth	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003180:	78bb      	ldrb	r3, [r7, #2]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d102      	bne.n	800318c <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <HAL_PCD_EP_Open+0x9a>
 8003196:	2302      	movs	r3, #2
 8003198:	e00e      	b.n	80031b8 <HAL_PCD_EP_Open+0xb8>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68f9      	ldr	r1, [r7, #12]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f004 fe93 	bl	8007ed4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80031b6:	7afb      	ldrb	r3, [r7, #11]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	da0b      	bge.n	80031ec <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	f003 0307 	and.w	r3, r3, #7
 80031da:	015b      	lsls	r3, r3, #5
 80031dc:	3328      	adds	r3, #40	; 0x28
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	4413      	add	r3, r2
 80031e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2201      	movs	r2, #1
 80031e8:	705a      	strb	r2, [r3, #1]
 80031ea:	e00b      	b.n	8003204 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031ec:	78fb      	ldrb	r3, [r7, #3]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	015b      	lsls	r3, r3, #5
 80031f4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	4413      	add	r3, r2
 80031fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003204:	78fb      	ldrb	r3, [r7, #3]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	b2da      	uxtb	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003216:	2b01      	cmp	r3, #1
 8003218:	d101      	bne.n	800321e <HAL_PCD_EP_Close+0x5e>
 800321a:	2302      	movs	r3, #2
 800321c:	e00e      	b.n	800323c <HAL_PCD_EP_Close+0x7c>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68f9      	ldr	r1, [r7, #12]
 800322c:	4618      	mov	r0, r3
 800322e:	f005 f93b 	bl	80084a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	607a      	str	r2, [r7, #4]
 800324e:	603b      	str	r3, [r7, #0]
 8003250:	460b      	mov	r3, r1
 8003252:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003254:	7afb      	ldrb	r3, [r7, #11]
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	015b      	lsls	r3, r3, #5
 800325c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	4413      	add	r3, r2
 8003264:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2200      	movs	r2, #0
 8003276:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	2200      	movs	r2, #0
 800327c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800327e:	7afb      	ldrb	r3, [r7, #11]
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	b2da      	uxtb	r2, r3
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800328a:	7afb      	ldrb	r3, [r7, #11]
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	2b00      	cmp	r3, #0
 8003292:	d106      	bne.n	80032a2 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6979      	ldr	r1, [r7, #20]
 800329a:	4618      	mov	r0, r3
 800329c:	f005 fa9a 	bl	80087d4 <USB_EPStartXfer>
 80032a0:	e005      	b.n	80032ae <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6979      	ldr	r1, [r7, #20]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f005 fa93 	bl	80087d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3718      	adds	r7, #24
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	460b      	mov	r3, r1
 80032c2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80032c4:	78fb      	ldrb	r3, [r7, #3]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	330a      	adds	r3, #10
 80032ce:	015b      	lsls	r3, r3, #5
 80032d0:	4413      	add	r3, r2
 80032d2:	3304      	adds	r3, #4
 80032d4:	681b      	ldr	r3, [r3, #0]
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b086      	sub	sp, #24
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	60f8      	str	r0, [r7, #12]
 80032ea:	607a      	str	r2, [r7, #4]
 80032ec:	603b      	str	r3, [r7, #0]
 80032ee:	460b      	mov	r3, r1
 80032f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032f2:	7afb      	ldrb	r3, [r7, #11]
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	015b      	lsls	r3, r3, #5
 80032fa:	3328      	adds	r3, #40	; 0x28
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	4413      	add	r3, r2
 8003300:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	2200      	movs	r2, #0
 8003312:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	2201      	movs	r2, #1
 8003318:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800331a:	7afb      	ldrb	r3, [r7, #11]
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	b2da      	uxtb	r2, r3
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003326:	7afb      	ldrb	r3, [r7, #11]
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	2b00      	cmp	r3, #0
 800332e:	d106      	bne.n	800333e <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6979      	ldr	r1, [r7, #20]
 8003336:	4618      	mov	r0, r3
 8003338:	f005 fa4c 	bl	80087d4 <USB_EPStartXfer>
 800333c:	e005      	b.n	800334a <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6979      	ldr	r1, [r7, #20]
 8003344:	4618      	mov	r0, r3
 8003346:	f005 fa45 	bl	80087d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	460b      	mov	r3, r1
 800335e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003360:	78fb      	ldrb	r3, [r7, #3]
 8003362:	f003 0207 	and.w	r2, r3, #7
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	429a      	cmp	r2, r3
 800336c:	d901      	bls.n	8003372 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e046      	b.n	8003400 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003372:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003376:	2b00      	cmp	r3, #0
 8003378:	da0b      	bge.n	8003392 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800337a:	78fb      	ldrb	r3, [r7, #3]
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	015b      	lsls	r3, r3, #5
 8003382:	3328      	adds	r3, #40	; 0x28
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	4413      	add	r3, r2
 8003388:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2201      	movs	r2, #1
 800338e:	705a      	strb	r2, [r3, #1]
 8003390:	e009      	b.n	80033a6 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003392:	78fb      	ldrb	r3, [r7, #3]
 8003394:	015b      	lsls	r3, r3, #5
 8003396:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	4413      	add	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2201      	movs	r2, #1
 80033aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033ac:	78fb      	ldrb	r3, [r7, #3]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d101      	bne.n	80033c6 <HAL_PCD_EP_SetStall+0x72>
 80033c2:	2302      	movs	r3, #2
 80033c4:	e01c      	b.n	8003400 <HAL_PCD_EP_SetStall+0xac>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68f9      	ldr	r1, [r7, #12]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f005 fca9 	bl	8008d2c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033da:	78fb      	ldrb	r3, [r7, #3]
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d108      	bne.n	80033f6 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80033ee:	4619      	mov	r1, r3
 80033f0:	4610      	mov	r0, r2
 80033f2:	f005 fdac 	bl	8008f4e <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003414:	78fb      	ldrb	r3, [r7, #3]
 8003416:	f003 020f 	and.w	r2, r3, #15
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	429a      	cmp	r2, r3
 8003420:	d901      	bls.n	8003426 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e03a      	b.n	800349c <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003426:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800342a:	2b00      	cmp	r3, #0
 800342c:	da0b      	bge.n	8003446 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800342e:	78fb      	ldrb	r3, [r7, #3]
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	015b      	lsls	r3, r3, #5
 8003436:	3328      	adds	r3, #40	; 0x28
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	4413      	add	r3, r2
 800343c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2201      	movs	r2, #1
 8003442:	705a      	strb	r2, [r3, #1]
 8003444:	e00b      	b.n	800345e <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003446:	78fb      	ldrb	r3, [r7, #3]
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	015b      	lsls	r3, r3, #5
 800344e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	4413      	add	r3, r2
 8003456:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003464:	78fb      	ldrb	r3, [r7, #3]
 8003466:	f003 0307 	and.w	r3, r3, #7
 800346a:	b2da      	uxtb	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003476:	2b01      	cmp	r3, #1
 8003478:	d101      	bne.n	800347e <HAL_PCD_EP_ClrStall+0x76>
 800347a:	2302      	movs	r3, #2
 800347c:	e00e      	b.n	800349c <HAL_PCD_EP_ClrStall+0x94>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68f9      	ldr	r1, [r7, #12]
 800348c:	4618      	mov	r0, r3
 800348e:	f005 fc8f 	bl	8008db0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80034a4:	b590      	push	{r4, r7, lr}
 80034a6:	b089      	sub	sp, #36	; 0x24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80034ac:	e26f      	b.n	800398e <PCD_EP_ISR_Handler+0x4ea>
  {
    wIstr = hpcd->Instance->ISTR;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034b6:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80034b8:	8afb      	ldrh	r3, [r7, #22]
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	f003 030f 	and.w	r3, r3, #15
 80034c0:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 80034c2:	7d7b      	ldrb	r3, [r7, #21]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f040 8137 	bne.w	8003738 <PCD_EP_ISR_Handler+0x294>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80034ca:	8afb      	ldrh	r3, [r7, #22]
 80034cc:	f003 0310 	and.w	r3, r3, #16
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d14f      	bne.n	8003574 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	b29b      	uxth	r3, r3
 80034dc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80034e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e4:	b29c      	uxth	r4, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80034ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	3328      	adds	r3, #40	; 0x28
 80034fa:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003504:	b29b      	uxth	r3, r3
 8003506:	461a      	mov	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	4413      	add	r3, r2
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6812      	ldr	r2, [r2, #0]
 8003514:	4413      	add	r3, r2
 8003516:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	695a      	ldr	r2, [r3, #20]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	441a      	add	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003532:	2100      	movs	r1, #0
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f00a fb77 	bl	800dc28 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 8223 	beq.w	800398e <PCD_EP_ISR_Handler+0x4ea>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	2b00      	cmp	r3, #0
 800354e:	f040 821e 	bne.w	800398e <PCD_EP_ISR_Handler+0x4ea>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003558:	b2db      	uxtb	r3, r3
 800355a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800355e:	b2da      	uxtb	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	b292      	uxth	r2, r2
 8003566:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003572:	e20c      	b.n	800398e <PCD_EP_ISR_Handler+0x4ea>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800357a:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003584:	8a7b      	ldrh	r3, [r7, #18]
 8003586:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800358a:	2b00      	cmp	r3, #0
 800358c:	d031      	beq.n	80035f2 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003596:	b29b      	uxth	r3, r3
 8003598:	461a      	mov	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	4413      	add	r3, r2
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	6812      	ldr	r2, [r2, #0]
 80035a6:	4413      	add	r3, r2
 80035a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80035ac:	881b      	ldrh	r3, [r3, #0]
 80035ae:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6818      	ldr	r0, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f503 710c 	add.w	r1, r3, #560	; 0x230
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	f005 fd0d 	bl	8008fe8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	881b      	ldrh	r3, [r3, #0]
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80035da:	4013      	ands	r3, r2
 80035dc:	b29c      	uxth	r4, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80035e6:	b292      	uxth	r2, r2
 80035e8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f00a faf2 	bl	800dbd4 <HAL_PCD_SetupStageCallback>
 80035f0:	e1cd      	b.n	800398e <PCD_EP_ISR_Handler+0x4ea>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80035f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f280 81c9 	bge.w	800398e <PCD_EP_ISR_Handler+0x4ea>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	881b      	ldrh	r3, [r3, #0]
 8003602:	b29a      	uxth	r2, r3
 8003604:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003608:	4013      	ands	r3, r2
 800360a:	b29c      	uxth	r4, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003614:	b292      	uxth	r2, r2
 8003616:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003620:	b29b      	uxth	r3, r3
 8003622:	461a      	mov	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	4413      	add	r3, r2
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	6812      	ldr	r2, [r2, #0]
 8003630:	4413      	add	r3, r2
 8003632:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003636:	881b      	ldrh	r3, [r3, #0]
 8003638:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d019      	beq.n	800367c <PCD_EP_ISR_Handler+0x1d8>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d015      	beq.n	800367c <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6818      	ldr	r0, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6959      	ldr	r1, [r3, #20]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003660:	b29b      	uxth	r3, r3
 8003662:	f005 fcc1 	bl	8008fe8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	695a      	ldr	r2, [r3, #20]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	441a      	add	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003674:	2100      	movs	r1, #0
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f00a fabe 	bl	800dbf8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	461c      	mov	r4, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800368a:	b29b      	uxth	r3, r3
 800368c:	441c      	add	r4, r3
 800368e:	f204 4306 	addw	r3, r4, #1030	; 0x406
 8003692:	60bb      	str	r3, [r7, #8]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d110      	bne.n	80036be <PCD_EP_ISR_Handler+0x21a>
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	881b      	ldrh	r3, [r3, #0]
 80036a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	801a      	strh	r2, [r3, #0]
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	881b      	ldrh	r3, [r3, #0]
 80036ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	801a      	strh	r2, [r3, #0]
 80036bc:	e026      	b.n	800370c <PCD_EP_ISR_Handler+0x268>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	2b3d      	cmp	r3, #61	; 0x3d
 80036c4:	d813      	bhi.n	80036ee <PCD_EP_ISR_Handler+0x24a>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	085b      	lsrs	r3, r3, #1
 80036cc:	61bb      	str	r3, [r7, #24]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d002      	beq.n	80036e0 <PCD_EP_ISR_Handler+0x23c>
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	3301      	adds	r3, #1
 80036de:	61bb      	str	r3, [r7, #24]
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	029b      	lsls	r3, r3, #10
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	801a      	strh	r2, [r3, #0]
 80036ec:	e00e      	b.n	800370c <PCD_EP_ISR_Handler+0x268>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	095b      	lsrs	r3, r3, #5
 80036f4:	61bb      	str	r3, [r7, #24]
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	029b      	lsls	r3, r3, #10
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003702:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003706:	b29a      	uxth	r2, r3
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	881b      	ldrh	r3, [r3, #0]
 8003712:	b29b      	uxth	r3, r3
 8003714:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800371c:	b29c      	uxth	r4, r3
 800371e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003722:	b29c      	uxth	r4, r3
 8003724:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003728:	b29c      	uxth	r4, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	4b9f      	ldr	r3, [pc, #636]	; (80039ac <PCD_EP_ISR_Handler+0x508>)
 8003730:	4323      	orrs	r3, r4
 8003732:	b29b      	uxth	r3, r3
 8003734:	8013      	strh	r3, [r2, #0]
 8003736:	e12a      	b.n	800398e <PCD_EP_ISR_Handler+0x4ea>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	461a      	mov	r2, r3
 800373e:	7d7b      	ldrb	r3, [r7, #21]
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003748:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800374c:	2b00      	cmp	r3, #0
 800374e:	f280 80cb 	bge.w	80038e8 <PCD_EP_ISR_Handler+0x444>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	461a      	mov	r2, r3
 8003758:	7d7b      	ldrb	r3, [r7, #21]
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4413      	add	r3, r2
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	b29a      	uxth	r2, r3
 8003762:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003766:	4013      	ands	r3, r2
 8003768:	b29c      	uxth	r4, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	461a      	mov	r2, r3
 8003770:	7d7b      	ldrb	r3, [r7, #21]
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800377a:	b292      	uxth	r2, r2
 800377c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800377e:	7d7b      	ldrb	r3, [r7, #21]
 8003780:	015b      	lsls	r3, r3, #5
 8003782:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	4413      	add	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	7b1b      	ldrb	r3, [r3, #12]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d11f      	bne.n	80037d4 <PCD_EP_ISR_Handler+0x330>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800379c:	b29b      	uxth	r3, r3
 800379e:	461a      	mov	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	4413      	add	r3, r2
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6812      	ldr	r2, [r2, #0]
 80037ac:	4413      	add	r3, r2
 80037ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80037b2:	881b      	ldrh	r3, [r3, #0]
 80037b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037b8:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80037ba:	8bfb      	ldrh	r3, [r7, #30]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d06e      	beq.n	800389e <PCD_EP_ISR_Handler+0x3fa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6818      	ldr	r0, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6959      	ldr	r1, [r3, #20]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	88da      	ldrh	r2, [r3, #6]
 80037cc:	8bfb      	ldrh	r3, [r7, #30]
 80037ce:	f005 fc0b 	bl	8008fe8 <USB_ReadPMA>
 80037d2:	e064      	b.n	800389e <PCD_EP_ISR_Handler+0x3fa>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	461a      	mov	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	881b      	ldrh	r3, [r3, #0]
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d01f      	beq.n	800382e <PCD_EP_ISR_Handler+0x38a>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	461a      	mov	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	4413      	add	r3, r2
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6812      	ldr	r2, [r2, #0]
 8003806:	4413      	add	r3, r2
 8003808:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800380c:	881b      	ldrh	r3, [r3, #0]
 800380e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003812:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003814:	8bfb      	ldrh	r3, [r7, #30]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d028      	beq.n	800386c <PCD_EP_ISR_Handler+0x3c8>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6818      	ldr	r0, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6959      	ldr	r1, [r3, #20]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	891a      	ldrh	r2, [r3, #8]
 8003826:	8bfb      	ldrh	r3, [r7, #30]
 8003828:	f005 fbde 	bl	8008fe8 <USB_ReadPMA>
 800382c:	e01e      	b.n	800386c <PCD_EP_ISR_Handler+0x3c8>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003836:	b29b      	uxth	r3, r3
 8003838:	461a      	mov	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	4413      	add	r3, r2
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6812      	ldr	r2, [r2, #0]
 8003846:	4413      	add	r3, r2
 8003848:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800384c:	881b      	ldrh	r3, [r3, #0]
 800384e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003852:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003854:	8bfb      	ldrh	r3, [r7, #30]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d008      	beq.n	800386c <PCD_EP_ISR_Handler+0x3c8>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6818      	ldr	r0, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6959      	ldr	r1, [r3, #20]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	895a      	ldrh	r2, [r3, #10]
 8003866:	8bfb      	ldrh	r3, [r7, #30]
 8003868:	f005 fbbe 	bl	8008fe8 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	461a      	mov	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	881b      	ldrh	r3, [r3, #0]
 800387c:	b29b      	uxth	r3, r3
 800387e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003886:	b29c      	uxth	r4, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	461a      	mov	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	441a      	add	r2, r3
 8003896:	4b46      	ldr	r3, [pc, #280]	; (80039b0 <PCD_EP_ISR_Handler+0x50c>)
 8003898:	4323      	orrs	r3, r4
 800389a:	b29b      	uxth	r3, r3
 800389c:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	69da      	ldr	r2, [r3, #28]
 80038a2:	8bfb      	ldrh	r3, [r7, #30]
 80038a4:	441a      	add	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	695a      	ldr	r2, [r3, #20]
 80038ae:	8bfb      	ldrh	r3, [r7, #30]
 80038b0:	441a      	add	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d004      	beq.n	80038c8 <PCD_EP_ISR_Handler+0x424>
 80038be:	8bfa      	ldrh	r2, [r7, #30]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d206      	bcs.n	80038d6 <PCD_EP_ISR_Handler+0x432>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	4619      	mov	r1, r3
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f00a f992 	bl	800dbf8 <HAL_PCD_DataOutStageCallback>
 80038d4:	e008      	b.n	80038e8 <PCD_EP_ISR_Handler+0x444>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	7819      	ldrb	r1, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	695a      	ldr	r2, [r3, #20]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7ff fcae 	bl	8003244 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80038e8:	8a7b      	ldrh	r3, [r7, #18]
 80038ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d04d      	beq.n	800398e <PCD_EP_ISR_Handler+0x4ea>
      {
        ep = &hpcd->IN_ep[epindex];
 80038f2:	7d7b      	ldrb	r3, [r7, #21]
 80038f4:	015b      	lsls	r3, r3, #5
 80038f6:	3328      	adds	r3, #40	; 0x28
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	4413      	add	r3, r2
 80038fc:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	461a      	mov	r2, r3
 8003904:	7d7b      	ldrb	r3, [r7, #21]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	881b      	ldrh	r3, [r3, #0]
 800390c:	b29b      	uxth	r3, r3
 800390e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003916:	b29c      	uxth	r4, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	461a      	mov	r2, r3
 800391e:	7d7b      	ldrb	r3, [r7, #21]
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	441a      	add	r2, r3
 8003924:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8003928:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800392c:	b29b      	uxth	r3, r3
 800392e:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003938:	b29b      	uxth	r3, r3
 800393a:	461a      	mov	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	4413      	add	r3, r2
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6812      	ldr	r2, [r2, #0]
 8003948:	4413      	add	r3, r2
 800394a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800394e:	881b      	ldrh	r3, [r3, #0]
 8003950:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	695a      	ldr	r2, [r3, #20]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	441a      	add	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d106      	bne.n	800397c <PCD_EP_ISR_Handler+0x4d8>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	4619      	mov	r1, r3
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f00a f957 	bl	800dc28 <HAL_PCD_DataInStageCallback>
 800397a:	e008      	b.n	800398e <PCD_EP_ISR_Handler+0x4ea>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	7819      	ldrb	r1, [r3, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	695a      	ldr	r2, [r3, #20]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7ff fcaa 	bl	80032e2 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003996:	b29b      	uxth	r3, r3
 8003998:	b21b      	sxth	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	f6ff ad87 	blt.w	80034ae <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3724      	adds	r7, #36	; 0x24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd90      	pop	{r4, r7, pc}
 80039aa:	bf00      	nop
 80039ac:	ffff8080 	.word	0xffff8080
 80039b0:	ffff80c0 	.word	0xffff80c0

080039b4 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	607b      	str	r3, [r7, #4]
 80039be:	460b      	mov	r3, r1
 80039c0:	817b      	strh	r3, [r7, #10]
 80039c2:	4613      	mov	r3, r2
 80039c4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80039c6:	897b      	ldrh	r3, [r7, #10]
 80039c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d008      	beq.n	80039e4 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039d2:	897b      	ldrh	r3, [r7, #10]
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	015b      	lsls	r3, r3, #5
 80039da:	3328      	adds	r3, #40	; 0x28
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	4413      	add	r3, r2
 80039e0:	617b      	str	r3, [r7, #20]
 80039e2:	e006      	b.n	80039f2 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80039e4:	897b      	ldrh	r3, [r7, #10]
 80039e6:	015b      	lsls	r3, r3, #5
 80039e8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	4413      	add	r3, r2
 80039f0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80039f2:	893b      	ldrh	r3, [r7, #8]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d107      	bne.n	8003a08 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	2200      	movs	r2, #0
 80039fc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	80da      	strh	r2, [r3, #6]
 8003a06:	e00b      	b.n	8003a20 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	0c1b      	lsrs	r3, r3, #16
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	371c      	adds	r7, #28
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b085      	sub	sp, #20
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	f043 0301 	orr.w	r3, r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	f043 0302 	orr.w	r3, r3, #2
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3714      	adds	r7, #20
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
	...

08003a84 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a88:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a04      	ldr	r2, [pc, #16]	; (8003aa0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a92:	6013      	str	r3, [r2, #0]
}
 8003a94:	bf00      	nop
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	58000400 	.word	0x58000400

08003aa4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003aa8:	4b04      	ldr	r3, [pc, #16]	; (8003abc <HAL_PWREx_GetVoltageRange+0x18>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	58000400 	.word	0x58000400

08003ac0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003ac4:	4b05      	ldr	r3, [pc, #20]	; (8003adc <HAL_PWREx_EnableVddUSB+0x1c>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	4a04      	ldr	r2, [pc, #16]	; (8003adc <HAL_PWREx_EnableVddUSB+0x1c>)
 8003aca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ace:	6053      	str	r3, [r2, #4]
}
 8003ad0:	bf00      	nop
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	58000400 	.word	0x58000400

08003ae0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003af2:	d101      	bne.n	8003af8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003af4:	2301      	movs	r3, #1
 8003af6:	e000      	b.n	8003afa <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <LL_RCC_HSE_EnableBypass>:
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8003b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b16:	6013      	str	r3, [r2, #0]
}
 8003b18:	bf00      	nop
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <LL_RCC_HSE_DisableBypass>:
{
 8003b22:	b480      	push	{r7}
 8003b24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8003b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b34:	6013      	str	r3, [r2, #0]
}
 8003b36:	bf00      	nop
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <LL_RCC_HSE_Enable>:
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b52:	6013      	str	r3, [r2, #0]
}
 8003b54:	bf00      	nop
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <LL_RCC_HSE_Disable>:
{
 8003b5e:	b480      	push	{r7}
 8003b60:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b70:	6013      	str	r3, [r2, #0]
}
 8003b72:	bf00      	nop
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <LL_RCC_HSE_IsReady>:
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b8e:	d101      	bne.n	8003b94 <LL_RCC_HSE_IsReady+0x18>
 8003b90:	2301      	movs	r3, #1
 8003b92:	e000      	b.n	8003b96 <LL_RCC_HSE_IsReady+0x1a>
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <LL_RCC_HSI_Enable>:
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bb2:	6013      	str	r3, [r2, #0]
}
 8003bb4:	bf00      	nop
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <LL_RCC_HSI_Disable>:
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bd0:	6013      	str	r3, [r2, #0]
}
 8003bd2:	bf00      	nop
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <LL_RCC_HSI_IsReady>:
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bee:	d101      	bne.n	8003bf4 <LL_RCC_HSI_IsReady+0x18>
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e000      	b.n	8003bf6 <LL_RCC_HSI_IsReady+0x1a>
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	061b      	lsls	r3, r3, #24
 8003c16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	604b      	str	r3, [r1, #4]
}
 8003c1e:	bf00      	nop
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <LL_RCC_HSI48_Enable>:
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c3a:	f043 0301 	orr.w	r3, r3, #1
 8003c3e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003c42:	bf00      	nop
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <LL_RCC_HSI48_Disable>:
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c5c:	f023 0301 	bic.w	r3, r3, #1
 8003c60:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003c64:	bf00      	nop
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <LL_RCC_HSI48_IsReady>:
{
 8003c6e:	b480      	push	{r7}
 8003c70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d101      	bne.n	8003c86 <LL_RCC_HSI48_IsReady+0x18>
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <LL_RCC_HSI48_IsReady+0x1a>
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <LL_RCC_LSE_Enable>:
{
 8003c92:	b480      	push	{r7}
 8003c94:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ca2:	f043 0301 	orr.w	r3, r3, #1
 8003ca6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003caa:	bf00      	nop
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <LL_RCC_LSE_Disable>:
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cc4:	f023 0301 	bic.w	r3, r3, #1
 8003cc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003ccc:	bf00      	nop
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <LL_RCC_LSE_EnableBypass>:
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ce6:	f043 0304 	orr.w	r3, r3, #4
 8003cea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003cee:	bf00      	nop
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <LL_RCC_LSE_DisableBypass>:
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d08:	f023 0304 	bic.w	r3, r3, #4
 8003d0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003d10:	bf00      	nop
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <LL_RCC_LSE_IsReady>:
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d101      	bne.n	8003d32 <LL_RCC_LSE_IsReady+0x18>
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e000      	b.n	8003d34 <LL_RCC_LSE_IsReady+0x1a>
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <LL_RCC_LSI1_Enable>:
{
 8003d3e:	b480      	push	{r7}
 8003d40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d4e:	f043 0301 	orr.w	r3, r3, #1
 8003d52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003d56:	bf00      	nop
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <LL_RCC_LSI1_Disable>:
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d70:	f023 0301 	bic.w	r3, r3, #1
 8003d74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003d78:	bf00      	nop
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <LL_RCC_LSI1_IsReady>:
{
 8003d82:	b480      	push	{r7}
 8003d84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d101      	bne.n	8003d9a <LL_RCC_LSI1_IsReady+0x18>
 8003d96:	2301      	movs	r3, #1
 8003d98:	e000      	b.n	8003d9c <LL_RCC_LSI1_IsReady+0x1a>
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <LL_RCC_LSI2_Enable>:
{
 8003da6:	b480      	push	{r7}
 8003da8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003db2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003db6:	f043 0304 	orr.w	r3, r3, #4
 8003dba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003dbe:	bf00      	nop
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <LL_RCC_LSI2_Disable>:
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dd8:	f023 0304 	bic.w	r3, r3, #4
 8003ddc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003de0:	bf00      	nop
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <LL_RCC_LSI2_IsReady>:
{
 8003dea:	b480      	push	{r7}
 8003dec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003df6:	f003 0308 	and.w	r3, r3, #8
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	d101      	bne.n	8003e02 <LL_RCC_LSI2_IsReady+0x18>
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e000      	b.n	8003e04 <LL_RCC_LSI2_IsReady+0x1a>
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <LL_RCC_LSI2_SetTrimming>:
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003e16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e1e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	021b      	lsls	r3, r3, #8
 8003e26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <LL_RCC_MSI_Enable>:
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e4a:	f043 0301 	orr.w	r3, r3, #1
 8003e4e:	6013      	str	r3, [r2, #0]
}
 8003e50:	bf00      	nop
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <LL_RCC_MSI_Disable>:
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e68:	f023 0301 	bic.w	r3, r3, #1
 8003e6c:	6013      	str	r3, [r2, #0]
}
 8003e6e:	bf00      	nop
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <LL_RCC_MSI_IsReady>:
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d101      	bne.n	8003e8e <LL_RCC_MSI_IsReady+0x16>
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e000      	b.n	8003e90 <LL_RCC_MSI_IsReady+0x18>
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <LL_RCC_MSI_SetRange>:
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	600b      	str	r3, [r1, #0]
}
 8003eb6:	bf00      	nop
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <LL_RCC_MSI_GetRange>:
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ed2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2bb0      	cmp	r3, #176	; 0xb0
 8003ed8:	d901      	bls.n	8003ede <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003eda:	23b0      	movs	r3, #176	; 0xb0
 8003edc:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003ede:	687b      	ldr	r3, [r7, #4]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <LL_RCC_MSI_SetCalibTrimming>:
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	021b      	lsls	r3, r3, #8
 8003f02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f06:	4313      	orrs	r3, r2
 8003f08:	604b      	str	r3, [r1, #4]
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <LL_RCC_SetSysClkSource>:
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f023 0203 	bic.w	r2, r3, #3
 8003f28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	608b      	str	r3, [r1, #8]
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <LL_RCC_GetSysClkSource>:
{
 8003f3e:	b480      	push	{r7}
 8003f40:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 030c 	and.w	r3, r3, #12
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <LL_RCC_SetAHBPrescaler>:
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	608b      	str	r3, [r1, #8]
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <LL_C2_RCC_SetAHBPrescaler>:
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f8a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003f8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003f9e:	bf00      	nop
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <LL_RCC_SetAHB4Prescaler>:
{
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fb6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003fba:	f023 020f 	bic.w	r2, r3, #15
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	091b      	lsrs	r3, r3, #4
 8003fc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <LL_RCC_SetAPB1Prescaler>:
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	608b      	str	r3, [r1, #8]
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <LL_RCC_SetAPB2Prescaler>:
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004012:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4313      	orrs	r3, r2
 800401a:	608b      	str	r3, [r1, #8]
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <LL_RCC_GetAHBPrescaler>:
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800402c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004036:	4618      	mov	r0, r3
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <LL_RCC_GetAHB4Prescaler>:
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004048:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800404c:	011b      	lsls	r3, r3, #4
 800404e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004052:	4618      	mov	r0, r3
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <LL_RCC_GetAPB1Prescaler>:
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800406a:	4618      	mov	r0, r3
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <LL_RCC_GetAPB2Prescaler>:
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004082:	4618      	mov	r0, r3
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800409a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800409e:	6013      	str	r3, [r2, #0]
}
 80040a0:	bf00      	nop
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80040aa:	b480      	push	{r7}
 80040ac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80040ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040bc:	6013      	str	r3, [r2, #0]
}
 80040be:	bf00      	nop
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80040cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040da:	d101      	bne.n	80040e0 <LL_RCC_PLL_IsReady+0x18>
 80040dc:	2301      	movs	r3, #1
 80040de:	e000      	b.n	80040e2 <LL_RCC_PLL_IsReady+0x1a>
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80040f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	0a1b      	lsrs	r3, r3, #8
 80040f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004106:	b480      	push	{r7}
 8004108:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800410a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004114:	4618      	mov	r0, r3
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800411e:	b480      	push	{r7}
 8004120:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800412c:	4618      	mov	r0, r3
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004136:	b480      	push	{r7}
 8004138:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800413a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	f003 0303 	and.w	r3, r3, #3
}
 8004144:	4618      	mov	r0, r3
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr

0800414e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800414e:	b480      	push	{r7}
 8004150:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004152:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800415c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004160:	d101      	bne.n	8004166 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004162:	2301      	movs	r3, #1
 8004164:	e000      	b.n	8004168 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr

08004172 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004172:	b480      	push	{r7}
 8004174:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800417a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800417e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004182:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004186:	d101      	bne.n	800418c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004188:	2301      	movs	r3, #1
 800418a:	e000      	b.n	800418e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800419c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80041a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ac:	d101      	bne.n	80041b2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80041ae:	2301      	movs	r3, #1
 80041b0:	e000      	b.n	80041b4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80041be:	b480      	push	{r7}
 80041c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80041c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041d0:	d101      	bne.n	80041d6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80041d2:	2301      	movs	r3, #1
 80041d4:	e000      	b.n	80041d8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80041e2:	b480      	push	{r7}
 80041e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80041e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041f4:	d101      	bne.n	80041fa <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80041f6:	2301      	movs	r3, #1
 80041f8:	e000      	b.n	80041fc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
	...

08004208 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004208:	b590      	push	{r4, r7, lr}
 800420a:	b08b      	sub	sp, #44	; 0x2c
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d102      	bne.n	800421c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	f000 bcbc 	b.w	8004b94 <HAL_RCC_OscConfig+0x98c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d02e      	beq.n	8004282 <HAL_RCC_OscConfig+0x7a>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	2b00      	cmp	r3, #0
 800422e:	d128      	bne.n	8004282 <HAL_RCC_OscConfig+0x7a>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d122      	bne.n	8004282 <HAL_RCC_OscConfig+0x7a>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004244:	2b00      	cmp	r3, #0
 8004246:	d11c      	bne.n	8004282 <HAL_RCC_OscConfig+0x7a>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0320 	and.w	r3, r3, #32
 8004250:	2b00      	cmp	r3, #0
 8004252:	d116      	bne.n	8004282 <HAL_RCC_OscConfig+0x7a>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0308 	and.w	r3, r3, #8
 800425c:	2b00      	cmp	r3, #0
 800425e:	d110      	bne.n	8004282 <HAL_RCC_OscConfig+0x7a>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0310 	and.w	r3, r3, #16
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10a      	bne.n	8004282 <HAL_RCC_OscConfig+0x7a>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b00      	cmp	r3, #0
 8004276:	d104      	bne.n	8004282 <HAL_RCC_OscConfig+0x7a>
 8004278:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 800427c:	48ac      	ldr	r0, [pc, #688]	; (8004530 <HAL_RCC_OscConfig+0x328>)
 800427e:	f7fd fa1d 	bl	80016bc <assert_failed>

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0320 	and.w	r3, r3, #32
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 80dc 	beq.w	8004448 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d008      	beq.n	80042aa <HAL_RCC_OscConfig+0xa2>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	69db      	ldr	r3, [r3, #28]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d004      	beq.n	80042aa <HAL_RCC_OscConfig+0xa2>
 80042a0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80042a4:	48a2      	ldr	r0, [pc, #648]	; (8004530 <HAL_RCC_OscConfig+0x328>)
 80042a6:	f7fd fa09 	bl	80016bc <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	2bff      	cmp	r3, #255	; 0xff
 80042b0:	d904      	bls.n	80042bc <HAL_RCC_OscConfig+0xb4>
 80042b2:	f240 1191 	movw	r1, #401	; 0x191
 80042b6:	489e      	ldr	r0, [pc, #632]	; (8004530 <HAL_RCC_OscConfig+0x328>)
 80042b8:	f7fd fa00 	bl	80016bc <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d030      	beq.n	8004326 <HAL_RCC_OscConfig+0x11e>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	2b10      	cmp	r3, #16
 80042ca:	d02c      	beq.n	8004326 <HAL_RCC_OscConfig+0x11e>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d0:	2b20      	cmp	r3, #32
 80042d2:	d028      	beq.n	8004326 <HAL_RCC_OscConfig+0x11e>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	2b30      	cmp	r3, #48	; 0x30
 80042da:	d024      	beq.n	8004326 <HAL_RCC_OscConfig+0x11e>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	2b40      	cmp	r3, #64	; 0x40
 80042e2:	d020      	beq.n	8004326 <HAL_RCC_OscConfig+0x11e>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	2b50      	cmp	r3, #80	; 0x50
 80042ea:	d01c      	beq.n	8004326 <HAL_RCC_OscConfig+0x11e>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	2b60      	cmp	r3, #96	; 0x60
 80042f2:	d018      	beq.n	8004326 <HAL_RCC_OscConfig+0x11e>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	2b70      	cmp	r3, #112	; 0x70
 80042fa:	d014      	beq.n	8004326 <HAL_RCC_OscConfig+0x11e>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	2b80      	cmp	r3, #128	; 0x80
 8004302:	d010      	beq.n	8004326 <HAL_RCC_OscConfig+0x11e>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	2b90      	cmp	r3, #144	; 0x90
 800430a:	d00c      	beq.n	8004326 <HAL_RCC_OscConfig+0x11e>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004310:	2ba0      	cmp	r3, #160	; 0xa0
 8004312:	d008      	beq.n	8004326 <HAL_RCC_OscConfig+0x11e>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	2bb0      	cmp	r3, #176	; 0xb0
 800431a:	d004      	beq.n	8004326 <HAL_RCC_OscConfig+0x11e>
 800431c:	f44f 71c9 	mov.w	r1, #402	; 0x192
 8004320:	4883      	ldr	r0, [pc, #524]	; (8004530 <HAL_RCC_OscConfig+0x328>)
 8004322:	f7fd f9cb 	bl	80016bc <assert_failed>

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004326:	f7ff fe0a 	bl	8003f3e <LL_RCC_GetSysClkSource>
 800432a:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800432c:	f7ff ff03 	bl	8004136 <LL_RCC_PLL_GetMainSource>
 8004330:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004334:	2b00      	cmp	r3, #0
 8004336:	d005      	beq.n	8004344 <HAL_RCC_OscConfig+0x13c>
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433a:	2b0c      	cmp	r3, #12
 800433c:	d14b      	bne.n	80043d6 <HAL_RCC_OscConfig+0x1ce>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800433e:	6a3b      	ldr	r3, [r7, #32]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d148      	bne.n	80043d6 <HAL_RCC_OscConfig+0x1ce>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004344:	f7ff fd98 	bl	8003e78 <LL_RCC_MSI_IsReady>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d006      	beq.n	800435c <HAL_RCC_OscConfig+0x154>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d102      	bne.n	800435c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	f000 bc1c 	b.w	8004b94 <HAL_RCC_OscConfig+0x98c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004360:	f7ff fdaf 	bl	8003ec2 <LL_RCC_MSI_GetRange>
 8004364:	4603      	mov	r3, r0
 8004366:	429c      	cmp	r4, r3
 8004368:	d915      	bls.n	8004396 <HAL_RCC_OscConfig+0x18e>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	4618      	mov	r0, r3
 8004370:	f000 ff24 	bl	80051bc <RCC_SetFlashLatencyFromMSIRange>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d002      	beq.n	8004380 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	f000 bc0a 	b.w	8004b94 <HAL_RCC_OscConfig+0x98c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	4618      	mov	r0, r3
 8004386:	f7ff fd88 	bl	8003e9a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	4618      	mov	r0, r3
 8004390:	f7ff fdac 	bl	8003eec <LL_RCC_MSI_SetCalibTrimming>
 8004394:	e013      	b.n	80043be <HAL_RCC_OscConfig+0x1b6>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	4618      	mov	r0, r3
 800439c:	f7ff fd7d 	bl	8003e9a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7ff fda1 	bl	8003eec <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 ff04 	bl	80051bc <RCC_SetFlashLatencyFromMSIRange>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <HAL_RCC_OscConfig+0x1b6>
          {
            return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e3ea      	b.n	8004b94 <HAL_RCC_OscConfig+0x98c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 80043be:	f7fd fd77 	bl	8001eb0 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80043c2:	4b5c      	ldr	r3, [pc, #368]	; (8004534 <HAL_RCC_OscConfig+0x32c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fd ff1a 	bl	8002200 <HAL_InitTick>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d039      	beq.n	8004446 <HAL_RCC_OscConfig+0x23e>
        {
          return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e3de      	b.n	8004b94 <HAL_RCC_OscConfig+0x98c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d01e      	beq.n	800441c <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80043de:	f7ff fd2d 	bl	8003e3c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043e2:	f7fd ff59 	bl	8002298 <HAL_GetTick>
 80043e6:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80043e8:	e008      	b.n	80043fc <HAL_RCC_OscConfig+0x1f4>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043ea:	f7fd ff55 	bl	8002298 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_OscConfig+0x1f4>
          {
            return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e3cb      	b.n	8004b94 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_MSI_IsReady() == 0U)
 80043fc:	f7ff fd3c 	bl	8003e78 <LL_RCC_MSI_IsReady>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d0f1      	beq.n	80043ea <HAL_RCC_OscConfig+0x1e2>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff fd45 	bl	8003e9a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a1b      	ldr	r3, [r3, #32]
 8004414:	4618      	mov	r0, r3
 8004416:	f7ff fd69 	bl	8003eec <LL_RCC_MSI_SetCalibTrimming>
 800441a:	e015      	b.n	8004448 <HAL_RCC_OscConfig+0x240>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800441c:	f7ff fd1d 	bl	8003e5a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004420:	f7fd ff3a 	bl	8002298 <HAL_GetTick>
 8004424:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x232>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004428:	f7fd ff36 	bl	8002298 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x232>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e3ac      	b.n	8004b94 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_MSI_IsReady() != 0U)
 800443a:	f7ff fd1d 	bl	8003e78 <LL_RCC_MSI_IsReady>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1f1      	bne.n	8004428 <HAL_RCC_OscConfig+0x220>
 8004444:	e000      	b.n	8004448 <HAL_RCC_OscConfig+0x240>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004446:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	2b00      	cmp	r3, #0
 8004452:	d072      	beq.n	800453a <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00e      	beq.n	800447a <HAL_RCC_OscConfig+0x272>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004464:	d009      	beq.n	800447a <HAL_RCC_OscConfig+0x272>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800446e:	d004      	beq.n	800447a <HAL_RCC_OscConfig+0x272>
 8004470:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8004474:	482e      	ldr	r0, [pc, #184]	; (8004530 <HAL_RCC_OscConfig+0x328>)
 8004476:	f7fd f921 	bl	80016bc <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800447a:	f7ff fd60 	bl	8003f3e <LL_RCC_GetSysClkSource>
 800447e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004480:	f7ff fe59 	bl	8004136 <LL_RCC_PLL_GetMainSource>
 8004484:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	2b08      	cmp	r3, #8
 800448a:	d005      	beq.n	8004498 <HAL_RCC_OscConfig+0x290>
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	2b0c      	cmp	r3, #12
 8004490:	d10d      	bne.n	80044ae <HAL_RCC_OscConfig+0x2a6>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2b03      	cmp	r3, #3
 8004496:	d10a      	bne.n	80044ae <HAL_RCC_OscConfig+0x2a6>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004498:	f7ff fb70 	bl	8003b7c <LL_RCC_HSE_IsReady>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d04a      	beq.n	8004538 <HAL_RCC_OscConfig+0x330>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d146      	bne.n	8004538 <HAL_RCC_OscConfig+0x330>
      {
        return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e372      	b.n	8004b94 <HAL_RCC_OscConfig+0x98c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b6:	d102      	bne.n	80044be <HAL_RCC_OscConfig+0x2b6>
 80044b8:	f7ff fb42 	bl	8003b40 <LL_RCC_HSE_Enable>
 80044bc:	e00d      	b.n	80044da <HAL_RCC_OscConfig+0x2d2>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044c6:	d104      	bne.n	80044d2 <HAL_RCC_OscConfig+0x2ca>
 80044c8:	f7ff fb1c 	bl	8003b04 <LL_RCC_HSE_EnableBypass>
 80044cc:	f7ff fb38 	bl	8003b40 <LL_RCC_HSE_Enable>
 80044d0:	e003      	b.n	80044da <HAL_RCC_OscConfig+0x2d2>
 80044d2:	f7ff fb44 	bl	8003b5e <LL_RCC_HSE_Disable>
 80044d6:	f7ff fb24 	bl	8003b22 <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d012      	beq.n	8004508 <HAL_RCC_OscConfig+0x300>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e2:	f7fd fed9 	bl	8002298 <HAL_GetTick>
 80044e6:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80044e8:	e008      	b.n	80044fc <HAL_RCC_OscConfig+0x2f4>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044ea:	f7fd fed5 	bl	8002298 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b64      	cmp	r3, #100	; 0x64
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_OscConfig+0x2f4>
          {
            return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e34b      	b.n	8004b94 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_HSE_IsReady() == 0U)
 80044fc:	f7ff fb3e 	bl	8003b7c <LL_RCC_HSE_IsReady>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d0f1      	beq.n	80044ea <HAL_RCC_OscConfig+0x2e2>
 8004506:	e018      	b.n	800453a <HAL_RCC_OscConfig+0x332>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004508:	f7fd fec6 	bl	8002298 <HAL_GetTick>
 800450c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800450e:	e008      	b.n	8004522 <HAL_RCC_OscConfig+0x31a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004510:	f7fd fec2 	bl	8002298 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b64      	cmp	r3, #100	; 0x64
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e338      	b.n	8004b94 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004522:	f7ff fb2b 	bl	8003b7c <LL_RCC_HSE_IsReady>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1f1      	bne.n	8004510 <HAL_RCC_OscConfig+0x308>
 800452c:	e005      	b.n	800453a <HAL_RCC_OscConfig+0x332>
 800452e:	bf00      	nop
 8004530:	0800e290 	.word	0x0800e290
 8004534:	20000010 	.word	0x20000010
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d068      	beq.n	8004618 <HAL_RCC_OscConfig+0x410>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d009      	beq.n	8004562 <HAL_RCC_OscConfig+0x35a>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004556:	d004      	beq.n	8004562 <HAL_RCC_OscConfig+0x35a>
 8004558:	f240 212d 	movw	r1, #557	; 0x22d
 800455c:	48b0      	ldr	r0, [pc, #704]	; (8004820 <HAL_RCC_OscConfig+0x618>)
 800455e:	f7fd f8ad 	bl	80016bc <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	2b7f      	cmp	r3, #127	; 0x7f
 8004568:	d904      	bls.n	8004574 <HAL_RCC_OscConfig+0x36c>
 800456a:	f240 212e 	movw	r1, #558	; 0x22e
 800456e:	48ac      	ldr	r0, [pc, #688]	; (8004820 <HAL_RCC_OscConfig+0x618>)
 8004570:	f7fd f8a4 	bl	80016bc <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004574:	f7ff fce3 	bl	8003f3e <LL_RCC_GetSysClkSource>
 8004578:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800457a:	f7ff fddc 	bl	8004136 <LL_RCC_PLL_GetMainSource>
 800457e:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	2b04      	cmp	r3, #4
 8004584:	d005      	beq.n	8004592 <HAL_RCC_OscConfig+0x38a>
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	2b0c      	cmp	r3, #12
 800458a:	d113      	bne.n	80045b4 <HAL_RCC_OscConfig+0x3ac>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d110      	bne.n	80045b4 <HAL_RCC_OscConfig+0x3ac>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004592:	f7ff fb23 	bl	8003bdc <LL_RCC_HSI_IsReady>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d005      	beq.n	80045a8 <HAL_RCC_OscConfig+0x3a0>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <HAL_RCC_OscConfig+0x3a0>
      {
        return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e2f5      	b.n	8004b94 <HAL_RCC_OscConfig+0x98c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7ff fb27 	bl	8003c00 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045b2:	e031      	b.n	8004618 <HAL_RCC_OscConfig+0x410>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d019      	beq.n	80045f0 <HAL_RCC_OscConfig+0x3e8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045bc:	f7ff faf0 	bl	8003ba0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c0:	f7fd fe6a 	bl	8002298 <HAL_GetTick>
 80045c4:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045c8:	f7fd fe66 	bl	8002298 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e2dc      	b.n	8004b94 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_HSI_IsReady() == 0U)
 80045da:	f7ff faff 	bl	8003bdc <LL_RCC_HSI_IsReady>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0f1      	beq.n	80045c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff fb09 	bl	8003c00 <LL_RCC_HSI_SetCalibTrimming>
 80045ee:	e013      	b.n	8004618 <HAL_RCC_OscConfig+0x410>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045f0:	f7ff fae5 	bl	8003bbe <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f4:	f7fd fe50 	bl	8002298 <HAL_GetTick>
 80045f8:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045fc:	f7fd fe4c 	bl	8002298 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e2c2      	b.n	8004b94 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_HSI_IsReady() != 0U)
 800460e:	f7ff fae5 	bl	8003bdc <LL_RCC_HSI_IsReady>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1f1      	bne.n	80045fc <HAL_RCC_OscConfig+0x3f4>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0308 	and.w	r3, r3, #8
 8004620:	2b00      	cmp	r3, #0
 8004622:	d106      	bne.n	8004632 <HAL_RCC_OscConfig+0x42a>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 80b5 	beq.w	800479c <HAL_RCC_OscConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d008      	beq.n	800464c <HAL_RCC_OscConfig+0x444>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	2b05      	cmp	r3, #5
 8004640:	d004      	beq.n	800464c <HAL_RCC_OscConfig+0x444>
 8004642:	f240 2172 	movw	r1, #626	; 0x272
 8004646:	4876      	ldr	r0, [pc, #472]	; (8004820 <HAL_RCC_OscConfig+0x618>)
 8004648:	f7fd f838 	bl	80016bc <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d07b      	beq.n	800474c <HAL_RCC_OscConfig+0x544>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0310 	and.w	r3, r3, #16
 800465c:	2b00      	cmp	r3, #0
 800465e:	d04f      	beq.n	8004700 <HAL_RCC_OscConfig+0x4f8>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	2b0f      	cmp	r3, #15
 8004666:	d904      	bls.n	8004672 <HAL_RCC_OscConfig+0x46a>
 8004668:	f240 217a 	movw	r1, #634	; 0x27a
 800466c:	486c      	ldr	r0, [pc, #432]	; (8004820 <HAL_RCC_OscConfig+0x618>)
 800466e:	f7fd f825 	bl	80016bc <assert_failed>

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004672:	f7ff fb86 	bl	8003d82 <LL_RCC_LSI1_IsReady>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d113      	bne.n	80046a4 <HAL_RCC_OscConfig+0x49c>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800467c:	f7ff fb5f 	bl	8003d3e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004680:	f7fd fe0a 	bl	8002298 <HAL_GetTick>
 8004684:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004686:	e008      	b.n	800469a <HAL_RCC_OscConfig+0x492>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004688:	f7fd fe06 	bl	8002298 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0x492>
            {
              return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e27c      	b.n	8004b94 <HAL_RCC_OscConfig+0x98c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800469a:	f7ff fb72 	bl	8003d82 <LL_RCC_LSI1_IsReady>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d0f1      	beq.n	8004688 <HAL_RCC_OscConfig+0x480>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80046a4:	f7ff fb7f 	bl	8003da6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a8:	f7fd fdf6 	bl	8002298 <HAL_GetTick>
 80046ac:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0x4ba>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80046b0:	f7fd fdf2 	bl	8002298 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b03      	cmp	r3, #3
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x4ba>
          {
            return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e268      	b.n	8004b94 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80046c2:	f7ff fb92 	bl	8003dea <LL_RCC_LSI2_IsReady>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0f1      	beq.n	80046b0 <HAL_RCC_OscConfig+0x4a8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff fb9c 	bl	8003e0e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80046d6:	f7ff fb43 	bl	8003d60 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046da:	f7fd fddd 	bl	8002298 <HAL_GetTick>
 80046de:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80046e0:	e008      	b.n	80046f4 <HAL_RCC_OscConfig+0x4ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80046e2:	f7fd fdd9 	bl	8002298 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x4ec>
          {
            return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e24f      	b.n	8004b94 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80046f4:	f7ff fb45 	bl	8003d82 <LL_RCC_LSI1_IsReady>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f1      	bne.n	80046e2 <HAL_RCC_OscConfig+0x4da>
 80046fe:	e04d      	b.n	800479c <HAL_RCC_OscConfig+0x594>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004700:	f7ff fb1d 	bl	8003d3e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004704:	f7fd fdc8 	bl	8002298 <HAL_GetTick>
 8004708:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x516>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800470c:	f7fd fdc4 	bl	8002298 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x516>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e23a      	b.n	8004b94 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800471e:	f7ff fb30 	bl	8003d82 <LL_RCC_LSI1_IsReady>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d0f1      	beq.n	800470c <HAL_RCC_OscConfig+0x504>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004728:	f7ff fb4e 	bl	8003dc8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800472c:	e008      	b.n	8004740 <HAL_RCC_OscConfig+0x538>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800472e:	f7fd fdb3 	bl	8002298 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b03      	cmp	r3, #3
 800473a:	d901      	bls.n	8004740 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e229      	b.n	8004b94 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004740:	f7ff fb53 	bl	8003dea <LL_RCC_LSI2_IsReady>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1f1      	bne.n	800472e <HAL_RCC_OscConfig+0x526>
 800474a:	e027      	b.n	800479c <HAL_RCC_OscConfig+0x594>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800474c:	f7ff fb3c 	bl	8003dc8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004750:	f7fd fda2 	bl	8002298 <HAL_GetTick>
 8004754:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x562>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004758:	f7fd fd9e 	bl	8002298 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b03      	cmp	r3, #3
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x562>
        {
          return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e214      	b.n	8004b94 <HAL_RCC_OscConfig+0x98c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800476a:	f7ff fb3e 	bl	8003dea <LL_RCC_LSI2_IsReady>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1f1      	bne.n	8004758 <HAL_RCC_OscConfig+0x550>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004774:	f7ff faf4 	bl	8003d60 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004778:	f7fd fd8e 	bl	8002298 <HAL_GetTick>
 800477c:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004780:	f7fd fd8a 	bl	8002298 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e200      	b.n	8004b94 <HAL_RCC_OscConfig+0x98c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004792:	f7ff faf6 	bl	8003d82 <LL_RCC_LSI1_IsReady>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1f1      	bne.n	8004780 <HAL_RCC_OscConfig+0x578>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d070      	beq.n	800488a <HAL_RCC_OscConfig+0x682>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00c      	beq.n	80047ca <HAL_RCC_OscConfig+0x5c2>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d008      	beq.n	80047ca <HAL_RCC_OscConfig+0x5c2>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	2b05      	cmp	r3, #5
 80047be:	d004      	beq.n	80047ca <HAL_RCC_OscConfig+0x5c2>
 80047c0:	f240 21f9 	movw	r1, #761	; 0x2f9
 80047c4:	4816      	ldr	r0, [pc, #88]	; (8004820 <HAL_RCC_OscConfig+0x618>)
 80047c6:	f7fc ff79 	bl	80016bc <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ca:	4b16      	ldr	r3, [pc, #88]	; (8004824 <HAL_RCC_OscConfig+0x61c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d114      	bne.n	8004800 <HAL_RCC_OscConfig+0x5f8>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80047d6:	f7ff f955 	bl	8003a84 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047da:	f7fd fd5d 	bl	8002298 <HAL_GetTick>
 80047de:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047e0:	e008      	b.n	80047f4 <HAL_RCC_OscConfig+0x5ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047e2:	f7fd fd59 	bl	8002298 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_OscConfig+0x5ec>
        {
          return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e1cf      	b.n	8004b94 <HAL_RCC_OscConfig+0x98c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047f4:	4b0b      	ldr	r3, [pc, #44]	; (8004824 <HAL_RCC_OscConfig+0x61c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d0f0      	beq.n	80047e2 <HAL_RCC_OscConfig+0x5da>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d102      	bne.n	800480e <HAL_RCC_OscConfig+0x606>
 8004808:	f7ff fa43 	bl	8003c92 <LL_RCC_LSE_Enable>
 800480c:	e010      	b.n	8004830 <HAL_RCC_OscConfig+0x628>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	2b05      	cmp	r3, #5
 8004814:	d108      	bne.n	8004828 <HAL_RCC_OscConfig+0x620>
 8004816:	f7ff fa5e 	bl	8003cd6 <LL_RCC_LSE_EnableBypass>
 800481a:	f7ff fa3a 	bl	8003c92 <LL_RCC_LSE_Enable>
 800481e:	e007      	b.n	8004830 <HAL_RCC_OscConfig+0x628>
 8004820:	0800e290 	.word	0x0800e290
 8004824:	58000400 	.word	0x58000400
 8004828:	f7ff fa44 	bl	8003cb4 <LL_RCC_LSE_Disable>
 800482c:	f7ff fa64 	bl	8003cf8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d014      	beq.n	8004862 <HAL_RCC_OscConfig+0x65a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004838:	f7fd fd2e 	bl	8002298 <HAL_GetTick>
 800483c:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800483e:	e00a      	b.n	8004856 <HAL_RCC_OscConfig+0x64e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004840:	f7fd fd2a 	bl	8002298 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	f241 3288 	movw	r2, #5000	; 0x1388
 800484e:	4293      	cmp	r3, r2
 8004850:	d901      	bls.n	8004856 <HAL_RCC_OscConfig+0x64e>
        {
          return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e19e      	b.n	8004b94 <HAL_RCC_OscConfig+0x98c>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004856:	f7ff fa60 	bl	8003d1a <LL_RCC_LSE_IsReady>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0ef      	beq.n	8004840 <HAL_RCC_OscConfig+0x638>
 8004860:	e013      	b.n	800488a <HAL_RCC_OscConfig+0x682>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004862:	f7fd fd19 	bl	8002298 <HAL_GetTick>
 8004866:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004868:	e00a      	b.n	8004880 <HAL_RCC_OscConfig+0x678>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800486a:	f7fd fd15 	bl	8002298 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	f241 3288 	movw	r2, #5000	; 0x1388
 8004878:	4293      	cmp	r3, r2
 800487a:	d901      	bls.n	8004880 <HAL_RCC_OscConfig+0x678>
        {
          return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e189      	b.n	8004b94 <HAL_RCC_OscConfig+0x98c>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004880:	f7ff fa4b 	bl	8003d1a <LL_RCC_LSE_IsReady>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1ef      	bne.n	800486a <HAL_RCC_OscConfig+0x662>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004892:	2b00      	cmp	r3, #0
 8004894:	d039      	beq.n	800490a <HAL_RCC_OscConfig+0x702>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489a:	2b00      	cmp	r3, #0
 800489c:	d008      	beq.n	80048b0 <HAL_RCC_OscConfig+0x6a8>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d004      	beq.n	80048b0 <HAL_RCC_OscConfig+0x6a8>
 80048a6:	f240 3135 	movw	r1, #821	; 0x335
 80048aa:	489f      	ldr	r0, [pc, #636]	; (8004b28 <HAL_RCC_OscConfig+0x920>)
 80048ac:	f7fc ff06 	bl	80016bc <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d014      	beq.n	80048e2 <HAL_RCC_OscConfig+0x6da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048b8:	f7ff f9b7 	bl	8003c2a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048bc:	f7fd fcec 	bl	8002298 <HAL_GetTick>
 80048c0:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0x6ce>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048c4:	f7fd fce8 	bl	8002298 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x6ce>
        {
          return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e15e      	b.n	8004b94 <HAL_RCC_OscConfig+0x98c>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80048d6:	f7ff f9ca 	bl	8003c6e <LL_RCC_HSI48_IsReady>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d0f1      	beq.n	80048c4 <HAL_RCC_OscConfig+0x6bc>
 80048e0:	e013      	b.n	800490a <HAL_RCC_OscConfig+0x702>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048e2:	f7ff f9b3 	bl	8003c4c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e6:	f7fd fcd7 	bl	8002298 <HAL_GetTick>
 80048ea:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80048ec:	e008      	b.n	8004900 <HAL_RCC_OscConfig+0x6f8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048ee:	f7fd fcd3 	bl	8002298 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d901      	bls.n	8004900 <HAL_RCC_OscConfig+0x6f8>
        {
          return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e149      	b.n	8004b94 <HAL_RCC_OscConfig+0x98c>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004900:	f7ff f9b5 	bl	8003c6e <LL_RCC_HSI48_IsReady>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1f1      	bne.n	80048ee <HAL_RCC_OscConfig+0x6e6>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00c      	beq.n	800492c <HAL_RCC_OscConfig+0x724>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004916:	2b01      	cmp	r3, #1
 8004918:	d008      	beq.n	800492c <HAL_RCC_OscConfig+0x724>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491e:	2b02      	cmp	r3, #2
 8004920:	d004      	beq.n	800492c <HAL_RCC_OscConfig+0x724>
 8004922:	f240 315d 	movw	r1, #861	; 0x35d
 8004926:	4880      	ldr	r0, [pc, #512]	; (8004b28 <HAL_RCC_OscConfig+0x920>)
 8004928:	f7fc fec8 	bl	80016bc <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 812e 	beq.w	8004b92 <HAL_RCC_OscConfig+0x98a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004936:	f7ff fb02 	bl	8003f3e <LL_RCC_GetSysClkSource>
 800493a:	4603      	mov	r3, r0
 800493c:	2b0c      	cmp	r3, #12
 800493e:	f000 80ec 	beq.w	8004b1a <HAL_RCC_OscConfig+0x912>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004946:	2b02      	cmp	r3, #2
 8004948:	f040 80c0 	bne.w	8004acc <HAL_RCC_OscConfig+0x8c4>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004950:	2b00      	cmp	r3, #0
 8004952:	d010      	beq.n	8004976 <HAL_RCC_OscConfig+0x76e>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004958:	2b01      	cmp	r3, #1
 800495a:	d00c      	beq.n	8004976 <HAL_RCC_OscConfig+0x76e>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004960:	2b02      	cmp	r3, #2
 8004962:	d008      	beq.n	8004976 <HAL_RCC_OscConfig+0x76e>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004968:	2b03      	cmp	r3, #3
 800496a:	d004      	beq.n	8004976 <HAL_RCC_OscConfig+0x76e>
 800496c:	f240 3167 	movw	r1, #871	; 0x367
 8004970:	486d      	ldr	r0, [pc, #436]	; (8004b28 <HAL_RCC_OscConfig+0x920>)
 8004972:	f7fc fea3 	bl	80016bc <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800497a:	2b00      	cmp	r3, #0
 800497c:	d020      	beq.n	80049c0 <HAL_RCC_OscConfig+0x7b8>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004982:	2b10      	cmp	r3, #16
 8004984:	d01c      	beq.n	80049c0 <HAL_RCC_OscConfig+0x7b8>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800498a:	2b20      	cmp	r3, #32
 800498c:	d018      	beq.n	80049c0 <HAL_RCC_OscConfig+0x7b8>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004992:	2b30      	cmp	r3, #48	; 0x30
 8004994:	d014      	beq.n	80049c0 <HAL_RCC_OscConfig+0x7b8>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800499a:	2b40      	cmp	r3, #64	; 0x40
 800499c:	d010      	beq.n	80049c0 <HAL_RCC_OscConfig+0x7b8>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a2:	2b50      	cmp	r3, #80	; 0x50
 80049a4:	d00c      	beq.n	80049c0 <HAL_RCC_OscConfig+0x7b8>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049aa:	2b60      	cmp	r3, #96	; 0x60
 80049ac:	d008      	beq.n	80049c0 <HAL_RCC_OscConfig+0x7b8>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b2:	2b70      	cmp	r3, #112	; 0x70
 80049b4:	d004      	beq.n	80049c0 <HAL_RCC_OscConfig+0x7b8>
 80049b6:	f44f 715a 	mov.w	r1, #872	; 0x368
 80049ba:	485b      	ldr	r0, [pc, #364]	; (8004b28 <HAL_RCC_OscConfig+0x920>)
 80049bc:	f7fc fe7e 	bl	80016bc <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c4:	2b05      	cmp	r3, #5
 80049c6:	d903      	bls.n	80049d0 <HAL_RCC_OscConfig+0x7c8>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049cc:	2b7f      	cmp	r3, #127	; 0x7f
 80049ce:	d904      	bls.n	80049da <HAL_RCC_OscConfig+0x7d2>
 80049d0:	f240 3169 	movw	r1, #873	; 0x369
 80049d4:	4854      	ldr	r0, [pc, #336]	; (8004b28 <HAL_RCC_OscConfig+0x920>)
 80049d6:	f7fc fe71 	bl	80016bc <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049e2:	d304      	bcc.n	80049ee <HAL_RCC_OscConfig+0x7e6>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e8:	f5b3 1f78 	cmp.w	r3, #4063232	; 0x3e0000
 80049ec:	d904      	bls.n	80049f8 <HAL_RCC_OscConfig+0x7f0>
 80049ee:	f240 316a 	movw	r1, #874	; 0x36a
 80049f2:	484d      	ldr	r0, [pc, #308]	; (8004b28 <HAL_RCC_OscConfig+0x920>)
 80049f4:	f7fc fe62 	bl	80016bc <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a00:	d304      	bcc.n	8004a0c <HAL_RCC_OscConfig+0x804>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8004a0a:	d904      	bls.n	8004a16 <HAL_RCC_OscConfig+0x80e>
 8004a0c:	f240 316b 	movw	r1, #875	; 0x36b
 8004a10:	4845      	ldr	r0, [pc, #276]	; (8004b28 <HAL_RCC_OscConfig+0x920>)
 8004a12:	f7fc fe53 	bl	80016bc <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a1e:	d304      	bcc.n	8004a2a <HAL_RCC_OscConfig+0x822>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a24:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8004a28:	d904      	bls.n	8004a34 <HAL_RCC_OscConfig+0x82c>
 8004a2a:	f44f 715b 	mov.w	r1, #876	; 0x36c
 8004a2e:	483e      	ldr	r0, [pc, #248]	; (8004b28 <HAL_RCC_OscConfig+0x920>)
 8004a30:	f7fc fe44 	bl	80016bc <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a34:	f7ff fb39 	bl	80040aa <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a38:	f7fd fc2e 	bl	8002298 <HAL_GetTick>
 8004a3c:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004a3e:	e008      	b.n	8004a52 <HAL_RCC_OscConfig+0x84a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a40:	f7fd fc2a 	bl	8002298 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x84a>
          {
            return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e0a0      	b.n	8004b94 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004a52:	f7ff fb39 	bl	80040c8 <LL_RCC_PLL_IsReady>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1f1      	bne.n	8004a40 <HAL_RCC_OscConfig+0x838>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	4b32      	ldr	r3, [pc, #200]	; (8004b2c <HAL_RCC_OscConfig+0x924>)
 8004a64:	4013      	ands	r3, r2
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a6e:	4311      	orrs	r1, r2
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a74:	0212      	lsls	r2, r2, #8
 8004a76:	4311      	orrs	r1, r2
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a7c:	4311      	orrs	r1, r2
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a82:	4311      	orrs	r1, r2
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a92:	f7ff fafb 	bl	800408c <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aa4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa6:	f7fd fbf7 	bl	8002298 <HAL_GetTick>
 8004aaa:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8004aac:	e008      	b.n	8004ac0 <HAL_RCC_OscConfig+0x8b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aae:	f7fd fbf3 	bl	8002298 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d901      	bls.n	8004ac0 <HAL_RCC_OscConfig+0x8b8>
          {
            return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e069      	b.n	8004b94 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_PLL_IsReady() == 0U)
 8004ac0:	f7ff fb02 	bl	80040c8 <LL_RCC_PLL_IsReady>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d0f1      	beq.n	8004aae <HAL_RCC_OscConfig+0x8a6>
 8004aca:	e062      	b.n	8004b92 <HAL_RCC_OscConfig+0x98a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004acc:	f7ff faed 	bl	80040aa <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ada:	f023 0303 	bic.w	r3, r3, #3
 8004ade:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8004ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004aea:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8004aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004af2:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af4:	f7fd fbd0 	bl	8002298 <HAL_GetTick>
 8004af8:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0x906>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004afc:	f7fd fbcc 	bl	8002298 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0x906>
          {
            return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e042      	b.n	8004b94 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004b0e:	f7ff fadb 	bl	80040c8 <LL_RCC_PLL_IsReady>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1f1      	bne.n	8004afc <HAL_RCC_OscConfig+0x8f4>
 8004b18:	e03b      	b.n	8004b92 <HAL_RCC_OscConfig+0x98a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d106      	bne.n	8004b30 <HAL_RCC_OscConfig+0x928>
      {
        return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e036      	b.n	8004b94 <HAL_RCC_OscConfig+0x98c>
 8004b26:	bf00      	nop
 8004b28:	0800e290 	.word	0x0800e290
 8004b2c:	11c1808c 	.word	0x11c1808c
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8004b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	f003 0203 	and.w	r2, r3, #3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d123      	bne.n	8004b8e <HAL_RCC_OscConfig+0x986>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d11c      	bne.n	8004b8e <HAL_RCC_OscConfig+0x986>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	0a1b      	lsrs	r3, r3, #8
 8004b58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d114      	bne.n	8004b8e <HAL_RCC_OscConfig+0x986>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d10d      	bne.n	8004b8e <HAL_RCC_OscConfig+0x986>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d106      	bne.n	8004b8e <HAL_RCC_OscConfig+0x986>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d001      	beq.n	8004b92 <HAL_RCC_OscConfig+0x98a>
        {
          return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e000      	b.n	8004b94 <HAL_RCC_OscConfig+0x98c>
        }
      }
    }
  }
  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	372c      	adds	r7, #44	; 0x2c
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd90      	pop	{r4, r7, pc}

08004b9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e253      	b.n	8005058 <HAL_RCC_ClockConfig+0x4bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d003      	beq.n	8004bc0 <HAL_RCC_ClockConfig+0x24>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b6f      	cmp	r3, #111	; 0x6f
 8004bbe:	d904      	bls.n	8004bca <HAL_RCC_ClockConfig+0x2e>
 8004bc0:	f240 31fd 	movw	r1, #1021	; 0x3fd
 8004bc4:	489b      	ldr	r0, [pc, #620]	; (8004e34 <HAL_RCC_ClockConfig+0x298>)
 8004bc6:	f7fc fd79 	bl	80016bc <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00d      	beq.n	8004bec <HAL_RCC_ClockConfig+0x50>
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d00a      	beq.n	8004bec <HAL_RCC_ClockConfig+0x50>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d007      	beq.n	8004bec <HAL_RCC_ClockConfig+0x50>
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	2b03      	cmp	r3, #3
 8004be0:	d004      	beq.n	8004bec <HAL_RCC_ClockConfig+0x50>
 8004be2:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8004be6:	4893      	ldr	r0, [pc, #588]	; (8004e34 <HAL_RCC_ClockConfig+0x298>)
 8004be8:	f7fc fd68 	bl	80016bc <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bec:	4b92      	ldr	r3, [pc, #584]	; (8004e38 <HAL_RCC_ClockConfig+0x29c>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0307 	and.w	r3, r3, #7
 8004bf4:	683a      	ldr	r2, [r7, #0]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d91b      	bls.n	8004c32 <HAL_RCC_ClockConfig+0x96>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bfa:	4b8f      	ldr	r3, [pc, #572]	; (8004e38 <HAL_RCC_ClockConfig+0x29c>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f023 0207 	bic.w	r2, r3, #7
 8004c02:	498d      	ldr	r1, [pc, #564]	; (8004e38 <HAL_RCC_ClockConfig+0x29c>)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c0a:	f7fd fb45 	bl	8002298 <HAL_GetTick>
 8004c0e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c10:	e008      	b.n	8004c24 <HAL_RCC_ClockConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004c12:	f7fd fb41 	bl	8002298 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d901      	bls.n	8004c24 <HAL_RCC_ClockConfig+0x88>
      {
        return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e219      	b.n	8005058 <HAL_RCC_ClockConfig+0x4bc>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c24:	4b84      	ldr	r3, [pc, #528]	; (8004e38 <HAL_RCC_ClockConfig+0x29c>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	683a      	ldr	r2, [r7, #0]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d1ef      	bne.n	8004c12 <HAL_RCC_ClockConfig+0x76>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d053      	beq.n	8004ce6 <HAL_RCC_ClockConfig+0x14a>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d038      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x11c>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	2b80      	cmp	r3, #128	; 0x80
 8004c4c:	d034      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x11c>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	2b10      	cmp	r3, #16
 8004c54:	d030      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x11c>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	2b90      	cmp	r3, #144	; 0x90
 8004c5c:	d02c      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x11c>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	2b20      	cmp	r3, #32
 8004c64:	d028      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x11c>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	2b50      	cmp	r3, #80	; 0x50
 8004c6c:	d024      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x11c>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	2ba0      	cmp	r3, #160	; 0xa0
 8004c74:	d020      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x11c>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	2b60      	cmp	r3, #96	; 0x60
 8004c7c:	d01c      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x11c>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	2bb0      	cmp	r3, #176	; 0xb0
 8004c84:	d018      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x11c>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	2b70      	cmp	r3, #112	; 0x70
 8004c8c:	d014      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x11c>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	2bc0      	cmp	r3, #192	; 0xc0
 8004c94:	d010      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x11c>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	2bd0      	cmp	r3, #208	; 0xd0
 8004c9c:	d00c      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x11c>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	2be0      	cmp	r3, #224	; 0xe0
 8004ca4:	d008      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x11c>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	2bf0      	cmp	r3, #240	; 0xf0
 8004cac:	d004      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x11c>
 8004cae:	f240 411b 	movw	r1, #1051	; 0x41b
 8004cb2:	4860      	ldr	r0, [pc, #384]	; (8004e34 <HAL_RCC_ClockConfig+0x298>)
 8004cb4:	f7fc fd02 	bl	80016bc <assert_failed>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7ff f94a 	bl	8003f56 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004cc2:	f7fd fae9 	bl	8002298 <HAL_GetTick>
 8004cc6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004cc8:	e008      	b.n	8004cdc <HAL_RCC_ClockConfig+0x140>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004cca:	f7fd fae5 	bl	8002298 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_ClockConfig+0x140>
      {
        return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e1bd      	b.n	8005058 <HAL_RCC_ClockConfig+0x4bc>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004cdc:	f7ff fa37 	bl	800414e <LL_RCC_IsActiveFlag_HPRE>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d0f1      	beq.n	8004cca <HAL_RCC_ClockConfig+0x12e>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0320 	and.w	r3, r3, #32
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d053      	beq.n	8004d9a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d038      	beq.n	8004d6c <HAL_RCC_ClockConfig+0x1d0>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	2b80      	cmp	r3, #128	; 0x80
 8004d00:	d034      	beq.n	8004d6c <HAL_RCC_ClockConfig+0x1d0>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	2b10      	cmp	r3, #16
 8004d08:	d030      	beq.n	8004d6c <HAL_RCC_ClockConfig+0x1d0>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	2b90      	cmp	r3, #144	; 0x90
 8004d10:	d02c      	beq.n	8004d6c <HAL_RCC_ClockConfig+0x1d0>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	2b20      	cmp	r3, #32
 8004d18:	d028      	beq.n	8004d6c <HAL_RCC_ClockConfig+0x1d0>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	2b50      	cmp	r3, #80	; 0x50
 8004d20:	d024      	beq.n	8004d6c <HAL_RCC_ClockConfig+0x1d0>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	2ba0      	cmp	r3, #160	; 0xa0
 8004d28:	d020      	beq.n	8004d6c <HAL_RCC_ClockConfig+0x1d0>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	2b60      	cmp	r3, #96	; 0x60
 8004d30:	d01c      	beq.n	8004d6c <HAL_RCC_ClockConfig+0x1d0>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	2bb0      	cmp	r3, #176	; 0xb0
 8004d38:	d018      	beq.n	8004d6c <HAL_RCC_ClockConfig+0x1d0>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	2b70      	cmp	r3, #112	; 0x70
 8004d40:	d014      	beq.n	8004d6c <HAL_RCC_ClockConfig+0x1d0>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	2bc0      	cmp	r3, #192	; 0xc0
 8004d48:	d010      	beq.n	8004d6c <HAL_RCC_ClockConfig+0x1d0>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	2bd0      	cmp	r3, #208	; 0xd0
 8004d50:	d00c      	beq.n	8004d6c <HAL_RCC_ClockConfig+0x1d0>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	2be0      	cmp	r3, #224	; 0xe0
 8004d58:	d008      	beq.n	8004d6c <HAL_RCC_ClockConfig+0x1d0>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	2bf0      	cmp	r3, #240	; 0xf0
 8004d60:	d004      	beq.n	8004d6c <HAL_RCC_ClockConfig+0x1d0>
 8004d62:	f240 412c 	movw	r1, #1068	; 0x42c
 8004d66:	4833      	ldr	r0, [pc, #204]	; (8004e34 <HAL_RCC_ClockConfig+0x298>)
 8004d68:	f7fc fca8 	bl	80016bc <assert_failed>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7ff f904 	bl	8003f7e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d76:	f7fd fa8f 	bl	8002298 <HAL_GetTick>
 8004d7a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004d7c:	e008      	b.n	8004d90 <HAL_RCC_ClockConfig+0x1f4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d7e:	f7fd fa8b 	bl	8002298 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_ClockConfig+0x1f4>
      {
        return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e163      	b.n	8005058 <HAL_RCC_ClockConfig+0x4bc>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004d90:	f7ff f9ef 	bl	8004172 <LL_RCC_IsActiveFlag_C2HPRE>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0f1      	beq.n	8004d7e <HAL_RCC_ClockConfig+0x1e2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d058      	beq.n	8004e58 <HAL_RCC_ClockConfig+0x2bc>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d038      	beq.n	8004e20 <HAL_RCC_ClockConfig+0x284>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	2b80      	cmp	r3, #128	; 0x80
 8004db4:	d034      	beq.n	8004e20 <HAL_RCC_ClockConfig+0x284>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	2b10      	cmp	r3, #16
 8004dbc:	d030      	beq.n	8004e20 <HAL_RCC_ClockConfig+0x284>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	2b90      	cmp	r3, #144	; 0x90
 8004dc4:	d02c      	beq.n	8004e20 <HAL_RCC_ClockConfig+0x284>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	2b20      	cmp	r3, #32
 8004dcc:	d028      	beq.n	8004e20 <HAL_RCC_ClockConfig+0x284>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	2b50      	cmp	r3, #80	; 0x50
 8004dd4:	d024      	beq.n	8004e20 <HAL_RCC_ClockConfig+0x284>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	2ba0      	cmp	r3, #160	; 0xa0
 8004ddc:	d020      	beq.n	8004e20 <HAL_RCC_ClockConfig+0x284>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	2b60      	cmp	r3, #96	; 0x60
 8004de4:	d01c      	beq.n	8004e20 <HAL_RCC_ClockConfig+0x284>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	2bb0      	cmp	r3, #176	; 0xb0
 8004dec:	d018      	beq.n	8004e20 <HAL_RCC_ClockConfig+0x284>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	2b70      	cmp	r3, #112	; 0x70
 8004df4:	d014      	beq.n	8004e20 <HAL_RCC_ClockConfig+0x284>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	2bc0      	cmp	r3, #192	; 0xc0
 8004dfc:	d010      	beq.n	8004e20 <HAL_RCC_ClockConfig+0x284>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	2bd0      	cmp	r3, #208	; 0xd0
 8004e04:	d00c      	beq.n	8004e20 <HAL_RCC_ClockConfig+0x284>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	2be0      	cmp	r3, #224	; 0xe0
 8004e0c:	d008      	beq.n	8004e20 <HAL_RCC_ClockConfig+0x284>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	2bf0      	cmp	r3, #240	; 0xf0
 8004e14:	d004      	beq.n	8004e20 <HAL_RCC_ClockConfig+0x284>
 8004e16:	f240 413c 	movw	r1, #1084	; 0x43c
 8004e1a:	4806      	ldr	r0, [pc, #24]	; (8004e34 <HAL_RCC_ClockConfig+0x298>)
 8004e1c:	f7fc fc4e 	bl	80016bc <assert_failed>
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7ff f8c0 	bl	8003faa <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004e2a:	f7fd fa35 	bl	8002298 <HAL_GetTick>
 8004e2e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004e30:	e00d      	b.n	8004e4e <HAL_RCC_ClockConfig+0x2b2>
 8004e32:	bf00      	nop
 8004e34:	0800e290 	.word	0x0800e290
 8004e38:	58004000 	.word	0x58004000
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004e3c:	f7fd fa2c 	bl	8002298 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_ClockConfig+0x2b2>
      {
        return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e104      	b.n	8005058 <HAL_RCC_ClockConfig+0x4bc>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004e4e:	f7ff f9a3 	bl	8004198 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d0f1      	beq.n	8004e3c <HAL_RCC_ClockConfig+0x2a0>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d033      	beq.n	8004ecc <HAL_RCC_ClockConfig+0x330>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d018      	beq.n	8004e9e <HAL_RCC_ClockConfig+0x302>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e74:	d013      	beq.n	8004e9e <HAL_RCC_ClockConfig+0x302>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004e7e:	d00e      	beq.n	8004e9e <HAL_RCC_ClockConfig+0x302>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004e88:	d009      	beq.n	8004e9e <HAL_RCC_ClockConfig+0x302>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e92:	d004      	beq.n	8004e9e <HAL_RCC_ClockConfig+0x302>
 8004e94:	f240 414d 	movw	r1, #1101	; 0x44d
 8004e98:	4871      	ldr	r0, [pc, #452]	; (8005060 <HAL_RCC_ClockConfig+0x4c4>)
 8004e9a:	f7fc fc0f 	bl	80016bc <assert_failed>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7ff f898 	bl	8003fd8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004ea8:	f7fd f9f6 	bl	8002298 <HAL_GetTick>
 8004eac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004eae:	e008      	b.n	8004ec2 <HAL_RCC_ClockConfig+0x326>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004eb0:	f7fd f9f2 	bl	8002298 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCC_ClockConfig+0x326>
      {
        return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e0ca      	b.n	8005058 <HAL_RCC_ClockConfig+0x4bc>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004ec2:	f7ff f97c 	bl	80041be <LL_RCC_IsActiveFlag_PPRE1>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d0f1      	beq.n	8004eb0 <HAL_RCC_ClockConfig+0x314>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0308 	and.w	r3, r3, #8
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d034      	beq.n	8004f42 <HAL_RCC_ClockConfig+0x3a6>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d018      	beq.n	8004f12 <HAL_RCC_ClockConfig+0x376>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ee8:	d013      	beq.n	8004f12 <HAL_RCC_ClockConfig+0x376>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004ef2:	d00e      	beq.n	8004f12 <HAL_RCC_ClockConfig+0x376>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004efc:	d009      	beq.n	8004f12 <HAL_RCC_ClockConfig+0x376>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f06:	d004      	beq.n	8004f12 <HAL_RCC_ClockConfig+0x376>
 8004f08:	f240 415e 	movw	r1, #1118	; 0x45e
 8004f0c:	4854      	ldr	r0, [pc, #336]	; (8005060 <HAL_RCC_ClockConfig+0x4c4>)
 8004f0e:	f7fc fbd5 	bl	80016bc <assert_failed>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7ff f871 	bl	8004000 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004f1e:	f7fd f9bb 	bl	8002298 <HAL_GetTick>
 8004f22:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004f24:	e008      	b.n	8004f38 <HAL_RCC_ClockConfig+0x39c>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f26:	f7fd f9b7 	bl	8002298 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d901      	bls.n	8004f38 <HAL_RCC_ClockConfig+0x39c>
      {
        return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e08f      	b.n	8005058 <HAL_RCC_ClockConfig+0x4bc>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004f38:	f7ff f953 	bl	80041e2 <LL_RCC_IsActiveFlag_PPRE2>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d0f1      	beq.n	8004f26 <HAL_RCC_ClockConfig+0x38a>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d058      	beq.n	8005000 <HAL_RCC_ClockConfig+0x464>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d010      	beq.n	8004f78 <HAL_RCC_ClockConfig+0x3dc>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d00c      	beq.n	8004f78 <HAL_RCC_ClockConfig+0x3dc>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d008      	beq.n	8004f78 <HAL_RCC_ClockConfig+0x3dc>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	2b03      	cmp	r3, #3
 8004f6c:	d004      	beq.n	8004f78 <HAL_RCC_ClockConfig+0x3dc>
 8004f6e:	f240 416f 	movw	r1, #1135	; 0x46f
 8004f72:	483b      	ldr	r0, [pc, #236]	; (8005060 <HAL_RCC_ClockConfig+0x4c4>)
 8004f74:	f7fc fba2 	bl	80016bc <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d106      	bne.n	8004f8e <HAL_RCC_ClockConfig+0x3f2>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004f80:	f7fe fdfc 	bl	8003b7c <LL_RCC_HSE_IsReady>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d11e      	bne.n	8004fc8 <HAL_RCC_ClockConfig+0x42c>
      {
        return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e064      	b.n	8005058 <HAL_RCC_ClockConfig+0x4bc>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	2b03      	cmp	r3, #3
 8004f94:	d106      	bne.n	8004fa4 <HAL_RCC_ClockConfig+0x408>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004f96:	f7ff f897 	bl	80040c8 <LL_RCC_PLL_IsReady>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d113      	bne.n	8004fc8 <HAL_RCC_ClockConfig+0x42c>
      {
        return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e059      	b.n	8005058 <HAL_RCC_ClockConfig+0x4bc>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d106      	bne.n	8004fba <HAL_RCC_ClockConfig+0x41e>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004fac:	f7fe ff64 	bl	8003e78 <LL_RCC_MSI_IsReady>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d108      	bne.n	8004fc8 <HAL_RCC_ClockConfig+0x42c>
      {
        return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e04e      	b.n	8005058 <HAL_RCC_ClockConfig+0x4bc>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004fba:	f7fe fe0f 	bl	8003bdc <LL_RCC_HSI_IsReady>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <HAL_RCC_ClockConfig+0x42c>
      {
        return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e047      	b.n	8005058 <HAL_RCC_ClockConfig+0x4bc>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7fe ffa2 	bl	8003f16 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fd2:	f7fd f961 	bl	8002298 <HAL_GetTick>
 8004fd6:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fd8:	e00a      	b.n	8004ff0 <HAL_RCC_ClockConfig+0x454>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fda:	f7fd f95d 	bl	8002298 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d901      	bls.n	8004ff0 <HAL_RCC_ClockConfig+0x454>
      {
        return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e033      	b.n	8005058 <HAL_RCC_ClockConfig+0x4bc>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ff0:	f7fe ffa5 	bl	8003f3e <LL_RCC_GetSysClkSource>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d1ec      	bne.n	8004fda <HAL_RCC_ClockConfig+0x43e>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005000:	4b18      	ldr	r3, [pc, #96]	; (8005064 <HAL_RCC_ClockConfig+0x4c8>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0307 	and.w	r3, r3, #7
 8005008:	683a      	ldr	r2, [r7, #0]
 800500a:	429a      	cmp	r2, r3
 800500c:	d21b      	bcs.n	8005046 <HAL_RCC_ClockConfig+0x4aa>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800500e:	4b15      	ldr	r3, [pc, #84]	; (8005064 <HAL_RCC_ClockConfig+0x4c8>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f023 0207 	bic.w	r2, r3, #7
 8005016:	4913      	ldr	r1, [pc, #76]	; (8005064 <HAL_RCC_ClockConfig+0x4c8>)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	4313      	orrs	r3, r2
 800501c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800501e:	f7fd f93b 	bl	8002298 <HAL_GetTick>
 8005022:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005024:	e008      	b.n	8005038 <HAL_RCC_ClockConfig+0x49c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005026:	f7fd f937 	bl	8002298 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b02      	cmp	r3, #2
 8005032:	d901      	bls.n	8005038 <HAL_RCC_ClockConfig+0x49c>
      {
        return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e00f      	b.n	8005058 <HAL_RCC_ClockConfig+0x4bc>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005038:	4b0a      	ldr	r3, [pc, #40]	; (8005064 <HAL_RCC_ClockConfig+0x4c8>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0307 	and.w	r3, r3, #7
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	429a      	cmp	r2, r3
 8005044:	d1ef      	bne.n	8005026 <HAL_RCC_ClockConfig+0x48a>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 8005046:	f7fc ff33 	bl	8001eb0 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800504a:	f7fd f931 	bl	80022b0 <HAL_GetTickPrio>
 800504e:	4603      	mov	r3, r0
 8005050:	4618      	mov	r0, r3
 8005052:	f7fd f8d5 	bl	8002200 <HAL_InitTick>
 8005056:	4603      	mov	r3, r0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	0800e290 	.word	0x0800e290
 8005064:	58004000 	.word	0x58004000

08005068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005068:	b590      	push	{r4, r7, lr}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800506e:	f7fe ff66 	bl	8003f3e <LL_RCC_GetSysClkSource>
 8005072:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10a      	bne.n	8005090 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800507a:	f7fe ff22 	bl	8003ec2 <LL_RCC_MSI_GetRange>
 800507e:	4603      	mov	r3, r0
 8005080:	091b      	lsrs	r3, r3, #4
 8005082:	f003 030f 	and.w	r3, r3, #15
 8005086:	4a2a      	ldr	r2, [pc, #168]	; (8005130 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800508c:	60fb      	str	r3, [r7, #12]
 800508e:	e04a      	b.n	8005126 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b04      	cmp	r3, #4
 8005094:	d102      	bne.n	800509c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005096:	4b27      	ldr	r3, [pc, #156]	; (8005134 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005098:	60fb      	str	r3, [r7, #12]
 800509a:	e044      	b.n	8005126 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b08      	cmp	r3, #8
 80050a0:	d10a      	bne.n	80050b8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80050a2:	f7fe fd1d 	bl	8003ae0 <LL_RCC_HSE_IsEnabledDiv2>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d102      	bne.n	80050b2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80050ac:	4b21      	ldr	r3, [pc, #132]	; (8005134 <HAL_RCC_GetSysClockFreq+0xcc>)
 80050ae:	60fb      	str	r3, [r7, #12]
 80050b0:	e039      	b.n	8005126 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80050b2:	4b21      	ldr	r3, [pc, #132]	; (8005138 <HAL_RCC_GetSysClockFreq+0xd0>)
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	e036      	b.n	8005126 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80050b8:	f7ff f83d 	bl	8004136 <LL_RCC_PLL_GetMainSource>
 80050bc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d002      	beq.n	80050ca <HAL_RCC_GetSysClockFreq+0x62>
 80050c4:	2b03      	cmp	r3, #3
 80050c6:	d003      	beq.n	80050d0 <HAL_RCC_GetSysClockFreq+0x68>
 80050c8:	e00d      	b.n	80050e6 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80050ca:	4b1a      	ldr	r3, [pc, #104]	; (8005134 <HAL_RCC_GetSysClockFreq+0xcc>)
 80050cc:	60bb      	str	r3, [r7, #8]
        break;
 80050ce:	e015      	b.n	80050fc <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80050d0:	f7fe fd06 	bl	8003ae0 <LL_RCC_HSE_IsEnabledDiv2>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d102      	bne.n	80050e0 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80050da:	4b16      	ldr	r3, [pc, #88]	; (8005134 <HAL_RCC_GetSysClockFreq+0xcc>)
 80050dc:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80050de:	e00d      	b.n	80050fc <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 80050e0:	4b15      	ldr	r3, [pc, #84]	; (8005138 <HAL_RCC_GetSysClockFreq+0xd0>)
 80050e2:	60bb      	str	r3, [r7, #8]
        break;
 80050e4:	e00a      	b.n	80050fc <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80050e6:	f7fe feec 	bl	8003ec2 <LL_RCC_MSI_GetRange>
 80050ea:	4603      	mov	r3, r0
 80050ec:	091b      	lsrs	r3, r3, #4
 80050ee:	f003 030f 	and.w	r3, r3, #15
 80050f2:	4a0f      	ldr	r2, [pc, #60]	; (8005130 <HAL_RCC_GetSysClockFreq+0xc8>)
 80050f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050f8:	60bb      	str	r3, [r7, #8]
        break;
 80050fa:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80050fc:	f7fe fff6 	bl	80040ec <LL_RCC_PLL_GetN>
 8005100:	4602      	mov	r2, r0
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	fb03 f402 	mul.w	r4, r3, r2
 8005108:	f7ff f809 	bl	800411e <LL_RCC_PLL_GetDivider>
 800510c:	4603      	mov	r3, r0
 800510e:	091b      	lsrs	r3, r3, #4
 8005110:	3301      	adds	r3, #1
 8005112:	fbb4 f4f3 	udiv	r4, r4, r3
 8005116:	f7fe fff6 	bl	8004106 <LL_RCC_PLL_GetR>
 800511a:	4603      	mov	r3, r0
 800511c:	0f5b      	lsrs	r3, r3, #29
 800511e:	3301      	adds	r3, #1
 8005120:	fbb4 f3f3 	udiv	r3, r4, r3
 8005124:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8005126:	68fb      	ldr	r3, [r7, #12]
}
 8005128:	4618      	mov	r0, r3
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	bd90      	pop	{r4, r7, pc}
 8005130:	0800e4f8 	.word	0x0800e4f8
 8005134:	00f42400 	.word	0x00f42400
 8005138:	01e84800 	.word	0x01e84800

0800513c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800513c:	b598      	push	{r3, r4, r7, lr}
 800513e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005140:	f7ff ff92 	bl	8005068 <HAL_RCC_GetSysClockFreq>
 8005144:	4604      	mov	r4, r0
 8005146:	f7fe ff6f 	bl	8004028 <LL_RCC_GetAHBPrescaler>
 800514a:	4603      	mov	r3, r0
 800514c:	091b      	lsrs	r3, r3, #4
 800514e:	f003 030f 	and.w	r3, r3, #15
 8005152:	4a03      	ldr	r2, [pc, #12]	; (8005160 <HAL_RCC_GetHCLKFreq+0x24>)
 8005154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005158:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800515c:	4618      	mov	r0, r3
 800515e:	bd98      	pop	{r3, r4, r7, pc}
 8005160:	0800e498 	.word	0x0800e498

08005164 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005164:	b598      	push	{r3, r4, r7, lr}
 8005166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005168:	f7ff ffe8 	bl	800513c <HAL_RCC_GetHCLKFreq>
 800516c:	4604      	mov	r4, r0
 800516e:	f7fe ff75 	bl	800405c <LL_RCC_GetAPB1Prescaler>
 8005172:	4603      	mov	r3, r0
 8005174:	0a1b      	lsrs	r3, r3, #8
 8005176:	f003 0307 	and.w	r3, r3, #7
 800517a:	4a04      	ldr	r2, [pc, #16]	; (800518c <HAL_RCC_GetPCLK1Freq+0x28>)
 800517c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005180:	f003 031f 	and.w	r3, r3, #31
 8005184:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005188:	4618      	mov	r0, r3
 800518a:	bd98      	pop	{r3, r4, r7, pc}
 800518c:	0800e4d8 	.word	0x0800e4d8

08005190 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005190:	b598      	push	{r3, r4, r7, lr}
 8005192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005194:	f7ff ffd2 	bl	800513c <HAL_RCC_GetHCLKFreq>
 8005198:	4604      	mov	r4, r0
 800519a:	f7fe ff6b 	bl	8004074 <LL_RCC_GetAPB2Prescaler>
 800519e:	4603      	mov	r3, r0
 80051a0:	0adb      	lsrs	r3, r3, #11
 80051a2:	f003 0307 	and.w	r3, r3, #7
 80051a6:	4a04      	ldr	r2, [pc, #16]	; (80051b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80051a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051ac:	f003 031f 	and.w	r3, r3, #31
 80051b0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	bd98      	pop	{r3, r4, r7, pc}
 80051b8:	0800e4d8 	.word	0x0800e4d8

080051bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80051bc:	b590      	push	{r4, r7, lr}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq, msifreq;

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d025      	beq.n	8005216 <RCC_SetFlashLatencyFromMSIRange+0x5a>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b10      	cmp	r3, #16
 80051ce:	d022      	beq.n	8005216 <RCC_SetFlashLatencyFromMSIRange+0x5a>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b20      	cmp	r3, #32
 80051d4:	d01f      	beq.n	8005216 <RCC_SetFlashLatencyFromMSIRange+0x5a>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2b30      	cmp	r3, #48	; 0x30
 80051da:	d01c      	beq.n	8005216 <RCC_SetFlashLatencyFromMSIRange+0x5a>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b40      	cmp	r3, #64	; 0x40
 80051e0:	d019      	beq.n	8005216 <RCC_SetFlashLatencyFromMSIRange+0x5a>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b50      	cmp	r3, #80	; 0x50
 80051e6:	d016      	beq.n	8005216 <RCC_SetFlashLatencyFromMSIRange+0x5a>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b60      	cmp	r3, #96	; 0x60
 80051ec:	d013      	beq.n	8005216 <RCC_SetFlashLatencyFromMSIRange+0x5a>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b70      	cmp	r3, #112	; 0x70
 80051f2:	d010      	beq.n	8005216 <RCC_SetFlashLatencyFromMSIRange+0x5a>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b80      	cmp	r3, #128	; 0x80
 80051f8:	d00d      	beq.n	8005216 <RCC_SetFlashLatencyFromMSIRange+0x5a>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b90      	cmp	r3, #144	; 0x90
 80051fe:	d00a      	beq.n	8005216 <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2ba0      	cmp	r3, #160	; 0xa0
 8005204:	d007      	beq.n	8005216 <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2bb0      	cmp	r3, #176	; 0xb0
 800520a:	d004      	beq.n	8005216 <RCC_SetFlashLatencyFromMSIRange+0x5a>
 800520c:	f240 6191 	movw	r1, #1681	; 0x691
 8005210:	4817      	ldr	r0, [pc, #92]	; (8005270 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005212:	f7fc fa53 	bl	80016bc <assert_failed>

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2bb0      	cmp	r3, #176	; 0xb0
 800521a:	d903      	bls.n	8005224 <RCC_SetFlashLatencyFromMSIRange+0x68>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800521c:	4b15      	ldr	r3, [pc, #84]	; (8005274 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800521e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005220:	60fb      	str	r3, [r7, #12]
 8005222:	e007      	b.n	8005234 <RCC_SetFlashLatencyFromMSIRange+0x78>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	091b      	lsrs	r3, r3, #4
 8005228:	f003 030f 	and.w	r3, r3, #15
 800522c:	4a11      	ldr	r2, [pc, #68]	; (8005274 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800522e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005232:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005234:	f7fe ff04 	bl	8004040 <LL_RCC_GetAHB4Prescaler>
 8005238:	4603      	mov	r3, r0
 800523a:	091b      	lsrs	r3, r3, #4
 800523c:	f003 030f 	and.w	r3, r3, #15
 8005240:	4a0d      	ldr	r2, [pc, #52]	; (8005278 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	fbb2 f3f3 	udiv	r3, r2, r3
 800524c:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	4a0a      	ldr	r2, [pc, #40]	; (800527c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005252:	fba2 2303 	umull	r2, r3, r2, r3
 8005256:	0c9c      	lsrs	r4, r3, #18
 8005258:	f7fe fc24 	bl	8003aa4 <HAL_PWREx_GetVoltageRange>
 800525c:	4603      	mov	r3, r0
 800525e:	4619      	mov	r1, r3
 8005260:	4620      	mov	r0, r4
 8005262:	f000 f80d 	bl	8005280 <RCC_SetFlashLatency>
 8005266:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8005268:	4618      	mov	r0, r3
 800526a:	3714      	adds	r7, #20
 800526c:	46bd      	mov	sp, r7
 800526e:	bd90      	pop	{r4, r7, pc}
 8005270:	0800e290 	.word	0x0800e290
 8005274:	0800e4f8 	.word	0x0800e4f8
 8005278:	0800e498 	.word	0x0800e498
 800527c:	431bde83 	.word	0x431bde83

08005280 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005280:	b590      	push	{r4, r7, lr}
 8005282:	b093      	sub	sp, #76	; 0x4c
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800528a:	4b39      	ldr	r3, [pc, #228]	; (8005370 <RCC_SetFlashLatency+0xf0>)
 800528c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005290:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005292:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005296:	4a37      	ldr	r2, [pc, #220]	; (8005374 <RCC_SetFlashLatency+0xf4>)
 8005298:	f107 031c 	add.w	r3, r7, #28
 800529c:	ca07      	ldmia	r2, {r0, r1, r2}
 800529e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80052a2:	4b35      	ldr	r3, [pc, #212]	; (8005378 <RCC_SetFlashLatency+0xf8>)
 80052a4:	f107 040c 	add.w	r4, r7, #12
 80052a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80052aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80052ae:	2300      	movs	r3, #0
 80052b0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052b8:	d11c      	bne.n	80052f4 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80052ba:	2300      	movs	r3, #0
 80052bc:	643b      	str	r3, [r7, #64]	; 0x40
 80052be:	e015      	b.n	80052ec <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80052c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80052c8:	4413      	add	r3, r2
 80052ca:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d808      	bhi.n	80052e6 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80052d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80052dc:	4413      	add	r3, r2
 80052de:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80052e2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80052e4:	e022      	b.n	800532c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80052e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052e8:	3301      	adds	r3, #1
 80052ea:	643b      	str	r3, [r7, #64]	; 0x40
 80052ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ee:	2b03      	cmp	r3, #3
 80052f0:	d9e6      	bls.n	80052c0 <RCC_SetFlashLatency+0x40>
 80052f2:	e01b      	b.n	800532c <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80052f4:	2300      	movs	r3, #0
 80052f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052f8:	e015      	b.n	8005326 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80052fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005302:	4413      	add	r3, r2
 8005304:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	429a      	cmp	r2, r3
 800530c:	d808      	bhi.n	8005320 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800530e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005316:	4413      	add	r3, r2
 8005318:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800531c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800531e:	e005      	b.n	800532c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005322:	3301      	adds	r3, #1
 8005324:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005328:	2b02      	cmp	r3, #2
 800532a:	d9e6      	bls.n	80052fa <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800532c:	4b13      	ldr	r3, [pc, #76]	; (800537c <RCC_SetFlashLatency+0xfc>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f023 0207 	bic.w	r2, r3, #7
 8005334:	4911      	ldr	r1, [pc, #68]	; (800537c <RCC_SetFlashLatency+0xfc>)
 8005336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005338:	4313      	orrs	r3, r2
 800533a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800533c:	f7fc ffac 	bl	8002298 <HAL_GetTick>
 8005340:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005342:	e008      	b.n	8005356 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005344:	f7fc ffa8 	bl	8002298 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b02      	cmp	r3, #2
 8005350:	d901      	bls.n	8005356 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e007      	b.n	8005366 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005356:	4b09      	ldr	r3, [pc, #36]	; (800537c <RCC_SetFlashLatency+0xfc>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0307 	and.w	r3, r3, #7
 800535e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005360:	429a      	cmp	r2, r3
 8005362:	d1ef      	bne.n	8005344 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	374c      	adds	r7, #76	; 0x4c
 800536a:	46bd      	mov	sp, r7
 800536c:	bd90      	pop	{r4, r7, pc}
 800536e:	bf00      	nop
 8005370:	0800e2c8 	.word	0x0800e2c8
 8005374:	0800e2d8 	.word	0x0800e2d8
 8005378:	0800e2e4 	.word	0x0800e2e4
 800537c:	58004000 	.word	0x58004000

08005380 <LL_RCC_LSE_IsEnabled>:
{
 8005380:	b480      	push	{r7}
 8005382:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800538c:	f003 0301 	and.w	r3, r3, #1
 8005390:	2b01      	cmp	r3, #1
 8005392:	d101      	bne.n	8005398 <LL_RCC_LSE_IsEnabled+0x18>
 8005394:	2301      	movs	r3, #1
 8005396:	e000      	b.n	800539a <LL_RCC_LSE_IsEnabled+0x1a>
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <LL_RCC_LSE_IsReady>:
{
 80053a4:	b480      	push	{r7}
 80053a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80053a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d101      	bne.n	80053bc <LL_RCC_LSE_IsReady+0x18>
 80053b8:	2301      	movs	r3, #1
 80053ba:	e000      	b.n	80053be <LL_RCC_LSE_IsReady+0x1a>
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <LL_RCC_SetRFWKPClockSource>:
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80053d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80053dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <LL_RCC_SetSMPSClockSource>:
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80053fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005402:	f023 0203 	bic.w	r2, r3, #3
 8005406:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4313      	orrs	r3, r2
 800540e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <LL_RCC_SetSMPSPrescaler>:
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800542e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4313      	orrs	r3, r2
 8005436:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <LL_RCC_SetUSARTClockSource>:
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800544c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005454:	f023 0203 	bic.w	r2, r3, #3
 8005458:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4313      	orrs	r3, r2
 8005460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <LL_RCC_SetLPUARTClockSource>:
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800547c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005480:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005484:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4313      	orrs	r3, r2
 800548c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <LL_RCC_SetI2CClockSource>:
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80054a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	091b      	lsrs	r3, r3, #4
 80054b0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80054b4:	43db      	mvns	r3, r3
 80054b6:	401a      	ands	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	011b      	lsls	r3, r3, #4
 80054bc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80054c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054c4:	4313      	orrs	r3, r2
 80054c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80054ca:	bf00      	nop
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <LL_RCC_SetLPTIMClockSource>:
{
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80054de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	0c1b      	lsrs	r3, r3, #16
 80054ea:	041b      	lsls	r3, r3, #16
 80054ec:	43db      	mvns	r3, r3
 80054ee:	401a      	ands	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	041b      	lsls	r3, r3, #16
 80054f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054f8:	4313      	orrs	r3, r2
 80054fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80054fe:	bf00      	nop
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <LL_RCC_SetSAIClockSource>:
{
 800550a:	b480      	push	{r7}
 800550c:	b083      	sub	sp, #12
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800551a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800551e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4313      	orrs	r3, r2
 8005526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800552a:	bf00      	nop
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr

08005536 <LL_RCC_SetRNGClockSource>:
{
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800553e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005546:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800554a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4313      	orrs	r3, r2
 8005552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005556:	bf00      	nop
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr

08005562 <LL_RCC_SetCLK48ClockSource>:
{
 8005562:	b480      	push	{r7}
 8005564:	b083      	sub	sp, #12
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800556a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800556e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005572:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005576:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4313      	orrs	r3, r2
 800557e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005582:	bf00      	nop
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <LL_RCC_SetUSBClockSource>:
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b082      	sub	sp, #8
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f7ff ffe3 	bl	8005562 <LL_RCC_SetCLK48ClockSource>
}
 800559c:	bf00      	nop
 800559e:	3708      	adds	r7, #8
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <LL_RCC_SetADCClockSource>:
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80055ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4313      	orrs	r3, r2
 80055c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <LL_RCC_SetRTCClockSource>:
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80055d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <LL_RCC_GetRTCClockSource>:
{
 80055fc:	b480      	push	{r7}
 80055fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005608:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800560c:	4618      	mov	r0, r3
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <LL_RCC_ForceBackupDomainReset>:
{
 8005616:	b480      	push	{r7}
 8005618:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800561a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800561e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005622:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800562a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800562e:	bf00      	nop
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005638:	b480      	push	{r7}
 800563a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800563c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005644:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800564c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005650:	bf00      	nop
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <LL_RCC_PLLSAI1_Enable>:
{
 800565a:	b480      	push	{r7}
 800565c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800565e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005668:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800566c:	6013      	str	r3, [r2, #0]
}
 800566e:	bf00      	nop
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <LL_RCC_PLLSAI1_Disable>:
{
 8005678:	b480      	push	{r7}
 800567a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800567c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005686:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800568a:	6013      	str	r3, [r2, #0]
}
 800568c:	bf00      	nop
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <LL_RCC_PLLSAI1_IsReady>:
{
 8005696:	b480      	push	{r7}
 8005698:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800569a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056a8:	d101      	bne.n	80056ae <LL_RCC_PLLSAI1_IsReady+0x18>
 80056aa:	2301      	movs	r3, #1
 80056ac:	e000      	b.n	80056b0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
	...

080056bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b088      	sub	sp, #32
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80056c4:	2300      	movs	r3, #0
 80056c6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80056c8:	2300      	movs	r3, #0
 80056ca:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0301 	and.w	r3, r3, #1
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d14b      	bne.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d145      	bne.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0304 	and.w	r3, r3, #4
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d13f      	bne.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0308 	and.w	r3, r3, #8
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d139      	bne.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0310 	and.w	r3, r3, #16
 8005704:	2b00      	cmp	r3, #0
 8005706:	d133      	bne.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0320 	and.w	r3, r3, #32
 8005710:	2b00      	cmp	r3, #0
 8005712:	d12d      	bne.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571c:	2b00      	cmp	r3, #0
 800571e:	d127      	bne.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005728:	2b00      	cmp	r3, #0
 800572a:	d121      	bne.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005734:	2b00      	cmp	r3, #0
 8005736:	d11b      	bne.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005740:	2b00      	cmp	r3, #0
 8005742:	d115      	bne.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800574c:	2b00      	cmp	r3, #0
 800574e:	d10f      	bne.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d109      	bne.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d103      	bne.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005768:	219b      	movs	r1, #155	; 0x9b
 800576a:	485b      	ldr	r0, [pc, #364]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800576c:	f7fb ffa6 	bl	80016bc <assert_failed>

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005778:	2b00      	cmp	r3, #0
 800577a:	d04a      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005780:	2b00      	cmp	r3, #0
 8005782:	d012      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0xee>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005788:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800578c:	d00d      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0xee>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005792:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005796:	d008      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0xee>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80057a0:	d003      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0xee>
 80057a2:	21a2      	movs	r1, #162	; 0xa2
 80057a4:	484c      	ldr	r0, [pc, #304]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80057a6:	f7fb ff89 	bl	80016bc <assert_failed>

    switch (PeriphClkInit->Sai1ClockSelection)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057b2:	d00c      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x112>
 80057b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057b8:	d802      	bhi.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d010      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x124>
 80057be:	e017      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x134>
 80057c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057c4:	d017      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
 80057c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80057ca:	d016      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
 80057cc:	e010      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x134>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80057ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057dc:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80057de:	e00d      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	3304      	adds	r3, #4
 80057e4:	4618      	mov	r0, r3
 80057e6:	f000 fa8d 	bl	8005d04 <RCCEx_PLLSAI1_ConfigNP>
 80057ea:	4603      	mov	r3, r0
 80057ec:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80057ee:	e005      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x140>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	77fb      	strb	r3, [r7, #31]
        break;
 80057f4:	e002      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80057f6:	bf00      	nop
 80057f8:	e000      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80057fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057fc:	7ffb      	ldrb	r3, [r7, #31]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d105      	bne.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x152>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005806:	4618      	mov	r0, r3
 8005808:	f7ff fe7f 	bl	800550a <LL_RCC_SetSAIClockSource>
 800580c:	e001      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x156>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800580e:	7ffb      	ldrb	r3, [r7, #31]
 8005810:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800581a:	2b00      	cmp	r3, #0
 800581c:	d060      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800581e:	f7ff feed 	bl	80055fc <LL_RCC_GetRTCClockSource>
 8005822:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005828:	2b00      	cmp	r3, #0
 800582a:	d012      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005834:	d00d      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800583e:	d008      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005844:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005848:	d003      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800584a:	21d4      	movs	r1, #212	; 0xd4
 800584c:	4822      	ldr	r0, [pc, #136]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800584e:	f7fb ff35 	bl	80016bc <assert_failed>

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	429a      	cmp	r2, r3
 800585a:	d03f      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x220>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800585c:	f7fe f912 	bl	8003a84 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d105      	bne.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586a:	4618      	mov	r0, r3
 800586c:	f7ff feb0 	bl	80055d0 <LL_RCC_SetRTCClockSource>
 8005870:	e02e      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x214>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800587a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800587c:	f7ff fecb 	bl	8005616 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005880:	f7ff feda 	bl	8005638 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588e:	4313      	orrs	r3, r2
 8005890:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005892:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800589c:	f7ff fd70 	bl	8005380 <LL_RCC_LSE_IsEnabled>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d114      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x214>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80058a6:	f7fc fcf7 	bl	8002298 <HAL_GetTick>
 80058aa:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80058ac:	e00b      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ae:	f7fc fcf3 	bl	8002298 <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058bc:	4293      	cmp	r3, r2
 80058be:	d902      	bls.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
            {
              ret = HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	77fb      	strb	r3, [r7, #31]
              break;
 80058c4:	e004      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x214>
          while (LL_RCC_LSE_IsReady() != 1U)
 80058c6:	f7ff fd6d 	bl	80053a4 <LL_RCC_LSE_IsReady>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d1ee      	bne.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x1f2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80058d0:	7ffb      	ldrb	r3, [r7, #31]
 80058d2:	77bb      	strb	r3, [r7, #30]
 80058d4:	e004      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x224>
 80058d6:	bf00      	nop
 80058d8:	0800e2f4 	.word	0x0800e2f4
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058dc:	7ffb      	ldrb	r3, [r7, #31]
 80058de:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d019      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x264>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d010      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d00c      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	2b03      	cmp	r3, #3
 8005902:	d008      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	2b02      	cmp	r3, #2
 800590a:	d004      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800590c:	f44f 7189 	mov.w	r1, #274	; 0x112
 8005910:	4896      	ldr	r0, [pc, #600]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8005912:	f7fb fed3 	bl	80016bc <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	4618      	mov	r0, r3
 800591c:	f7ff fd92 	bl	8005444 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0302 	and.w	r3, r3, #2
 8005928:	2b00      	cmp	r3, #0
 800592a:	d01c      	beq.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d013      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	69db      	ldr	r3, [r3, #28]
 8005938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800593c:	d00e      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	69db      	ldr	r3, [r3, #28]
 8005942:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005946:	d009      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	69db      	ldr	r3, [r3, #28]
 800594c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005950:	d004      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8005952:	f240 111d 	movw	r1, #285	; 0x11d
 8005956:	4885      	ldr	r0, [pc, #532]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8005958:	f7fb feb0 	bl	80016bc <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	69db      	ldr	r3, [r3, #28]
 8005960:	4618      	mov	r0, r3
 8005962:	f7ff fd85 	bl	8005470 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0310 	and.w	r3, r3, #16
 800596e:	2b00      	cmp	r3, #0
 8005970:	d01d      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005976:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800597a:	d013      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005980:	4a7b      	ldr	r2, [pc, #492]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d00e      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598a:	4a7a      	ldr	r2, [pc, #488]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d009      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005994:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8005998:	d004      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 800599a:	f240 1127 	movw	r1, #295	; 0x127
 800599e:	4873      	ldr	r0, [pc, #460]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80059a0:	f7fb fe8c 	bl	80016bc <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7ff fd94 	bl	80054d6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0320 	and.w	r3, r3, #32
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d01d      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x33a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80059c2:	d013      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x330>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c8:	4a6b      	ldr	r2, [pc, #428]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d00e      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x330>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d2:	4a6a      	ldr	r2, [pc, #424]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x4c0>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d009      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x330>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059dc:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80059e0:	d004      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x330>
 80059e2:	f44f 7197 	mov.w	r1, #302	; 0x12e
 80059e6:	4861      	ldr	r0, [pc, #388]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80059e8:	f7fb fe68 	bl	80016bc <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f0:	4618      	mov	r0, r3
 80059f2:	f7ff fd70 	bl	80054d6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0304 	and.w	r3, r3, #4
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d018      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x378>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a0a:	d00e      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a1b      	ldr	r3, [r3, #32]
 8005a10:	4a5b      	ldr	r2, [pc, #364]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x4c4>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d009      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	4a5a      	ldr	r2, [pc, #360]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d004      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005a20:	f44f 719b 	mov.w	r1, #310	; 0x136
 8005a24:	4851      	ldr	r0, [pc, #324]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8005a26:	f7fb fe49 	bl	80016bc <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7ff fd34 	bl	800549c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0308 	and.w	r3, r3, #8
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d018      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a48:	d00e      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4e:	4a4e      	ldr	r2, [pc, #312]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d009      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a58:	4a4c      	ldr	r2, [pc, #304]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d004      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005a5e:	f240 1141 	movw	r1, #321	; 0x141
 8005a62:	4842      	ldr	r0, [pc, #264]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8005a64:	f7fb fe2a 	bl	80016bc <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7ff fd15 	bl	800549c <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d03a      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d013      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a8e:	d00e      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a98:	d009      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a9e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005aa2:	d004      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005aa4:	f240 114b 	movw	r1, #331	; 0x14b
 8005aa8:	4830      	ldr	r0, [pc, #192]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8005aaa:	f7fb fe07 	bl	80016bc <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f7ff fd6b 	bl	800558e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005abc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ac0:	d107      	bne.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x416>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005acc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ad0:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ada:	d10b      	bne.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x438>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	3304      	adds	r3, #4
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 f9a7 	bl	8005e34 <RCCEx_PLLSAI1_ConfigNQ>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005aea:	7ffb      	ldrb	r3, [r7, #31]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d001      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x438>
      {
        /* set overall return value */
        status = ret;
 8005af0:	7ffb      	ldrb	r3, [r7, #31]
 8005af2:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d05f      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x504>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b08:	d01c      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005b12:	d017      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b18:	f1b3 5fe0 	cmp.w	r3, #469762048	; 0x1c000000
 8005b1c:	d012      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00e      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b2e:	d009      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b38:	d004      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005b3a:	f240 1167 	movw	r1, #359	; 0x167
 8005b3e:	480b      	ldr	r0, [pc, #44]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8005b40:	f7fb fdbc 	bl	80016bc <assert_failed>

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b4c:	d008      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b56:	d003      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d117      	bne.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7ff fce6 	bl	8005536 <LL_RCC_SetRNGClockSource>
 8005b6a:	e01c      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8005b6c:	0800e2f4 	.word	0x0800e2f4
 8005b70:	000c0004 	.word	0x000c0004
 8005b74:	000c0008 	.word	0x000c0008
 8005b78:	00300010 	.word	0x00300010
 8005b7c:	00300020 	.word	0x00300020
 8005b80:	00030100 	.word	0x00030100
 8005b84:	00030200 	.word	0x00030200
 8005b88:	00301000 	.word	0x00301000
 8005b8c:	00302000 	.word	0x00302000
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b98:	60fb      	str	r3, [r7, #12]
 8005b9a:	2000      	movs	r0, #0
 8005b9c:	f7ff fccb 	bl	8005536 <LL_RCC_SetRNGClockSource>
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f7ff fcde 	bl	8005562 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005baa:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005bae:	d107      	bne.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bbe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d03a      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x586>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d013      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x540>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bdc:	d00e      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x540>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005be2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005be6:	d009      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x540>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005bf0:	d004      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x540>
 8005bf2:	f240 1177 	movw	r1, #375	; 0x177
 8005bf6:	4842      	ldr	r0, [pc, #264]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005bf8:	f7fb fd60 	bl	80016bc <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7ff fccf 	bl	80055a4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c0e:	d107      	bne.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x564>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c1e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c28:	d10b      	bne.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x586>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	3304      	adds	r3, #4
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f000 f998 	bl	8005f64 <RCCEx_PLLSAI1_ConfigNR>
 8005c34:	4603      	mov	r3, r0
 8005c36:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005c38:	7ffb      	ldrb	r3, [r7, #31]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x586>
      {
        /* set overall return value */
        status = ret;
 8005c3e:	7ffb      	ldrb	r3, [r7, #31]
 8005c40:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d01c      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d013      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c5e:	d00e      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c68:	d009      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c6e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c72:	d004      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
 8005c74:	f240 1195 	movw	r1, #405	; 0x195
 8005c78:	4821      	ldr	r0, [pc, #132]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005c7a:	f7fb fd1f 	bl	80016bc <assert_failed>

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7ff fba0 	bl	80053c8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d02f      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x638>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d010      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x602>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ca0:	2b10      	cmp	r3, #16
 8005ca2:	d00c      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x602>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ca8:	2b20      	cmp	r3, #32
 8005caa:	d008      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x602>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cb0:	2b30      	cmp	r3, #48	; 0x30
 8005cb2:	d004      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x602>
 8005cb4:	f240 11a1 	movw	r1, #417	; 0x1a1
 8005cb8:	4811      	ldr	r0, [pc, #68]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005cba:	f7fb fcff 	bl	80016bc <assert_failed>
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00c      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d008      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d004      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8005cd6:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8005cda:	4809      	ldr	r0, [pc, #36]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005cdc:	f7fb fcee 	bl	80016bc <assert_failed>

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f7ff fb99 	bl	800541c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7ff fb80 	bl	80053f4 <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 8005cf4:	7fbb      	ldrb	r3, [r7, #30]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3720      	adds	r7, #32
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	0800e2f4 	.word	0x0800e2f4

08005d04 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2b05      	cmp	r3, #5
 8005d16:	d903      	bls.n	8005d20 <RCCEx_PLLSAI1_ConfigNP+0x1c>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2b7f      	cmp	r3, #127	; 0x7f
 8005d1e:	d904      	bls.n	8005d2a <RCCEx_PLLSAI1_ConfigNP+0x26>
 8005d20:	f240 718d 	movw	r1, #1933	; 0x78d
 8005d24:	4842      	ldr	r0, [pc, #264]	; (8005e30 <RCCEx_PLLSAI1_ConfigNP+0x12c>)
 8005d26:	f7fb fcc9 	bl	80016bc <assert_failed>
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d32:	d304      	bcc.n	8005d3e <RCCEx_PLLSAI1_ConfigNP+0x3a>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	f5b3 1f78 	cmp.w	r3, #4063232	; 0x3e0000
 8005d3c:	d904      	bls.n	8005d48 <RCCEx_PLLSAI1_ConfigNP+0x44>
 8005d3e:	f240 718e 	movw	r1, #1934	; 0x78e
 8005d42:	483b      	ldr	r0, [pc, #236]	; (8005e30 <RCCEx_PLLSAI1_ConfigNP+0x12c>)
 8005d44:	f7fb fcba 	bl	80016bc <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10b      	bne.n	8005d6c <RCCEx_PLLSAI1_ConfigNP+0x68>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d105      	bne.n	8005d6c <RCCEx_PLLSAI1_ConfigNP+0x68>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d007      	beq.n	8005d7c <RCCEx_PLLSAI1_ConfigNP+0x78>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005d74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d004      	beq.n	8005d86 <RCCEx_PLLSAI1_ConfigNP+0x82>
 8005d7c:	f240 718f 	movw	r1, #1935	; 0x78f
 8005d80:	482b      	ldr	r0, [pc, #172]	; (8005e30 <RCCEx_PLLSAI1_ConfigNP+0x12c>)
 8005d82:	f7fb fc9b 	bl	80016bc <assert_failed>

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005d86:	f7ff fc77 	bl	8005678 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005d8a:	f7fc fa85 	bl	8002298 <HAL_GetTick>
 8005d8e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005d90:	e009      	b.n	8005da6 <RCCEx_PLLSAI1_ConfigNP+0xa2>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d92:	f7fc fa81 	bl	8002298 <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d902      	bls.n	8005da6 <RCCEx_PLLSAI1_ConfigNP+0xa2>
    {
      status = HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	73fb      	strb	r3, [r7, #15]
      break;
 8005da4:	e004      	b.n	8005db0 <RCCEx_PLLSAI1_ConfigNP+0xac>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005da6:	f7ff fc76 	bl	8005696 <LL_RCC_PLLSAI1_IsReady>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d1f0      	bne.n	8005d92 <RCCEx_PLLSAI1_ConfigNP+0x8e>
    }
  }

  if (status == HAL_OK)
 8005db0:	7bfb      	ldrb	r3, [r7, #15]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d137      	bne.n	8005e26 <RCCEx_PLLSAI1_ConfigNP+0x122>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	021b      	lsls	r3, r3, #8
 8005dc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005de0:	4313      	orrs	r3, r2
 8005de2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005de4:	f7ff fc39 	bl	800565a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005de8:	f7fc fa56 	bl	8002298 <HAL_GetTick>
 8005dec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005dee:	e009      	b.n	8005e04 <RCCEx_PLLSAI1_ConfigNP+0x100>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005df0:	f7fc fa52 	bl	8002298 <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d902      	bls.n	8005e04 <RCCEx_PLLSAI1_ConfigNP+0x100>
      {
        status = HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	73fb      	strb	r3, [r7, #15]
        break;
 8005e02:	e004      	b.n	8005e0e <RCCEx_PLLSAI1_ConfigNP+0x10a>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005e04:	f7ff fc47 	bl	8005696 <LL_RCC_PLLSAI1_IsReady>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d1f0      	bne.n	8005df0 <RCCEx_PLLSAI1_ConfigNP+0xec>
      }
    }

    if (status == HAL_OK)
 8005e0e:	7bfb      	ldrb	r3, [r7, #15]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d108      	bne.n	8005e26 <RCCEx_PLLSAI1_ConfigNP+0x122>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e18:	691a      	ldr	r2, [r3, #16]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e22:	4313      	orrs	r3, r2
 8005e24:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	0800e2f4 	.word	0x0800e2f4

08005e34 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2b05      	cmp	r3, #5
 8005e46:	d903      	bls.n	8005e50 <RCCEx_PLLSAI1_ConfigNQ+0x1c>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2b7f      	cmp	r3, #127	; 0x7f
 8005e4e:	d904      	bls.n	8005e5a <RCCEx_PLLSAI1_ConfigNQ+0x26>
 8005e50:	f240 71d2 	movw	r1, #2002	; 0x7d2
 8005e54:	4842      	ldr	r0, [pc, #264]	; (8005f60 <RCCEx_PLLSAI1_ConfigNQ+0x12c>)
 8005e56:	f7fb fc31 	bl	80016bc <assert_failed>
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e62:	d304      	bcc.n	8005e6e <RCCEx_PLLSAI1_ConfigNQ+0x3a>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8005e6c:	d904      	bls.n	8005e78 <RCCEx_PLLSAI1_ConfigNQ+0x44>
 8005e6e:	f240 71d3 	movw	r1, #2003	; 0x7d3
 8005e72:	483b      	ldr	r0, [pc, #236]	; (8005f60 <RCCEx_PLLSAI1_ConfigNQ+0x12c>)
 8005e74:	f7fb fc22 	bl	80016bc <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10b      	bne.n	8005e9c <RCCEx_PLLSAI1_ConfigNQ+0x68>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d105      	bne.n	8005e9c <RCCEx_PLLSAI1_ConfigNQ+0x68>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d007      	beq.n	8005eac <RCCEx_PLLSAI1_ConfigNQ+0x78>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005ea4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d004      	beq.n	8005eb6 <RCCEx_PLLSAI1_ConfigNQ+0x82>
 8005eac:	f240 71d4 	movw	r1, #2004	; 0x7d4
 8005eb0:	482b      	ldr	r0, [pc, #172]	; (8005f60 <RCCEx_PLLSAI1_ConfigNQ+0x12c>)
 8005eb2:	f7fb fc03 	bl	80016bc <assert_failed>

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005eb6:	f7ff fbdf 	bl	8005678 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005eba:	f7fc f9ed 	bl	8002298 <HAL_GetTick>
 8005ebe:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005ec0:	e009      	b.n	8005ed6 <RCCEx_PLLSAI1_ConfigNQ+0xa2>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ec2:	f7fc f9e9 	bl	8002298 <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d902      	bls.n	8005ed6 <RCCEx_PLLSAI1_ConfigNQ+0xa2>
    {
      status = HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ed4:	e004      	b.n	8005ee0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005ed6:	f7ff fbde 	bl	8005696 <LL_RCC_PLLSAI1_IsReady>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1f0      	bne.n	8005ec2 <RCCEx_PLLSAI1_ConfigNQ+0x8e>
    }
  }

  if (status == HAL_OK)
 8005ee0:	7bfb      	ldrb	r3, [r7, #15]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d137      	bne.n	8005f56 <RCCEx_PLLSAI1_ConfigNQ+0x122>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	021b      	lsls	r3, r3, #8
 8005ef6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005efa:	4313      	orrs	r3, r2
 8005efc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f10:	4313      	orrs	r3, r2
 8005f12:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005f14:	f7ff fba1 	bl	800565a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f18:	f7fc f9be 	bl	8002298 <HAL_GetTick>
 8005f1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005f1e:	e009      	b.n	8005f34 <RCCEx_PLLSAI1_ConfigNQ+0x100>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f20:	f7fc f9ba 	bl	8002298 <HAL_GetTick>
 8005f24:	4602      	mov	r2, r0
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d902      	bls.n	8005f34 <RCCEx_PLLSAI1_ConfigNQ+0x100>
      {
        status = HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	73fb      	strb	r3, [r7, #15]
        break;
 8005f32:	e004      	b.n	8005f3e <RCCEx_PLLSAI1_ConfigNQ+0x10a>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005f34:	f7ff fbaf 	bl	8005696 <LL_RCC_PLLSAI1_IsReady>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d1f0      	bne.n	8005f20 <RCCEx_PLLSAI1_ConfigNQ+0xec>
      }
    }

    if (status == HAL_OK)
 8005f3e:	7bfb      	ldrb	r3, [r7, #15]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d108      	bne.n	8005f56 <RCCEx_PLLSAI1_ConfigNQ+0x122>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f48:	691a      	ldr	r2, [r3, #16]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f52:	4313      	orrs	r3, r2
 8005f54:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3710      	adds	r7, #16
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	0800e2f4 	.word	0x0800e2f4

08005f64 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2b05      	cmp	r3, #5
 8005f76:	d903      	bls.n	8005f80 <RCCEx_PLLSAI1_ConfigNR+0x1c>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2b7f      	cmp	r3, #127	; 0x7f
 8005f7e:	d904      	bls.n	8005f8a <RCCEx_PLLSAI1_ConfigNR+0x26>
 8005f80:	f640 0116 	movw	r1, #2070	; 0x816
 8005f84:	4842      	ldr	r0, [pc, #264]	; (8006090 <RCCEx_PLLSAI1_ConfigNR+0x12c>)
 8005f86:	f7fb fb99 	bl	80016bc <assert_failed>
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f92:	d304      	bcc.n	8005f9e <RCCEx_PLLSAI1_ConfigNR+0x3a>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8005f9c:	d904      	bls.n	8005fa8 <RCCEx_PLLSAI1_ConfigNR+0x44>
 8005f9e:	f640 0117 	movw	r1, #2071	; 0x817
 8005fa2:	483b      	ldr	r0, [pc, #236]	; (8006090 <RCCEx_PLLSAI1_ConfigNR+0x12c>)
 8005fa4:	f7fb fb8a 	bl	80016bc <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10b      	bne.n	8005fcc <RCCEx_PLLSAI1_ConfigNR+0x68>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d105      	bne.n	8005fcc <RCCEx_PLLSAI1_ConfigNR+0x68>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d007      	beq.n	8005fdc <RCCEx_PLLSAI1_ConfigNR+0x78>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005fd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d004      	beq.n	8005fe6 <RCCEx_PLLSAI1_ConfigNR+0x82>
 8005fdc:	f640 0118 	movw	r1, #2072	; 0x818
 8005fe0:	482b      	ldr	r0, [pc, #172]	; (8006090 <RCCEx_PLLSAI1_ConfigNR+0x12c>)
 8005fe2:	f7fb fb6b 	bl	80016bc <assert_failed>

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005fe6:	f7ff fb47 	bl	8005678 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005fea:	f7fc f955 	bl	8002298 <HAL_GetTick>
 8005fee:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005ff0:	e009      	b.n	8006006 <RCCEx_PLLSAI1_ConfigNR+0xa2>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ff2:	f7fc f951 	bl	8002298 <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d902      	bls.n	8006006 <RCCEx_PLLSAI1_ConfigNR+0xa2>
    {
      status = HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	73fb      	strb	r3, [r7, #15]
      break;
 8006004:	e004      	b.n	8006010 <RCCEx_PLLSAI1_ConfigNR+0xac>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006006:	f7ff fb46 	bl	8005696 <LL_RCC_PLLSAI1_IsReady>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1f0      	bne.n	8005ff2 <RCCEx_PLLSAI1_ConfigNR+0x8e>
    }
  }

  if (status == HAL_OK)
 8006010:	7bfb      	ldrb	r3, [r7, #15]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d137      	bne.n	8006086 <RCCEx_PLLSAI1_ConfigNR+0x122>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	021b      	lsls	r3, r3, #8
 8006026:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800602a:	4313      	orrs	r3, r2
 800602c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800602e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006040:	4313      	orrs	r3, r2
 8006042:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006044:	f7ff fb09 	bl	800565a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006048:	f7fc f926 	bl	8002298 <HAL_GetTick>
 800604c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800604e:	e009      	b.n	8006064 <RCCEx_PLLSAI1_ConfigNR+0x100>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006050:	f7fc f922 	bl	8002298 <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	2b02      	cmp	r3, #2
 800605c:	d902      	bls.n	8006064 <RCCEx_PLLSAI1_ConfigNR+0x100>
      {
        status = HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	73fb      	strb	r3, [r7, #15]
        break;
 8006062:	e004      	b.n	800606e <RCCEx_PLLSAI1_ConfigNR+0x10a>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006064:	f7ff fb17 	bl	8005696 <LL_RCC_PLLSAI1_IsReady>
 8006068:	4603      	mov	r3, r0
 800606a:	2b01      	cmp	r3, #1
 800606c:	d1f0      	bne.n	8006050 <RCCEx_PLLSAI1_ConfigNR+0xec>
      }
    }

    if (status == HAL_OK)
 800606e:	7bfb      	ldrb	r3, [r7, #15]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d108      	bne.n	8006086 <RCCEx_PLLSAI1_ConfigNR+0x122>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006078:	691a      	ldr	r2, [r3, #16]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006082:	4313      	orrs	r3, r2
 8006084:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006086:	7bfb      	ldrb	r3, [r7, #15]
}
 8006088:	4618      	mov	r0, r3
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	0800e2f4 	.word	0x0800e2f4

08006094 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e0f2      	b.n	800628c <HAL_RTC_Init+0x1f8>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a7a      	ldr	r2, [pc, #488]	; (8006294 <HAL_RTC_Init+0x200>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d003      	beq.n	80060b8 <HAL_RTC_Init+0x24>
 80060b0:	21f0      	movs	r1, #240	; 0xf0
 80060b2:	4879      	ldr	r0, [pc, #484]	; (8006298 <HAL_RTC_Init+0x204>)
 80060b4:	f7fb fb02 	bl	80016bc <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	2b40      	cmp	r3, #64	; 0x40
 80060be:	d007      	beq.n	80060d0 <HAL_RTC_Init+0x3c>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d003      	beq.n	80060d0 <HAL_RTC_Init+0x3c>
 80060c8:	21f1      	movs	r1, #241	; 0xf1
 80060ca:	4873      	ldr	r0, [pc, #460]	; (8006298 <HAL_RTC_Init+0x204>)
 80060cc:	f7fb faf6 	bl	80016bc <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	2b7f      	cmp	r3, #127	; 0x7f
 80060d6:	d903      	bls.n	80060e0 <HAL_RTC_Init+0x4c>
 80060d8:	21f2      	movs	r1, #242	; 0xf2
 80060da:	486f      	ldr	r0, [pc, #444]	; (8006298 <HAL_RTC_Init+0x204>)
 80060dc:	f7fb faee 	bl	80016bc <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060e8:	d303      	bcc.n	80060f2 <HAL_RTC_Init+0x5e>
 80060ea:	21f3      	movs	r1, #243	; 0xf3
 80060ec:	486a      	ldr	r0, [pc, #424]	; (8006298 <HAL_RTC_Init+0x204>)
 80060ee:	f7fb fae5 	bl	80016bc <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d012      	beq.n	8006120 <HAL_RTC_Init+0x8c>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006102:	d00d      	beq.n	8006120 <HAL_RTC_Init+0x8c>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800610c:	d008      	beq.n	8006120 <HAL_RTC_Init+0x8c>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006116:	d003      	beq.n	8006120 <HAL_RTC_Init+0x8c>
 8006118:	21f4      	movs	r1, #244	; 0xf4
 800611a:	485f      	ldr	r0, [pc, #380]	; (8006298 <HAL_RTC_Init+0x204>)
 800611c:	f7fb face 	bl	80016bc <assert_failed>
  assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	695b      	ldr	r3, [r3, #20]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d007      	beq.n	8006138 <HAL_RTC_Init+0xa4>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	695b      	ldr	r3, [r3, #20]
 800612c:	2b02      	cmp	r3, #2
 800612e:	d003      	beq.n	8006138 <HAL_RTC_Init+0xa4>
 8006130:	21f5      	movs	r1, #245	; 0xf5
 8006132:	4859      	ldr	r0, [pc, #356]	; (8006298 <HAL_RTC_Init+0x204>)
 8006134:	f7fb fac2 	bl	80016bc <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d008      	beq.n	8006152 <HAL_RTC_Init+0xbe>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006148:	d003      	beq.n	8006152 <HAL_RTC_Init+0xbe>
 800614a:	21f6      	movs	r1, #246	; 0xf6
 800614c:	4852      	ldr	r0, [pc, #328]	; (8006298 <HAL_RTC_Init+0x204>)
 800614e:	f7fb fab5 	bl	80016bc <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	69db      	ldr	r3, [r3, #28]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d007      	beq.n	800616a <HAL_RTC_Init+0xd6>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	2b01      	cmp	r3, #1
 8006160:	d003      	beq.n	800616a <HAL_RTC_Init+0xd6>
 8006162:	21f7      	movs	r1, #247	; 0xf7
 8006164:	484c      	ldr	r0, [pc, #304]	; (8006298 <HAL_RTC_Init+0x204>)
 8006166:	f7fb faa9 	bl	80016bc <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d106      	bne.n	8006184 <HAL_RTC_Init+0xf0>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7fb fade 	bl	8001740 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2202      	movs	r2, #2
 8006188:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	22ca      	movs	r2, #202	; 0xca
 8006192:	625a      	str	r2, [r3, #36]	; 0x24
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2253      	movs	r2, #83	; 0x53
 800619a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 f8a3 	bl	80062e8 <RTC_EnterInitMode>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d009      	beq.n	80061bc <HAL_RTC_Init+0x128>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	22ff      	movs	r2, #255	; 0xff
 80061ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2204      	movs	r2, #4
 80061b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e067      	b.n	800628c <HAL_RTC_Init+0x1f8>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	6812      	ldr	r2, [r2, #0]
 80061c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80061ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061ce:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6899      	ldr	r1, [r3, #8]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	431a      	orrs	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	431a      	orrs	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	430a      	orrs	r2, r1
 80061ec:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	68d2      	ldr	r2, [r2, #12]
 80061f6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6919      	ldr	r1, [r3, #16]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	041a      	lsls	r2, r3, #16
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	430a      	orrs	r2, r1
 800620a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68da      	ldr	r2, [r3, #12]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800621a:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f022 0203 	bic.w	r2, r2, #3
 800622a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	69da      	ldr	r2, [r3, #28]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	431a      	orrs	r2, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	430a      	orrs	r2, r1
 8006242:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	f003 0320 	and.w	r3, r3, #32
 800624e:	2b00      	cmp	r3, #0
 8006250:	d113      	bne.n	800627a <HAL_RTC_Init+0x1e6>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f822 	bl	800629c <HAL_RTC_WaitForSynchro>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00d      	beq.n	800627a <HAL_RTC_Init+0x1e6>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	22ff      	movs	r2, #255	; 0xff
 8006264:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2204      	movs	r2, #4
 800626a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e008      	b.n	800628c <HAL_RTC_Init+0x1f8>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	22ff      	movs	r2, #255	; 0xff
 8006280:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800628a:	2300      	movs	r3, #0
  }
}
 800628c:	4618      	mov	r0, r3
 800628e:	3708      	adds	r7, #8
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	40002800 	.word	0x40002800
 8006298:	0800e330 	.word	0x0800e330

0800629c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68da      	ldr	r2, [r3, #12]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80062b2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80062b4:	f7fb fff0 	bl	8002298 <HAL_GetTick>
 80062b8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80062ba:	e009      	b.n	80062d0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80062bc:	f7fb ffec 	bl	8002298 <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062ca:	d901      	bls.n	80062d0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80062cc:	2303      	movs	r3, #3
 80062ce:	e007      	b.n	80062e0 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	f003 0320 	and.w	r3, r3, #32
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d0ee      	beq.n	80062bc <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d119      	bne.n	8006332 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006306:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006308:	f7fb ffc6 	bl	8002298 <HAL_GetTick>
 800630c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800630e:	e009      	b.n	8006324 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8006310:	f7fb ffc2 	bl	8002298 <HAL_GetTick>
 8006314:	4602      	mov	r2, r0
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800631e:	d901      	bls.n	8006324 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	e007      	b.n	8006334 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800632e:	2b00      	cmp	r3, #0
 8006330:	d0ee      	beq.n	8006310 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <LL_RCC_GetUSARTClockSource>:
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006348:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4013      	ands	r3, r2
}
 8006350:	4618      	mov	r0, r3
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <LL_RCC_GetLPUARTClockSource>:
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006364:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006368:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4013      	ands	r3, r2
}
 8006370:	4618      	mov	r0, r3
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d101      	bne.n	800638e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e065      	b.n	800645a <HAL_UART_Init+0xde>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00f      	beq.n	80063b6 <HAL_UART_Init+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a32      	ldr	r2, [pc, #200]	; (8006464 <HAL_UART_Init+0xe8>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d019      	beq.n	80063d4 <HAL_UART_Init+0x58>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a30      	ldr	r2, [pc, #192]	; (8006468 <HAL_UART_Init+0xec>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d014      	beq.n	80063d4 <HAL_UART_Init+0x58>
 80063aa:	f44f 719a 	mov.w	r1, #308	; 0x134
 80063ae:	482f      	ldr	r0, [pc, #188]	; (800646c <HAL_UART_Init+0xf0>)
 80063b0:	f7fb f984 	bl	80016bc <assert_failed>
 80063b4:	e00e      	b.n	80063d4 <HAL_UART_Init+0x58>
  }
  else
  {
    /* Check the parameters */
#if defined(LPUART1)
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a2a      	ldr	r2, [pc, #168]	; (8006464 <HAL_UART_Init+0xe8>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d009      	beq.n	80063d4 <HAL_UART_Init+0x58>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a28      	ldr	r2, [pc, #160]	; (8006468 <HAL_UART_Init+0xec>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d004      	beq.n	80063d4 <HAL_UART_Init+0x58>
 80063ca:	f44f 719d 	mov.w	r1, #314	; 0x13a
 80063ce:	4827      	ldr	r0, [pc, #156]	; (800646c <HAL_UART_Init+0xf0>)
 80063d0:	f7fb f974 	bl	80016bc <assert_failed>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d106      	bne.n	80063ec <HAL_UART_Init+0x70>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7fb fe82 	bl	80020f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2224      	movs	r2, #36	; 0x24
 80063f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f022 0201 	bic.w	r2, r2, #1
 8006402:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 f833 	bl	8006470 <UART_SetConfig>
 800640a:	4603      	mov	r3, r0
 800640c:	2b01      	cmp	r3, #1
 800640e:	d101      	bne.n	8006414 <HAL_UART_Init+0x98>
  {
    return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e022      	b.n	800645a <HAL_UART_Init+0xde>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006418:	2b00      	cmp	r3, #0
 800641a:	d002      	beq.n	8006422 <HAL_UART_Init+0xa6>
  {
    UART_AdvFeatureConfig(huart);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f001 f963 	bl	80076e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	685a      	ldr	r2, [r3, #4]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006430:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	689a      	ldr	r2, [r3, #8]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006440:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f042 0201 	orr.w	r2, r2, #1
 8006450:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f001 fa88 	bl	8007968 <UART_CheckIdleState>
 8006458:	4603      	mov	r3, r0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3708      	adds	r7, #8
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	40013800 	.word	0x40013800
 8006468:	40008000 	.word	0x40008000
 800646c:	0800e368 	.word	0x0800e368

08006470 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006470:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006474:	b08a      	sub	sp, #40	; 0x28
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800647a:	2300      	movs	r3, #0
 800647c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800647e:	2300      	movs	r3, #0
 8006480:	76fb      	strb	r3, [r7, #27]
#if defined(LPUART1)
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006482:	2300      	movs	r3, #0
 8006484:	617b      	str	r3, [r7, #20]
#endif
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	4a9f      	ldr	r2, [pc, #636]	; (8006708 <UART_SetConfig+0x298>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d904      	bls.n	800649a <UART_SetConfig+0x2a>
 8006490:	f640 313e 	movw	r1, #2878	; 0xb3e
 8006494:	489d      	ldr	r0, [pc, #628]	; (800670c <UART_SetConfig+0x29c>)
 8006496:	f7fb f911 	bl	80016bc <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064a2:	d00d      	beq.n	80064c0 <UART_SetConfig+0x50>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d009      	beq.n	80064c0 <UART_SetConfig+0x50>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064b4:	d004      	beq.n	80064c0 <UART_SetConfig+0x50>
 80064b6:	f640 313f 	movw	r1, #2879	; 0xb3f
 80064ba:	4894      	ldr	r0, [pc, #592]	; (800670c <UART_SetConfig+0x29c>)
 80064bc:	f7fb f8fe 	bl	80016bc <assert_failed>
#if defined(LPUART1)
  if (UART_INSTANCE_LOWPOWER(huart))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a92      	ldr	r2, [pc, #584]	; (8006710 <UART_SetConfig+0x2a0>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d10e      	bne.n	80064e8 <UART_SetConfig+0x78>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d030      	beq.n	8006534 <UART_SetConfig+0xc4>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064da:	d02b      	beq.n	8006534 <UART_SetConfig+0xc4>
 80064dc:	f640 3143 	movw	r1, #2883	; 0xb43
 80064e0:	488a      	ldr	r0, [pc, #552]	; (800670c <UART_SetConfig+0x29c>)
 80064e2:	f7fb f8eb 	bl	80016bc <assert_failed>
 80064e6:	e025      	b.n	8006534 <UART_SetConfig+0xc4>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064f0:	d012      	beq.n	8006518 <UART_SetConfig+0xa8>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00e      	beq.n	8006518 <UART_SetConfig+0xa8>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006502:	d009      	beq.n	8006518 <UART_SetConfig+0xa8>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800650c:	d004      	beq.n	8006518 <UART_SetConfig+0xa8>
 800650e:	f640 3147 	movw	r1, #2887	; 0xb47
 8006512:	487e      	ldr	r0, [pc, #504]	; (800670c <UART_SetConfig+0x29c>)
 8006514:	f7fb f8d2 	bl	80016bc <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a1b      	ldr	r3, [r3, #32]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d009      	beq.n	8006534 <UART_SetConfig+0xc4>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a1b      	ldr	r3, [r3, #32]
 8006524:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006528:	d004      	beq.n	8006534 <UART_SetConfig+0xc4>
 800652a:	f640 3148 	movw	r1, #2888	; 0xb48
 800652e:	4877      	ldr	r0, [pc, #476]	; (800670c <UART_SetConfig+0x29c>)
 8006530:	f7fb f8c4 	bl	80016bc <assert_failed>
#else
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
#endif

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00e      	beq.n	800655a <UART_SetConfig+0xea>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006544:	d009      	beq.n	800655a <UART_SetConfig+0xea>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800654e:	d004      	beq.n	800655a <UART_SetConfig+0xea>
 8006550:	f640 314f 	movw	r1, #2895	; 0xb4f
 8006554:	486d      	ldr	r0, [pc, #436]	; (800670c <UART_SetConfig+0x29c>)
 8006556:	f7fb f8b1 	bl	80016bc <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	f023 030c 	bic.w	r3, r3, #12
 8006562:	2b00      	cmp	r3, #0
 8006564:	d103      	bne.n	800656e <UART_SetConfig+0xfe>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d104      	bne.n	8006578 <UART_SetConfig+0x108>
 800656e:	f44f 6135 	mov.w	r1, #2896	; 0xb50
 8006572:	4866      	ldr	r0, [pc, #408]	; (800670c <UART_SetConfig+0x29c>)
 8006574:	f7fb f8a2 	bl	80016bc <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d013      	beq.n	80065a8 <UART_SetConfig+0x138>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006588:	d00e      	beq.n	80065a8 <UART_SetConfig+0x138>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006592:	d009      	beq.n	80065a8 <UART_SetConfig+0x138>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800659c:	d004      	beq.n	80065a8 <UART_SetConfig+0x138>
 800659e:	f640 3151 	movw	r1, #2897	; 0xb51
 80065a2:	485a      	ldr	r0, [pc, #360]	; (800670c <UART_SetConfig+0x29c>)
 80065a4:	f7fb f88a 	bl	80016bc <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	69db      	ldr	r3, [r3, #28]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d009      	beq.n	80065c4 <UART_SetConfig+0x154>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	69db      	ldr	r3, [r3, #28]
 80065b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065b8:	d004      	beq.n	80065c4 <UART_SetConfig+0x154>
 80065ba:	f640 3152 	movw	r1, #2898	; 0xb52
 80065be:	4853      	ldr	r0, [pc, #332]	; (800670c <UART_SetConfig+0x29c>)
 80065c0:	f7fb f87c 	bl	80016bc <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d030      	beq.n	800662e <UART_SetConfig+0x1be>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d02c      	beq.n	800662e <UART_SetConfig+0x1be>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d028      	beq.n	800662e <UART_SetConfig+0x1be>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e0:	2b03      	cmp	r3, #3
 80065e2:	d024      	beq.n	800662e <UART_SetConfig+0x1be>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e8:	2b04      	cmp	r3, #4
 80065ea:	d020      	beq.n	800662e <UART_SetConfig+0x1be>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f0:	2b05      	cmp	r3, #5
 80065f2:	d01c      	beq.n	800662e <UART_SetConfig+0x1be>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f8:	2b06      	cmp	r3, #6
 80065fa:	d018      	beq.n	800662e <UART_SetConfig+0x1be>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006600:	2b07      	cmp	r3, #7
 8006602:	d014      	beq.n	800662e <UART_SetConfig+0x1be>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006608:	2b08      	cmp	r3, #8
 800660a:	d010      	beq.n	800662e <UART_SetConfig+0x1be>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006610:	2b09      	cmp	r3, #9
 8006612:	d00c      	beq.n	800662e <UART_SetConfig+0x1be>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006618:	2b0a      	cmp	r3, #10
 800661a:	d008      	beq.n	800662e <UART_SetConfig+0x1be>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006620:	2b0b      	cmp	r3, #11
 8006622:	d004      	beq.n	800662e <UART_SetConfig+0x1be>
 8006624:	f640 3153 	movw	r1, #2899	; 0xb53
 8006628:	4838      	ldr	r0, [pc, #224]	; (800670c <UART_SetConfig+0x29c>)
 800662a:	f7fb f847 	bl	80016bc <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	689a      	ldr	r2, [r3, #8]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	431a      	orrs	r2, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	695b      	ldr	r3, [r3, #20]
 800663c:	431a      	orrs	r2, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	4313      	orrs	r3, r2
 8006644:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800664a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800664c:	4313      	orrs	r3, r2
 800664e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	4b2f      	ldr	r3, [pc, #188]	; (8006714 <UART_SetConfig+0x2a4>)
 8006658:	4013      	ands	r3, r2
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	6812      	ldr	r2, [r2, #0]
 800665e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006660:	430b      	orrs	r3, r1
 8006662:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68da      	ldr	r2, [r3, #12]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a22      	ldr	r2, [pc, #136]	; (8006710 <UART_SetConfig+0x2a0>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d004      	beq.n	8006694 <UART_SetConfig+0x224>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006690:	4313      	orrs	r3, r2
 8006692:	627b      	str	r3, [r7, #36]	; 0x24
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800669e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	6812      	ldr	r2, [r2, #0]
 80066a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066a8:	430b      	orrs	r3, r1
 80066aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b2:	f023 010f 	bic.w	r1, r3, #15
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	430a      	orrs	r2, r1
 80066c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a14      	ldr	r2, [pc, #80]	; (8006718 <UART_SetConfig+0x2a8>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d130      	bne.n	800672e <UART_SetConfig+0x2be>
 80066cc:	2003      	movs	r0, #3
 80066ce:	f7ff fe35 	bl	800633c <LL_RCC_GetUSARTClockSource>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b03      	cmp	r3, #3
 80066d6:	d825      	bhi.n	8006724 <UART_SetConfig+0x2b4>
 80066d8:	a201      	add	r2, pc, #4	; (adr r2, 80066e0 <UART_SetConfig+0x270>)
 80066da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066de:	bf00      	nop
 80066e0:	080066f1 	.word	0x080066f1
 80066e4:	08006701 	.word	0x08006701
 80066e8:	080066f9 	.word	0x080066f9
 80066ec:	0800671d 	.word	0x0800671d
 80066f0:	2301      	movs	r3, #1
 80066f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066f6:	e04c      	b.n	8006792 <UART_SetConfig+0x322>
 80066f8:	2302      	movs	r3, #2
 80066fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066fe:	e048      	b.n	8006792 <UART_SetConfig+0x322>
 8006700:	2304      	movs	r3, #4
 8006702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006706:	e044      	b.n	8006792 <UART_SetConfig+0x322>
 8006708:	007a1200 	.word	0x007a1200
 800670c:	0800e368 	.word	0x0800e368
 8006710:	40008000 	.word	0x40008000
 8006714:	cfff69f3 	.word	0xcfff69f3
 8006718:	40013800 	.word	0x40013800
 800671c:	2308      	movs	r3, #8
 800671e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006722:	e036      	b.n	8006792 <UART_SetConfig+0x322>
 8006724:	2310      	movs	r3, #16
 8006726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800672a:	bf00      	nop
 800672c:	e031      	b.n	8006792 <UART_SetConfig+0x322>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a9f      	ldr	r2, [pc, #636]	; (80069b0 <UART_SetConfig+0x540>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d129      	bne.n	800678c <UART_SetConfig+0x31c>
 8006738:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800673c:	f7ff fe0e 	bl	800635c <LL_RCC_GetLPUARTClockSource>
 8006740:	4603      	mov	r3, r0
 8006742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006746:	d014      	beq.n	8006772 <UART_SetConfig+0x302>
 8006748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800674c:	d802      	bhi.n	8006754 <UART_SetConfig+0x2e4>
 800674e:	2b00      	cmp	r3, #0
 8006750:	d007      	beq.n	8006762 <UART_SetConfig+0x2f2>
 8006752:	e016      	b.n	8006782 <UART_SetConfig+0x312>
 8006754:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006758:	d007      	beq.n	800676a <UART_SetConfig+0x2fa>
 800675a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800675e:	d00c      	beq.n	800677a <UART_SetConfig+0x30a>
 8006760:	e00f      	b.n	8006782 <UART_SetConfig+0x312>
 8006762:	2300      	movs	r3, #0
 8006764:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006768:	e013      	b.n	8006792 <UART_SetConfig+0x322>
 800676a:	2302      	movs	r3, #2
 800676c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006770:	e00f      	b.n	8006792 <UART_SetConfig+0x322>
 8006772:	2304      	movs	r3, #4
 8006774:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006778:	e00b      	b.n	8006792 <UART_SetConfig+0x322>
 800677a:	2308      	movs	r3, #8
 800677c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006780:	e007      	b.n	8006792 <UART_SetConfig+0x322>
 8006782:	2310      	movs	r3, #16
 8006784:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006788:	bf00      	nop
 800678a:	e002      	b.n	8006792 <UART_SetConfig+0x322>
 800678c:	2310      	movs	r3, #16
 800678e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a86      	ldr	r2, [pc, #536]	; (80069b0 <UART_SetConfig+0x540>)
 8006798:	4293      	cmp	r3, r2
 800679a:	f040 8422 	bne.w	8006fe2 <UART_SetConfig+0xb72>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800679e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80067a2:	2b08      	cmp	r3, #8
 80067a4:	f200 8173 	bhi.w	8006a8e <UART_SetConfig+0x61e>
 80067a8:	a201      	add	r2, pc, #4	; (adr r2, 80067b0 <UART_SetConfig+0x340>)
 80067aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ae:	bf00      	nop
 80067b0:	080067d5 	.word	0x080067d5
 80067b4:	08006a8f 	.word	0x08006a8f
 80067b8:	08006877 	.word	0x08006877
 80067bc:	08006a8f 	.word	0x08006a8f
 80067c0:	0800690f 	.word	0x0800690f
 80067c4:	08006a8f 	.word	0x08006a8f
 80067c8:	08006a8f 	.word	0x08006a8f
 80067cc:	08006a8f 	.word	0x08006a8f
 80067d0:	080069e1 	.word	0x080069e1
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80067d4:	f7fe fcc6 	bl	8005164 <HAL_RCC_GetPCLK1Freq>
 80067d8:	4602      	mov	r2, r0
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d044      	beq.n	800686c <UART_SetConfig+0x3fc>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d03e      	beq.n	8006868 <UART_SetConfig+0x3f8>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d038      	beq.n	8006864 <UART_SetConfig+0x3f4>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f6:	2b03      	cmp	r3, #3
 80067f8:	d032      	beq.n	8006860 <UART_SetConfig+0x3f0>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fe:	2b04      	cmp	r3, #4
 8006800:	d02c      	beq.n	800685c <UART_SetConfig+0x3ec>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006806:	2b05      	cmp	r3, #5
 8006808:	d026      	beq.n	8006858 <UART_SetConfig+0x3e8>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680e:	2b06      	cmp	r3, #6
 8006810:	d020      	beq.n	8006854 <UART_SetConfig+0x3e4>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006816:	2b07      	cmp	r3, #7
 8006818:	d01a      	beq.n	8006850 <UART_SetConfig+0x3e0>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681e:	2b08      	cmp	r3, #8
 8006820:	d014      	beq.n	800684c <UART_SetConfig+0x3dc>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006826:	2b09      	cmp	r3, #9
 8006828:	d00e      	beq.n	8006848 <UART_SetConfig+0x3d8>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682e:	2b0a      	cmp	r3, #10
 8006830:	d008      	beq.n	8006844 <UART_SetConfig+0x3d4>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006836:	2b0b      	cmp	r3, #11
 8006838:	d102      	bne.n	8006840 <UART_SetConfig+0x3d0>
 800683a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800683e:	e016      	b.n	800686e <UART_SetConfig+0x3fe>
 8006840:	2301      	movs	r3, #1
 8006842:	e014      	b.n	800686e <UART_SetConfig+0x3fe>
 8006844:	2380      	movs	r3, #128	; 0x80
 8006846:	e012      	b.n	800686e <UART_SetConfig+0x3fe>
 8006848:	2340      	movs	r3, #64	; 0x40
 800684a:	e010      	b.n	800686e <UART_SetConfig+0x3fe>
 800684c:	2320      	movs	r3, #32
 800684e:	e00e      	b.n	800686e <UART_SetConfig+0x3fe>
 8006850:	2310      	movs	r3, #16
 8006852:	e00c      	b.n	800686e <UART_SetConfig+0x3fe>
 8006854:	230c      	movs	r3, #12
 8006856:	e00a      	b.n	800686e <UART_SetConfig+0x3fe>
 8006858:	230a      	movs	r3, #10
 800685a:	e008      	b.n	800686e <UART_SetConfig+0x3fe>
 800685c:	2308      	movs	r3, #8
 800685e:	e006      	b.n	800686e <UART_SetConfig+0x3fe>
 8006860:	2306      	movs	r3, #6
 8006862:	e004      	b.n	800686e <UART_SetConfig+0x3fe>
 8006864:	2304      	movs	r3, #4
 8006866:	e002      	b.n	800686e <UART_SetConfig+0x3fe>
 8006868:	2302      	movs	r3, #2
 800686a:	e000      	b.n	800686e <UART_SetConfig+0x3fe>
 800686c:	2301      	movs	r3, #1
 800686e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006872:	617b      	str	r3, [r7, #20]
        break;
 8006874:	e10e      	b.n	8006a94 <UART_SetConfig+0x624>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687a:	2b00      	cmp	r3, #0
 800687c:	d044      	beq.n	8006908 <UART_SetConfig+0x498>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006882:	2b01      	cmp	r3, #1
 8006884:	d03e      	beq.n	8006904 <UART_SetConfig+0x494>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688a:	2b02      	cmp	r3, #2
 800688c:	d038      	beq.n	8006900 <UART_SetConfig+0x490>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006892:	2b03      	cmp	r3, #3
 8006894:	d032      	beq.n	80068fc <UART_SetConfig+0x48c>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689a:	2b04      	cmp	r3, #4
 800689c:	d02c      	beq.n	80068f8 <UART_SetConfig+0x488>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a2:	2b05      	cmp	r3, #5
 80068a4:	d026      	beq.n	80068f4 <UART_SetConfig+0x484>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068aa:	2b06      	cmp	r3, #6
 80068ac:	d020      	beq.n	80068f0 <UART_SetConfig+0x480>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b2:	2b07      	cmp	r3, #7
 80068b4:	d01a      	beq.n	80068ec <UART_SetConfig+0x47c>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ba:	2b08      	cmp	r3, #8
 80068bc:	d014      	beq.n	80068e8 <UART_SetConfig+0x478>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c2:	2b09      	cmp	r3, #9
 80068c4:	d00e      	beq.n	80068e4 <UART_SetConfig+0x474>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ca:	2b0a      	cmp	r3, #10
 80068cc:	d008      	beq.n	80068e0 <UART_SetConfig+0x470>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d2:	2b0b      	cmp	r3, #11
 80068d4:	d102      	bne.n	80068dc <UART_SetConfig+0x46c>
 80068d6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80068da:	e016      	b.n	800690a <UART_SetConfig+0x49a>
 80068dc:	4b35      	ldr	r3, [pc, #212]	; (80069b4 <UART_SetConfig+0x544>)
 80068de:	e014      	b.n	800690a <UART_SetConfig+0x49a>
 80068e0:	4b35      	ldr	r3, [pc, #212]	; (80069b8 <UART_SetConfig+0x548>)
 80068e2:	e012      	b.n	800690a <UART_SetConfig+0x49a>
 80068e4:	4b35      	ldr	r3, [pc, #212]	; (80069bc <UART_SetConfig+0x54c>)
 80068e6:	e010      	b.n	800690a <UART_SetConfig+0x49a>
 80068e8:	4b35      	ldr	r3, [pc, #212]	; (80069c0 <UART_SetConfig+0x550>)
 80068ea:	e00e      	b.n	800690a <UART_SetConfig+0x49a>
 80068ec:	4b35      	ldr	r3, [pc, #212]	; (80069c4 <UART_SetConfig+0x554>)
 80068ee:	e00c      	b.n	800690a <UART_SetConfig+0x49a>
 80068f0:	4b35      	ldr	r3, [pc, #212]	; (80069c8 <UART_SetConfig+0x558>)
 80068f2:	e00a      	b.n	800690a <UART_SetConfig+0x49a>
 80068f4:	4b35      	ldr	r3, [pc, #212]	; (80069cc <UART_SetConfig+0x55c>)
 80068f6:	e008      	b.n	800690a <UART_SetConfig+0x49a>
 80068f8:	4b35      	ldr	r3, [pc, #212]	; (80069d0 <UART_SetConfig+0x560>)
 80068fa:	e006      	b.n	800690a <UART_SetConfig+0x49a>
 80068fc:	4b35      	ldr	r3, [pc, #212]	; (80069d4 <UART_SetConfig+0x564>)
 80068fe:	e004      	b.n	800690a <UART_SetConfig+0x49a>
 8006900:	4b35      	ldr	r3, [pc, #212]	; (80069d8 <UART_SetConfig+0x568>)
 8006902:	e002      	b.n	800690a <UART_SetConfig+0x49a>
 8006904:	4b35      	ldr	r3, [pc, #212]	; (80069dc <UART_SetConfig+0x56c>)
 8006906:	e000      	b.n	800690a <UART_SetConfig+0x49a>
 8006908:	4b2a      	ldr	r3, [pc, #168]	; (80069b4 <UART_SetConfig+0x544>)
 800690a:	617b      	str	r3, [r7, #20]
        break;
 800690c:	e0c2      	b.n	8006a94 <UART_SetConfig+0x624>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800690e:	f7fe fbab 	bl	8005068 <HAL_RCC_GetSysClockFreq>
 8006912:	4602      	mov	r2, r0
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006918:	2b00      	cmp	r3, #0
 800691a:	d044      	beq.n	80069a6 <UART_SetConfig+0x536>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006920:	2b01      	cmp	r3, #1
 8006922:	d03e      	beq.n	80069a2 <UART_SetConfig+0x532>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006928:	2b02      	cmp	r3, #2
 800692a:	d038      	beq.n	800699e <UART_SetConfig+0x52e>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006930:	2b03      	cmp	r3, #3
 8006932:	d032      	beq.n	800699a <UART_SetConfig+0x52a>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006938:	2b04      	cmp	r3, #4
 800693a:	d02c      	beq.n	8006996 <UART_SetConfig+0x526>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006940:	2b05      	cmp	r3, #5
 8006942:	d026      	beq.n	8006992 <UART_SetConfig+0x522>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006948:	2b06      	cmp	r3, #6
 800694a:	d020      	beq.n	800698e <UART_SetConfig+0x51e>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006950:	2b07      	cmp	r3, #7
 8006952:	d01a      	beq.n	800698a <UART_SetConfig+0x51a>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006958:	2b08      	cmp	r3, #8
 800695a:	d014      	beq.n	8006986 <UART_SetConfig+0x516>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006960:	2b09      	cmp	r3, #9
 8006962:	d00e      	beq.n	8006982 <UART_SetConfig+0x512>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006968:	2b0a      	cmp	r3, #10
 800696a:	d008      	beq.n	800697e <UART_SetConfig+0x50e>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006970:	2b0b      	cmp	r3, #11
 8006972:	d102      	bne.n	800697a <UART_SetConfig+0x50a>
 8006974:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006978:	e016      	b.n	80069a8 <UART_SetConfig+0x538>
 800697a:	2301      	movs	r3, #1
 800697c:	e014      	b.n	80069a8 <UART_SetConfig+0x538>
 800697e:	2380      	movs	r3, #128	; 0x80
 8006980:	e012      	b.n	80069a8 <UART_SetConfig+0x538>
 8006982:	2340      	movs	r3, #64	; 0x40
 8006984:	e010      	b.n	80069a8 <UART_SetConfig+0x538>
 8006986:	2320      	movs	r3, #32
 8006988:	e00e      	b.n	80069a8 <UART_SetConfig+0x538>
 800698a:	2310      	movs	r3, #16
 800698c:	e00c      	b.n	80069a8 <UART_SetConfig+0x538>
 800698e:	230c      	movs	r3, #12
 8006990:	e00a      	b.n	80069a8 <UART_SetConfig+0x538>
 8006992:	230a      	movs	r3, #10
 8006994:	e008      	b.n	80069a8 <UART_SetConfig+0x538>
 8006996:	2308      	movs	r3, #8
 8006998:	e006      	b.n	80069a8 <UART_SetConfig+0x538>
 800699a:	2306      	movs	r3, #6
 800699c:	e004      	b.n	80069a8 <UART_SetConfig+0x538>
 800699e:	2304      	movs	r3, #4
 80069a0:	e002      	b.n	80069a8 <UART_SetConfig+0x538>
 80069a2:	2302      	movs	r3, #2
 80069a4:	e000      	b.n	80069a8 <UART_SetConfig+0x538>
 80069a6:	2301      	movs	r3, #1
 80069a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ac:	617b      	str	r3, [r7, #20]
        break;
 80069ae:	e071      	b.n	8006a94 <UART_SetConfig+0x624>
 80069b0:	40008000 	.word	0x40008000
 80069b4:	00f42400 	.word	0x00f42400
 80069b8:	0001e848 	.word	0x0001e848
 80069bc:	0003d090 	.word	0x0003d090
 80069c0:	0007a120 	.word	0x0007a120
 80069c4:	000f4240 	.word	0x000f4240
 80069c8:	00145855 	.word	0x00145855
 80069cc:	00186a00 	.word	0x00186a00
 80069d0:	001e8480 	.word	0x001e8480
 80069d4:	0028b0aa 	.word	0x0028b0aa
 80069d8:	003d0900 	.word	0x003d0900
 80069dc:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d04e      	beq.n	8006a86 <UART_SetConfig+0x616>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d047      	beq.n	8006a80 <UART_SetConfig+0x610>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d040      	beq.n	8006a7a <UART_SetConfig+0x60a>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fc:	2b03      	cmp	r3, #3
 80069fe:	d039      	beq.n	8006a74 <UART_SetConfig+0x604>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a04:	2b04      	cmp	r3, #4
 8006a06:	d032      	beq.n	8006a6e <UART_SetConfig+0x5fe>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0c:	2b05      	cmp	r3, #5
 8006a0e:	d02b      	beq.n	8006a68 <UART_SetConfig+0x5f8>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a14:	2b06      	cmp	r3, #6
 8006a16:	d024      	beq.n	8006a62 <UART_SetConfig+0x5f2>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1c:	2b07      	cmp	r3, #7
 8006a1e:	d01d      	beq.n	8006a5c <UART_SetConfig+0x5ec>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a24:	2b08      	cmp	r3, #8
 8006a26:	d016      	beq.n	8006a56 <UART_SetConfig+0x5e6>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2c:	2b09      	cmp	r3, #9
 8006a2e:	d00f      	beq.n	8006a50 <UART_SetConfig+0x5e0>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a34:	2b0a      	cmp	r3, #10
 8006a36:	d008      	beq.n	8006a4a <UART_SetConfig+0x5da>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3c:	2b0b      	cmp	r3, #11
 8006a3e:	d101      	bne.n	8006a44 <UART_SetConfig+0x5d4>
 8006a40:	2380      	movs	r3, #128	; 0x80
 8006a42:	e022      	b.n	8006a8a <UART_SetConfig+0x61a>
 8006a44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a48:	e01f      	b.n	8006a8a <UART_SetConfig+0x61a>
 8006a4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a4e:	e01c      	b.n	8006a8a <UART_SetConfig+0x61a>
 8006a50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a54:	e019      	b.n	8006a8a <UART_SetConfig+0x61a>
 8006a56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a5a:	e016      	b.n	8006a8a <UART_SetConfig+0x61a>
 8006a5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a60:	e013      	b.n	8006a8a <UART_SetConfig+0x61a>
 8006a62:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8006a66:	e010      	b.n	8006a8a <UART_SetConfig+0x61a>
 8006a68:	f640 43cc 	movw	r3, #3276	; 0xccc
 8006a6c:	e00d      	b.n	8006a8a <UART_SetConfig+0x61a>
 8006a6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a72:	e00a      	b.n	8006a8a <UART_SetConfig+0x61a>
 8006a74:	f241 5355 	movw	r3, #5461	; 0x1555
 8006a78:	e007      	b.n	8006a8a <UART_SetConfig+0x61a>
 8006a7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006a7e:	e004      	b.n	8006a8a <UART_SetConfig+0x61a>
 8006a80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006a84:	e001      	b.n	8006a8a <UART_SetConfig+0x61a>
 8006a86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a8a:	617b      	str	r3, [r7, #20]
        break;
 8006a8c:	e002      	b.n	8006a94 <UART_SetConfig+0x624>
      default:
        ret = HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	76fb      	strb	r3, [r7, #27]
        break;
 8006a92:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	f000 85fc 	beq.w	8007694 <UART_SetConfig+0x1224>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685a      	ldr	r2, [r3, #4]
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	005b      	lsls	r3, r3, #1
 8006aa4:	4413      	add	r3, r2
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d305      	bcc.n	8006ab8 <UART_SetConfig+0x648>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ab2:	697a      	ldr	r2, [r7, #20]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d903      	bls.n	8006ac0 <UART_SetConfig+0x650>
      {
        ret = HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	76fb      	strb	r3, [r7, #27]
 8006abc:	f000 bdea 	b.w	8007694 <UART_SetConfig+0x1224>
      }
      else
      {
        switch (clocksource)
 8006ac0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ac4:	2b08      	cmp	r3, #8
 8006ac6:	f200 8279 	bhi.w	8006fbc <UART_SetConfig+0xb4c>
 8006aca:	a201      	add	r2, pc, #4	; (adr r2, 8006ad0 <UART_SetConfig+0x660>)
 8006acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad0:	08006af5 	.word	0x08006af5
 8006ad4:	08006fbd 	.word	0x08006fbd
 8006ad8:	08006c33 	.word	0x08006c33
 8006adc:	08006fbd 	.word	0x08006fbd
 8006ae0:	08006d29 	.word	0x08006d29
 8006ae4:	08006fbd 	.word	0x08006fbd
 8006ae8:	08006fbd 	.word	0x08006fbd
 8006aec:	08006fbd 	.word	0x08006fbd
 8006af0:	08006e67 	.word	0x08006e67
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8006af4:	f7fe fb36 	bl	8005164 <HAL_RCC_GetPCLK1Freq>
 8006af8:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	4618      	mov	r0, r3
 8006afe:	f04f 0100 	mov.w	r1, #0
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d067      	beq.n	8006bda <UART_SetConfig+0x76a>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d05e      	beq.n	8006bd0 <UART_SetConfig+0x760>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d055      	beq.n	8006bc6 <UART_SetConfig+0x756>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1e:	2b03      	cmp	r3, #3
 8006b20:	d04c      	beq.n	8006bbc <UART_SetConfig+0x74c>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b26:	2b04      	cmp	r3, #4
 8006b28:	d043      	beq.n	8006bb2 <UART_SetConfig+0x742>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2e:	2b05      	cmp	r3, #5
 8006b30:	d03a      	beq.n	8006ba8 <UART_SetConfig+0x738>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b36:	2b06      	cmp	r3, #6
 8006b38:	d031      	beq.n	8006b9e <UART_SetConfig+0x72e>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3e:	2b07      	cmp	r3, #7
 8006b40:	d028      	beq.n	8006b94 <UART_SetConfig+0x724>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b46:	2b08      	cmp	r3, #8
 8006b48:	d01f      	beq.n	8006b8a <UART_SetConfig+0x71a>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4e:	2b09      	cmp	r3, #9
 8006b50:	d016      	beq.n	8006b80 <UART_SetConfig+0x710>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b56:	2b0a      	cmp	r3, #10
 8006b58:	d00d      	beq.n	8006b76 <UART_SetConfig+0x706>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5e:	2b0b      	cmp	r3, #11
 8006b60:	d104      	bne.n	8006b6c <UART_SetConfig+0x6fc>
 8006b62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b66:	f04f 0400 	mov.w	r4, #0
 8006b6a:	e03a      	b.n	8006be2 <UART_SetConfig+0x772>
 8006b6c:	f04f 0301 	mov.w	r3, #1
 8006b70:	f04f 0400 	mov.w	r4, #0
 8006b74:	e035      	b.n	8006be2 <UART_SetConfig+0x772>
 8006b76:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006b7a:	f04f 0400 	mov.w	r4, #0
 8006b7e:	e030      	b.n	8006be2 <UART_SetConfig+0x772>
 8006b80:	f04f 0340 	mov.w	r3, #64	; 0x40
 8006b84:	f04f 0400 	mov.w	r4, #0
 8006b88:	e02b      	b.n	8006be2 <UART_SetConfig+0x772>
 8006b8a:	f04f 0320 	mov.w	r3, #32
 8006b8e:	f04f 0400 	mov.w	r4, #0
 8006b92:	e026      	b.n	8006be2 <UART_SetConfig+0x772>
 8006b94:	f04f 0310 	mov.w	r3, #16
 8006b98:	f04f 0400 	mov.w	r4, #0
 8006b9c:	e021      	b.n	8006be2 <UART_SetConfig+0x772>
 8006b9e:	f04f 030c 	mov.w	r3, #12
 8006ba2:	f04f 0400 	mov.w	r4, #0
 8006ba6:	e01c      	b.n	8006be2 <UART_SetConfig+0x772>
 8006ba8:	f04f 030a 	mov.w	r3, #10
 8006bac:	f04f 0400 	mov.w	r4, #0
 8006bb0:	e017      	b.n	8006be2 <UART_SetConfig+0x772>
 8006bb2:	f04f 0308 	mov.w	r3, #8
 8006bb6:	f04f 0400 	mov.w	r4, #0
 8006bba:	e012      	b.n	8006be2 <UART_SetConfig+0x772>
 8006bbc:	f04f 0306 	mov.w	r3, #6
 8006bc0:	f04f 0400 	mov.w	r4, #0
 8006bc4:	e00d      	b.n	8006be2 <UART_SetConfig+0x772>
 8006bc6:	f04f 0304 	mov.w	r3, #4
 8006bca:	f04f 0400 	mov.w	r4, #0
 8006bce:	e008      	b.n	8006be2 <UART_SetConfig+0x772>
 8006bd0:	f04f 0302 	mov.w	r3, #2
 8006bd4:	f04f 0400 	mov.w	r4, #0
 8006bd8:	e003      	b.n	8006be2 <UART_SetConfig+0x772>
 8006bda:	f04f 0301 	mov.w	r3, #1
 8006bde:	f04f 0400 	mov.w	r4, #0
 8006be2:	461a      	mov	r2, r3
 8006be4:	4623      	mov	r3, r4
 8006be6:	f7f9 fad3 	bl	8000190 <__aeabi_uldivmod>
 8006bea:	4603      	mov	r3, r0
 8006bec:	460c      	mov	r4, r1
 8006bee:	4619      	mov	r1, r3
 8006bf0:	4622      	mov	r2, r4
 8006bf2:	f04f 0300 	mov.w	r3, #0
 8006bf6:	f04f 0400 	mov.w	r4, #0
 8006bfa:	0214      	lsls	r4, r2, #8
 8006bfc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006c00:	020b      	lsls	r3, r1, #8
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	6852      	ldr	r2, [r2, #4]
 8006c06:	0852      	lsrs	r2, r2, #1
 8006c08:	4611      	mov	r1, r2
 8006c0a:	f04f 0200 	mov.w	r2, #0
 8006c0e:	eb13 0b01 	adds.w	fp, r3, r1
 8006c12:	eb44 0c02 	adc.w	ip, r4, r2
 8006c16:	4658      	mov	r0, fp
 8006c18:	4661      	mov	r1, ip
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f04f 0400 	mov.w	r4, #0
 8006c22:	461a      	mov	r2, r3
 8006c24:	4623      	mov	r3, r4
 8006c26:	f7f9 fab3 	bl	8000190 <__aeabi_uldivmod>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	460c      	mov	r4, r1
 8006c2e:	61fb      	str	r3, [r7, #28]
            break;
 8006c30:	e1c7      	b.n	8006fc2 <UART_SetConfig+0xb52>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d05b      	beq.n	8006cf2 <UART_SetConfig+0x882>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d053      	beq.n	8006cea <UART_SetConfig+0x87a>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d04b      	beq.n	8006ce2 <UART_SetConfig+0x872>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4e:	2b03      	cmp	r3, #3
 8006c50:	d043      	beq.n	8006cda <UART_SetConfig+0x86a>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c56:	2b04      	cmp	r3, #4
 8006c58:	d03b      	beq.n	8006cd2 <UART_SetConfig+0x862>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5e:	2b05      	cmp	r3, #5
 8006c60:	d033      	beq.n	8006cca <UART_SetConfig+0x85a>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c66:	2b06      	cmp	r3, #6
 8006c68:	d02b      	beq.n	8006cc2 <UART_SetConfig+0x852>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6e:	2b07      	cmp	r3, #7
 8006c70:	d023      	beq.n	8006cba <UART_SetConfig+0x84a>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c76:	2b08      	cmp	r3, #8
 8006c78:	d01b      	beq.n	8006cb2 <UART_SetConfig+0x842>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7e:	2b09      	cmp	r3, #9
 8006c80:	d013      	beq.n	8006caa <UART_SetConfig+0x83a>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c86:	2b0a      	cmp	r3, #10
 8006c88:	d00b      	beq.n	8006ca2 <UART_SetConfig+0x832>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8e:	2b0b      	cmp	r3, #11
 8006c90:	d103      	bne.n	8006c9a <UART_SetConfig+0x82a>
 8006c92:	4baf      	ldr	r3, [pc, #700]	; (8006f50 <UART_SetConfig+0xae0>)
 8006c94:	f04f 0400 	mov.w	r4, #0
 8006c98:	e02e      	b.n	8006cf8 <UART_SetConfig+0x888>
 8006c9a:	4bae      	ldr	r3, [pc, #696]	; (8006f54 <UART_SetConfig+0xae4>)
 8006c9c:	f04f 0400 	mov.w	r4, #0
 8006ca0:	e02a      	b.n	8006cf8 <UART_SetConfig+0x888>
 8006ca2:	4bad      	ldr	r3, [pc, #692]	; (8006f58 <UART_SetConfig+0xae8>)
 8006ca4:	f04f 0400 	mov.w	r4, #0
 8006ca8:	e026      	b.n	8006cf8 <UART_SetConfig+0x888>
 8006caa:	4bac      	ldr	r3, [pc, #688]	; (8006f5c <UART_SetConfig+0xaec>)
 8006cac:	f04f 0400 	mov.w	r4, #0
 8006cb0:	e022      	b.n	8006cf8 <UART_SetConfig+0x888>
 8006cb2:	4bab      	ldr	r3, [pc, #684]	; (8006f60 <UART_SetConfig+0xaf0>)
 8006cb4:	f04f 0400 	mov.w	r4, #0
 8006cb8:	e01e      	b.n	8006cf8 <UART_SetConfig+0x888>
 8006cba:	4baa      	ldr	r3, [pc, #680]	; (8006f64 <UART_SetConfig+0xaf4>)
 8006cbc:	f04f 0400 	mov.w	r4, #0
 8006cc0:	e01a      	b.n	8006cf8 <UART_SetConfig+0x888>
 8006cc2:	a49f      	add	r4, pc, #636	; (adr r4, 8006f40 <UART_SetConfig+0xad0>)
 8006cc4:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006cc8:	e016      	b.n	8006cf8 <UART_SetConfig+0x888>
 8006cca:	4ba7      	ldr	r3, [pc, #668]	; (8006f68 <UART_SetConfig+0xaf8>)
 8006ccc:	f04f 0400 	mov.w	r4, #0
 8006cd0:	e012      	b.n	8006cf8 <UART_SetConfig+0x888>
 8006cd2:	4ba6      	ldr	r3, [pc, #664]	; (8006f6c <UART_SetConfig+0xafc>)
 8006cd4:	f04f 0400 	mov.w	r4, #0
 8006cd8:	e00e      	b.n	8006cf8 <UART_SetConfig+0x888>
 8006cda:	a49b      	add	r4, pc, #620	; (adr r4, 8006f48 <UART_SetConfig+0xad8>)
 8006cdc:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006ce0:	e00a      	b.n	8006cf8 <UART_SetConfig+0x888>
 8006ce2:	4ba3      	ldr	r3, [pc, #652]	; (8006f70 <UART_SetConfig+0xb00>)
 8006ce4:	f04f 0400 	mov.w	r4, #0
 8006ce8:	e006      	b.n	8006cf8 <UART_SetConfig+0x888>
 8006cea:	4ba2      	ldr	r3, [pc, #648]	; (8006f74 <UART_SetConfig+0xb04>)
 8006cec:	f04f 0400 	mov.w	r4, #0
 8006cf0:	e002      	b.n	8006cf8 <UART_SetConfig+0x888>
 8006cf2:	4b98      	ldr	r3, [pc, #608]	; (8006f54 <UART_SetConfig+0xae4>)
 8006cf4:	f04f 0400 	mov.w	r4, #0
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	6852      	ldr	r2, [r2, #4]
 8006cfc:	0852      	lsrs	r2, r2, #1
 8006cfe:	4611      	mov	r1, r2
 8006d00:	f04f 0200 	mov.w	r2, #0
 8006d04:	eb13 0b01 	adds.w	fp, r3, r1
 8006d08:	eb44 0c02 	adc.w	ip, r4, r2
 8006d0c:	4658      	mov	r0, fp
 8006d0e:	4661      	mov	r1, ip
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	f04f 0400 	mov.w	r4, #0
 8006d18:	461a      	mov	r2, r3
 8006d1a:	4623      	mov	r3, r4
 8006d1c:	f7f9 fa38 	bl	8000190 <__aeabi_uldivmod>
 8006d20:	4603      	mov	r3, r0
 8006d22:	460c      	mov	r4, r1
 8006d24:	61fb      	str	r3, [r7, #28]
            break;
 8006d26:	e14c      	b.n	8006fc2 <UART_SetConfig+0xb52>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8006d28:	f7fe f99e 	bl	8005068 <HAL_RCC_GetSysClockFreq>
 8006d2c:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	4618      	mov	r0, r3
 8006d32:	f04f 0100 	mov.w	r1, #0
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d067      	beq.n	8006e0e <UART_SetConfig+0x99e>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d05e      	beq.n	8006e04 <UART_SetConfig+0x994>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d055      	beq.n	8006dfa <UART_SetConfig+0x98a>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d52:	2b03      	cmp	r3, #3
 8006d54:	d04c      	beq.n	8006df0 <UART_SetConfig+0x980>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5a:	2b04      	cmp	r3, #4
 8006d5c:	d043      	beq.n	8006de6 <UART_SetConfig+0x976>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d62:	2b05      	cmp	r3, #5
 8006d64:	d03a      	beq.n	8006ddc <UART_SetConfig+0x96c>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6a:	2b06      	cmp	r3, #6
 8006d6c:	d031      	beq.n	8006dd2 <UART_SetConfig+0x962>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d72:	2b07      	cmp	r3, #7
 8006d74:	d028      	beq.n	8006dc8 <UART_SetConfig+0x958>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7a:	2b08      	cmp	r3, #8
 8006d7c:	d01f      	beq.n	8006dbe <UART_SetConfig+0x94e>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d82:	2b09      	cmp	r3, #9
 8006d84:	d016      	beq.n	8006db4 <UART_SetConfig+0x944>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8a:	2b0a      	cmp	r3, #10
 8006d8c:	d00d      	beq.n	8006daa <UART_SetConfig+0x93a>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d92:	2b0b      	cmp	r3, #11
 8006d94:	d104      	bne.n	8006da0 <UART_SetConfig+0x930>
 8006d96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d9a:	f04f 0400 	mov.w	r4, #0
 8006d9e:	e03a      	b.n	8006e16 <UART_SetConfig+0x9a6>
 8006da0:	f04f 0301 	mov.w	r3, #1
 8006da4:	f04f 0400 	mov.w	r4, #0
 8006da8:	e035      	b.n	8006e16 <UART_SetConfig+0x9a6>
 8006daa:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006dae:	f04f 0400 	mov.w	r4, #0
 8006db2:	e030      	b.n	8006e16 <UART_SetConfig+0x9a6>
 8006db4:	f04f 0340 	mov.w	r3, #64	; 0x40
 8006db8:	f04f 0400 	mov.w	r4, #0
 8006dbc:	e02b      	b.n	8006e16 <UART_SetConfig+0x9a6>
 8006dbe:	f04f 0320 	mov.w	r3, #32
 8006dc2:	f04f 0400 	mov.w	r4, #0
 8006dc6:	e026      	b.n	8006e16 <UART_SetConfig+0x9a6>
 8006dc8:	f04f 0310 	mov.w	r3, #16
 8006dcc:	f04f 0400 	mov.w	r4, #0
 8006dd0:	e021      	b.n	8006e16 <UART_SetConfig+0x9a6>
 8006dd2:	f04f 030c 	mov.w	r3, #12
 8006dd6:	f04f 0400 	mov.w	r4, #0
 8006dda:	e01c      	b.n	8006e16 <UART_SetConfig+0x9a6>
 8006ddc:	f04f 030a 	mov.w	r3, #10
 8006de0:	f04f 0400 	mov.w	r4, #0
 8006de4:	e017      	b.n	8006e16 <UART_SetConfig+0x9a6>
 8006de6:	f04f 0308 	mov.w	r3, #8
 8006dea:	f04f 0400 	mov.w	r4, #0
 8006dee:	e012      	b.n	8006e16 <UART_SetConfig+0x9a6>
 8006df0:	f04f 0306 	mov.w	r3, #6
 8006df4:	f04f 0400 	mov.w	r4, #0
 8006df8:	e00d      	b.n	8006e16 <UART_SetConfig+0x9a6>
 8006dfa:	f04f 0304 	mov.w	r3, #4
 8006dfe:	f04f 0400 	mov.w	r4, #0
 8006e02:	e008      	b.n	8006e16 <UART_SetConfig+0x9a6>
 8006e04:	f04f 0302 	mov.w	r3, #2
 8006e08:	f04f 0400 	mov.w	r4, #0
 8006e0c:	e003      	b.n	8006e16 <UART_SetConfig+0x9a6>
 8006e0e:	f04f 0301 	mov.w	r3, #1
 8006e12:	f04f 0400 	mov.w	r4, #0
 8006e16:	461a      	mov	r2, r3
 8006e18:	4623      	mov	r3, r4
 8006e1a:	f7f9 f9b9 	bl	8000190 <__aeabi_uldivmod>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	460c      	mov	r4, r1
 8006e22:	4619      	mov	r1, r3
 8006e24:	4622      	mov	r2, r4
 8006e26:	f04f 0300 	mov.w	r3, #0
 8006e2a:	f04f 0400 	mov.w	r4, #0
 8006e2e:	0214      	lsls	r4, r2, #8
 8006e30:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006e34:	020b      	lsls	r3, r1, #8
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	6852      	ldr	r2, [r2, #4]
 8006e3a:	0852      	lsrs	r2, r2, #1
 8006e3c:	4611      	mov	r1, r2
 8006e3e:	f04f 0200 	mov.w	r2, #0
 8006e42:	eb13 0b01 	adds.w	fp, r3, r1
 8006e46:	eb44 0c02 	adc.w	ip, r4, r2
 8006e4a:	4658      	mov	r0, fp
 8006e4c:	4661      	mov	r1, ip
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	f04f 0400 	mov.w	r4, #0
 8006e56:	461a      	mov	r2, r3
 8006e58:	4623      	mov	r3, r4
 8006e5a:	f7f9 f999 	bl	8000190 <__aeabi_uldivmod>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	460c      	mov	r4, r1
 8006e62:	61fb      	str	r3, [r7, #28]
            break;
 8006e64:	e0ad      	b.n	8006fc2 <UART_SetConfig+0xb52>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f000 808a 	beq.w	8006f84 <UART_SetConfig+0xb14>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d05b      	beq.n	8006f30 <UART_SetConfig+0xac0>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d052      	beq.n	8006f26 <UART_SetConfig+0xab6>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e84:	2b03      	cmp	r3, #3
 8006e86:	d04a      	beq.n	8006f1e <UART_SetConfig+0xaae>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8c:	2b04      	cmp	r3, #4
 8006e8e:	d041      	beq.n	8006f14 <UART_SetConfig+0xaa4>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e94:	2b05      	cmp	r3, #5
 8006e96:	d039      	beq.n	8006f0c <UART_SetConfig+0xa9c>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9c:	2b06      	cmp	r3, #6
 8006e9e:	d031      	beq.n	8006f04 <UART_SetConfig+0xa94>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea4:	2b07      	cmp	r3, #7
 8006ea6:	d028      	beq.n	8006efa <UART_SetConfig+0xa8a>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eac:	2b08      	cmp	r3, #8
 8006eae:	d01f      	beq.n	8006ef0 <UART_SetConfig+0xa80>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb4:	2b09      	cmp	r3, #9
 8006eb6:	d016      	beq.n	8006ee6 <UART_SetConfig+0xa76>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebc:	2b0a      	cmp	r3, #10
 8006ebe:	d00d      	beq.n	8006edc <UART_SetConfig+0xa6c>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec4:	2b0b      	cmp	r3, #11
 8006ec6:	d104      	bne.n	8006ed2 <UART_SetConfig+0xa62>
 8006ec8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ecc:	f04f 0400 	mov.w	r4, #0
 8006ed0:	e05c      	b.n	8006f8c <UART_SetConfig+0xb1c>
 8006ed2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006ed6:	f04f 0400 	mov.w	r4, #0
 8006eda:	e057      	b.n	8006f8c <UART_SetConfig+0xb1c>
 8006edc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006ee0:	f04f 0400 	mov.w	r4, #0
 8006ee4:	e052      	b.n	8006f8c <UART_SetConfig+0xb1c>
 8006ee6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006eea:	f04f 0400 	mov.w	r4, #0
 8006eee:	e04d      	b.n	8006f8c <UART_SetConfig+0xb1c>
 8006ef0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006ef4:	f04f 0400 	mov.w	r4, #0
 8006ef8:	e048      	b.n	8006f8c <UART_SetConfig+0xb1c>
 8006efa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006efe:	f04f 0400 	mov.w	r4, #0
 8006f02:	e043      	b.n	8006f8c <UART_SetConfig+0xb1c>
 8006f04:	4b1c      	ldr	r3, [pc, #112]	; (8006f78 <UART_SetConfig+0xb08>)
 8006f06:	f04f 0400 	mov.w	r4, #0
 8006f0a:	e03f      	b.n	8006f8c <UART_SetConfig+0xb1c>
 8006f0c:	4b1b      	ldr	r3, [pc, #108]	; (8006f7c <UART_SetConfig+0xb0c>)
 8006f0e:	f04f 0400 	mov.w	r4, #0
 8006f12:	e03b      	b.n	8006f8c <UART_SetConfig+0xb1c>
 8006f14:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006f18:	f04f 0400 	mov.w	r4, #0
 8006f1c:	e036      	b.n	8006f8c <UART_SetConfig+0xb1c>
 8006f1e:	4b18      	ldr	r3, [pc, #96]	; (8006f80 <UART_SetConfig+0xb10>)
 8006f20:	f04f 0400 	mov.w	r4, #0
 8006f24:	e032      	b.n	8006f8c <UART_SetConfig+0xb1c>
 8006f26:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006f2a:	f04f 0400 	mov.w	r4, #0
 8006f2e:	e02d      	b.n	8006f8c <UART_SetConfig+0xb1c>
 8006f30:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006f34:	f04f 0400 	mov.w	r4, #0
 8006f38:	e028      	b.n	8006f8c <UART_SetConfig+0xb1c>
 8006f3a:	bf00      	nop
 8006f3c:	f3af 8000 	nop.w
 8006f40:	14585500 	.word	0x14585500
 8006f44:	00000000 	.word	0x00000000
 8006f48:	28b0aa00 	.word	0x28b0aa00
 8006f4c:	00000000 	.word	0x00000000
 8006f50:	00f42400 	.word	0x00f42400
 8006f54:	f4240000 	.word	0xf4240000
 8006f58:	01e84800 	.word	0x01e84800
 8006f5c:	03d09000 	.word	0x03d09000
 8006f60:	07a12000 	.word	0x07a12000
 8006f64:	0f424000 	.word	0x0f424000
 8006f68:	186a0000 	.word	0x186a0000
 8006f6c:	1e848000 	.word	0x1e848000
 8006f70:	3d090000 	.word	0x3d090000
 8006f74:	7a120000 	.word	0x7a120000
 8006f78:	000aaa00 	.word	0x000aaa00
 8006f7c:	000ccc00 	.word	0x000ccc00
 8006f80:	00155500 	.word	0x00155500
 8006f84:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006f88:	f04f 0400 	mov.w	r4, #0
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	6852      	ldr	r2, [r2, #4]
 8006f90:	0852      	lsrs	r2, r2, #1
 8006f92:	4611      	mov	r1, r2
 8006f94:	f04f 0200 	mov.w	r2, #0
 8006f98:	eb13 0b01 	adds.w	fp, r3, r1
 8006f9c:	eb44 0c02 	adc.w	ip, r4, r2
 8006fa0:	4658      	mov	r0, fp
 8006fa2:	4661      	mov	r1, ip
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	f04f 0400 	mov.w	r4, #0
 8006fac:	461a      	mov	r2, r3
 8006fae:	4623      	mov	r3, r4
 8006fb0:	f7f9 f8ee 	bl	8000190 <__aeabi_uldivmod>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	460c      	mov	r4, r1
 8006fb8:	61fb      	str	r3, [r7, #28]
            break;
 8006fba:	e002      	b.n	8006fc2 <UART_SetConfig+0xb52>
          default:
            ret = HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	76fb      	strb	r3, [r7, #27]
            break;
 8006fc0:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fc8:	d308      	bcc.n	8006fdc <UART_SetConfig+0xb6c>
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fd0:	d204      	bcs.n	8006fdc <UART_SetConfig+0xb6c>
        {
          huart->Instance->BRR = usartdiv;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	69fa      	ldr	r2, [r7, #28]
 8006fd8:	60da      	str	r2, [r3, #12]
 8006fda:	e35b      	b.n	8007694 <UART_SetConfig+0x1224>
        }
        else
        {
          ret = HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	76fb      	strb	r3, [r7, #27]
 8006fe0:	e358      	b.n	8007694 <UART_SetConfig+0x1224>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	69db      	ldr	r3, [r3, #28]
 8006fe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fea:	f040 81a6 	bne.w	800733a <UART_SetConfig+0xeca>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8006fee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	2b07      	cmp	r3, #7
 8006ff6:	f200 8180 	bhi.w	80072fa <UART_SetConfig+0xe8a>
 8006ffa:	a201      	add	r2, pc, #4	; (adr r2, 8007000 <UART_SetConfig+0xb90>)
 8006ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007000:	08007021 	.word	0x08007021
 8007004:	080070d9 	.word	0x080070d9
 8007008:	080072fb 	.word	0x080072fb
 800700c:	08007181 	.word	0x08007181
 8007010:	080072fb 	.word	0x080072fb
 8007014:	080072fb 	.word	0x080072fb
 8007018:	080072fb 	.word	0x080072fb
 800701c:	08007239 	.word	0x08007239
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007020:	f7fe f8b6 	bl	8005190 <HAL_RCC_GetPCLK2Freq>
 8007024:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702a:	2b00      	cmp	r3, #0
 800702c:	d044      	beq.n	80070b8 <UART_SetConfig+0xc48>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007032:	2b01      	cmp	r3, #1
 8007034:	d03e      	beq.n	80070b4 <UART_SetConfig+0xc44>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703a:	2b02      	cmp	r3, #2
 800703c:	d038      	beq.n	80070b0 <UART_SetConfig+0xc40>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007042:	2b03      	cmp	r3, #3
 8007044:	d032      	beq.n	80070ac <UART_SetConfig+0xc3c>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704a:	2b04      	cmp	r3, #4
 800704c:	d02c      	beq.n	80070a8 <UART_SetConfig+0xc38>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007052:	2b05      	cmp	r3, #5
 8007054:	d026      	beq.n	80070a4 <UART_SetConfig+0xc34>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705a:	2b06      	cmp	r3, #6
 800705c:	d020      	beq.n	80070a0 <UART_SetConfig+0xc30>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007062:	2b07      	cmp	r3, #7
 8007064:	d01a      	beq.n	800709c <UART_SetConfig+0xc2c>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706a:	2b08      	cmp	r3, #8
 800706c:	d014      	beq.n	8007098 <UART_SetConfig+0xc28>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007072:	2b09      	cmp	r3, #9
 8007074:	d00e      	beq.n	8007094 <UART_SetConfig+0xc24>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707a:	2b0a      	cmp	r3, #10
 800707c:	d008      	beq.n	8007090 <UART_SetConfig+0xc20>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007082:	2b0b      	cmp	r3, #11
 8007084:	d102      	bne.n	800708c <UART_SetConfig+0xc1c>
 8007086:	f44f 7380 	mov.w	r3, #256	; 0x100
 800708a:	e016      	b.n	80070ba <UART_SetConfig+0xc4a>
 800708c:	2301      	movs	r3, #1
 800708e:	e014      	b.n	80070ba <UART_SetConfig+0xc4a>
 8007090:	2380      	movs	r3, #128	; 0x80
 8007092:	e012      	b.n	80070ba <UART_SetConfig+0xc4a>
 8007094:	2340      	movs	r3, #64	; 0x40
 8007096:	e010      	b.n	80070ba <UART_SetConfig+0xc4a>
 8007098:	2320      	movs	r3, #32
 800709a:	e00e      	b.n	80070ba <UART_SetConfig+0xc4a>
 800709c:	2310      	movs	r3, #16
 800709e:	e00c      	b.n	80070ba <UART_SetConfig+0xc4a>
 80070a0:	230c      	movs	r3, #12
 80070a2:	e00a      	b.n	80070ba <UART_SetConfig+0xc4a>
 80070a4:	230a      	movs	r3, #10
 80070a6:	e008      	b.n	80070ba <UART_SetConfig+0xc4a>
 80070a8:	2308      	movs	r3, #8
 80070aa:	e006      	b.n	80070ba <UART_SetConfig+0xc4a>
 80070ac:	2306      	movs	r3, #6
 80070ae:	e004      	b.n	80070ba <UART_SetConfig+0xc4a>
 80070b0:	2304      	movs	r3, #4
 80070b2:	e002      	b.n	80070ba <UART_SetConfig+0xc4a>
 80070b4:	2302      	movs	r3, #2
 80070b6:	e000      	b.n	80070ba <UART_SetConfig+0xc4a>
 80070b8:	2301      	movs	r3, #1
 80070ba:	693a      	ldr	r2, [r7, #16]
 80070bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c0:	005a      	lsls	r2, r3, #1
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	085b      	lsrs	r3, r3, #1
 80070c8:	441a      	add	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	61fb      	str	r3, [r7, #28]
        break;
 80070d6:	e113      	b.n	8007300 <UART_SetConfig+0xe90>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d043      	beq.n	8007168 <UART_SetConfig+0xcf8>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d03d      	beq.n	8007164 <UART_SetConfig+0xcf4>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	d037      	beq.n	8007160 <UART_SetConfig+0xcf0>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f4:	2b03      	cmp	r3, #3
 80070f6:	d031      	beq.n	800715c <UART_SetConfig+0xcec>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fc:	2b04      	cmp	r3, #4
 80070fe:	d02b      	beq.n	8007158 <UART_SetConfig+0xce8>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007104:	2b05      	cmp	r3, #5
 8007106:	d025      	beq.n	8007154 <UART_SetConfig+0xce4>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710c:	2b06      	cmp	r3, #6
 800710e:	d01f      	beq.n	8007150 <UART_SetConfig+0xce0>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007114:	2b07      	cmp	r3, #7
 8007116:	d019      	beq.n	800714c <UART_SetConfig+0xcdc>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711c:	2b08      	cmp	r3, #8
 800711e:	d013      	beq.n	8007148 <UART_SetConfig+0xcd8>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007124:	2b09      	cmp	r3, #9
 8007126:	d00d      	beq.n	8007144 <UART_SetConfig+0xcd4>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712c:	2b0a      	cmp	r3, #10
 800712e:	d007      	beq.n	8007140 <UART_SetConfig+0xcd0>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007134:	2b0b      	cmp	r3, #11
 8007136:	d101      	bne.n	800713c <UART_SetConfig+0xccc>
 8007138:	4b8c      	ldr	r3, [pc, #560]	; (800736c <UART_SetConfig+0xefc>)
 800713a:	e016      	b.n	800716a <UART_SetConfig+0xcfa>
 800713c:	4b8c      	ldr	r3, [pc, #560]	; (8007370 <UART_SetConfig+0xf00>)
 800713e:	e014      	b.n	800716a <UART_SetConfig+0xcfa>
 8007140:	4b8c      	ldr	r3, [pc, #560]	; (8007374 <UART_SetConfig+0xf04>)
 8007142:	e012      	b.n	800716a <UART_SetConfig+0xcfa>
 8007144:	4b8c      	ldr	r3, [pc, #560]	; (8007378 <UART_SetConfig+0xf08>)
 8007146:	e010      	b.n	800716a <UART_SetConfig+0xcfa>
 8007148:	4b8c      	ldr	r3, [pc, #560]	; (800737c <UART_SetConfig+0xf0c>)
 800714a:	e00e      	b.n	800716a <UART_SetConfig+0xcfa>
 800714c:	4b8c      	ldr	r3, [pc, #560]	; (8007380 <UART_SetConfig+0xf10>)
 800714e:	e00c      	b.n	800716a <UART_SetConfig+0xcfa>
 8007150:	4b8c      	ldr	r3, [pc, #560]	; (8007384 <UART_SetConfig+0xf14>)
 8007152:	e00a      	b.n	800716a <UART_SetConfig+0xcfa>
 8007154:	4b8c      	ldr	r3, [pc, #560]	; (8007388 <UART_SetConfig+0xf18>)
 8007156:	e008      	b.n	800716a <UART_SetConfig+0xcfa>
 8007158:	4b8c      	ldr	r3, [pc, #560]	; (800738c <UART_SetConfig+0xf1c>)
 800715a:	e006      	b.n	800716a <UART_SetConfig+0xcfa>
 800715c:	4b8c      	ldr	r3, [pc, #560]	; (8007390 <UART_SetConfig+0xf20>)
 800715e:	e004      	b.n	800716a <UART_SetConfig+0xcfa>
 8007160:	4b8c      	ldr	r3, [pc, #560]	; (8007394 <UART_SetConfig+0xf24>)
 8007162:	e002      	b.n	800716a <UART_SetConfig+0xcfa>
 8007164:	4b8c      	ldr	r3, [pc, #560]	; (8007398 <UART_SetConfig+0xf28>)
 8007166:	e000      	b.n	800716a <UART_SetConfig+0xcfa>
 8007168:	4b81      	ldr	r3, [pc, #516]	; (8007370 <UART_SetConfig+0xf00>)
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	6852      	ldr	r2, [r2, #4]
 800716e:	0852      	lsrs	r2, r2, #1
 8007170:	441a      	add	r2, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	fbb2 f3f3 	udiv	r3, r2, r3
 800717a:	b29b      	uxth	r3, r3
 800717c:	61fb      	str	r3, [r7, #28]
        break;
 800717e:	e0bf      	b.n	8007300 <UART_SetConfig+0xe90>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007180:	f7fd ff72 	bl	8005068 <HAL_RCC_GetSysClockFreq>
 8007184:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718a:	2b00      	cmp	r3, #0
 800718c:	d044      	beq.n	8007218 <UART_SetConfig+0xda8>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007192:	2b01      	cmp	r3, #1
 8007194:	d03e      	beq.n	8007214 <UART_SetConfig+0xda4>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719a:	2b02      	cmp	r3, #2
 800719c:	d038      	beq.n	8007210 <UART_SetConfig+0xda0>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a2:	2b03      	cmp	r3, #3
 80071a4:	d032      	beq.n	800720c <UART_SetConfig+0xd9c>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071aa:	2b04      	cmp	r3, #4
 80071ac:	d02c      	beq.n	8007208 <UART_SetConfig+0xd98>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b2:	2b05      	cmp	r3, #5
 80071b4:	d026      	beq.n	8007204 <UART_SetConfig+0xd94>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ba:	2b06      	cmp	r3, #6
 80071bc:	d020      	beq.n	8007200 <UART_SetConfig+0xd90>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c2:	2b07      	cmp	r3, #7
 80071c4:	d01a      	beq.n	80071fc <UART_SetConfig+0xd8c>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ca:	2b08      	cmp	r3, #8
 80071cc:	d014      	beq.n	80071f8 <UART_SetConfig+0xd88>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d2:	2b09      	cmp	r3, #9
 80071d4:	d00e      	beq.n	80071f4 <UART_SetConfig+0xd84>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071da:	2b0a      	cmp	r3, #10
 80071dc:	d008      	beq.n	80071f0 <UART_SetConfig+0xd80>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e2:	2b0b      	cmp	r3, #11
 80071e4:	d102      	bne.n	80071ec <UART_SetConfig+0xd7c>
 80071e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80071ea:	e016      	b.n	800721a <UART_SetConfig+0xdaa>
 80071ec:	2301      	movs	r3, #1
 80071ee:	e014      	b.n	800721a <UART_SetConfig+0xdaa>
 80071f0:	2380      	movs	r3, #128	; 0x80
 80071f2:	e012      	b.n	800721a <UART_SetConfig+0xdaa>
 80071f4:	2340      	movs	r3, #64	; 0x40
 80071f6:	e010      	b.n	800721a <UART_SetConfig+0xdaa>
 80071f8:	2320      	movs	r3, #32
 80071fa:	e00e      	b.n	800721a <UART_SetConfig+0xdaa>
 80071fc:	2310      	movs	r3, #16
 80071fe:	e00c      	b.n	800721a <UART_SetConfig+0xdaa>
 8007200:	230c      	movs	r3, #12
 8007202:	e00a      	b.n	800721a <UART_SetConfig+0xdaa>
 8007204:	230a      	movs	r3, #10
 8007206:	e008      	b.n	800721a <UART_SetConfig+0xdaa>
 8007208:	2308      	movs	r3, #8
 800720a:	e006      	b.n	800721a <UART_SetConfig+0xdaa>
 800720c:	2306      	movs	r3, #6
 800720e:	e004      	b.n	800721a <UART_SetConfig+0xdaa>
 8007210:	2304      	movs	r3, #4
 8007212:	e002      	b.n	800721a <UART_SetConfig+0xdaa>
 8007214:	2302      	movs	r3, #2
 8007216:	e000      	b.n	800721a <UART_SetConfig+0xdaa>
 8007218:	2301      	movs	r3, #1
 800721a:	693a      	ldr	r2, [r7, #16]
 800721c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007220:	005a      	lsls	r2, r3, #1
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	085b      	lsrs	r3, r3, #1
 8007228:	441a      	add	r2, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007232:	b29b      	uxth	r3, r3
 8007234:	61fb      	str	r3, [r7, #28]
        break;
 8007236:	e063      	b.n	8007300 <UART_SetConfig+0xe90>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723c:	2b00      	cmp	r3, #0
 800723e:	d04f      	beq.n	80072e0 <UART_SetConfig+0xe70>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007244:	2b01      	cmp	r3, #1
 8007246:	d048      	beq.n	80072da <UART_SetConfig+0xe6a>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724c:	2b02      	cmp	r3, #2
 800724e:	d041      	beq.n	80072d4 <UART_SetConfig+0xe64>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007254:	2b03      	cmp	r3, #3
 8007256:	d03a      	beq.n	80072ce <UART_SetConfig+0xe5e>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725c:	2b04      	cmp	r3, #4
 800725e:	d033      	beq.n	80072c8 <UART_SetConfig+0xe58>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007264:	2b05      	cmp	r3, #5
 8007266:	d02c      	beq.n	80072c2 <UART_SetConfig+0xe52>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726c:	2b06      	cmp	r3, #6
 800726e:	d025      	beq.n	80072bc <UART_SetConfig+0xe4c>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007274:	2b07      	cmp	r3, #7
 8007276:	d01e      	beq.n	80072b6 <UART_SetConfig+0xe46>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727c:	2b08      	cmp	r3, #8
 800727e:	d017      	beq.n	80072b0 <UART_SetConfig+0xe40>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007284:	2b09      	cmp	r3, #9
 8007286:	d010      	beq.n	80072aa <UART_SetConfig+0xe3a>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728c:	2b0a      	cmp	r3, #10
 800728e:	d009      	beq.n	80072a4 <UART_SetConfig+0xe34>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007294:	2b0b      	cmp	r3, #11
 8007296:	d102      	bne.n	800729e <UART_SetConfig+0xe2e>
 8007298:	f44f 7380 	mov.w	r3, #256	; 0x100
 800729c:	e022      	b.n	80072e4 <UART_SetConfig+0xe74>
 800729e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80072a2:	e01f      	b.n	80072e4 <UART_SetConfig+0xe74>
 80072a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072a8:	e01c      	b.n	80072e4 <UART_SetConfig+0xe74>
 80072aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072ae:	e019      	b.n	80072e4 <UART_SetConfig+0xe74>
 80072b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80072b4:	e016      	b.n	80072e4 <UART_SetConfig+0xe74>
 80072b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072ba:	e013      	b.n	80072e4 <UART_SetConfig+0xe74>
 80072bc:	f241 5354 	movw	r3, #5460	; 0x1554
 80072c0:	e010      	b.n	80072e4 <UART_SetConfig+0xe74>
 80072c2:	f641 1398 	movw	r3, #6552	; 0x1998
 80072c6:	e00d      	b.n	80072e4 <UART_SetConfig+0xe74>
 80072c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80072cc:	e00a      	b.n	80072e4 <UART_SetConfig+0xe74>
 80072ce:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80072d2:	e007      	b.n	80072e4 <UART_SetConfig+0xe74>
 80072d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80072d8:	e004      	b.n	80072e4 <UART_SetConfig+0xe74>
 80072da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072de:	e001      	b.n	80072e4 <UART_SetConfig+0xe74>
 80072e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	6852      	ldr	r2, [r2, #4]
 80072e8:	0852      	lsrs	r2, r2, #1
 80072ea:	441a      	add	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	61fb      	str	r3, [r7, #28]
        break;
 80072f8:	e002      	b.n	8007300 <UART_SetConfig+0xe90>
      default:
        ret = HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	76fb      	strb	r3, [r7, #27]
        break;
 80072fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	2b0f      	cmp	r3, #15
 8007304:	d916      	bls.n	8007334 <UART_SetConfig+0xec4>
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800730c:	d212      	bcs.n	8007334 <UART_SetConfig+0xec4>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	b29b      	uxth	r3, r3
 8007312:	f023 030f 	bic.w	r3, r3, #15
 8007316:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	085b      	lsrs	r3, r3, #1
 800731c:	b29b      	uxth	r3, r3
 800731e:	f003 0307 	and.w	r3, r3, #7
 8007322:	b29a      	uxth	r2, r3
 8007324:	89fb      	ldrh	r3, [r7, #14]
 8007326:	4313      	orrs	r3, r2
 8007328:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	89fa      	ldrh	r2, [r7, #14]
 8007330:	60da      	str	r2, [r3, #12]
 8007332:	e1af      	b.n	8007694 <UART_SetConfig+0x1224>
    }
    else
    {
      ret = HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	76fb      	strb	r3, [r7, #27]
 8007338:	e1ac      	b.n	8007694 <UART_SetConfig+0x1224>
    }
  }
  else
  {
    switch (clocksource)
 800733a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800733e:	3b01      	subs	r3, #1
 8007340:	2b07      	cmp	r3, #7
 8007342:	f200 8196 	bhi.w	8007672 <UART_SetConfig+0x1202>
 8007346:	a201      	add	r2, pc, #4	; (adr r2, 800734c <UART_SetConfig+0xedc>)
 8007348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800734c:	0800739d 	.word	0x0800739d
 8007350:	08007453 	.word	0x08007453
 8007354:	08007673 	.word	0x08007673
 8007358:	080074fd 	.word	0x080074fd
 800735c:	08007673 	.word	0x08007673
 8007360:	08007673 	.word	0x08007673
 8007364:	08007673 	.word	0x08007673
 8007368:	080075b3 	.word	0x080075b3
 800736c:	0001e848 	.word	0x0001e848
 8007370:	01e84800 	.word	0x01e84800
 8007374:	0003d090 	.word	0x0003d090
 8007378:	0007a120 	.word	0x0007a120
 800737c:	000f4240 	.word	0x000f4240
 8007380:	001e8480 	.word	0x001e8480
 8007384:	0028b0aa 	.word	0x0028b0aa
 8007388:	0030d400 	.word	0x0030d400
 800738c:	003d0900 	.word	0x003d0900
 8007390:	00516154 	.word	0x00516154
 8007394:	007a1200 	.word	0x007a1200
 8007398:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800739c:	f7fd fef8 	bl	8005190 <HAL_RCC_GetPCLK2Freq>
 80073a0:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d044      	beq.n	8007434 <UART_SetConfig+0xfc4>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d03e      	beq.n	8007430 <UART_SetConfig+0xfc0>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d038      	beq.n	800742c <UART_SetConfig+0xfbc>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073be:	2b03      	cmp	r3, #3
 80073c0:	d032      	beq.n	8007428 <UART_SetConfig+0xfb8>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c6:	2b04      	cmp	r3, #4
 80073c8:	d02c      	beq.n	8007424 <UART_SetConfig+0xfb4>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ce:	2b05      	cmp	r3, #5
 80073d0:	d026      	beq.n	8007420 <UART_SetConfig+0xfb0>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d6:	2b06      	cmp	r3, #6
 80073d8:	d020      	beq.n	800741c <UART_SetConfig+0xfac>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073de:	2b07      	cmp	r3, #7
 80073e0:	d01a      	beq.n	8007418 <UART_SetConfig+0xfa8>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e6:	2b08      	cmp	r3, #8
 80073e8:	d014      	beq.n	8007414 <UART_SetConfig+0xfa4>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ee:	2b09      	cmp	r3, #9
 80073f0:	d00e      	beq.n	8007410 <UART_SetConfig+0xfa0>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f6:	2b0a      	cmp	r3, #10
 80073f8:	d008      	beq.n	800740c <UART_SetConfig+0xf9c>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fe:	2b0b      	cmp	r3, #11
 8007400:	d102      	bne.n	8007408 <UART_SetConfig+0xf98>
 8007402:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007406:	e016      	b.n	8007436 <UART_SetConfig+0xfc6>
 8007408:	2301      	movs	r3, #1
 800740a:	e014      	b.n	8007436 <UART_SetConfig+0xfc6>
 800740c:	2380      	movs	r3, #128	; 0x80
 800740e:	e012      	b.n	8007436 <UART_SetConfig+0xfc6>
 8007410:	2340      	movs	r3, #64	; 0x40
 8007412:	e010      	b.n	8007436 <UART_SetConfig+0xfc6>
 8007414:	2320      	movs	r3, #32
 8007416:	e00e      	b.n	8007436 <UART_SetConfig+0xfc6>
 8007418:	2310      	movs	r3, #16
 800741a:	e00c      	b.n	8007436 <UART_SetConfig+0xfc6>
 800741c:	230c      	movs	r3, #12
 800741e:	e00a      	b.n	8007436 <UART_SetConfig+0xfc6>
 8007420:	230a      	movs	r3, #10
 8007422:	e008      	b.n	8007436 <UART_SetConfig+0xfc6>
 8007424:	2308      	movs	r3, #8
 8007426:	e006      	b.n	8007436 <UART_SetConfig+0xfc6>
 8007428:	2306      	movs	r3, #6
 800742a:	e004      	b.n	8007436 <UART_SetConfig+0xfc6>
 800742c:	2304      	movs	r3, #4
 800742e:	e002      	b.n	8007436 <UART_SetConfig+0xfc6>
 8007430:	2302      	movs	r3, #2
 8007432:	e000      	b.n	8007436 <UART_SetConfig+0xfc6>
 8007434:	2301      	movs	r3, #1
 8007436:	693a      	ldr	r2, [r7, #16]
 8007438:	fbb2 f2f3 	udiv	r2, r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	085b      	lsrs	r3, r3, #1
 8007442:	441a      	add	r2, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	fbb2 f3f3 	udiv	r3, r2, r3
 800744c:	b29b      	uxth	r3, r3
 800744e:	61fb      	str	r3, [r7, #28]
        break;
 8007450:	e112      	b.n	8007678 <UART_SetConfig+0x1208>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007456:	2b00      	cmp	r3, #0
 8007458:	d044      	beq.n	80074e4 <UART_SetConfig+0x1074>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745e:	2b01      	cmp	r3, #1
 8007460:	d03e      	beq.n	80074e0 <UART_SetConfig+0x1070>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007466:	2b02      	cmp	r3, #2
 8007468:	d038      	beq.n	80074dc <UART_SetConfig+0x106c>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746e:	2b03      	cmp	r3, #3
 8007470:	d032      	beq.n	80074d8 <UART_SetConfig+0x1068>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007476:	2b04      	cmp	r3, #4
 8007478:	d02c      	beq.n	80074d4 <UART_SetConfig+0x1064>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747e:	2b05      	cmp	r3, #5
 8007480:	d026      	beq.n	80074d0 <UART_SetConfig+0x1060>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007486:	2b06      	cmp	r3, #6
 8007488:	d020      	beq.n	80074cc <UART_SetConfig+0x105c>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748e:	2b07      	cmp	r3, #7
 8007490:	d01a      	beq.n	80074c8 <UART_SetConfig+0x1058>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007496:	2b08      	cmp	r3, #8
 8007498:	d014      	beq.n	80074c4 <UART_SetConfig+0x1054>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749e:	2b09      	cmp	r3, #9
 80074a0:	d00e      	beq.n	80074c0 <UART_SetConfig+0x1050>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a6:	2b0a      	cmp	r3, #10
 80074a8:	d008      	beq.n	80074bc <UART_SetConfig+0x104c>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ae:	2b0b      	cmp	r3, #11
 80074b0:	d102      	bne.n	80074b8 <UART_SetConfig+0x1048>
 80074b2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80074b6:	e016      	b.n	80074e6 <UART_SetConfig+0x1076>
 80074b8:	4b80      	ldr	r3, [pc, #512]	; (80076bc <UART_SetConfig+0x124c>)
 80074ba:	e014      	b.n	80074e6 <UART_SetConfig+0x1076>
 80074bc:	4b80      	ldr	r3, [pc, #512]	; (80076c0 <UART_SetConfig+0x1250>)
 80074be:	e012      	b.n	80074e6 <UART_SetConfig+0x1076>
 80074c0:	4b80      	ldr	r3, [pc, #512]	; (80076c4 <UART_SetConfig+0x1254>)
 80074c2:	e010      	b.n	80074e6 <UART_SetConfig+0x1076>
 80074c4:	4b80      	ldr	r3, [pc, #512]	; (80076c8 <UART_SetConfig+0x1258>)
 80074c6:	e00e      	b.n	80074e6 <UART_SetConfig+0x1076>
 80074c8:	4b80      	ldr	r3, [pc, #512]	; (80076cc <UART_SetConfig+0x125c>)
 80074ca:	e00c      	b.n	80074e6 <UART_SetConfig+0x1076>
 80074cc:	4b80      	ldr	r3, [pc, #512]	; (80076d0 <UART_SetConfig+0x1260>)
 80074ce:	e00a      	b.n	80074e6 <UART_SetConfig+0x1076>
 80074d0:	4b80      	ldr	r3, [pc, #512]	; (80076d4 <UART_SetConfig+0x1264>)
 80074d2:	e008      	b.n	80074e6 <UART_SetConfig+0x1076>
 80074d4:	4b80      	ldr	r3, [pc, #512]	; (80076d8 <UART_SetConfig+0x1268>)
 80074d6:	e006      	b.n	80074e6 <UART_SetConfig+0x1076>
 80074d8:	4b80      	ldr	r3, [pc, #512]	; (80076dc <UART_SetConfig+0x126c>)
 80074da:	e004      	b.n	80074e6 <UART_SetConfig+0x1076>
 80074dc:	4b80      	ldr	r3, [pc, #512]	; (80076e0 <UART_SetConfig+0x1270>)
 80074de:	e002      	b.n	80074e6 <UART_SetConfig+0x1076>
 80074e0:	4b80      	ldr	r3, [pc, #512]	; (80076e4 <UART_SetConfig+0x1274>)
 80074e2:	e000      	b.n	80074e6 <UART_SetConfig+0x1076>
 80074e4:	4b75      	ldr	r3, [pc, #468]	; (80076bc <UART_SetConfig+0x124c>)
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	6852      	ldr	r2, [r2, #4]
 80074ea:	0852      	lsrs	r2, r2, #1
 80074ec:	441a      	add	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	61fb      	str	r3, [r7, #28]
        break;
 80074fa:	e0bd      	b.n	8007678 <UART_SetConfig+0x1208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074fc:	f7fd fdb4 	bl	8005068 <HAL_RCC_GetSysClockFreq>
 8007500:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007506:	2b00      	cmp	r3, #0
 8007508:	d044      	beq.n	8007594 <UART_SetConfig+0x1124>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750e:	2b01      	cmp	r3, #1
 8007510:	d03e      	beq.n	8007590 <UART_SetConfig+0x1120>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007516:	2b02      	cmp	r3, #2
 8007518:	d038      	beq.n	800758c <UART_SetConfig+0x111c>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751e:	2b03      	cmp	r3, #3
 8007520:	d032      	beq.n	8007588 <UART_SetConfig+0x1118>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007526:	2b04      	cmp	r3, #4
 8007528:	d02c      	beq.n	8007584 <UART_SetConfig+0x1114>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752e:	2b05      	cmp	r3, #5
 8007530:	d026      	beq.n	8007580 <UART_SetConfig+0x1110>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007536:	2b06      	cmp	r3, #6
 8007538:	d020      	beq.n	800757c <UART_SetConfig+0x110c>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753e:	2b07      	cmp	r3, #7
 8007540:	d01a      	beq.n	8007578 <UART_SetConfig+0x1108>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007546:	2b08      	cmp	r3, #8
 8007548:	d014      	beq.n	8007574 <UART_SetConfig+0x1104>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754e:	2b09      	cmp	r3, #9
 8007550:	d00e      	beq.n	8007570 <UART_SetConfig+0x1100>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007556:	2b0a      	cmp	r3, #10
 8007558:	d008      	beq.n	800756c <UART_SetConfig+0x10fc>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755e:	2b0b      	cmp	r3, #11
 8007560:	d102      	bne.n	8007568 <UART_SetConfig+0x10f8>
 8007562:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007566:	e016      	b.n	8007596 <UART_SetConfig+0x1126>
 8007568:	2301      	movs	r3, #1
 800756a:	e014      	b.n	8007596 <UART_SetConfig+0x1126>
 800756c:	2380      	movs	r3, #128	; 0x80
 800756e:	e012      	b.n	8007596 <UART_SetConfig+0x1126>
 8007570:	2340      	movs	r3, #64	; 0x40
 8007572:	e010      	b.n	8007596 <UART_SetConfig+0x1126>
 8007574:	2320      	movs	r3, #32
 8007576:	e00e      	b.n	8007596 <UART_SetConfig+0x1126>
 8007578:	2310      	movs	r3, #16
 800757a:	e00c      	b.n	8007596 <UART_SetConfig+0x1126>
 800757c:	230c      	movs	r3, #12
 800757e:	e00a      	b.n	8007596 <UART_SetConfig+0x1126>
 8007580:	230a      	movs	r3, #10
 8007582:	e008      	b.n	8007596 <UART_SetConfig+0x1126>
 8007584:	2308      	movs	r3, #8
 8007586:	e006      	b.n	8007596 <UART_SetConfig+0x1126>
 8007588:	2306      	movs	r3, #6
 800758a:	e004      	b.n	8007596 <UART_SetConfig+0x1126>
 800758c:	2304      	movs	r3, #4
 800758e:	e002      	b.n	8007596 <UART_SetConfig+0x1126>
 8007590:	2302      	movs	r3, #2
 8007592:	e000      	b.n	8007596 <UART_SetConfig+0x1126>
 8007594:	2301      	movs	r3, #1
 8007596:	693a      	ldr	r2, [r7, #16]
 8007598:	fbb2 f2f3 	udiv	r2, r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	085b      	lsrs	r3, r3, #1
 80075a2:	441a      	add	r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	61fb      	str	r3, [r7, #28]
        break;
 80075b0:	e062      	b.n	8007678 <UART_SetConfig+0x1208>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d04e      	beq.n	8007658 <UART_SetConfig+0x11e8>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d047      	beq.n	8007652 <UART_SetConfig+0x11e2>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d040      	beq.n	800764c <UART_SetConfig+0x11dc>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ce:	2b03      	cmp	r3, #3
 80075d0:	d039      	beq.n	8007646 <UART_SetConfig+0x11d6>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d6:	2b04      	cmp	r3, #4
 80075d8:	d032      	beq.n	8007640 <UART_SetConfig+0x11d0>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075de:	2b05      	cmp	r3, #5
 80075e0:	d02b      	beq.n	800763a <UART_SetConfig+0x11ca>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e6:	2b06      	cmp	r3, #6
 80075e8:	d024      	beq.n	8007634 <UART_SetConfig+0x11c4>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ee:	2b07      	cmp	r3, #7
 80075f0:	d01d      	beq.n	800762e <UART_SetConfig+0x11be>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f6:	2b08      	cmp	r3, #8
 80075f8:	d016      	beq.n	8007628 <UART_SetConfig+0x11b8>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fe:	2b09      	cmp	r3, #9
 8007600:	d00f      	beq.n	8007622 <UART_SetConfig+0x11b2>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007606:	2b0a      	cmp	r3, #10
 8007608:	d008      	beq.n	800761c <UART_SetConfig+0x11ac>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760e:	2b0b      	cmp	r3, #11
 8007610:	d101      	bne.n	8007616 <UART_SetConfig+0x11a6>
 8007612:	2380      	movs	r3, #128	; 0x80
 8007614:	e022      	b.n	800765c <UART_SetConfig+0x11ec>
 8007616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800761a:	e01f      	b.n	800765c <UART_SetConfig+0x11ec>
 800761c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007620:	e01c      	b.n	800765c <UART_SetConfig+0x11ec>
 8007622:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007626:	e019      	b.n	800765c <UART_SetConfig+0x11ec>
 8007628:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800762c:	e016      	b.n	800765c <UART_SetConfig+0x11ec>
 800762e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007632:	e013      	b.n	800765c <UART_SetConfig+0x11ec>
 8007634:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8007638:	e010      	b.n	800765c <UART_SetConfig+0x11ec>
 800763a:	f640 43cc 	movw	r3, #3276	; 0xccc
 800763e:	e00d      	b.n	800765c <UART_SetConfig+0x11ec>
 8007640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007644:	e00a      	b.n	800765c <UART_SetConfig+0x11ec>
 8007646:	f241 5355 	movw	r3, #5461	; 0x1555
 800764a:	e007      	b.n	800765c <UART_SetConfig+0x11ec>
 800764c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007650:	e004      	b.n	800765c <UART_SetConfig+0x11ec>
 8007652:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007656:	e001      	b.n	800765c <UART_SetConfig+0x11ec>
 8007658:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	6852      	ldr	r2, [r2, #4]
 8007660:	0852      	lsrs	r2, r2, #1
 8007662:	441a      	add	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	fbb2 f3f3 	udiv	r3, r2, r3
 800766c:	b29b      	uxth	r3, r3
 800766e:	61fb      	str	r3, [r7, #28]
        break;
 8007670:	e002      	b.n	8007678 <UART_SetConfig+0x1208>
      default:
        ret = HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	76fb      	strb	r3, [r7, #27]
        break;
 8007676:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	2b0f      	cmp	r3, #15
 800767c:	d908      	bls.n	8007690 <UART_SetConfig+0x1220>
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007684:	d204      	bcs.n	8007690 <UART_SetConfig+0x1220>
    {
      huart->Instance->BRR = usartdiv;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	69fa      	ldr	r2, [r7, #28]
 800768c:	60da      	str	r2, [r3, #12]
 800768e:	e001      	b.n	8007694 <UART_SetConfig+0x1224>
    }
    else
    {
      ret = HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80076b0:	7efb      	ldrb	r3, [r7, #27]
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3728      	adds	r7, #40	; 0x28
 80076b6:	46bd      	mov	sp, r7
 80076b8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80076bc:	00f42400 	.word	0x00f42400
 80076c0:	0001e848 	.word	0x0001e848
 80076c4:	0003d090 	.word	0x0003d090
 80076c8:	0007a120 	.word	0x0007a120
 80076cc:	000f4240 	.word	0x000f4240
 80076d0:	00145855 	.word	0x00145855
 80076d4:	00186a00 	.word	0x00186a00
 80076d8:	001e8480 	.word	0x001e8480
 80076dc:	0028b0aa 	.word	0x0028b0aa
 80076e0:	003d0900 	.word	0x003d0900
 80076e4:	007a1200 	.word	0x007a1200

080076e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f4:	2bff      	cmp	r3, #255	; 0xff
 80076f6:	d904      	bls.n	8007702 <UART_AdvFeatureConfig+0x1a>
 80076f8:	f640 411f 	movw	r1, #3103	; 0xc1f
 80076fc:	4898      	ldr	r0, [pc, #608]	; (8007960 <UART_AdvFeatureConfig+0x278>)
 80076fe:	f7f9 ffdd 	bl	80016bc <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007706:	f003 0301 	and.w	r3, r3, #1
 800770a:	2b00      	cmp	r3, #0
 800770c:	d018      	beq.n	8007740 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007712:	2b00      	cmp	r3, #0
 8007714:	d009      	beq.n	800772a <UART_AdvFeatureConfig+0x42>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800771e:	d004      	beq.n	800772a <UART_AdvFeatureConfig+0x42>
 8007720:	f640 4124 	movw	r1, #3108	; 0xc24
 8007724:	488e      	ldr	r0, [pc, #568]	; (8007960 <UART_AdvFeatureConfig+0x278>)
 8007726:	f7f9 ffc9 	bl	80016bc <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	430a      	orrs	r2, r1
 800773e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007744:	f003 0302 	and.w	r3, r3, #2
 8007748:	2b00      	cmp	r3, #0
 800774a:	d018      	beq.n	800777e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007750:	2b00      	cmp	r3, #0
 8007752:	d009      	beq.n	8007768 <UART_AdvFeatureConfig+0x80>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800775c:	d004      	beq.n	8007768 <UART_AdvFeatureConfig+0x80>
 800775e:	f640 412b 	movw	r1, #3115	; 0xc2b
 8007762:	487f      	ldr	r0, [pc, #508]	; (8007960 <UART_AdvFeatureConfig+0x278>)
 8007764:	f7f9 ffaa 	bl	80016bc <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	430a      	orrs	r2, r1
 800777c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007782:	f003 0304 	and.w	r3, r3, #4
 8007786:	2b00      	cmp	r3, #0
 8007788:	d018      	beq.n	80077bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800778e:	2b00      	cmp	r3, #0
 8007790:	d009      	beq.n	80077a6 <UART_AdvFeatureConfig+0xbe>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007796:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800779a:	d004      	beq.n	80077a6 <UART_AdvFeatureConfig+0xbe>
 800779c:	f640 4132 	movw	r1, #3122	; 0xc32
 80077a0:	486f      	ldr	r0, [pc, #444]	; (8007960 <UART_AdvFeatureConfig+0x278>)
 80077a2:	f7f9 ff8b 	bl	80016bc <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	430a      	orrs	r2, r1
 80077ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c0:	f003 0308 	and.w	r3, r3, #8
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d018      	beq.n	80077fa <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d009      	beq.n	80077e4 <UART_AdvFeatureConfig+0xfc>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077d8:	d004      	beq.n	80077e4 <UART_AdvFeatureConfig+0xfc>
 80077da:	f640 4139 	movw	r1, #3129	; 0xc39
 80077de:	4860      	ldr	r0, [pc, #384]	; (8007960 <UART_AdvFeatureConfig+0x278>)
 80077e0:	f7f9 ff6c 	bl	80016bc <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	430a      	orrs	r2, r1
 80077f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077fe:	f003 0310 	and.w	r3, r3, #16
 8007802:	2b00      	cmp	r3, #0
 8007804:	d018      	beq.n	8007838 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800780a:	2b00      	cmp	r3, #0
 800780c:	d009      	beq.n	8007822 <UART_AdvFeatureConfig+0x13a>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007816:	d004      	beq.n	8007822 <UART_AdvFeatureConfig+0x13a>
 8007818:	f44f 6144 	mov.w	r1, #3136	; 0xc40
 800781c:	4850      	ldr	r0, [pc, #320]	; (8007960 <UART_AdvFeatureConfig+0x278>)
 800781e:	f7f9 ff4d 	bl	80016bc <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	430a      	orrs	r2, r1
 8007836:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800783c:	f003 0320 	and.w	r3, r3, #32
 8007840:	2b00      	cmp	r3, #0
 8007842:	d018      	beq.n	8007876 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007848:	2b00      	cmp	r3, #0
 800784a:	d009      	beq.n	8007860 <UART_AdvFeatureConfig+0x178>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007850:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007854:	d004      	beq.n	8007860 <UART_AdvFeatureConfig+0x178>
 8007856:	f640 4147 	movw	r1, #3143	; 0xc47
 800785a:	4841      	ldr	r0, [pc, #260]	; (8007960 <UART_AdvFeatureConfig+0x278>)
 800785c:	f7f9 ff2e 	bl	80016bc <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	430a      	orrs	r2, r1
 8007874:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800787a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800787e:	2b00      	cmp	r3, #0
 8007880:	d04a      	beq.n	8007918 <UART_AdvFeatureConfig+0x230>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a37      	ldr	r2, [pc, #220]	; (8007964 <UART_AdvFeatureConfig+0x27c>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d004      	beq.n	8007896 <UART_AdvFeatureConfig+0x1ae>
 800788c:	f640 414e 	movw	r1, #3150	; 0xc4e
 8007890:	4833      	ldr	r0, [pc, #204]	; (8007960 <UART_AdvFeatureConfig+0x278>)
 8007892:	f7f9 ff13 	bl	80016bc <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800789a:	2b00      	cmp	r3, #0
 800789c:	d009      	beq.n	80078b2 <UART_AdvFeatureConfig+0x1ca>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078a6:	d004      	beq.n	80078b2 <UART_AdvFeatureConfig+0x1ca>
 80078a8:	f640 414f 	movw	r1, #3151	; 0xc4f
 80078ac:	482c      	ldr	r0, [pc, #176]	; (8007960 <UART_AdvFeatureConfig+0x278>)
 80078ae:	f7f9 ff05 	bl	80016bc <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	430a      	orrs	r2, r1
 80078c6:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078d0:	d122      	bne.n	8007918 <UART_AdvFeatureConfig+0x230>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d013      	beq.n	8007902 <UART_AdvFeatureConfig+0x21a>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078e2:	d00e      	beq.n	8007902 <UART_AdvFeatureConfig+0x21a>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078ec:	d009      	beq.n	8007902 <UART_AdvFeatureConfig+0x21a>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078f2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80078f6:	d004      	beq.n	8007902 <UART_AdvFeatureConfig+0x21a>
 80078f8:	f640 4154 	movw	r1, #3156	; 0xc54
 80078fc:	4818      	ldr	r0, [pc, #96]	; (8007960 <UART_AdvFeatureConfig+0x278>)
 80078fe:	f7f9 fedd 	bl	80016bc <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	430a      	orrs	r2, r1
 8007916:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800791c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007920:	2b00      	cmp	r3, #0
 8007922:	d018      	beq.n	8007956 <UART_AdvFeatureConfig+0x26e>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007928:	2b00      	cmp	r3, #0
 800792a:	d009      	beq.n	8007940 <UART_AdvFeatureConfig+0x258>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007930:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007934:	d004      	beq.n	8007940 <UART_AdvFeatureConfig+0x258>
 8007936:	f640 415c 	movw	r1, #3164	; 0xc5c
 800793a:	4809      	ldr	r0, [pc, #36]	; (8007960 <UART_AdvFeatureConfig+0x278>)
 800793c:	f7f9 febe 	bl	80016bc <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	430a      	orrs	r2, r1
 8007954:	605a      	str	r2, [r3, #4]
  }
}
 8007956:	bf00      	nop
 8007958:	3708      	adds	r7, #8
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	0800e368 	.word	0x0800e368
 8007964:	40013800 	.word	0x40013800

08007968 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b086      	sub	sp, #24
 800796c:	af02      	add	r7, sp, #8
 800796e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007978:	f7fa fc8e 	bl	8002298 <HAL_GetTick>
 800797c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 0308 	and.w	r3, r3, #8
 8007988:	2b08      	cmp	r3, #8
 800798a:	d10e      	bne.n	80079aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800798c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007990:	9300      	str	r3, [sp, #0]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 f82c 	bl	80079f8 <UART_WaitOnFlagUntilTimeout>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d001      	beq.n	80079aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079a6:	2303      	movs	r3, #3
 80079a8:	e022      	b.n	80079f0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 0304 	and.w	r3, r3, #4
 80079b4:	2b04      	cmp	r3, #4
 80079b6:	d10e      	bne.n	80079d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079bc:	9300      	str	r3, [sp, #0]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 f816 	bl	80079f8 <UART_WaitOnFlagUntilTimeout>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d001      	beq.n	80079d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079d2:	2303      	movs	r3, #3
 80079d4:	e00c      	b.n	80079f0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2220      	movs	r2, #32
 80079da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2220      	movs	r2, #32
 80079e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3710      	adds	r7, #16
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	603b      	str	r3, [r7, #0]
 8007a04:	4613      	mov	r3, r2
 8007a06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a08:	e062      	b.n	8007ad0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a10:	d05e      	beq.n	8007ad0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a12:	f7fa fc41 	bl	8002298 <HAL_GetTick>
 8007a16:	4602      	mov	r2, r0
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	69ba      	ldr	r2, [r7, #24]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d302      	bcc.n	8007a28 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d11d      	bne.n	8007a64 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007a36:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	689a      	ldr	r2, [r3, #8]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f022 0201 	bic.w	r2, r2, #1
 8007a46:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2220      	movs	r2, #32
 8007a4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2220      	movs	r2, #32
 8007a54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007a60:	2303      	movs	r3, #3
 8007a62:	e045      	b.n	8007af0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 0304 	and.w	r3, r3, #4
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d02e      	beq.n	8007ad0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	69db      	ldr	r3, [r3, #28]
 8007a78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a80:	d126      	bne.n	8007ad0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a8a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007a9a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	689a      	ldr	r2, [r3, #8]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f022 0201 	bic.w	r2, r2, #1
 8007aaa:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2220      	movs	r2, #32
 8007ab0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2220      	movs	r2, #32
 8007ab8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2220      	movs	r2, #32
 8007ac0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8007acc:	2303      	movs	r3, #3
 8007ace:	e00f      	b.n	8007af0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	69da      	ldr	r2, [r3, #28]
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	4013      	ands	r3, r2
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	bf0c      	ite	eq
 8007ae0:	2301      	moveq	r3, #1
 8007ae2:	2300      	movne	r3, #0
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	79fb      	ldrb	r3, [r7, #7]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d08d      	beq.n	8007a0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a1f      	ldr	r2, [pc, #124]	; (8007b84 <HAL_UARTEx_DisableFifoMode+0x8c>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d009      	beq.n	8007b1e <HAL_UARTEx_DisableFifoMode+0x26>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a1e      	ldr	r2, [pc, #120]	; (8007b88 <HAL_UARTEx_DisableFifoMode+0x90>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d004      	beq.n	8007b1e <HAL_UARTEx_DisableFifoMode+0x26>
 8007b14:	f240 2111 	movw	r1, #529	; 0x211
 8007b18:	481c      	ldr	r0, [pc, #112]	; (8007b8c <HAL_UARTEx_DisableFifoMode+0x94>)
 8007b1a:	f7f9 fdcf 	bl	80016bc <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d101      	bne.n	8007b2c <HAL_UARTEx_DisableFifoMode+0x34>
 8007b28:	2302      	movs	r3, #2
 8007b2a:	e027      	b.n	8007b7c <HAL_UARTEx_DisableFifoMode+0x84>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2224      	movs	r2, #36	; 0x24
 8007b38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f022 0201 	bic.w	r2, r2, #1
 8007b52:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007b5a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2220      	movs	r2, #32
 8007b6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	40013800 	.word	0x40013800
 8007b88:	40008000 	.word	0x40008000
 8007b8c:	0800e3a4 	.word	0x0800e3a4

08007b90 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a31      	ldr	r2, [pc, #196]	; (8007c64 <HAL_UARTEx_SetTxFifoThreshold+0xd4>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d009      	beq.n	8007bb8 <HAL_UARTEx_SetTxFifoThreshold+0x28>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a2f      	ldr	r2, [pc, #188]	; (8007c68 <HAL_UARTEx_SetTxFifoThreshold+0xd8>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d004      	beq.n	8007bb8 <HAL_UARTEx_SetTxFifoThreshold+0x28>
 8007bae:	f240 213f 	movw	r1, #575	; 0x23f
 8007bb2:	482e      	ldr	r0, [pc, #184]	; (8007c6c <HAL_UARTEx_SetTxFifoThreshold+0xdc>)
 8007bb4:	f7f9 fd82 	bl	80016bc <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d018      	beq.n	8007bf0 <HAL_UARTEx_SetTxFifoThreshold+0x60>
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bc4:	d014      	beq.n	8007bf0 <HAL_UARTEx_SetTxFifoThreshold+0x60>
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bcc:	d010      	beq.n	8007bf0 <HAL_UARTEx_SetTxFifoThreshold+0x60>
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007bd4:	d00c      	beq.n	8007bf0 <HAL_UARTEx_SetTxFifoThreshold+0x60>
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bdc:	d008      	beq.n	8007bf0 <HAL_UARTEx_SetTxFifoThreshold+0x60>
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 8007be4:	d004      	beq.n	8007bf0 <HAL_UARTEx_SetTxFifoThreshold+0x60>
 8007be6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007bea:	4820      	ldr	r0, [pc, #128]	; (8007c6c <HAL_UARTEx_SetTxFifoThreshold+0xdc>)
 8007bec:	f7f9 fd66 	bl	80016bc <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d101      	bne.n	8007bfe <HAL_UARTEx_SetTxFifoThreshold+0x6e>
 8007bfa:	2302      	movs	r3, #2
 8007bfc:	e02d      	b.n	8007c5a <HAL_UARTEx_SetTxFifoThreshold+0xca>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2201      	movs	r2, #1
 8007c02:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2224      	movs	r2, #36	; 0x24
 8007c0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f022 0201 	bic.w	r2, r2, #1
 8007c24:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	683a      	ldr	r2, [r7, #0]
 8007c36:	430a      	orrs	r2, r1
 8007c38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 f888 	bl	8007d50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2220      	movs	r2, #32
 8007c4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	40013800 	.word	0x40013800
 8007c68:	40008000 	.word	0x40008000
 8007c6c:	0800e3a4 	.word	0x0800e3a4

08007c70 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a31      	ldr	r2, [pc, #196]	; (8007d44 <HAL_UARTEx_SetRxFifoThreshold+0xd4>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d009      	beq.n	8007c98 <HAL_UARTEx_SetRxFifoThreshold+0x28>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a2f      	ldr	r2, [pc, #188]	; (8007d48 <HAL_UARTEx_SetRxFifoThreshold+0xd8>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d004      	beq.n	8007c98 <HAL_UARTEx_SetRxFifoThreshold+0x28>
 8007c8e:	f44f 711c 	mov.w	r1, #624	; 0x270
 8007c92:	482e      	ldr	r0, [pc, #184]	; (8007d4c <HAL_UARTEx_SetRxFifoThreshold+0xdc>)
 8007c94:	f7f9 fd12 	bl	80016bc <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d018      	beq.n	8007cd0 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ca4:	d014      	beq.n	8007cd0 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007cac:	d010      	beq.n	8007cd0 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8007cb4:	d00c      	beq.n	8007cd0 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cbc:	d008      	beq.n	8007cd0 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8007cc4:	d004      	beq.n	8007cd0 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 8007cc6:	f240 2171 	movw	r1, #625	; 0x271
 8007cca:	4820      	ldr	r0, [pc, #128]	; (8007d4c <HAL_UARTEx_SetRxFifoThreshold+0xdc>)
 8007ccc:	f7f9 fcf6 	bl	80016bc <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d101      	bne.n	8007cde <HAL_UARTEx_SetRxFifoThreshold+0x6e>
 8007cda:	2302      	movs	r3, #2
 8007cdc:	e02d      	b.n	8007d3a <HAL_UARTEx_SetRxFifoThreshold+0xca>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2224      	movs	r2, #36	; 0x24
 8007cea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f022 0201 	bic.w	r2, r2, #1
 8007d04:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	683a      	ldr	r2, [r7, #0]
 8007d16:	430a      	orrs	r2, r1
 8007d18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f818 	bl	8007d50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2220      	movs	r2, #32
 8007d2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	40013800 	.word	0x40013800
 8007d48:	40008000 	.word	0x40008000
 8007d4c:	0800e3a4 	.word	0x0800e3a4

08007d50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b089      	sub	sp, #36	; 0x24
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007d58:	4a2f      	ldr	r2, [pc, #188]	; (8007e18 <UARTEx_SetNbDataToProcess+0xc8>)
 8007d5a:	f107 0314 	add.w	r3, r7, #20
 8007d5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007d62:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8007d66:	4a2d      	ldr	r2, [pc, #180]	; (8007e1c <UARTEx_SetNbDataToProcess+0xcc>)
 8007d68:	f107 030c 	add.w	r3, r7, #12
 8007d6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007d70:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d108      	bne.n	8007d8e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007d8c:	e03d      	b.n	8007e0a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007d8e:	2308      	movs	r3, #8
 8007d90:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007d92:	2308      	movs	r3, #8
 8007d94:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	0e5b      	lsrs	r3, r3, #25
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	f003 0307 	and.w	r3, r3, #7
 8007da4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	0f5b      	lsrs	r3, r3, #29
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	f003 0307 	and.w	r3, r3, #7
 8007db4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8007db6:	7fbb      	ldrb	r3, [r7, #30]
 8007db8:	7f3a      	ldrb	r2, [r7, #28]
 8007dba:	f107 0120 	add.w	r1, r7, #32
 8007dbe:	440a      	add	r2, r1
 8007dc0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007dc4:	fb02 f303 	mul.w	r3, r2, r3
 8007dc8:	7f3a      	ldrb	r2, [r7, #28]
 8007dca:	f107 0120 	add.w	r1, r7, #32
 8007dce:	440a      	add	r2, r1
 8007dd0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007dd4:	fb93 f3f2 	sdiv	r3, r3, r2
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8007de0:	7ffb      	ldrb	r3, [r7, #31]
 8007de2:	7f7a      	ldrb	r2, [r7, #29]
 8007de4:	f107 0120 	add.w	r1, r7, #32
 8007de8:	440a      	add	r2, r1
 8007dea:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007dee:	fb02 f303 	mul.w	r3, r2, r3
 8007df2:	7f7a      	ldrb	r2, [r7, #29]
 8007df4:	f107 0120 	add.w	r1, r7, #32
 8007df8:	440a      	add	r2, r1
 8007dfa:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007dfe:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007e0a:	bf00      	nop
 8007e0c:	3724      	adds	r7, #36	; 0x24
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr
 8007e16:	bf00      	nop
 8007e18:	0800e3e0 	.word	0x0800e3e0
 8007e1c:	0800e3e8 	.word	0x0800e3e8

08007e20 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b085      	sub	sp, #20
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007e28:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007e2c:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	89fb      	ldrh	r3, [r7, #14]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	b29a      	uxth	r2, r3
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3714      	adds	r7, #20
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b085      	sub	sp, #20
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007e58:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007e5c:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	b21a      	sxth	r2, r3
 8007e68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007e6c:	43db      	mvns	r3, r3
 8007e6e:	b21b      	sxth	r3, r3
 8007e70:	4013      	ands	r3, r2
 8007e72:	b21b      	sxth	r3, r3
 8007e74:	b29a      	uxth	r2, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3714      	adds	r7, #20
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	f107 0014 	add.w	r0, r7, #20
 8007e98:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f7ff ffaf 	bl	8007e20 <USB_EnableGlobalInt>

  return HAL_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3708      	adds	r7, #8
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ece:	b004      	add	sp, #16
 8007ed0:	4770      	bx	lr
	...

08007ed4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007ed4:	b490      	push	{r4, r7}
 8007ed6:	b086      	sub	sp, #24
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	75fb      	strb	r3, [r7, #23]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	4413      	add	r3, r2
 8007eec:	881b      	ldrh	r3, [r3, #0]
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ef8:	82bb      	strh	r3, [r7, #20]

  /* initialize Endpoint */
  switch (ep->type)
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	78db      	ldrb	r3, [r3, #3]
 8007efe:	2b03      	cmp	r3, #3
 8007f00:	d819      	bhi.n	8007f36 <USB_ActivateEndpoint+0x62>
 8007f02:	a201      	add	r2, pc, #4	; (adr r2, 8007f08 <USB_ActivateEndpoint+0x34>)
 8007f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f08:	08007f19 	.word	0x08007f19
 8007f0c:	08007f2d 	.word	0x08007f2d
 8007f10:	08007f3d 	.word	0x08007f3d
 8007f14:	08007f23 	.word	0x08007f23
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007f18:	8abb      	ldrh	r3, [r7, #20]
 8007f1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007f1e:	82bb      	strh	r3, [r7, #20]
      break;
 8007f20:	e00d      	b.n	8007f3e <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007f22:	8abb      	ldrh	r3, [r7, #20]
 8007f24:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007f28:	82bb      	strh	r3, [r7, #20]
      break;
 8007f2a:	e008      	b.n	8007f3e <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007f2c:	8abb      	ldrh	r3, [r7, #20]
 8007f2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007f32:	82bb      	strh	r3, [r7, #20]
      break;
 8007f34:	e003      	b.n	8007f3e <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	75fb      	strb	r3, [r7, #23]
      break;
 8007f3a:	e000      	b.n	8007f3e <USB_ActivateEndpoint+0x6a>
      break;
 8007f3c:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	441a      	add	r2, r3
 8007f48:	8abb      	ldrh	r3, [r7, #20]
 8007f4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	4413      	add	r3, r2
 8007f68:	881b      	ldrh	r3, [r3, #0]
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	b21b      	sxth	r3, r3
 8007f6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f76:	b21a      	sxth	r2, r3
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	b21b      	sxth	r3, r3
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	b21b      	sxth	r3, r3
 8007f82:	b29c      	uxth	r4, r3
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	441a      	add	r2, r3
 8007f8e:	4b87      	ldr	r3, [pc, #540]	; (80081ac <USB_ActivateEndpoint+0x2d8>)
 8007f90:	4323      	orrs	r3, r4
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	7b1b      	ldrb	r3, [r3, #12]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f040 810c 	bne.w	80081b8 <USB_ActivateEndpoint+0x2e4>
  {
    if (ep->is_in != 0U)
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	785b      	ldrb	r3, [r3, #1]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d067      	beq.n	8008078 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007fa8:	687c      	ldr	r4, [r7, #4]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	441c      	add	r4, r3
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	00db      	lsls	r3, r3, #3
 8007fba:	4423      	add	r3, r4
 8007fbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fc0:	461c      	mov	r4, r3
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	88db      	ldrh	r3, [r3, #6]
 8007fc6:	085b      	lsrs	r3, r3, #1
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	005b      	lsls	r3, r3, #1
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	4413      	add	r3, r2
 8007fda:	881b      	ldrh	r3, [r3, #0]
 8007fdc:	b29c      	uxth	r4, r3
 8007fde:	4623      	mov	r3, r4
 8007fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d014      	beq.n	8008012 <USB_ActivateEndpoint+0x13e>
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	4413      	add	r3, r2
 8007ff2:	881b      	ldrh	r3, [r3, #0]
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ffe:	b29c      	uxth	r4, r3
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	441a      	add	r2, r3
 800800a:	4b69      	ldr	r3, [pc, #420]	; (80081b0 <USB_ActivateEndpoint+0x2dc>)
 800800c:	4323      	orrs	r3, r4
 800800e:	b29b      	uxth	r3, r3
 8008010:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	78db      	ldrb	r3, [r3, #3]
 8008016:	2b01      	cmp	r3, #1
 8008018:	d018      	beq.n	800804c <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	4413      	add	r3, r2
 8008024:	881b      	ldrh	r3, [r3, #0]
 8008026:	b29b      	uxth	r3, r3
 8008028:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800802c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008030:	b29c      	uxth	r4, r3
 8008032:	f084 0320 	eor.w	r3, r4, #32
 8008036:	b29c      	uxth	r4, r3
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	441a      	add	r2, r3
 8008042:	4b5a      	ldr	r3, [pc, #360]	; (80081ac <USB_ActivateEndpoint+0x2d8>)
 8008044:	4323      	orrs	r3, r4
 8008046:	b29b      	uxth	r3, r3
 8008048:	8013      	strh	r3, [r2, #0]
 800804a:	e225      	b.n	8008498 <USB_ActivateEndpoint+0x5c4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4413      	add	r3, r2
 8008056:	881b      	ldrh	r3, [r3, #0]
 8008058:	b29b      	uxth	r3, r3
 800805a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800805e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008062:	b29c      	uxth	r4, r3
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	441a      	add	r2, r3
 800806e:	4b4f      	ldr	r3, [pc, #316]	; (80081ac <USB_ActivateEndpoint+0x2d8>)
 8008070:	4323      	orrs	r3, r4
 8008072:	b29b      	uxth	r3, r3
 8008074:	8013      	strh	r3, [r2, #0]
 8008076:	e20f      	b.n	8008498 <USB_ActivateEndpoint+0x5c4>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008078:	687c      	ldr	r4, [r7, #4]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008080:	b29b      	uxth	r3, r3
 8008082:	441c      	add	r4, r3
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	00db      	lsls	r3, r3, #3
 800808a:	4423      	add	r3, r4
 800808c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008090:	461c      	mov	r4, r3
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	88db      	ldrh	r3, [r3, #6]
 8008096:	085b      	lsrs	r3, r3, #1
 8008098:	b29b      	uxth	r3, r3
 800809a:	005b      	lsls	r3, r3, #1
 800809c:	b29b      	uxth	r3, r3
 800809e:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80080a0:	687c      	ldr	r4, [r7, #4]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	441c      	add	r4, r3
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	00db      	lsls	r3, r3, #3
 80080b2:	4423      	add	r3, r4
 80080b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80080b8:	60fb      	str	r3, [r7, #12]
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	691b      	ldr	r3, [r3, #16]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d110      	bne.n	80080e4 <USB_ActivateEndpoint+0x210>
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	881b      	ldrh	r3, [r3, #0]
 80080c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	801a      	strh	r2, [r3, #0]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	881b      	ldrh	r3, [r3, #0]
 80080d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080dc:	b29a      	uxth	r2, r3
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	801a      	strh	r2, [r3, #0]
 80080e2:	e026      	b.n	8008132 <USB_ActivateEndpoint+0x25e>
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	691b      	ldr	r3, [r3, #16]
 80080e8:	2b3d      	cmp	r3, #61	; 0x3d
 80080ea:	d813      	bhi.n	8008114 <USB_ActivateEndpoint+0x240>
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	691b      	ldr	r3, [r3, #16]
 80080f0:	085b      	lsrs	r3, r3, #1
 80080f2:	613b      	str	r3, [r7, #16]
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	f003 0301 	and.w	r3, r3, #1
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d002      	beq.n	8008106 <USB_ActivateEndpoint+0x232>
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	3301      	adds	r3, #1
 8008104:	613b      	str	r3, [r7, #16]
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	b29b      	uxth	r3, r3
 800810a:	029b      	lsls	r3, r3, #10
 800810c:	b29a      	uxth	r2, r3
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	801a      	strh	r2, [r3, #0]
 8008112:	e00e      	b.n	8008132 <USB_ActivateEndpoint+0x25e>
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	691b      	ldr	r3, [r3, #16]
 8008118:	095b      	lsrs	r3, r3, #5
 800811a:	613b      	str	r3, [r7, #16]
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	b29b      	uxth	r3, r3
 8008120:	029b      	lsls	r3, r3, #10
 8008122:	b29b      	uxth	r3, r3
 8008124:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008128:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800812c:	b29a      	uxth	r2, r3
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	4413      	add	r3, r2
 800813c:	881b      	ldrh	r3, [r3, #0]
 800813e:	b29c      	uxth	r4, r3
 8008140:	4623      	mov	r3, r4
 8008142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008146:	2b00      	cmp	r3, #0
 8008148:	d014      	beq.n	8008174 <USB_ActivateEndpoint+0x2a0>
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	4413      	add	r3, r2
 8008154:	881b      	ldrh	r3, [r3, #0]
 8008156:	b29b      	uxth	r3, r3
 8008158:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800815c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008160:	b29c      	uxth	r4, r3
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	441a      	add	r2, r3
 800816c:	4b11      	ldr	r3, [pc, #68]	; (80081b4 <USB_ActivateEndpoint+0x2e0>)
 800816e:	4323      	orrs	r3, r4
 8008170:	b29b      	uxth	r3, r3
 8008172:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	4413      	add	r3, r2
 800817e:	881b      	ldrh	r3, [r3, #0]
 8008180:	b29b      	uxth	r3, r3
 8008182:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800818a:	b29c      	uxth	r4, r3
 800818c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008190:	b29c      	uxth	r4, r3
 8008192:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8008196:	b29c      	uxth	r4, r3
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	441a      	add	r2, r3
 80081a2:	4b02      	ldr	r3, [pc, #8]	; (80081ac <USB_ActivateEndpoint+0x2d8>)
 80081a4:	4323      	orrs	r3, r4
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	8013      	strh	r3, [r2, #0]
 80081aa:	e175      	b.n	8008498 <USB_ActivateEndpoint+0x5c4>
 80081ac:	ffff8080 	.word	0xffff8080
 80081b0:	ffff80c0 	.word	0xffff80c0
 80081b4:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	4413      	add	r3, r2
 80081c2:	881b      	ldrh	r3, [r3, #0]
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ce:	b29c      	uxth	r4, r3
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	441a      	add	r2, r3
 80081da:	4b96      	ldr	r3, [pc, #600]	; (8008434 <USB_ActivateEndpoint+0x560>)
 80081dc:	4323      	orrs	r3, r4
 80081de:	b29b      	uxth	r3, r3
 80081e0:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80081e2:	687c      	ldr	r4, [r7, #4]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	441c      	add	r4, r3
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	00db      	lsls	r3, r3, #3
 80081f4:	4423      	add	r3, r4
 80081f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081fa:	461c      	mov	r4, r3
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	891b      	ldrh	r3, [r3, #8]
 8008200:	085b      	lsrs	r3, r3, #1
 8008202:	b29b      	uxth	r3, r3
 8008204:	005b      	lsls	r3, r3, #1
 8008206:	b29b      	uxth	r3, r3
 8008208:	8023      	strh	r3, [r4, #0]
 800820a:	687c      	ldr	r4, [r7, #4]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008212:	b29b      	uxth	r3, r3
 8008214:	441c      	add	r4, r3
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	00db      	lsls	r3, r3, #3
 800821c:	4423      	add	r3, r4
 800821e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008222:	461c      	mov	r4, r3
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	895b      	ldrh	r3, [r3, #10]
 8008228:	085b      	lsrs	r3, r3, #1
 800822a:	b29b      	uxth	r3, r3
 800822c:	005b      	lsls	r3, r3, #1
 800822e:	b29b      	uxth	r3, r3
 8008230:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	785b      	ldrb	r3, [r3, #1]
 8008236:	2b00      	cmp	r3, #0
 8008238:	f040 8088 	bne.w	800834c <USB_ActivateEndpoint+0x478>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	4413      	add	r3, r2
 8008246:	881b      	ldrh	r3, [r3, #0]
 8008248:	b29c      	uxth	r4, r3
 800824a:	4623      	mov	r3, r4
 800824c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008250:	2b00      	cmp	r3, #0
 8008252:	d014      	beq.n	800827e <USB_ActivateEndpoint+0x3aa>
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	4413      	add	r3, r2
 800825e:	881b      	ldrh	r3, [r3, #0]
 8008260:	b29b      	uxth	r3, r3
 8008262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800826a:	b29c      	uxth	r4, r3
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	441a      	add	r2, r3
 8008276:	4b70      	ldr	r3, [pc, #448]	; (8008438 <USB_ActivateEndpoint+0x564>)
 8008278:	4323      	orrs	r3, r4
 800827a:	b29b      	uxth	r3, r3
 800827c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	4413      	add	r3, r2
 8008288:	881b      	ldrh	r3, [r3, #0]
 800828a:	b29c      	uxth	r4, r3
 800828c:	4623      	mov	r3, r4
 800828e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008292:	2b00      	cmp	r3, #0
 8008294:	d014      	beq.n	80082c0 <USB_ActivateEndpoint+0x3ec>
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	4413      	add	r3, r2
 80082a0:	881b      	ldrh	r3, [r3, #0]
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ac:	b29c      	uxth	r4, r3
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	441a      	add	r2, r3
 80082b8:	4b60      	ldr	r3, [pc, #384]	; (800843c <USB_ActivateEndpoint+0x568>)
 80082ba:	4323      	orrs	r3, r4
 80082bc:	b29b      	uxth	r3, r3
 80082be:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	4413      	add	r3, r2
 80082ca:	881b      	ldrh	r3, [r3, #0]
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082d6:	b29c      	uxth	r4, r3
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	441a      	add	r2, r3
 80082e2:	4b56      	ldr	r3, [pc, #344]	; (800843c <USB_ActivateEndpoint+0x568>)
 80082e4:	4323      	orrs	r3, r4
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	4413      	add	r3, r2
 80082f4:	881b      	ldrh	r3, [r3, #0]
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008300:	b29c      	uxth	r4, r3
 8008302:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008306:	b29c      	uxth	r4, r3
 8008308:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800830c:	b29c      	uxth	r4, r3
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	441a      	add	r2, r3
 8008318:	4b49      	ldr	r3, [pc, #292]	; (8008440 <USB_ActivateEndpoint+0x56c>)
 800831a:	4323      	orrs	r3, r4
 800831c:	b29b      	uxth	r3, r3
 800831e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	4413      	add	r3, r2
 800832a:	881b      	ldrh	r3, [r3, #0]
 800832c:	b29b      	uxth	r3, r3
 800832e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008332:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008336:	b29c      	uxth	r4, r3
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	441a      	add	r2, r3
 8008342:	4b3f      	ldr	r3, [pc, #252]	; (8008440 <USB_ActivateEndpoint+0x56c>)
 8008344:	4323      	orrs	r3, r4
 8008346:	b29b      	uxth	r3, r3
 8008348:	8013      	strh	r3, [r2, #0]
 800834a:	e0a5      	b.n	8008498 <USB_ActivateEndpoint+0x5c4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	4413      	add	r3, r2
 8008356:	881b      	ldrh	r3, [r3, #0]
 8008358:	b29c      	uxth	r4, r3
 800835a:	4623      	mov	r3, r4
 800835c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008360:	2b00      	cmp	r3, #0
 8008362:	d014      	beq.n	800838e <USB_ActivateEndpoint+0x4ba>
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	4413      	add	r3, r2
 800836e:	881b      	ldrh	r3, [r3, #0]
 8008370:	b29b      	uxth	r3, r3
 8008372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800837a:	b29c      	uxth	r4, r3
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	441a      	add	r2, r3
 8008386:	4b2c      	ldr	r3, [pc, #176]	; (8008438 <USB_ActivateEndpoint+0x564>)
 8008388:	4323      	orrs	r3, r4
 800838a:	b29b      	uxth	r3, r3
 800838c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	4413      	add	r3, r2
 8008398:	881b      	ldrh	r3, [r3, #0]
 800839a:	b29c      	uxth	r4, r3
 800839c:	4623      	mov	r3, r4
 800839e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d014      	beq.n	80083d0 <USB_ActivateEndpoint+0x4fc>
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	4413      	add	r3, r2
 80083b0:	881b      	ldrh	r3, [r3, #0]
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083bc:	b29c      	uxth	r4, r3
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	441a      	add	r2, r3
 80083c8:	4b1c      	ldr	r3, [pc, #112]	; (800843c <USB_ActivateEndpoint+0x568>)
 80083ca:	4323      	orrs	r3, r4
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	4413      	add	r3, r2
 80083da:	881b      	ldrh	r3, [r3, #0]
 80083dc:	b29b      	uxth	r3, r3
 80083de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083e6:	b29c      	uxth	r4, r3
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	441a      	add	r2, r3
 80083f2:	4b11      	ldr	r3, [pc, #68]	; (8008438 <USB_ActivateEndpoint+0x564>)
 80083f4:	4323      	orrs	r3, r4
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	78db      	ldrb	r3, [r3, #3]
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d020      	beq.n	8008444 <USB_ActivateEndpoint+0x570>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	4413      	add	r3, r2
 800840c:	881b      	ldrh	r3, [r3, #0]
 800840e:	b29b      	uxth	r3, r3
 8008410:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008414:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008418:	b29c      	uxth	r4, r3
 800841a:	f084 0320 	eor.w	r3, r4, #32
 800841e:	b29c      	uxth	r4, r3
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	441a      	add	r2, r3
 800842a:	4b05      	ldr	r3, [pc, #20]	; (8008440 <USB_ActivateEndpoint+0x56c>)
 800842c:	4323      	orrs	r3, r4
 800842e:	b29b      	uxth	r3, r3
 8008430:	8013      	strh	r3, [r2, #0]
 8008432:	e01c      	b.n	800846e <USB_ActivateEndpoint+0x59a>
 8008434:	ffff8180 	.word	0xffff8180
 8008438:	ffffc080 	.word	0xffffc080
 800843c:	ffff80c0 	.word	0xffff80c0
 8008440:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	4413      	add	r3, r2
 800844e:	881b      	ldrh	r3, [r3, #0]
 8008450:	b29b      	uxth	r3, r3
 8008452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008456:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800845a:	b29c      	uxth	r4, r3
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	441a      	add	r2, r3
 8008466:	4b0f      	ldr	r3, [pc, #60]	; (80084a4 <USB_ActivateEndpoint+0x5d0>)
 8008468:	4323      	orrs	r3, r4
 800846a:	b29b      	uxth	r3, r3
 800846c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	4413      	add	r3, r2
 8008478:	881b      	ldrh	r3, [r3, #0]
 800847a:	b29b      	uxth	r3, r3
 800847c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008484:	b29c      	uxth	r4, r3
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	441a      	add	r2, r3
 8008490:	4b04      	ldr	r3, [pc, #16]	; (80084a4 <USB_ActivateEndpoint+0x5d0>)
 8008492:	4323      	orrs	r3, r4
 8008494:	b29b      	uxth	r3, r3
 8008496:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8008498:	7dfb      	ldrb	r3, [r7, #23]
}
 800849a:	4618      	mov	r0, r3
 800849c:	3718      	adds	r7, #24
 800849e:	46bd      	mov	sp, r7
 80084a0:	bc90      	pop	{r4, r7}
 80084a2:	4770      	bx	lr
 80084a4:	ffff8080 	.word	0xffff8080

080084a8 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80084a8:	b490      	push	{r4, r7}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	7b1b      	ldrb	r3, [r3, #12]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d171      	bne.n	800859e <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	785b      	ldrb	r3, [r3, #1]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d036      	beq.n	8008530 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	4413      	add	r3, r2
 80084cc:	881b      	ldrh	r3, [r3, #0]
 80084ce:	b29c      	uxth	r4, r3
 80084d0:	4623      	mov	r3, r4
 80084d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d014      	beq.n	8008504 <USB_DeactivateEndpoint+0x5c>
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	4413      	add	r3, r2
 80084e4:	881b      	ldrh	r3, [r3, #0]
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084f0:	b29c      	uxth	r4, r3
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	441a      	add	r2, r3
 80084fc:	4b6b      	ldr	r3, [pc, #428]	; (80086ac <USB_DeactivateEndpoint+0x204>)
 80084fe:	4323      	orrs	r3, r4
 8008500:	b29b      	uxth	r3, r3
 8008502:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	4413      	add	r3, r2
 800850e:	881b      	ldrh	r3, [r3, #0]
 8008510:	b29b      	uxth	r3, r3
 8008512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800851a:	b29c      	uxth	r4, r3
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	441a      	add	r2, r3
 8008526:	4b62      	ldr	r3, [pc, #392]	; (80086b0 <USB_DeactivateEndpoint+0x208>)
 8008528:	4323      	orrs	r3, r4
 800852a:	b29b      	uxth	r3, r3
 800852c:	8013      	strh	r3, [r2, #0]
 800852e:	e144      	b.n	80087ba <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	4413      	add	r3, r2
 800853a:	881b      	ldrh	r3, [r3, #0]
 800853c:	b29c      	uxth	r4, r3
 800853e:	4623      	mov	r3, r4
 8008540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008544:	2b00      	cmp	r3, #0
 8008546:	d014      	beq.n	8008572 <USB_DeactivateEndpoint+0xca>
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	4413      	add	r3, r2
 8008552:	881b      	ldrh	r3, [r3, #0]
 8008554:	b29b      	uxth	r3, r3
 8008556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800855a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800855e:	b29c      	uxth	r4, r3
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	441a      	add	r2, r3
 800856a:	4b52      	ldr	r3, [pc, #328]	; (80086b4 <USB_DeactivateEndpoint+0x20c>)
 800856c:	4323      	orrs	r3, r4
 800856e:	b29b      	uxth	r3, r3
 8008570:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	4413      	add	r3, r2
 800857c:	881b      	ldrh	r3, [r3, #0]
 800857e:	b29b      	uxth	r3, r3
 8008580:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008588:	b29c      	uxth	r4, r3
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	441a      	add	r2, r3
 8008594:	4b46      	ldr	r3, [pc, #280]	; (80086b0 <USB_DeactivateEndpoint+0x208>)
 8008596:	4323      	orrs	r3, r4
 8008598:	b29b      	uxth	r3, r3
 800859a:	8013      	strh	r3, [r2, #0]
 800859c:	e10d      	b.n	80087ba <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	785b      	ldrb	r3, [r3, #1]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f040 8088 	bne.w	80086b8 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	4413      	add	r3, r2
 80085b2:	881b      	ldrh	r3, [r3, #0]
 80085b4:	b29c      	uxth	r4, r3
 80085b6:	4623      	mov	r3, r4
 80085b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d014      	beq.n	80085ea <USB_DeactivateEndpoint+0x142>
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	4413      	add	r3, r2
 80085ca:	881b      	ldrh	r3, [r3, #0]
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085d6:	b29c      	uxth	r4, r3
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	441a      	add	r2, r3
 80085e2:	4b34      	ldr	r3, [pc, #208]	; (80086b4 <USB_DeactivateEndpoint+0x20c>)
 80085e4:	4323      	orrs	r3, r4
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	4413      	add	r3, r2
 80085f4:	881b      	ldrh	r3, [r3, #0]
 80085f6:	b29c      	uxth	r4, r3
 80085f8:	4623      	mov	r3, r4
 80085fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d014      	beq.n	800862c <USB_DeactivateEndpoint+0x184>
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	4413      	add	r3, r2
 800860c:	881b      	ldrh	r3, [r3, #0]
 800860e:	b29b      	uxth	r3, r3
 8008610:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008618:	b29c      	uxth	r4, r3
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	441a      	add	r2, r3
 8008624:	4b21      	ldr	r3, [pc, #132]	; (80086ac <USB_DeactivateEndpoint+0x204>)
 8008626:	4323      	orrs	r3, r4
 8008628:	b29b      	uxth	r3, r3
 800862a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	4413      	add	r3, r2
 8008636:	881b      	ldrh	r3, [r3, #0]
 8008638:	b29b      	uxth	r3, r3
 800863a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800863e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008642:	b29c      	uxth	r4, r3
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	441a      	add	r2, r3
 800864e:	4b17      	ldr	r3, [pc, #92]	; (80086ac <USB_DeactivateEndpoint+0x204>)
 8008650:	4323      	orrs	r3, r4
 8008652:	b29b      	uxth	r3, r3
 8008654:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	4413      	add	r3, r2
 8008660:	881b      	ldrh	r3, [r3, #0]
 8008662:	b29b      	uxth	r3, r3
 8008664:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800866c:	b29c      	uxth	r4, r3
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	441a      	add	r2, r3
 8008678:	4b0d      	ldr	r3, [pc, #52]	; (80086b0 <USB_DeactivateEndpoint+0x208>)
 800867a:	4323      	orrs	r3, r4
 800867c:	b29b      	uxth	r3, r3
 800867e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	4413      	add	r3, r2
 800868a:	881b      	ldrh	r3, [r3, #0]
 800868c:	b29b      	uxth	r3, r3
 800868e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008692:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008696:	b29c      	uxth	r4, r3
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	441a      	add	r2, r3
 80086a2:	4b03      	ldr	r3, [pc, #12]	; (80086b0 <USB_DeactivateEndpoint+0x208>)
 80086a4:	4323      	orrs	r3, r4
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	8013      	strh	r3, [r2, #0]
 80086aa:	e086      	b.n	80087ba <USB_DeactivateEndpoint+0x312>
 80086ac:	ffff80c0 	.word	0xffff80c0
 80086b0:	ffff8080 	.word	0xffff8080
 80086b4:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	009b      	lsls	r3, r3, #2
 80086c0:	4413      	add	r3, r2
 80086c2:	881b      	ldrh	r3, [r3, #0]
 80086c4:	b29c      	uxth	r4, r3
 80086c6:	4623      	mov	r3, r4
 80086c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d014      	beq.n	80086fa <USB_DeactivateEndpoint+0x252>
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	4413      	add	r3, r2
 80086da:	881b      	ldrh	r3, [r3, #0]
 80086dc:	b29b      	uxth	r3, r3
 80086de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086e6:	b29c      	uxth	r4, r3
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	441a      	add	r2, r3
 80086f2:	4b35      	ldr	r3, [pc, #212]	; (80087c8 <USB_DeactivateEndpoint+0x320>)
 80086f4:	4323      	orrs	r3, r4
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	4413      	add	r3, r2
 8008704:	881b      	ldrh	r3, [r3, #0]
 8008706:	b29c      	uxth	r4, r3
 8008708:	4623      	mov	r3, r4
 800870a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800870e:	2b00      	cmp	r3, #0
 8008710:	d014      	beq.n	800873c <USB_DeactivateEndpoint+0x294>
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	4413      	add	r3, r2
 800871c:	881b      	ldrh	r3, [r3, #0]
 800871e:	b29b      	uxth	r3, r3
 8008720:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008728:	b29c      	uxth	r4, r3
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	441a      	add	r2, r3
 8008734:	4b25      	ldr	r3, [pc, #148]	; (80087cc <USB_DeactivateEndpoint+0x324>)
 8008736:	4323      	orrs	r3, r4
 8008738:	b29b      	uxth	r3, r3
 800873a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	4413      	add	r3, r2
 8008746:	881b      	ldrh	r3, [r3, #0]
 8008748:	b29b      	uxth	r3, r3
 800874a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800874e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008752:	b29c      	uxth	r4, r3
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	441a      	add	r2, r3
 800875e:	4b1a      	ldr	r3, [pc, #104]	; (80087c8 <USB_DeactivateEndpoint+0x320>)
 8008760:	4323      	orrs	r3, r4
 8008762:	b29b      	uxth	r3, r3
 8008764:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	4413      	add	r3, r2
 8008770:	881b      	ldrh	r3, [r3, #0]
 8008772:	b29b      	uxth	r3, r3
 8008774:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800877c:	b29c      	uxth	r4, r3
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	441a      	add	r2, r3
 8008788:	4b11      	ldr	r3, [pc, #68]	; (80087d0 <USB_DeactivateEndpoint+0x328>)
 800878a:	4323      	orrs	r3, r4
 800878c:	b29b      	uxth	r3, r3
 800878e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	4413      	add	r3, r2
 800879a:	881b      	ldrh	r3, [r3, #0]
 800879c:	b29b      	uxth	r3, r3
 800879e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087a6:	b29c      	uxth	r4, r3
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	441a      	add	r2, r3
 80087b2:	4b07      	ldr	r3, [pc, #28]	; (80087d0 <USB_DeactivateEndpoint+0x328>)
 80087b4:	4323      	orrs	r3, r4
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80087ba:	2300      	movs	r3, #0
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3708      	adds	r7, #8
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bc90      	pop	{r4, r7}
 80087c4:	4770      	bx	lr
 80087c6:	bf00      	nop
 80087c8:	ffffc080 	.word	0xffffc080
 80087cc:	ffff80c0 	.word	0xffff80c0
 80087d0:	ffff8080 	.word	0xffff8080

080087d4 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80087d4:	b590      	push	{r4, r7, lr}
 80087d6:	b095      	sub	sp, #84	; 0x54
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	785b      	ldrb	r3, [r3, #1]
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	f040 815d 	bne.w	8008aa2 <USB_EPStartXfer+0x2ce>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	699a      	ldr	r2, [r3, #24]
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	691b      	ldr	r3, [r3, #16]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d909      	bls.n	8008808 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	691b      	ldr	r3, [r3, #16]
 80087f8:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	699a      	ldr	r2, [r3, #24]
 80087fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008800:	1ad2      	subs	r2, r2, r3
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	619a      	str	r2, [r3, #24]
 8008806:	e005      	b.n	8008814 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	699b      	ldr	r3, [r3, #24]
 800880c:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	2200      	movs	r2, #0
 8008812:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	7b1b      	ldrb	r3, [r3, #12]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d11a      	bne.n	8008852 <USB_EPStartXfer+0x7e>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	6959      	ldr	r1, [r3, #20]
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	88da      	ldrh	r2, [r3, #6]
 8008824:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008826:	b29b      	uxth	r3, r3
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 fb9c 	bl	8008f66 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800882e:	687c      	ldr	r4, [r7, #4]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008836:	b29b      	uxth	r3, r3
 8008838:	441c      	add	r4, r3
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	00db      	lsls	r3, r3, #3
 8008840:	4423      	add	r3, r4
 8008842:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008846:	60fb      	str	r3, [r7, #12]
 8008848:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800884a:	b29a      	uxth	r2, r3
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	801a      	strh	r2, [r3, #0]
 8008850:	e10b      	b.n	8008a6a <USB_EPStartXfer+0x296>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	4413      	add	r3, r2
 800885c:	881b      	ldrh	r3, [r3, #0]
 800885e:	b29b      	uxth	r3, r3
 8008860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008864:	2b00      	cmp	r3, #0
 8008866:	d062      	beq.n	800892e <USB_EPStartXfer+0x15a>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008868:	687c      	ldr	r4, [r7, #4]
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	785b      	ldrb	r3, [r3, #1]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d144      	bne.n	80088fc <USB_EPStartXfer+0x128>
 8008872:	687c      	ldr	r4, [r7, #4]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800887a:	b29b      	uxth	r3, r3
 800887c:	441c      	add	r4, r3
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	00db      	lsls	r3, r3, #3
 8008884:	4423      	add	r3, r4
 8008886:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800888a:	613b      	str	r3, [r7, #16]
 800888c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800888e:	2b00      	cmp	r3, #0
 8008890:	d110      	bne.n	80088b4 <USB_EPStartXfer+0xe0>
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	881b      	ldrh	r3, [r3, #0]
 8008896:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800889a:	b29a      	uxth	r2, r3
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	801a      	strh	r2, [r3, #0]
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	881b      	ldrh	r3, [r3, #0]
 80088a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088ac:	b29a      	uxth	r2, r3
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	801a      	strh	r2, [r3, #0]
 80088b2:	e037      	b.n	8008924 <USB_EPStartXfer+0x150>
 80088b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088b6:	2b3d      	cmp	r3, #61	; 0x3d
 80088b8:	d811      	bhi.n	80088de <USB_EPStartXfer+0x10a>
 80088ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088bc:	085b      	lsrs	r3, r3, #1
 80088be:	647b      	str	r3, [r7, #68]	; 0x44
 80088c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088c2:	f003 0301 	and.w	r3, r3, #1
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d002      	beq.n	80088d0 <USB_EPStartXfer+0xfc>
 80088ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088cc:	3301      	adds	r3, #1
 80088ce:	647b      	str	r3, [r7, #68]	; 0x44
 80088d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	029b      	lsls	r3, r3, #10
 80088d6:	b29a      	uxth	r2, r3
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	801a      	strh	r2, [r3, #0]
 80088dc:	e022      	b.n	8008924 <USB_EPStartXfer+0x150>
 80088de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088e0:	095b      	lsrs	r3, r3, #5
 80088e2:	647b      	str	r3, [r7, #68]	; 0x44
 80088e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	029b      	lsls	r3, r3, #10
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088f4:	b29a      	uxth	r2, r3
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	801a      	strh	r2, [r3, #0]
 80088fa:	e013      	b.n	8008924 <USB_EPStartXfer+0x150>
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	785b      	ldrb	r3, [r3, #1]
 8008900:	2b01      	cmp	r3, #1
 8008902:	d10f      	bne.n	8008924 <USB_EPStartXfer+0x150>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800890a:	b29b      	uxth	r3, r3
 800890c:	441c      	add	r4, r3
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	00db      	lsls	r3, r3, #3
 8008914:	4423      	add	r3, r4
 8008916:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800891a:	617b      	str	r3, [r7, #20]
 800891c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800891e:	b29a      	uxth	r2, r3
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	895b      	ldrh	r3, [r3, #10]
 8008928:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800892c:	e061      	b.n	80089f2 <USB_EPStartXfer+0x21e>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	785b      	ldrb	r3, [r3, #1]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d144      	bne.n	80089c0 <USB_EPStartXfer+0x1ec>
 8008936:	687c      	ldr	r4, [r7, #4]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800893e:	b29b      	uxth	r3, r3
 8008940:	441c      	add	r4, r3
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	00db      	lsls	r3, r3, #3
 8008948:	4423      	add	r3, r4
 800894a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800894e:	61bb      	str	r3, [r7, #24]
 8008950:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008952:	2b00      	cmp	r3, #0
 8008954:	d110      	bne.n	8008978 <USB_EPStartXfer+0x1a4>
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	881b      	ldrh	r3, [r3, #0]
 800895a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800895e:	b29a      	uxth	r2, r3
 8008960:	69bb      	ldr	r3, [r7, #24]
 8008962:	801a      	strh	r2, [r3, #0]
 8008964:	69bb      	ldr	r3, [r7, #24]
 8008966:	881b      	ldrh	r3, [r3, #0]
 8008968:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800896c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008970:	b29a      	uxth	r2, r3
 8008972:	69bb      	ldr	r3, [r7, #24]
 8008974:	801a      	strh	r2, [r3, #0]
 8008976:	e038      	b.n	80089ea <USB_EPStartXfer+0x216>
 8008978:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800897a:	2b3d      	cmp	r3, #61	; 0x3d
 800897c:	d811      	bhi.n	80089a2 <USB_EPStartXfer+0x1ce>
 800897e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008980:	085b      	lsrs	r3, r3, #1
 8008982:	643b      	str	r3, [r7, #64]	; 0x40
 8008984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008986:	f003 0301 	and.w	r3, r3, #1
 800898a:	2b00      	cmp	r3, #0
 800898c:	d002      	beq.n	8008994 <USB_EPStartXfer+0x1c0>
 800898e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008990:	3301      	adds	r3, #1
 8008992:	643b      	str	r3, [r7, #64]	; 0x40
 8008994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008996:	b29b      	uxth	r3, r3
 8008998:	029b      	lsls	r3, r3, #10
 800899a:	b29a      	uxth	r2, r3
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	801a      	strh	r2, [r3, #0]
 80089a0:	e023      	b.n	80089ea <USB_EPStartXfer+0x216>
 80089a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089a4:	095b      	lsrs	r3, r3, #5
 80089a6:	643b      	str	r3, [r7, #64]	; 0x40
 80089a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	029b      	lsls	r3, r3, #10
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089b8:	b29a      	uxth	r2, r3
 80089ba:	69bb      	ldr	r3, [r7, #24]
 80089bc:	801a      	strh	r2, [r3, #0]
 80089be:	e014      	b.n	80089ea <USB_EPStartXfer+0x216>
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	785b      	ldrb	r3, [r3, #1]
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d110      	bne.n	80089ea <USB_EPStartXfer+0x216>
 80089c8:	687c      	ldr	r4, [r7, #4]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	441c      	add	r4, r3
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	00db      	lsls	r3, r3, #3
 80089da:	4423      	add	r3, r4
 80089dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80089e0:	61fb      	str	r3, [r7, #28]
 80089e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089e4:	b29a      	uxth	r2, r3
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	891b      	ldrh	r3, [r3, #8]
 80089ee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	6959      	ldr	r1, [r3, #20]
 80089f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 fab1 	bl	8008f66 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	785b      	ldrb	r3, [r3, #1]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d115      	bne.n	8008a38 <USB_EPStartXfer+0x264>
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	4413      	add	r3, r2
 8008a16:	881b      	ldrh	r3, [r3, #0]
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a22:	b29c      	uxth	r4, r3
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	441a      	add	r2, r3
 8008a2e:	4b99      	ldr	r3, [pc, #612]	; (8008c94 <USB_EPStartXfer+0x4c0>)
 8008a30:	4323      	orrs	r3, r4
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	8013      	strh	r3, [r2, #0]
 8008a36:	e018      	b.n	8008a6a <USB_EPStartXfer+0x296>
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	785b      	ldrb	r3, [r3, #1]
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d114      	bne.n	8008a6a <USB_EPStartXfer+0x296>
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	4413      	add	r3, r2
 8008a4a:	881b      	ldrh	r3, [r3, #0]
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a56:	b29c      	uxth	r4, r3
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	441a      	add	r2, r3
 8008a62:	4b8d      	ldr	r3, [pc, #564]	; (8008c98 <USB_EPStartXfer+0x4c4>)
 8008a64:	4323      	orrs	r3, r4
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	4413      	add	r3, r2
 8008a74:	881b      	ldrh	r3, [r3, #0]
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a80:	b29c      	uxth	r4, r3
 8008a82:	f084 0310 	eor.w	r3, r4, #16
 8008a86:	b29c      	uxth	r4, r3
 8008a88:	f084 0320 	eor.w	r3, r4, #32
 8008a8c:	b29c      	uxth	r4, r3
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	009b      	lsls	r3, r3, #2
 8008a96:	441a      	add	r2, r3
 8008a98:	4b80      	ldr	r3, [pc, #512]	; (8008c9c <USB_EPStartXfer+0x4c8>)
 8008a9a:	4323      	orrs	r3, r4
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	8013      	strh	r3, [r2, #0]
 8008aa0:	e13c      	b.n	8008d1c <USB_EPStartXfer+0x548>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	699a      	ldr	r2, [r3, #24]
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	691b      	ldr	r3, [r3, #16]
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d909      	bls.n	8008ac2 <USB_EPStartXfer+0x2ee>
    {
      len = ep->maxpacket;
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	691b      	ldr	r3, [r3, #16]
 8008ab2:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	699a      	ldr	r2, [r3, #24]
 8008ab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008aba:	1ad2      	subs	r2, r2, r3
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	619a      	str	r2, [r3, #24]
 8008ac0:	e005      	b.n	8008ace <USB_EPStartXfer+0x2fa>
    }
    else
    {
      len = ep->xfer_len;
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	699b      	ldr	r3, [r3, #24]
 8008ac6:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	2200      	movs	r2, #0
 8008acc:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	7b1b      	ldrb	r3, [r3, #12]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d144      	bne.n	8008b60 <USB_EPStartXfer+0x38c>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008ad6:	687c      	ldr	r4, [r7, #4]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	441c      	add	r4, r3
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	00db      	lsls	r3, r3, #3
 8008ae8:	4423      	add	r3, r4
 8008aea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008aee:	623b      	str	r3, [r7, #32]
 8008af0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d110      	bne.n	8008b18 <USB_EPStartXfer+0x344>
 8008af6:	6a3b      	ldr	r3, [r7, #32]
 8008af8:	881b      	ldrh	r3, [r3, #0]
 8008afa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008afe:	b29a      	uxth	r2, r3
 8008b00:	6a3b      	ldr	r3, [r7, #32]
 8008b02:	801a      	strh	r2, [r3, #0]
 8008b04:	6a3b      	ldr	r3, [r7, #32]
 8008b06:	881b      	ldrh	r3, [r3, #0]
 8008b08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b10:	b29a      	uxth	r2, r3
 8008b12:	6a3b      	ldr	r3, [r7, #32]
 8008b14:	801a      	strh	r2, [r3, #0]
 8008b16:	e0e6      	b.n	8008ce6 <USB_EPStartXfer+0x512>
 8008b18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b1a:	2b3d      	cmp	r3, #61	; 0x3d
 8008b1c:	d811      	bhi.n	8008b42 <USB_EPStartXfer+0x36e>
 8008b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b20:	085b      	lsrs	r3, r3, #1
 8008b22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b26:	f003 0301 	and.w	r3, r3, #1
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d002      	beq.n	8008b34 <USB_EPStartXfer+0x360>
 8008b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b30:	3301      	adds	r3, #1
 8008b32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	029b      	lsls	r3, r3, #10
 8008b3a:	b29a      	uxth	r2, r3
 8008b3c:	6a3b      	ldr	r3, [r7, #32]
 8008b3e:	801a      	strh	r2, [r3, #0]
 8008b40:	e0d1      	b.n	8008ce6 <USB_EPStartXfer+0x512>
 8008b42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b44:	095b      	lsrs	r3, r3, #5
 8008b46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	029b      	lsls	r3, r3, #10
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b58:	b29a      	uxth	r2, r3
 8008b5a:	6a3b      	ldr	r3, [r7, #32]
 8008b5c:	801a      	strh	r2, [r3, #0]
 8008b5e:	e0c2      	b.n	8008ce6 <USB_EPStartXfer+0x512>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	785b      	ldrb	r3, [r3, #1]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d144      	bne.n	8008bf2 <USB_EPStartXfer+0x41e>
 8008b68:	687c      	ldr	r4, [r7, #4]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	441c      	add	r4, r3
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	00db      	lsls	r3, r3, #3
 8008b7a:	4423      	add	r3, r4
 8008b7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008b80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d110      	bne.n	8008baa <USB_EPStartXfer+0x3d6>
 8008b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b8a:	881b      	ldrh	r3, [r3, #0]
 8008b8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b90:	b29a      	uxth	r2, r3
 8008b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b94:	801a      	strh	r2, [r3, #0]
 8008b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b98:	881b      	ldrh	r3, [r3, #0]
 8008b9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ba2:	b29a      	uxth	r2, r3
 8008ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba6:	801a      	strh	r2, [r3, #0]
 8008ba8:	e038      	b.n	8008c1c <USB_EPStartXfer+0x448>
 8008baa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bac:	2b3d      	cmp	r3, #61	; 0x3d
 8008bae:	d811      	bhi.n	8008bd4 <USB_EPStartXfer+0x400>
 8008bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bb2:	085b      	lsrs	r3, r3, #1
 8008bb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8008bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bb8:	f003 0301 	and.w	r3, r3, #1
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d002      	beq.n	8008bc6 <USB_EPStartXfer+0x3f2>
 8008bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8008bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	029b      	lsls	r3, r3, #10
 8008bcc:	b29a      	uxth	r2, r3
 8008bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd0:	801a      	strh	r2, [r3, #0]
 8008bd2:	e023      	b.n	8008c1c <USB_EPStartXfer+0x448>
 8008bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bd6:	095b      	lsrs	r3, r3, #5
 8008bd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8008bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	029b      	lsls	r3, r3, #10
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bea:	b29a      	uxth	r2, r3
 8008bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bee:	801a      	strh	r2, [r3, #0]
 8008bf0:	e014      	b.n	8008c1c <USB_EPStartXfer+0x448>
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	785b      	ldrb	r3, [r3, #1]
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d110      	bne.n	8008c1c <USB_EPStartXfer+0x448>
 8008bfa:	687c      	ldr	r4, [r7, #4]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	441c      	add	r4, r3
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	00db      	lsls	r3, r3, #3
 8008c0c:	4423      	add	r3, r4
 8008c0e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008c12:	633b      	str	r3, [r7, #48]	; 0x30
 8008c14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c16:	b29a      	uxth	r2, r3
 8008c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c1a:	801a      	strh	r2, [r3, #0]
 8008c1c:	687c      	ldr	r4, [r7, #4]
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	785b      	ldrb	r3, [r3, #1]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d14b      	bne.n	8008cbe <USB_EPStartXfer+0x4ea>
 8008c26:	687c      	ldr	r4, [r7, #4]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	441c      	add	r4, r3
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	00db      	lsls	r3, r3, #3
 8008c38:	4423      	add	r3, r4
 8008c3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8008c40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d110      	bne.n	8008c68 <USB_EPStartXfer+0x494>
 8008c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c48:	881b      	ldrh	r3, [r3, #0]
 8008c4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c4e:	b29a      	uxth	r2, r3
 8008c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c52:	801a      	strh	r2, [r3, #0]
 8008c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c56:	881b      	ldrh	r3, [r3, #0]
 8008c58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c60:	b29a      	uxth	r2, r3
 8008c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c64:	801a      	strh	r2, [r3, #0]
 8008c66:	e03e      	b.n	8008ce6 <USB_EPStartXfer+0x512>
 8008c68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c6a:	2b3d      	cmp	r3, #61	; 0x3d
 8008c6c:	d818      	bhi.n	8008ca0 <USB_EPStartXfer+0x4cc>
 8008c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c70:	085b      	lsrs	r3, r3, #1
 8008c72:	637b      	str	r3, [r7, #52]	; 0x34
 8008c74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c76:	f003 0301 	and.w	r3, r3, #1
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d002      	beq.n	8008c84 <USB_EPStartXfer+0x4b0>
 8008c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c80:	3301      	adds	r3, #1
 8008c82:	637b      	str	r3, [r7, #52]	; 0x34
 8008c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	029b      	lsls	r3, r3, #10
 8008c8a:	b29a      	uxth	r2, r3
 8008c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8e:	801a      	strh	r2, [r3, #0]
 8008c90:	e029      	b.n	8008ce6 <USB_EPStartXfer+0x512>
 8008c92:	bf00      	nop
 8008c94:	ffff80c0 	.word	0xffff80c0
 8008c98:	ffffc080 	.word	0xffffc080
 8008c9c:	ffff8080 	.word	0xffff8080
 8008ca0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ca2:	095b      	lsrs	r3, r3, #5
 8008ca4:	637b      	str	r3, [r7, #52]	; 0x34
 8008ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	029b      	lsls	r3, r3, #10
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cb6:	b29a      	uxth	r2, r3
 8008cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cba:	801a      	strh	r2, [r3, #0]
 8008cbc:	e013      	b.n	8008ce6 <USB_EPStartXfer+0x512>
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	785b      	ldrb	r3, [r3, #1]
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d10f      	bne.n	8008ce6 <USB_EPStartXfer+0x512>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	441c      	add	r4, r3
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	00db      	lsls	r3, r3, #3
 8008cd6:	4423      	add	r3, r4
 8008cd8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008cdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ce0:	b29a      	uxth	r2, r3
 8008ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce4:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	4413      	add	r3, r2
 8008cf0:	881b      	ldrh	r3, [r3, #0]
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cfc:	b29c      	uxth	r4, r3
 8008cfe:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008d02:	b29c      	uxth	r4, r3
 8008d04:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8008d08:	b29c      	uxth	r4, r3
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	441a      	add	r2, r3
 8008d14:	4b04      	ldr	r3, [pc, #16]	; (8008d28 <USB_EPStartXfer+0x554>)
 8008d16:	4323      	orrs	r3, r4
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008d1c:	2300      	movs	r3, #0
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3754      	adds	r7, #84	; 0x54
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd90      	pop	{r4, r7, pc}
 8008d26:	bf00      	nop
 8008d28:	ffff8080 	.word	0xffff8080

08008d2c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d2c:	b490      	push	{r4, r7}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	785b      	ldrb	r3, [r3, #1]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d018      	beq.n	8008d70 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	4413      	add	r3, r2
 8008d48:	881b      	ldrh	r3, [r3, #0]
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d54:	b29c      	uxth	r4, r3
 8008d56:	f084 0310 	eor.w	r3, r4, #16
 8008d5a:	b29c      	uxth	r4, r3
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	441a      	add	r2, r3
 8008d66:	4b11      	ldr	r3, [pc, #68]	; (8008dac <USB_EPSetStall+0x80>)
 8008d68:	4323      	orrs	r3, r4
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	8013      	strh	r3, [r2, #0]
 8008d6e:	e017      	b.n	8008da0 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	4413      	add	r3, r2
 8008d7a:	881b      	ldrh	r3, [r3, #0]
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d86:	b29c      	uxth	r4, r3
 8008d88:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008d8c:	b29c      	uxth	r4, r3
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	441a      	add	r2, r3
 8008d98:	4b04      	ldr	r3, [pc, #16]	; (8008dac <USB_EPSetStall+0x80>)
 8008d9a:	4323      	orrs	r3, r4
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3708      	adds	r7, #8
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bc90      	pop	{r4, r7}
 8008daa:	4770      	bx	lr
 8008dac:	ffff8080 	.word	0xffff8080

08008db0 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008db0:	b490      	push	{r4, r7}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	7b1b      	ldrb	r3, [r3, #12]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d17d      	bne.n	8008ebe <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	785b      	ldrb	r3, [r3, #1]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d03d      	beq.n	8008e46 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	4413      	add	r3, r2
 8008dd4:	881b      	ldrh	r3, [r3, #0]
 8008dd6:	b29c      	uxth	r4, r3
 8008dd8:	4623      	mov	r3, r4
 8008dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d014      	beq.n	8008e0c <USB_EPClearStall+0x5c>
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	781b      	ldrb	r3, [r3, #0]
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	4413      	add	r3, r2
 8008dec:	881b      	ldrh	r3, [r3, #0]
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008df8:	b29c      	uxth	r4, r3
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	441a      	add	r2, r3
 8008e04:	4b31      	ldr	r3, [pc, #196]	; (8008ecc <USB_EPClearStall+0x11c>)
 8008e06:	4323      	orrs	r3, r4
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	78db      	ldrb	r3, [r3, #3]
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d054      	beq.n	8008ebe <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	4413      	add	r3, r2
 8008e1e:	881b      	ldrh	r3, [r3, #0]
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e2a:	b29c      	uxth	r4, r3
 8008e2c:	f084 0320 	eor.w	r3, r4, #32
 8008e30:	b29c      	uxth	r4, r3
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	441a      	add	r2, r3
 8008e3c:	4b24      	ldr	r3, [pc, #144]	; (8008ed0 <USB_EPClearStall+0x120>)
 8008e3e:	4323      	orrs	r3, r4
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	8013      	strh	r3, [r2, #0]
 8008e44:	e03b      	b.n	8008ebe <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	4413      	add	r3, r2
 8008e50:	881b      	ldrh	r3, [r3, #0]
 8008e52:	b29c      	uxth	r4, r3
 8008e54:	4623      	mov	r3, r4
 8008e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d014      	beq.n	8008e88 <USB_EPClearStall+0xd8>
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	4413      	add	r3, r2
 8008e68:	881b      	ldrh	r3, [r3, #0]
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e74:	b29c      	uxth	r4, r3
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	441a      	add	r2, r3
 8008e80:	4b14      	ldr	r3, [pc, #80]	; (8008ed4 <USB_EPClearStall+0x124>)
 8008e82:	4323      	orrs	r3, r4
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	4413      	add	r3, r2
 8008e92:	881b      	ldrh	r3, [r3, #0]
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e9e:	b29c      	uxth	r4, r3
 8008ea0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008ea4:	b29c      	uxth	r4, r3
 8008ea6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8008eaa:	b29c      	uxth	r4, r3
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	441a      	add	r2, r3
 8008eb6:	4b06      	ldr	r3, [pc, #24]	; (8008ed0 <USB_EPClearStall+0x120>)
 8008eb8:	4323      	orrs	r3, r4
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3708      	adds	r7, #8
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bc90      	pop	{r4, r7}
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop
 8008ecc:	ffff80c0 	.word	0xffff80c0
 8008ed0:	ffff8080 	.word	0xffff8080
 8008ed4:	ffffc080 	.word	0xffffc080

08008ed8 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008ee4:	78fb      	ldrb	r3, [r7, #3]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d103      	bne.n	8008ef2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2280      	movs	r2, #128	; 0x80
 8008eee:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f18:	b29a      	uxth	r2, r3
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008f20:	2300      	movs	r3, #0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	370c      	adds	r7, #12
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr

08008f2e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008f2e:	b480      	push	{r7}
 8008f30:	b085      	sub	sp, #20
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008f40:	68fb      	ldr	r3, [r7, #12]
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3714      	adds	r7, #20
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr

08008f4e <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008f4e:	b480      	push	{r7}
 8008f50:	b083      	sub	sp, #12
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
 8008f56:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	370c      	adds	r7, #12
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr

08008f66 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008f66:	b480      	push	{r7}
 8008f68:	b08d      	sub	sp, #52	; 0x34
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	60f8      	str	r0, [r7, #12]
 8008f6e:	60b9      	str	r1, [r7, #8]
 8008f70:	4611      	mov	r1, r2
 8008f72:	461a      	mov	r2, r3
 8008f74:	460b      	mov	r3, r1
 8008f76:	80fb      	strh	r3, [r7, #6]
 8008f78:	4613      	mov	r3, r2
 8008f7a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008f7c:	88bb      	ldrh	r3, [r7, #4]
 8008f7e:	3301      	adds	r3, #1
 8008f80:	085b      	lsrs	r3, r3, #1
 8008f82:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008f8c:	88fa      	ldrh	r2, [r7, #6]
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	4413      	add	r3, r2
 8008f92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f96:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008f98:	6a3b      	ldr	r3, [r7, #32]
 8008f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f9c:	e01b      	b.n	8008fd6 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8008f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	021b      	lsls	r3, r3, #8
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	69bb      	ldr	r3, [r7, #24]
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	b29a      	uxth	r2, r3
 8008fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc6:	3302      	adds	r3, #2
 8008fc8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8008fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fcc:	3301      	adds	r3, #1
 8008fce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd2:	3b01      	subs	r3, #1
 8008fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d1e0      	bne.n	8008f9e <USB_WritePMA+0x38>
  }
}
 8008fdc:	bf00      	nop
 8008fde:	3734      	adds	r7, #52	; 0x34
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr

08008fe8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b08b      	sub	sp, #44	; 0x2c
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	4611      	mov	r1, r2
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	80fb      	strh	r3, [r7, #6]
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008ffe:	88bb      	ldrh	r3, [r7, #4]
 8009000:	085b      	lsrs	r3, r3, #1
 8009002:	b29b      	uxth	r3, r3
 8009004:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800900e:	88fa      	ldrh	r2, [r7, #6]
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	4413      	add	r3, r2
 8009014:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009018:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	627b      	str	r3, [r7, #36]	; 0x24
 800901e:	e018      	b.n	8009052 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009020:	6a3b      	ldr	r3, [r7, #32]
 8009022:	881b      	ldrh	r3, [r3, #0]
 8009024:	b29b      	uxth	r3, r3
 8009026:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009028:	6a3b      	ldr	r3, [r7, #32]
 800902a:	3302      	adds	r3, #2
 800902c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	b2da      	uxtb	r2, r3
 8009032:	69fb      	ldr	r3, [r7, #28]
 8009034:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009036:	69fb      	ldr	r3, [r7, #28]
 8009038:	3301      	adds	r3, #1
 800903a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	0a1b      	lsrs	r3, r3, #8
 8009040:	b2da      	uxtb	r2, r3
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009046:	69fb      	ldr	r3, [r7, #28]
 8009048:	3301      	adds	r3, #1
 800904a:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800904c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904e:	3b01      	subs	r3, #1
 8009050:	627b      	str	r3, [r7, #36]	; 0x24
 8009052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009054:	2b00      	cmp	r3, #0
 8009056:	d1e3      	bne.n	8009020 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009058:	88bb      	ldrh	r3, [r7, #4]
 800905a:	f003 0301 	and.w	r3, r3, #1
 800905e:	b29b      	uxth	r3, r3
 8009060:	2b00      	cmp	r3, #0
 8009062:	d007      	beq.n	8009074 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8009064:	6a3b      	ldr	r3, [r7, #32]
 8009066:	881b      	ldrh	r3, [r3, #0]
 8009068:	b29b      	uxth	r3, r3
 800906a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	b2da      	uxtb	r2, r3
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	701a      	strb	r2, [r3, #0]
  }
}
 8009074:	bf00      	nop
 8009076:	372c      	adds	r7, #44	; 0x2c
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	460b      	mov	r3, r1
 800908a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800908c:	2300      	movs	r3, #0
 800908e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	7c1b      	ldrb	r3, [r3, #16]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d115      	bne.n	80090c4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009098:	f44f 7300 	mov.w	r3, #512	; 0x200
 800909c:	2202      	movs	r2, #2
 800909e:	2181      	movs	r1, #129	; 0x81
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f004 feb8 	bl	800de16 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2201      	movs	r2, #1
 80090aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80090ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090b0:	2202      	movs	r2, #2
 80090b2:	2101      	movs	r1, #1
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f004 feae 	bl	800de16 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2201      	movs	r2, #1
 80090be:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80090c2:	e012      	b.n	80090ea <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80090c4:	2340      	movs	r3, #64	; 0x40
 80090c6:	2202      	movs	r2, #2
 80090c8:	2181      	movs	r1, #129	; 0x81
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f004 fea3 	bl	800de16 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2201      	movs	r2, #1
 80090d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80090d6:	2340      	movs	r3, #64	; 0x40
 80090d8:	2202      	movs	r2, #2
 80090da:	2101      	movs	r1, #1
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f004 fe9a 	bl	800de16 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2201      	movs	r2, #1
 80090e6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80090ea:	2308      	movs	r3, #8
 80090ec:	2203      	movs	r2, #3
 80090ee:	2182      	movs	r1, #130	; 0x82
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f004 fe90 	bl	800de16 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2201      	movs	r2, #1
 80090fa:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80090fc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009100:	f004 ffe0 	bl	800e0c4 <USBD_static_malloc>
 8009104:	4602      	mov	r2, r0
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009112:	2b00      	cmp	r3, #0
 8009114:	d102      	bne.n	800911c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009116:	2301      	movs	r3, #1
 8009118:	73fb      	strb	r3, [r7, #15]
 800911a:	e026      	b.n	800916a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009122:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	2200      	movs	r2, #0
 8009132:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	2200      	movs	r2, #0
 800913a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	7c1b      	ldrb	r3, [r3, #16]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d109      	bne.n	800915a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800914c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009150:	2101      	movs	r1, #1
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f004 ff4a 	bl	800dfec <USBD_LL_PrepareReceive>
 8009158:	e007      	b.n	800916a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009160:	2340      	movs	r3, #64	; 0x40
 8009162:	2101      	movs	r1, #1
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f004 ff41 	bl	800dfec <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800916a:	7bfb      	ldrb	r3, [r7, #15]
}
 800916c:	4618      	mov	r0, r3
 800916e:	3710      	adds	r7, #16
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	460b      	mov	r3, r1
 800917e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009180:	2300      	movs	r3, #0
 8009182:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009184:	2181      	movs	r1, #129	; 0x81
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f004 fe6b 	bl	800de62 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2200      	movs	r2, #0
 8009190:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009192:	2101      	movs	r1, #1
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f004 fe64 	bl	800de62 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2200      	movs	r2, #0
 800919e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80091a2:	2182      	movs	r1, #130	; 0x82
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f004 fe5c 	bl	800de62 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d00e      	beq.n	80091d8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091ca:	4618      	mov	r0, r3
 80091cc:	f004 ff88 	bl	800e0e0 <USBD_static_free>
    pdev->pClassData = NULL;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80091d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b086      	sub	sp, #24
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
 80091ea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091f2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80091f4:	2300      	movs	r3, #0
 80091f6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80091f8:	2300      	movs	r3, #0
 80091fa:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80091fc:	2300      	movs	r3, #0
 80091fe:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009208:	2b00      	cmp	r3, #0
 800920a:	d039      	beq.n	8009280 <USBD_CDC_Setup+0x9e>
 800920c:	2b20      	cmp	r3, #32
 800920e:	d17c      	bne.n	800930a <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	88db      	ldrh	r3, [r3, #6]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d029      	beq.n	800926c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	b25b      	sxtb	r3, r3
 800921e:	2b00      	cmp	r3, #0
 8009220:	da11      	bge.n	8009246 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	683a      	ldr	r2, [r7, #0]
 800922c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800922e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009230:	683a      	ldr	r2, [r7, #0]
 8009232:	88d2      	ldrh	r2, [r2, #6]
 8009234:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009236:	6939      	ldr	r1, [r7, #16]
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	88db      	ldrh	r3, [r3, #6]
 800923c:	461a      	mov	r2, r3
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f001 fa2a 	bl	800a698 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009244:	e068      	b.n	8009318 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	785a      	ldrb	r2, [r3, #1]
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	88db      	ldrh	r3, [r3, #6]
 8009254:	b2da      	uxtb	r2, r3
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800925c:	6939      	ldr	r1, [r7, #16]
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	88db      	ldrh	r3, [r3, #6]
 8009262:	461a      	mov	r2, r3
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f001 fa45 	bl	800a6f4 <USBD_CtlPrepareRx>
      break;
 800926a:	e055      	b.n	8009318 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	683a      	ldr	r2, [r7, #0]
 8009276:	7850      	ldrb	r0, [r2, #1]
 8009278:	2200      	movs	r2, #0
 800927a:	6839      	ldr	r1, [r7, #0]
 800927c:	4798      	blx	r3
      break;
 800927e:	e04b      	b.n	8009318 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	785b      	ldrb	r3, [r3, #1]
 8009284:	2b0a      	cmp	r3, #10
 8009286:	d017      	beq.n	80092b8 <USBD_CDC_Setup+0xd6>
 8009288:	2b0b      	cmp	r3, #11
 800928a:	d029      	beq.n	80092e0 <USBD_CDC_Setup+0xfe>
 800928c:	2b00      	cmp	r3, #0
 800928e:	d133      	bne.n	80092f8 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009296:	2b03      	cmp	r3, #3
 8009298:	d107      	bne.n	80092aa <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800929a:	f107 030c 	add.w	r3, r7, #12
 800929e:	2202      	movs	r2, #2
 80092a0:	4619      	mov	r1, r3
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f001 f9f8 	bl	800a698 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80092a8:	e02e      	b.n	8009308 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80092aa:	6839      	ldr	r1, [r7, #0]
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f001 f988 	bl	800a5c2 <USBD_CtlError>
            ret = USBD_FAIL;
 80092b2:	2302      	movs	r3, #2
 80092b4:	75fb      	strb	r3, [r7, #23]
          break;
 80092b6:	e027      	b.n	8009308 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092be:	2b03      	cmp	r3, #3
 80092c0:	d107      	bne.n	80092d2 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80092c2:	f107 030f 	add.w	r3, r7, #15
 80092c6:	2201      	movs	r2, #1
 80092c8:	4619      	mov	r1, r3
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f001 f9e4 	bl	800a698 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80092d0:	e01a      	b.n	8009308 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80092d2:	6839      	ldr	r1, [r7, #0]
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f001 f974 	bl	800a5c2 <USBD_CtlError>
            ret = USBD_FAIL;
 80092da:	2302      	movs	r3, #2
 80092dc:	75fb      	strb	r3, [r7, #23]
          break;
 80092de:	e013      	b.n	8009308 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092e6:	2b03      	cmp	r3, #3
 80092e8:	d00d      	beq.n	8009306 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80092ea:	6839      	ldr	r1, [r7, #0]
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f001 f968 	bl	800a5c2 <USBD_CtlError>
            ret = USBD_FAIL;
 80092f2:	2302      	movs	r3, #2
 80092f4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80092f6:	e006      	b.n	8009306 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80092f8:	6839      	ldr	r1, [r7, #0]
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f001 f961 	bl	800a5c2 <USBD_CtlError>
          ret = USBD_FAIL;
 8009300:	2302      	movs	r3, #2
 8009302:	75fb      	strb	r3, [r7, #23]
          break;
 8009304:	e000      	b.n	8009308 <USBD_CDC_Setup+0x126>
          break;
 8009306:	bf00      	nop
      }
      break;
 8009308:	e006      	b.n	8009318 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800930a:	6839      	ldr	r1, [r7, #0]
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f001 f958 	bl	800a5c2 <USBD_CtlError>
      ret = USBD_FAIL;
 8009312:	2302      	movs	r3, #2
 8009314:	75fb      	strb	r3, [r7, #23]
      break;
 8009316:	bf00      	nop
  }

  return ret;
 8009318:	7dfb      	ldrb	r3, [r7, #23]
}
 800931a:	4618      	mov	r0, r3
 800931c:	3718      	adds	r7, #24
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}

08009322 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009322:	b580      	push	{r7, lr}
 8009324:	b084      	sub	sp, #16
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
 800932a:	460b      	mov	r3, r1
 800932c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009334:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800933c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009344:	2b00      	cmp	r3, #0
 8009346:	d037      	beq.n	80093b8 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009348:	78fa      	ldrb	r2, [r7, #3]
 800934a:	6879      	ldr	r1, [r7, #4]
 800934c:	4613      	mov	r3, r2
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	4413      	add	r3, r2
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	440b      	add	r3, r1
 8009356:	331c      	adds	r3, #28
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d026      	beq.n	80093ac <USBD_CDC_DataIn+0x8a>
 800935e:	78fa      	ldrb	r2, [r7, #3]
 8009360:	6879      	ldr	r1, [r7, #4]
 8009362:	4613      	mov	r3, r2
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	4413      	add	r3, r2
 8009368:	009b      	lsls	r3, r3, #2
 800936a:	440b      	add	r3, r1
 800936c:	331c      	adds	r3, #28
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	78fa      	ldrb	r2, [r7, #3]
 8009372:	68b9      	ldr	r1, [r7, #8]
 8009374:	0152      	lsls	r2, r2, #5
 8009376:	440a      	add	r2, r1
 8009378:	3238      	adds	r2, #56	; 0x38
 800937a:	6812      	ldr	r2, [r2, #0]
 800937c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009380:	fb02 f201 	mul.w	r2, r2, r1
 8009384:	1a9b      	subs	r3, r3, r2
 8009386:	2b00      	cmp	r3, #0
 8009388:	d110      	bne.n	80093ac <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800938a:	78fa      	ldrb	r2, [r7, #3]
 800938c:	6879      	ldr	r1, [r7, #4]
 800938e:	4613      	mov	r3, r2
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	4413      	add	r3, r2
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	440b      	add	r3, r1
 8009398:	331c      	adds	r3, #28
 800939a:	2200      	movs	r2, #0
 800939c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800939e:	78f9      	ldrb	r1, [r7, #3]
 80093a0:	2300      	movs	r3, #0
 80093a2:	2200      	movs	r2, #0
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f004 fdfe 	bl	800dfa6 <USBD_LL_Transmit>
 80093aa:	e003      	b.n	80093b4 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2200      	movs	r2, #0
 80093b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80093b4:	2300      	movs	r3, #0
 80093b6:	e000      	b.n	80093ba <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 80093b8:	2302      	movs	r3, #2
  }
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3710      	adds	r7, #16
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}

080093c2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80093c2:	b580      	push	{r7, lr}
 80093c4:	b084      	sub	sp, #16
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
 80093ca:	460b      	mov	r3, r1
 80093cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093d4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80093d6:	78fb      	ldrb	r3, [r7, #3]
 80093d8:	4619      	mov	r1, r3
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f004 fe29 	bl	800e032 <USBD_LL_GetRxDataSize>
 80093e0:	4602      	mov	r2, r0
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d00d      	beq.n	800940e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093f8:	68db      	ldr	r3, [r3, #12]
 80093fa:	68fa      	ldr	r2, [r7, #12]
 80093fc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009400:	68fa      	ldr	r2, [r7, #12]
 8009402:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009406:	4611      	mov	r1, r2
 8009408:	4798      	blx	r3

    return USBD_OK;
 800940a:	2300      	movs	r3, #0
 800940c:	e000      	b.n	8009410 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800940e:	2302      	movs	r3, #2
  }
}
 8009410:	4618      	mov	r0, r3
 8009412:	3710      	adds	r7, #16
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009426:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800942e:	2b00      	cmp	r3, #0
 8009430:	d015      	beq.n	800945e <USBD_CDC_EP0_RxReady+0x46>
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009438:	2bff      	cmp	r3, #255	; 0xff
 800943a:	d010      	beq.n	800945e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	68fa      	ldr	r2, [r7, #12]
 8009446:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800944a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800944c:	68fa      	ldr	r2, [r7, #12]
 800944e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009452:	b292      	uxth	r2, r2
 8009454:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	22ff      	movs	r2, #255	; 0xff
 800945a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800945e:	2300      	movs	r3, #0
}
 8009460:	4618      	mov	r0, r3
 8009462:	3710      	adds	r7, #16
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2243      	movs	r2, #67	; 0x43
 8009474:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009476:	4b03      	ldr	r3, [pc, #12]	; (8009484 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009478:	4618      	mov	r0, r3
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr
 8009484:	200000a0 	.word	0x200000a0

08009488 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2243      	movs	r2, #67	; 0x43
 8009494:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009496:	4b03      	ldr	r3, [pc, #12]	; (80094a4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009498:	4618      	mov	r0, r3
 800949a:	370c      	adds	r7, #12
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr
 80094a4:	2000005c 	.word	0x2000005c

080094a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b083      	sub	sp, #12
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2243      	movs	r2, #67	; 0x43
 80094b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80094b6:	4b03      	ldr	r3, [pc, #12]	; (80094c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	370c      	adds	r7, #12
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr
 80094c4:	200000e4 	.word	0x200000e4

080094c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b083      	sub	sp, #12
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	220a      	movs	r2, #10
 80094d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80094d6:	4b03      	ldr	r3, [pc, #12]	; (80094e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80094d8:	4618      	mov	r0, r3
 80094da:	370c      	adds	r7, #12
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr
 80094e4:	20000018 	.word	0x20000018

080094e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b085      	sub	sp, #20
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80094f2:	2302      	movs	r3, #2
 80094f4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d005      	beq.n	8009508 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	683a      	ldr	r2, [r7, #0]
 8009500:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009504:	2300      	movs	r3, #0
 8009506:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009508:	7bfb      	ldrb	r3, [r7, #15]
}
 800950a:	4618      	mov	r0, r3
 800950c:	3714      	adds	r7, #20
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr

08009516 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009516:	b480      	push	{r7}
 8009518:	b087      	sub	sp, #28
 800951a:	af00      	add	r7, sp, #0
 800951c:	60f8      	str	r0, [r7, #12]
 800951e:	60b9      	str	r1, [r7, #8]
 8009520:	4613      	mov	r3, r2
 8009522:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800952a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	68ba      	ldr	r2, [r7, #8]
 8009530:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009534:	88fa      	ldrh	r2, [r7, #6]
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	371c      	adds	r7, #28
 8009542:	46bd      	mov	sp, r7
 8009544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009548:	4770      	bx	lr

0800954a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800954a:	b480      	push	{r7}
 800954c:	b085      	sub	sp, #20
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
 8009552:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800955a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	683a      	ldr	r2, [r7, #0]
 8009560:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009564:	2300      	movs	r3, #0
}
 8009566:	4618      	mov	r0, r3
 8009568:	3714      	adds	r7, #20
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr

08009572 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b084      	sub	sp, #16
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009580:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009588:	2b00      	cmp	r3, #0
 800958a:	d01c      	beq.n	80095c6 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009592:	2b00      	cmp	r3, #0
 8009594:	d115      	bne.n	80095c2 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2201      	movs	r2, #1
 800959a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	2181      	movs	r1, #129	; 0x81
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f004 fcf4 	bl	800dfa6 <USBD_LL_Transmit>

      return USBD_OK;
 80095be:	2300      	movs	r3, #0
 80095c0:	e002      	b.n	80095c8 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80095c2:	2301      	movs	r3, #1
 80095c4:	e000      	b.n	80095c8 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80095c6:	2302      	movs	r3, #2
  }
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3710      	adds	r7, #16
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095de:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d017      	beq.n	800961a <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	7c1b      	ldrb	r3, [r3, #16]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d109      	bne.n	8009606 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80095f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80095fc:	2101      	movs	r1, #1
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f004 fcf4 	bl	800dfec <USBD_LL_PrepareReceive>
 8009604:	e007      	b.n	8009616 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800960c:	2340      	movs	r3, #64	; 0x40
 800960e:	2101      	movs	r1, #1
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f004 fceb 	bl	800dfec <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009616:	2300      	movs	r3, #0
 8009618:	e000      	b.n	800961c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800961a:	2302      	movs	r3, #2
  }
}
 800961c:	4618      	mov	r0, r3
 800961e:	3710      	adds	r7, #16
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	4613      	mov	r3, r2
 8009630:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d101      	bne.n	800963c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009638:	2302      	movs	r3, #2
 800963a:	e01a      	b.n	8009672 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009642:	2b00      	cmp	r3, #0
 8009644:	d003      	beq.n	800964e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2200      	movs	r2, #0
 800964a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d003      	beq.n	800965c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	68ba      	ldr	r2, [r7, #8]
 8009658:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2201      	movs	r2, #1
 8009660:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	79fa      	ldrb	r2, [r7, #7]
 8009668:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800966a:	68f8      	ldr	r0, [r7, #12]
 800966c:	f004 fb56 	bl	800dd1c <USBD_LL_Init>

  return USBD_OK;
 8009670:	2300      	movs	r3, #0
}
 8009672:	4618      	mov	r0, r3
 8009674:	3710      	adds	r7, #16
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800967a:	b480      	push	{r7}
 800967c:	b085      	sub	sp, #20
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
 8009682:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009684:	2300      	movs	r3, #0
 8009686:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d006      	beq.n	800969c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	683a      	ldr	r2, [r7, #0]
 8009692:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009696:	2300      	movs	r3, #0
 8009698:	73fb      	strb	r3, [r7, #15]
 800969a:	e001      	b.n	80096a0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800969c:	2302      	movs	r3, #2
 800969e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80096a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3714      	adds	r7, #20
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr

080096ae <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80096ae:	b580      	push	{r7, lr}
 80096b0:	b082      	sub	sp, #8
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f004 fb92 	bl	800dde0 <USBD_LL_Start>

  return USBD_OK;
 80096bc:	2300      	movs	r3, #0
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3708      	adds	r7, #8
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}

080096c6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80096c6:	b480      	push	{r7}
 80096c8:	b083      	sub	sp, #12
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80096ce:	2300      	movs	r3, #0
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	370c      	adds	r7, #12
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr

080096dc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	460b      	mov	r3, r1
 80096e6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80096e8:	2302      	movs	r3, #2
 80096ea:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d00c      	beq.n	8009710 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	78fa      	ldrb	r2, [r7, #3]
 8009700:	4611      	mov	r1, r2
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	4798      	blx	r3
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d101      	bne.n	8009710 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800970c:	2300      	movs	r3, #0
 800970e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009710:	7bfb      	ldrb	r3, [r7, #15]
}
 8009712:	4618      	mov	r0, r3
 8009714:	3710      	adds	r7, #16
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}

0800971a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800971a:	b580      	push	{r7, lr}
 800971c:	b082      	sub	sp, #8
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
 8009722:	460b      	mov	r3, r1
 8009724:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	78fa      	ldrb	r2, [r7, #3]
 8009730:	4611      	mov	r1, r2
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	4798      	blx	r3

  return USBD_OK;
 8009736:	2300      	movs	r3, #0
}
 8009738:	4618      	mov	r0, r3
 800973a:	3708      	adds	r7, #8
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009750:	6839      	ldr	r1, [r7, #0]
 8009752:	4618      	mov	r0, r3
 8009754:	f000 fef8 	bl	800a548 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009766:	461a      	mov	r2, r3
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009774:	f003 031f 	and.w	r3, r3, #31
 8009778:	2b01      	cmp	r3, #1
 800977a:	d00c      	beq.n	8009796 <USBD_LL_SetupStage+0x56>
 800977c:	2b01      	cmp	r3, #1
 800977e:	d302      	bcc.n	8009786 <USBD_LL_SetupStage+0x46>
 8009780:	2b02      	cmp	r3, #2
 8009782:	d010      	beq.n	80097a6 <USBD_LL_SetupStage+0x66>
 8009784:	e017      	b.n	80097b6 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800978c:	4619      	mov	r1, r3
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 f9ce 	bl	8009b30 <USBD_StdDevReq>
      break;
 8009794:	e01a      	b.n	80097cc <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800979c:	4619      	mov	r1, r3
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 fa30 	bl	8009c04 <USBD_StdItfReq>
      break;
 80097a4:	e012      	b.n	80097cc <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80097ac:	4619      	mov	r1, r3
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 fa6e 	bl	8009c90 <USBD_StdEPReq>
      break;
 80097b4:	e00a      	b.n	80097cc <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80097bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	4619      	mov	r1, r3
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f004 fb6b 	bl	800dea0 <USBD_LL_StallEP>
      break;
 80097ca:	bf00      	nop
  }

  return USBD_OK;
 80097cc:	2300      	movs	r3, #0
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3708      	adds	r7, #8
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}

080097d6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b086      	sub	sp, #24
 80097da:	af00      	add	r7, sp, #0
 80097dc:	60f8      	str	r0, [r7, #12]
 80097de:	460b      	mov	r3, r1
 80097e0:	607a      	str	r2, [r7, #4]
 80097e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80097e4:	7afb      	ldrb	r3, [r7, #11]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d14b      	bne.n	8009882 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80097f0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80097f8:	2b03      	cmp	r3, #3
 80097fa:	d134      	bne.n	8009866 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	68da      	ldr	r2, [r3, #12]
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	691b      	ldr	r3, [r3, #16]
 8009804:	429a      	cmp	r2, r3
 8009806:	d919      	bls.n	800983c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	68da      	ldr	r2, [r3, #12]
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	691b      	ldr	r3, [r3, #16]
 8009810:	1ad2      	subs	r2, r2, r3
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	68da      	ldr	r2, [r3, #12]
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800981e:	429a      	cmp	r2, r3
 8009820:	d203      	bcs.n	800982a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009826:	b29b      	uxth	r3, r3
 8009828:	e002      	b.n	8009830 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800982e:	b29b      	uxth	r3, r3
 8009830:	461a      	mov	r2, r3
 8009832:	6879      	ldr	r1, [r7, #4]
 8009834:	68f8      	ldr	r0, [r7, #12]
 8009836:	f000 ff7b 	bl	800a730 <USBD_CtlContinueRx>
 800983a:	e038      	b.n	80098ae <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009842:	691b      	ldr	r3, [r3, #16]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d00a      	beq.n	800985e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800984e:	2b03      	cmp	r3, #3
 8009850:	d105      	bne.n	800985e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009858:	691b      	ldr	r3, [r3, #16]
 800985a:	68f8      	ldr	r0, [r7, #12]
 800985c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800985e:	68f8      	ldr	r0, [r7, #12]
 8009860:	f000 ff78 	bl	800a754 <USBD_CtlSendStatus>
 8009864:	e023      	b.n	80098ae <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800986c:	2b05      	cmp	r3, #5
 800986e:	d11e      	bne.n	80098ae <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2200      	movs	r2, #0
 8009874:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009878:	2100      	movs	r1, #0
 800987a:	68f8      	ldr	r0, [r7, #12]
 800987c:	f004 fb10 	bl	800dea0 <USBD_LL_StallEP>
 8009880:	e015      	b.n	80098ae <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009888:	699b      	ldr	r3, [r3, #24]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d00d      	beq.n	80098aa <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009894:	2b03      	cmp	r3, #3
 8009896:	d108      	bne.n	80098aa <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800989e:	699b      	ldr	r3, [r3, #24]
 80098a0:	7afa      	ldrb	r2, [r7, #11]
 80098a2:	4611      	mov	r1, r2
 80098a4:	68f8      	ldr	r0, [r7, #12]
 80098a6:	4798      	blx	r3
 80098a8:	e001      	b.n	80098ae <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80098aa:	2302      	movs	r3, #2
 80098ac:	e000      	b.n	80098b0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80098ae:	2300      	movs	r3, #0
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3718      	adds	r7, #24
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b086      	sub	sp, #24
 80098bc:	af00      	add	r7, sp, #0
 80098be:	60f8      	str	r0, [r7, #12]
 80098c0:	460b      	mov	r3, r1
 80098c2:	607a      	str	r2, [r7, #4]
 80098c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80098c6:	7afb      	ldrb	r3, [r7, #11]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d17f      	bne.n	80099cc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	3314      	adds	r3, #20
 80098d0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80098d8:	2b02      	cmp	r3, #2
 80098da:	d15c      	bne.n	8009996 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	68da      	ldr	r2, [r3, #12]
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	691b      	ldr	r3, [r3, #16]
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d915      	bls.n	8009914 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	68da      	ldr	r2, [r3, #12]
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	691b      	ldr	r3, [r3, #16]
 80098f0:	1ad2      	subs	r2, r2, r3
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	68db      	ldr	r3, [r3, #12]
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	461a      	mov	r2, r3
 80098fe:	6879      	ldr	r1, [r7, #4]
 8009900:	68f8      	ldr	r0, [r7, #12]
 8009902:	f000 fee5 	bl	800a6d0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009906:	2300      	movs	r3, #0
 8009908:	2200      	movs	r2, #0
 800990a:	2100      	movs	r1, #0
 800990c:	68f8      	ldr	r0, [r7, #12]
 800990e:	f004 fb6d 	bl	800dfec <USBD_LL_PrepareReceive>
 8009912:	e04e      	b.n	80099b2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	697a      	ldr	r2, [r7, #20]
 800991a:	6912      	ldr	r2, [r2, #16]
 800991c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009920:	fb02 f201 	mul.w	r2, r2, r1
 8009924:	1a9b      	subs	r3, r3, r2
 8009926:	2b00      	cmp	r3, #0
 8009928:	d11c      	bne.n	8009964 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	689a      	ldr	r2, [r3, #8]
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009932:	429a      	cmp	r2, r3
 8009934:	d316      	bcc.n	8009964 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	689a      	ldr	r2, [r3, #8]
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009940:	429a      	cmp	r2, r3
 8009942:	d20f      	bcs.n	8009964 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009944:	2200      	movs	r2, #0
 8009946:	2100      	movs	r1, #0
 8009948:	68f8      	ldr	r0, [r7, #12]
 800994a:	f000 fec1 	bl	800a6d0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2200      	movs	r2, #0
 8009952:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009956:	2300      	movs	r3, #0
 8009958:	2200      	movs	r2, #0
 800995a:	2100      	movs	r1, #0
 800995c:	68f8      	ldr	r0, [r7, #12]
 800995e:	f004 fb45 	bl	800dfec <USBD_LL_PrepareReceive>
 8009962:	e026      	b.n	80099b2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800996a:	68db      	ldr	r3, [r3, #12]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d00a      	beq.n	8009986 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009976:	2b03      	cmp	r3, #3
 8009978:	d105      	bne.n	8009986 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009980:	68db      	ldr	r3, [r3, #12]
 8009982:	68f8      	ldr	r0, [r7, #12]
 8009984:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009986:	2180      	movs	r1, #128	; 0x80
 8009988:	68f8      	ldr	r0, [r7, #12]
 800998a:	f004 fa89 	bl	800dea0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800998e:	68f8      	ldr	r0, [r7, #12]
 8009990:	f000 fef3 	bl	800a77a <USBD_CtlReceiveStatus>
 8009994:	e00d      	b.n	80099b2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800999c:	2b04      	cmp	r3, #4
 800999e:	d004      	beq.n	80099aa <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d103      	bne.n	80099b2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80099aa:	2180      	movs	r1, #128	; 0x80
 80099ac:	68f8      	ldr	r0, [r7, #12]
 80099ae:	f004 fa77 	bl	800dea0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d11d      	bne.n	80099f8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80099bc:	68f8      	ldr	r0, [r7, #12]
 80099be:	f7ff fe82 	bl	80096c6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2200      	movs	r2, #0
 80099c6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80099ca:	e015      	b.n	80099f8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099d2:	695b      	ldr	r3, [r3, #20]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d00d      	beq.n	80099f4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80099de:	2b03      	cmp	r3, #3
 80099e0:	d108      	bne.n	80099f4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099e8:	695b      	ldr	r3, [r3, #20]
 80099ea:	7afa      	ldrb	r2, [r7, #11]
 80099ec:	4611      	mov	r1, r2
 80099ee:	68f8      	ldr	r0, [r7, #12]
 80099f0:	4798      	blx	r3
 80099f2:	e001      	b.n	80099f8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80099f4:	2302      	movs	r3, #2
 80099f6:	e000      	b.n	80099fa <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80099f8:	2300      	movs	r3, #0
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3718      	adds	r7, #24
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b082      	sub	sp, #8
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a0a:	2340      	movs	r3, #64	; 0x40
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	2100      	movs	r1, #0
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f004 fa00 	bl	800de16 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2201      	movs	r2, #1
 8009a1a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2240      	movs	r2, #64	; 0x40
 8009a22:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a26:	2340      	movs	r3, #64	; 0x40
 8009a28:	2200      	movs	r2, #0
 8009a2a:	2180      	movs	r1, #128	; 0x80
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f004 f9f2 	bl	800de16 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2201      	movs	r2, #1
 8009a36:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2240      	movs	r2, #64	; 0x40
 8009a3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2201      	movs	r2, #1
 8009a42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2200      	movs	r2, #0
 8009a52:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2200      	movs	r2, #0
 8009a58:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d009      	beq.n	8009a7a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	687a      	ldr	r2, [r7, #4]
 8009a70:	6852      	ldr	r2, [r2, #4]
 8009a72:	b2d2      	uxtb	r2, r2
 8009a74:	4611      	mov	r1, r2
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	4798      	blx	r3
  }

  return USBD_OK;
 8009a7a:	2300      	movs	r3, #0
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3708      	adds	r7, #8
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b083      	sub	sp, #12
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	78fa      	ldrb	r2, [r7, #3]
 8009a94:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009a96:	2300      	movs	r3, #0
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	370c      	adds	r7, #12
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b083      	sub	sp, #12
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2204      	movs	r2, #4
 8009abc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009ac0:	2300      	movs	r3, #0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	370c      	adds	r7, #12
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr

08009ace <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009ace:	b480      	push	{r7}
 8009ad0:	b083      	sub	sp, #12
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009adc:	2b04      	cmp	r3, #4
 8009ade:	d105      	bne.n	8009aec <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009aec:	2300      	movs	r3, #0
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	370c      	adds	r7, #12
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr

08009afa <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009afa:	b580      	push	{r7, lr}
 8009afc:	b082      	sub	sp, #8
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b08:	2b03      	cmp	r3, #3
 8009b0a:	d10b      	bne.n	8009b24 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b12:	69db      	ldr	r3, [r3, #28]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d005      	beq.n	8009b24 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b1e:	69db      	ldr	r3, [r3, #28]
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009b24:	2300      	movs	r3, #0
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3708      	adds	r7, #8
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
	...

08009b30 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b46:	2b20      	cmp	r3, #32
 8009b48:	d004      	beq.n	8009b54 <USBD_StdDevReq+0x24>
 8009b4a:	2b40      	cmp	r3, #64	; 0x40
 8009b4c:	d002      	beq.n	8009b54 <USBD_StdDevReq+0x24>
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d008      	beq.n	8009b64 <USBD_StdDevReq+0x34>
 8009b52:	e04c      	b.n	8009bee <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	6839      	ldr	r1, [r7, #0]
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	4798      	blx	r3
      break;
 8009b62:	e049      	b.n	8009bf8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	785b      	ldrb	r3, [r3, #1]
 8009b68:	2b09      	cmp	r3, #9
 8009b6a:	d83a      	bhi.n	8009be2 <USBD_StdDevReq+0xb2>
 8009b6c:	a201      	add	r2, pc, #4	; (adr r2, 8009b74 <USBD_StdDevReq+0x44>)
 8009b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b72:	bf00      	nop
 8009b74:	08009bc5 	.word	0x08009bc5
 8009b78:	08009bd9 	.word	0x08009bd9
 8009b7c:	08009be3 	.word	0x08009be3
 8009b80:	08009bcf 	.word	0x08009bcf
 8009b84:	08009be3 	.word	0x08009be3
 8009b88:	08009ba7 	.word	0x08009ba7
 8009b8c:	08009b9d 	.word	0x08009b9d
 8009b90:	08009be3 	.word	0x08009be3
 8009b94:	08009bbb 	.word	0x08009bbb
 8009b98:	08009bb1 	.word	0x08009bb1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009b9c:	6839      	ldr	r1, [r7, #0]
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 f9d4 	bl	8009f4c <USBD_GetDescriptor>
          break;
 8009ba4:	e022      	b.n	8009bec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009ba6:	6839      	ldr	r1, [r7, #0]
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 fb61 	bl	800a270 <USBD_SetAddress>
          break;
 8009bae:	e01d      	b.n	8009bec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009bb0:	6839      	ldr	r1, [r7, #0]
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 fb9e 	bl	800a2f4 <USBD_SetConfig>
          break;
 8009bb8:	e018      	b.n	8009bec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009bba:	6839      	ldr	r1, [r7, #0]
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 fc27 	bl	800a410 <USBD_GetConfig>
          break;
 8009bc2:	e013      	b.n	8009bec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009bc4:	6839      	ldr	r1, [r7, #0]
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 fc56 	bl	800a478 <USBD_GetStatus>
          break;
 8009bcc:	e00e      	b.n	8009bec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009bce:	6839      	ldr	r1, [r7, #0]
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 fc84 	bl	800a4de <USBD_SetFeature>
          break;
 8009bd6:	e009      	b.n	8009bec <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009bd8:	6839      	ldr	r1, [r7, #0]
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 fc93 	bl	800a506 <USBD_ClrFeature>
          break;
 8009be0:	e004      	b.n	8009bec <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009be2:	6839      	ldr	r1, [r7, #0]
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 fcec 	bl	800a5c2 <USBD_CtlError>
          break;
 8009bea:	bf00      	nop
      }
      break;
 8009bec:	e004      	b.n	8009bf8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009bee:	6839      	ldr	r1, [r7, #0]
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f000 fce6 	bl	800a5c2 <USBD_CtlError>
      break;
 8009bf6:	bf00      	nop
  }

  return ret;
 8009bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3710      	adds	r7, #16
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
 8009c02:	bf00      	nop

08009c04 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c1a:	2b20      	cmp	r3, #32
 8009c1c:	d003      	beq.n	8009c26 <USBD_StdItfReq+0x22>
 8009c1e:	2b40      	cmp	r3, #64	; 0x40
 8009c20:	d001      	beq.n	8009c26 <USBD_StdItfReq+0x22>
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d12a      	bne.n	8009c7c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c2c:	3b01      	subs	r3, #1
 8009c2e:	2b02      	cmp	r3, #2
 8009c30:	d81d      	bhi.n	8009c6e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	889b      	ldrh	r3, [r3, #4]
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d813      	bhi.n	8009c64 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	6839      	ldr	r1, [r7, #0]
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	4798      	blx	r3
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	88db      	ldrh	r3, [r3, #6]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d110      	bne.n	8009c78 <USBD_StdItfReq+0x74>
 8009c56:	7bfb      	ldrb	r3, [r7, #15]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d10d      	bne.n	8009c78 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 fd79 	bl	800a754 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009c62:	e009      	b.n	8009c78 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8009c64:	6839      	ldr	r1, [r7, #0]
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 fcab 	bl	800a5c2 <USBD_CtlError>
          break;
 8009c6c:	e004      	b.n	8009c78 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8009c6e:	6839      	ldr	r1, [r7, #0]
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 fca6 	bl	800a5c2 <USBD_CtlError>
          break;
 8009c76:	e000      	b.n	8009c7a <USBD_StdItfReq+0x76>
          break;
 8009c78:	bf00      	nop
      }
      break;
 8009c7a:	e004      	b.n	8009c86 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8009c7c:	6839      	ldr	r1, [r7, #0]
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 fc9f 	bl	800a5c2 <USBD_CtlError>
      break;
 8009c84:	bf00      	nop
  }

  return USBD_OK;
 8009c86:	2300      	movs	r3, #0
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3710      	adds	r7, #16
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	889b      	ldrh	r3, [r3, #4]
 8009ca2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009cac:	2b20      	cmp	r3, #32
 8009cae:	d004      	beq.n	8009cba <USBD_StdEPReq+0x2a>
 8009cb0:	2b40      	cmp	r3, #64	; 0x40
 8009cb2:	d002      	beq.n	8009cba <USBD_StdEPReq+0x2a>
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d008      	beq.n	8009cca <USBD_StdEPReq+0x3a>
 8009cb8:	e13d      	b.n	8009f36 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cc0:	689b      	ldr	r3, [r3, #8]
 8009cc2:	6839      	ldr	r1, [r7, #0]
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	4798      	blx	r3
      break;
 8009cc8:	e13a      	b.n	8009f40 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	781b      	ldrb	r3, [r3, #0]
 8009cce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009cd2:	2b20      	cmp	r3, #32
 8009cd4:	d10a      	bne.n	8009cec <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cdc:	689b      	ldr	r3, [r3, #8]
 8009cde:	6839      	ldr	r1, [r7, #0]
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	4798      	blx	r3
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009ce8:	7bfb      	ldrb	r3, [r7, #15]
 8009cea:	e12a      	b.n	8009f42 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	785b      	ldrb	r3, [r3, #1]
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d03e      	beq.n	8009d72 <USBD_StdEPReq+0xe2>
 8009cf4:	2b03      	cmp	r3, #3
 8009cf6:	d002      	beq.n	8009cfe <USBD_StdEPReq+0x6e>
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d070      	beq.n	8009dde <USBD_StdEPReq+0x14e>
 8009cfc:	e115      	b.n	8009f2a <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d04:	2b02      	cmp	r3, #2
 8009d06:	d002      	beq.n	8009d0e <USBD_StdEPReq+0x7e>
 8009d08:	2b03      	cmp	r3, #3
 8009d0a:	d015      	beq.n	8009d38 <USBD_StdEPReq+0xa8>
 8009d0c:	e02b      	b.n	8009d66 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d0e:	7bbb      	ldrb	r3, [r7, #14]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d00c      	beq.n	8009d2e <USBD_StdEPReq+0x9e>
 8009d14:	7bbb      	ldrb	r3, [r7, #14]
 8009d16:	2b80      	cmp	r3, #128	; 0x80
 8009d18:	d009      	beq.n	8009d2e <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009d1a:	7bbb      	ldrb	r3, [r7, #14]
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f004 f8be 	bl	800dea0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009d24:	2180      	movs	r1, #128	; 0x80
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f004 f8ba 	bl	800dea0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d2c:	e020      	b.n	8009d70 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8009d2e:	6839      	ldr	r1, [r7, #0]
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 fc46 	bl	800a5c2 <USBD_CtlError>
              break;
 8009d36:	e01b      	b.n	8009d70 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	885b      	ldrh	r3, [r3, #2]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d10e      	bne.n	8009d5e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8009d40:	7bbb      	ldrb	r3, [r7, #14]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d00b      	beq.n	8009d5e <USBD_StdEPReq+0xce>
 8009d46:	7bbb      	ldrb	r3, [r7, #14]
 8009d48:	2b80      	cmp	r3, #128	; 0x80
 8009d4a:	d008      	beq.n	8009d5e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	88db      	ldrh	r3, [r3, #6]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d104      	bne.n	8009d5e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009d54:	7bbb      	ldrb	r3, [r7, #14]
 8009d56:	4619      	mov	r1, r3
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f004 f8a1 	bl	800dea0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 fcf8 	bl	800a754 <USBD_CtlSendStatus>

              break;
 8009d64:	e004      	b.n	8009d70 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8009d66:	6839      	ldr	r1, [r7, #0]
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 fc2a 	bl	800a5c2 <USBD_CtlError>
              break;
 8009d6e:	bf00      	nop
          }
          break;
 8009d70:	e0e0      	b.n	8009f34 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d78:	2b02      	cmp	r3, #2
 8009d7a:	d002      	beq.n	8009d82 <USBD_StdEPReq+0xf2>
 8009d7c:	2b03      	cmp	r3, #3
 8009d7e:	d015      	beq.n	8009dac <USBD_StdEPReq+0x11c>
 8009d80:	e026      	b.n	8009dd0 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d82:	7bbb      	ldrb	r3, [r7, #14]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d00c      	beq.n	8009da2 <USBD_StdEPReq+0x112>
 8009d88:	7bbb      	ldrb	r3, [r7, #14]
 8009d8a:	2b80      	cmp	r3, #128	; 0x80
 8009d8c:	d009      	beq.n	8009da2 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009d8e:	7bbb      	ldrb	r3, [r7, #14]
 8009d90:	4619      	mov	r1, r3
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f004 f884 	bl	800dea0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009d98:	2180      	movs	r1, #128	; 0x80
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f004 f880 	bl	800dea0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009da0:	e01c      	b.n	8009ddc <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8009da2:	6839      	ldr	r1, [r7, #0]
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 fc0c 	bl	800a5c2 <USBD_CtlError>
              break;
 8009daa:	e017      	b.n	8009ddc <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	885b      	ldrh	r3, [r3, #2]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d112      	bne.n	8009dda <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009db4:	7bbb      	ldrb	r3, [r7, #14]
 8009db6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d004      	beq.n	8009dc8 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009dbe:	7bbb      	ldrb	r3, [r7, #14]
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f004 f88b 	bl	800dede <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 fcc3 	bl	800a754 <USBD_CtlSendStatus>
              }
              break;
 8009dce:	e004      	b.n	8009dda <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8009dd0:	6839      	ldr	r1, [r7, #0]
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 fbf5 	bl	800a5c2 <USBD_CtlError>
              break;
 8009dd8:	e000      	b.n	8009ddc <USBD_StdEPReq+0x14c>
              break;
 8009dda:	bf00      	nop
          }
          break;
 8009ddc:	e0aa      	b.n	8009f34 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009de4:	2b02      	cmp	r3, #2
 8009de6:	d002      	beq.n	8009dee <USBD_StdEPReq+0x15e>
 8009de8:	2b03      	cmp	r3, #3
 8009dea:	d032      	beq.n	8009e52 <USBD_StdEPReq+0x1c2>
 8009dec:	e097      	b.n	8009f1e <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009dee:	7bbb      	ldrb	r3, [r7, #14]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d007      	beq.n	8009e04 <USBD_StdEPReq+0x174>
 8009df4:	7bbb      	ldrb	r3, [r7, #14]
 8009df6:	2b80      	cmp	r3, #128	; 0x80
 8009df8:	d004      	beq.n	8009e04 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8009dfa:	6839      	ldr	r1, [r7, #0]
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 fbe0 	bl	800a5c2 <USBD_CtlError>
                break;
 8009e02:	e091      	b.n	8009f28 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	da0b      	bge.n	8009e24 <USBD_StdEPReq+0x194>
 8009e0c:	7bbb      	ldrb	r3, [r7, #14]
 8009e0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e12:	4613      	mov	r3, r2
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	4413      	add	r3, r2
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	3310      	adds	r3, #16
 8009e1c:	687a      	ldr	r2, [r7, #4]
 8009e1e:	4413      	add	r3, r2
 8009e20:	3304      	adds	r3, #4
 8009e22:	e00b      	b.n	8009e3c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e24:	7bbb      	ldrb	r3, [r7, #14]
 8009e26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e2a:	4613      	mov	r3, r2
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	4413      	add	r3, r2
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009e36:	687a      	ldr	r2, [r7, #4]
 8009e38:	4413      	add	r3, r2
 8009e3a:	3304      	adds	r3, #4
 8009e3c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	2200      	movs	r2, #0
 8009e42:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	2202      	movs	r2, #2
 8009e48:	4619      	mov	r1, r3
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f000 fc24 	bl	800a698 <USBD_CtlSendData>
              break;
 8009e50:	e06a      	b.n	8009f28 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009e52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	da11      	bge.n	8009e7e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009e5a:	7bbb      	ldrb	r3, [r7, #14]
 8009e5c:	f003 020f 	and.w	r2, r3, #15
 8009e60:	6879      	ldr	r1, [r7, #4]
 8009e62:	4613      	mov	r3, r2
 8009e64:	009b      	lsls	r3, r3, #2
 8009e66:	4413      	add	r3, r2
 8009e68:	009b      	lsls	r3, r3, #2
 8009e6a:	440b      	add	r3, r1
 8009e6c:	3318      	adds	r3, #24
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d117      	bne.n	8009ea4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8009e74:	6839      	ldr	r1, [r7, #0]
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 fba3 	bl	800a5c2 <USBD_CtlError>
                  break;
 8009e7c:	e054      	b.n	8009f28 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009e7e:	7bbb      	ldrb	r3, [r7, #14]
 8009e80:	f003 020f 	and.w	r2, r3, #15
 8009e84:	6879      	ldr	r1, [r7, #4]
 8009e86:	4613      	mov	r3, r2
 8009e88:	009b      	lsls	r3, r3, #2
 8009e8a:	4413      	add	r3, r2
 8009e8c:	009b      	lsls	r3, r3, #2
 8009e8e:	440b      	add	r3, r1
 8009e90:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d104      	bne.n	8009ea4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8009e9a:	6839      	ldr	r1, [r7, #0]
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f000 fb90 	bl	800a5c2 <USBD_CtlError>
                  break;
 8009ea2:	e041      	b.n	8009f28 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ea4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	da0b      	bge.n	8009ec4 <USBD_StdEPReq+0x234>
 8009eac:	7bbb      	ldrb	r3, [r7, #14]
 8009eae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009eb2:	4613      	mov	r3, r2
 8009eb4:	009b      	lsls	r3, r3, #2
 8009eb6:	4413      	add	r3, r2
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	3310      	adds	r3, #16
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	4413      	add	r3, r2
 8009ec0:	3304      	adds	r3, #4
 8009ec2:	e00b      	b.n	8009edc <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ec4:	7bbb      	ldrb	r3, [r7, #14]
 8009ec6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009eca:	4613      	mov	r3, r2
 8009ecc:	009b      	lsls	r3, r3, #2
 8009ece:	4413      	add	r3, r2
 8009ed0:	009b      	lsls	r3, r3, #2
 8009ed2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009ed6:	687a      	ldr	r2, [r7, #4]
 8009ed8:	4413      	add	r3, r2
 8009eda:	3304      	adds	r3, #4
 8009edc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009ede:	7bbb      	ldrb	r3, [r7, #14]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d002      	beq.n	8009eea <USBD_StdEPReq+0x25a>
 8009ee4:	7bbb      	ldrb	r3, [r7, #14]
 8009ee6:	2b80      	cmp	r3, #128	; 0x80
 8009ee8:	d103      	bne.n	8009ef2 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	2200      	movs	r2, #0
 8009eee:	601a      	str	r2, [r3, #0]
 8009ef0:	e00e      	b.n	8009f10 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009ef2:	7bbb      	ldrb	r3, [r7, #14]
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f004 f810 	bl	800df1c <USBD_LL_IsStallEP>
 8009efc:	4603      	mov	r3, r0
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d003      	beq.n	8009f0a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	2201      	movs	r2, #1
 8009f06:	601a      	str	r2, [r3, #0]
 8009f08:	e002      	b.n	8009f10 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	2202      	movs	r2, #2
 8009f14:	4619      	mov	r1, r3
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f000 fbbe 	bl	800a698 <USBD_CtlSendData>
              break;
 8009f1c:	e004      	b.n	8009f28 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8009f1e:	6839      	ldr	r1, [r7, #0]
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 fb4e 	bl	800a5c2 <USBD_CtlError>
              break;
 8009f26:	bf00      	nop
          }
          break;
 8009f28:	e004      	b.n	8009f34 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8009f2a:	6839      	ldr	r1, [r7, #0]
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f000 fb48 	bl	800a5c2 <USBD_CtlError>
          break;
 8009f32:	bf00      	nop
      }
      break;
 8009f34:	e004      	b.n	8009f40 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8009f36:	6839      	ldr	r1, [r7, #0]
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 fb42 	bl	800a5c2 <USBD_CtlError>
      break;
 8009f3e:	bf00      	nop
  }

  return ret;
 8009f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3710      	adds	r7, #16
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
	...

08009f4c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b084      	sub	sp, #16
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009f56:	2300      	movs	r3, #0
 8009f58:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	885b      	ldrh	r3, [r3, #2]
 8009f66:	0a1b      	lsrs	r3, r3, #8
 8009f68:	b29b      	uxth	r3, r3
 8009f6a:	3b01      	subs	r3, #1
 8009f6c:	2b0e      	cmp	r3, #14
 8009f6e:	f200 8152 	bhi.w	800a216 <USBD_GetDescriptor+0x2ca>
 8009f72:	a201      	add	r2, pc, #4	; (adr r2, 8009f78 <USBD_GetDescriptor+0x2c>)
 8009f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f78:	08009fe9 	.word	0x08009fe9
 8009f7c:	0800a001 	.word	0x0800a001
 8009f80:	0800a041 	.word	0x0800a041
 8009f84:	0800a217 	.word	0x0800a217
 8009f88:	0800a217 	.word	0x0800a217
 8009f8c:	0800a1b7 	.word	0x0800a1b7
 8009f90:	0800a1e3 	.word	0x0800a1e3
 8009f94:	0800a217 	.word	0x0800a217
 8009f98:	0800a217 	.word	0x0800a217
 8009f9c:	0800a217 	.word	0x0800a217
 8009fa0:	0800a217 	.word	0x0800a217
 8009fa4:	0800a217 	.word	0x0800a217
 8009fa8:	0800a217 	.word	0x0800a217
 8009fac:	0800a217 	.word	0x0800a217
 8009fb0:	08009fb5 	.word	0x08009fb5
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009fba:	69db      	ldr	r3, [r3, #28]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d00b      	beq.n	8009fd8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009fc6:	69db      	ldr	r3, [r3, #28]
 8009fc8:	687a      	ldr	r2, [r7, #4]
 8009fca:	7c12      	ldrb	r2, [r2, #16]
 8009fcc:	f107 0108 	add.w	r1, r7, #8
 8009fd0:	4610      	mov	r0, r2
 8009fd2:	4798      	blx	r3
 8009fd4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009fd6:	e126      	b.n	800a226 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009fd8:	6839      	ldr	r1, [r7, #0]
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f000 faf1 	bl	800a5c2 <USBD_CtlError>
        err++;
 8009fe0:	7afb      	ldrb	r3, [r7, #11]
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	72fb      	strb	r3, [r7, #11]
      break;
 8009fe6:	e11e      	b.n	800a226 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	7c12      	ldrb	r2, [r2, #16]
 8009ff4:	f107 0108 	add.w	r1, r7, #8
 8009ff8:	4610      	mov	r0, r2
 8009ffa:	4798      	blx	r3
 8009ffc:	60f8      	str	r0, [r7, #12]
      break;
 8009ffe:	e112      	b.n	800a226 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	7c1b      	ldrb	r3, [r3, #16]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d10d      	bne.n	800a024 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a00e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a010:	f107 0208 	add.w	r2, r7, #8
 800a014:	4610      	mov	r0, r2
 800a016:	4798      	blx	r3
 800a018:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	3301      	adds	r3, #1
 800a01e:	2202      	movs	r2, #2
 800a020:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a022:	e100      	b.n	800a226 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a02a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a02c:	f107 0208 	add.w	r2, r7, #8
 800a030:	4610      	mov	r0, r2
 800a032:	4798      	blx	r3
 800a034:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	3301      	adds	r3, #1
 800a03a:	2202      	movs	r2, #2
 800a03c:	701a      	strb	r2, [r3, #0]
      break;
 800a03e:	e0f2      	b.n	800a226 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	885b      	ldrh	r3, [r3, #2]
 800a044:	b2db      	uxtb	r3, r3
 800a046:	2b05      	cmp	r3, #5
 800a048:	f200 80ac 	bhi.w	800a1a4 <USBD_GetDescriptor+0x258>
 800a04c:	a201      	add	r2, pc, #4	; (adr r2, 800a054 <USBD_GetDescriptor+0x108>)
 800a04e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a052:	bf00      	nop
 800a054:	0800a06d 	.word	0x0800a06d
 800a058:	0800a0a1 	.word	0x0800a0a1
 800a05c:	0800a0d5 	.word	0x0800a0d5
 800a060:	0800a109 	.word	0x0800a109
 800a064:	0800a13d 	.word	0x0800a13d
 800a068:	0800a171 	.word	0x0800a171
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d00b      	beq.n	800a090 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	7c12      	ldrb	r2, [r2, #16]
 800a084:	f107 0108 	add.w	r1, r7, #8
 800a088:	4610      	mov	r0, r2
 800a08a:	4798      	blx	r3
 800a08c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a08e:	e091      	b.n	800a1b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a090:	6839      	ldr	r1, [r7, #0]
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 fa95 	bl	800a5c2 <USBD_CtlError>
            err++;
 800a098:	7afb      	ldrb	r3, [r7, #11]
 800a09a:	3301      	adds	r3, #1
 800a09c:	72fb      	strb	r3, [r7, #11]
          break;
 800a09e:	e089      	b.n	800a1b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a0a6:	689b      	ldr	r3, [r3, #8]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d00b      	beq.n	800a0c4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a0b2:	689b      	ldr	r3, [r3, #8]
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	7c12      	ldrb	r2, [r2, #16]
 800a0b8:	f107 0108 	add.w	r1, r7, #8
 800a0bc:	4610      	mov	r0, r2
 800a0be:	4798      	blx	r3
 800a0c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0c2:	e077      	b.n	800a1b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a0c4:	6839      	ldr	r1, [r7, #0]
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f000 fa7b 	bl	800a5c2 <USBD_CtlError>
            err++;
 800a0cc:	7afb      	ldrb	r3, [r7, #11]
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	72fb      	strb	r3, [r7, #11]
          break;
 800a0d2:	e06f      	b.n	800a1b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a0da:	68db      	ldr	r3, [r3, #12]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d00b      	beq.n	800a0f8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a0e6:	68db      	ldr	r3, [r3, #12]
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	7c12      	ldrb	r2, [r2, #16]
 800a0ec:	f107 0108 	add.w	r1, r7, #8
 800a0f0:	4610      	mov	r0, r2
 800a0f2:	4798      	blx	r3
 800a0f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0f6:	e05d      	b.n	800a1b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a0f8:	6839      	ldr	r1, [r7, #0]
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 fa61 	bl	800a5c2 <USBD_CtlError>
            err++;
 800a100:	7afb      	ldrb	r3, [r7, #11]
 800a102:	3301      	adds	r3, #1
 800a104:	72fb      	strb	r3, [r7, #11]
          break;
 800a106:	e055      	b.n	800a1b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a10e:	691b      	ldr	r3, [r3, #16]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d00b      	beq.n	800a12c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a11a:	691b      	ldr	r3, [r3, #16]
 800a11c:	687a      	ldr	r2, [r7, #4]
 800a11e:	7c12      	ldrb	r2, [r2, #16]
 800a120:	f107 0108 	add.w	r1, r7, #8
 800a124:	4610      	mov	r0, r2
 800a126:	4798      	blx	r3
 800a128:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a12a:	e043      	b.n	800a1b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a12c:	6839      	ldr	r1, [r7, #0]
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 fa47 	bl	800a5c2 <USBD_CtlError>
            err++;
 800a134:	7afb      	ldrb	r3, [r7, #11]
 800a136:	3301      	adds	r3, #1
 800a138:	72fb      	strb	r3, [r7, #11]
          break;
 800a13a:	e03b      	b.n	800a1b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a142:	695b      	ldr	r3, [r3, #20]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d00b      	beq.n	800a160 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a14e:	695b      	ldr	r3, [r3, #20]
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	7c12      	ldrb	r2, [r2, #16]
 800a154:	f107 0108 	add.w	r1, r7, #8
 800a158:	4610      	mov	r0, r2
 800a15a:	4798      	blx	r3
 800a15c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a15e:	e029      	b.n	800a1b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a160:	6839      	ldr	r1, [r7, #0]
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 fa2d 	bl	800a5c2 <USBD_CtlError>
            err++;
 800a168:	7afb      	ldrb	r3, [r7, #11]
 800a16a:	3301      	adds	r3, #1
 800a16c:	72fb      	strb	r3, [r7, #11]
          break;
 800a16e:	e021      	b.n	800a1b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a176:	699b      	ldr	r3, [r3, #24]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d00b      	beq.n	800a194 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a182:	699b      	ldr	r3, [r3, #24]
 800a184:	687a      	ldr	r2, [r7, #4]
 800a186:	7c12      	ldrb	r2, [r2, #16]
 800a188:	f107 0108 	add.w	r1, r7, #8
 800a18c:	4610      	mov	r0, r2
 800a18e:	4798      	blx	r3
 800a190:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a192:	e00f      	b.n	800a1b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a194:	6839      	ldr	r1, [r7, #0]
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 fa13 	bl	800a5c2 <USBD_CtlError>
            err++;
 800a19c:	7afb      	ldrb	r3, [r7, #11]
 800a19e:	3301      	adds	r3, #1
 800a1a0:	72fb      	strb	r3, [r7, #11]
          break;
 800a1a2:	e007      	b.n	800a1b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a1a4:	6839      	ldr	r1, [r7, #0]
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 fa0b 	bl	800a5c2 <USBD_CtlError>
          err++;
 800a1ac:	7afb      	ldrb	r3, [r7, #11]
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a1b2:	e038      	b.n	800a226 <USBD_GetDescriptor+0x2da>
 800a1b4:	e037      	b.n	800a226 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	7c1b      	ldrb	r3, [r3, #16]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d109      	bne.n	800a1d2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1c6:	f107 0208 	add.w	r2, r7, #8
 800a1ca:	4610      	mov	r0, r2
 800a1cc:	4798      	blx	r3
 800a1ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a1d0:	e029      	b.n	800a226 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a1d2:	6839      	ldr	r1, [r7, #0]
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 f9f4 	bl	800a5c2 <USBD_CtlError>
        err++;
 800a1da:	7afb      	ldrb	r3, [r7, #11]
 800a1dc:	3301      	adds	r3, #1
 800a1de:	72fb      	strb	r3, [r7, #11]
      break;
 800a1e0:	e021      	b.n	800a226 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	7c1b      	ldrb	r3, [r3, #16]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d10d      	bne.n	800a206 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1f2:	f107 0208 	add.w	r2, r7, #8
 800a1f6:	4610      	mov	r0, r2
 800a1f8:	4798      	blx	r3
 800a1fa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	3301      	adds	r3, #1
 800a200:	2207      	movs	r2, #7
 800a202:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a204:	e00f      	b.n	800a226 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a206:	6839      	ldr	r1, [r7, #0]
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 f9da 	bl	800a5c2 <USBD_CtlError>
        err++;
 800a20e:	7afb      	ldrb	r3, [r7, #11]
 800a210:	3301      	adds	r3, #1
 800a212:	72fb      	strb	r3, [r7, #11]
      break;
 800a214:	e007      	b.n	800a226 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a216:	6839      	ldr	r1, [r7, #0]
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f000 f9d2 	bl	800a5c2 <USBD_CtlError>
      err++;
 800a21e:	7afb      	ldrb	r3, [r7, #11]
 800a220:	3301      	adds	r3, #1
 800a222:	72fb      	strb	r3, [r7, #11]
      break;
 800a224:	bf00      	nop
  }

  if (err != 0U)
 800a226:	7afb      	ldrb	r3, [r7, #11]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d11c      	bne.n	800a266 <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a22c:	893b      	ldrh	r3, [r7, #8]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d011      	beq.n	800a256 <USBD_GetDescriptor+0x30a>
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	88db      	ldrh	r3, [r3, #6]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d00d      	beq.n	800a256 <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	88da      	ldrh	r2, [r3, #6]
 800a23e:	893b      	ldrh	r3, [r7, #8]
 800a240:	4293      	cmp	r3, r2
 800a242:	bf28      	it	cs
 800a244:	4613      	movcs	r3, r2
 800a246:	b29b      	uxth	r3, r3
 800a248:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a24a:	893b      	ldrh	r3, [r7, #8]
 800a24c:	461a      	mov	r2, r3
 800a24e:	68f9      	ldr	r1, [r7, #12]
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f000 fa21 	bl	800a698 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	88db      	ldrh	r3, [r3, #6]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d104      	bne.n	800a268 <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f000 fa78 	bl	800a754 <USBD_CtlSendStatus>
 800a264:	e000      	b.n	800a268 <USBD_GetDescriptor+0x31c>
    return;
 800a266:	bf00      	nop
    }
  }
}
 800a268:	3710      	adds	r7, #16
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop

0800a270 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b084      	sub	sp, #16
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	889b      	ldrh	r3, [r3, #4]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d130      	bne.n	800a2e4 <USBD_SetAddress+0x74>
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	88db      	ldrh	r3, [r3, #6]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d12c      	bne.n	800a2e4 <USBD_SetAddress+0x74>
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	885b      	ldrh	r3, [r3, #2]
 800a28e:	2b7f      	cmp	r3, #127	; 0x7f
 800a290:	d828      	bhi.n	800a2e4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	885b      	ldrh	r3, [r3, #2]
 800a296:	b2db      	uxtb	r3, r3
 800a298:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a29c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2a4:	2b03      	cmp	r3, #3
 800a2a6:	d104      	bne.n	800a2b2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a2a8:	6839      	ldr	r1, [r7, #0]
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 f989 	bl	800a5c2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2b0:	e01c      	b.n	800a2ec <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	7bfa      	ldrb	r2, [r7, #15]
 800a2b6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a2ba:	7bfb      	ldrb	r3, [r7, #15]
 800a2bc:	4619      	mov	r1, r3
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f003 fe52 	bl	800df68 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f000 fa45 	bl	800a754 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a2ca:	7bfb      	ldrb	r3, [r7, #15]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d004      	beq.n	800a2da <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2202      	movs	r2, #2
 800a2d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2d8:	e008      	b.n	800a2ec <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2201      	movs	r2, #1
 800a2de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2e2:	e003      	b.n	800a2ec <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a2e4:	6839      	ldr	r1, [r7, #0]
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 f96b 	bl	800a5c2 <USBD_CtlError>
  }
}
 800a2ec:	bf00      	nop
 800a2ee:	3710      	adds	r7, #16
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b082      	sub	sp, #8
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	885b      	ldrh	r3, [r3, #2]
 800a302:	b2da      	uxtb	r2, r3
 800a304:	4b41      	ldr	r3, [pc, #260]	; (800a40c <USBD_SetConfig+0x118>)
 800a306:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a308:	4b40      	ldr	r3, [pc, #256]	; (800a40c <USBD_SetConfig+0x118>)
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d904      	bls.n	800a31a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a310:	6839      	ldr	r1, [r7, #0]
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 f955 	bl	800a5c2 <USBD_CtlError>
 800a318:	e075      	b.n	800a406 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a320:	2b02      	cmp	r3, #2
 800a322:	d002      	beq.n	800a32a <USBD_SetConfig+0x36>
 800a324:	2b03      	cmp	r3, #3
 800a326:	d023      	beq.n	800a370 <USBD_SetConfig+0x7c>
 800a328:	e062      	b.n	800a3f0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a32a:	4b38      	ldr	r3, [pc, #224]	; (800a40c <USBD_SetConfig+0x118>)
 800a32c:	781b      	ldrb	r3, [r3, #0]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d01a      	beq.n	800a368 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a332:	4b36      	ldr	r3, [pc, #216]	; (800a40c <USBD_SetConfig+0x118>)
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	461a      	mov	r2, r3
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2203      	movs	r2, #3
 800a340:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a344:	4b31      	ldr	r3, [pc, #196]	; (800a40c <USBD_SetConfig+0x118>)
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	4619      	mov	r1, r3
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f7ff f9c6 	bl	80096dc <USBD_SetClassConfig>
 800a350:	4603      	mov	r3, r0
 800a352:	2b02      	cmp	r3, #2
 800a354:	d104      	bne.n	800a360 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a356:	6839      	ldr	r1, [r7, #0]
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f000 f932 	bl	800a5c2 <USBD_CtlError>
            return;
 800a35e:	e052      	b.n	800a406 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f000 f9f7 	bl	800a754 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a366:	e04e      	b.n	800a406 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f000 f9f3 	bl	800a754 <USBD_CtlSendStatus>
        break;
 800a36e:	e04a      	b.n	800a406 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a370:	4b26      	ldr	r3, [pc, #152]	; (800a40c <USBD_SetConfig+0x118>)
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d112      	bne.n	800a39e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2202      	movs	r2, #2
 800a37c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a380:	4b22      	ldr	r3, [pc, #136]	; (800a40c <USBD_SetConfig+0x118>)
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	461a      	mov	r2, r3
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a38a:	4b20      	ldr	r3, [pc, #128]	; (800a40c <USBD_SetConfig+0x118>)
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	4619      	mov	r1, r3
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f7ff f9c2 	bl	800971a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f000 f9dc 	bl	800a754 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a39c:	e033      	b.n	800a406 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a39e:	4b1b      	ldr	r3, [pc, #108]	; (800a40c <USBD_SetConfig+0x118>)
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d01d      	beq.n	800a3e8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f7ff f9b0 	bl	800971a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a3ba:	4b14      	ldr	r3, [pc, #80]	; (800a40c <USBD_SetConfig+0x118>)
 800a3bc:	781b      	ldrb	r3, [r3, #0]
 800a3be:	461a      	mov	r2, r3
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a3c4:	4b11      	ldr	r3, [pc, #68]	; (800a40c <USBD_SetConfig+0x118>)
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f7ff f986 	bl	80096dc <USBD_SetClassConfig>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	2b02      	cmp	r3, #2
 800a3d4:	d104      	bne.n	800a3e0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a3d6:	6839      	ldr	r1, [r7, #0]
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 f8f2 	bl	800a5c2 <USBD_CtlError>
            return;
 800a3de:	e012      	b.n	800a406 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 f9b7 	bl	800a754 <USBD_CtlSendStatus>
        break;
 800a3e6:	e00e      	b.n	800a406 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 f9b3 	bl	800a754 <USBD_CtlSendStatus>
        break;
 800a3ee:	e00a      	b.n	800a406 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a3f0:	6839      	ldr	r1, [r7, #0]
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 f8e5 	bl	800a5c2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a3f8:	4b04      	ldr	r3, [pc, #16]	; (800a40c <USBD_SetConfig+0x118>)
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f7ff f98b 	bl	800971a <USBD_ClrClassConfig>
        break;
 800a404:	bf00      	nop
    }
  }
}
 800a406:	3708      	adds	r7, #8
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}
 800a40c:	200003ec 	.word	0x200003ec

0800a410 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b082      	sub	sp, #8
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	88db      	ldrh	r3, [r3, #6]
 800a41e:	2b01      	cmp	r3, #1
 800a420:	d004      	beq.n	800a42c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a422:	6839      	ldr	r1, [r7, #0]
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f000 f8cc 	bl	800a5c2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a42a:	e021      	b.n	800a470 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a432:	2b01      	cmp	r3, #1
 800a434:	db17      	blt.n	800a466 <USBD_GetConfig+0x56>
 800a436:	2b02      	cmp	r3, #2
 800a438:	dd02      	ble.n	800a440 <USBD_GetConfig+0x30>
 800a43a:	2b03      	cmp	r3, #3
 800a43c:	d00b      	beq.n	800a456 <USBD_GetConfig+0x46>
 800a43e:	e012      	b.n	800a466 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2200      	movs	r2, #0
 800a444:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	3308      	adds	r3, #8
 800a44a:	2201      	movs	r2, #1
 800a44c:	4619      	mov	r1, r3
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f000 f922 	bl	800a698 <USBD_CtlSendData>
        break;
 800a454:	e00c      	b.n	800a470 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	3304      	adds	r3, #4
 800a45a:	2201      	movs	r2, #1
 800a45c:	4619      	mov	r1, r3
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 f91a 	bl	800a698 <USBD_CtlSendData>
        break;
 800a464:	e004      	b.n	800a470 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800a466:	6839      	ldr	r1, [r7, #0]
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f000 f8aa 	bl	800a5c2 <USBD_CtlError>
        break;
 800a46e:	bf00      	nop
}
 800a470:	bf00      	nop
 800a472:	3708      	adds	r7, #8
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b082      	sub	sp, #8
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a488:	3b01      	subs	r3, #1
 800a48a:	2b02      	cmp	r3, #2
 800a48c:	d81e      	bhi.n	800a4cc <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	88db      	ldrh	r3, [r3, #6]
 800a492:	2b02      	cmp	r3, #2
 800a494:	d004      	beq.n	800a4a0 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a496:	6839      	ldr	r1, [r7, #0]
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 f892 	bl	800a5c2 <USBD_CtlError>
        break;
 800a49e:	e01a      	b.n	800a4d6 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d005      	beq.n	800a4bc <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	68db      	ldr	r3, [r3, #12]
 800a4b4:	f043 0202 	orr.w	r2, r3, #2
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	330c      	adds	r3, #12
 800a4c0:	2202      	movs	r2, #2
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f000 f8e7 	bl	800a698 <USBD_CtlSendData>
      break;
 800a4ca:	e004      	b.n	800a4d6 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a4cc:	6839      	ldr	r1, [r7, #0]
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 f877 	bl	800a5c2 <USBD_CtlError>
      break;
 800a4d4:	bf00      	nop
  }
}
 800a4d6:	bf00      	nop
 800a4d8:	3708      	adds	r7, #8
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}

0800a4de <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a4de:	b580      	push	{r7, lr}
 800a4e0:	b082      	sub	sp, #8
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
 800a4e6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	885b      	ldrh	r3, [r3, #2]
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	d106      	bne.n	800a4fe <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f000 f92b 	bl	800a754 <USBD_CtlSendStatus>
  }
}
 800a4fe:	bf00      	nop
 800a500:	3708      	adds	r7, #8
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}

0800a506 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a506:	b580      	push	{r7, lr}
 800a508:	b082      	sub	sp, #8
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
 800a50e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a516:	3b01      	subs	r3, #1
 800a518:	2b02      	cmp	r3, #2
 800a51a:	d80b      	bhi.n	800a534 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	885b      	ldrh	r3, [r3, #2]
 800a520:	2b01      	cmp	r3, #1
 800a522:	d10c      	bne.n	800a53e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2200      	movs	r2, #0
 800a528:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f000 f911 	bl	800a754 <USBD_CtlSendStatus>
      }
      break;
 800a532:	e004      	b.n	800a53e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a534:	6839      	ldr	r1, [r7, #0]
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 f843 	bl	800a5c2 <USBD_CtlError>
      break;
 800a53c:	e000      	b.n	800a540 <USBD_ClrFeature+0x3a>
      break;
 800a53e:	bf00      	nop
  }
}
 800a540:	bf00      	nop
 800a542:	3708      	adds	r7, #8
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}

0800a548 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a548:	b480      	push	{r7}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	781a      	ldrb	r2, [r3, #0]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	785a      	ldrb	r2, [r3, #1]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	3302      	adds	r3, #2
 800a566:	781b      	ldrb	r3, [r3, #0]
 800a568:	b29a      	uxth	r2, r3
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	3303      	adds	r3, #3
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	b29b      	uxth	r3, r3
 800a572:	021b      	lsls	r3, r3, #8
 800a574:	b29b      	uxth	r3, r3
 800a576:	4413      	add	r3, r2
 800a578:	b29a      	uxth	r2, r3
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	3304      	adds	r3, #4
 800a582:	781b      	ldrb	r3, [r3, #0]
 800a584:	b29a      	uxth	r2, r3
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	3305      	adds	r3, #5
 800a58a:	781b      	ldrb	r3, [r3, #0]
 800a58c:	b29b      	uxth	r3, r3
 800a58e:	021b      	lsls	r3, r3, #8
 800a590:	b29b      	uxth	r3, r3
 800a592:	4413      	add	r3, r2
 800a594:	b29a      	uxth	r2, r3
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	3306      	adds	r3, #6
 800a59e:	781b      	ldrb	r3, [r3, #0]
 800a5a0:	b29a      	uxth	r2, r3
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	3307      	adds	r3, #7
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	021b      	lsls	r3, r3, #8
 800a5ac:	b29b      	uxth	r3, r3
 800a5ae:	4413      	add	r3, r2
 800a5b0:	b29a      	uxth	r2, r3
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	80da      	strh	r2, [r3, #6]

}
 800a5b6:	bf00      	nop
 800a5b8:	370c      	adds	r7, #12
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c0:	4770      	bx	lr

0800a5c2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a5c2:	b580      	push	{r7, lr}
 800a5c4:	b082      	sub	sp, #8
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	6078      	str	r0, [r7, #4]
 800a5ca:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a5cc:	2180      	movs	r1, #128	; 0x80
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f003 fc66 	bl	800dea0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a5d4:	2100      	movs	r1, #0
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f003 fc62 	bl	800dea0 <USBD_LL_StallEP>
}
 800a5dc:	bf00      	nop
 800a5de:	3708      	adds	r7, #8
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}

0800a5e4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b086      	sub	sp, #24
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	60f8      	str	r0, [r7, #12]
 800a5ec:	60b9      	str	r1, [r7, #8]
 800a5ee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d032      	beq.n	800a660 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a5fa:	68f8      	ldr	r0, [r7, #12]
 800a5fc:	f000 f834 	bl	800a668 <USBD_GetLen>
 800a600:	4603      	mov	r3, r0
 800a602:	3301      	adds	r3, #1
 800a604:	b29b      	uxth	r3, r3
 800a606:	005b      	lsls	r3, r3, #1
 800a608:	b29a      	uxth	r2, r3
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a60e:	7dfb      	ldrb	r3, [r7, #23]
 800a610:	1c5a      	adds	r2, r3, #1
 800a612:	75fa      	strb	r2, [r7, #23]
 800a614:	461a      	mov	r2, r3
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	4413      	add	r3, r2
 800a61a:	687a      	ldr	r2, [r7, #4]
 800a61c:	7812      	ldrb	r2, [r2, #0]
 800a61e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a620:	7dfb      	ldrb	r3, [r7, #23]
 800a622:	1c5a      	adds	r2, r3, #1
 800a624:	75fa      	strb	r2, [r7, #23]
 800a626:	461a      	mov	r2, r3
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	4413      	add	r3, r2
 800a62c:	2203      	movs	r2, #3
 800a62e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a630:	e012      	b.n	800a658 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	1c5a      	adds	r2, r3, #1
 800a636:	60fa      	str	r2, [r7, #12]
 800a638:	7dfa      	ldrb	r2, [r7, #23]
 800a63a:	1c51      	adds	r1, r2, #1
 800a63c:	75f9      	strb	r1, [r7, #23]
 800a63e:	4611      	mov	r1, r2
 800a640:	68ba      	ldr	r2, [r7, #8]
 800a642:	440a      	add	r2, r1
 800a644:	781b      	ldrb	r3, [r3, #0]
 800a646:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a648:	7dfb      	ldrb	r3, [r7, #23]
 800a64a:	1c5a      	adds	r2, r3, #1
 800a64c:	75fa      	strb	r2, [r7, #23]
 800a64e:	461a      	mov	r2, r3
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	4413      	add	r3, r2
 800a654:	2200      	movs	r2, #0
 800a656:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d1e8      	bne.n	800a632 <USBD_GetString+0x4e>
    }
  }
}
 800a660:	bf00      	nop
 800a662:	3718      	adds	r7, #24
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a668:	b480      	push	{r7}
 800a66a:	b085      	sub	sp, #20
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a670:	2300      	movs	r3, #0
 800a672:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a674:	e005      	b.n	800a682 <USBD_GetLen+0x1a>
  {
    len++;
 800a676:	7bfb      	ldrb	r3, [r7, #15]
 800a678:	3301      	adds	r3, #1
 800a67a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	3301      	adds	r3, #1
 800a680:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d1f5      	bne.n	800a676 <USBD_GetLen+0xe>
  }

  return len;
 800a68a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3714      	adds	r7, #20
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr

0800a698 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b084      	sub	sp, #16
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	60b9      	str	r1, [r7, #8]
 800a6a2:	4613      	mov	r3, r2
 800a6a4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2202      	movs	r2, #2
 800a6aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a6ae:	88fa      	ldrh	r2, [r7, #6]
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a6b4:	88fa      	ldrh	r2, [r7, #6]
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a6ba:	88fb      	ldrh	r3, [r7, #6]
 800a6bc:	68ba      	ldr	r2, [r7, #8]
 800a6be:	2100      	movs	r1, #0
 800a6c0:	68f8      	ldr	r0, [r7, #12]
 800a6c2:	f003 fc70 	bl	800dfa6 <USBD_LL_Transmit>

  return USBD_OK;
 800a6c6:	2300      	movs	r3, #0
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3710      	adds	r7, #16
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}

0800a6d0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b084      	sub	sp, #16
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	60f8      	str	r0, [r7, #12]
 800a6d8:	60b9      	str	r1, [r7, #8]
 800a6da:	4613      	mov	r3, r2
 800a6dc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a6de:	88fb      	ldrh	r3, [r7, #6]
 800a6e0:	68ba      	ldr	r2, [r7, #8]
 800a6e2:	2100      	movs	r1, #0
 800a6e4:	68f8      	ldr	r0, [r7, #12]
 800a6e6:	f003 fc5e 	bl	800dfa6 <USBD_LL_Transmit>

  return USBD_OK;
 800a6ea:	2300      	movs	r3, #0
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3710      	adds	r7, #16
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b084      	sub	sp, #16
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	4613      	mov	r3, r2
 800a700:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2203      	movs	r2, #3
 800a706:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a70a:	88fa      	ldrh	r2, [r7, #6]
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a712:	88fa      	ldrh	r2, [r7, #6]
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a71a:	88fb      	ldrh	r3, [r7, #6]
 800a71c:	68ba      	ldr	r2, [r7, #8]
 800a71e:	2100      	movs	r1, #0
 800a720:	68f8      	ldr	r0, [r7, #12]
 800a722:	f003 fc63 	bl	800dfec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a726:	2300      	movs	r3, #0
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3710      	adds	r7, #16
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b084      	sub	sp, #16
 800a734:	af00      	add	r7, sp, #0
 800a736:	60f8      	str	r0, [r7, #12]
 800a738:	60b9      	str	r1, [r7, #8]
 800a73a:	4613      	mov	r3, r2
 800a73c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a73e:	88fb      	ldrh	r3, [r7, #6]
 800a740:	68ba      	ldr	r2, [r7, #8]
 800a742:	2100      	movs	r1, #0
 800a744:	68f8      	ldr	r0, [r7, #12]
 800a746:	f003 fc51 	bl	800dfec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a74a:	2300      	movs	r3, #0
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3710      	adds	r7, #16
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}

0800a754 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b082      	sub	sp, #8
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2204      	movs	r2, #4
 800a760:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a764:	2300      	movs	r3, #0
 800a766:	2200      	movs	r2, #0
 800a768:	2100      	movs	r1, #0
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f003 fc1b 	bl	800dfa6 <USBD_LL_Transmit>

  return USBD_OK;
 800a770:	2300      	movs	r3, #0
}
 800a772:	4618      	mov	r0, r3
 800a774:	3708      	adds	r7, #8
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}

0800a77a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a77a:	b580      	push	{r7, lr}
 800a77c:	b082      	sub	sp, #8
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2205      	movs	r2, #5
 800a786:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a78a:	2300      	movs	r3, #0
 800a78c:	2200      	movs	r2, #0
 800a78e:	2100      	movs	r1, #0
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f003 fc2b 	bl	800dfec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a796:	2300      	movs	r3, #0
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3708      	adds	r7, #8
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <aci_gap_set_io_capability>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b0cc      	sub	sp, #304	; 0x130
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	4602      	mov	r2, r0
 800a7a8:	1dfb      	adds	r3, r7, #7
 800a7aa:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800a7ac:	f107 0310 	add.w	r3, r7, #16
 800a7b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a7b4:	f107 030f 	add.w	r3, r7, #15
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = htob(IO_Capability, 1);
 800a7c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7c6:	1dfa      	adds	r2, r7, #7
 800a7c8:	7812      	ldrb	r2, [r2, #0]
 800a7ca:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a7cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a7d0:	3301      	adds	r3, #1
 800a7d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800a7d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a7da:	2218      	movs	r2, #24
 800a7dc:	2100      	movs	r1, #0
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f000 ff61 	bl	800b6a6 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a7e4:	233f      	movs	r3, #63	; 0x3f
 800a7e6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800a7ea:	2385      	movs	r3, #133	; 0x85
 800a7ec:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a7f0:	f107 0310 	add.w	r3, r7, #16
 800a7f4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a7f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a7fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a800:	f107 030f 	add.w	r3, r7, #15
 800a804:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a808:	2301      	movs	r3, #1
 800a80a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800a80e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a812:	2100      	movs	r1, #0
 800a814:	4618      	mov	r0, r3
 800a816:	f001 f901 	bl	800ba1c <hci_send_req>
 800a81a:	4603      	mov	r3, r0
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	da01      	bge.n	800a824 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 800a820:	23ff      	movs	r3, #255	; 0xff
 800a822:	e009      	b.n	800a838 <aci_gap_set_io_capability+0x98>
  if (status) 
 800a824:	f107 030f 	add.w	r3, r7, #15
 800a828:	781b      	ldrb	r3, [r3, #0]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d003      	beq.n	800a836 <aci_gap_set_io_capability+0x96>
  {
    return status;
 800a82e:	f107 030f 	add.w	r3, r7, #15
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	e000      	b.n	800a838 <aci_gap_set_io_capability+0x98>
  }
  return BLE_STATUS_SUCCESS;
 800a836:	2300      	movs	r3, #0
}
 800a838:	4618      	mov	r0, r3
 800a83a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}

0800a842 <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 800a842:	b5b0      	push	{r4, r5, r7, lr}
 800a844:	b0cc      	sub	sp, #304	; 0x130
 800a846:	af00      	add	r7, sp, #0
 800a848:	4605      	mov	r5, r0
 800a84a:	460c      	mov	r4, r1
 800a84c:	4610      	mov	r0, r2
 800a84e:	4619      	mov	r1, r3
 800a850:	1dfb      	adds	r3, r7, #7
 800a852:	462a      	mov	r2, r5
 800a854:	701a      	strb	r2, [r3, #0]
 800a856:	1dbb      	adds	r3, r7, #6
 800a858:	4622      	mov	r2, r4
 800a85a:	701a      	strb	r2, [r3, #0]
 800a85c:	1d7b      	adds	r3, r7, #5
 800a85e:	4602      	mov	r2, r0
 800a860:	701a      	strb	r2, [r3, #0]
 800a862:	1d3b      	adds	r3, r7, #4
 800a864:	460a      	mov	r2, r1
 800a866:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800a868:	f107 0310 	add.w	r3, r7, #16
 800a86c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a870:	f107 030f 	add.w	r3, r7, #15
 800a874:	2200      	movs	r2, #0
 800a876:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a878:	2300      	movs	r3, #0
 800a87a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 800a87e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a882:	1dfa      	adds	r2, r7, #7
 800a884:	7812      	ldrb	r2, [r2, #0]
 800a886:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a888:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a88c:	3301      	adds	r3, #1
 800a88e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 800a892:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a896:	1dba      	adds	r2, r7, #6
 800a898:	7812      	ldrb	r2, [r2, #0]
 800a89a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a89c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = htob(SC_Support, 1);
 800a8a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8aa:	1d7a      	adds	r2, r7, #5
 800a8ac:	7812      	ldrb	r2, [r2, #0]
 800a8ae:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a8b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 800a8ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8be:	1d3a      	adds	r2, r7, #4
 800a8c0:	7812      	ldrb	r2, [r2, #0]
 800a8c2:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800a8c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 800a8ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8d2:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800a8d6:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800a8d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a8dc:	3301      	adds	r3, #1
 800a8de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 800a8e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8e6:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800a8ea:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a8ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a8f0:	3301      	adds	r3, #1
 800a8f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 800a8f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8fa:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800a8fe:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800a900:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a904:	3301      	adds	r3, #1
 800a906:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 800a90a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a90e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800a912:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800a916:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a91a:	3304      	adds	r3, #4
 800a91c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 800a920:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a924:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800a928:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800a92a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a92e:	3301      	adds	r3, #1
 800a930:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800a934:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a938:	2218      	movs	r2, #24
 800a93a:	2100      	movs	r1, #0
 800a93c:	4618      	mov	r0, r3
 800a93e:	f000 feb2 	bl	800b6a6 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a942:	233f      	movs	r3, #63	; 0x3f
 800a944:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800a948:	2386      	movs	r3, #134	; 0x86
 800a94a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a94e:	f107 0310 	add.w	r3, r7, #16
 800a952:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a956:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a95a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a95e:	f107 030f 	add.w	r3, r7, #15
 800a962:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a966:	2301      	movs	r3, #1
 800a968:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800a96c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a970:	2100      	movs	r1, #0
 800a972:	4618      	mov	r0, r3
 800a974:	f001 f852 	bl	800ba1c <hci_send_req>
 800a978:	4603      	mov	r3, r0
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	da01      	bge.n	800a982 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 800a97e:	23ff      	movs	r3, #255	; 0xff
 800a980:	e009      	b.n	800a996 <aci_gap_set_authentication_requirement+0x154>
  if (status) 
 800a982:	f107 030f 	add.w	r3, r7, #15
 800a986:	781b      	ldrb	r3, [r3, #0]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d003      	beq.n	800a994 <aci_gap_set_authentication_requirement+0x152>
  {
    return status;
 800a98c:	f107 030f 	add.w	r3, r7, #15
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	e000      	b.n	800a996 <aci_gap_set_authentication_requirement+0x154>
  }
  return BLE_STATUS_SUCCESS;
 800a994:	2300      	movs	r3, #0
}
 800a996:	4618      	mov	r0, r3
 800a998:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bdb0      	pop	{r4, r5, r7, pc}

0800a9a0 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 800a9a0:	b590      	push	{r4, r7, lr}
 800a9a2:	b0cd      	sub	sp, #308	; 0x134
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	4604      	mov	r4, r0
 800a9a8:	4608      	mov	r0, r1
 800a9aa:	4611      	mov	r1, r2
 800a9ac:	463a      	mov	r2, r7
 800a9ae:	6013      	str	r3, [r2, #0]
 800a9b0:	1dfb      	adds	r3, r7, #7
 800a9b2:	4622      	mov	r2, r4
 800a9b4:	701a      	strb	r2, [r3, #0]
 800a9b6:	1dbb      	adds	r3, r7, #6
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	701a      	strb	r2, [r3, #0]
 800a9bc:	1d7b      	adds	r3, r7, #5
 800a9be:	460a      	mov	r2, r1
 800a9c0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800a9c2:	f107 0310 	add.w	r3, r7, #16
 800a9c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800a9ca:	f107 0308 	add.w	r3, r7, #8
 800a9ce:	2207      	movs	r2, #7
 800a9d0:	2100      	movs	r1, #0
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f000 fe67 	bl	800b6a6 <Osal_MemSet>
  int index_input = 0;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = htob(Role, 1);
 800a9de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a9e2:	1dfa      	adds	r2, r7, #7
 800a9e4:	7812      	ldrb	r2, [r2, #0]
 800a9e6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a9e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a9ec:	3301      	adds	r3, #1
 800a9ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 800a9f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a9f6:	1dba      	adds	r2, r7, #6
 800a9f8:	7812      	ldrb	r2, [r2, #0]
 800a9fa:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a9fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa00:	3301      	adds	r3, #1
 800aa02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 800aa06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa0a:	1d7a      	adds	r2, r7, #5
 800aa0c:	7812      	ldrb	r2, [r2, #0]
 800aa0e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800aa10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa14:	3301      	adds	r3, #1
 800aa16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800aa1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800aa1e:	2218      	movs	r2, #24
 800aa20:	2100      	movs	r1, #0
 800aa22:	4618      	mov	r0, r3
 800aa24:	f000 fe3f 	bl	800b6a6 <Osal_MemSet>
  rq.ogf = 0x3f;
 800aa28:	233f      	movs	r3, #63	; 0x3f
 800aa2a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800aa2e:	238a      	movs	r3, #138	; 0x8a
 800aa30:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800aa34:	f107 0310 	add.w	r3, r7, #16
 800aa38:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800aa3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa40:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800aa44:	f107 0308 	add.w	r3, r7, #8
 800aa48:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800aa4c:	2307      	movs	r3, #7
 800aa4e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800aa52:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800aa56:	2100      	movs	r1, #0
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f000 ffdf 	bl	800ba1c <hci_send_req>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	da01      	bge.n	800aa68 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 800aa64:	23ff      	movs	r3, #255	; 0xff
 800aa66:	e021      	b.n	800aaac <aci_gap_init+0x10c>
  if (resp.Status) 
 800aa68:	f107 0308 	add.w	r3, r7, #8
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d003      	beq.n	800aa7a <aci_gap_init+0xda>
  {
    return resp.Status;
 800aa72:	f107 0308 	add.w	r3, r7, #8
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	e018      	b.n	800aaac <aci_gap_init+0x10c>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800aa7a:	f107 0308 	add.w	r3, r7, #8
 800aa7e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800aa82:	b29a      	uxth	r2, r3
 800aa84:	463b      	mov	r3, r7
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 800aa8a:	f107 0308 	add.w	r3, r7, #8
 800aa8e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800aa98:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 800aa9a:	f107 0308 	add.w	r3, r7, #8
 800aa9e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800aaa2:	b29a      	uxth	r2, r3
 800aaa4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800aaa8:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800aaaa:	2300      	movs	r3, #0
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd90      	pop	{r4, r7, pc}

0800aab6 <aci_gap_configure_whitelist>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_configure_whitelist(void)
{
 800aab6:	b580      	push	{r7, lr}
 800aab8:	b088      	sub	sp, #32
 800aaba:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800aabc:	2300      	movs	r3, #0
 800aabe:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800aac0:	f107 0308 	add.w	r3, r7, #8
 800aac4:	2218      	movs	r2, #24
 800aac6:	2100      	movs	r1, #0
 800aac8:	4618      	mov	r0, r3
 800aaca:	f000 fdec 	bl	800b6a6 <Osal_MemSet>
  rq.ogf = 0x3f;
 800aace:	233f      	movs	r3, #63	; 0x3f
 800aad0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800aad2:	2392      	movs	r3, #146	; 0x92
 800aad4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800aad6:	1dfb      	adds	r3, r7, #7
 800aad8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800aada:	2301      	movs	r3, #1
 800aadc:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800aade:	f107 0308 	add.w	r3, r7, #8
 800aae2:	2100      	movs	r1, #0
 800aae4:	4618      	mov	r0, r3
 800aae6:	f000 ff99 	bl	800ba1c <hci_send_req>
 800aaea:	4603      	mov	r3, r0
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	da01      	bge.n	800aaf4 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800aaf0:	23ff      	movs	r3, #255	; 0xff
 800aaf2:	e005      	b.n	800ab00 <aci_gap_configure_whitelist+0x4a>
  if (status) 
 800aaf4:	79fb      	ldrb	r3, [r7, #7]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d001      	beq.n	800aafe <aci_gap_configure_whitelist+0x48>
  {
    return status;
 800aafa:	79fb      	ldrb	r3, [r7, #7]
 800aafc:	e000      	b.n	800ab00 <aci_gap_configure_whitelist+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800aafe:	2300      	movs	r3, #0
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3720      	adds	r7, #32
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}

0800ab08 <aci_gap_start_general_discovery_proc>:

tBleStatus aci_gap_start_general_discovery_proc(uint16_t LE_Scan_Interval,
                                                uint16_t LE_Scan_Window,
                                                uint8_t Own_Address_Type,
                                                uint8_t Filter_Duplicates)
{
 800ab08:	b5b0      	push	{r4, r5, r7, lr}
 800ab0a:	b0cc      	sub	sp, #304	; 0x130
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	4605      	mov	r5, r0
 800ab10:	460c      	mov	r4, r1
 800ab12:	4610      	mov	r0, r2
 800ab14:	4619      	mov	r1, r3
 800ab16:	1dbb      	adds	r3, r7, #6
 800ab18:	462a      	mov	r2, r5
 800ab1a:	801a      	strh	r2, [r3, #0]
 800ab1c:	1d3b      	adds	r3, r7, #4
 800ab1e:	4622      	mov	r2, r4
 800ab20:	801a      	strh	r2, [r3, #0]
 800ab22:	1cfb      	adds	r3, r7, #3
 800ab24:	4602      	mov	r2, r0
 800ab26:	701a      	strb	r2, [r3, #0]
 800ab28:	1cbb      	adds	r3, r7, #2
 800ab2a:	460a      	mov	r2, r1
 800ab2c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_start_general_discovery_proc_cp0 *cp0 = (aci_gap_start_general_discovery_proc_cp0*)(cmd_buffer);
 800ab2e:	f107 0310 	add.w	r3, r7, #16
 800ab32:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ab36:	f107 030f 	add.w	r3, r7, #15
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Interval = htob(LE_Scan_Interval, 2);
 800ab44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab48:	1dba      	adds	r2, r7, #6
 800ab4a:	8812      	ldrh	r2, [r2, #0]
 800ab4c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ab4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab52:	3302      	adds	r3, #2
 800ab54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Window = htob(LE_Scan_Window, 2);
 800ab58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab5c:	1d3a      	adds	r2, r7, #4
 800ab5e:	8812      	ldrh	r2, [r2, #0]
 800ab60:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800ab62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab66:	3302      	adds	r3, #2
 800ab68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800ab6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab70:	1cfa      	adds	r2, r7, #3
 800ab72:	7812      	ldrb	r2, [r2, #0]
 800ab74:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800ab76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Filter_Duplicates = htob(Filter_Duplicates, 1);
 800ab80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab84:	1cba      	adds	r2, r7, #2
 800ab86:	7812      	ldrb	r2, [r2, #0]
 800ab88:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800ab8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab8e:	3301      	adds	r3, #1
 800ab90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800ab94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ab98:	2218      	movs	r2, #24
 800ab9a:	2100      	movs	r1, #0
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f000 fd82 	bl	800b6a6 <Osal_MemSet>
  rq.ogf = 0x3f;
 800aba2:	233f      	movs	r3, #63	; 0x3f
 800aba4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x097;
 800aba8:	2397      	movs	r3, #151	; 0x97
 800abaa:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800abae:	230f      	movs	r3, #15
 800abb0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800abb4:	f107 0310 	add.w	r3, r7, #16
 800abb8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800abbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800abc0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800abc4:	f107 030f 	add.w	r3, r7, #15
 800abc8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800abcc:	2301      	movs	r3, #1
 800abce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800abd2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800abd6:	2100      	movs	r1, #0
 800abd8:	4618      	mov	r0, r3
 800abda:	f000 ff1f 	bl	800ba1c <hci_send_req>
 800abde:	4603      	mov	r3, r0
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	da01      	bge.n	800abe8 <aci_gap_start_general_discovery_proc+0xe0>
    return BLE_STATUS_TIMEOUT;
 800abe4:	23ff      	movs	r3, #255	; 0xff
 800abe6:	e009      	b.n	800abfc <aci_gap_start_general_discovery_proc+0xf4>
  if (status) 
 800abe8:	f107 030f 	add.w	r3, r7, #15
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d003      	beq.n	800abfa <aci_gap_start_general_discovery_proc+0xf2>
  {
    return status;
 800abf2:	f107 030f 	add.w	r3, r7, #15
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	e000      	b.n	800abfc <aci_gap_start_general_discovery_proc+0xf4>
  }
  return BLE_STATUS_SUCCESS;
 800abfa:	2300      	movs	r3, #0
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bdb0      	pop	{r4, r5, r7, pc}

0800ac06 <aci_gap_create_connection>:
                                     uint16_t Conn_Interval_Max,
                                     uint16_t Conn_Latency,
                                     uint16_t Supervision_Timeout,
                                     uint16_t Minimum_CE_Length,
                                     uint16_t Maximum_CE_Length)
{
 800ac06:	b590      	push	{r4, r7, lr}
 800ac08:	b0cf      	sub	sp, #316	; 0x13c
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	4604      	mov	r4, r0
 800ac0e:	4608      	mov	r0, r1
 800ac10:	4611      	mov	r1, r2
 800ac12:	1d3a      	adds	r2, r7, #4
 800ac14:	6013      	str	r3, [r2, #0]
 800ac16:	f107 030e 	add.w	r3, r7, #14
 800ac1a:	4622      	mov	r2, r4
 800ac1c:	801a      	strh	r2, [r3, #0]
 800ac1e:	f107 030c 	add.w	r3, r7, #12
 800ac22:	4602      	mov	r2, r0
 800ac24:	801a      	strh	r2, [r3, #0]
 800ac26:	f107 030b 	add.w	r3, r7, #11
 800ac2a:	460a      	mov	r2, r1
 800ac2c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_create_connection_cp0 *cp0 = (aci_gap_create_connection_cp0*)(cmd_buffer);
 800ac2e:	f107 0318 	add.w	r3, r7, #24
 800ac32:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 800ac36:	f107 0317 	add.w	r3, r7, #23
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->LE_Scan_Interval = htob(LE_Scan_Interval, 2);
 800ac44:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ac48:	f107 020e 	add.w	r2, r7, #14
 800ac4c:	8812      	ldrh	r2, [r2, #0]
 800ac4e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ac50:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ac54:	3302      	adds	r3, #2
 800ac56:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->LE_Scan_Window = htob(LE_Scan_Window, 2);
 800ac5a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ac5e:	f107 020c 	add.w	r2, r7, #12
 800ac62:	8812      	ldrh	r2, [r2, #0]
 800ac64:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800ac66:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ac6a:	3302      	adds	r3, #2
 800ac6c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Peer_Address_Type = htob(Peer_Address_Type, 1);
 800ac70:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ac74:	f107 020b 	add.w	r2, r7, #11
 800ac78:	7812      	ldrb	r2, [r2, #0]
 800ac7a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800ac7c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ac80:	3301      	adds	r3, #1
 800ac82:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy((void *) &cp0->Peer_Address, (const void *) Peer_Address, 6);
 800ac86:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ac8a:	1d58      	adds	r0, r3, #5
 800ac8c:	1d3b      	adds	r3, r7, #4
 800ac8e:	2206      	movs	r2, #6
 800ac90:	6819      	ldr	r1, [r3, #0]
 800ac92:	f000 fcf8 	bl	800b686 <Osal_MemCpy>
  index_input += 6;
 800ac96:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ac9a:	3306      	adds	r3, #6
 800ac9c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800aca0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800aca4:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800aca8:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800acaa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800acae:	3301      	adds	r3, #1
 800acb0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Interval_Min = htob(Conn_Interval_Min, 2);
 800acb4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800acb8:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 800acbc:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 800acbe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800acc2:	3302      	adds	r3, #2
 800acc4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Interval_Max = htob(Conn_Interval_Max, 2);
 800acc8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800accc:	f8b7 2150 	ldrh.w	r2, [r7, #336]	; 0x150
 800acd0:	81da      	strh	r2, [r3, #14]
  index_input += 2;
 800acd2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800acd6:	3302      	adds	r3, #2
 800acd8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Latency = htob(Conn_Latency, 2);
 800acdc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ace0:	f8b7 2154 	ldrh.w	r2, [r7, #340]	; 0x154
 800ace4:	821a      	strh	r2, [r3, #16]
  index_input += 2;
 800ace6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800acea:	3302      	adds	r3, #2
 800acec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Supervision_Timeout = htob(Supervision_Timeout, 2);
 800acf0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800acf4:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 800acf8:	825a      	strh	r2, [r3, #18]
  index_input += 2;
 800acfa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800acfe:	3302      	adds	r3, #2
 800ad00:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Minimum_CE_Length = htob(Minimum_CE_Length, 2);
 800ad04:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ad08:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800ad0c:	829a      	strh	r2, [r3, #20]
  index_input += 2;
 800ad0e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ad12:	3302      	adds	r3, #2
 800ad14:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Maximum_CE_Length = htob(Maximum_CE_Length, 2);
 800ad18:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ad1c:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800ad20:	82da      	strh	r2, [r3, #22]
  index_input += 2;
 800ad22:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ad26:	3302      	adds	r3, #2
 800ad28:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet(&rq, 0, sizeof(rq));
 800ad2c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800ad30:	2218      	movs	r2, #24
 800ad32:	2100      	movs	r1, #0
 800ad34:	4618      	mov	r0, r3
 800ad36:	f000 fcb6 	bl	800b6a6 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ad3a:	233f      	movs	r3, #63	; 0x3f
 800ad3c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x09c;
 800ad40:	239c      	movs	r3, #156	; 0x9c
 800ad42:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 800ad46:	230f      	movs	r3, #15
 800ad48:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 800ad4c:	f107 0318 	add.w	r3, r7, #24
 800ad50:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800ad54:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ad58:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 800ad5c:	f107 0317 	add.w	r3, r7, #23
 800ad60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 800ad64:	2301      	movs	r3, #1
 800ad66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800ad6a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800ad6e:	2100      	movs	r1, #0
 800ad70:	4618      	mov	r0, r3
 800ad72:	f000 fe53 	bl	800ba1c <hci_send_req>
 800ad76:	4603      	mov	r3, r0
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	da01      	bge.n	800ad80 <aci_gap_create_connection+0x17a>
    return BLE_STATUS_TIMEOUT;
 800ad7c:	23ff      	movs	r3, #255	; 0xff
 800ad7e:	e009      	b.n	800ad94 <aci_gap_create_connection+0x18e>
  if (status) 
 800ad80:	f107 0317 	add.w	r3, r7, #23
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d003      	beq.n	800ad92 <aci_gap_create_connection+0x18c>
  {
    return status;
 800ad8a:	f107 0317 	add.w	r3, r7, #23
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	e000      	b.n	800ad94 <aci_gap_create_connection+0x18e>
  }
  return BLE_STATUS_SUCCESS;
 800ad92:	2300      	movs	r3, #0
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd90      	pop	{r4, r7, pc}

0800ad9e <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init(void)
{
 800ad9e:	b580      	push	{r7, lr}
 800ada0:	b088      	sub	sp, #32
 800ada2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800ada4:	2300      	movs	r3, #0
 800ada6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800ada8:	f107 0308 	add.w	r3, r7, #8
 800adac:	2218      	movs	r2, #24
 800adae:	2100      	movs	r1, #0
 800adb0:	4618      	mov	r0, r3
 800adb2:	f000 fc78 	bl	800b6a6 <Osal_MemSet>
  rq.ogf = 0x3f;
 800adb6:	233f      	movs	r3, #63	; 0x3f
 800adb8:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800adba:	f240 1301 	movw	r3, #257	; 0x101
 800adbe:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800adc0:	1dfb      	adds	r3, r7, #7
 800adc2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800adc4:	2301      	movs	r3, #1
 800adc6:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800adc8:	f107 0308 	add.w	r3, r7, #8
 800adcc:	2100      	movs	r1, #0
 800adce:	4618      	mov	r0, r3
 800add0:	f000 fe24 	bl	800ba1c <hci_send_req>
 800add4:	4603      	mov	r3, r0
 800add6:	2b00      	cmp	r3, #0
 800add8:	da01      	bge.n	800adde <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800adda:	23ff      	movs	r3, #255	; 0xff
 800addc:	e005      	b.n	800adea <aci_gatt_init+0x4c>
  if (status) 
 800adde:	79fb      	ldrb	r3, [r7, #7]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d001      	beq.n	800ade8 <aci_gatt_init+0x4a>
  {
    return status;
 800ade4:	79fb      	ldrb	r3, [r7, #7]
 800ade6:	e000      	b.n	800adea <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 800ade8:	2300      	movs	r3, #0
}
 800adea:	4618      	mov	r0, r3
 800adec:	3720      	adds	r7, #32
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}

0800adf2 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 800adf2:	b5b0      	push	{r4, r5, r7, lr}
 800adf4:	b0cc      	sub	sp, #304	; 0x130
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	4605      	mov	r5, r0
 800adfa:	460c      	mov	r4, r1
 800adfc:	4610      	mov	r0, r2
 800adfe:	4619      	mov	r1, r3
 800ae00:	1dbb      	adds	r3, r7, #6
 800ae02:	462a      	mov	r2, r5
 800ae04:	801a      	strh	r2, [r3, #0]
 800ae06:	1d3b      	adds	r3, r7, #4
 800ae08:	4622      	mov	r2, r4
 800ae0a:	801a      	strh	r2, [r3, #0]
 800ae0c:	1cfb      	adds	r3, r7, #3
 800ae0e:	4602      	mov	r2, r0
 800ae10:	701a      	strb	r2, [r3, #0]
 800ae12:	1cbb      	adds	r3, r7, #2
 800ae14:	460a      	mov	r2, r1
 800ae16:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800ae18:	f107 0310 	add.w	r3, r7, #16
 800ae1c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ae20:	f107 030f 	add.w	r3, r7, #15
 800ae24:	2200      	movs	r2, #0
 800ae26:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = htob(Service_Handle, 2);
 800ae2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae32:	1dba      	adds	r2, r7, #6
 800ae34:	8812      	ldrh	r2, [r2, #0]
 800ae36:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ae38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae3c:	3302      	adds	r3, #2
 800ae3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = htob(Char_Handle, 2);
 800ae42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae46:	1d3a      	adds	r2, r7, #4
 800ae48:	8812      	ldrh	r2, [r2, #0]
 800ae4a:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800ae4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae50:	3302      	adds	r3, #2
 800ae52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = htob(Val_Offset, 1);
 800ae56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae5a:	1cfa      	adds	r2, r7, #3
 800ae5c:	7812      	ldrb	r2, [r2, #0]
 800ae5e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800ae60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae64:	3301      	adds	r3, #1
 800ae66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 800ae6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae6e:	1cba      	adds	r2, r7, #2
 800ae70:	7812      	ldrb	r2, [r2, #0]
 800ae72:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800ae74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae78:	3301      	adds	r3, #1
 800ae7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 800ae7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae82:	1d98      	adds	r0, r3, #6
 800ae84:	1cbb      	adds	r3, r7, #2
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	461a      	mov	r2, r3
 800ae8a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800ae8e:	f000 fbfa 	bl	800b686 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800ae92:	1cbb      	adds	r3, r7, #2
 800ae94:	781b      	ldrb	r3, [r3, #0]
 800ae96:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800ae9a:	4413      	add	r3, r2
 800ae9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800aea0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800aea4:	2218      	movs	r2, #24
 800aea6:	2100      	movs	r1, #0
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f000 fbfc 	bl	800b6a6 <Osal_MemSet>
  rq.ogf = 0x3f;
 800aeae:	233f      	movs	r3, #63	; 0x3f
 800aeb0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800aeb4:	f44f 7383 	mov.w	r3, #262	; 0x106
 800aeb8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800aebc:	f107 0310 	add.w	r3, r7, #16
 800aec0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800aec4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aec8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800aecc:	f107 030f 	add.w	r3, r7, #15
 800aed0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800aed4:	2301      	movs	r3, #1
 800aed6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800aeda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800aede:	2100      	movs	r1, #0
 800aee0:	4618      	mov	r0, r3
 800aee2:	f000 fd9b 	bl	800ba1c <hci_send_req>
 800aee6:	4603      	mov	r3, r0
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	da01      	bge.n	800aef0 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 800aeec:	23ff      	movs	r3, #255	; 0xff
 800aeee:	e009      	b.n	800af04 <aci_gatt_update_char_value+0x112>
  if (status) 
 800aef0:	f107 030f 	add.w	r3, r7, #15
 800aef4:	781b      	ldrb	r3, [r3, #0]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d003      	beq.n	800af02 <aci_gatt_update_char_value+0x110>
  {
    return status;
 800aefa:	f107 030f 	add.w	r3, r7, #15
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	e000      	b.n	800af04 <aci_gatt_update_char_value+0x112>
  }
  return BLE_STATUS_SUCCESS;
 800af02:	2300      	movs	r3, #0
}
 800af04:	4618      	mov	r0, r3
 800af06:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bdb0      	pop	{r4, r5, r7, pc}

0800af0e <aci_gatt_disc_all_primary_services>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gatt_disc_all_primary_services(uint16_t Connection_Handle)
{
 800af0e:	b580      	push	{r7, lr}
 800af10:	b0cc      	sub	sp, #304	; 0x130
 800af12:	af00      	add	r7, sp, #0
 800af14:	4602      	mov	r2, r0
 800af16:	1dbb      	adds	r3, r7, #6
 800af18:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_primary_services_cp0 *cp0 = (aci_gatt_disc_all_primary_services_cp0*)(cmd_buffer);
 800af1a:	f107 0310 	add.w	r3, r7, #16
 800af1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800af22:	f107 030f 	add.w	r3, r7, #15
 800af26:	2200      	movs	r2, #0
 800af28:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800af2a:	2300      	movs	r3, #0
 800af2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800af30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af34:	1dba      	adds	r2, r7, #6
 800af36:	8812      	ldrh	r2, [r2, #0]
 800af38:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800af3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af3e:	3302      	adds	r3, #2
 800af40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800af44:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800af48:	2218      	movs	r2, #24
 800af4a:	2100      	movs	r1, #0
 800af4c:	4618      	mov	r0, r3
 800af4e:	f000 fbaa 	bl	800b6a6 <Osal_MemSet>
  rq.ogf = 0x3f;
 800af52:	233f      	movs	r3, #63	; 0x3f
 800af54:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x112;
 800af58:	f44f 7389 	mov.w	r3, #274	; 0x112
 800af5c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800af60:	230f      	movs	r3, #15
 800af62:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800af66:	f107 0310 	add.w	r3, r7, #16
 800af6a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800af6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af72:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800af76:	f107 030f 	add.w	r3, r7, #15
 800af7a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800af7e:	2301      	movs	r3, #1
 800af80:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800af84:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800af88:	2100      	movs	r1, #0
 800af8a:	4618      	mov	r0, r3
 800af8c:	f000 fd46 	bl	800ba1c <hci_send_req>
 800af90:	4603      	mov	r3, r0
 800af92:	2b00      	cmp	r3, #0
 800af94:	da01      	bge.n	800af9a <aci_gatt_disc_all_primary_services+0x8c>
    return BLE_STATUS_TIMEOUT;
 800af96:	23ff      	movs	r3, #255	; 0xff
 800af98:	e009      	b.n	800afae <aci_gatt_disc_all_primary_services+0xa0>
  if (status) 
 800af9a:	f107 030f 	add.w	r3, r7, #15
 800af9e:	781b      	ldrb	r3, [r3, #0]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d003      	beq.n	800afac <aci_gatt_disc_all_primary_services+0x9e>
  {
    return status;
 800afa4:	f107 030f 	add.w	r3, r7, #15
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	e000      	b.n	800afae <aci_gatt_disc_all_primary_services+0xa0>
  }
  return BLE_STATUS_SUCCESS;
 800afac:	2300      	movs	r3, #0
}
 800afae:	4618      	mov	r0, r3
 800afb0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <aci_gatt_disc_all_char_of_service>:
}

tBleStatus aci_gatt_disc_all_char_of_service(uint16_t Connection_Handle,
                                             uint16_t Start_Handle,
                                             uint16_t End_Handle)
{
 800afb8:	b590      	push	{r4, r7, lr}
 800afba:	b0cd      	sub	sp, #308	; 0x134
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	4604      	mov	r4, r0
 800afc0:	4608      	mov	r0, r1
 800afc2:	4611      	mov	r1, r2
 800afc4:	1dbb      	adds	r3, r7, #6
 800afc6:	4622      	mov	r2, r4
 800afc8:	801a      	strh	r2, [r3, #0]
 800afca:	1d3b      	adds	r3, r7, #4
 800afcc:	4602      	mov	r2, r0
 800afce:	801a      	strh	r2, [r3, #0]
 800afd0:	1cbb      	adds	r3, r7, #2
 800afd2:	460a      	mov	r2, r1
 800afd4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_of_service_cp0 *cp0 = (aci_gatt_disc_all_char_of_service_cp0*)(cmd_buffer);
 800afd6:	f107 0310 	add.w	r3, r7, #16
 800afda:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800afde:	f107 030f 	add.w	r3, r7, #15
 800afe2:	2200      	movs	r2, #0
 800afe4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800afe6:	2300      	movs	r3, #0
 800afe8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800afec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aff0:	1dba      	adds	r2, r7, #6
 800aff2:	8812      	ldrh	r2, [r2, #0]
 800aff4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800aff6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800affa:	3302      	adds	r3, #2
 800affc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Start_Handle = htob(Start_Handle, 2);
 800b000:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b004:	1d3a      	adds	r2, r7, #4
 800b006:	8812      	ldrh	r2, [r2, #0]
 800b008:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800b00a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b00e:	3302      	adds	r3, #2
 800b010:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = htob(End_Handle, 2);
 800b014:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b018:	1cba      	adds	r2, r7, #2
 800b01a:	8812      	ldrh	r2, [r2, #0]
 800b01c:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800b01e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b022:	3302      	adds	r3, #2
 800b024:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b028:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b02c:	2218      	movs	r2, #24
 800b02e:	2100      	movs	r1, #0
 800b030:	4618      	mov	r0, r3
 800b032:	f000 fb38 	bl	800b6a6 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b036:	233f      	movs	r3, #63	; 0x3f
 800b038:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x115;
 800b03c:	f240 1315 	movw	r3, #277	; 0x115
 800b040:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800b044:	230f      	movs	r3, #15
 800b046:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800b04a:	f107 0310 	add.w	r3, r7, #16
 800b04e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b052:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b056:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b05a:	f107 030f 	add.w	r3, r7, #15
 800b05e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b062:	2301      	movs	r3, #1
 800b064:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b068:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b06c:	2100      	movs	r1, #0
 800b06e:	4618      	mov	r0, r3
 800b070:	f000 fcd4 	bl	800ba1c <hci_send_req>
 800b074:	4603      	mov	r3, r0
 800b076:	2b00      	cmp	r3, #0
 800b078:	da01      	bge.n	800b07e <aci_gatt_disc_all_char_of_service+0xc6>
    return BLE_STATUS_TIMEOUT;
 800b07a:	23ff      	movs	r3, #255	; 0xff
 800b07c:	e009      	b.n	800b092 <aci_gatt_disc_all_char_of_service+0xda>
  if (status) 
 800b07e:	f107 030f 	add.w	r3, r7, #15
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d003      	beq.n	800b090 <aci_gatt_disc_all_char_of_service+0xd8>
  {
    return status;
 800b088:	f107 030f 	add.w	r3, r7, #15
 800b08c:	781b      	ldrb	r3, [r3, #0]
 800b08e:	e000      	b.n	800b092 <aci_gatt_disc_all_char_of_service+0xda>
  }
  return BLE_STATUS_SUCCESS;
 800b090:	2300      	movs	r3, #0
}
 800b092:	4618      	mov	r0, r3
 800b094:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd90      	pop	{r4, r7, pc}

0800b09c <aci_gatt_disc_all_char_desc>:
}

tBleStatus aci_gatt_disc_all_char_desc(uint16_t Connection_Handle,
                                       uint16_t Char_Handle,
                                       uint16_t End_Handle)
{
 800b09c:	b590      	push	{r4, r7, lr}
 800b09e:	b0cd      	sub	sp, #308	; 0x134
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	4604      	mov	r4, r0
 800b0a4:	4608      	mov	r0, r1
 800b0a6:	4611      	mov	r1, r2
 800b0a8:	1dbb      	adds	r3, r7, #6
 800b0aa:	4622      	mov	r2, r4
 800b0ac:	801a      	strh	r2, [r3, #0]
 800b0ae:	1d3b      	adds	r3, r7, #4
 800b0b0:	4602      	mov	r2, r0
 800b0b2:	801a      	strh	r2, [r3, #0]
 800b0b4:	1cbb      	adds	r3, r7, #2
 800b0b6:	460a      	mov	r2, r1
 800b0b8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_desc_cp0 *cp0 = (aci_gatt_disc_all_char_desc_cp0*)(cmd_buffer);
 800b0ba:	f107 0310 	add.w	r3, r7, #16
 800b0be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b0c2:	f107 030f 	add.w	r3, r7, #15
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800b0d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b0d4:	1dba      	adds	r2, r7, #6
 800b0d6:	8812      	ldrh	r2, [r2, #0]
 800b0d8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b0da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b0de:	3302      	adds	r3, #2
 800b0e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = htob(Char_Handle, 2);
 800b0e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b0e8:	1d3a      	adds	r2, r7, #4
 800b0ea:	8812      	ldrh	r2, [r2, #0]
 800b0ec:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800b0ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b0f2:	3302      	adds	r3, #2
 800b0f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = htob(End_Handle, 2);
 800b0f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b0fc:	1cba      	adds	r2, r7, #2
 800b0fe:	8812      	ldrh	r2, [r2, #0]
 800b100:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800b102:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b106:	3302      	adds	r3, #2
 800b108:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b10c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b110:	2218      	movs	r2, #24
 800b112:	2100      	movs	r1, #0
 800b114:	4618      	mov	r0, r3
 800b116:	f000 fac6 	bl	800b6a6 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b11a:	233f      	movs	r3, #63	; 0x3f
 800b11c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x117;
 800b120:	f240 1317 	movw	r3, #279	; 0x117
 800b124:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800b128:	230f      	movs	r3, #15
 800b12a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800b12e:	f107 0310 	add.w	r3, r7, #16
 800b132:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b136:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b13a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b13e:	f107 030f 	add.w	r3, r7, #15
 800b142:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b146:	2301      	movs	r3, #1
 800b148:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b14c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b150:	2100      	movs	r1, #0
 800b152:	4618      	mov	r0, r3
 800b154:	f000 fc62 	bl	800ba1c <hci_send_req>
 800b158:	4603      	mov	r3, r0
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	da01      	bge.n	800b162 <aci_gatt_disc_all_char_desc+0xc6>
    return BLE_STATUS_TIMEOUT;
 800b15e:	23ff      	movs	r3, #255	; 0xff
 800b160:	e009      	b.n	800b176 <aci_gatt_disc_all_char_desc+0xda>
  if (status) 
 800b162:	f107 030f 	add.w	r3, r7, #15
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d003      	beq.n	800b174 <aci_gatt_disc_all_char_desc+0xd8>
  {
    return status;
 800b16c:	f107 030f 	add.w	r3, r7, #15
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	e000      	b.n	800b176 <aci_gatt_disc_all_char_desc+0xda>
  }
  return BLE_STATUS_SUCCESS;
 800b174:	2300      	movs	r3, #0
}
 800b176:	4618      	mov	r0, r3
 800b178:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd90      	pop	{r4, r7, pc}

0800b180 <aci_gatt_write_char_desc>:

tBleStatus aci_gatt_write_char_desc(uint16_t Connection_Handle,
                                    uint16_t Attr_Handle,
                                    uint8_t Attribute_Val_Length,
                                    uint8_t Attribute_Val[])
{
 800b180:	b590      	push	{r4, r7, lr}
 800b182:	b0cf      	sub	sp, #316	; 0x13c
 800b184:	af00      	add	r7, sp, #0
 800b186:	4604      	mov	r4, r0
 800b188:	4608      	mov	r0, r1
 800b18a:	4611      	mov	r1, r2
 800b18c:	1d3a      	adds	r2, r7, #4
 800b18e:	6013      	str	r3, [r2, #0]
 800b190:	f107 030e 	add.w	r3, r7, #14
 800b194:	4622      	mov	r2, r4
 800b196:	801a      	strh	r2, [r3, #0]
 800b198:	f107 030c 	add.w	r3, r7, #12
 800b19c:	4602      	mov	r2, r0
 800b19e:	801a      	strh	r2, [r3, #0]
 800b1a0:	f107 030b 	add.w	r3, r7, #11
 800b1a4:	460a      	mov	r2, r1
 800b1a6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_char_desc_cp0 *cp0 = (aci_gatt_write_char_desc_cp0*)(cmd_buffer);
 800b1a8:	f107 0318 	add.w	r3, r7, #24
 800b1ac:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 800b1b0:	f107 0317 	add.w	r3, r7, #23
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800b1be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b1c2:	f107 020e 	add.w	r2, r7, #14
 800b1c6:	8812      	ldrh	r2, [r2, #0]
 800b1c8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b1ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b1ce:	3302      	adds	r3, #2
 800b1d0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attr_Handle = htob(Attr_Handle, 2);
 800b1d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b1d8:	f107 020c 	add.w	r2, r7, #12
 800b1dc:	8812      	ldrh	r2, [r2, #0]
 800b1de:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800b1e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b1e4:	3302      	adds	r3, #2
 800b1e6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attribute_Val_Length = htob(Attribute_Val_Length, 1);
 800b1ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b1ee:	f107 020b 	add.w	r2, r7, #11
 800b1f2:	7812      	ldrb	r2, [r2, #0]
 800b1f4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800b1f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy((void *) &cp0->Attribute_Val, (const void *) Attribute_Val, Attribute_Val_Length);
 800b200:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b204:	1d58      	adds	r0, r3, #5
 800b206:	f107 030b 	add.w	r3, r7, #11
 800b20a:	781a      	ldrb	r2, [r3, #0]
 800b20c:	1d3b      	adds	r3, r7, #4
 800b20e:	6819      	ldr	r1, [r3, #0]
 800b210:	f000 fa39 	bl	800b686 <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 800b214:	f107 030b 	add.w	r3, r7, #11
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800b21e:	4413      	add	r3, r2
 800b220:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b224:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b228:	2218      	movs	r2, #24
 800b22a:	2100      	movs	r1, #0
 800b22c:	4618      	mov	r0, r3
 800b22e:	f000 fa3a 	bl	800b6a6 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b232:	233f      	movs	r3, #63	; 0x3f
 800b234:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x121;
 800b238:	f240 1321 	movw	r3, #289	; 0x121
 800b23c:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 800b240:	230f      	movs	r3, #15
 800b242:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 800b246:	f107 0318 	add.w	r3, r7, #24
 800b24a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800b24e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b252:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 800b256:	f107 0317 	add.w	r3, r7, #23
 800b25a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 800b25e:	2301      	movs	r3, #1
 800b260:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800b264:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b268:	2100      	movs	r1, #0
 800b26a:	4618      	mov	r0, r3
 800b26c:	f000 fbd6 	bl	800ba1c <hci_send_req>
 800b270:	4603      	mov	r3, r0
 800b272:	2b00      	cmp	r3, #0
 800b274:	da01      	bge.n	800b27a <aci_gatt_write_char_desc+0xfa>
    return BLE_STATUS_TIMEOUT;
 800b276:	23ff      	movs	r3, #255	; 0xff
 800b278:	e009      	b.n	800b28e <aci_gatt_write_char_desc+0x10e>
  if (status) 
 800b27a:	f107 0317 	add.w	r3, r7, #23
 800b27e:	781b      	ldrb	r3, [r3, #0]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d003      	beq.n	800b28c <aci_gatt_write_char_desc+0x10c>
  {
    return status;
 800b284:	f107 0317 	add.w	r3, r7, #23
 800b288:	781b      	ldrb	r3, [r3, #0]
 800b28a:	e000      	b.n	800b28e <aci_gatt_write_char_desc+0x10e>
  }
  return BLE_STATUS_SUCCESS;
 800b28c:	2300      	movs	r3, #0
}
 800b28e:	4618      	mov	r0, r3
 800b290:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800b294:	46bd      	mov	sp, r7
 800b296:	bd90      	pop	{r4, r7, pc}

0800b298 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b0cc      	sub	sp, #304	; 0x130
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	463b      	mov	r3, r7
 800b2a0:	601a      	str	r2, [r3, #0]
 800b2a2:	1dfb      	adds	r3, r7, #7
 800b2a4:	4602      	mov	r2, r0
 800b2a6:	701a      	strb	r2, [r3, #0]
 800b2a8:	1dbb      	adds	r3, r7, #6
 800b2aa:	460a      	mov	r2, r1
 800b2ac:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800b2ae:	f107 0310 	add.w	r3, r7, #16
 800b2b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b2b6:	f107 030f 	add.w	r3, r7, #15
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = htob(Offset, 1);
 800b2c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2c8:	1dfa      	adds	r2, r7, #7
 800b2ca:	7812      	ldrb	r2, [r2, #0]
 800b2cc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b2ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = htob(Length, 1);
 800b2d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2dc:	1dba      	adds	r2, r7, #6
 800b2de:	7812      	ldrb	r2, [r2, #0]
 800b2e0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b2e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b2e6:	3301      	adds	r3, #1
 800b2e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->Value, (const void *) Value, Length);
 800b2ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2f0:	1c98      	adds	r0, r3, #2
 800b2f2:	1dbb      	adds	r3, r7, #6
 800b2f4:	781a      	ldrb	r2, [r3, #0]
 800b2f6:	463b      	mov	r3, r7
 800b2f8:	6819      	ldr	r1, [r3, #0]
 800b2fa:	f000 f9c4 	bl	800b686 <Osal_MemCpy>
  index_input += Length;
 800b2fe:	1dbb      	adds	r3, r7, #6
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b306:	4413      	add	r3, r2
 800b308:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b30c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b310:	2218      	movs	r2, #24
 800b312:	2100      	movs	r1, #0
 800b314:	4618      	mov	r0, r3
 800b316:	f000 f9c6 	bl	800b6a6 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b31a:	233f      	movs	r3, #63	; 0x3f
 800b31c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800b320:	230c      	movs	r3, #12
 800b322:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b326:	f107 0310 	add.w	r3, r7, #16
 800b32a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b32e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b332:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b336:	f107 030f 	add.w	r3, r7, #15
 800b33a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b33e:	2301      	movs	r3, #1
 800b340:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b344:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b348:	2100      	movs	r1, #0
 800b34a:	4618      	mov	r0, r3
 800b34c:	f000 fb66 	bl	800ba1c <hci_send_req>
 800b350:	4603      	mov	r3, r0
 800b352:	2b00      	cmp	r3, #0
 800b354:	da01      	bge.n	800b35a <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 800b356:	23ff      	movs	r3, #255	; 0xff
 800b358:	e009      	b.n	800b36e <aci_hal_write_config_data+0xd6>
  if (status) 
 800b35a:	f107 030f 	add.w	r3, r7, #15
 800b35e:	781b      	ldrb	r3, [r3, #0]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d003      	beq.n	800b36c <aci_hal_write_config_data+0xd4>
  {
    return status;
 800b364:	f107 030f 	add.w	r3, r7, #15
 800b368:	781b      	ldrb	r3, [r3, #0]
 800b36a:	e000      	b.n	800b36e <aci_hal_write_config_data+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 800b36c:	2300      	movs	r3, #0
}
 800b36e:	4618      	mov	r0, r3
 800b370:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}

0800b378 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b0cc      	sub	sp, #304	; 0x130
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	4602      	mov	r2, r0
 800b380:	1dfb      	adds	r3, r7, #7
 800b382:	701a      	strb	r2, [r3, #0]
 800b384:	1dbb      	adds	r3, r7, #6
 800b386:	460a      	mov	r2, r1
 800b388:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800b38a:	f107 0310 	add.w	r3, r7, #16
 800b38e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b392:	f107 030f 	add.w	r3, r7, #15
 800b396:	2200      	movs	r2, #0
 800b398:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b39a:	2300      	movs	r3, #0
 800b39c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = htob(En_High_Power, 1);
 800b3a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b3a4:	1dfa      	adds	r2, r7, #7
 800b3a6:	7812      	ldrb	r2, [r2, #0]
 800b3a8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b3aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = htob(PA_Level, 1);
 800b3b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b3b8:	1dba      	adds	r2, r7, #6
 800b3ba:	7812      	ldrb	r2, [r2, #0]
 800b3bc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b3be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b3c2:	3301      	adds	r3, #1
 800b3c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b3c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b3cc:	2218      	movs	r2, #24
 800b3ce:	2100      	movs	r1, #0
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f000 f968 	bl	800b6a6 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b3d6:	233f      	movs	r3, #63	; 0x3f
 800b3d8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800b3dc:	230f      	movs	r3, #15
 800b3de:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b3e2:	f107 0310 	add.w	r3, r7, #16
 800b3e6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b3ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b3ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b3f2:	f107 030f 	add.w	r3, r7, #15
 800b3f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b400:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b404:	2100      	movs	r1, #0
 800b406:	4618      	mov	r0, r3
 800b408:	f000 fb08 	bl	800ba1c <hci_send_req>
 800b40c:	4603      	mov	r3, r0
 800b40e:	2b00      	cmp	r3, #0
 800b410:	da01      	bge.n	800b416 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 800b412:	23ff      	movs	r3, #255	; 0xff
 800b414:	e009      	b.n	800b42a <aci_hal_set_tx_power_level+0xb2>
  if (status) 
 800b416:	f107 030f 	add.w	r3, r7, #15
 800b41a:	781b      	ldrb	r3, [r3, #0]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d003      	beq.n	800b428 <aci_hal_set_tx_power_level+0xb0>
  {
    return status;
 800b420:	f107 030f 	add.w	r3, r7, #15
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	e000      	b.n	800b42a <aci_hal_set_tx_power_level+0xb2>
  }
  return BLE_STATUS_SUCCESS;
 800b428:	2300      	movs	r3, #0
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}

0800b434 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy((void *) Link_Connection_Handle, (const void *) resp.Link_Connection_Handle, 16);
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask(uint16_t Radio_Activity_Mask)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b0cc      	sub	sp, #304	; 0x130
 800b438:	af00      	add	r7, sp, #0
 800b43a:	4602      	mov	r2, r0
 800b43c:	1dbb      	adds	r3, r7, #6
 800b43e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800b440:	f107 0310 	add.w	r3, r7, #16
 800b444:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b448:	f107 030f 	add.w	r3, r7, #15
 800b44c:	2200      	movs	r2, #0
 800b44e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b450:	2300      	movs	r3, #0
 800b452:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = htob(Radio_Activity_Mask, 2);
 800b456:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b45a:	1dba      	adds	r2, r7, #6
 800b45c:	8812      	ldrh	r2, [r2, #0]
 800b45e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b460:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b464:	3302      	adds	r3, #2
 800b466:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b46a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b46e:	2218      	movs	r2, #24
 800b470:	2100      	movs	r1, #0
 800b472:	4618      	mov	r0, r3
 800b474:	f000 f917 	bl	800b6a6 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b478:	233f      	movs	r3, #63	; 0x3f
 800b47a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800b47e:	2318      	movs	r3, #24
 800b480:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b484:	f107 0310 	add.w	r3, r7, #16
 800b488:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b48c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b490:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b494:	f107 030f 	add.w	r3, r7, #15
 800b498:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b49c:	2301      	movs	r3, #1
 800b49e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b4a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b4a6:	2100      	movs	r1, #0
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f000 fab7 	bl	800ba1c <hci_send_req>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	da01      	bge.n	800b4b8 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 800b4b4:	23ff      	movs	r3, #255	; 0xff
 800b4b6:	e009      	b.n	800b4cc <aci_hal_set_radio_activity_mask+0x98>
  if (status) 
 800b4b8:	f107 030f 	add.w	r3, r7, #15
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d003      	beq.n	800b4ca <aci_hal_set_radio_activity_mask+0x96>
  {
    return status;
 800b4c2:	f107 030f 	add.w	r3, r7, #15
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	e000      	b.n	800b4cc <aci_hal_set_radio_activity_mask+0x98>
  }
  return BLE_STATUS_SUCCESS;
 800b4ca:	2300      	movs	r3, #0
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}

0800b4d6 <hci_reset>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_reset(void)
{
 800b4d6:	b580      	push	{r7, lr}
 800b4d8:	b088      	sub	sp, #32
 800b4da:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b4e0:	f107 0308 	add.w	r3, r7, #8
 800b4e4:	2218      	movs	r2, #24
 800b4e6:	2100      	movs	r1, #0
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f000 f8dc 	bl	800b6a6 <Osal_MemSet>
  rq.ogf = 0x03;
 800b4ee:	2303      	movs	r3, #3
 800b4f0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800b4f2:	2303      	movs	r3, #3
 800b4f4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b4f6:	1dfb      	adds	r3, r7, #7
 800b4f8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800b4fe:	f107 0308 	add.w	r3, r7, #8
 800b502:	2100      	movs	r1, #0
 800b504:	4618      	mov	r0, r3
 800b506:	f000 fa89 	bl	800ba1c <hci_send_req>
 800b50a:	4603      	mov	r3, r0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	da01      	bge.n	800b514 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800b510:	23ff      	movs	r3, #255	; 0xff
 800b512:	e005      	b.n	800b520 <hci_reset+0x4a>
  if (status) 
 800b514:	79fb      	ldrb	r3, [r7, #7]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d001      	beq.n	800b51e <hci_reset+0x48>
  {
    return status;
 800b51a:	79fb      	ldrb	r3, [r7, #7]
 800b51c:	e000      	b.n	800b520 <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800b51e:	2300      	movs	r3, #0
}
 800b520:	4618      	mov	r0, r3
 800b522:	3720      	adds	r7, #32
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}

0800b528 <aci_l2cap_connection_parameter_update_resp>:
                                                      uint16_t Timeout_Multiplier,
                                                      uint16_t Minimum_CE_Length,
                                                      uint16_t Maximum_CE_Length,
                                                      uint8_t Identifier,
                                                      uint8_t Accept)
{
 800b528:	b5b0      	push	{r4, r5, r7, lr}
 800b52a:	b0cc      	sub	sp, #304	; 0x130
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	4605      	mov	r5, r0
 800b530:	460c      	mov	r4, r1
 800b532:	4610      	mov	r0, r2
 800b534:	4619      	mov	r1, r3
 800b536:	1dbb      	adds	r3, r7, #6
 800b538:	462a      	mov	r2, r5
 800b53a:	801a      	strh	r2, [r3, #0]
 800b53c:	1d3b      	adds	r3, r7, #4
 800b53e:	4622      	mov	r2, r4
 800b540:	801a      	strh	r2, [r3, #0]
 800b542:	1cbb      	adds	r3, r7, #2
 800b544:	4602      	mov	r2, r0
 800b546:	801a      	strh	r2, [r3, #0]
 800b548:	463b      	mov	r3, r7
 800b54a:	460a      	mov	r2, r1
 800b54c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_resp_cp0 *cp0 = (aci_l2cap_connection_parameter_update_resp_cp0*)(cmd_buffer);
 800b54e:	f107 0310 	add.w	r3, r7, #16
 800b552:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b556:	f107 030f 	add.w	r3, r7, #15
 800b55a:	2200      	movs	r2, #0
 800b55c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b55e:	2300      	movs	r3, #0
 800b560:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800b564:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b568:	1dba      	adds	r2, r7, #6
 800b56a:	8812      	ldrh	r2, [r2, #0]
 800b56c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b56e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b572:	3302      	adds	r3, #2
 800b574:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = htob(Conn_Interval_Min, 2);
 800b578:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b57c:	1d3a      	adds	r2, r7, #4
 800b57e:	8812      	ldrh	r2, [r2, #0]
 800b580:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800b582:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b586:	3302      	adds	r3, #2
 800b588:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = htob(Conn_Interval_Max, 2);
 800b58c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b590:	1cba      	adds	r2, r7, #2
 800b592:	8812      	ldrh	r2, [r2, #0]
 800b594:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800b596:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b59a:	3302      	adds	r3, #2
 800b59c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Slave_latency = htob(Slave_latency, 2);
 800b5a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5a4:	463a      	mov	r2, r7
 800b5a6:	8812      	ldrh	r2, [r2, #0]
 800b5a8:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 800b5aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b5ae:	3302      	adds	r3, #2
 800b5b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = htob(Timeout_Multiplier, 2);
 800b5b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5b8:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 800b5bc:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 800b5be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b5c2:	3302      	adds	r3, #2
 800b5c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Minimum_CE_Length = htob(Minimum_CE_Length, 2);
 800b5c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5cc:	f8b7 2144 	ldrh.w	r2, [r7, #324]	; 0x144
 800b5d0:	815a      	strh	r2, [r3, #10]
  index_input += 2;
 800b5d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b5d6:	3302      	adds	r3, #2
 800b5d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Maximum_CE_Length = htob(Maximum_CE_Length, 2);
 800b5dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5e0:	f8b7 2148 	ldrh.w	r2, [r7, #328]	; 0x148
 800b5e4:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 800b5e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b5ea:	3302      	adds	r3, #2
 800b5ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identifier = htob(Identifier, 1);
 800b5f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5f4:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800b5f8:	739a      	strb	r2, [r3, #14]
  index_input += 1;
 800b5fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b5fe:	3301      	adds	r3, #1
 800b600:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Accept = htob(Accept, 1);
 800b604:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b608:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800b60c:	73da      	strb	r2, [r3, #15]
  index_input += 1;
 800b60e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b612:	3301      	adds	r3, #1
 800b614:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b618:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b61c:	2218      	movs	r2, #24
 800b61e:	2100      	movs	r1, #0
 800b620:	4618      	mov	r0, r3
 800b622:	f000 f840 	bl	800b6a6 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b626:	233f      	movs	r3, #63	; 0x3f
 800b628:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x182;
 800b62c:	f44f 73c1 	mov.w	r3, #386	; 0x182
 800b630:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b634:	f107 0310 	add.w	r3, r7, #16
 800b638:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b63c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b640:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b644:	f107 030f 	add.w	r3, r7, #15
 800b648:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b64c:	2301      	movs	r3, #1
 800b64e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b652:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b656:	2100      	movs	r1, #0
 800b658:	4618      	mov	r0, r3
 800b65a:	f000 f9df 	bl	800ba1c <hci_send_req>
 800b65e:	4603      	mov	r3, r0
 800b660:	2b00      	cmp	r3, #0
 800b662:	da01      	bge.n	800b668 <aci_l2cap_connection_parameter_update_resp+0x140>
    return BLE_STATUS_TIMEOUT;
 800b664:	23ff      	movs	r3, #255	; 0xff
 800b666:	e009      	b.n	800b67c <aci_l2cap_connection_parameter_update_resp+0x154>
  if (status) 
 800b668:	f107 030f 	add.w	r3, r7, #15
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d003      	beq.n	800b67a <aci_l2cap_connection_parameter_update_resp+0x152>
  {
    return status;
 800b672:	f107 030f 	add.w	r3, r7, #15
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	e000      	b.n	800b67c <aci_l2cap_connection_parameter_update_resp+0x154>
  }
  return BLE_STATUS_SUCCESS;
 800b67a:	2300      	movs	r3, #0
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b682:	46bd      	mov	sp, r7
 800b684:	bdb0      	pop	{r4, r5, r7, pc}

0800b686 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800b686:	b580      	push	{r7, lr}
 800b688:	b084      	sub	sp, #16
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	60f8      	str	r0, [r7, #12]
 800b68e:	60b9      	str	r1, [r7, #8]
 800b690:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800b692:	687a      	ldr	r2, [r7, #4]
 800b694:	68b9      	ldr	r1, [r7, #8]
 800b696:	68f8      	ldr	r0, [r7, #12]
 800b698:	f002 fd82 	bl	800e1a0 <memcpy>
 800b69c:	4603      	mov	r3, r0
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3710      	adds	r7, #16
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}

0800b6a6 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800b6a6:	b580      	push	{r7, lr}
 800b6a8:	b084      	sub	sp, #16
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	60f8      	str	r0, [r7, #12]
 800b6ae:	60b9      	str	r1, [r7, #8]
 800b6b0:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800b6b2:	687a      	ldr	r2, [r7, #4]
 800b6b4:	68b9      	ldr	r1, [r7, #8]
 800b6b6:	68f8      	ldr	r0, [r7, #12]
 800b6b8:	f002 fd7d 	bl	800e1b6 <memset>
 800b6bc:	4603      	mov	r3, r0
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3710      	adds	r7, #16
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}

0800b6c6 <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 800b6c6:	b480      	push	{r7}
 800b6c8:	af00      	add	r7, sp, #0
  return;
 800b6ca:	bf00      	nop
}
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d2:	4770      	bx	lr

0800b6d4 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	af00      	add	r7, sp, #0
  return;
 800b6d8:	bf00      	nop
}
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e0:	4770      	bx	lr

0800b6e2 <DIS_Init>:
__weak void DIS_Init( void )
{
 800b6e2:	b480      	push	{r7}
 800b6e4:	af00      	add	r7, sp, #0
  return;
 800b6e6:	bf00      	nop
}
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ee:	4770      	bx	lr

0800b6f0 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	af00      	add	r7, sp, #0
  return;
 800b6f4:	bf00      	nop
}
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fc:	4770      	bx	lr

0800b6fe <HIDS_Init>:
__weak void HIDS_Init( void )
{
 800b6fe:	b480      	push	{r7}
 800b700:	af00      	add	r7, sp, #0
  return;
 800b702:	bf00      	nop
}
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr

0800b70c <HRS_Init>:
__weak void HRS_Init( void )
{
 800b70c:	b480      	push	{r7}
 800b70e:	af00      	add	r7, sp, #0
  return;
 800b710:	bf00      	nop
}
 800b712:	46bd      	mov	sp, r7
 800b714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b718:	4770      	bx	lr

0800b71a <HTS_Init>:
__weak void HTS_Init( void )
{
 800b71a:	b480      	push	{r7}
 800b71c:	af00      	add	r7, sp, #0
  return;
 800b71e:	bf00      	nop
}
 800b720:	46bd      	mov	sp, r7
 800b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b726:	4770      	bx	lr

0800b728 <IAS_Init>:
__weak void IAS_Init( void )
{
 800b728:	b480      	push	{r7}
 800b72a:	af00      	add	r7, sp, #0
  return;
 800b72c:	bf00      	nop
}
 800b72e:	46bd      	mov	sp, r7
 800b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b734:	4770      	bx	lr

0800b736 <LLS_Init>:
__weak void LLS_Init( void )
{
 800b736:	b480      	push	{r7}
 800b738:	af00      	add	r7, sp, #0
  return;
 800b73a:	bf00      	nop
}
 800b73c:	46bd      	mov	sp, r7
 800b73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b742:	4770      	bx	lr

0800b744 <TPS_Init>:
__weak void TPS_Init( void )
{
 800b744:	b480      	push	{r7}
 800b746:	af00      	add	r7, sp, #0
  return;
 800b748:	bf00      	nop
}
 800b74a:	46bd      	mov	sp, r7
 800b74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b750:	4770      	bx	lr

0800b752 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 800b752:	b480      	push	{r7}
 800b754:	af00      	add	r7, sp, #0
  return;
 800b756:	bf00      	nop
}
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr

0800b760 <P2PS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
 800b760:	b480      	push	{r7}
 800b762:	af00      	add	r7, sp, #0
  return;
 800b764:	bf00      	nop
}
 800b766:	46bd      	mov	sp, r7
 800b768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76c:	4770      	bx	lr

0800b76e <OTAS_STM_Init>:
__weak void OTAS_STM_Init( void )
{
 800b76e:	b480      	push	{r7}
 800b770:	af00      	add	r7, sp, #0
  return;
 800b772:	bf00      	nop
}
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr

0800b77c <MESH_Init>:
__weak void MESH_Init( void )
{
 800b77c:	b480      	push	{r7}
 800b77e:	af00      	add	r7, sp, #0
  return;
 800b780:	bf00      	nop
}
 800b782:	46bd      	mov	sp, r7
 800b784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b788:	4770      	bx	lr

0800b78a <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 800b78a:	b480      	push	{r7}
 800b78c:	af00      	add	r7, sp, #0
  return;
 800b78e:	bf00      	nop
}
 800b790:	46bd      	mov	sp, r7
 800b792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b796:	4770      	bx	lr

0800b798 <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 800b798:	b480      	push	{r7}
 800b79a:	af00      	add	r7, sp, #0
  return;
 800b79c:	bf00      	nop
}
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a4:	4770      	bx	lr
	...

0800b7a8 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800b7ac:	4b04      	ldr	r3, [pc, #16]	; (800b7c0 <SVCCTL_Init+0x18>)
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800b7b2:	4b04      	ldr	r3, [pc, #16]	; (800b7c4 <SVCCTL_Init+0x1c>)
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	711a      	strb	r2, [r3, #4]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800b7b8:	f000 f806 	bl	800b7c8 <SVCCTL_SvcInit>

  return;
 800b7bc:	bf00      	nop
}
 800b7be:	bd80      	pop	{r7, pc}
 800b7c0:	20000228 	.word	0x20000228
 800b7c4:	20000248 	.word	0x20000248

0800b7c8 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	af00      	add	r7, sp, #0
  BLS_Init();
 800b7cc:	f7ff ff7b 	bl	800b6c6 <BLS_Init>

  CRS_STM_Init();
 800b7d0:	f7ff ff80 	bl	800b6d4 <CRS_STM_Init>

  DIS_Init();
 800b7d4:	f7ff ff85 	bl	800b6e2 <DIS_Init>

  EDS_STM_Init();
 800b7d8:	f7ff ff8a 	bl	800b6f0 <EDS_STM_Init>

  HIDS_Init();
 800b7dc:	f7ff ff8f 	bl	800b6fe <HIDS_Init>

  HRS_Init();
 800b7e0:	f7ff ff94 	bl	800b70c <HRS_Init>

  HTS_Init();
 800b7e4:	f7ff ff99 	bl	800b71a <HTS_Init>

  IAS_Init();
 800b7e8:	f7ff ff9e 	bl	800b728 <IAS_Init>

  LLS_Init();
 800b7ec:	f7ff ffa3 	bl	800b736 <LLS_Init>

  TPS_Init();
 800b7f0:	f7ff ffa8 	bl	800b744 <TPS_Init>

  MOTENV_STM_Init();
 800b7f4:	f7ff ffad 	bl	800b752 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800b7f8:	f7ff ffb2 	bl	800b760 <P2PS_STM_Init>

  OTAS_STM_Init();
 800b7fc:	f7ff ffb7 	bl	800b76e <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800b800:	f7ff ffc3 	bl	800b78a <BVOPUS_STM_Init>

  MESH_Init();
 800b804:	f7ff ffba 	bl	800b77c <MESH_Init>

  SVCCTL_InitCustomSvc();
 800b808:	f7ff ffc6 	bl	800b798 <SVCCTL_InitCustomSvc>
  
  return;
 800b80c:	bf00      	nop
}
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <SVCCTL_RegisterCltHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterCltHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Client_Event_Handler )
{
 800b810:	b480      	push	{r7}
 800b812:	b083      	sub	sp, #12
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
  SVCCTL_CltHandler.SVCCTL_CltHandlerTable[SVCCTL_CltHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Client_Event_Handler;
 800b818:	4b09      	ldr	r3, [pc, #36]	; (800b840 <SVCCTL_RegisterCltHandler+0x30>)
 800b81a:	791b      	ldrb	r3, [r3, #4]
 800b81c:	4619      	mov	r1, r3
 800b81e:	4a08      	ldr	r2, [pc, #32]	; (800b840 <SVCCTL_RegisterCltHandler+0x30>)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif
  SVCCTL_CltHandler.NbreOfRegisteredHandler++;
 800b826:	4b06      	ldr	r3, [pc, #24]	; (800b840 <SVCCTL_RegisterCltHandler+0x30>)
 800b828:	791b      	ldrb	r3, [r3, #4]
 800b82a:	3301      	adds	r3, #1
 800b82c:	b2da      	uxtb	r2, r3
 800b82e:	4b04      	ldr	r3, [pc, #16]	; (800b840 <SVCCTL_RegisterCltHandler+0x30>)
 800b830:	711a      	strb	r2, [r3, #4]

  return;
 800b832:	bf00      	nop
}
 800b834:	370c      	adds	r7, #12
 800b836:	46bd      	mov	sp, r7
 800b838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83c:	4770      	bx	lr
 800b83e:	bf00      	nop
 800b840:	20000248 	.word	0x20000248

0800b844 <SVCCTL_UserEvtRx>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b086      	sub	sp, #24
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	3301      	adds	r3, #1
 800b850:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800b852:	2300      	movs	r3, #0
 800b854:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	2bff      	cmp	r3, #255	; 0xff
 800b85c:	d000      	beq.n	800b860 <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800b85e:	e03f      	b.n	800b8e0 <SVCCTL_UserEvtRx+0x9c>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	3302      	adds	r3, #2
 800b864:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	881b      	ldrh	r3, [r3, #0]
 800b86a:	b29b      	uxth	r3, r3
 800b86c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b870:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b874:	d000      	beq.n	800b878 <SVCCTL_UserEvtRx+0x34>
          break;
 800b876:	e032      	b.n	800b8de <SVCCTL_UserEvtRx+0x9a>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800b878:	2300      	movs	r3, #0
 800b87a:	757b      	strb	r3, [r7, #21]
 800b87c:	e00d      	b.n	800b89a <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800b87e:	7d7b      	ldrb	r3, [r7, #21]
 800b880:	4a25      	ldr	r2, [pc, #148]	; (800b918 <SVCCTL_UserEvtRx+0xd4>)
 800b882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	4798      	blx	r3
 800b88a:	4603      	mov	r3, r0
 800b88c:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 800b88e:	7dfb      	ldrb	r3, [r7, #23]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d108      	bne.n	800b8a6 <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800b894:	7d7b      	ldrb	r3, [r7, #21]
 800b896:	3301      	adds	r3, #1
 800b898:	757b      	strb	r3, [r7, #21]
 800b89a:	4b1f      	ldr	r3, [pc, #124]	; (800b918 <SVCCTL_UserEvtRx+0xd4>)
 800b89c:	7f1b      	ldrb	r3, [r3, #28]
 800b89e:	7d7a      	ldrb	r2, [r7, #21]
 800b8a0:	429a      	cmp	r2, r3
 800b8a2:	d3ec      	bcc.n	800b87e <SVCCTL_UserEvtRx+0x3a>
 800b8a4:	e000      	b.n	800b8a8 <SVCCTL_UserEvtRx+0x64>
              break;
 800b8a6:	bf00      	nop
          event_notification_status = SVCCTL_EvtNotAck;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	75fb      	strb	r3, [r7, #23]
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	757b      	strb	r3, [r7, #21]
 800b8b0:	e00d      	b.n	800b8ce <SVCCTL_UserEvtRx+0x8a>
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 800b8b2:	7d7b      	ldrb	r3, [r7, #21]
 800b8b4:	4a19      	ldr	r2, [pc, #100]	; (800b91c <SVCCTL_UserEvtRx+0xd8>)
 800b8b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	4798      	blx	r3
 800b8be:	4603      	mov	r3, r0
 800b8c0:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 800b8c2:	7dfb      	ldrb	r3, [r7, #23]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d108      	bne.n	800b8da <SVCCTL_UserEvtRx+0x96>
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 800b8c8:	7d7b      	ldrb	r3, [r7, #21]
 800b8ca:	3301      	adds	r3, #1
 800b8cc:	757b      	strb	r3, [r7, #21]
 800b8ce:	4b13      	ldr	r3, [pc, #76]	; (800b91c <SVCCTL_UserEvtRx+0xd8>)
 800b8d0:	791b      	ldrb	r3, [r3, #4]
 800b8d2:	7d7a      	ldrb	r2, [r7, #21]
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d3ec      	bcc.n	800b8b2 <SVCCTL_UserEvtRx+0x6e>
          break;
 800b8d8:	e000      	b.n	800b8dc <SVCCTL_UserEvtRx+0x98>
              break;
 800b8da:	bf00      	nop
          break;
 800b8dc:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 800b8de:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800b8e0:	7dfb      	ldrb	r3, [r7, #23]
 800b8e2:	2b01      	cmp	r3, #1
 800b8e4:	d009      	beq.n	800b8fa <SVCCTL_UserEvtRx+0xb6>
 800b8e6:	2b02      	cmp	r3, #2
 800b8e8:	d00a      	beq.n	800b900 <SVCCTL_UserEvtRx+0xbc>
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d10b      	bne.n	800b906 <SVCCTL_UserEvtRx+0xc2>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f000 fdfa 	bl	800c4e8 <SVCCTL_App_Notification>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	75bb      	strb	r3, [r7, #22]
      break;
 800b8f8:	e008      	b.n	800b90c <SVCCTL_UserEvtRx+0xc8>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	75bb      	strb	r3, [r7, #22]
      break;
 800b8fe:	e005      	b.n	800b90c <SVCCTL_UserEvtRx+0xc8>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800b900:	2300      	movs	r3, #0
 800b902:	75bb      	strb	r3, [r7, #22]
      break;
 800b904:	e002      	b.n	800b90c <SVCCTL_UserEvtRx+0xc8>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800b906:	2301      	movs	r3, #1
 800b908:	75bb      	strb	r3, [r7, #22]
      break;
 800b90a:	bf00      	nop
  }

  return (return_status);
 800b90c:	7dbb      	ldrb	r3, [r7, #22]
}
 800b90e:	4618      	mov	r0, r3
 800b910:	3718      	adds	r7, #24
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}
 800b916:	bf00      	nop
 800b918:	20000228 	.word	0x20000228
 800b91c:	20000248 	.word	0x20000248

0800b920 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b088      	sub	sp, #32
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800b928:	f107 030c 	add.w	r3, r7, #12
 800b92c:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800b934:	69fb      	ldr	r3, [r7, #28]
 800b936:	2121      	movs	r1, #33	; 0x21
 800b938:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800b93c:	f000 fa00 	bl	800bd40 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800b940:	69fb      	ldr	r3, [r7, #28]
 800b942:	330b      	adds	r3, #11
 800b944:	78db      	ldrb	r3, [r3, #3]
}
 800b946:	4618      	mov	r0, r3
 800b948:	3720      	adds	r7, #32
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}
	...

0800b950 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b082      	sub	sp, #8
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	685b      	ldr	r3, [r3, #4]
 800b95e:	4a08      	ldr	r2, [pc, #32]	; (800b980 <hci_init+0x30>)
 800b960:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800b962:	4a08      	ldr	r2, [pc, #32]	; (800b984 <hci_init+0x34>)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800b968:	4806      	ldr	r0, [pc, #24]	; (800b984 <hci_init+0x34>)
 800b96a:	f000 f96f 	bl	800bc4c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	4618      	mov	r0, r3
 800b974:	f000 f8d0 	bl	800bb18 <TlInit>

  return;
 800b978:	bf00      	nop
}
 800b97a:	3708      	adds	r7, #8
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}
 800b980:	20000418 	.word	0x20000418
 800b984:	200003f0 	.word	0x200003f0

0800b988 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b084      	sub	sp, #16
 800b98c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800b98e:	4820      	ldr	r0, [pc, #128]	; (800ba10 <hci_user_evt_proc+0x88>)
 800b990:	f000 fc92 	bl	800c2b8 <LST_is_empty>
 800b994:	4603      	mov	r3, r0
 800b996:	2b00      	cmp	r3, #0
 800b998:	d128      	bne.n	800b9ec <hci_user_evt_proc+0x64>
 800b99a:	4b1e      	ldr	r3, [pc, #120]	; (800ba14 <hci_user_evt_proc+0x8c>)
 800b99c:	781b      	ldrb	r3, [r3, #0]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d024      	beq.n	800b9ec <hci_user_evt_proc+0x64>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800b9a2:	f107 030c 	add.w	r3, r7, #12
 800b9a6:	4619      	mov	r1, r3
 800b9a8:	4819      	ldr	r0, [pc, #100]	; (800ba10 <hci_user_evt_proc+0x88>)
 800b9aa:	f000 fd0c 	bl	800c3c6 <LST_remove_head>

    UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800b9ae:	4b19      	ldr	r3, [pc, #100]	; (800ba14 <hci_user_evt_proc+0x8c>)
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	701a      	strb	r2, [r3, #0]

    if (hciContext.UserEvtRx != NULL)
 800b9b4:	4b18      	ldr	r3, [pc, #96]	; (800ba18 <hci_user_evt_proc+0x90>)
 800b9b6:	69db      	ldr	r3, [r3, #28]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d009      	beq.n	800b9d0 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	60bb      	str	r3, [r7, #8]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800b9c0:	4b15      	ldr	r3, [pc, #84]	; (800ba18 <hci_user_evt_proc+0x90>)
 800b9c2:	69db      	ldr	r3, [r3, #28]
 800b9c4:	1d3a      	adds	r2, r7, #4
 800b9c6:	4610      	mov	r0, r2
 800b9c8:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800b9ca:	793a      	ldrb	r2, [r7, #4]
 800b9cc:	4b11      	ldr	r3, [pc, #68]	; (800ba14 <hci_user_evt_proc+0x8c>)
 800b9ce:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800b9d0:	4b10      	ldr	r3, [pc, #64]	; (800ba14 <hci_user_evt_proc+0x8c>)
 800b9d2:	781b      	ldrb	r3, [r3, #0]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d004      	beq.n	800b9e2 <hci_user_evt_proc+0x5a>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f000 fbca 	bl	800c174 <TL_MM_EvtDone>
 800b9e0:	e004      	b.n	800b9ec <hci_user_evt_proc+0x64>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	480a      	ldr	r0, [pc, #40]	; (800ba10 <hci_user_evt_proc+0x88>)
 800b9e8:	f000 fc86 	bl	800c2f8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800b9ec:	4808      	ldr	r0, [pc, #32]	; (800ba10 <hci_user_evt_proc+0x88>)
 800b9ee:	f000 fc63 	bl	800c2b8 <LST_is_empty>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d107      	bne.n	800ba08 <hci_user_evt_proc+0x80>
 800b9f8:	4b06      	ldr	r3, [pc, #24]	; (800ba14 <hci_user_evt_proc+0x8c>)
 800b9fa:	781b      	ldrb	r3, [r3, #0]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d003      	beq.n	800ba08 <hci_user_evt_proc+0x80>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800ba00:	4803      	ldr	r0, [pc, #12]	; (800ba10 <hci_user_evt_proc+0x88>)
 800ba02:	f001 f85b 	bl	800cabc <hci_notify_asynch_evt>
  }


  return;
 800ba06:	bf00      	nop
 800ba08:	bf00      	nop
}
 800ba0a:	3710      	adds	r7, #16
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}
 800ba10:	20000254 	.word	0x20000254
 800ba14:	20000260 	.word	0x20000260
 800ba18:	200003f0 	.word	0x200003f0

0800ba1c <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b088      	sub	sp, #32
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
 800ba24:	460b      	mov	r3, r1
 800ba26:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800ba28:	2000      	movs	r0, #0
 800ba2a:	f000 f8cb 	bl	800bbc4 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	885b      	ldrh	r3, [r3, #2]
 800ba36:	b21b      	sxth	r3, r3
 800ba38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba3c:	b21a      	sxth	r2, r3
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	881b      	ldrh	r3, [r3, #0]
 800ba42:	029b      	lsls	r3, r3, #10
 800ba44:	b21b      	sxth	r3, r3
 800ba46:	4313      	orrs	r3, r2
 800ba48:	b21b      	sxth	r3, r3
 800ba4a:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	68db      	ldr	r3, [r3, #12]
 800ba50:	b2d9      	uxtb	r1, r3
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	689a      	ldr	r2, [r3, #8]
 800ba56:	8bbb      	ldrh	r3, [r7, #28]
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f000 f88d 	bl	800bb78 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800ba5e:	e04e      	b.n	800bafe <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800ba60:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800ba64:	f001 f841 	bl	800caea <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800ba68:	e043      	b.n	800baf2 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800ba6a:	f107 030c 	add.w	r3, r7, #12
 800ba6e:	4619      	mov	r1, r3
 800ba70:	4828      	ldr	r0, [pc, #160]	; (800bb14 <hci_send_req+0xf8>)
 800ba72:	f000 fca8 	bl	800c3c6 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	7a5b      	ldrb	r3, [r3, #9]
 800ba7a:	2b0f      	cmp	r3, #15
 800ba7c:	d114      	bne.n	800baa8 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	330b      	adds	r3, #11
 800ba82:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	885b      	ldrh	r3, [r3, #2]
 800ba88:	b29b      	uxth	r3, r3
 800ba8a:	8bba      	ldrh	r2, [r7, #28]
 800ba8c:	429a      	cmp	r2, r3
 800ba8e:	d104      	bne.n	800ba9a <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	691b      	ldr	r3, [r3, #16]
 800ba94:	693a      	ldr	r2, [r7, #16]
 800ba96:	7812      	ldrb	r2, [r2, #0]
 800ba98:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	785b      	ldrb	r3, [r3, #1]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d027      	beq.n	800baf2 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800baa2:	2301      	movs	r3, #1
 800baa4:	77fb      	strb	r3, [r7, #31]
 800baa6:	e024      	b.n	800baf2 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	330b      	adds	r3, #11
 800baac:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800baae:	69bb      	ldr	r3, [r7, #24]
 800bab0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800bab4:	b29b      	uxth	r3, r3
 800bab6:	8bba      	ldrh	r2, [r7, #28]
 800bab8:	429a      	cmp	r2, r3
 800baba:	d114      	bne.n	800bae6 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	7a9b      	ldrb	r3, [r3, #10]
 800bac0:	3b03      	subs	r3, #3
 800bac2:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	695a      	ldr	r2, [r3, #20]
 800bac8:	7dfb      	ldrb	r3, [r7, #23]
 800baca:	429a      	cmp	r2, r3
 800bacc:	bfa8      	it	ge
 800bace:	461a      	movge	r2, r3
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6918      	ldr	r0, [r3, #16]
 800bad8:	69bb      	ldr	r3, [r7, #24]
 800bada:	1cd9      	adds	r1, r3, #3
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	695b      	ldr	r3, [r3, #20]
 800bae0:	461a      	mov	r2, r3
 800bae2:	f002 fb5d 	bl	800e1a0 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800bae6:	69bb      	ldr	r3, [r7, #24]
 800bae8:	781b      	ldrb	r3, [r3, #0]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d001      	beq.n	800baf2 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800baee:	2301      	movs	r3, #1
 800baf0:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800baf2:	4808      	ldr	r0, [pc, #32]	; (800bb14 <hci_send_req+0xf8>)
 800baf4:	f000 fbe0 	bl	800c2b8 <LST_is_empty>
 800baf8:	4603      	mov	r3, r0
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d0b5      	beq.n	800ba6a <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800bafe:	7ffb      	ldrb	r3, [r7, #31]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d0ad      	beq.n	800ba60 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800bb04:	2001      	movs	r0, #1
 800bb06:	f000 f85d 	bl	800bbc4 <NotifyCmdStatus>

  return 0;
 800bb0a:	2300      	movs	r3, #0
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3720      	adds	r7, #32
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}
 800bb14:	20000410 	.word	0x20000410

0800bb18 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b086      	sub	sp, #24
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800bb20:	480f      	ldr	r0, [pc, #60]	; (800bb60 <TlInit+0x48>)
 800bb22:	f000 fbb9 	bl	800c298 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800bb26:	4a0f      	ldr	r2, [pc, #60]	; (800bb64 <TlInit+0x4c>)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800bb2c:	480e      	ldr	r0, [pc, #56]	; (800bb68 <TlInit+0x50>)
 800bb2e:	f000 fbb3 	bl	800c298 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800bb32:	4b0e      	ldr	r3, [pc, #56]	; (800bb6c <TlInit+0x54>)
 800bb34:	2201      	movs	r2, #1
 800bb36:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800bb38:	4b0d      	ldr	r3, [pc, #52]	; (800bb70 <TlInit+0x58>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d00a      	beq.n	800bb56 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800bb44:	4b0b      	ldr	r3, [pc, #44]	; (800bb74 <TlInit+0x5c>)
 800bb46:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800bb48:	4b09      	ldr	r3, [pc, #36]	; (800bb70 <TlInit+0x58>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f107 0208 	add.w	r2, r7, #8
 800bb50:	4610      	mov	r0, r2
 800bb52:	4798      	blx	r3
  }

  return;
 800bb54:	bf00      	nop
 800bb56:	bf00      	nop
}
 800bb58:	3718      	adds	r7, #24
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}
 800bb5e:	bf00      	nop
 800bb60:	20000410 	.word	0x20000410
 800bb64:	2000025c 	.word	0x2000025c
 800bb68:	20000254 	.word	0x20000254
 800bb6c:	20000260 	.word	0x20000260
 800bb70:	200003f0 	.word	0x200003f0
 800bb74:	0800bc05 	.word	0x0800bc05

0800bb78 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b082      	sub	sp, #8
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	4603      	mov	r3, r0
 800bb80:	603a      	str	r2, [r7, #0]
 800bb82:	80fb      	strh	r3, [r7, #6]
 800bb84:	460b      	mov	r3, r1
 800bb86:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800bb88:	4b0c      	ldr	r3, [pc, #48]	; (800bbbc <SendCmd+0x44>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	88fa      	ldrh	r2, [r7, #6]
 800bb8e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800bb92:	4b0a      	ldr	r3, [pc, #40]	; (800bbbc <SendCmd+0x44>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	797a      	ldrb	r2, [r7, #5]
 800bb98:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800bb9a:	4b08      	ldr	r3, [pc, #32]	; (800bbbc <SendCmd+0x44>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	330c      	adds	r3, #12
 800bba0:	797a      	ldrb	r2, [r7, #5]
 800bba2:	6839      	ldr	r1, [r7, #0]
 800bba4:	4618      	mov	r0, r3
 800bba6:	f002 fafb 	bl	800e1a0 <memcpy>

  hciContext.io.Send(0,0);
 800bbaa:	4b05      	ldr	r3, [pc, #20]	; (800bbc0 <SendCmd+0x48>)
 800bbac:	691b      	ldr	r3, [r3, #16]
 800bbae:	2100      	movs	r1, #0
 800bbb0:	2000      	movs	r0, #0
 800bbb2:	4798      	blx	r3

  return;
 800bbb4:	bf00      	nop
}
 800bbb6:	3708      	adds	r7, #8
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}
 800bbbc:	2000025c 	.word	0x2000025c
 800bbc0:	200003f0 	.word	0x200003f0

0800bbc4 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	4603      	mov	r3, r0
 800bbcc:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800bbce:	79fb      	ldrb	r3, [r7, #7]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d108      	bne.n	800bbe6 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800bbd4:	4b0a      	ldr	r3, [pc, #40]	; (800bc00 <NotifyCmdStatus+0x3c>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d00d      	beq.n	800bbf8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800bbdc:	4b08      	ldr	r3, [pc, #32]	; (800bc00 <NotifyCmdStatus+0x3c>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	2000      	movs	r0, #0
 800bbe2:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800bbe4:	e008      	b.n	800bbf8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800bbe6:	4b06      	ldr	r3, [pc, #24]	; (800bc00 <NotifyCmdStatus+0x3c>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d004      	beq.n	800bbf8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800bbee:	4b04      	ldr	r3, [pc, #16]	; (800bc00 <NotifyCmdStatus+0x3c>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	2001      	movs	r0, #1
 800bbf4:	4798      	blx	r3
  return;
 800bbf6:	bf00      	nop
 800bbf8:	bf00      	nop
}
 800bbfa:	3708      	adds	r7, #8
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}
 800bc00:	20000418 	.word	0x20000418

0800bc04 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b082      	sub	sp, #8
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	7a5b      	ldrb	r3, [r3, #9]
 800bc10:	2b0f      	cmp	r3, #15
 800bc12:	d003      	beq.n	800bc1c <TlEvtReceived+0x18>
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	7a5b      	ldrb	r3, [r3, #9]
 800bc18:	2b0e      	cmp	r3, #14
 800bc1a:	d107      	bne.n	800bc2c <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800bc1c:	6879      	ldr	r1, [r7, #4]
 800bc1e:	4809      	ldr	r0, [pc, #36]	; (800bc44 <TlEvtReceived+0x40>)
 800bc20:	f000 fb8e 	bl	800c340 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800bc24:	2000      	movs	r0, #0
 800bc26:	f000 ff55 	bl	800cad4 <hci_cmd_resp_release>
 800bc2a:	e006      	b.n	800bc3a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800bc2c:	6879      	ldr	r1, [r7, #4]
 800bc2e:	4806      	ldr	r0, [pc, #24]	; (800bc48 <TlEvtReceived+0x44>)
 800bc30:	f000 fb86 	bl	800c340 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800bc34:	4804      	ldr	r0, [pc, #16]	; (800bc48 <TlEvtReceived+0x44>)
 800bc36:	f000 ff41 	bl	800cabc <hci_notify_asynch_evt>
  }

  return;
 800bc3a:	bf00      	nop
}
 800bc3c:	3708      	adds	r7, #8
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	20000410 	.word	0x20000410
 800bc48:	20000254 	.word	0x20000254

0800bc4c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b083      	sub	sp, #12
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	4a05      	ldr	r2, [pc, #20]	; (800bc6c <hci_register_io_bus+0x20>)
 800bc58:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	4a04      	ldr	r2, [pc, #16]	; (800bc70 <hci_register_io_bus+0x24>)
 800bc5e:	611a      	str	r2, [r3, #16]

  return;
 800bc60:	bf00      	nop
}
 800bc62:	370c      	adds	r7, #12
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr
 800bc6c:	0800bf4d 	.word	0x0800bf4d
 800bc70:	0800bfb5 	.word	0x0800bfb5

0800bc74 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b082      	sub	sp, #8
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	685b      	ldr	r3, [r3, #4]
 800bc82:	4a08      	ldr	r2, [pc, #32]	; (800bca4 <shci_init+0x30>)
 800bc84:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800bc86:	4a08      	ldr	r2, [pc, #32]	; (800bca8 <shci_init+0x34>)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800bc8c:	4806      	ldr	r0, [pc, #24]	; (800bca8 <shci_init+0x34>)
 800bc8e:	f000 f90d 	bl	800beac <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	4618      	mov	r0, r3
 800bc98:	f000 f890 	bl	800bdbc <TlInit>

  return;
 800bc9c:	bf00      	nop
}
 800bc9e:	3708      	adds	r7, #8
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}
 800bca4:	2000043c 	.word	0x2000043c
 800bca8:	2000041c 	.word	0x2000041c

0800bcac <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b084      	sub	sp, #16
 800bcb0:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800bcb2:	4820      	ldr	r0, [pc, #128]	; (800bd34 <shci_user_evt_proc+0x88>)
 800bcb4:	f000 fb00 	bl	800c2b8 <LST_is_empty>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d128      	bne.n	800bd10 <shci_user_evt_proc+0x64>
 800bcbe:	4b1e      	ldr	r3, [pc, #120]	; (800bd38 <shci_user_evt_proc+0x8c>)
 800bcc0:	781b      	ldrb	r3, [r3, #0]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d024      	beq.n	800bd10 <shci_user_evt_proc+0x64>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800bcc6:	f107 030c 	add.w	r3, r7, #12
 800bcca:	4619      	mov	r1, r3
 800bccc:	4819      	ldr	r0, [pc, #100]	; (800bd34 <shci_user_evt_proc+0x88>)
 800bcce:	f000 fb7a 	bl	800c3c6 <LST_remove_head>

    SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800bcd2:	4b19      	ldr	r3, [pc, #100]	; (800bd38 <shci_user_evt_proc+0x8c>)
 800bcd4:	2201      	movs	r2, #1
 800bcd6:	701a      	strb	r2, [r3, #0]

    if (shciContext.UserEvtRx != NULL)
 800bcd8:	4b18      	ldr	r3, [pc, #96]	; (800bd3c <shci_user_evt_proc+0x90>)
 800bcda:	69db      	ldr	r3, [r3, #28]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d009      	beq.n	800bcf4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	60bb      	str	r3, [r7, #8]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800bce4:	4b15      	ldr	r3, [pc, #84]	; (800bd3c <shci_user_evt_proc+0x90>)
 800bce6:	69db      	ldr	r3, [r3, #28]
 800bce8:	1d3a      	adds	r2, r7, #4
 800bcea:	4610      	mov	r0, r2
 800bcec:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800bcee:	793a      	ldrb	r2, [r7, #4]
 800bcf0:	4b11      	ldr	r3, [pc, #68]	; (800bd38 <shci_user_evt_proc+0x8c>)
 800bcf2:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800bcf4:	4b10      	ldr	r3, [pc, #64]	; (800bd38 <shci_user_evt_proc+0x8c>)
 800bcf6:	781b      	ldrb	r3, [r3, #0]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d004      	beq.n	800bd06 <shci_user_evt_proc+0x5a>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f000 fa38 	bl	800c174 <TL_MM_EvtDone>
 800bd04:	e004      	b.n	800bd10 <shci_user_evt_proc+0x64>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	4619      	mov	r1, r3
 800bd0a:	480a      	ldr	r0, [pc, #40]	; (800bd34 <shci_user_evt_proc+0x88>)
 800bd0c:	f000 faf4 	bl	800c2f8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800bd10:	4808      	ldr	r0, [pc, #32]	; (800bd34 <shci_user_evt_proc+0x88>)
 800bd12:	f000 fad1 	bl	800c2b8 <LST_is_empty>
 800bd16:	4603      	mov	r3, r0
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d107      	bne.n	800bd2c <shci_user_evt_proc+0x80>
 800bd1c:	4b06      	ldr	r3, [pc, #24]	; (800bd38 <shci_user_evt_proc+0x8c>)
 800bd1e:	781b      	ldrb	r3, [r3, #0]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d003      	beq.n	800bd2c <shci_user_evt_proc+0x80>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800bd24:	4803      	ldr	r0, [pc, #12]	; (800bd34 <shci_user_evt_proc+0x88>)
 800bd26:	f7f4 fc47 	bl	80005b8 <shci_notify_asynch_evt>
  }


  return;
 800bd2a:	bf00      	nop
 800bd2c:	bf00      	nop
}
 800bd2e:	3710      	adds	r7, #16
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}
 800bd34:	20000264 	.word	0x20000264
 800bd38:	20000274 	.word	0x20000274
 800bd3c:	2000041c 	.word	0x2000041c

0800bd40 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b084      	sub	sp, #16
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	60ba      	str	r2, [r7, #8]
 800bd48:	607b      	str	r3, [r7, #4]
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	81fb      	strh	r3, [r7, #14]
 800bd4e:	460b      	mov	r3, r1
 800bd50:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800bd52:	2000      	movs	r0, #0
 800bd54:	f000 f864 	bl	800be20 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800bd58:	4b16      	ldr	r3, [pc, #88]	; (800bdb4 <shci_send+0x74>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	89fa      	ldrh	r2, [r7, #14]
 800bd5e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800bd62:	4b14      	ldr	r3, [pc, #80]	; (800bdb4 <shci_send+0x74>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	7b7a      	ldrb	r2, [r7, #13]
 800bd68:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800bd6a:	4b12      	ldr	r3, [pc, #72]	; (800bdb4 <shci_send+0x74>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	330c      	adds	r3, #12
 800bd70:	7b7a      	ldrb	r2, [r7, #13]
 800bd72:	68b9      	ldr	r1, [r7, #8]
 800bd74:	4618      	mov	r0, r3
 800bd76:	f002 fa13 	bl	800e1a0 <memcpy>

  shciContext.io.Send(0,0);
 800bd7a:	4b0f      	ldr	r3, [pc, #60]	; (800bdb8 <shci_send+0x78>)
 800bd7c:	691b      	ldr	r3, [r3, #16]
 800bd7e:	2100      	movs	r1, #0
 800bd80:	2000      	movs	r0, #0
 800bd82:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800bd84:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800bd88:	f7f4 fc2d 	bl	80005e6 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f103 0008 	add.w	r0, r3, #8
 800bd92:	4b08      	ldr	r3, [pc, #32]	; (800bdb4 <shci_send+0x74>)
 800bd94:	6819      	ldr	r1, [r3, #0]
 800bd96:	4b07      	ldr	r3, [pc, #28]	; (800bdb4 <shci_send+0x74>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	789b      	ldrb	r3, [r3, #2]
 800bd9c:	3303      	adds	r3, #3
 800bd9e:	461a      	mov	r2, r3
 800bda0:	f002 f9fe 	bl	800e1a0 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800bda4:	2001      	movs	r0, #1
 800bda6:	f000 f83b 	bl	800be20 <Cmd_SetStatus>

  return;
 800bdaa:	bf00      	nop
}
 800bdac:	3710      	adds	r7, #16
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
 800bdb2:	bf00      	nop
 800bdb4:	20000270 	.word	0x20000270
 800bdb8:	2000041c 	.word	0x2000041c

0800bdbc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b086      	sub	sp, #24
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800bdc4:	4a10      	ldr	r2, [pc, #64]	; (800be08 <TlInit+0x4c>)
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800bdca:	4810      	ldr	r0, [pc, #64]	; (800be0c <TlInit+0x50>)
 800bdcc:	f000 fa64 	bl	800c298 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800bdd0:	2001      	movs	r0, #1
 800bdd2:	f000 f825 	bl	800be20 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800bdd6:	4b0e      	ldr	r3, [pc, #56]	; (800be10 <TlInit+0x54>)
 800bdd8:	2201      	movs	r2, #1
 800bdda:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800bddc:	4b0d      	ldr	r3, [pc, #52]	; (800be14 <TlInit+0x58>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d00c      	beq.n	800bdfe <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800bde8:	4b0b      	ldr	r3, [pc, #44]	; (800be18 <TlInit+0x5c>)
 800bdea:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800bdec:	4b0b      	ldr	r3, [pc, #44]	; (800be1c <TlInit+0x60>)
 800bdee:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800bdf0:	4b08      	ldr	r3, [pc, #32]	; (800be14 <TlInit+0x58>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f107 020c 	add.w	r2, r7, #12
 800bdf8:	4610      	mov	r0, r2
 800bdfa:	4798      	blx	r3
  }

  return;
 800bdfc:	bf00      	nop
 800bdfe:	bf00      	nop
}
 800be00:	3718      	adds	r7, #24
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}
 800be06:	bf00      	nop
 800be08:	20000270 	.word	0x20000270
 800be0c:	20000264 	.word	0x20000264
 800be10:	20000274 	.word	0x20000274
 800be14:	2000041c 	.word	0x2000041c
 800be18:	0800be71 	.word	0x0800be71
 800be1c:	0800be89 	.word	0x0800be89

0800be20 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b082      	sub	sp, #8
 800be24:	af00      	add	r7, sp, #0
 800be26:	4603      	mov	r3, r0
 800be28:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800be2a:	79fb      	ldrb	r3, [r7, #7]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d10b      	bne.n	800be48 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800be30:	4b0d      	ldr	r3, [pc, #52]	; (800be68 <Cmd_SetStatus+0x48>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d003      	beq.n	800be40 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800be38:	4b0b      	ldr	r3, [pc, #44]	; (800be68 <Cmd_SetStatus+0x48>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	2000      	movs	r0, #0
 800be3e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800be40:	4b0a      	ldr	r3, [pc, #40]	; (800be6c <Cmd_SetStatus+0x4c>)
 800be42:	2200      	movs	r2, #0
 800be44:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800be46:	e00b      	b.n	800be60 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800be48:	4b08      	ldr	r3, [pc, #32]	; (800be6c <Cmd_SetStatus+0x4c>)
 800be4a:	2201      	movs	r2, #1
 800be4c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800be4e:	4b06      	ldr	r3, [pc, #24]	; (800be68 <Cmd_SetStatus+0x48>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d004      	beq.n	800be60 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800be56:	4b04      	ldr	r3, [pc, #16]	; (800be68 <Cmd_SetStatus+0x48>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	2001      	movs	r0, #1
 800be5c:	4798      	blx	r3
  return;
 800be5e:	bf00      	nop
 800be60:	bf00      	nop
}
 800be62:	3708      	adds	r7, #8
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}
 800be68:	2000043c 	.word	0x2000043c
 800be6c:	2000026c 	.word	0x2000026c

0800be70 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b082      	sub	sp, #8
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800be78:	2000      	movs	r0, #0
 800be7a:	f7f4 fba9 	bl	80005d0 <shci_cmd_resp_release>

  return;
 800be7e:	bf00      	nop
}
 800be80:	3708      	adds	r7, #8
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}
	...

0800be88 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b082      	sub	sp, #8
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800be90:	6879      	ldr	r1, [r7, #4]
 800be92:	4805      	ldr	r0, [pc, #20]	; (800bea8 <TlUserEvtReceived+0x20>)
 800be94:	f000 fa54 	bl	800c340 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800be98:	4803      	ldr	r0, [pc, #12]	; (800bea8 <TlUserEvtReceived+0x20>)
 800be9a:	f7f4 fb8d 	bl	80005b8 <shci_notify_asynch_evt>

  return;
 800be9e:	bf00      	nop
}
 800bea0:	3708      	adds	r7, #8
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
 800bea6:	bf00      	nop
 800bea8:	20000264 	.word	0x20000264

0800beac <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800beac:	b480      	push	{r7}
 800beae:	b083      	sub	sp, #12
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	4a05      	ldr	r2, [pc, #20]	; (800becc <shci_register_io_bus+0x20>)
 800beb8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	4a04      	ldr	r2, [pc, #16]	; (800bed0 <shci_register_io_bus+0x24>)
 800bebe:	611a      	str	r2, [r3, #16]

  return;
 800bec0:	bf00      	nop
}
 800bec2:	370c      	adds	r7, #12
 800bec4:	46bd      	mov	sp, r7
 800bec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beca:	4770      	bx	lr
 800becc:	0800c029 	.word	0x0800c029
 800bed0:	0800c07d 	.word	0x0800c07d

0800bed4 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800bed8:	f001 fb4e 	bl	800d578 <HW_IPCC_Enable>

  return;
 800bedc:	bf00      	nop
}
 800bede:	bd80      	pop	{r7, pc}

0800bee0 <TL_Init>:


void TL_Init( void )
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800bee4:	4b0f      	ldr	r3, [pc, #60]	; (800bf24 <TL_Init+0x44>)
 800bee6:	4a10      	ldr	r2, [pc, #64]	; (800bf28 <TL_Init+0x48>)
 800bee8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800beea:	4b0e      	ldr	r3, [pc, #56]	; (800bf24 <TL_Init+0x44>)
 800beec:	4a0f      	ldr	r2, [pc, #60]	; (800bf2c <TL_Init+0x4c>)
 800beee:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800bef0:	4b0c      	ldr	r3, [pc, #48]	; (800bf24 <TL_Init+0x44>)
 800bef2:	4a0f      	ldr	r2, [pc, #60]	; (800bf30 <TL_Init+0x50>)
 800bef4:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800bef6:	4b0b      	ldr	r3, [pc, #44]	; (800bf24 <TL_Init+0x44>)
 800bef8:	4a0e      	ldr	r2, [pc, #56]	; (800bf34 <TL_Init+0x54>)
 800befa:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_sys_table = &TL_SysTable;
 800befc:	4b09      	ldr	r3, [pc, #36]	; (800bf24 <TL_Init+0x44>)
 800befe:	4a0e      	ldr	r2, [pc, #56]	; (800bf38 <TL_Init+0x58>)
 800bf00:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800bf02:	4b08      	ldr	r3, [pc, #32]	; (800bf24 <TL_Init+0x44>)
 800bf04:	4a0d      	ldr	r2, [pc, #52]	; (800bf3c <TL_Init+0x5c>)
 800bf06:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800bf08:	4b06      	ldr	r3, [pc, #24]	; (800bf24 <TL_Init+0x44>)
 800bf0a:	4a0d      	ldr	r2, [pc, #52]	; (800bf40 <TL_Init+0x60>)
 800bf0c:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800bf0e:	4b05      	ldr	r3, [pc, #20]	; (800bf24 <TL_Init+0x44>)
 800bf10:	4a0c      	ldr	r2, [pc, #48]	; (800bf44 <TL_Init+0x64>)
 800bf12:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800bf14:	4b03      	ldr	r3, [pc, #12]	; (800bf24 <TL_Init+0x44>)
 800bf16:	4a0c      	ldr	r2, [pc, #48]	; (800bf48 <TL_Init+0x68>)
 800bf18:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800bf1a:	f001 fb35 	bl	800d588 <HW_IPCC_Init>

  return;
 800bf1e:	bf00      	nop
}
 800bf20:	bd80      	pop	{r7, pc}
 800bf22:	bf00      	nop
 800bf24:	20030000 	.word	0x20030000
 800bf28:	20030024 	.word	0x20030024
 800bf2c:	20030044 	.word	0x20030044
 800bf30:	20030054 	.word	0x20030054
 800bf34:	20030060 	.word	0x20030060
 800bf38:	20030068 	.word	0x20030068
 800bf3c:	20030070 	.word	0x20030070
 800bf40:	2003008c 	.word	0x2003008c
 800bf44:	20030090 	.word	0x20030090
 800bf48:	2003009c 	.word	0x2003009c

0800bf4c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b084      	sub	sp, #16
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800bf58:	4811      	ldr	r0, [pc, #68]	; (800bfa0 <TL_BLE_Init+0x54>)
 800bf5a:	f000 f99d 	bl	800c298 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800bf5e:	4b11      	ldr	r3, [pc, #68]	; (800bfa4 <TL_BLE_Init+0x58>)
 800bf60:	685b      	ldr	r3, [r3, #4]
 800bf62:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	689a      	ldr	r2, [r3, #8]
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	68da      	ldr	r2, [r3, #12]
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	4a0c      	ldr	r2, [pc, #48]	; (800bfa8 <TL_BLE_Init+0x5c>)
 800bf78:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	4a08      	ldr	r2, [pc, #32]	; (800bfa0 <TL_BLE_Init+0x54>)
 800bf7e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800bf80:	f001 fb18 	bl	800d5b4 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	4a08      	ldr	r2, [pc, #32]	; (800bfac <TL_BLE_Init+0x60>)
 800bf8a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	685b      	ldr	r3, [r3, #4]
 800bf90:	4a07      	ldr	r2, [pc, #28]	; (800bfb0 <TL_BLE_Init+0x64>)
 800bf92:	6013      	str	r3, [r2, #0]

  return 0;
 800bf94:	2300      	movs	r3, #0
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3710      	adds	r7, #16
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
 800bf9e:	bf00      	nop
 800bfa0:	20030a34 	.word	0x20030a34
 800bfa4:	20030000 	.word	0x20030000
 800bfa8:	20030a24 	.word	0x20030a24
 800bfac:	20000448 	.word	0x20000448
 800bfb0:	2000044c 	.word	0x2000044c

0800bfb4 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b082      	sub	sp, #8
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	460b      	mov	r3, r1
 800bfbe:	807b      	strh	r3, [r7, #2]
  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800bfc0:	4b05      	ldr	r3, [pc, #20]	; (800bfd8 <TL_BLE_SendCmd+0x24>)
 800bfc2:	685b      	ldr	r3, [r3, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	721a      	strb	r2, [r3, #8]

  HW_IPCC_BLE_SendCmd();
 800bfca:	f001 fafd 	bl	800d5c8 <HW_IPCC_BLE_SendCmd>

  return 0;
 800bfce:	2300      	movs	r3, #0
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3708      	adds	r7, #8
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}
 800bfd8:	20030000 	.word	0x20030000

0800bfdc <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b082      	sub	sp, #8
 800bfe0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800bfe2:	e009      	b.n	800bff8 <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800bfe4:	1d3b      	adds	r3, r7, #4
 800bfe6:	4619      	mov	r1, r3
 800bfe8:	4808      	ldr	r0, [pc, #32]	; (800c00c <HW_IPCC_BLE_RxEvtNot+0x30>)
 800bfea:	f000 f9ec 	bl	800c3c6 <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 800bfee:	4b08      	ldr	r3, [pc, #32]	; (800c010 <HW_IPCC_BLE_RxEvtNot+0x34>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	687a      	ldr	r2, [r7, #4]
 800bff4:	4610      	mov	r0, r2
 800bff6:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800bff8:	4804      	ldr	r0, [pc, #16]	; (800c00c <HW_IPCC_BLE_RxEvtNot+0x30>)
 800bffa:	f000 f95d 	bl	800c2b8 <LST_is_empty>
 800bffe:	4603      	mov	r3, r0
 800c000:	2b00      	cmp	r3, #0
 800c002:	d0ef      	beq.n	800bfe4 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800c004:	bf00      	nop
}
 800c006:	3708      	adds	r7, #8
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}
 800c00c:	20030a34 	.word	0x20030a34
 800c010:	20000448 	.word	0x20000448

0800c014 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800c018:	4b02      	ldr	r3, [pc, #8]	; (800c024 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	4798      	blx	r3

  return;
 800c01e:	bf00      	nop
}
 800c020:	bd80      	pop	{r7, pc}
 800c022:	bf00      	nop
 800c024:	2000044c 	.word	0x2000044c

0800c028 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b084      	sub	sp, #16
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800c034:	480d      	ldr	r0, [pc, #52]	; (800c06c <TL_SYS_Init+0x44>)
 800c036:	f000 f92f 	bl	800c298 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800c03a:	4b0d      	ldr	r3, [pc, #52]	; (800c070 <TL_SYS_Init+0x48>)
 800c03c:	68db      	ldr	r3, [r3, #12]
 800c03e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	689a      	ldr	r2, [r3, #8]
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	4a08      	ldr	r2, [pc, #32]	; (800c06c <TL_SYS_Init+0x44>)
 800c04c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800c04e:	f001 fadd 	bl	800d60c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	4a07      	ldr	r2, [pc, #28]	; (800c074 <TL_SYS_Init+0x4c>)
 800c058:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	685b      	ldr	r3, [r3, #4]
 800c05e:	4a06      	ldr	r2, [pc, #24]	; (800c078 <TL_SYS_Init+0x50>)
 800c060:	6013      	str	r3, [r2, #0]

  return 0;
 800c062:	2300      	movs	r3, #0
}
 800c064:	4618      	mov	r0, r3
 800c066:	3710      	adds	r7, #16
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}
 800c06c:	20030a3c 	.word	0x20030a3c
 800c070:	20030000 	.word	0x20030000
 800c074:	20000450 	.word	0x20000450
 800c078:	20000454 	.word	0x20000454

0800c07c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b082      	sub	sp, #8
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	460b      	mov	r3, r1
 800c086:	807b      	strh	r3, [r7, #2]
  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800c088:	4b05      	ldr	r3, [pc, #20]	; (800c0a0 <TL_SYS_SendCmd+0x24>)
 800c08a:	68db      	ldr	r3, [r3, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	2210      	movs	r2, #16
 800c090:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 800c092:	f001 fac5 	bl	800d620 <HW_IPCC_SYS_SendCmd>

  return 0;
 800c096:	2300      	movs	r3, #0
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3708      	adds	r7, #8
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}
 800c0a0:	20030000 	.word	0x20030000

0800c0a4 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c0a8:	4b04      	ldr	r3, [pc, #16]	; (800c0bc <HW_IPCC_SYS_CmdEvtNot+0x18>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	4a04      	ldr	r2, [pc, #16]	; (800c0c0 <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 800c0ae:	68d2      	ldr	r2, [r2, #12]
 800c0b0:	6812      	ldr	r2, [r2, #0]
 800c0b2:	4610      	mov	r0, r2
 800c0b4:	4798      	blx	r3

  return;
 800c0b6:	bf00      	nop
}
 800c0b8:	bd80      	pop	{r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	20000450 	.word	0x20000450
 800c0c0:	20030000 	.word	0x20030000

0800c0c4 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b082      	sub	sp, #8
 800c0c8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c0ca:	e009      	b.n	800c0e0 <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800c0cc:	1d3b      	adds	r3, r7, #4
 800c0ce:	4619      	mov	r1, r3
 800c0d0:	4808      	ldr	r0, [pc, #32]	; (800c0f4 <HW_IPCC_SYS_EvtNot+0x30>)
 800c0d2:	f000 f978 	bl	800c3c6 <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 800c0d6:	4b08      	ldr	r3, [pc, #32]	; (800c0f8 <HW_IPCC_SYS_EvtNot+0x34>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	687a      	ldr	r2, [r7, #4]
 800c0dc:	4610      	mov	r0, r2
 800c0de:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c0e0:	4804      	ldr	r0, [pc, #16]	; (800c0f4 <HW_IPCC_SYS_EvtNot+0x30>)
 800c0e2:	f000 f8e9 	bl	800c2b8 <LST_is_empty>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d0ef      	beq.n	800c0cc <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800c0ec:	bf00      	nop
}
 800c0ee:	3708      	adds	r7, #8
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}
 800c0f4:	20030a3c 	.word	0x20030a3c
 800c0f8:	20000454 	.word	0x20000454

0800c0fc <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b082      	sub	sp, #8
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800c104:	4817      	ldr	r0, [pc, #92]	; (800c164 <TL_MM_Init+0x68>)
 800c106:	f000 f8c7 	bl	800c298 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800c10a:	4817      	ldr	r0, [pc, #92]	; (800c168 <TL_MM_Init+0x6c>)
 800c10c:	f000 f8c4 	bl	800c298 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800c110:	4b16      	ldr	r3, [pc, #88]	; (800c16c <TL_MM_Init+0x70>)
 800c112:	691b      	ldr	r3, [r3, #16]
 800c114:	4a16      	ldr	r2, [pc, #88]	; (800c170 <TL_MM_Init+0x74>)
 800c116:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800c118:	4b15      	ldr	r3, [pc, #84]	; (800c170 <TL_MM_Init+0x74>)
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	687a      	ldr	r2, [r7, #4]
 800c11e:	6892      	ldr	r2, [r2, #8]
 800c120:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800c122:	4b13      	ldr	r3, [pc, #76]	; (800c170 <TL_MM_Init+0x74>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	687a      	ldr	r2, [r7, #4]
 800c128:	68d2      	ldr	r2, [r2, #12]
 800c12a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800c12c:	4b10      	ldr	r3, [pc, #64]	; (800c170 <TL_MM_Init+0x74>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	4a0c      	ldr	r2, [pc, #48]	; (800c164 <TL_MM_Init+0x68>)
 800c132:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800c134:	4b0e      	ldr	r3, [pc, #56]	; (800c170 <TL_MM_Init+0x74>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	687a      	ldr	r2, [r7, #4]
 800c13a:	6812      	ldr	r2, [r2, #0]
 800c13c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800c13e:	4b0c      	ldr	r3, [pc, #48]	; (800c170 <TL_MM_Init+0x74>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	687a      	ldr	r2, [r7, #4]
 800c144:	6852      	ldr	r2, [r2, #4]
 800c146:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800c148:	4b09      	ldr	r3, [pc, #36]	; (800c170 <TL_MM_Init+0x74>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	687a      	ldr	r2, [r7, #4]
 800c14e:	6912      	ldr	r2, [r2, #16]
 800c150:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800c152:	4b07      	ldr	r3, [pc, #28]	; (800c170 <TL_MM_Init+0x74>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	687a      	ldr	r2, [r7, #4]
 800c158:	6952      	ldr	r2, [r2, #20]
 800c15a:	619a      	str	r2, [r3, #24]

  return;
 800c15c:	bf00      	nop
}
 800c15e:	3708      	adds	r7, #8
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}
 800c164:	200300a8 	.word	0x200300a8
 800c168:	20000440 	.word	0x20000440
 800c16c:	20030000 	.word	0x20030000
 800c170:	20000458 	.word	0x20000458

0800c174 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b082      	sub	sp, #8
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800c17c:	6879      	ldr	r1, [r7, #4]
 800c17e:	4805      	ldr	r0, [pc, #20]	; (800c194 <TL_MM_EvtDone+0x20>)
 800c180:	f000 f8de 	bl	800c340 <LST_insert_tail>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800c184:	4804      	ldr	r0, [pc, #16]	; (800c198 <TL_MM_EvtDone+0x24>)
 800c186:	f001 fa71 	bl	800d66c <HW_IPCC_MM_SendFreeBuf>

  return;
 800c18a:	bf00      	nop
}
 800c18c:	3708      	adds	r7, #8
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
 800c192:	bf00      	nop
 800c194:	20000440 	.word	0x20000440
 800c198:	0800c19d 	.word	0x0800c19d

0800c19c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b082      	sub	sp, #8
 800c1a0:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c1a2:	e00c      	b.n	800c1be <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800c1a4:	1d3b      	adds	r3, r7, #4
 800c1a6:	4619      	mov	r1, r3
 800c1a8:	480a      	ldr	r0, [pc, #40]	; (800c1d4 <SendFreeBuf+0x38>)
 800c1aa:	f000 f90c 	bl	800c3c6 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800c1ae:	4b0a      	ldr	r3, [pc, #40]	; (800c1d8 <SendFreeBuf+0x3c>)
 800c1b0:	691b      	ldr	r3, [r3, #16]
 800c1b2:	691b      	ldr	r3, [r3, #16]
 800c1b4:	687a      	ldr	r2, [r7, #4]
 800c1b6:	4611      	mov	r1, r2
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f000 f8c1 	bl	800c340 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c1be:	4805      	ldr	r0, [pc, #20]	; (800c1d4 <SendFreeBuf+0x38>)
 800c1c0:	f000 f87a 	bl	800c2b8 <LST_is_empty>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d0ec      	beq.n	800c1a4 <SendFreeBuf+0x8>
  }

  return;
 800c1ca:	bf00      	nop
}
 800c1cc:	3708      	adds	r7, #8
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}
 800c1d2:	bf00      	nop
 800c1d4:	20000440 	.word	0x20000440
 800c1d8:	20030000 	.word	0x20030000

0800c1dc <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800c1e0:	4805      	ldr	r0, [pc, #20]	; (800c1f8 <TL_TRACES_Init+0x1c>)
 800c1e2:	f000 f859 	bl	800c298 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800c1e6:	4b05      	ldr	r3, [pc, #20]	; (800c1fc <TL_TRACES_Init+0x20>)
 800c1e8:	695b      	ldr	r3, [r3, #20]
 800c1ea:	4a03      	ldr	r2, [pc, #12]	; (800c1f8 <TL_TRACES_Init+0x1c>)
 800c1ec:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800c1ee:	f001 fa73 	bl	800d6d8 <HW_IPCC_TRACES_Init>

  return;
 800c1f2:	bf00      	nop
}
 800c1f4:	bd80      	pop	{r7, pc}
 800c1f6:	bf00      	nop
 800c1f8:	200300b0 	.word	0x200300b0
 800c1fc:	20030000 	.word	0x20030000

0800c200 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b082      	sub	sp, #8
 800c204:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c206:	e008      	b.n	800c21a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800c208:	1d3b      	adds	r3, r7, #4
 800c20a:	4619      	mov	r1, r3
 800c20c:	4808      	ldr	r0, [pc, #32]	; (800c230 <HW_IPCC_TRACES_EvtNot+0x30>)
 800c20e:	f000 f8da 	bl	800c3c6 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	4618      	mov	r0, r3
 800c216:	f000 f80d 	bl	800c234 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c21a:	4805      	ldr	r0, [pc, #20]	; (800c230 <HW_IPCC_TRACES_EvtNot+0x30>)
 800c21c:	f000 f84c 	bl	800c2b8 <LST_is_empty>
 800c220:	4603      	mov	r3, r0
 800c222:	2b00      	cmp	r3, #0
 800c224:	d0f0      	beq.n	800c208 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800c226:	bf00      	nop
}
 800c228:	3708      	adds	r7, #8
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}
 800c22e:	bf00      	nop
 800c230:	200300b0 	.word	0x200300b0

0800c234 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt ){};
 800c234:	b480      	push	{r7}
 800c236:	b083      	sub	sp, #12
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	bf00      	nop
 800c23e:	370c      	adds	r7, #12
 800c240:	46bd      	mov	sp, r7
 800c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c246:	4770      	bx	lr

0800c248 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800c248:	b480      	push	{r7}
 800c24a:	b085      	sub	sp, #20
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	4603      	mov	r3, r0
 800c250:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800c252:	4b0f      	ldr	r3, [pc, #60]	; (800c290 <OTP_Read+0x48>)
 800c254:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800c256:	e002      	b.n	800c25e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	3b08      	subs	r3, #8
 800c25c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	3307      	adds	r3, #7
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	79fa      	ldrb	r2, [r7, #7]
 800c266:	429a      	cmp	r2, r3
 800c268:	d003      	beq.n	800c272 <OTP_Read+0x2a>
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	4a09      	ldr	r2, [pc, #36]	; (800c294 <OTP_Read+0x4c>)
 800c26e:	4293      	cmp	r3, r2
 800c270:	d1f2      	bne.n	800c258 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	3307      	adds	r3, #7
 800c276:	781b      	ldrb	r3, [r3, #0]
 800c278:	79fa      	ldrb	r2, [r7, #7]
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d001      	beq.n	800c282 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800c27e:	2300      	movs	r3, #0
 800c280:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800c282:	68fb      	ldr	r3, [r7, #12]
}
 800c284:	4618      	mov	r0, r3
 800c286:	3714      	adds	r7, #20
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr
 800c290:	1fff73f8 	.word	0x1fff73f8
 800c294:	1fff7000 	.word	0x1fff7000

0800c298 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800c298:	b480      	push	{r7}
 800c29a:	b083      	sub	sp, #12
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	687a      	ldr	r2, [r7, #4]
 800c2a4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	687a      	ldr	r2, [r7, #4]
 800c2aa:	605a      	str	r2, [r3, #4]
}
 800c2ac:	bf00      	nop
 800c2ae:	370c      	adds	r7, #12
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b6:	4770      	bx	lr

0800c2b8 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b087      	sub	sp, #28
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c2c0:	f3ef 8310 	mrs	r3, PRIMASK
 800c2c4:	60fb      	str	r3, [r7, #12]
  return(result);
 800c2c6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c2c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c2ca:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	687a      	ldr	r2, [r7, #4]
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d102      	bne.n	800c2dc <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	75fb      	strb	r3, [r7, #23]
 800c2da:	e001      	b.n	800c2e0 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800c2dc:	2300      	movs	r3, #0
 800c2de:	75fb      	strb	r3, [r7, #23]
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800c2ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	371c      	adds	r7, #28
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f6:	4770      	bx	lr

0800c2f8 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	b087      	sub	sp, #28
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
 800c300:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c302:	f3ef 8310 	mrs	r3, PRIMASK
 800c306:	60fb      	str	r3, [r7, #12]
  return(result);
 800c308:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c30a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c30c:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681a      	ldr	r2, [r3, #0]
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	687a      	ldr	r2, [r7, #4]
 800c31a:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	683a      	ldr	r2, [r7, #0]
 800c320:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	683a      	ldr	r2, [r7, #0]
 800c328:	605a      	str	r2, [r3, #4]
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c334:	bf00      	nop
 800c336:	371c      	adds	r7, #28
 800c338:	46bd      	mov	sp, r7
 800c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33e:	4770      	bx	lr

0800c340 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800c340:	b480      	push	{r7}
 800c342:	b087      	sub	sp, #28
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
 800c348:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c34a:	f3ef 8310 	mrs	r3, PRIMASK
 800c34e:	60fb      	str	r3, [r7, #12]
  return(result);
 800c350:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c352:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c354:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	687a      	ldr	r2, [r7, #4]
 800c35a:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	685a      	ldr	r2, [r3, #4]
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	683a      	ldr	r2, [r7, #0]
 800c368:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	685b      	ldr	r3, [r3, #4]
 800c36e:	683a      	ldr	r2, [r7, #0]
 800c370:	601a      	str	r2, [r3, #0]
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c37c:	bf00      	nop
 800c37e:	371c      	adds	r7, #28
 800c380:	46bd      	mov	sp, r7
 800c382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c386:	4770      	bx	lr

0800c388 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800c388:	b480      	push	{r7}
 800c38a:	b087      	sub	sp, #28
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c390:	f3ef 8310 	mrs	r3, PRIMASK
 800c394:	60fb      	str	r3, [r7, #12]
  return(result);
 800c396:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c398:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c39a:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	685b      	ldr	r3, [r3, #4]
 800c3a0:	687a      	ldr	r2, [r7, #4]
 800c3a2:	6812      	ldr	r2, [r2, #0]
 800c3a4:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	687a      	ldr	r2, [r7, #4]
 800c3ac:	6852      	ldr	r2, [r2, #4]
 800c3ae:	605a      	str	r2, [r3, #4]
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c3ba:	bf00      	nop
 800c3bc:	371c      	adds	r7, #28
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c4:	4770      	bx	lr

0800c3c6 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800c3c6:	b580      	push	{r7, lr}
 800c3c8:	b086      	sub	sp, #24
 800c3ca:	af00      	add	r7, sp, #0
 800c3cc:	6078      	str	r0, [r7, #4]
 800c3ce:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c3d0:	f3ef 8310 	mrs	r3, PRIMASK
 800c3d4:	60fb      	str	r3, [r7, #12]
  return(result);
 800c3d6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c3d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c3da:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681a      	ldr	r2, [r3, #0]
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f7ff ffcd 	bl	800c388 <LST_remove_node>
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c3f2:	693b      	ldr	r3, [r7, #16]
 800c3f4:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c3f8:	bf00      	nop
 800c3fa:	3718      	adds	r7, #24
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}

0800c400 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800c400:	b480      	push	{r7}
 800c402:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800c404:	4b03      	ldr	r3, [pc, #12]	; (800c414 <LL_FLASH_GetUDN+0x14>)
 800c406:	681b      	ldr	r3, [r3, #0]
}
 800c408:	4618      	mov	r0, r3
 800c40a:	46bd      	mov	sp, r7
 800c40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c410:	4770      	bx	lr
 800c412:	bf00      	nop
 800c414:	1fff7580 	.word	0x1fff7580

0800c418 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800c418:	b480      	push	{r7}
 800c41a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800c41c:	4b03      	ldr	r3, [pc, #12]	; (800c42c <LL_FLASH_GetDeviceID+0x14>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	b2db      	uxtb	r3, r3
}
 800c422:	4618      	mov	r0, r3
 800c424:	46bd      	mov	sp, r7
 800c426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42a:	4770      	bx	lr
 800c42c:	1fff7584 	.word	0x1fff7584

0800c430 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800c430:	b480      	push	{r7}
 800c432:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800c434:	4b03      	ldr	r3, [pc, #12]	; (800c444 <LL_FLASH_GetSTCompanyID+0x14>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	0a1b      	lsrs	r3, r3, #8
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	46bd      	mov	sp, r7
 800c43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c442:	4770      	bx	lr
 800c444:	1fff7584 	.word	0x1fff7584

0800c448 <APP_BLE_Init>:

/* USER CODE END 0 */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 800c448:	b5b0      	push	{r4, r5, r7, lr}
 800c44a:	b08c      	sub	sp, #48	; 0x30
 800c44c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */
	//messege_ble(0);
/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800c44e:	4b1f      	ldr	r3, [pc, #124]	; (800c4cc <APP_BLE_Init+0x84>)
 800c450:	463c      	mov	r4, r7
 800c452:	461d      	mov	r5, r3
 800c454:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c458:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c45a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c45c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c460:	c407      	stmia	r4!, {r0, r1, r2}
 800c462:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 800c464:	f000 f9b4 	bl	800c7d0 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800c468:	2101      	movs	r1, #1
 800c46a:	2002      	movs	r0, #2
 800c46c:	f7f5 f98c 	bl	8001788 <UTIL_LPM_SetOffMode>

/**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800c470:	4a17      	ldr	r2, [pc, #92]	; (800c4d0 <APP_BLE_Init+0x88>)
 800c472:	2100      	movs	r1, #0
 800c474:	2020      	movs	r0, #32
 800c476:	f7f5 faef 	bl	8001a58 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 800c47a:	463b      	mov	r3, r7
 800c47c:	4618      	mov	r0, r3
 800c47e:	f7ff fa4f 	bl	800b920 <SHCI_C2_BLE_Init>

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800c482:	f000 f9bb 	bl	800c7fc <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800c486:	f7ff f98f 	bl	800b7a8 <SVCCTL_Init>

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_START_SCAN_ID, UTIL_SEQ_RFU, Scan_Request);
 800c48a:	4a12      	ldr	r2, [pc, #72]	; (800c4d4 <APP_BLE_Init+0x8c>)
 800c48c:	2100      	movs	r1, #0
 800c48e:	2001      	movs	r0, #1
 800c490:	f7f5 fae2 	bl	8001a58 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_DEV_1_ID, UTIL_SEQ_RFU, Connect_Request);
 800c494:	4a10      	ldr	r2, [pc, #64]	; (800c4d8 <APP_BLE_Init+0x90>)
 800c496:	2100      	movs	r1, #0
 800c498:	2002      	movs	r0, #2
 800c49a:	f7f5 fadd 	bl	8001a58 <UTIL_SEQ_RegTask>

  /**
   * Initialization of the BLE App Context
   */

      BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c49e:	4b0f      	ldr	r3, [pc, #60]	; (800c4dc <APP_BLE_Init+0x94>)
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    /*Radio mask Activity*/
#if (OOB_DEMO != 0)  
  aci_hal_set_radio_activity_mask(0x0020);
 800c4a6:	2020      	movs	r0, #32
 800c4a8:	f7fe ffc4 	bl	800b434 <aci_hal_set_radio_activity_mask>
#endif 
  /**
   * Initialize P2P Client Application
   */
  P2PC_APP_Init();
 800c4ac:	f000 fb60 	bl	800cb70 <P2PC_APP_Init>

#if (OOB_DEMO != 0)
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800c4b0:	4b0b      	ldr	r3, [pc, #44]	; (800c4e0 <APP_BLE_Init+0x98>)
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	490b      	ldr	r1, [pc, #44]	; (800c4e4 <APP_BLE_Init+0x9c>)
 800c4b6:	2000      	movs	r0, #0
 800c4b8:	f7f4 fe6a 	bl	8001190 <HW_TS_Create>
  /**
   * Start scanning
   */
  UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0);
#endif 
  UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0);
 800c4bc:	2100      	movs	r1, #0
 800c4be:	2001      	movs	r0, #1
 800c4c0:	f7f5 faea 	bl	8001a98 <UTIL_SEQ_SetTask>
  
  return;
 800c4c4:	bf00      	nop
}
 800c4c6:	3730      	adds	r7, #48	; 0x30
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bdb0      	pop	{r4, r5, r7, pc}
 800c4cc:	0800e3f0 	.word	0x0800e3f0
 800c4d0:	0800b989 	.word	0x0800b989
 800c4d4:	0800c971 	.word	0x0800c971
 800c4d8:	0800c9b9 	.word	0x0800c9b9
 800c4dc:	20000278 	.word	0x20000278
 800c4e0:	0800ca25 	.word	0x0800ca25
 800c4e4:	20000309 	.word	0x20000309

0800c4e8 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 800c4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4ea:	b097      	sub	sp, #92	; 0x5c
 800c4ec:	af06      	add	r7, sp, #24
 800c4ee:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  hci_le_connection_complete_event_rp0 * connection_complete_event;
  evt_blue_aci *blue_evt;
  hci_le_advertising_report_event_rp0 * le_advertising_event;
  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	3301      	adds	r3, #1
 800c4f4:	63bb      	str	r3, [r7, #56]	; 0x38
  hci_disconnection_complete_event_rp0 *cc = (void *) event_pckt->data;
 800c4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f8:	3302      	adds	r3, #2
 800c4fa:	637b      	str	r3, [r7, #52]	; 0x34
  uint8_t result;
  uint8_t event_type, event_data_size;
  int k = 0;
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint8_t adtype, adlength;
  uint8_t *adv_report_data;

  switch (event_pckt->evt)
 800c500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	2b3e      	cmp	r3, #62	; 0x3e
 800c506:	f000 809f 	beq.w	800c648 <SVCCTL_App_Notification+0x160>
 800c50a:	2bff      	cmp	r3, #255	; 0xff
 800c50c:	d002      	beq.n	800c514 <SVCCTL_App_Notification+0x2c>
 800c50e:	2b05      	cmp	r3, #5
 800c510:	d07a      	beq.n	800c608 <SVCCTL_App_Notification+0x120>

      default:
        /* USER CODE BEGIN evt_default */

        /* USER CODE END evt_default */
        break;
 800c512:	e135      	b.n	800c780 <SVCCTL_App_Notification+0x298>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800c514:	4b9d      	ldr	r3, [pc, #628]	; (800c78c <SVCCTL_App_Notification+0x2a4>)
 800c516:	2201      	movs	r2, #1
 800c518:	701a      	strb	r2, [r3, #0]
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800c51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c51c:	3302      	adds	r3, #2
 800c51e:	633b      	str	r3, [r7, #48]	; 0x30
      switch (blue_evt->ecode)
 800c520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c522:	881b      	ldrh	r3, [r3, #0]
 800c524:	b29b      	uxth	r3, r3
 800c526:	f240 4207 	movw	r2, #1031	; 0x407
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d006      	beq.n	800c53c <SVCCTL_App_Notification+0x54>
 800c52e:	f640 0202 	movw	r2, #2050	; 0x802
 800c532:	4293      	cmp	r3, r2
 800c534:	d01c      	beq.n	800c570 <SVCCTL_App_Notification+0x88>
 800c536:	2b04      	cmp	r3, #4
 800c538:	d062      	beq.n	800c600 <SVCCTL_App_Notification+0x118>
          break;
 800c53a:	e064      	b.n	800c606 <SVCCTL_App_Notification+0x11e>
          aci_gap_proc_complete_event_rp0 *gap_evt_proc_complete = (void*) blue_evt->data;
 800c53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c53e:	3302      	adds	r3, #2
 800c540:	627b      	str	r3, [r7, #36]	; 0x24
          if (gap_evt_proc_complete->Procedure_Code == GAP_GENERAL_DISCOVERY_PROC
 800c542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c544:	781b      	ldrb	r3, [r3, #0]
 800c546:	2b02      	cmp	r3, #2
 800c548:	d15c      	bne.n	800c604 <SVCCTL_App_Notification+0x11c>
              && gap_evt_proc_complete->Status == 0x00)
 800c54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c54c:	785b      	ldrb	r3, [r3, #1]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d158      	bne.n	800c604 <SVCCTL_App_Notification+0x11c>
            if (BleApplicationContext.DeviceServerFound == 0x01 && BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 800c552:	4b8f      	ldr	r3, [pc, #572]	; (800c790 <SVCCTL_App_Notification+0x2a8>)
 800c554:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800c558:	2b01      	cmp	r3, #1
 800c55a:	d153      	bne.n	800c604 <SVCCTL_App_Notification+0x11c>
 800c55c:	4b8c      	ldr	r3, [pc, #560]	; (800c790 <SVCCTL_App_Notification+0x2a8>)
 800c55e:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800c562:	2b06      	cmp	r3, #6
 800c564:	d04e      	beq.n	800c604 <SVCCTL_App_Notification+0x11c>
              UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_1_ID, CFG_SCH_PRIO_0);
 800c566:	2100      	movs	r1, #0
 800c568:	2002      	movs	r0, #2
 800c56a:	f7f5 fa95 	bl	8001a98 <UTIL_SEQ_SetTask>
        break;
 800c56e:	e049      	b.n	800c604 <SVCCTL_App_Notification+0x11c>
          aci_l2cap_connection_update_req_event_rp0 *pr = (aci_l2cap_connection_update_req_event_rp0 *) blue_evt->data;
 800c570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c572:	3302      	adds	r3, #2
 800c574:	62fb      	str	r3, [r7, #44]	; 0x2c
          aci_hal_set_radio_activity_mask(0x0000);
 800c576:	2000      	movs	r0, #0
 800c578:	f7fe ff5c 	bl	800b434 <aci_hal_set_radio_activity_mask>
          APP_BLE_p2p_Conn_Update_req.Identifier = pr->Identifier;
 800c57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c57e:	789a      	ldrb	r2, [r3, #2]
 800c580:	4b84      	ldr	r3, [pc, #528]	; (800c794 <SVCCTL_App_Notification+0x2ac>)
 800c582:	701a      	strb	r2, [r3, #0]
          APP_BLE_p2p_Conn_Update_req.L2CAP_Length = pr->L2CAP_Length;
 800c584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c586:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800c58a:	b29a      	uxth	r2, r3
 800c58c:	4b81      	ldr	r3, [pc, #516]	; (800c794 <SVCCTL_App_Notification+0x2ac>)
 800c58e:	805a      	strh	r2, [r3, #2]
          APP_BLE_p2p_Conn_Update_req.Interval_Min = pr->Interval_Min;
 800c590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c592:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800c596:	b29a      	uxth	r2, r3
 800c598:	4b7e      	ldr	r3, [pc, #504]	; (800c794 <SVCCTL_App_Notification+0x2ac>)
 800c59a:	809a      	strh	r2, [r3, #4]
          APP_BLE_p2p_Conn_Update_req.Interval_Max = pr->Interval_Max;
 800c59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c59e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800c5a2:	b29a      	uxth	r2, r3
 800c5a4:	4b7b      	ldr	r3, [pc, #492]	; (800c794 <SVCCTL_App_Notification+0x2ac>)
 800c5a6:	80da      	strh	r2, [r3, #6]
          APP_BLE_p2p_Conn_Update_req.Slave_Latency = pr->Slave_Latency;
 800c5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5aa:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800c5ae:	b29a      	uxth	r2, r3
 800c5b0:	4b78      	ldr	r3, [pc, #480]	; (800c794 <SVCCTL_App_Notification+0x2ac>)
 800c5b2:	811a      	strh	r2, [r3, #8]
          APP_BLE_p2p_Conn_Update_req.Timeout_Multiplier = pr->Timeout_Multiplier;
 800c5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5b6:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800c5ba:	b29a      	uxth	r2, r3
 800c5bc:	4b75      	ldr	r3, [pc, #468]	; (800c794 <SVCCTL_App_Notification+0x2ac>)
 800c5be:	815a      	strh	r2, [r3, #10]
          result = aci_l2cap_connection_parameter_update_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 800c5c0:	4b73      	ldr	r3, [pc, #460]	; (800c790 <SVCCTL_App_Notification+0x2a8>)
 800c5c2:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
 800c5c4:	4b73      	ldr	r3, [pc, #460]	; (800c794 <SVCCTL_App_Notification+0x2ac>)
 800c5c6:	889c      	ldrh	r4, [r3, #4]
 800c5c8:	4b72      	ldr	r3, [pc, #456]	; (800c794 <SVCCTL_App_Notification+0x2ac>)
 800c5ca:	88dd      	ldrh	r5, [r3, #6]
 800c5cc:	4b71      	ldr	r3, [pc, #452]	; (800c794 <SVCCTL_App_Notification+0x2ac>)
 800c5ce:	891e      	ldrh	r6, [r3, #8]
 800c5d0:	4b70      	ldr	r3, [pc, #448]	; (800c794 <SVCCTL_App_Notification+0x2ac>)
 800c5d2:	895b      	ldrh	r3, [r3, #10]
 800c5d4:	4a6f      	ldr	r2, [pc, #444]	; (800c794 <SVCCTL_App_Notification+0x2ac>)
 800c5d6:	7812      	ldrb	r2, [r2, #0]
 800c5d8:	2101      	movs	r1, #1
 800c5da:	9104      	str	r1, [sp, #16]
 800c5dc:	9203      	str	r2, [sp, #12]
 800c5de:	2210      	movs	r2, #16
 800c5e0:	9202      	str	r2, [sp, #8]
 800c5e2:	2210      	movs	r2, #16
 800c5e4:	9201      	str	r2, [sp, #4]
 800c5e6:	9300      	str	r3, [sp, #0]
 800c5e8:	4633      	mov	r3, r6
 800c5ea:	462a      	mov	r2, r5
 800c5ec:	4621      	mov	r1, r4
 800c5ee:	f7fe ff9b 	bl	800b528 <aci_l2cap_connection_parameter_update_resp>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
          aci_hal_set_radio_activity_mask(0x0020);
 800c5f8:	2020      	movs	r0, #32
 800c5fa:	f7fe ff1b 	bl	800b434 <aci_hal_set_radio_activity_mask>
        break;
 800c5fe:	e002      	b.n	800c606 <SVCCTL_App_Notification+0x11e>
        break; 
 800c600:	bf00      	nop
 800c602:	e0bd      	b.n	800c780 <SVCCTL_App_Notification+0x298>
        break;
 800c604:	bf00      	nop
    break; 
 800c606:	e0bb      	b.n	800c780 <SVCCTL_App_Notification+0x298>
      if (cc->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800c608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c60a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c60e:	b29a      	uxth	r2, r3
 800c610:	4b5f      	ldr	r3, [pc, #380]	; (800c790 <SVCCTL_App_Notification+0x2a8>)
 800c612:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c614:	429a      	cmp	r2, r3
 800c616:	f040 80b2 	bne.w	800c77e <SVCCTL_App_Notification+0x296>
            BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800c61a:	4b5d      	ldr	r3, [pc, #372]	; (800c790 <SVCCTL_App_Notification+0x2a8>)
 800c61c:	2200      	movs	r2, #0
 800c61e:	84da      	strh	r2, [r3, #38]	; 0x26
            BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c620:	4b5b      	ldr	r3, [pc, #364]	; (800c790 <SVCCTL_App_Notification+0x2a8>)
 800c622:	2200      	movs	r2, #0
 800c624:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
            HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800c628:	2200      	movs	r2, #0
 800c62a:	2101      	movs	r1, #1
 800c62c:	485a      	ldr	r0, [pc, #360]	; (800c798 <SVCCTL_App_Notification+0x2b0>)
 800c62e:	f7f6 fa91 	bl	8002b54 <HAL_GPIO_WritePin>
            handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800c632:	4b56      	ldr	r3, [pc, #344]	; (800c78c <SVCCTL_App_Notification+0x2a4>)
 800c634:	2201      	movs	r2, #1
 800c636:	701a      	strb	r2, [r3, #0]
            handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800c638:	4b55      	ldr	r3, [pc, #340]	; (800c790 <SVCCTL_App_Notification+0x2a8>)
 800c63a:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800c63c:	4b53      	ldr	r3, [pc, #332]	; (800c78c <SVCCTL_App_Notification+0x2a4>)
 800c63e:	805a      	strh	r2, [r3, #2]
            P2PC_APP_Notification(&handleNotification);
 800c640:	4852      	ldr	r0, [pc, #328]	; (800c78c <SVCCTL_App_Notification+0x2a4>)
 800c642:	f000 fabb 	bl	800cbbc <P2PC_APP_Notification>
      break; /* EVT_DISCONN_COMPLETE */
 800c646:	e09a      	b.n	800c77e <SVCCTL_App_Notification+0x296>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 800c648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c64a:	3302      	adds	r3, #2
 800c64c:	623b      	str	r3, [r7, #32]
      switch (meta_evt->subevent)
 800c64e:	6a3b      	ldr	r3, [r7, #32]
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	2b01      	cmp	r3, #1
 800c654:	d002      	beq.n	800c65c <SVCCTL_App_Notification+0x174>
 800c656:	2b02      	cmp	r3, #2
 800c658:	d025      	beq.n	800c6a6 <SVCCTL_App_Notification+0x1be>
          break;
 800c65a:	e08f      	b.n	800c77c <SVCCTL_App_Notification+0x294>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 800c65c:	6a3b      	ldr	r3, [r7, #32]
 800c65e:	3301      	adds	r3, #1
 800c660:	60fb      	str	r3, [r7, #12]
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c668:	b29a      	uxth	r2, r3
 800c66a:	4b49      	ldr	r3, [pc, #292]	; (800c790 <SVCCTL_App_Notification+0x2a8>)
 800c66c:	84da      	strh	r2, [r3, #38]	; 0x26
          BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800c66e:	4b48      	ldr	r3, [pc, #288]	; (800c790 <SVCCTL_App_Notification+0x2a8>)
 800c670:	2206      	movs	r2, #6
 800c672:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
          HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800c676:	2201      	movs	r2, #1
 800c678:	2101      	movs	r1, #1
 800c67a:	4847      	ldr	r0, [pc, #284]	; (800c798 <SVCCTL_App_Notification+0x2b0>)
 800c67c:	f7f6 fa6a 	bl	8002b54 <HAL_GPIO_WritePin>
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800c680:	4b42      	ldr	r3, [pc, #264]	; (800c78c <SVCCTL_App_Notification+0x2a4>)
 800c682:	2200      	movs	r2, #0
 800c684:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800c686:	4b42      	ldr	r3, [pc, #264]	; (800c790 <SVCCTL_App_Notification+0x2a8>)
 800c688:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800c68a:	4b40      	ldr	r3, [pc, #256]	; (800c78c <SVCCTL_App_Notification+0x2a4>)
 800c68c:	805a      	strh	r2, [r3, #2]
          P2PC_APP_Notification(&handleNotification);
 800c68e:	483f      	ldr	r0, [pc, #252]	; (800c78c <SVCCTL_App_Notification+0x2a4>)
 800c690:	f000 fa94 	bl	800cbbc <P2PC_APP_Notification>
          result = aci_gatt_disc_all_primary_services(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800c694:	4b3e      	ldr	r3, [pc, #248]	; (800c790 <SVCCTL_App_Notification+0x2a8>)
 800c696:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c698:	4618      	mov	r0, r3
 800c69a:	f7fe fc38 	bl	800af0e <aci_gatt_disc_all_primary_services>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
          break; /* HCI_EVT_LE_CONN_COMPLETE */
 800c6a4:	e06a      	b.n	800c77c <SVCCTL_App_Notification+0x294>
          le_advertising_event = (hci_le_advertising_report_event_rp0 *) meta_evt->data;
 800c6a6:	6a3b      	ldr	r3, [r7, #32]
 800c6a8:	3301      	adds	r3, #1
 800c6aa:	61fb      	str	r3, [r7, #28]
          event_type = le_advertising_event->Advertising_Report[0].Event_Type;
 800c6ac:	69fb      	ldr	r3, [r7, #28]
 800c6ae:	785b      	ldrb	r3, [r3, #1]
 800c6b0:	76fb      	strb	r3, [r7, #27]
          event_data_size = le_advertising_event->Advertising_Report[0].Length_Data;
 800c6b2:	69fb      	ldr	r3, [r7, #28]
 800c6b4:	7a5b      	ldrb	r3, [r3, #9]
 800c6b6:	76bb      	strb	r3, [r7, #26]
          adv_report_data = (uint8_t*)(&le_advertising_event->Advertising_Report[0].Length_Data) + 1;
 800c6b8:	69fb      	ldr	r3, [r7, #28]
 800c6ba:	3309      	adds	r3, #9
 800c6bc:	3301      	adds	r3, #1
 800c6be:	617b      	str	r3, [r7, #20]
          k = 0;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          if (event_type == ADV_IND)
 800c6c4:	7efb      	ldrb	r3, [r7, #27]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d157      	bne.n	800c77a <SVCCTL_App_Notification+0x292>
            while(k < event_data_size)
 800c6ca:	e052      	b.n	800c772 <SVCCTL_App_Notification+0x28a>
              adlength = adv_report_data[k];
 800c6cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6ce:	697a      	ldr	r2, [r7, #20]
 800c6d0:	4413      	add	r3, r2
 800c6d2:	781b      	ldrb	r3, [r3, #0]
 800c6d4:	74fb      	strb	r3, [r7, #19]
              adtype = adv_report_data[k + 1];
 800c6d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6d8:	3301      	adds	r3, #1
 800c6da:	697a      	ldr	r2, [r7, #20]
 800c6dc:	4413      	add	r3, r2
 800c6de:	781b      	ldrb	r3, [r3, #0]
 800c6e0:	74bb      	strb	r3, [r7, #18]
              switch (adtype)
 800c6e2:	7cbb      	ldrb	r3, [r7, #18]
 800c6e4:	2b0a      	cmp	r3, #10
 800c6e6:	d03a      	beq.n	800c75e <SVCCTL_App_Notification+0x276>
 800c6e8:	2b0a      	cmp	r3, #10
 800c6ea:	dc02      	bgt.n	800c6f2 <SVCCTL_App_Notification+0x20a>
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	d038      	beq.n	800c762 <SVCCTL_App_Notification+0x27a>
                  break;
 800c6f0:	e03a      	b.n	800c768 <SVCCTL_App_Notification+0x280>
              switch (adtype)
 800c6f2:	2b16      	cmp	r3, #22
 800c6f4:	d037      	beq.n	800c766 <SVCCTL_App_Notification+0x27e>
 800c6f6:	2bff      	cmp	r3, #255	; 0xff
 800c6f8:	d000      	beq.n	800c6fc <SVCCTL_App_Notification+0x214>
                  break;
 800c6fa:	e035      	b.n	800c768 <SVCCTL_App_Notification+0x280>
                  if (adlength >= 7 && adv_report_data[k + 2] == 0x01)
 800c6fc:	7cfb      	ldrb	r3, [r7, #19]
 800c6fe:	2b06      	cmp	r3, #6
 800c700:	d92b      	bls.n	800c75a <SVCCTL_App_Notification+0x272>
 800c702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c704:	3302      	adds	r3, #2
 800c706:	697a      	ldr	r2, [r7, #20]
 800c708:	4413      	add	r3, r2
 800c70a:	781b      	ldrb	r3, [r3, #0]
 800c70c:	2b01      	cmp	r3, #1
 800c70e:	d124      	bne.n	800c75a <SVCCTL_App_Notification+0x272>
                    switch (adv_report_data[k + 3])
 800c710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c712:	3303      	adds	r3, #3
 800c714:	697a      	ldr	r2, [r7, #20]
 800c716:	4413      	add	r3, r2
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	2b83      	cmp	r3, #131	; 0x83
 800c71c:	d000      	beq.n	800c720 <SVCCTL_App_Notification+0x238>
                        break;
 800c71e:	e01d      	b.n	800c75c <SVCCTL_App_Notification+0x274>
                        BleApplicationContext.DeviceServerFound = 0x01;
 800c720:	4b1b      	ldr	r3, [pc, #108]	; (800c790 <SVCCTL_App_Notification+0x2a8>)
 800c722:	2201      	movs	r2, #1
 800c724:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                        SERVER_REMOTE_BDADDR[0] = le_advertising_event->Advertising_Report[0].Address[0];
 800c728:	69fb      	ldr	r3, [r7, #28]
 800c72a:	78da      	ldrb	r2, [r3, #3]
 800c72c:	4b1b      	ldr	r3, [pc, #108]	; (800c79c <SVCCTL_App_Notification+0x2b4>)
 800c72e:	701a      	strb	r2, [r3, #0]
                        SERVER_REMOTE_BDADDR[1] = le_advertising_event->Advertising_Report[0].Address[1];
 800c730:	69fb      	ldr	r3, [r7, #28]
 800c732:	791a      	ldrb	r2, [r3, #4]
 800c734:	4b19      	ldr	r3, [pc, #100]	; (800c79c <SVCCTL_App_Notification+0x2b4>)
 800c736:	705a      	strb	r2, [r3, #1]
                        SERVER_REMOTE_BDADDR[2] = le_advertising_event->Advertising_Report[0].Address[2];
 800c738:	69fb      	ldr	r3, [r7, #28]
 800c73a:	795a      	ldrb	r2, [r3, #5]
 800c73c:	4b17      	ldr	r3, [pc, #92]	; (800c79c <SVCCTL_App_Notification+0x2b4>)
 800c73e:	709a      	strb	r2, [r3, #2]
                        SERVER_REMOTE_BDADDR[3] = le_advertising_event->Advertising_Report[0].Address[3];
 800c740:	69fb      	ldr	r3, [r7, #28]
 800c742:	799a      	ldrb	r2, [r3, #6]
 800c744:	4b15      	ldr	r3, [pc, #84]	; (800c79c <SVCCTL_App_Notification+0x2b4>)
 800c746:	70da      	strb	r2, [r3, #3]
                        SERVER_REMOTE_BDADDR[4] = le_advertising_event->Advertising_Report[0].Address[4];
 800c748:	69fb      	ldr	r3, [r7, #28]
 800c74a:	79da      	ldrb	r2, [r3, #7]
 800c74c:	4b13      	ldr	r3, [pc, #76]	; (800c79c <SVCCTL_App_Notification+0x2b4>)
 800c74e:	711a      	strb	r2, [r3, #4]
                        SERVER_REMOTE_BDADDR[5] = le_advertising_event->Advertising_Report[0].Address[5];
 800c750:	69fb      	ldr	r3, [r7, #28]
 800c752:	7a1a      	ldrb	r2, [r3, #8]
 800c754:	4b11      	ldr	r3, [pc, #68]	; (800c79c <SVCCTL_App_Notification+0x2b4>)
 800c756:	715a      	strb	r2, [r3, #5]
                        break;
 800c758:	e000      	b.n	800c75c <SVCCTL_App_Notification+0x274>
                  }
 800c75a:	bf00      	nop
                  break;
 800c75c:	e004      	b.n	800c768 <SVCCTL_App_Notification+0x280>
                break;
 800c75e:	bf00      	nop
 800c760:	e002      	b.n	800c768 <SVCCTL_App_Notification+0x280>
                  break;
 800c762:	bf00      	nop
 800c764:	e000      	b.n	800c768 <SVCCTL_App_Notification+0x280>
                  break;
 800c766:	bf00      	nop
              k += adlength + 1;
 800c768:	7cfb      	ldrb	r3, [r7, #19]
 800c76a:	3301      	adds	r3, #1
 800c76c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c76e:	4413      	add	r3, r2
 800c770:	63fb      	str	r3, [r7, #60]	; 0x3c
            while(k < event_data_size)
 800c772:	7ebb      	ldrb	r3, [r7, #26]
 800c774:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c776:	429a      	cmp	r2, r3
 800c778:	dba8      	blt.n	800c6cc <SVCCTL_App_Notification+0x1e4>
          break;
 800c77a:	bf00      	nop
      break; /* HCI_EVT_LE_META_EVENT */
 800c77c:	e000      	b.n	800c780 <SVCCTL_App_Notification+0x298>
      break; /* EVT_DISCONN_COMPLETE */
 800c77e:	bf00      	nop
   }
  return (SVCCTL_UserEvtFlowEnable);
 800c780:	2301      	movs	r3, #1
}
 800c782:	4618      	mov	r0, r3
 800c784:	3744      	adds	r7, #68	; 0x44
 800c786:	46bd      	mov	sp, r7
 800c788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c78a:	bf00      	nop
 800c78c:	20000740 	.word	0x20000740
 800c790:	20000278 	.word	0x20000278
 800c794:	2000074c 	.word	0x2000074c
 800c798:	48000400 	.word	0x48000400
 800c79c:	20000744 	.word	0x20000744

0800c7a0 <APP_BLE_Get_Client_Connection_Status>:

APP_BLE_ConnStatus_t APP_BLE_Get_Client_Connection_Status( uint16_t Connection_Handle )
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b083      	sub	sp, #12
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	80fb      	strh	r3, [r7, #6]

  if (BleApplicationContext.BleApplicationContext_legacy.connectionHandle == Connection_Handle)
 800c7aa:	4b08      	ldr	r3, [pc, #32]	; (800c7cc <APP_BLE_Get_Client_Connection_Status+0x2c>)
 800c7ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c7ae:	88fa      	ldrh	r2, [r7, #6]
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d103      	bne.n	800c7bc <APP_BLE_Get_Client_Connection_Status+0x1c>
  {
    return BleApplicationContext.Device_Connection_Status;
 800c7b4:	4b05      	ldr	r3, [pc, #20]	; (800c7cc <APP_BLE_Get_Client_Connection_Status+0x2c>)
 800c7b6:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800c7ba:	e000      	b.n	800c7be <APP_BLE_Get_Client_Connection_Status+0x1e>
  }
  return APP_BLE_IDLE;
 800c7bc:	2300      	movs	r3, #0
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	370c      	adds	r7, #12
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c8:	4770      	bx	lr
 800c7ca:	bf00      	nop
 800c7cc:	20000278 	.word	0x20000278

0800c7d0 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b082      	sub	sp, #8
 800c7d4:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800c7d6:	4b06      	ldr	r3, [pc, #24]	; (800c7f0 <Ble_Tl_Init+0x20>)
 800c7d8:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800c7da:	4b06      	ldr	r3, [pc, #24]	; (800c7f4 <Ble_Tl_Init+0x24>)
 800c7dc:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800c7de:	463b      	mov	r3, r7
 800c7e0:	4619      	mov	r1, r3
 800c7e2:	4805      	ldr	r0, [pc, #20]	; (800c7f8 <Ble_Tl_Init+0x28>)
 800c7e4:	f7ff f8b4 	bl	800b950 <hci_init>

  return;
 800c7e8:	bf00      	nop
}
 800c7ea:	3708      	adds	r7, #8
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}
 800c7f0:	200300b8 	.word	0x200300b8
 800c7f4:	0800cb39 	.word	0x0800cb39
 800c7f8:	0800cb01 	.word	0x0800cb01

0800c7fc <Ble_Hci_Gap_Gatt_Init>:

 static void Ble_Hci_Gap_Gatt_Init(void){
 800c7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7fe:	b091      	sub	sp, #68	; 0x44
 800c800:	af06      	add	r7, sp, #24
  uint8_t role;
  uint8_t index;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE }; 
 800c802:	2300      	movs	r3, #0
 800c804:	80bb      	strh	r3, [r7, #4]
  
  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
   hci_reset();
 800c806:	f7fe fe66 	bl	800b4d6 <hci_reset>
  
   /**
   * Write the BD Address
   */
 
  bd_addr = BleGetBdAddress();
 800c80a:	f000 f913 	bl	800ca34 <BleGetBdAddress>
 800c80e:	6238      	str	r0, [r7, #32]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800c810:	6a3a      	ldr	r2, [r7, #32]
 800c812:	2106      	movs	r1, #6
 800c814:	2000      	movs	r0, #0
 800c816:	f7fe fd3f 	bl	800b298 <aci_hal_write_config_data>
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 800c81a:	f64e 536e 	movw	r3, #60782	; 0xed6e
 800c81e:	60fb      	str	r3, [r7, #12]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 800c820:	f7ff fdee 	bl	800c400 <LL_FLASH_GetUDN>
 800c824:	4603      	mov	r3, r0
 800c826:	60bb      	str	r3, [r7, #8]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 800c828:	f107 0308 	add.w	r3, r7, #8
 800c82c:	461a      	mov	r2, r3
 800c82e:	2106      	movs	r1, #6
 800c830:	202e      	movs	r0, #46	; 0x2e
 800c832:	f7fe fd31 	bl	800b298 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK 
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800c836:	4a49      	ldr	r2, [pc, #292]	; (800c95c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800c838:	2110      	movs	r1, #16
 800c83a:	2018      	movs	r0, #24
 800c83c:	f7fe fd2c 	bl	800b298 <aci_hal_write_config_data>
    
   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 800c840:	4a47      	ldr	r2, [pc, #284]	; (800c960 <Ble_Hci_Gap_Gatt_Init+0x164>)
 800c842:	2110      	movs	r1, #16
 800c844:	2008      	movs	r0, #8
 800c846:	f7fe fd27 	bl	800b298 <aci_hal_write_config_data>
  
  /**
     * Set TX Power to 0dBm.
     */
    aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800c84a:	2118      	movs	r1, #24
 800c84c:	2001      	movs	r0, #1
 800c84e:	f7fe fd93 	bl	800b378 <aci_hal_set_tx_power_level>
  
/**
   * Initialize GATT interface
   */
  aci_gatt_init();
 800c852:	f7fe faa4 	bl	800ad9e <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 800c856:	2300      	movs	r3, #0
 800c858:	77fb      	strb	r3, [r7, #31]
#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
#endif

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
 800c85a:	7ffb      	ldrb	r3, [r7, #31]
 800c85c:	f043 0304 	orr.w	r3, r3, #4
 800c860:	77fb      	strb	r3, [r7, #31]
#endif

  if (role > 0)
 800c862:	7ffb      	ldrb	r3, [r7, #31]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d01e      	beq.n	800c8a6 <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    const char *name = "STM32WB";
 800c868:	4b3e      	ldr	r3, [pc, #248]	; (800c964 <Ble_Hci_Gap_Gatt_Init+0x168>)
 800c86a:	61bb      	str	r3, [r7, #24]

    aci_gap_init(role, 0,
 800c86c:	f107 0216 	add.w	r2, r7, #22
 800c870:	7ff8      	ldrb	r0, [r7, #31]
 800c872:	f107 0312 	add.w	r3, r7, #18
 800c876:	9301      	str	r3, [sp, #4]
 800c878:	f107 0314 	add.w	r3, r7, #20
 800c87c:	9300      	str	r3, [sp, #0]
 800c87e:	4613      	mov	r3, r2
 800c880:	2207      	movs	r2, #7
 800c882:	2100      	movs	r1, #0
 800c884:	f7fe f88c 	bl	800a9a0 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800c888:	8afc      	ldrh	r4, [r7, #22]
 800c88a:	8abd      	ldrh	r5, [r7, #20]
 800c88c:	69b8      	ldr	r0, [r7, #24]
 800c88e:	f7f3 fc77 	bl	8000180 <strlen>
 800c892:	4603      	mov	r3, r0
 800c894:	b2da      	uxtb	r2, r3
 800c896:	69bb      	ldr	r3, [r7, #24]
 800c898:	9300      	str	r3, [sp, #0]
 800c89a:	4613      	mov	r3, r2
 800c89c:	2200      	movs	r2, #0
 800c89e:	4629      	mov	r1, r5
 800c8a0:	4620      	mov	r0, r4
 800c8a2:	f7fe faa6 	bl	800adf2 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

    if(aci_gatt_update_char_value(gap_service_handle,
 800c8a6:	8af8      	ldrh	r0, [r7, #22]
 800c8a8:	8a79      	ldrh	r1, [r7, #18]
 800c8aa:	1d3b      	adds	r3, r7, #4
 800c8ac:	9300      	str	r3, [sp, #0]
 800c8ae:	2302      	movs	r3, #2
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	f7fe fa9e 	bl	800adf2 <aci_gatt_update_char_value>
    }

    /**
     * Initialize IO capability
     */
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800c8b6:	4b2c      	ldr	r3, [pc, #176]	; (800c968 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800c8b8:	2201      	movs	r2, #1
 800c8ba:	701a      	strb	r2, [r3, #0]
    aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800c8bc:	4b2a      	ldr	r3, [pc, #168]	; (800c968 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800c8be:	781b      	ldrb	r3, [r3, #0]
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f7fd ff6d 	bl	800a7a0 <aci_gap_set_io_capability>

    /**
     * Initialize authentication
     */
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800c8c6:	4b28      	ldr	r3, [pc, #160]	; (800c968 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	705a      	strb	r2, [r3, #1]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 800c8cc:	4b26      	ldr	r3, [pc, #152]	; (800c968 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	70da      	strb	r2, [r3, #3]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = 8;
 800c8d2:	4b25      	ldr	r3, [pc, #148]	; (800c968 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800c8d4:	2208      	movs	r2, #8
 800c8d6:	755a      	strb	r2, [r3, #21]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
 800c8d8:	4b23      	ldr	r3, [pc, #140]	; (800c968 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800c8da:	2210      	movs	r2, #16
 800c8dc:	759a      	strb	r2, [r3, #22]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = 1;
 800c8de:	4b22      	ldr	r3, [pc, #136]	; (800c968 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	751a      	strb	r2, [r3, #20]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
 800c8e4:	4b20      	ldr	r3, [pc, #128]	; (800c968 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800c8e6:	4a21      	ldr	r2, [pc, #132]	; (800c96c <Ble_Hci_Gap_Gatt_Init+0x170>)
 800c8e8:	619a      	str	r2, [r3, #24]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = 1;
 800c8ea:	4b1f      	ldr	r3, [pc, #124]	; (800c968 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800c8ec:	2201      	movs	r2, #1
 800c8ee:	709a      	strb	r2, [r3, #2]
    for (index = 0; index < 16; index++)
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c8f6:	e00b      	b.n	800c910 <Ble_Hci_Gap_Gatt_Init+0x114>
    {
      BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 800c8f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8fc:	4a1a      	ldr	r2, [pc, #104]	; (800c968 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800c8fe:	4413      	add	r3, r2
 800c900:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c904:	711a      	strb	r2, [r3, #4]
    for (index = 0; index < 16; index++)
 800c906:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c90a:	3301      	adds	r3, #1
 800c90c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c914:	2b0f      	cmp	r3, #15
 800c916:	d9ef      	bls.n	800c8f8 <Ble_Hci_Gap_Gatt_Init+0xfc>
    }

    aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800c918:	4b13      	ldr	r3, [pc, #76]	; (800c968 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800c91a:	789d      	ldrb	r5, [r3, #2]
 800c91c:	4b12      	ldr	r3, [pc, #72]	; (800c968 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800c91e:	785e      	ldrb	r6, [r3, #1]
 800c920:	4b11      	ldr	r3, [pc, #68]	; (800c968 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800c922:	7d5b      	ldrb	r3, [r3, #21]
 800c924:	4a10      	ldr	r2, [pc, #64]	; (800c968 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800c926:	7d92      	ldrb	r2, [r2, #22]
 800c928:	490f      	ldr	r1, [pc, #60]	; (800c968 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800c92a:	7d09      	ldrb	r1, [r1, #20]
 800c92c:	480e      	ldr	r0, [pc, #56]	; (800c968 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800c92e:	6980      	ldr	r0, [r0, #24]
 800c930:	2400      	movs	r4, #0
 800c932:	9404      	str	r4, [sp, #16]
 800c934:	9003      	str	r0, [sp, #12]
 800c936:	9102      	str	r1, [sp, #8]
 800c938:	9201      	str	r2, [sp, #4]
 800c93a:	9300      	str	r3, [sp, #0]
 800c93c:	2300      	movs	r3, #0
 800c93e:	2200      	movs	r2, #0
 800c940:	4631      	mov	r1, r6
 800c942:	4628      	mov	r0, r5
 800c944:	f7fd ff7d 	bl	800a842 <aci_gap_set_authentication_requirement>
                                           );

    /**
     * Initialize whitelist
     */
    if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800c948:	4b07      	ldr	r3, [pc, #28]	; (800c968 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800c94a:	789b      	ldrb	r3, [r3, #2]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d001      	beq.n	800c954 <Ble_Hci_Gap_Gatt_Init+0x158>
    {
      aci_gap_configure_whitelist();
 800c950:	f7fe f8b1 	bl	800aab6 <aci_gap_configure_whitelist>
    }
  
}
 800c954:	bf00      	nop
 800c956:	372c      	adds	r7, #44	; 0x2c
 800c958:	46bd      	mov	sp, r7
 800c95a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c95c:	0800e540 	.word	0x0800e540
 800c960:	0800e550 	.word	0x0800e550
 800c964:	0800e420 	.word	0x0800e420
 800c968:	20000278 	.word	0x20000278
 800c96c:	0001b207 	.word	0x0001b207

0800c970 <Scan_Request>:

static void Scan_Request( void )
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b082      	sub	sp, #8
 800c974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Scan_Request_1 */

  /* USER CODE END Scan_Request_1 */
  tBleStatus result;
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 800c976:	4b0e      	ldr	r3, [pc, #56]	; (800c9b0 <Scan_Request+0x40>)
 800c978:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800c97c:	2b06      	cmp	r3, #6
 800c97e:	d012      	beq.n	800c9a6 <Scan_Request+0x36>
  {
    /* USER CODE BEGIN APP_BLE_CONNECTED_CLIENT */

    /* USER CODE END APP_BLE_CONNECTED_CLIENT */
    result = aci_gap_start_general_discovery_proc(SCAN_P, SCAN_L, PUBLIC_ADDR, 1);
 800c980:	2301      	movs	r3, #1
 800c982:	2200      	movs	r2, #0
 800c984:	f44f 7148 	mov.w	r1, #800	; 0x320
 800c988:	f44f 7048 	mov.w	r0, #800	; 0x320
 800c98c:	f7fe f8bc 	bl	800ab08 <aci_gap_start_general_discovery_proc>
 800c990:	4603      	mov	r3, r0
 800c992:	71fb      	strb	r3, [r7, #7]
    if (result == BLE_STATUS_SUCCESS)
 800c994:	79fb      	ldrb	r3, [r7, #7]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d105      	bne.n	800c9a6 <Scan_Request+0x36>
    {
    /* USER CODE BEGIN BLE_SCAN_SUCCESS */
    	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 800c99a:	2201      	movs	r2, #1
 800c99c:	2120      	movs	r1, #32
 800c99e:	4805      	ldr	r0, [pc, #20]	; (800c9b4 <Scan_Request+0x44>)
 800c9a0:	f7f6 f8d8 	bl	8002b54 <HAL_GPIO_WritePin>
    }
  }
  /* USER CODE BEGIN Scan_Request_2 */

  /* USER CODE END Scan_Request_2 */
  return;
 800c9a4:	bf00      	nop
 800c9a6:	bf00      	nop
}
 800c9a8:	3708      	adds	r7, #8
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}
 800c9ae:	bf00      	nop
 800c9b0:	20000278 	.word	0x20000278
 800c9b4:	48000400 	.word	0x48000400

0800c9b8 <Connect_Request>:

static void Connect_Request( void )
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b08a      	sub	sp, #40	; 0x28
 800c9bc:	af08      	add	r7, sp, #32

  /* USER CODE END Connect_Request_1 */
  tBleStatus result;
  APP_DBG_MSG("\r\n\r** CREATE CONNECTION TO SERVER **  \r\n\r");

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 800c9be:	4b17      	ldr	r3, [pc, #92]	; (800ca1c <Connect_Request+0x64>)
 800c9c0:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800c9c4:	2b06      	cmp	r3, #6
 800c9c6:	d025      	beq.n	800ca14 <Connect_Request+0x5c>
  {
    result = aci_gap_create_connection(SCAN_P,
 800c9c8:	2310      	movs	r3, #16
 800c9ca:	9306      	str	r3, [sp, #24]
 800c9cc:	2310      	movs	r3, #16
 800c9ce:	9305      	str	r3, [sp, #20]
 800c9d0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800c9d4:	9304      	str	r3, [sp, #16]
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	9303      	str	r3, [sp, #12]
 800c9da:	2350      	movs	r3, #80	; 0x50
 800c9dc:	9302      	str	r3, [sp, #8]
 800c9de:	2328      	movs	r3, #40	; 0x28
 800c9e0:	9301      	str	r3, [sp, #4]
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	9300      	str	r3, [sp, #0]
 800c9e6:	4b0e      	ldr	r3, [pc, #56]	; (800ca20 <Connect_Request+0x68>)
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	f44f 7148 	mov.w	r1, #800	; 0x320
 800c9ee:	f44f 7048 	mov.w	r0, #800	; 0x320
 800c9f2:	f7fe f908 	bl	800ac06 <aci_gap_create_connection>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	71fb      	strb	r3, [r7, #7]
                                       0,
                                       SUPERV_TIMEOUT,
                                       CONN_L1,
                                       CONN_L2);

    if (result == BLE_STATUS_SUCCESS)
 800c9fa:	79fb      	ldrb	r3, [r7, #7]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d104      	bne.n	800ca0a <Connect_Request+0x52>
    {
    /* USER CODE BEGIN BLE_CONNECT_SUCCESS */

    /* USER CODE END BLE_CONNECT_SUCCESS */
    BleApplicationContext.Device_Connection_Status = APP_BLE_LP_CONNECTING;
 800ca00:	4b06      	ldr	r3, [pc, #24]	; (800ca1c <Connect_Request+0x64>)
 800ca02:	2204      	movs	r2, #4
 800ca04:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
    }
  }
  /* USER CODE BEGIN Connect_Request_2 */

  /* USER CODE END Connect_Request_2 */
  return;
 800ca08:	e004      	b.n	800ca14 <Connect_Request+0x5c>
      BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800ca0a:	4b04      	ldr	r3, [pc, #16]	; (800ca1c <Connect_Request+0x64>)
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  return;
 800ca12:	bf00      	nop
 800ca14:	bf00      	nop
}
 800ca16:	3708      	adds	r7, #8
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}
 800ca1c:	20000278 	.word	0x20000278
 800ca20:	20000744 	.word	0x20000744

0800ca24 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 800ca24:	b480      	push	{r7}
 800ca26:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */
	//BSP_LED_Off(LED_GREEN);
	//HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
/* USER CODE END Switch_OFF_GPIO */
}
 800ca28:	bf00      	nop
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca30:	4770      	bx	lr
	...

0800ca34 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b086      	sub	sp, #24
 800ca38:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800ca3a:	f7ff fce1 	bl	800c400 <LL_FLASH_GetUDN>
 800ca3e:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca46:	d023      	beq.n	800ca90 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800ca48:	f7ff fcf2 	bl	800c430 <LL_FLASH_GetSTCompanyID>
 800ca4c:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800ca4e:	f7ff fce3 	bl	800c418 <LL_FLASH_GetDeviceID>
 800ca52:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	b2da      	uxtb	r2, r3
 800ca58:	4b16      	ldr	r3, [pc, #88]	; (800cab4 <BleGetBdAddress+0x80>)
 800ca5a:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	0a1b      	lsrs	r3, r3, #8
 800ca60:	b2da      	uxtb	r2, r3
 800ca62:	4b14      	ldr	r3, [pc, #80]	; (800cab4 <BleGetBdAddress+0x80>)
 800ca64:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 800ca66:	693b      	ldr	r3, [r7, #16]
 800ca68:	0c1b      	lsrs	r3, r3, #16
 800ca6a:	b2da      	uxtb	r2, r3
 800ca6c:	4b11      	ldr	r3, [pc, #68]	; (800cab4 <BleGetBdAddress+0x80>)
 800ca6e:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	b2da      	uxtb	r2, r3
 800ca74:	4b0f      	ldr	r3, [pc, #60]	; (800cab4 <BleGetBdAddress+0x80>)
 800ca76:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 800ca78:	68bb      	ldr	r3, [r7, #8]
 800ca7a:	b2da      	uxtb	r2, r3
 800ca7c:	4b0d      	ldr	r3, [pc, #52]	; (800cab4 <BleGetBdAddress+0x80>)
 800ca7e:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	0a1b      	lsrs	r3, r3, #8
 800ca84:	b2da      	uxtb	r2, r3
 800ca86:	4b0b      	ldr	r3, [pc, #44]	; (800cab4 <BleGetBdAddress+0x80>)
 800ca88:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 800ca8a:	4b0a      	ldr	r3, [pc, #40]	; (800cab4 <BleGetBdAddress+0x80>)
 800ca8c:	617b      	str	r3, [r7, #20]
 800ca8e:	e00b      	b.n	800caa8 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800ca90:	2000      	movs	r0, #0
 800ca92:	f7ff fbd9 	bl	800c248 <OTP_Read>
 800ca96:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d002      	beq.n	800caa4 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	617b      	str	r3, [r7, #20]
 800caa2:	e001      	b.n	800caa8 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 800caa4:	4b04      	ldr	r3, [pc, #16]	; (800cab8 <BleGetBdAddress+0x84>)
 800caa6:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 800caa8:	697b      	ldr	r3, [r7, #20]
}
 800caaa:	4618      	mov	r0, r3
 800caac:	3718      	adds	r7, #24
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}
 800cab2:	bf00      	nop
 800cab4:	2000045c 	.word	0x2000045c
 800cab8:	0800e538 	.word	0x0800e538

0800cabc <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b082      	sub	sp, #8
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800cac4:	2100      	movs	r1, #0
 800cac6:	2020      	movs	r0, #32
 800cac8:	f7f4 ffe6 	bl	8001a98 <UTIL_SEQ_SetTask>
  return;
 800cacc:	bf00      	nop
}
 800cace:	3708      	adds	r7, #8
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}

0800cad4 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b082      	sub	sp, #8
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800cadc:	2001      	movs	r0, #1
 800cade:	f7f5 f841 	bl	8001b64 <UTIL_SEQ_SetEvt>
  return;
 800cae2:	bf00      	nop
}
 800cae4:	3708      	adds	r7, #8
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}

0800caea <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800caea:	b580      	push	{r7, lr}
 800caec:	b082      	sub	sp, #8
 800caee:	af00      	add	r7, sp, #0
 800caf0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800caf2:	2001      	movs	r0, #1
 800caf4:	f7f5 f854 	bl	8001ba0 <UTIL_SEQ_WaitEvt>
  return;
 800caf8:	bf00      	nop
}
 800cafa:	3708      	adds	r7, #8
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}

0800cb00 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b084      	sub	sp, #16
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload; 
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	60fb      	str	r3, [r7, #12]
  
  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	685b      	ldr	r3, [r3, #4]
 800cb10:	3308      	adds	r3, #8
 800cb12:	4618      	mov	r0, r3
 800cb14:	f7fe fe96 	bl	800b844 <SVCCTL_UserEvtRx>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800cb1c:	7afb      	ldrb	r3, [r7, #11]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d003      	beq.n	800cb2a <BLE_UserEvtRx+0x2a>
{
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	2201      	movs	r2, #1
 800cb26:	701a      	strb	r2, [r3, #0]
}
  else
{
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 800cb28:	e002      	b.n	800cb30 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	701a      	strb	r2, [r3, #0]
}
 800cb30:	bf00      	nop
 800cb32:	3710      	adds	r7, #16
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b084      	sub	sp, #16
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	4603      	mov	r3, r0
 800cb40:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 800cb42:	79fb      	ldrb	r3, [r7, #7]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d002      	beq.n	800cb4e <BLE_StatusNot+0x16>
 800cb48:	2b01      	cmp	r3, #1
 800cb4a:	d006      	beq.n	800cb5a <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 800cb4c:	e00b      	b.n	800cb66 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800cb4e:	233f      	movs	r3, #63	; 0x3f
 800cb50:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800cb52:	68f8      	ldr	r0, [r7, #12]
 800cb54:	f7f4 ffca 	bl	8001aec <UTIL_SEQ_PauseTask>
      break;
 800cb58:	e005      	b.n	800cb66 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800cb5a:	233f      	movs	r3, #63	; 0x3f
 800cb5c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800cb5e:	68f8      	ldr	r0, [r7, #12]
 800cb60:	f7f4 ffe2 	bl	8001b28 <UTIL_SEQ_ResumeTask>
      break;
 800cb64:	bf00      	nop
  }
  return;
 800cb66:	bf00      	nop
}
 800cb68:	3710      	adds	r7, #16
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}
	...

0800cb70 <P2PC_APP_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PC_APP_Init(void)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b082      	sub	sp, #8
 800cb74:	af00      	add	r7, sp, #0
  uint8_t index =0;
 800cb76:	2300      	movs	r3, #0
 800cb78:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN P2PC_APP_Init_1 */

  UTIL_SEQ_RegTask( 1<< CFG_TASK_SEARCH_SERVICE_ID, UTIL_SEQ_RFU, Update_Service );
 800cb7a:	4a0d      	ldr	r2, [pc, #52]	; (800cbb0 <P2PC_APP_Init+0x40>)
 800cb7c:	2100      	movs	r1, #0
 800cb7e:	2004      	movs	r0, #4
 800cb80:	f7f4 ff6a 	bl	8001a58 <UTIL_SEQ_RegTask>

  /**
   * Initialize LedButton Service
   */

  for(index = 0; index < BLE_CFG_CLT_MAX_NBR_CB; index++)
 800cb84:	2300      	movs	r3, #0
 800cb86:	71fb      	strb	r3, [r7, #7]
 800cb88:	e008      	b.n	800cb9c <P2PC_APP_Init+0x2c>
  {
    aP2PClientContext[index].state= APP_BLE_IDLE;
 800cb8a:	79fb      	ldrb	r3, [r7, #7]
 800cb8c:	4a09      	ldr	r2, [pc, #36]	; (800cbb4 <P2PC_APP_Init+0x44>)
 800cb8e:	011b      	lsls	r3, r3, #4
 800cb90:	4413      	add	r3, r2
 800cb92:	2200      	movs	r2, #0
 800cb94:	701a      	strb	r2, [r3, #0]
  for(index = 0; index < BLE_CFG_CLT_MAX_NBR_CB; index++)
 800cb96:	79fb      	ldrb	r3, [r7, #7]
 800cb98:	3301      	adds	r3, #1
 800cb9a:	71fb      	strb	r3, [r7, #7]
 800cb9c:	79fb      	ldrb	r3, [r7, #7]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d0f3      	beq.n	800cb8a <P2PC_APP_Init+0x1a>
  }

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterCltHandler(Event_Handler);
 800cba2:	4805      	ldr	r0, [pc, #20]	; (800cbb8 <P2PC_APP_Init+0x48>)
 800cba4:	f7fe fe34 	bl	800b810 <SVCCTL_RegisterCltHandler>
#endif

/* USER CODE BEGIN P2PC_APP_Init_2 */

/* USER CODE END P2PC_APP_Init_2 */
  return;
 800cba8:	bf00      	nop
}
 800cbaa:	3708      	adds	r7, #8
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}
 800cbb0:	0800d181 	.word	0x0800d181
 800cbb4:	2000030c 	.word	0x2000030c
 800cbb8:	0800cc19 	.word	0x0800cc19

0800cbbc <P2PC_APP_Notification>:

void P2PC_APP_Notification(P2PC_APP_ConnHandle_Not_evt_t *pNotification)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b084      	sub	sp, #16
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PC_APP_Notification_1 */

/* USER CODE END P2PC_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	781b      	ldrb	r3, [r3, #0]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d01b      	beq.n	800cc04 <P2PC_APP_Notification+0x48>
 800cbcc:	2b01      	cmp	r3, #1
 800cbce:	d000      	beq.n	800cbd2 <P2PC_APP_Notification+0x16>

    default:
/* USER CODE BEGIN P2P_Evt_Opcode_Default */

/* USER CODE END P2P_Evt_Opcode_Default */
      break;
 800cbd0:	e019      	b.n	800cc06 <P2PC_APP_Notification+0x4a>
      uint8_t index = 0;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	73fb      	strb	r3, [r7, #15]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800cbd6:	e005      	b.n	800cbe4 <P2PC_APP_Notification+0x28>
        aP2PClientContext[index].state = APP_BLE_IDLE;
 800cbd8:	7bfb      	ldrb	r3, [r7, #15]
 800cbda:	4a0d      	ldr	r2, [pc, #52]	; (800cc10 <P2PC_APP_Notification+0x54>)
 800cbdc:	011b      	lsls	r3, r3, #4
 800cbde:	4413      	add	r3, r2
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	701a      	strb	r2, [r3, #0]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800cbe4:	7bfb      	ldrb	r3, [r7, #15]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d106      	bne.n	800cbf8 <P2PC_APP_Notification+0x3c>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
 800cbea:	7bfb      	ldrb	r3, [r7, #15]
 800cbec:	4a08      	ldr	r2, [pc, #32]	; (800cc10 <P2PC_APP_Notification+0x54>)
 800cbee:	011b      	lsls	r3, r3, #4
 800cbf0:	4413      	add	r3, r2
 800cbf2:	781b      	ldrb	r3, [r3, #0]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d1ef      	bne.n	800cbd8 <P2PC_APP_Notification+0x1c>
      HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	2120      	movs	r1, #32
 800cbfc:	4805      	ldr	r0, [pc, #20]	; (800cc14 <P2PC_APP_Notification+0x58>)
 800cbfe:	f7f5 ffa9 	bl	8002b54 <HAL_GPIO_WritePin>
      break;
 800cc02:	e000      	b.n	800cc06 <P2PC_APP_Notification+0x4a>
      break;
 800cc04:	bf00      	nop
/* USER CODE BEGIN P2PC_APP_Notification_2 */

/* USER CODE END P2PC_APP_Notification_2 */
  return;
  }
}
 800cc06:	bf00      	nop
 800cc08:	3710      	adds	r7, #16
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}
 800cc0e:	bf00      	nop
 800cc10:	2000030c 	.word	0x2000030c
 800cc14:	48000400 	.word	0x48000400

0800cc18 <Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Event_Handler(void *Event)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b094      	sub	sp, #80	; 0x50
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;

  P2P_Client_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800cc20:	2300      	movs	r3, #0
 800cc22:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	3301      	adds	r3, #1
 800cc2a:	643b      	str	r3, [r7, #64]	; 0x40

  switch(event_pckt->evt)
 800cc2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc2e:	781b      	ldrb	r3, [r3, #0]
 800cc30:	2bff      	cmp	r3, #255	; 0xff
 800cc32:	d000      	beq.n	800cc36 <Event_Handler+0x1e>
    }

    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800cc34:	e27b      	b.n	800d12e <Event_Handler+0x516>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 800cc36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc38:	3302      	adds	r3, #2
 800cc3a:	63fb      	str	r3, [r7, #60]	; 0x3c
      switch(blue_evt->ecode)
 800cc3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc3e:	881b      	ldrh	r3, [r3, #0]
 800cc40:	b29b      	uxth	r3, r3
 800cc42:	f6a3 4304 	subw	r3, r3, #3076	; 0xc04
 800cc46:	2b0c      	cmp	r3, #12
 800cc48:	f200 8265 	bhi.w	800d116 <Event_Handler+0x4fe>
 800cc4c:	a201      	add	r2, pc, #4	; (adr r2, 800cc54 <Event_Handler+0x3c>)
 800cc4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc52:	bf00      	nop
 800cc54:	0800cf47 	.word	0x0800cf47
 800cc58:	0800d117 	.word	0x0800d117
 800cc5c:	0800ce29 	.word	0x0800ce29
 800cc60:	0800d117 	.word	0x0800d117
 800cc64:	0800d117 	.word	0x0800d117
 800cc68:	0800d117 	.word	0x0800d117
 800cc6c:	0800cc89 	.word	0x0800cc89
 800cc70:	0800d117 	.word	0x0800d117
 800cc74:	0800d117 	.word	0x0800d117
 800cc78:	0800d117 	.word	0x0800d117
 800cc7c:	0800d117 	.word	0x0800d117
 800cc80:	0800d051 	.word	0x0800d051
 800cc84:	0800d0cd 	.word	0x0800d0cd
          aci_att_read_by_group_type_resp_event_rp0 *pr = (void*)blue_evt->data;
 800cc88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc8a:	3302      	adds	r3, #2
 800cc8c:	633b      	str	r3, [r7, #48]	; 0x30
          handle = pr->Connection_Handle;
 800cc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc90:	781a      	ldrb	r2, [r3, #0]
 800cc92:	785b      	ldrb	r3, [r3, #1]
 800cc94:	021b      	lsls	r3, r3, #8
 800cc96:	4313      	orrs	r3, r2
 800cc98:	85fb      	strh	r3, [r7, #46]	; 0x2e
          index = 0;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800cca0:	e02e      	b.n	800cd00 <Event_Handler+0xe8>
            status = APP_BLE_Get_Client_Connection_Status(aP2PClientContext[index].connHandle);
 800cca2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800cca6:	4aab      	ldr	r2, [pc, #684]	; (800cf54 <Event_Handler+0x33c>)
 800cca8:	011b      	lsls	r3, r3, #4
 800ccaa:	4413      	add	r3, r2
 800ccac:	3302      	adds	r3, #2
 800ccae:	881b      	ldrh	r3, [r3, #0]
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	f7ff fd75 	bl	800c7a0 <APP_BLE_Get_Client_Connection_Status>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            if((aP2PClientContext[index].state == APP_BLE_CONNECTED_CLIENT)&&
 800ccbc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800ccc0:	4aa4      	ldr	r2, [pc, #656]	; (800cf54 <Event_Handler+0x33c>)
 800ccc2:	011b      	lsls	r3, r3, #4
 800ccc4:	4413      	add	r3, r2
 800ccc6:	781b      	ldrb	r3, [r3, #0]
 800ccc8:	2b06      	cmp	r3, #6
 800ccca:	d114      	bne.n	800ccf6 <Event_Handler+0xde>
 800cccc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d110      	bne.n	800ccf6 <Event_Handler+0xde>
              aP2PClientContext[index].state = APP_BLE_IDLE;
 800ccd4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800ccd8:	4a9e      	ldr	r2, [pc, #632]	; (800cf54 <Event_Handler+0x33c>)
 800ccda:	011b      	lsls	r3, r3, #4
 800ccdc:	4413      	add	r3, r2
 800ccde:	2200      	movs	r2, #0
 800cce0:	701a      	strb	r2, [r3, #0]
              aP2PClientContext[index].connHandle = 0xFFFF;
 800cce2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800cce6:	4a9b      	ldr	r2, [pc, #620]	; (800cf54 <Event_Handler+0x33c>)
 800cce8:	011b      	lsls	r3, r3, #4
 800ccea:	4413      	add	r3, r2
 800ccec:	3302      	adds	r3, #2
 800ccee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ccf2:	801a      	strh	r2, [r3, #0]
              break;
 800ccf4:	e010      	b.n	800cd18 <Event_Handler+0x100>
            index++;
 800ccf6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800ccfa:	3301      	adds	r3, #1
 800ccfc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800cd00:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d107      	bne.n	800cd18 <Event_Handler+0x100>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
 800cd08:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800cd0c:	4a91      	ldr	r2, [pc, #580]	; (800cf54 <Event_Handler+0x33c>)
 800cd0e:	011b      	lsls	r3, r3, #4
 800cd10:	4413      	add	r3, r2
 800cd12:	781b      	ldrb	r3, [r3, #0]
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d1c4      	bne.n	800cca2 <Event_Handler+0x8a>
          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800cd18:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	f040 81fc 	bne.w	800d11a <Event_Handler+0x502>
            aP2PClientContext[index].connHandle= handle;
 800cd22:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800cd26:	4a8b      	ldr	r2, [pc, #556]	; (800cf54 <Event_Handler+0x33c>)
 800cd28:	011b      	lsls	r3, r3, #4
 800cd2a:	4413      	add	r3, r2
 800cd2c:	3302      	adds	r3, #2
 800cd2e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cd30:	801a      	strh	r2, [r3, #0]
            numServ = (pr->Data_Length) / pr->Attribute_Data_Length;
 800cd32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd34:	78da      	ldrb	r2, [r3, #3]
 800cd36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd38:	789b      	ldrb	r3, [r3, #2]
 800cd3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd3e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
          if (pr->Attribute_Data_Length == 20)
 800cd42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd44:	789b      	ldrb	r3, [r3, #2]
 800cd46:	2b14      	cmp	r3, #20
 800cd48:	f040 81e7 	bne.w	800d11a <Event_Handler+0x502>
            idx = 16;
 800cd4c:	2310      	movs	r3, #16
 800cd4e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
              for (i=0; i<numServ; i++)
 800cd52:	2300      	movs	r3, #0
 800cd54:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800cd58:	e05f      	b.n	800ce1a <Event_Handler+0x202>
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx]);
 800cd5a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800cd5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd60:	4413      	add	r3, r2
 800cd62:	791b      	ldrb	r3, [r3, #4]
 800cd64:	b29a      	uxth	r2, r3
 800cd66:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800cd6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cd6c:	440b      	add	r3, r1
 800cd6e:	3304      	adds	r3, #4
 800cd70:	3301      	adds	r3, #1
 800cd72:	781b      	ldrb	r3, [r3, #0]
 800cd74:	b29b      	uxth	r3, r3
 800cd76:	021b      	lsls	r3, r3, #8
 800cd78:	b29b      	uxth	r3, r3
 800cd7a:	4313      	orrs	r3, r2
 800cd7c:	857b      	strh	r3, [r7, #42]	; 0x2a
                if(uuid == P2P_SERVICE_UUID)
 800cd7e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cd80:	f64f 6240 	movw	r2, #65088	; 0xfe40
 800cd84:	4293      	cmp	r3, r2
 800cd86:	d13e      	bne.n	800ce06 <Event_Handler+0x1ee>
                aP2PClientContext[index].P2PServiceHandle = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-16]);
 800cd88:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800cd8c:	3b10      	subs	r3, #16
 800cd8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd90:	4413      	add	r3, r2
 800cd92:	791b      	ldrb	r3, [r3, #4]
 800cd94:	b299      	uxth	r1, r3
 800cd96:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800cd9a:	3b10      	subs	r3, #16
 800cd9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd9e:	4413      	add	r3, r2
 800cda0:	3304      	adds	r3, #4
 800cda2:	3301      	adds	r3, #1
 800cda4:	781b      	ldrb	r3, [r3, #0]
 800cda6:	b29b      	uxth	r3, r3
 800cda8:	021b      	lsls	r3, r3, #8
 800cdaa:	b29a      	uxth	r2, r3
 800cdac:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800cdb0:	430a      	orrs	r2, r1
 800cdb2:	b291      	uxth	r1, r2
 800cdb4:	4a67      	ldr	r2, [pc, #412]	; (800cf54 <Event_Handler+0x33c>)
 800cdb6:	011b      	lsls	r3, r3, #4
 800cdb8:	4413      	add	r3, r2
 800cdba:	3304      	adds	r3, #4
 800cdbc:	460a      	mov	r2, r1
 800cdbe:	801a      	strh	r2, [r3, #0]
                aP2PClientContext[index].P2PServiceEndHandle = UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-14]);
 800cdc0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800cdc4:	3b0e      	subs	r3, #14
 800cdc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdc8:	4413      	add	r3, r2
 800cdca:	791b      	ldrb	r3, [r3, #4]
 800cdcc:	b299      	uxth	r1, r3
 800cdce:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800cdd2:	3b0e      	subs	r3, #14
 800cdd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdd6:	4413      	add	r3, r2
 800cdd8:	3304      	adds	r3, #4
 800cdda:	3301      	adds	r3, #1
 800cddc:	781b      	ldrb	r3, [r3, #0]
 800cdde:	b29b      	uxth	r3, r3
 800cde0:	021b      	lsls	r3, r3, #8
 800cde2:	b29a      	uxth	r2, r3
 800cde4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800cde8:	430a      	orrs	r2, r1
 800cdea:	b291      	uxth	r1, r2
 800cdec:	4a59      	ldr	r2, [pc, #356]	; (800cf54 <Event_Handler+0x33c>)
 800cdee:	011b      	lsls	r3, r3, #4
 800cdf0:	4413      	add	r3, r2
 800cdf2:	3306      	adds	r3, #6
 800cdf4:	460a      	mov	r2, r1
 800cdf6:	801a      	strh	r2, [r3, #0]
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_CHARACS ;
 800cdf8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800cdfc:	4a55      	ldr	r2, [pc, #340]	; (800cf54 <Event_Handler+0x33c>)
 800cdfe:	011b      	lsls	r3, r3, #4
 800ce00:	4413      	add	r3, r2
 800ce02:	2208      	movs	r2, #8
 800ce04:	701a      	strb	r2, [r3, #0]
                idx += 6;
 800ce06:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800ce0a:	3306      	adds	r3, #6
 800ce0c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
              for (i=0; i<numServ; i++)
 800ce10:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ce14:	3301      	adds	r3, #1
 800ce16:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ce1a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800ce1e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ce22:	429a      	cmp	r2, r3
 800ce24:	d399      	bcc.n	800cd5a <Event_Handler+0x142>
        break;
 800ce26:	e178      	b.n	800d11a <Event_Handler+0x502>
          aci_att_read_by_type_resp_event_rp0 *pr = (void*)blue_evt->data;
 800ce28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce2a:	3302      	adds	r3, #2
 800ce2c:	627b      	str	r3, [r7, #36]	; 0x24
          index = 0;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800ce34:	e004      	b.n	800ce40 <Event_Handler+0x228>
            index++;
 800ce36:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800ce3a:	3301      	adds	r3, #1
 800ce3c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800ce40:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d10b      	bne.n	800ce60 <Event_Handler+0x248>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800ce48:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800ce4c:	4a41      	ldr	r2, [pc, #260]	; (800cf54 <Event_Handler+0x33c>)
 800ce4e:	011b      	lsls	r3, r3, #4
 800ce50:	4413      	add	r3, r2
 800ce52:	3302      	adds	r3, #2
 800ce54:	881a      	ldrh	r2, [r3, #0]
 800ce56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce58:	881b      	ldrh	r3, [r3, #0]
 800ce5a:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800ce5c:	429a      	cmp	r2, r3
 800ce5e:	d1ea      	bne.n	800ce36 <Event_Handler+0x21e>
          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800ce60:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	f040 815a 	bne.w	800d11e <Event_Handler+0x506>
            idx = 17;
 800ce6a:	2311      	movs	r3, #17
 800ce6c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
            if (pr->Handle_Value_Pair_Length == 21)
 800ce70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce72:	789b      	ldrb	r3, [r3, #2]
 800ce74:	2b15      	cmp	r3, #21
 800ce76:	f040 8152 	bne.w	800d11e <Event_Handler+0x506>
              pr->Data_Length -= 1;
 800ce7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce7c:	78db      	ldrb	r3, [r3, #3]
 800ce7e:	3b01      	subs	r3, #1
 800ce80:	b2da      	uxtb	r2, r3
 800ce82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce84:	70da      	strb	r2, [r3, #3]
              while(pr->Data_Length > 0)
 800ce86:	e059      	b.n	800cf3c <Event_Handler+0x324>
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx]);
 800ce88:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ce8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce8e:	4413      	add	r3, r2
 800ce90:	791b      	ldrb	r3, [r3, #4]
 800ce92:	b29a      	uxth	r2, r3
 800ce94:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ce98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ce9a:	440b      	add	r3, r1
 800ce9c:	3304      	adds	r3, #4
 800ce9e:	3301      	adds	r3, #1
 800cea0:	781b      	ldrb	r3, [r3, #0]
 800cea2:	b29b      	uxth	r3, r3
 800cea4:	021b      	lsls	r3, r3, #8
 800cea6:	b29b      	uxth	r3, r3
 800cea8:	4313      	orrs	r3, r2
 800ceaa:	847b      	strh	r3, [r7, #34]	; 0x22
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-14]);
 800ceac:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ceb0:	3b0e      	subs	r3, #14
 800ceb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ceb4:	4413      	add	r3, r2
 800ceb6:	791b      	ldrb	r3, [r3, #4]
 800ceb8:	b29a      	uxth	r2, r3
 800ceba:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800cebe:	3b0e      	subs	r3, #14
 800cec0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cec2:	440b      	add	r3, r1
 800cec4:	3304      	adds	r3, #4
 800cec6:	3301      	adds	r3, #1
 800cec8:	781b      	ldrb	r3, [r3, #0]
 800ceca:	b29b      	uxth	r3, r3
 800cecc:	021b      	lsls	r3, r3, #8
 800cece:	b29b      	uxth	r3, r3
 800ced0:	4313      	orrs	r3, r2
 800ced2:	843b      	strh	r3, [r7, #32]
                if(uuid == P2P_WRITE_CHAR_UUID)
 800ced4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ced6:	f64f 6241 	movw	r2, #65089	; 0xfe41
 800ceda:	4293      	cmp	r3, r2
 800cedc:	d10f      	bne.n	800cefe <Event_Handler+0x2e6>
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_WRITE_DESC;
 800cede:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800cee2:	4a1c      	ldr	r2, [pc, #112]	; (800cf54 <Event_Handler+0x33c>)
 800cee4:	011b      	lsls	r3, r3, #4
 800cee6:	4413      	add	r3, r2
 800cee8:	2209      	movs	r2, #9
 800ceea:	701a      	strb	r2, [r3, #0]
                  aP2PClientContext[index].P2PWriteToServerCharHdle = handle;
 800ceec:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800cef0:	4a18      	ldr	r2, [pc, #96]	; (800cf54 <Event_Handler+0x33c>)
 800cef2:	011b      	lsls	r3, r3, #4
 800cef4:	4413      	add	r3, r2
 800cef6:	3308      	adds	r3, #8
 800cef8:	8c3a      	ldrh	r2, [r7, #32]
 800cefa:	801a      	strh	r2, [r3, #0]
 800cefc:	e013      	b.n	800cf26 <Event_Handler+0x30e>
                else if(uuid == P2P_NOTIFY_CHAR_UUID)
 800cefe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf00:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800cf04:	4293      	cmp	r3, r2
 800cf06:	d10e      	bne.n	800cf26 <Event_Handler+0x30e>
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC;
 800cf08:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800cf0c:	4a11      	ldr	r2, [pc, #68]	; (800cf54 <Event_Handler+0x33c>)
 800cf0e:	011b      	lsls	r3, r3, #4
 800cf10:	4413      	add	r3, r2
 800cf12:	220a      	movs	r2, #10
 800cf14:	701a      	strb	r2, [r3, #0]
                  aP2PClientContext[index].P2PNotificationCharHdle = handle;
 800cf16:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800cf1a:	4a0e      	ldr	r2, [pc, #56]	; (800cf54 <Event_Handler+0x33c>)
 800cf1c:	011b      	lsls	r3, r3, #4
 800cf1e:	4413      	add	r3, r2
 800cf20:	330c      	adds	r3, #12
 800cf22:	8c3a      	ldrh	r2, [r7, #32]
 800cf24:	801a      	strh	r2, [r3, #0]
                pr->Data_Length -= 21;
 800cf26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf28:	78db      	ldrb	r3, [r3, #3]
 800cf2a:	3b15      	subs	r3, #21
 800cf2c:	b2da      	uxtb	r2, r3
 800cf2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf30:	70da      	strb	r2, [r3, #3]
                idx += 21;
 800cf32:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800cf36:	3315      	adds	r3, #21
 800cf38:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
              while(pr->Data_Length > 0)
 800cf3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf3e:	78db      	ldrb	r3, [r3, #3]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d1a1      	bne.n	800ce88 <Event_Handler+0x270>
        break;
 800cf44:	e0eb      	b.n	800d11e <Event_Handler+0x506>
          aci_att_find_info_resp_event_rp0 *pr = (void*)blue_evt->data;
 800cf46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf48:	3302      	adds	r3, #2
 800cf4a:	61fb      	str	r3, [r7, #28]
          index = 0;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800cf52:	e006      	b.n	800cf62 <Event_Handler+0x34a>
 800cf54:	2000030c 	.word	0x2000030c
            index++;
 800cf58:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800cf5c:	3301      	adds	r3, #1
 800cf5e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800cf62:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d10b      	bne.n	800cf82 <Event_Handler+0x36a>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800cf6a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800cf6e:	4a73      	ldr	r2, [pc, #460]	; (800d13c <Event_Handler+0x524>)
 800cf70:	011b      	lsls	r3, r3, #4
 800cf72:	4413      	add	r3, r2
 800cf74:	3302      	adds	r3, #2
 800cf76:	881a      	ldrh	r2, [r3, #0]
 800cf78:	69fb      	ldr	r3, [r7, #28]
 800cf7a:	881b      	ldrh	r3, [r3, #0]
 800cf7c:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	d1ea      	bne.n	800cf58 <Event_Handler+0x340>
          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800cf82:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	f040 80cb 	bne.w	800d122 <Event_Handler+0x50a>
            numDesc = (pr->Event_Data_Length) / 4;
 800cf8c:	69fb      	ldr	r3, [r7, #28]
 800cf8e:	78db      	ldrb	r3, [r3, #3]
 800cf90:	089b      	lsrs	r3, r3, #2
 800cf92:	76fb      	strb	r3, [r7, #27]
            idx = 0;
 800cf94:	2300      	movs	r3, #0
 800cf96:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            if (pr->Format == UUID_TYPE_16)
 800cf9a:	69fb      	ldr	r3, [r7, #28]
 800cf9c:	789b      	ldrb	r3, [r3, #2]
 800cf9e:	2b01      	cmp	r3, #1
 800cfa0:	f040 80bf 	bne.w	800d122 <Event_Handler+0x50a>
              for (i=0; i<numDesc; i++)
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800cfaa:	e04b      	b.n	800d044 <Event_Handler+0x42c>
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx]);
 800cfac:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800cfb0:	69fa      	ldr	r2, [r7, #28]
 800cfb2:	4413      	add	r3, r2
 800cfb4:	791b      	ldrb	r3, [r3, #4]
 800cfb6:	b29a      	uxth	r2, r3
 800cfb8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800cfbc:	69f9      	ldr	r1, [r7, #28]
 800cfbe:	440b      	add	r3, r1
 800cfc0:	3304      	adds	r3, #4
 800cfc2:	3301      	adds	r3, #1
 800cfc4:	781b      	ldrb	r3, [r3, #0]
 800cfc6:	b29b      	uxth	r3, r3
 800cfc8:	021b      	lsls	r3, r3, #8
 800cfca:	b29b      	uxth	r3, r3
 800cfcc:	4313      	orrs	r3, r2
 800cfce:	833b      	strh	r3, [r7, #24]
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx+2]);
 800cfd0:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800cfd4:	3302      	adds	r3, #2
 800cfd6:	69fa      	ldr	r2, [r7, #28]
 800cfd8:	4413      	add	r3, r2
 800cfda:	791b      	ldrb	r3, [r3, #4]
 800cfdc:	b29a      	uxth	r2, r3
 800cfde:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800cfe2:	3302      	adds	r3, #2
 800cfe4:	69f9      	ldr	r1, [r7, #28]
 800cfe6:	440b      	add	r3, r1
 800cfe8:	3304      	adds	r3, #4
 800cfea:	3301      	adds	r3, #1
 800cfec:	781b      	ldrb	r3, [r3, #0]
 800cfee:	b29b      	uxth	r3, r3
 800cff0:	021b      	lsls	r3, r3, #8
 800cff2:	b29b      	uxth	r3, r3
 800cff4:	4313      	orrs	r3, r2
 800cff6:	82fb      	strh	r3, [r7, #22]
                if(uuid == CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID)
 800cff8:	8afb      	ldrh	r3, [r7, #22]
 800cffa:	f642 1202 	movw	r2, #10498	; 0x2902
 800cffe:	4293      	cmp	r3, r2
 800d000:	d116      	bne.n	800d030 <Event_Handler+0x418>
                  if( aP2PClientContext[index].state == APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC)
 800d002:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d006:	4a4d      	ldr	r2, [pc, #308]	; (800d13c <Event_Handler+0x524>)
 800d008:	011b      	lsls	r3, r3, #4
 800d00a:	4413      	add	r3, r2
 800d00c:	781b      	ldrb	r3, [r3, #0]
 800d00e:	2b0a      	cmp	r3, #10
 800d010:	d10e      	bne.n	800d030 <Event_Handler+0x418>
                    aP2PClientContext[index].P2PNotificationDescHandle = handle;
 800d012:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d016:	4a49      	ldr	r2, [pc, #292]	; (800d13c <Event_Handler+0x524>)
 800d018:	011b      	lsls	r3, r3, #4
 800d01a:	4413      	add	r3, r2
 800d01c:	330e      	adds	r3, #14
 800d01e:	8b3a      	ldrh	r2, [r7, #24]
 800d020:	801a      	strh	r2, [r3, #0]
                    aP2PClientContext[index].state = APP_BLE_ENABLE_NOTIFICATION_DESC;
 800d022:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d026:	4a45      	ldr	r2, [pc, #276]	; (800d13c <Event_Handler+0x524>)
 800d028:	011b      	lsls	r3, r3, #4
 800d02a:	4413      	add	r3, r2
 800d02c:	220b      	movs	r2, #11
 800d02e:	701a      	strb	r2, [r3, #0]
                idx += 4;
 800d030:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800d034:	3304      	adds	r3, #4
 800d036:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
              for (i=0; i<numDesc; i++)
 800d03a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800d03e:	3301      	adds	r3, #1
 800d040:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800d044:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800d048:	7efb      	ldrb	r3, [r7, #27]
 800d04a:	429a      	cmp	r2, r3
 800d04c:	d3ae      	bcc.n	800cfac <Event_Handler+0x394>
        break; /*EVT_BLUE_ATT_FIND_INFORMATION_RESP*/
 800d04e:	e068      	b.n	800d122 <Event_Handler+0x50a>
          aci_gatt_notification_event_rp0 *pr = (void*)blue_evt->data;
 800d050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d052:	3302      	adds	r3, #2
 800d054:	637b      	str	r3, [r7, #52]	; 0x34
          index = 0;
 800d056:	2300      	movs	r3, #0
 800d058:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d05c:	e004      	b.n	800d068 <Event_Handler+0x450>
            index++;
 800d05e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d062:	3301      	adds	r3, #1
 800d064:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d068:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d10b      	bne.n	800d088 <Event_Handler+0x470>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800d070:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d074:	4a31      	ldr	r2, [pc, #196]	; (800d13c <Event_Handler+0x524>)
 800d076:	011b      	lsls	r3, r3, #4
 800d078:	4413      	add	r3, r2
 800d07a:	3302      	adds	r3, #2
 800d07c:	881a      	ldrh	r2, [r3, #0]
 800d07e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d080:	881b      	ldrh	r3, [r3, #0]
 800d082:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d084:	429a      	cmp	r2, r3
 800d086:	d1ea      	bne.n	800d05e <Event_Handler+0x446>
          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800d088:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d14a      	bne.n	800d126 <Event_Handler+0x50e>
            if ( (pr->Attribute_Handle == aP2PClientContext[index].P2PNotificationCharHdle) &&
 800d090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d092:	885b      	ldrh	r3, [r3, #2]
 800d094:	b29a      	uxth	r2, r3
 800d096:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d09a:	4928      	ldr	r1, [pc, #160]	; (800d13c <Event_Handler+0x524>)
 800d09c:	011b      	lsls	r3, r3, #4
 800d09e:	440b      	add	r3, r1
 800d0a0:	330c      	adds	r3, #12
 800d0a2:	881b      	ldrh	r3, [r3, #0]
 800d0a4:	429a      	cmp	r2, r3
 800d0a6:	d13e      	bne.n	800d126 <Event_Handler+0x50e>
                    (pr->Attribute_Value_Length == (PAYLOAD_LENGTH)) )
 800d0a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0aa:	791b      	ldrb	r3, [r3, #4]
            if ( (pr->Attribute_Handle == aP2PClientContext[index].P2PNotificationCharHdle) &&
 800d0ac:	2b28      	cmp	r3, #40	; 0x28
 800d0ae:	d13a      	bne.n	800d126 <Event_Handler+0x50e>
              Notification.P2P_Client_Evt_Opcode = P2P_NOTIFICATION_INFO_RECEIVED_EVT;
 800d0b0:	2302      	movs	r3, #2
 800d0b2:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length = pr->Attribute_Value_Length;
 800d0b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0b6:	791b      	ldrb	r3, [r3, #4]
 800d0b8:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload = &pr->Attribute_Value[0];
 800d0ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0bc:	3305      	adds	r3, #5
 800d0be:	60fb      	str	r3, [r7, #12]
              Gatt_Notification(&Notification);
 800d0c0:	f107 0308 	add.w	r3, r7, #8
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f000 f83b 	bl	800d140 <Gatt_Notification>
        break;/* end EVT_BLUE_GATT_NOTIFICATION */
 800d0ca:	e02c      	b.n	800d126 <Event_Handler+0x50e>
          aci_gatt_proc_complete_event_rp0 *pr = (void*)blue_evt->data;
 800d0cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0ce:	3302      	adds	r3, #2
 800d0d0:	63bb      	str	r3, [r7, #56]	; 0x38
          index = 0;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d0d8:	e004      	b.n	800d0e4 <Event_Handler+0x4cc>
            index++;
 800d0da:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d0de:	3301      	adds	r3, #1
 800d0e0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d0e4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d10b      	bne.n	800d104 <Event_Handler+0x4ec>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800d0ec:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d0f0:	4a12      	ldr	r2, [pc, #72]	; (800d13c <Event_Handler+0x524>)
 800d0f2:	011b      	lsls	r3, r3, #4
 800d0f4:	4413      	add	r3, r2
 800d0f6:	3302      	adds	r3, #2
 800d0f8:	881a      	ldrh	r2, [r3, #0]
 800d0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0fc:	881b      	ldrh	r3, [r3, #0]
 800d0fe:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d100:	429a      	cmp	r2, r3
 800d102:	d1ea      	bne.n	800d0da <Event_Handler+0x4c2>
          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800d104:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d10e      	bne.n	800d12a <Event_Handler+0x512>
            UTIL_SEQ_SetTask( 1<<CFG_TASK_SEARCH_SERVICE_ID, CFG_SCH_PRIO_0);
 800d10c:	2100      	movs	r1, #0
 800d10e:	2004      	movs	r0, #4
 800d110:	f7f4 fcc2 	bl	8001a98 <UTIL_SEQ_SetTask>
        break; /*EVT_BLUE_GATT_PROCEDURE_COMPLETE*/
 800d114:	e009      	b.n	800d12a <Event_Handler+0x512>
          break;
 800d116:	bf00      	nop
 800d118:	e008      	b.n	800d12c <Event_Handler+0x514>
        break;
 800d11a:	bf00      	nop
 800d11c:	e006      	b.n	800d12c <Event_Handler+0x514>
        break;
 800d11e:	bf00      	nop
 800d120:	e004      	b.n	800d12c <Event_Handler+0x514>
        break; /*EVT_BLUE_ATT_FIND_INFORMATION_RESP*/
 800d122:	bf00      	nop
 800d124:	e002      	b.n	800d12c <Event_Handler+0x514>
        break;/* end EVT_BLUE_GATT_NOTIFICATION */
 800d126:	bf00      	nop
 800d128:	e000      	b.n	800d12c <Event_Handler+0x514>
        break; /*EVT_BLUE_GATT_PROCEDURE_COMPLETE*/
 800d12a:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 800d12c:	bf00      	nop
  }

  return(return_value);
 800d12e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
}/* end BLE_CTRL_Event_Acknowledged_Status_t */
 800d132:	4618      	mov	r0, r3
 800d134:	3750      	adds	r7, #80	; 0x50
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}
 800d13a:	bf00      	nop
 800d13c:	2000030c 	.word	0x2000030c

0800d140 <Gatt_Notification>:

void Gatt_Notification(P2P_Client_App_Notification_evt_t *pNotification)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b082      	sub	sp, #8
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Gatt_Notification_1*/

/* USER CODE END Gatt_Notification_1 */
  switch(pNotification->P2P_Client_Evt_Opcode)
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	781b      	ldrb	r3, [r3, #0]
 800d14c:	2b02      	cmp	r3, #2
 800d14e:	d000      	beq.n	800d152 <Gatt_Notification+0x12>

    default:
/* USER CODE BEGIN P2P_Client_Evt_Opcode_Default */

/* USER CODE END P2P_Client_Evt_Opcode_Default */
      break;
 800d150:	e00f      	b.n	800d172 <Gatt_Notification+0x32>
		transmit_CDC_messege(pNotification->DataTransfered.pPayload, PAYLOAD_LENGTH);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	685b      	ldr	r3, [r3, #4]
 800d156:	2128      	movs	r1, #40	; 0x28
 800d158:	4618      	mov	r0, r3
 800d15a:	f7f4 fa73 	bl	8001644 <transmit_CDC_messege>
    	HAL_GPIO_TogglePin(TEST_GPIO_Port, TEST_Pin);
 800d15e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d162:	4806      	ldr	r0, [pc, #24]	; (800d17c <Gatt_Notification+0x3c>)
 800d164:	f7f5 fd26 	bl	8002bb4 <HAL_GPIO_TogglePin>
    	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800d168:	2102      	movs	r1, #2
 800d16a:	4804      	ldr	r0, [pc, #16]	; (800d17c <Gatt_Notification+0x3c>)
 800d16c:	f7f5 fd22 	bl	8002bb4 <HAL_GPIO_TogglePin>
    break;
 800d170:	bf00      	nop
  }
/* USER CODE BEGIN Gatt_Notification_2*/
}
 800d172:	bf00      	nop
 800d174:	3708      	adds	r7, #8
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}
 800d17a:	bf00      	nop
 800d17c:	48000400 	.word	0x48000400

0800d180 <Update_Service>:
//
//  return;
//}

void Update_Service()
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b082      	sub	sp, #8
 800d184:	af00      	add	r7, sp, #0
  uint16_t enable = 0x0001;
 800d186:	2301      	movs	r3, #1
 800d188:	80bb      	strh	r3, [r7, #4]


  uint8_t index;

  index = 0;
 800d18a:	2300      	movs	r3, #0
 800d18c:	71fb      	strb	r3, [r7, #7]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d18e:	e094      	b.n	800d2ba <Update_Service+0x13a>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
  {


    switch(aP2PClientContext[index].state)
 800d190:	79fb      	ldrb	r3, [r7, #7]
 800d192:	4a52      	ldr	r2, [pc, #328]	; (800d2dc <Update_Service+0x15c>)
 800d194:	011b      	lsls	r3, r3, #4
 800d196:	4413      	add	r3, r2
 800d198:	781b      	ldrb	r3, [r3, #0]
 800d19a:	3b07      	subs	r3, #7
 800d19c:	2b05      	cmp	r3, #5
 800d19e:	f200 8088 	bhi.w	800d2b2 <Update_Service+0x132>
 800d1a2:	a201      	add	r2, pc, #4	; (adr r2, 800d1a8 <Update_Service+0x28>)
 800d1a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1a8:	0800d2b3 	.word	0x0800d2b3
 800d1ac:	0800d1c1 	.word	0x0800d1c1
 800d1b0:	0800d1ed 	.word	0x0800d1ed
 800d1b4:	0800d21d 	.word	0x0800d21d
 800d1b8:	0800d24d 	.word	0x0800d24d
 800d1bc:	0800d285 	.word	0x0800d285
      case APP_BLE_DISCOVER_SERVICES:
        //APP_DBG_MSG("P2P_DISCOVER_SERVICES\n");
        break;
      case APP_BLE_DISCOVER_CHARACS:
        //APP_DBG_MSG("* GATT : Discover P2P Characteristics\n");
        aci_gatt_disc_all_char_of_service(aP2PClientContext[index].connHandle,
 800d1c0:	79fb      	ldrb	r3, [r7, #7]
 800d1c2:	4a46      	ldr	r2, [pc, #280]	; (800d2dc <Update_Service+0x15c>)
 800d1c4:	011b      	lsls	r3, r3, #4
 800d1c6:	4413      	add	r3, r2
 800d1c8:	3302      	adds	r3, #2
 800d1ca:	8818      	ldrh	r0, [r3, #0]
 800d1cc:	79fb      	ldrb	r3, [r7, #7]
 800d1ce:	4a43      	ldr	r2, [pc, #268]	; (800d2dc <Update_Service+0x15c>)
 800d1d0:	011b      	lsls	r3, r3, #4
 800d1d2:	4413      	add	r3, r2
 800d1d4:	3304      	adds	r3, #4
 800d1d6:	8819      	ldrh	r1, [r3, #0]
 800d1d8:	79fb      	ldrb	r3, [r7, #7]
 800d1da:	4a40      	ldr	r2, [pc, #256]	; (800d2dc <Update_Service+0x15c>)
 800d1dc:	011b      	lsls	r3, r3, #4
 800d1de:	4413      	add	r3, r2
 800d1e0:	3306      	adds	r3, #6
 800d1e2:	881b      	ldrh	r3, [r3, #0]
 800d1e4:	461a      	mov	r2, r3
 800d1e6:	f7fd fee7 	bl	800afb8 <aci_gatt_disc_all_char_of_service>
                                          aP2PClientContext[index].P2PServiceHandle,
                                         aP2PClientContext[index].P2PServiceEndHandle);

        break;
 800d1ea:	e063      	b.n	800d2b4 <Update_Service+0x134>
      case APP_BLE_DISCOVER_WRITE_DESC: /* Not Used - No decriptor */
        //APP_DBG_MSG("* GATT : Discover Descriptor of TX - Write Characteritic\n");
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800d1ec:	79fb      	ldrb	r3, [r7, #7]
 800d1ee:	4a3b      	ldr	r2, [pc, #236]	; (800d2dc <Update_Service+0x15c>)
 800d1f0:	011b      	lsls	r3, r3, #4
 800d1f2:	4413      	add	r3, r2
 800d1f4:	3302      	adds	r3, #2
 800d1f6:	8818      	ldrh	r0, [r3, #0]
 800d1f8:	79fb      	ldrb	r3, [r7, #7]
 800d1fa:	4a38      	ldr	r2, [pc, #224]	; (800d2dc <Update_Service+0x15c>)
 800d1fc:	011b      	lsls	r3, r3, #4
 800d1fe:	4413      	add	r3, r2
 800d200:	3308      	adds	r3, #8
 800d202:	8819      	ldrh	r1, [r3, #0]
                                    aP2PClientContext[index].P2PWriteToServerCharHdle,
                                    aP2PClientContext[index].P2PWriteToServerCharHdle+2);
 800d204:	79fb      	ldrb	r3, [r7, #7]
 800d206:	4a35      	ldr	r2, [pc, #212]	; (800d2dc <Update_Service+0x15c>)
 800d208:	011b      	lsls	r3, r3, #4
 800d20a:	4413      	add	r3, r2
 800d20c:	3308      	adds	r3, #8
 800d20e:	881b      	ldrh	r3, [r3, #0]
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800d210:	3302      	adds	r3, #2
 800d212:	b29b      	uxth	r3, r3
 800d214:	461a      	mov	r2, r3
 800d216:	f7fd ff41 	bl	800b09c <aci_gatt_disc_all_char_desc>

        break;
 800d21a:	e04b      	b.n	800d2b4 <Update_Service+0x134>
      case APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC:
        //APP_DBG_MSG("* GATT : Discover Descriptor of Rx - Notification Characteritic\n");
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800d21c:	79fb      	ldrb	r3, [r7, #7]
 800d21e:	4a2f      	ldr	r2, [pc, #188]	; (800d2dc <Update_Service+0x15c>)
 800d220:	011b      	lsls	r3, r3, #4
 800d222:	4413      	add	r3, r2
 800d224:	3302      	adds	r3, #2
 800d226:	8818      	ldrh	r0, [r3, #0]
 800d228:	79fb      	ldrb	r3, [r7, #7]
 800d22a:	4a2c      	ldr	r2, [pc, #176]	; (800d2dc <Update_Service+0x15c>)
 800d22c:	011b      	lsls	r3, r3, #4
 800d22e:	4413      	add	r3, r2
 800d230:	330c      	adds	r3, #12
 800d232:	8819      	ldrh	r1, [r3, #0]
                                    aP2PClientContext[index].P2PNotificationCharHdle,
                                    aP2PClientContext[index].P2PNotificationCharHdle+2);
 800d234:	79fb      	ldrb	r3, [r7, #7]
 800d236:	4a29      	ldr	r2, [pc, #164]	; (800d2dc <Update_Service+0x15c>)
 800d238:	011b      	lsls	r3, r3, #4
 800d23a:	4413      	add	r3, r2
 800d23c:	330c      	adds	r3, #12
 800d23e:	881b      	ldrh	r3, [r3, #0]
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800d240:	3302      	adds	r3, #2
 800d242:	b29b      	uxth	r3, r3
 800d244:	461a      	mov	r2, r3
 800d246:	f7fd ff29 	bl	800b09c <aci_gatt_disc_all_char_desc>

        break;
 800d24a:	e033      	b.n	800d2b4 <Update_Service+0x134>
      case APP_BLE_ENABLE_NOTIFICATION_DESC:
        //APP_DBG_MSG("* GATT : Enable Server Notification\n");
        aci_gatt_write_char_desc(aP2PClientContext[index].connHandle,
 800d24c:	79fb      	ldrb	r3, [r7, #7]
 800d24e:	4a23      	ldr	r2, [pc, #140]	; (800d2dc <Update_Service+0x15c>)
 800d250:	011b      	lsls	r3, r3, #4
 800d252:	4413      	add	r3, r2
 800d254:	3302      	adds	r3, #2
 800d256:	8818      	ldrh	r0, [r3, #0]
 800d258:	79fb      	ldrb	r3, [r7, #7]
 800d25a:	4a20      	ldr	r2, [pc, #128]	; (800d2dc <Update_Service+0x15c>)
 800d25c:	011b      	lsls	r3, r3, #4
 800d25e:	4413      	add	r3, r2
 800d260:	330e      	adds	r3, #14
 800d262:	8819      	ldrh	r1, [r3, #0]
 800d264:	1d3b      	adds	r3, r7, #4
 800d266:	2202      	movs	r2, #2
 800d268:	f7fd ff8a 	bl	800b180 <aci_gatt_write_char_desc>
                                 aP2PClientContext[index].P2PNotificationDescHandle,
                                 2,
                                 (uint8_t *)&enable);

        aP2PClientContext[index].state = APP_BLE_CONNECTED_CLIENT;
 800d26c:	79fb      	ldrb	r3, [r7, #7]
 800d26e:	4a1b      	ldr	r2, [pc, #108]	; (800d2dc <Update_Service+0x15c>)
 800d270:	011b      	lsls	r3, r3, #4
 800d272:	4413      	add	r3, r2
 800d274:	2206      	movs	r2, #6
 800d276:	701a      	strb	r2, [r3, #0]
        //BSP_LED_Off(LED_RED);
        HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800d278:	2200      	movs	r2, #0
 800d27a:	2102      	movs	r1, #2
 800d27c:	4818      	ldr	r0, [pc, #96]	; (800d2e0 <Update_Service+0x160>)
 800d27e:	f7f5 fc69 	bl	8002b54 <HAL_GPIO_WritePin>

        break;
 800d282:	e017      	b.n	800d2b4 <Update_Service+0x134>
      case APP_BLE_DISABLE_NOTIFICATION_DESC :
        //APP_DBG_MSG("* GATT : Disable Server Notification\n");
        aci_gatt_write_char_desc(aP2PClientContext[index].connHandle,
 800d284:	79fb      	ldrb	r3, [r7, #7]
 800d286:	4a15      	ldr	r2, [pc, #84]	; (800d2dc <Update_Service+0x15c>)
 800d288:	011b      	lsls	r3, r3, #4
 800d28a:	4413      	add	r3, r2
 800d28c:	3302      	adds	r3, #2
 800d28e:	8818      	ldrh	r0, [r3, #0]
 800d290:	79fb      	ldrb	r3, [r7, #7]
 800d292:	4a12      	ldr	r2, [pc, #72]	; (800d2dc <Update_Service+0x15c>)
 800d294:	011b      	lsls	r3, r3, #4
 800d296:	4413      	add	r3, r2
 800d298:	330e      	adds	r3, #14
 800d29a:	8819      	ldrh	r1, [r3, #0]
 800d29c:	1d3b      	adds	r3, r7, #4
 800d29e:	2202      	movs	r2, #2
 800d2a0:	f7fd ff6e 	bl	800b180 <aci_gatt_write_char_desc>
                                 aP2PClientContext[index].P2PNotificationDescHandle,
                                 2,
                                 (uint8_t *)&enable);

        aP2PClientContext[index].state = APP_BLE_CONNECTED_CLIENT;
 800d2a4:	79fb      	ldrb	r3, [r7, #7]
 800d2a6:	4a0d      	ldr	r2, [pc, #52]	; (800d2dc <Update_Service+0x15c>)
 800d2a8:	011b      	lsls	r3, r3, #4
 800d2aa:	4413      	add	r3, r2
 800d2ac:	2206      	movs	r2, #6
 800d2ae:	701a      	strb	r2, [r3, #0]

        break;
 800d2b0:	e000      	b.n	800d2b4 <Update_Service+0x134>
      default:
        break;
 800d2b2:	bf00      	nop
    }
    index++;
 800d2b4:	79fb      	ldrb	r3, [r7, #7]
 800d2b6:	3301      	adds	r3, #1
 800d2b8:	71fb      	strb	r3, [r7, #7]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d2ba:	79fb      	ldrb	r3, [r7, #7]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d108      	bne.n	800d2d2 <Update_Service+0x152>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
 800d2c0:	79fb      	ldrb	r3, [r7, #7]
 800d2c2:	4a06      	ldr	r2, [pc, #24]	; (800d2dc <Update_Service+0x15c>)
 800d2c4:	011b      	lsls	r3, r3, #4
 800d2c6:	4413      	add	r3, r2
 800d2c8:	781b      	ldrb	r3, [r3, #0]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	f47f af60 	bne.w	800d190 <Update_Service+0x10>
  }
  return;
 800d2d0:	bf00      	nop
 800d2d2:	bf00      	nop
}
 800d2d4:	3708      	adds	r7, #8
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd80      	pop	{r7, pc}
 800d2da:	bf00      	nop
 800d2dc:	2000030c 	.word	0x2000030c
 800d2e0:	48000400 	.word	0x48000400

0800d2e4 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 800d2e4:	b480      	push	{r7}
 800d2e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800d2e8:	4b05      	ldr	r3, [pc, #20]	; (800d300 <LL_PWR_EnableBootC2+0x1c>)
 800d2ea:	68db      	ldr	r3, [r3, #12]
 800d2ec:	4a04      	ldr	r2, [pc, #16]	; (800d300 <LL_PWR_EnableBootC2+0x1c>)
 800d2ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d2f2:	60d3      	str	r3, [r2, #12]
}
 800d2f4:	bf00      	nop
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fc:	4770      	bx	lr
 800d2fe:	bf00      	nop
 800d300:	58000400 	.word	0x58000400

0800d304 <LL_AHB3_GRP1_EnableClock>:
{
 800d304:	b480      	push	{r7}
 800d306:	b085      	sub	sp, #20
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800d30c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d310:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d312:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	4313      	orrs	r3, r2
 800d31a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800d31c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d320:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	4013      	ands	r3, r2
 800d326:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d328:	68fb      	ldr	r3, [r7, #12]
}
 800d32a:	bf00      	nop
 800d32c:	3714      	adds	r7, #20
 800d32e:	46bd      	mov	sp, r7
 800d330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d334:	4770      	bx	lr

0800d336 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800d336:	b480      	push	{r7}
 800d338:	b083      	sub	sp, #12
 800d33a:	af00      	add	r7, sp, #0
 800d33c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	601a      	str	r2, [r3, #0]
}
 800d34a:	bf00      	nop
 800d34c:	370c      	adds	r7, #12
 800d34e:	46bd      	mov	sp, r7
 800d350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d354:	4770      	bx	lr

0800d356 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800d356:	b480      	push	{r7}
 800d358:	b083      	sub	sp, #12
 800d35a:	af00      	add	r7, sp, #0
 800d35c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	f043 0201 	orr.w	r2, r3, #1
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	601a      	str	r2, [r3, #0]
}
 800d36a:	bf00      	nop
 800d36c:	370c      	adds	r7, #12
 800d36e:	46bd      	mov	sp, r7
 800d370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d374:	4770      	bx	lr

0800d376 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d376:	b480      	push	{r7}
 800d378:	b083      	sub	sp, #12
 800d37a:	af00      	add	r7, sp, #0
 800d37c:	6078      	str	r0, [r7, #4]
 800d37e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	685a      	ldr	r2, [r3, #4]
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	041b      	lsls	r3, r3, #16
 800d388:	43db      	mvns	r3, r3
 800d38a:	401a      	ands	r2, r3
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	605a      	str	r2, [r3, #4]
}
 800d390:	bf00      	nop
 800d392:	370c      	adds	r7, #12
 800d394:	46bd      	mov	sp, r7
 800d396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39a:	4770      	bx	lr

0800d39c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d39c:	b480      	push	{r7}
 800d39e:	b083      	sub	sp, #12
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
 800d3a4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	685a      	ldr	r2, [r3, #4]
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	041b      	lsls	r3, r3, #16
 800d3ae:	431a      	orrs	r2, r3
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	605a      	str	r2, [r3, #4]
}
 800d3b4:	bf00      	nop
 800d3b6:	370c      	adds	r7, #12
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr

0800d3c0 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	b083      	sub	sp, #12
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
 800d3c8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	685a      	ldr	r2, [r3, #4]
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	43db      	mvns	r3, r3
 800d3d2:	401a      	ands	r2, r3
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	605a      	str	r2, [r3, #4]
}
 800d3d8:	bf00      	nop
 800d3da:	370c      	adds	r7, #12
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e2:	4770      	bx	lr

0800d3e4 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	b083      	sub	sp, #12
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
 800d3ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	683a      	ldr	r2, [r7, #0]
 800d3f2:	609a      	str	r2, [r3, #8]
}
 800d3f4:	bf00      	nop
 800d3f6:	370c      	adds	r7, #12
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fe:	4770      	bx	lr

0800d400 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d400:	b480      	push	{r7}
 800d402:	b083      	sub	sp, #12
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
 800d408:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	041a      	lsls	r2, r3, #16
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	609a      	str	r2, [r3, #8]
}
 800d412:	bf00      	nop
 800d414:	370c      	adds	r7, #12
 800d416:	46bd      	mov	sp, r7
 800d418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41c:	4770      	bx	lr

0800d41e <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d41e:	b480      	push	{r7}
 800d420:	b083      	sub	sp, #12
 800d422:	af00      	add	r7, sp, #0
 800d424:	6078      	str	r0, [r7, #4]
 800d426:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	68da      	ldr	r2, [r3, #12]
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	4013      	ands	r3, r2
 800d430:	683a      	ldr	r2, [r7, #0]
 800d432:	429a      	cmp	r2, r3
 800d434:	d101      	bne.n	800d43a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800d436:	2301      	movs	r3, #1
 800d438:	e000      	b.n	800d43c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800d43a:	2300      	movs	r3, #0
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	370c      	adds	r7, #12
 800d440:	46bd      	mov	sp, r7
 800d442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d446:	4770      	bx	lr

0800d448 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d448:	b480      	push	{r7}
 800d44a:	b083      	sub	sp, #12
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
 800d450:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	69da      	ldr	r2, [r3, #28]
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	4013      	ands	r3, r2
 800d45a:	683a      	ldr	r2, [r7, #0]
 800d45c:	429a      	cmp	r2, r3
 800d45e:	d101      	bne.n	800d464 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800d460:	2301      	movs	r3, #1
 800d462:	e000      	b.n	800d466 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800d464:	2300      	movs	r3, #0
}
 800d466:	4618      	mov	r0, r3
 800d468:	370c      	adds	r7, #12
 800d46a:	46bd      	mov	sp, r7
 800d46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d470:	4770      	bx	lr
	...

0800d474 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800d474:	b580      	push	{r7, lr}
 800d476:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800d478:	2102      	movs	r1, #2
 800d47a:	4819      	ldr	r0, [pc, #100]	; (800d4e0 <HW_IPCC_Rx_Handler+0x6c>)
 800d47c:	f7ff ffe4 	bl	800d448 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d480:	4603      	mov	r3, r0
 800d482:	2b00      	cmp	r3, #0
 800d484:	d009      	beq.n	800d49a <HW_IPCC_Rx_Handler+0x26>
 800d486:	4b16      	ldr	r3, [pc, #88]	; (800d4e0 <HW_IPCC_Rx_Handler+0x6c>)
 800d488:	685b      	ldr	r3, [r3, #4]
 800d48a:	43db      	mvns	r3, r3
 800d48c:	f003 0302 	and.w	r3, r3, #2
 800d490:	2b00      	cmp	r3, #0
 800d492:	d002      	beq.n	800d49a <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800d494:	f000 f8de 	bl	800d654 <HW_IPCC_SYS_EvtHandler>
 800d498:	e01f      	b.n	800d4da <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CliNotifEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800d49a:	2101      	movs	r1, #1
 800d49c:	4810      	ldr	r0, [pc, #64]	; (800d4e0 <HW_IPCC_Rx_Handler+0x6c>)
 800d49e:	f7ff ffd3 	bl	800d448 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d008      	beq.n	800d4ba <HW_IPCC_Rx_Handler+0x46>
 800d4a8:	4b0d      	ldr	r3, [pc, #52]	; (800d4e0 <HW_IPCC_Rx_Handler+0x6c>)
 800d4aa:	685b      	ldr	r3, [r3, #4]
 800d4ac:	f003 0301 	and.w	r3, r3, #1
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d102      	bne.n	800d4ba <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800d4b4:	f000 f892 	bl	800d5dc <HW_IPCC_BLE_EvtHandler>
 800d4b8:	e00f      	b.n	800d4da <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800d4ba:	2108      	movs	r1, #8
 800d4bc:	4808      	ldr	r0, [pc, #32]	; (800d4e0 <HW_IPCC_Rx_Handler+0x6c>)
 800d4be:	f7ff ffc3 	bl	800d448 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d009      	beq.n	800d4dc <HW_IPCC_Rx_Handler+0x68>
 800d4c8:	4b05      	ldr	r3, [pc, #20]	; (800d4e0 <HW_IPCC_Rx_Handler+0x6c>)
 800d4ca:	685b      	ldr	r3, [r3, #4]
 800d4cc:	43db      	mvns	r3, r3
 800d4ce:	f003 0308 	and.w	r3, r3, #8
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d002      	beq.n	800d4dc <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800d4d6:	f000 f909 	bl	800d6ec <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800d4da:	bf00      	nop
 800d4dc:	bf00      	nop
}
 800d4de:	bd80      	pop	{r7, pc}
 800d4e0:	58000c00 	.word	0x58000c00

0800d4e4 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800d4e8:	2102      	movs	r1, #2
 800d4ea:	4822      	ldr	r0, [pc, #136]	; (800d574 <HW_IPCC_Tx_Handler+0x90>)
 800d4ec:	f7ff ff97 	bl	800d41e <LL_C1_IPCC_IsActiveFlag_CHx>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d109      	bne.n	800d50a <HW_IPCC_Tx_Handler+0x26>
 800d4f6:	4b1f      	ldr	r3, [pc, #124]	; (800d574 <HW_IPCC_Tx_Handler+0x90>)
 800d4f8:	685b      	ldr	r3, [r3, #4]
 800d4fa:	43db      	mvns	r3, r3
 800d4fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d500:	2b00      	cmp	r3, #0
 800d502:	d002      	beq.n	800d50a <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800d504:	f000 f89a 	bl	800d63c <HW_IPCC_SYS_CmdEvtHandler>
 800d508:	e031      	b.n	800d56e <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800d50a:	2102      	movs	r1, #2
 800d50c:	4819      	ldr	r0, [pc, #100]	; (800d574 <HW_IPCC_Tx_Handler+0x90>)
 800d50e:	f7ff ff86 	bl	800d41e <LL_C1_IPCC_IsActiveFlag_CHx>
 800d512:	4603      	mov	r3, r0
 800d514:	2b00      	cmp	r3, #0
 800d516:	d109      	bne.n	800d52c <HW_IPCC_Tx_Handler+0x48>
 800d518:	4b16      	ldr	r3, [pc, #88]	; (800d574 <HW_IPCC_Tx_Handler+0x90>)
 800d51a:	685b      	ldr	r3, [r3, #4]
 800d51c:	43db      	mvns	r3, r3
 800d51e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d522:	2b00      	cmp	r3, #0
 800d524:	d002      	beq.n	800d52c <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800d526:	f000 f889 	bl	800d63c <HW_IPCC_SYS_CmdEvtHandler>
 800d52a:	e020      	b.n	800d56e <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800d52c:	2108      	movs	r1, #8
 800d52e:	4811      	ldr	r0, [pc, #68]	; (800d574 <HW_IPCC_Tx_Handler+0x90>)
 800d530:	f7ff ff75 	bl	800d41e <LL_C1_IPCC_IsActiveFlag_CHx>
 800d534:	4603      	mov	r3, r0
 800d536:	2b00      	cmp	r3, #0
 800d538:	d109      	bne.n	800d54e <HW_IPCC_Tx_Handler+0x6a>
 800d53a:	4b0e      	ldr	r3, [pc, #56]	; (800d574 <HW_IPCC_Tx_Handler+0x90>)
 800d53c:	685b      	ldr	r3, [r3, #4]
 800d53e:	43db      	mvns	r3, r3
 800d540:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d544:	2b00      	cmp	r3, #0
 800d546:	d002      	beq.n	800d54e <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 800d548:	f000 f8b2 	bl	800d6b0 <HW_IPCC_MM_FreeBufHandler>
 800d54c:	e00f      	b.n	800d56e <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800d54e:	2120      	movs	r1, #32
 800d550:	4808      	ldr	r0, [pc, #32]	; (800d574 <HW_IPCC_Tx_Handler+0x90>)
 800d552:	f7ff ff64 	bl	800d41e <LL_C1_IPCC_IsActiveFlag_CHx>
 800d556:	4603      	mov	r3, r0
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d109      	bne.n	800d570 <HW_IPCC_Tx_Handler+0x8c>
 800d55c:	4b05      	ldr	r3, [pc, #20]	; (800d574 <HW_IPCC_Tx_Handler+0x90>)
 800d55e:	685b      	ldr	r3, [r3, #4]
 800d560:	43db      	mvns	r3, r3
 800d562:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d566:	2b00      	cmp	r3, #0
 800d568:	d002      	beq.n	800d570 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800d56a:	f000 f843 	bl	800d5f4 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800d56e:	bf00      	nop
 800d570:	bf00      	nop
}
 800d572:	bd80      	pop	{r7, pc}
 800d574:	58000c00 	.word	0x58000c00

0800d578 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	af00      	add	r7, sp, #0
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800d57c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800d57e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800d580:	f7ff feb0 	bl	800d2e4 <LL_PWR_EnableBootC2>

  return;
 800d584:	bf00      	nop
}
 800d586:	bd80      	pop	{r7, pc}

0800d588 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800d58c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800d590:	f7ff feb8 	bl	800d304 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800d594:	4806      	ldr	r0, [pc, #24]	; (800d5b0 <HW_IPCC_Init+0x28>)
 800d596:	f7ff fede 	bl	800d356 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800d59a:	4805      	ldr	r0, [pc, #20]	; (800d5b0 <HW_IPCC_Init+0x28>)
 800d59c:	f7ff fecb 	bl	800d336 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800d5a0:	202c      	movs	r0, #44	; 0x2c
 800d5a2:	f7f5 f82b 	bl	80025fc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800d5a6:	202d      	movs	r0, #45	; 0x2d
 800d5a8:	f7f5 f828 	bl	80025fc <HAL_NVIC_EnableIRQ>

  return;
 800d5ac:	bf00      	nop
}
 800d5ae:	bd80      	pop	{r7, pc}
 800d5b0:	58000c00 	.word	0x58000c00

0800d5b4 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800d5b8:	2101      	movs	r1, #1
 800d5ba:	4802      	ldr	r0, [pc, #8]	; (800d5c4 <HW_IPCC_BLE_Init+0x10>)
 800d5bc:	f7ff ff00 	bl	800d3c0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d5c0:	bf00      	nop
}
 800d5c2:	bd80      	pop	{r7, pc}
 800d5c4:	58000c00 	.word	0x58000c00

0800d5c8 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800d5cc:	2101      	movs	r1, #1
 800d5ce:	4802      	ldr	r0, [pc, #8]	; (800d5d8 <HW_IPCC_BLE_SendCmd+0x10>)
 800d5d0:	f7ff ff16 	bl	800d400 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800d5d4:	bf00      	nop
}
 800d5d6:	bd80      	pop	{r7, pc}
 800d5d8:	58000c00 	.word	0x58000c00

0800d5dc <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800d5e0:	f7fe fcfc 	bl	800bfdc <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800d5e4:	2101      	movs	r1, #1
 800d5e6:	4802      	ldr	r0, [pc, #8]	; (800d5f0 <HW_IPCC_BLE_EvtHandler+0x14>)
 800d5e8:	f7ff fefc 	bl	800d3e4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d5ec:	bf00      	nop
}
 800d5ee:	bd80      	pop	{r7, pc}
 800d5f0:	58000c00 	.word	0x58000c00

0800d5f4 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800d5f8:	2120      	movs	r1, #32
 800d5fa:	4803      	ldr	r0, [pc, #12]	; (800d608 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800d5fc:	f7ff fece 	bl	800d39c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800d600:	f7fe fd08 	bl	800c014 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800d604:	bf00      	nop
}
 800d606:	bd80      	pop	{r7, pc}
 800d608:	58000c00 	.word	0x58000c00

0800d60c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800d610:	2102      	movs	r1, #2
 800d612:	4802      	ldr	r0, [pc, #8]	; (800d61c <HW_IPCC_SYS_Init+0x10>)
 800d614:	f7ff fed4 	bl	800d3c0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d618:	bf00      	nop
}
 800d61a:	bd80      	pop	{r7, pc}
 800d61c:	58000c00 	.word	0x58000c00

0800d620 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800d620:	b580      	push	{r7, lr}
 800d622:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d624:	2102      	movs	r1, #2
 800d626:	4804      	ldr	r0, [pc, #16]	; (800d638 <HW_IPCC_SYS_SendCmd+0x18>)
 800d628:	f7ff feea 	bl	800d400 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d62c:	2102      	movs	r1, #2
 800d62e:	4802      	ldr	r0, [pc, #8]	; (800d638 <HW_IPCC_SYS_SendCmd+0x18>)
 800d630:	f7ff fea1 	bl	800d376 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800d634:	bf00      	nop
}
 800d636:	bd80      	pop	{r7, pc}
 800d638:	58000c00 	.word	0x58000c00

0800d63c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d640:	2102      	movs	r1, #2
 800d642:	4803      	ldr	r0, [pc, #12]	; (800d650 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800d644:	f7ff feaa 	bl	800d39c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800d648:	f7fe fd2c 	bl	800c0a4 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800d64c:	bf00      	nop
}
 800d64e:	bd80      	pop	{r7, pc}
 800d650:	58000c00 	.word	0x58000c00

0800d654 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800d654:	b580      	push	{r7, lr}
 800d656:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800d658:	f7fe fd34 	bl	800c0c4 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800d65c:	2102      	movs	r1, #2
 800d65e:	4802      	ldr	r0, [pc, #8]	; (800d668 <HW_IPCC_SYS_EvtHandler+0x14>)
 800d660:	f7ff fec0 	bl	800d3e4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d664:	bf00      	nop
}
 800d666:	bd80      	pop	{r7, pc}
 800d668:	58000c00 	.word	0x58000c00

0800d66c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b082      	sub	sp, #8
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800d674:	2108      	movs	r1, #8
 800d676:	480c      	ldr	r0, [pc, #48]	; (800d6a8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d678:	f7ff fed1 	bl	800d41e <LL_C1_IPCC_IsActiveFlag_CHx>
 800d67c:	4603      	mov	r3, r0
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d007      	beq.n	800d692 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800d682:	4a0a      	ldr	r2, [pc, #40]	; (800d6ac <HW_IPCC_MM_SendFreeBuf+0x40>)
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d688:	2108      	movs	r1, #8
 800d68a:	4807      	ldr	r0, [pc, #28]	; (800d6a8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d68c:	f7ff fe73 	bl	800d376 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800d690:	e006      	b.n	800d6a0 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d696:	2108      	movs	r1, #8
 800d698:	4803      	ldr	r0, [pc, #12]	; (800d6a8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d69a:	f7ff feb1 	bl	800d400 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800d69e:	bf00      	nop
}
 800d6a0:	3708      	adds	r7, #8
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}
 800d6a6:	bf00      	nop
 800d6a8:	58000c00 	.word	0x58000c00
 800d6ac:	20000464 	.word	0x20000464

0800d6b0 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d6b4:	2108      	movs	r1, #8
 800d6b6:	4806      	ldr	r0, [pc, #24]	; (800d6d0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800d6b8:	f7ff fe70 	bl	800d39c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800d6bc:	4b05      	ldr	r3, [pc, #20]	; (800d6d4 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d6c2:	2108      	movs	r1, #8
 800d6c4:	4802      	ldr	r0, [pc, #8]	; (800d6d0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800d6c6:	f7ff fe9b 	bl	800d400 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800d6ca:	bf00      	nop
}
 800d6cc:	bd80      	pop	{r7, pc}
 800d6ce:	bf00      	nop
 800d6d0:	58000c00 	.word	0x58000c00
 800d6d4:	20000464 	.word	0x20000464

0800d6d8 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800d6dc:	2108      	movs	r1, #8
 800d6de:	4802      	ldr	r0, [pc, #8]	; (800d6e8 <HW_IPCC_TRACES_Init+0x10>)
 800d6e0:	f7ff fe6e 	bl	800d3c0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d6e4:	bf00      	nop
}
 800d6e6:	bd80      	pop	{r7, pc}
 800d6e8:	58000c00 	.word	0x58000c00

0800d6ec <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800d6f0:	f7fe fd86 	bl	800c200 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800d6f4:	2108      	movs	r1, #8
 800d6f6:	4802      	ldr	r0, [pc, #8]	; (800d700 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800d6f8:	f7ff fe74 	bl	800d3e4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d6fc:	bf00      	nop
}
 800d6fe:	bd80      	pop	{r7, pc}
 800d700:	58000c00 	.word	0x58000c00

0800d704 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  
  /* USER CODE END USB_Device_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800d708:	2200      	movs	r2, #0
 800d70a:	4912      	ldr	r1, [pc, #72]	; (800d754 <MX_USB_Device_Init+0x50>)
 800d70c:	4812      	ldr	r0, [pc, #72]	; (800d758 <MX_USB_Device_Init+0x54>)
 800d70e:	f7fb ff89 	bl	8009624 <USBD_Init>
 800d712:	4603      	mov	r3, r0
 800d714:	2b00      	cmp	r3, #0
 800d716:	d001      	beq.n	800d71c <MX_USB_Device_Init+0x18>
    Error_Handler();
 800d718:	f7f3 ffc4 	bl	80016a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800d71c:	490f      	ldr	r1, [pc, #60]	; (800d75c <MX_USB_Device_Init+0x58>)
 800d71e:	480e      	ldr	r0, [pc, #56]	; (800d758 <MX_USB_Device_Init+0x54>)
 800d720:	f7fb ffab 	bl	800967a <USBD_RegisterClass>
 800d724:	4603      	mov	r3, r0
 800d726:	2b00      	cmp	r3, #0
 800d728:	d001      	beq.n	800d72e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800d72a:	f7f3 ffbb 	bl	80016a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800d72e:	490c      	ldr	r1, [pc, #48]	; (800d760 <MX_USB_Device_Init+0x5c>)
 800d730:	4809      	ldr	r0, [pc, #36]	; (800d758 <MX_USB_Device_Init+0x54>)
 800d732:	f7fb fed9 	bl	80094e8 <USBD_CDC_RegisterInterface>
 800d736:	4603      	mov	r3, r0
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d001      	beq.n	800d740 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800d73c:	f7f3 ffb2 	bl	80016a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800d740:	4805      	ldr	r0, [pc, #20]	; (800d758 <MX_USB_Device_Init+0x54>)
 800d742:	f7fb ffb4 	bl	80096ae <USBD_Start>
 800d746:	4603      	mov	r3, r0
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d001      	beq.n	800d750 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800d74c:	f7f3 ffaa 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */
  
  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800d750:	bf00      	nop
 800d752:	bd80      	pop	{r7, pc}
 800d754:	20000138 	.word	0x20000138
 800d758:	20000758 	.word	0x20000758
 800d75c:	20000024 	.word	0x20000024
 800d760:	20000128 	.word	0x20000128

0800d764 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d764:	b580      	push	{r7, lr}
 800d766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d768:	2200      	movs	r2, #0
 800d76a:	4907      	ldr	r1, [pc, #28]	; (800d788 <CDC_Init_FS+0x24>)
 800d76c:	4807      	ldr	r0, [pc, #28]	; (800d78c <CDC_Init_FS+0x28>)
 800d76e:	f7fb fed2 	bl	8009516 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d772:	4907      	ldr	r1, [pc, #28]	; (800d790 <CDC_Init_FS+0x2c>)
 800d774:	4805      	ldr	r0, [pc, #20]	; (800d78c <CDC_Init_FS+0x28>)
 800d776:	f7fb fee8 	bl	800954a <USBD_CDC_SetRxBuffer>
  VCPInitialized=1;
 800d77a:	4b06      	ldr	r3, [pc, #24]	; (800d794 <CDC_Init_FS+0x30>)
 800d77c:	2201      	movs	r2, #1
 800d77e:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800d780:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d782:	4618      	mov	r0, r3
 800d784:	bd80      	pop	{r7, pc}
 800d786:	bf00      	nop
 800d788:	20000a2c 	.word	0x20000a2c
 800d78c:	20000758 	.word	0x20000758
 800d790:	20000a1c 	.word	0x20000a1c
 800d794:	20000468 	.word	0x20000468

0800d798 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d798:	b480      	push	{r7}
 800d79a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  VCPInitialized=0;
 800d79c:	4b04      	ldr	r3, [pc, #16]	; (800d7b0 <CDC_DeInit_FS+0x18>)
 800d79e:	2200      	movs	r2, #0
 800d7a0:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800d7a2:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ac:	4770      	bx	lr
 800d7ae:	bf00      	nop
 800d7b0:	20000468 	.word	0x20000468

0800d7b4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d7b4:	b480      	push	{r7}
 800d7b6:	b083      	sub	sp, #12
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	6039      	str	r1, [r7, #0]
 800d7be:	71fb      	strb	r3, [r7, #7]
 800d7c0:	4613      	mov	r3, r2
 800d7c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d7c4:	79fb      	ldrb	r3, [r7, #7]
 800d7c6:	2b23      	cmp	r3, #35	; 0x23
 800d7c8:	d84a      	bhi.n	800d860 <CDC_Control_FS+0xac>
 800d7ca:	a201      	add	r2, pc, #4	; (adr r2, 800d7d0 <CDC_Control_FS+0x1c>)
 800d7cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7d0:	0800d861 	.word	0x0800d861
 800d7d4:	0800d861 	.word	0x0800d861
 800d7d8:	0800d861 	.word	0x0800d861
 800d7dc:	0800d861 	.word	0x0800d861
 800d7e0:	0800d861 	.word	0x0800d861
 800d7e4:	0800d861 	.word	0x0800d861
 800d7e8:	0800d861 	.word	0x0800d861
 800d7ec:	0800d861 	.word	0x0800d861
 800d7f0:	0800d861 	.word	0x0800d861
 800d7f4:	0800d861 	.word	0x0800d861
 800d7f8:	0800d861 	.word	0x0800d861
 800d7fc:	0800d861 	.word	0x0800d861
 800d800:	0800d861 	.word	0x0800d861
 800d804:	0800d861 	.word	0x0800d861
 800d808:	0800d861 	.word	0x0800d861
 800d80c:	0800d861 	.word	0x0800d861
 800d810:	0800d861 	.word	0x0800d861
 800d814:	0800d861 	.word	0x0800d861
 800d818:	0800d861 	.word	0x0800d861
 800d81c:	0800d861 	.word	0x0800d861
 800d820:	0800d861 	.word	0x0800d861
 800d824:	0800d861 	.word	0x0800d861
 800d828:	0800d861 	.word	0x0800d861
 800d82c:	0800d861 	.word	0x0800d861
 800d830:	0800d861 	.word	0x0800d861
 800d834:	0800d861 	.word	0x0800d861
 800d838:	0800d861 	.word	0x0800d861
 800d83c:	0800d861 	.word	0x0800d861
 800d840:	0800d861 	.word	0x0800d861
 800d844:	0800d861 	.word	0x0800d861
 800d848:	0800d861 	.word	0x0800d861
 800d84c:	0800d861 	.word	0x0800d861
 800d850:	0800d861 	.word	0x0800d861
 800d854:	0800d861 	.word	0x0800d861
 800d858:	0800d861 	.word	0x0800d861
 800d85c:	0800d861 	.word	0x0800d861
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d860:	bf00      	nop
  }

  return (USBD_OK);
 800d862:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d864:	4618      	mov	r0, r3
 800d866:	370c      	adds	r7, #12
 800d868:	46bd      	mov	sp, r7
 800d86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86e:	4770      	bx	lr

0800d870 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b082      	sub	sp, #8
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
 800d878:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d87a:	6879      	ldr	r1, [r7, #4]
 800d87c:	4805      	ldr	r0, [pc, #20]	; (800d894 <CDC_Receive_FS+0x24>)
 800d87e:	f7fb fe64 	bl	800954a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d882:	4804      	ldr	r0, [pc, #16]	; (800d894 <CDC_Receive_FS+0x24>)
 800d884:	f7fb fea4 	bl	80095d0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d888:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d88a:	4618      	mov	r0, r3
 800d88c:	3708      	adds	r7, #8
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}
 800d892:	bf00      	nop
 800d894:	20000758 	.word	0x20000758

0800d898 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b084      	sub	sp, #16
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
 800d8a0:	460b      	mov	r3, r1
 800d8a2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d8a8:	4b0d      	ldr	r3, [pc, #52]	; (800d8e0 <CDC_Transmit_FS+0x48>)
 800d8aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8ae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d001      	beq.n	800d8be <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	e00b      	b.n	800d8d6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d8be:	887b      	ldrh	r3, [r7, #2]
 800d8c0:	461a      	mov	r2, r3
 800d8c2:	6879      	ldr	r1, [r7, #4]
 800d8c4:	4806      	ldr	r0, [pc, #24]	; (800d8e0 <CDC_Transmit_FS+0x48>)
 800d8c6:	f7fb fe26 	bl	8009516 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d8ca:	4805      	ldr	r0, [pc, #20]	; (800d8e0 <CDC_Transmit_FS+0x48>)
 800d8cc:	f7fb fe51 	bl	8009572 <USBD_CDC_TransmitPacket>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d8d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	3710      	adds	r7, #16
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}
 800d8de:	bf00      	nop
 800d8e0:	20000758 	.word	0x20000758

0800d8e4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b083      	sub	sp, #12
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	6039      	str	r1, [r7, #0]
 800d8ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	2212      	movs	r2, #18
 800d8f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800d8f6:	4b03      	ldr	r3, [pc, #12]	; (800d904 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	370c      	adds	r7, #12
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d902:	4770      	bx	lr
 800d904:	20000158 	.word	0x20000158

0800d908 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d908:	b480      	push	{r7}
 800d90a:	b083      	sub	sp, #12
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	4603      	mov	r3, r0
 800d910:	6039      	str	r1, [r7, #0]
 800d912:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	2204      	movs	r2, #4
 800d918:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d91a:	4b03      	ldr	r3, [pc, #12]	; (800d928 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	370c      	adds	r7, #12
 800d920:	46bd      	mov	sp, r7
 800d922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d926:	4770      	bx	lr
 800d928:	2000016c 	.word	0x2000016c

0800d92c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b082      	sub	sp, #8
 800d930:	af00      	add	r7, sp, #0
 800d932:	4603      	mov	r3, r0
 800d934:	6039      	str	r1, [r7, #0]
 800d936:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d938:	79fb      	ldrb	r3, [r7, #7]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d105      	bne.n	800d94a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d93e:	683a      	ldr	r2, [r7, #0]
 800d940:	4907      	ldr	r1, [pc, #28]	; (800d960 <USBD_CDC_ProductStrDescriptor+0x34>)
 800d942:	4808      	ldr	r0, [pc, #32]	; (800d964 <USBD_CDC_ProductStrDescriptor+0x38>)
 800d944:	f7fc fe4e 	bl	800a5e4 <USBD_GetString>
 800d948:	e004      	b.n	800d954 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d94a:	683a      	ldr	r2, [r7, #0]
 800d94c:	4904      	ldr	r1, [pc, #16]	; (800d960 <USBD_CDC_ProductStrDescriptor+0x34>)
 800d94e:	4805      	ldr	r0, [pc, #20]	; (800d964 <USBD_CDC_ProductStrDescriptor+0x38>)
 800d950:	f7fc fe48 	bl	800a5e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d954:	4b02      	ldr	r3, [pc, #8]	; (800d960 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800d956:	4618      	mov	r0, r3
 800d958:	3708      	adds	r7, #8
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}
 800d95e:	bf00      	nop
 800d960:	20000a3c 	.word	0x20000a3c
 800d964:	0800e428 	.word	0x0800e428

0800d968 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b082      	sub	sp, #8
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	4603      	mov	r3, r0
 800d970:	6039      	str	r1, [r7, #0]
 800d972:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d974:	683a      	ldr	r2, [r7, #0]
 800d976:	4904      	ldr	r1, [pc, #16]	; (800d988 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800d978:	4804      	ldr	r0, [pc, #16]	; (800d98c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800d97a:	f7fc fe33 	bl	800a5e4 <USBD_GetString>
  return USBD_StrDesc;
 800d97e:	4b02      	ldr	r3, [pc, #8]	; (800d988 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800d980:	4618      	mov	r0, r3
 800d982:	3708      	adds	r7, #8
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}
 800d988:	20000a3c 	.word	0x20000a3c
 800d98c:	0800e440 	.word	0x0800e440

0800d990 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b082      	sub	sp, #8
 800d994:	af00      	add	r7, sp, #0
 800d996:	4603      	mov	r3, r0
 800d998:	6039      	str	r1, [r7, #0]
 800d99a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	221a      	movs	r2, #26
 800d9a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d9a2:	f000 f843 	bl	800da2c <Get_SerialNum>
  
  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */
  
  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800d9a6:	4b02      	ldr	r3, [pc, #8]	; (800d9b0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	3708      	adds	r7, #8
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}
 800d9b0:	20000170 	.word	0x20000170

0800d9b4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b082      	sub	sp, #8
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	6039      	str	r1, [r7, #0]
 800d9be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d9c0:	79fb      	ldrb	r3, [r7, #7]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d105      	bne.n	800d9d2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d9c6:	683a      	ldr	r2, [r7, #0]
 800d9c8:	4907      	ldr	r1, [pc, #28]	; (800d9e8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800d9ca:	4808      	ldr	r0, [pc, #32]	; (800d9ec <USBD_CDC_ConfigStrDescriptor+0x38>)
 800d9cc:	f7fc fe0a 	bl	800a5e4 <USBD_GetString>
 800d9d0:	e004      	b.n	800d9dc <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d9d2:	683a      	ldr	r2, [r7, #0]
 800d9d4:	4904      	ldr	r1, [pc, #16]	; (800d9e8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800d9d6:	4805      	ldr	r0, [pc, #20]	; (800d9ec <USBD_CDC_ConfigStrDescriptor+0x38>)
 800d9d8:	f7fc fe04 	bl	800a5e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d9dc:	4b02      	ldr	r3, [pc, #8]	; (800d9e8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800d9de:	4618      	mov	r0, r3
 800d9e0:	3708      	adds	r7, #8
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}
 800d9e6:	bf00      	nop
 800d9e8:	20000a3c 	.word	0x20000a3c
 800d9ec:	0800e454 	.word	0x0800e454

0800d9f0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b082      	sub	sp, #8
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	6039      	str	r1, [r7, #0]
 800d9fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d9fc:	79fb      	ldrb	r3, [r7, #7]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d105      	bne.n	800da0e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800da02:	683a      	ldr	r2, [r7, #0]
 800da04:	4907      	ldr	r1, [pc, #28]	; (800da24 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800da06:	4808      	ldr	r0, [pc, #32]	; (800da28 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800da08:	f7fc fdec 	bl	800a5e4 <USBD_GetString>
 800da0c:	e004      	b.n	800da18 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800da0e:	683a      	ldr	r2, [r7, #0]
 800da10:	4904      	ldr	r1, [pc, #16]	; (800da24 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800da12:	4805      	ldr	r0, [pc, #20]	; (800da28 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800da14:	f7fc fde6 	bl	800a5e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800da18:	4b02      	ldr	r3, [pc, #8]	; (800da24 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800da1a:	4618      	mov	r0, r3
 800da1c:	3708      	adds	r7, #8
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}
 800da22:	bf00      	nop
 800da24:	20000a3c 	.word	0x20000a3c
 800da28:	0800e460 	.word	0x0800e460

0800da2c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b084      	sub	sp, #16
 800da30:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800da32:	4b0f      	ldr	r3, [pc, #60]	; (800da70 <Get_SerialNum+0x44>)
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800da38:	4b0e      	ldr	r3, [pc, #56]	; (800da74 <Get_SerialNum+0x48>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800da3e:	4b0e      	ldr	r3, [pc, #56]	; (800da78 <Get_SerialNum+0x4c>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800da44:	68fa      	ldr	r2, [r7, #12]
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	4413      	add	r3, r2
 800da4a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d009      	beq.n	800da66 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800da52:	2208      	movs	r2, #8
 800da54:	4909      	ldr	r1, [pc, #36]	; (800da7c <Get_SerialNum+0x50>)
 800da56:	68f8      	ldr	r0, [r7, #12]
 800da58:	f000 f814 	bl	800da84 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800da5c:	2204      	movs	r2, #4
 800da5e:	4908      	ldr	r1, [pc, #32]	; (800da80 <Get_SerialNum+0x54>)
 800da60:	68b8      	ldr	r0, [r7, #8]
 800da62:	f000 f80f 	bl	800da84 <IntToUnicode>
  }
}
 800da66:	bf00      	nop
 800da68:	3710      	adds	r7, #16
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}
 800da6e:	bf00      	nop
 800da70:	1fff7590 	.word	0x1fff7590
 800da74:	1fff7594 	.word	0x1fff7594
 800da78:	1fff7598 	.word	0x1fff7598
 800da7c:	20000172 	.word	0x20000172
 800da80:	20000182 	.word	0x20000182

0800da84 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800da84:	b480      	push	{r7}
 800da86:	b087      	sub	sp, #28
 800da88:	af00      	add	r7, sp, #0
 800da8a:	60f8      	str	r0, [r7, #12]
 800da8c:	60b9      	str	r1, [r7, #8]
 800da8e:	4613      	mov	r3, r2
 800da90:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800da92:	2300      	movs	r3, #0
 800da94:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800da96:	2300      	movs	r3, #0
 800da98:	75fb      	strb	r3, [r7, #23]
 800da9a:	e027      	b.n	800daec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	0f1b      	lsrs	r3, r3, #28
 800daa0:	2b09      	cmp	r3, #9
 800daa2:	d80b      	bhi.n	800dabc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	0f1b      	lsrs	r3, r3, #28
 800daa8:	b2da      	uxtb	r2, r3
 800daaa:	7dfb      	ldrb	r3, [r7, #23]
 800daac:	005b      	lsls	r3, r3, #1
 800daae:	4619      	mov	r1, r3
 800dab0:	68bb      	ldr	r3, [r7, #8]
 800dab2:	440b      	add	r3, r1
 800dab4:	3230      	adds	r2, #48	; 0x30
 800dab6:	b2d2      	uxtb	r2, r2
 800dab8:	701a      	strb	r2, [r3, #0]
 800daba:	e00a      	b.n	800dad2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	0f1b      	lsrs	r3, r3, #28
 800dac0:	b2da      	uxtb	r2, r3
 800dac2:	7dfb      	ldrb	r3, [r7, #23]
 800dac4:	005b      	lsls	r3, r3, #1
 800dac6:	4619      	mov	r1, r3
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	440b      	add	r3, r1
 800dacc:	3237      	adds	r2, #55	; 0x37
 800dace:	b2d2      	uxtb	r2, r2
 800dad0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	011b      	lsls	r3, r3, #4
 800dad6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dad8:	7dfb      	ldrb	r3, [r7, #23]
 800dada:	005b      	lsls	r3, r3, #1
 800dadc:	3301      	adds	r3, #1
 800dade:	68ba      	ldr	r2, [r7, #8]
 800dae0:	4413      	add	r3, r2
 800dae2:	2200      	movs	r2, #0
 800dae4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dae6:	7dfb      	ldrb	r3, [r7, #23]
 800dae8:	3301      	adds	r3, #1
 800daea:	75fb      	strb	r3, [r7, #23]
 800daec:	7dfa      	ldrb	r2, [r7, #23]
 800daee:	79fb      	ldrb	r3, [r7, #7]
 800daf0:	429a      	cmp	r2, r3
 800daf2:	d3d3      	bcc.n	800da9c <IntToUnicode+0x18>
  }
}
 800daf4:	bf00      	nop
 800daf6:	371c      	adds	r7, #28
 800daf8:	46bd      	mov	sp, r7
 800dafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafe:	4770      	bx	lr

0800db00 <LL_AHB2_GRP1_EnableClock>:
{
 800db00:	b480      	push	{r7}
 800db02:	b085      	sub	sp, #20
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800db08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800db0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	4313      	orrs	r3, r2
 800db16:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800db18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800db1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	4013      	ands	r3, r2
 800db22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800db24:	68fb      	ldr	r3, [r7, #12]
}
 800db26:	bf00      	nop
 800db28:	3714      	adds	r7, #20
 800db2a:	46bd      	mov	sp, r7
 800db2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db30:	4770      	bx	lr

0800db32 <LL_APB1_GRP1_EnableClock>:
{
 800db32:	b480      	push	{r7}
 800db34:	b085      	sub	sp, #20
 800db36:	af00      	add	r7, sp, #0
 800db38:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800db3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800db3e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800db40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	4313      	orrs	r3, r2
 800db48:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800db4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800db4e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	4013      	ands	r3, r2
 800db54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800db56:	68fb      	ldr	r3, [r7, #12]
}
 800db58:	bf00      	nop
 800db5a:	3714      	adds	r7, #20
 800db5c:	46bd      	mov	sp, r7
 800db5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db62:	4770      	bx	lr

0800db64 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b088      	sub	sp, #32
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800db6c:	f107 030c 	add.w	r3, r7, #12
 800db70:	2200      	movs	r2, #0
 800db72:	601a      	str	r2, [r3, #0]
 800db74:	605a      	str	r2, [r3, #4]
 800db76:	609a      	str	r2, [r3, #8]
 800db78:	60da      	str	r2, [r3, #12]
 800db7a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	4a13      	ldr	r2, [pc, #76]	; (800dbd0 <HAL_PCD_MspInit+0x6c>)
 800db82:	4293      	cmp	r3, r2
 800db84:	d120      	bne.n	800dbc8 <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800db86:	2001      	movs	r0, #1
 800db88:	f7ff ffba 	bl	800db00 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800db8c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800db90:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db92:	2302      	movs	r3, #2
 800db94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db96:	2300      	movs	r3, #0
 800db98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800db9a:	2302      	movs	r3, #2
 800db9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800db9e:	230a      	movs	r3, #10
 800dba0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dba2:	f107 030c 	add.w	r3, r7, #12
 800dba6:	4619      	mov	r1, r3
 800dba8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800dbac:	f7f4 fd96 	bl	80026dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800dbb0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800dbb4:	f7ff ffbd 	bl	800db32 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800dbb8:	2200      	movs	r2, #0
 800dbba:	2100      	movs	r1, #0
 800dbbc:	2014      	movs	r0, #20
 800dbbe:	f7f4 fcf3 	bl	80025a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800dbc2:	2014      	movs	r0, #20
 800dbc4:	f7f4 fd1a 	bl	80025fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800dbc8:	bf00      	nop
 800dbca:	3720      	adds	r7, #32
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}
 800dbd0:	40006800 	.word	0x40006800

0800dbd4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b082      	sub	sp, #8
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);  
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800dbe8:	4619      	mov	r1, r3
 800dbea:	4610      	mov	r0, r2
 800dbec:	f7fb fda8 	bl	8009740 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800dbf0:	bf00      	nop
 800dbf2:	3708      	adds	r7, #8
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}

0800dbf8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b082      	sub	sp, #8
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
 800dc00:	460b      	mov	r3, r1
 800dc02:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);  
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800dc0a:	78fb      	ldrb	r3, [r7, #3]
 800dc0c:	687a      	ldr	r2, [r7, #4]
 800dc0e:	015b      	lsls	r3, r3, #5
 800dc10:	4413      	add	r3, r2
 800dc12:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800dc16:	681a      	ldr	r2, [r3, #0]
 800dc18:	78fb      	ldrb	r3, [r7, #3]
 800dc1a:	4619      	mov	r1, r3
 800dc1c:	f7fb fddb 	bl	80097d6 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800dc20:	bf00      	nop
 800dc22:	3708      	adds	r7, #8
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}

0800dc28 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b082      	sub	sp, #8
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
 800dc30:	460b      	mov	r3, r1
 800dc32:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */  
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);  
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800dc3a:	78fb      	ldrb	r3, [r7, #3]
 800dc3c:	687a      	ldr	r2, [r7, #4]
 800dc3e:	015b      	lsls	r3, r3, #5
 800dc40:	4413      	add	r3, r2
 800dc42:	333c      	adds	r3, #60	; 0x3c
 800dc44:	681a      	ldr	r2, [r3, #0]
 800dc46:	78fb      	ldrb	r3, [r7, #3]
 800dc48:	4619      	mov	r1, r3
 800dc4a:	f7fb fe35 	bl	80098b8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800dc4e:	bf00      	nop
 800dc50:	3708      	adds	r7, #8
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}

0800dc56 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc56:	b580      	push	{r7, lr}
 800dc58:	b082      	sub	sp, #8
 800dc5a:	af00      	add	r7, sp, #0
 800dc5c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */  
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);  
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800dc64:	4618      	mov	r0, r3
 800dc66:	f7fb ff48 	bl	8009afa <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800dc6a:	bf00      	nop
 800dc6c:	3708      	adds	r7, #8
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}

0800dc72 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800dc72:	b580      	push	{r7, lr}
 800dc74:	b084      	sub	sp, #16
 800dc76:	af00      	add	r7, sp, #0
 800dc78:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dc7a:	2301      	movs	r3, #1
 800dc7c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	689b      	ldr	r3, [r3, #8]
 800dc82:	2b02      	cmp	r3, #2
 800dc84:	d001      	beq.n	800dc8a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800dc86:	f7f3 fd0d 	bl	80016a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800dc90:	7bfa      	ldrb	r2, [r7, #15]
 800dc92:	4611      	mov	r1, r2
 800dc94:	4618      	mov	r0, r3
 800dc96:	f7fb fef5 	bl	8009a84 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800dca0:	4618      	mov	r0, r3
 800dca2:	f7fb feae 	bl	8009a02 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800dca6:	bf00      	nop
 800dca8:	3710      	adds	r7, #16
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}
	...

0800dcb0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b082      	sub	sp, #8
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f7fb fef0 	bl	8009aa4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	699b      	ldr	r3, [r3, #24]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d005      	beq.n	800dcd8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dccc:	4b04      	ldr	r3, [pc, #16]	; (800dce0 <HAL_PCD_SuspendCallback+0x30>)
 800dcce:	691b      	ldr	r3, [r3, #16]
 800dcd0:	4a03      	ldr	r2, [pc, #12]	; (800dce0 <HAL_PCD_SuspendCallback+0x30>)
 800dcd2:	f043 0306 	orr.w	r3, r3, #6
 800dcd6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800dcd8:	bf00      	nop
 800dcda:	3708      	adds	r7, #8
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	bd80      	pop	{r7, pc}
 800dce0:	e000ed00 	.word	0xe000ed00

0800dce4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b082      	sub	sp, #8
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	699b      	ldr	r3, [r3, #24]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d007      	beq.n	800dd04 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dcf4:	4b08      	ldr	r3, [pc, #32]	; (800dd18 <HAL_PCD_ResumeCallback+0x34>)
 800dcf6:	691b      	ldr	r3, [r3, #16]
 800dcf8:	4a07      	ldr	r2, [pc, #28]	; (800dd18 <HAL_PCD_ResumeCallback+0x34>)
 800dcfa:	f023 0306 	bic.w	r3, r3, #6
 800dcfe:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800dd00:	f000 f9f8 	bl	800e0f4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
 
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	f7fb fedf 	bl	8009ace <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800dd10:	bf00      	nop
 800dd12:	3708      	adds	r7, #8
 800dd14:	46bd      	mov	sp, r7
 800dd16:	bd80      	pop	{r7, pc}
 800dd18:	e000ed00 	.word	0xe000ed00

0800dd1c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b082      	sub	sp, #8
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800dd24:	4a2c      	ldr	r2, [pc, #176]	; (800ddd8 <USBD_LL_Init+0xbc>)
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	4a2a      	ldr	r2, [pc, #168]	; (800ddd8 <USBD_LL_Init+0xbc>)
 800dd30:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800dd34:	f7f5 fec4 	bl	8003ac0 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800dd38:	4b27      	ldr	r3, [pc, #156]	; (800ddd8 <USBD_LL_Init+0xbc>)
 800dd3a:	4a28      	ldr	r2, [pc, #160]	; (800dddc <USBD_LL_Init+0xc0>)
 800dd3c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800dd3e:	4b26      	ldr	r3, [pc, #152]	; (800ddd8 <USBD_LL_Init+0xbc>)
 800dd40:	2208      	movs	r2, #8
 800dd42:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800dd44:	4b24      	ldr	r3, [pc, #144]	; (800ddd8 <USBD_LL_Init+0xbc>)
 800dd46:	2202      	movs	r2, #2
 800dd48:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800dd4a:	4b23      	ldr	r3, [pc, #140]	; (800ddd8 <USBD_LL_Init+0xbc>)
 800dd4c:	2202      	movs	r2, #2
 800dd4e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800dd50:	4b21      	ldr	r3, [pc, #132]	; (800ddd8 <USBD_LL_Init+0xbc>)
 800dd52:	2200      	movs	r2, #0
 800dd54:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800dd56:	4b20      	ldr	r3, [pc, #128]	; (800ddd8 <USBD_LL_Init+0xbc>)
 800dd58:	2200      	movs	r2, #0
 800dd5a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800dd5c:	4b1e      	ldr	r3, [pc, #120]	; (800ddd8 <USBD_LL_Init+0xbc>)
 800dd5e:	2200      	movs	r2, #0
 800dd60:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800dd62:	4b1d      	ldr	r3, [pc, #116]	; (800ddd8 <USBD_LL_Init+0xbc>)
 800dd64:	2200      	movs	r2, #0
 800dd66:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800dd68:	481b      	ldr	r0, [pc, #108]	; (800ddd8 <USBD_LL_Init+0xbc>)
 800dd6a:	f7f4 ff61 	bl	8002c30 <HAL_PCD_Init>
 800dd6e:	4603      	mov	r3, r0
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d001      	beq.n	800dd78 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800dd74:	f7f3 fc96 	bl	80016a4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */
  
  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800dd7e:	2318      	movs	r3, #24
 800dd80:	2200      	movs	r2, #0
 800dd82:	2100      	movs	r1, #0
 800dd84:	f7f5 fe16 	bl	80039b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800dd8e:	2358      	movs	r3, #88	; 0x58
 800dd90:	2200      	movs	r2, #0
 800dd92:	2180      	movs	r1, #128	; 0x80
 800dd94:	f7f5 fe0e 	bl	80039b4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800dd9e:	23c0      	movs	r3, #192	; 0xc0
 800dda0:	2200      	movs	r2, #0
 800dda2:	2181      	movs	r1, #129	; 0x81
 800dda4:	f7f5 fe06 	bl	80039b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ddae:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	2101      	movs	r1, #1
 800ddb6:	f7f5 fdfd 	bl	80039b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ddc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	2182      	movs	r1, #130	; 0x82
 800ddc8:	f7f5 fdf4 	bl	80039b4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ddcc:	2300      	movs	r3, #0
}
 800ddce:	4618      	mov	r0, r3
 800ddd0:	3708      	adds	r7, #8
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}
 800ddd6:	bf00      	nop
 800ddd8:	20000c3c 	.word	0x20000c3c
 800dddc:	40006800 	.word	0x40006800

0800dde0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b084      	sub	sp, #16
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dde8:	2300      	movs	r3, #0
 800ddea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddec:	2300      	movs	r3, #0
 800ddee:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	f7f4 ffe2 	bl	8002dc0 <HAL_PCD_Start>
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800de00:	7bfb      	ldrb	r3, [r7, #15]
 800de02:	4618      	mov	r0, r3
 800de04:	f000 f97c 	bl	800e100 <USBD_Get_USB_Status>
 800de08:	4603      	mov	r3, r0
 800de0a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800de0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800de0e:	4618      	mov	r0, r3
 800de10:	3710      	adds	r7, #16
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}

0800de16 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800de16:	b580      	push	{r7, lr}
 800de18:	b084      	sub	sp, #16
 800de1a:	af00      	add	r7, sp, #0
 800de1c:	6078      	str	r0, [r7, #4]
 800de1e:	4608      	mov	r0, r1
 800de20:	4611      	mov	r1, r2
 800de22:	461a      	mov	r2, r3
 800de24:	4603      	mov	r3, r0
 800de26:	70fb      	strb	r3, [r7, #3]
 800de28:	460b      	mov	r3, r1
 800de2a:	70bb      	strb	r3, [r7, #2]
 800de2c:	4613      	mov	r3, r2
 800de2e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de30:	2300      	movs	r3, #0
 800de32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de34:	2300      	movs	r3, #0
 800de36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800de3e:	78bb      	ldrb	r3, [r7, #2]
 800de40:	883a      	ldrh	r2, [r7, #0]
 800de42:	78f9      	ldrb	r1, [r7, #3]
 800de44:	f7f5 f95c 	bl	8003100 <HAL_PCD_EP_Open>
 800de48:	4603      	mov	r3, r0
 800de4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de4c:	7bfb      	ldrb	r3, [r7, #15]
 800de4e:	4618      	mov	r0, r3
 800de50:	f000 f956 	bl	800e100 <USBD_Get_USB_Status>
 800de54:	4603      	mov	r3, r0
 800de56:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800de58:	7bbb      	ldrb	r3, [r7, #14]
}
 800de5a:	4618      	mov	r0, r3
 800de5c:	3710      	adds	r7, #16
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}

0800de62 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de62:	b580      	push	{r7, lr}
 800de64:	b084      	sub	sp, #16
 800de66:	af00      	add	r7, sp, #0
 800de68:	6078      	str	r0, [r7, #4]
 800de6a:	460b      	mov	r3, r1
 800de6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de6e:	2300      	movs	r3, #0
 800de70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de72:	2300      	movs	r3, #0
 800de74:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800de7c:	78fa      	ldrb	r2, [r7, #3]
 800de7e:	4611      	mov	r1, r2
 800de80:	4618      	mov	r0, r3
 800de82:	f7f5 f99d 	bl	80031c0 <HAL_PCD_EP_Close>
 800de86:	4603      	mov	r3, r0
 800de88:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800de8a:	7bfb      	ldrb	r3, [r7, #15]
 800de8c:	4618      	mov	r0, r3
 800de8e:	f000 f937 	bl	800e100 <USBD_Get_USB_Status>
 800de92:	4603      	mov	r3, r0
 800de94:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800de96:	7bbb      	ldrb	r3, [r7, #14]
}
 800de98:	4618      	mov	r0, r3
 800de9a:	3710      	adds	r7, #16
 800de9c:	46bd      	mov	sp, r7
 800de9e:	bd80      	pop	{r7, pc}

0800dea0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b084      	sub	sp, #16
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
 800dea8:	460b      	mov	r3, r1
 800deaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800deac:	2300      	movs	r3, #0
 800deae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800deb0:	2300      	movs	r3, #0
 800deb2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800deba:	78fa      	ldrb	r2, [r7, #3]
 800debc:	4611      	mov	r1, r2
 800debe:	4618      	mov	r0, r3
 800dec0:	f7f5 fa48 	bl	8003354 <HAL_PCD_EP_SetStall>
 800dec4:	4603      	mov	r3, r0
 800dec6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dec8:	7bfb      	ldrb	r3, [r7, #15]
 800deca:	4618      	mov	r0, r3
 800decc:	f000 f918 	bl	800e100 <USBD_Get_USB_Status>
 800ded0:	4603      	mov	r3, r0
 800ded2:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800ded4:	7bbb      	ldrb	r3, [r7, #14]
}
 800ded6:	4618      	mov	r0, r3
 800ded8:	3710      	adds	r7, #16
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}

0800dede <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dede:	b580      	push	{r7, lr}
 800dee0:	b084      	sub	sp, #16
 800dee2:	af00      	add	r7, sp, #0
 800dee4:	6078      	str	r0, [r7, #4]
 800dee6:	460b      	mov	r3, r1
 800dee8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800deea:	2300      	movs	r3, #0
 800deec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800deee:	2300      	movs	r3, #0
 800def0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800def8:	78fa      	ldrb	r2, [r7, #3]
 800defa:	4611      	mov	r1, r2
 800defc:	4618      	mov	r0, r3
 800defe:	f7f5 fa83 	bl	8003408 <HAL_PCD_EP_ClrStall>
 800df02:	4603      	mov	r3, r0
 800df04:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800df06:	7bfb      	ldrb	r3, [r7, #15]
 800df08:	4618      	mov	r0, r3
 800df0a:	f000 f8f9 	bl	800e100 <USBD_Get_USB_Status>
 800df0e:	4603      	mov	r3, r0
 800df10:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 800df12:	7bbb      	ldrb	r3, [r7, #14]
}
 800df14:	4618      	mov	r0, r3
 800df16:	3710      	adds	r7, #16
 800df18:	46bd      	mov	sp, r7
 800df1a:	bd80      	pop	{r7, pc}

0800df1c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800df1c:	b480      	push	{r7}
 800df1e:	b085      	sub	sp, #20
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
 800df24:	460b      	mov	r3, r1
 800df26:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800df2e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800df30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800df34:	2b00      	cmp	r3, #0
 800df36:	da08      	bge.n	800df4a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800df38:	78fb      	ldrb	r3, [r7, #3]
 800df3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df3e:	68fa      	ldr	r2, [r7, #12]
 800df40:	015b      	lsls	r3, r3, #5
 800df42:	4413      	add	r3, r2
 800df44:	332a      	adds	r3, #42	; 0x2a
 800df46:	781b      	ldrb	r3, [r3, #0]
 800df48:	e008      	b.n	800df5c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800df4a:	78fb      	ldrb	r3, [r7, #3]
 800df4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df50:	68fa      	ldr	r2, [r7, #12]
 800df52:	015b      	lsls	r3, r3, #5
 800df54:	4413      	add	r3, r2
 800df56:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800df5a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800df5c:	4618      	mov	r0, r3
 800df5e:	3714      	adds	r7, #20
 800df60:	46bd      	mov	sp, r7
 800df62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df66:	4770      	bx	lr

0800df68 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b084      	sub	sp, #16
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	460b      	mov	r3, r1
 800df72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df74:	2300      	movs	r3, #0
 800df76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df78:	2300      	movs	r3, #0
 800df7a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800df82:	78fa      	ldrb	r2, [r7, #3]
 800df84:	4611      	mov	r1, r2
 800df86:	4618      	mov	r0, r3
 800df88:	f7f5 f895 	bl	80030b6 <HAL_PCD_SetAddress>
 800df8c:	4603      	mov	r3, r0
 800df8e:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800df90:	7bfb      	ldrb	r3, [r7, #15]
 800df92:	4618      	mov	r0, r3
 800df94:	f000 f8b4 	bl	800e100 <USBD_Get_USB_Status>
 800df98:	4603      	mov	r3, r0
 800df9a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800df9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	3710      	adds	r7, #16
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd80      	pop	{r7, pc}

0800dfa6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800dfa6:	b580      	push	{r7, lr}
 800dfa8:	b086      	sub	sp, #24
 800dfaa:	af00      	add	r7, sp, #0
 800dfac:	60f8      	str	r0, [r7, #12]
 800dfae:	607a      	str	r2, [r7, #4]
 800dfb0:	461a      	mov	r2, r3
 800dfb2:	460b      	mov	r3, r1
 800dfb4:	72fb      	strb	r3, [r7, #11]
 800dfb6:	4613      	mov	r3, r2
 800dfb8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800dfc8:	893b      	ldrh	r3, [r7, #8]
 800dfca:	7af9      	ldrb	r1, [r7, #11]
 800dfcc:	687a      	ldr	r2, [r7, #4]
 800dfce:	f7f5 f988 	bl	80032e2 <HAL_PCD_EP_Transmit>
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800dfd6:	7dfb      	ldrb	r3, [r7, #23]
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f000 f891 	bl	800e100 <USBD_Get_USB_Status>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800dfe2:	7dbb      	ldrb	r3, [r7, #22]
}
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	3718      	adds	r7, #24
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}

0800dfec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b086      	sub	sp, #24
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	60f8      	str	r0, [r7, #12]
 800dff4:	607a      	str	r2, [r7, #4]
 800dff6:	461a      	mov	r2, r3
 800dff8:	460b      	mov	r3, r1
 800dffa:	72fb      	strb	r3, [r7, #11]
 800dffc:	4613      	mov	r3, r2
 800dffe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e000:	2300      	movs	r3, #0
 800e002:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e004:	2300      	movs	r3, #0
 800e006:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e00e:	893b      	ldrh	r3, [r7, #8]
 800e010:	7af9      	ldrb	r1, [r7, #11]
 800e012:	687a      	ldr	r2, [r7, #4]
 800e014:	f7f5 f916 	bl	8003244 <HAL_PCD_EP_Receive>
 800e018:	4603      	mov	r3, r0
 800e01a:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e01c:	7dfb      	ldrb	r3, [r7, #23]
 800e01e:	4618      	mov	r0, r3
 800e020:	f000 f86e 	bl	800e100 <USBD_Get_USB_Status>
 800e024:	4603      	mov	r3, r0
 800e026:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 800e028:	7dbb      	ldrb	r3, [r7, #22]
}
 800e02a:	4618      	mov	r0, r3
 800e02c:	3718      	adds	r7, #24
 800e02e:	46bd      	mov	sp, r7
 800e030:	bd80      	pop	{r7, pc}

0800e032 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e032:	b580      	push	{r7, lr}
 800e034:	b082      	sub	sp, #8
 800e036:	af00      	add	r7, sp, #0
 800e038:	6078      	str	r0, [r7, #4]
 800e03a:	460b      	mov	r3, r1
 800e03c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e044:	78fa      	ldrb	r2, [r7, #3]
 800e046:	4611      	mov	r1, r2
 800e048:	4618      	mov	r0, r3
 800e04a:	f7f5 f935 	bl	80032b8 <HAL_PCD_EP_GetRxCount>
 800e04e:	4603      	mov	r3, r0
}
 800e050:	4618      	mov	r0, r3
 800e052:	3708      	adds	r7, #8
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}

0800e058 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b082      	sub	sp, #8
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
 800e060:	460b      	mov	r3, r1
 800e062:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800e064:	78fb      	ldrb	r3, [r7, #3]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d002      	beq.n	800e070 <HAL_PCDEx_LPM_Callback+0x18>
 800e06a:	2b01      	cmp	r3, #1
 800e06c:	d013      	beq.n	800e096 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
  /* USER CODE END LPM_Callback */
}
 800e06e:	e023      	b.n	800e0b8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	699b      	ldr	r3, [r3, #24]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d007      	beq.n	800e088 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e078:	f000 f83c 	bl	800e0f4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e07c:	4b10      	ldr	r3, [pc, #64]	; (800e0c0 <HAL_PCDEx_LPM_Callback+0x68>)
 800e07e:	691b      	ldr	r3, [r3, #16]
 800e080:	4a0f      	ldr	r2, [pc, #60]	; (800e0c0 <HAL_PCDEx_LPM_Callback+0x68>)
 800e082:	f023 0306 	bic.w	r3, r3, #6
 800e086:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e08e:	4618      	mov	r0, r3
 800e090:	f7fb fd1d 	bl	8009ace <USBD_LL_Resume>
    break;
 800e094:	e010      	b.n	800e0b8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e09c:	4618      	mov	r0, r3
 800e09e:	f7fb fd01 	bl	8009aa4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	699b      	ldr	r3, [r3, #24]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d005      	beq.n	800e0b6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e0aa:	4b05      	ldr	r3, [pc, #20]	; (800e0c0 <HAL_PCDEx_LPM_Callback+0x68>)
 800e0ac:	691b      	ldr	r3, [r3, #16]
 800e0ae:	4a04      	ldr	r2, [pc, #16]	; (800e0c0 <HAL_PCDEx_LPM_Callback+0x68>)
 800e0b0:	f043 0306 	orr.w	r3, r3, #6
 800e0b4:	6113      	str	r3, [r2, #16]
    break;   
 800e0b6:	bf00      	nop
}
 800e0b8:	bf00      	nop
 800e0ba:	3708      	adds	r7, #8
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}
 800e0c0:	e000ed00 	.word	0xe000ed00

0800e0c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e0c4:	b480      	push	{r7}
 800e0c6:	b083      	sub	sp, #12
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e0cc:	4b03      	ldr	r3, [pc, #12]	; (800e0dc <USBD_static_malloc+0x18>)
}
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	370c      	adds	r7, #12
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d8:	4770      	bx	lr
 800e0da:	bf00      	nop
 800e0dc:	2000046c 	.word	0x2000046c

0800e0e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e0e0:	b480      	push	{r7}
 800e0e2:	b083      	sub	sp, #12
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]

}
 800e0e8:	bf00      	nop
 800e0ea:	370c      	adds	r7, #12
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f2:	4770      	bx	lr

0800e0f4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e0f8:	f7f3 fa22 	bl	8001540 <SystemClock_Config>
}
 800e0fc:	bf00      	nop
 800e0fe:	bd80      	pop	{r7, pc}

0800e100 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e100:	b480      	push	{r7}
 800e102:	b085      	sub	sp, #20
 800e104:	af00      	add	r7, sp, #0
 800e106:	4603      	mov	r3, r0
 800e108:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e10a:	2300      	movs	r3, #0
 800e10c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e10e:	79fb      	ldrb	r3, [r7, #7]
 800e110:	2b03      	cmp	r3, #3
 800e112:	d817      	bhi.n	800e144 <USBD_Get_USB_Status+0x44>
 800e114:	a201      	add	r2, pc, #4	; (adr r2, 800e11c <USBD_Get_USB_Status+0x1c>)
 800e116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e11a:	bf00      	nop
 800e11c:	0800e12d 	.word	0x0800e12d
 800e120:	0800e133 	.word	0x0800e133
 800e124:	0800e139 	.word	0x0800e139
 800e128:	0800e13f 	.word	0x0800e13f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e12c:	2300      	movs	r3, #0
 800e12e:	73fb      	strb	r3, [r7, #15]
    break;
 800e130:	e00b      	b.n	800e14a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e132:	2302      	movs	r3, #2
 800e134:	73fb      	strb	r3, [r7, #15]
    break;
 800e136:	e008      	b.n	800e14a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e138:	2301      	movs	r3, #1
 800e13a:	73fb      	strb	r3, [r7, #15]
    break;
 800e13c:	e005      	b.n	800e14a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e13e:	2302      	movs	r3, #2
 800e140:	73fb      	strb	r3, [r7, #15]
    break;
 800e142:	e002      	b.n	800e14a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e144:	2302      	movs	r3, #2
 800e146:	73fb      	strb	r3, [r7, #15]
    break;
 800e148:	bf00      	nop
  }
  return usb_status;
 800e14a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	3714      	adds	r7, #20
 800e150:	46bd      	mov	sp, r7
 800e152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e156:	4770      	bx	lr

0800e158 <__libc_init_array>:
 800e158:	b570      	push	{r4, r5, r6, lr}
 800e15a:	4e0d      	ldr	r6, [pc, #52]	; (800e190 <__libc_init_array+0x38>)
 800e15c:	4c0d      	ldr	r4, [pc, #52]	; (800e194 <__libc_init_array+0x3c>)
 800e15e:	1ba4      	subs	r4, r4, r6
 800e160:	10a4      	asrs	r4, r4, #2
 800e162:	2500      	movs	r5, #0
 800e164:	42a5      	cmp	r5, r4
 800e166:	d109      	bne.n	800e17c <__libc_init_array+0x24>
 800e168:	4e0b      	ldr	r6, [pc, #44]	; (800e198 <__libc_init_array+0x40>)
 800e16a:	4c0c      	ldr	r4, [pc, #48]	; (800e19c <__libc_init_array+0x44>)
 800e16c:	f000 f82c 	bl	800e1c8 <_init>
 800e170:	1ba4      	subs	r4, r4, r6
 800e172:	10a4      	asrs	r4, r4, #2
 800e174:	2500      	movs	r5, #0
 800e176:	42a5      	cmp	r5, r4
 800e178:	d105      	bne.n	800e186 <__libc_init_array+0x2e>
 800e17a:	bd70      	pop	{r4, r5, r6, pc}
 800e17c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e180:	4798      	blx	r3
 800e182:	3501      	adds	r5, #1
 800e184:	e7ee      	b.n	800e164 <__libc_init_array+0xc>
 800e186:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e18a:	4798      	blx	r3
 800e18c:	3501      	adds	r5, #1
 800e18e:	e7f2      	b.n	800e176 <__libc_init_array+0x1e>
 800e190:	0800e568 	.word	0x0800e568
 800e194:	0800e568 	.word	0x0800e568
 800e198:	0800e568 	.word	0x0800e568
 800e19c:	0800e56c 	.word	0x0800e56c

0800e1a0 <memcpy>:
 800e1a0:	b510      	push	{r4, lr}
 800e1a2:	1e43      	subs	r3, r0, #1
 800e1a4:	440a      	add	r2, r1
 800e1a6:	4291      	cmp	r1, r2
 800e1a8:	d100      	bne.n	800e1ac <memcpy+0xc>
 800e1aa:	bd10      	pop	{r4, pc}
 800e1ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e1b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e1b4:	e7f7      	b.n	800e1a6 <memcpy+0x6>

0800e1b6 <memset>:
 800e1b6:	4402      	add	r2, r0
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	4293      	cmp	r3, r2
 800e1bc:	d100      	bne.n	800e1c0 <memset+0xa>
 800e1be:	4770      	bx	lr
 800e1c0:	f803 1b01 	strb.w	r1, [r3], #1
 800e1c4:	e7f9      	b.n	800e1ba <memset+0x4>
	...

0800e1c8 <_init>:
 800e1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ca:	bf00      	nop
 800e1cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1ce:	bc08      	pop	{r3}
 800e1d0:	469e      	mov	lr, r3
 800e1d2:	4770      	bx	lr

0800e1d4 <_fini>:
 800e1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1d6:	bf00      	nop
 800e1d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1da:	bc08      	pop	{r3}
 800e1dc:	469e      	mov	lr, r3
 800e1de:	4770      	bx	lr
