
CLIENT_NUCLEO_LB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec48  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  0800ed88  0800ed88  0001ed88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f1a4  0800f1a4  0001f1a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f1ac  0800f1ac  0001f1ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f1b0  0800f1b0  0001f1b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001ec  20000004  0800f1b4  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  200001f0  0800f3a0  000201f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000039  2000028c  0800f439  0002028c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  200002c8  0800f472  000202c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 000000a4  200002dc  0800f483  000202dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000ba4  20000380  0800f527  00020380  2**2
                  ALLOC
 12 ._user_heap_stack 00001004  20000f24  0800f527  00020f24  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020380  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000024  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       0000019f  20030024  20030024  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000880  200301c4  200301c4  00030000  2**2
                  ALLOC
 17 .debug_info   0003d683  00000000  00000000  000203b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 00007509  00000000  00000000  0005da33  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 00002838  00000000  00000000  00064f40  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 000024e0  00000000  00000000  00067778  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_macro  0002e0f0  00000000  00000000  00069c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   00027a03  00000000  00000000  00097d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    000f384d  00000000  00000000  000bf74b  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  001b2f98  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000a7c4  00000000  00000000  001b3014  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000380 	.word	0x20000380
 800015c:	00000000 	.word	0x00000000
 8000160:	0800ed70 	.word	0x0800ed70

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000384 	.word	0x20000384
 800017c:	0800ed70 	.word	0x0800ed70

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000240:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000244:	f000 b972 	b.w	800052c <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	4688      	mov	r8, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14b      	bne.n	8000306 <__udivmoddi4+0xa6>
 800026e:	428a      	cmp	r2, r1
 8000270:	4615      	mov	r5, r2
 8000272:	d967      	bls.n	8000344 <__udivmoddi4+0xe4>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b14a      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027a:	f1c2 0720 	rsb	r7, r2, #32
 800027e:	fa01 f302 	lsl.w	r3, r1, r2
 8000282:	fa20 f707 	lsr.w	r7, r0, r7
 8000286:	4095      	lsls	r5, r2
 8000288:	ea47 0803 	orr.w	r8, r7, r3
 800028c:	4094      	lsls	r4, r2
 800028e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000292:	0c23      	lsrs	r3, r4, #16
 8000294:	fbb8 f7fe 	udiv	r7, r8, lr
 8000298:	fa1f fc85 	uxth.w	ip, r5
 800029c:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a4:	fb07 f10c 	mul.w	r1, r7, ip
 80002a8:	4299      	cmp	r1, r3
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x60>
 80002ac:	18eb      	adds	r3, r5, r3
 80002ae:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002b2:	f080 811b 	bcs.w	80004ec <__udivmoddi4+0x28c>
 80002b6:	4299      	cmp	r1, r3
 80002b8:	f240 8118 	bls.w	80004ec <__udivmoddi4+0x28c>
 80002bc:	3f02      	subs	r7, #2
 80002be:	442b      	add	r3, r5
 80002c0:	1a5b      	subs	r3, r3, r1
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002c8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d4:	45a4      	cmp	ip, r4
 80002d6:	d909      	bls.n	80002ec <__udivmoddi4+0x8c>
 80002d8:	192c      	adds	r4, r5, r4
 80002da:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002de:	f080 8107 	bcs.w	80004f0 <__udivmoddi4+0x290>
 80002e2:	45a4      	cmp	ip, r4
 80002e4:	f240 8104 	bls.w	80004f0 <__udivmoddi4+0x290>
 80002e8:	3802      	subs	r0, #2
 80002ea:	442c      	add	r4, r5
 80002ec:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f0:	eba4 040c 	sub.w	r4, r4, ip
 80002f4:	2700      	movs	r7, #0
 80002f6:	b11e      	cbz	r6, 8000300 <__udivmoddi4+0xa0>
 80002f8:	40d4      	lsrs	r4, r2
 80002fa:	2300      	movs	r3, #0
 80002fc:	e9c6 4300 	strd	r4, r3, [r6]
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d909      	bls.n	800031e <__udivmoddi4+0xbe>
 800030a:	2e00      	cmp	r6, #0
 800030c:	f000 80eb 	beq.w	80004e6 <__udivmoddi4+0x286>
 8000310:	2700      	movs	r7, #0
 8000312:	e9c6 0100 	strd	r0, r1, [r6]
 8000316:	4638      	mov	r0, r7
 8000318:	4639      	mov	r1, r7
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	fab3 f783 	clz	r7, r3
 8000322:	2f00      	cmp	r7, #0
 8000324:	d147      	bne.n	80003b6 <__udivmoddi4+0x156>
 8000326:	428b      	cmp	r3, r1
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xd0>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 80fa 	bhi.w	8000524 <__udivmoddi4+0x2c4>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb61 0303 	sbc.w	r3, r1, r3
 8000336:	2001      	movs	r0, #1
 8000338:	4698      	mov	r8, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d0e0      	beq.n	8000300 <__udivmoddi4+0xa0>
 800033e:	e9c6 4800 	strd	r4, r8, [r6]
 8000342:	e7dd      	b.n	8000300 <__udivmoddi4+0xa0>
 8000344:	b902      	cbnz	r2, 8000348 <__udivmoddi4+0xe8>
 8000346:	deff      	udf	#255	; 0xff
 8000348:	fab2 f282 	clz	r2, r2
 800034c:	2a00      	cmp	r2, #0
 800034e:	f040 808f 	bne.w	8000470 <__udivmoddi4+0x210>
 8000352:	1b49      	subs	r1, r1, r5
 8000354:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000358:	fa1f f885 	uxth.w	r8, r5
 800035c:	2701      	movs	r7, #1
 800035e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000362:	0c23      	lsrs	r3, r4, #16
 8000364:	fb0e 111c 	mls	r1, lr, ip, r1
 8000368:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800036c:	fb08 f10c 	mul.w	r1, r8, ip
 8000370:	4299      	cmp	r1, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x124>
 8000374:	18eb      	adds	r3, r5, r3
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x122>
 800037c:	4299      	cmp	r1, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2bc>
 8000382:	4684      	mov	ip, r0
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000390:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x14c>
 800039c:	192c      	adds	r4, r5, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x14a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80b6 	bhi.w	8000516 <__udivmoddi4+0x2b6>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e79f      	b.n	80002f6 <__udivmoddi4+0x96>
 80003b6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ba:	40bb      	lsls	r3, r7
 80003bc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003c4:	fa01 f407 	lsl.w	r4, r1, r7
 80003c8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003cc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003d4:	4325      	orrs	r5, r4
 80003d6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003da:	0c2c      	lsrs	r4, r5, #16
 80003dc:	fb08 3319 	mls	r3, r8, r9, r3
 80003e0:	fa1f fa8e 	uxth.w	sl, lr
 80003e4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003e8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ec:	429c      	cmp	r4, r3
 80003ee:	fa02 f207 	lsl.w	r2, r2, r7
 80003f2:	fa00 f107 	lsl.w	r1, r0, r7
 80003f6:	d90b      	bls.n	8000410 <__udivmoddi4+0x1b0>
 80003f8:	eb1e 0303 	adds.w	r3, lr, r3
 80003fc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000400:	f080 8087 	bcs.w	8000512 <__udivmoddi4+0x2b2>
 8000404:	429c      	cmp	r4, r3
 8000406:	f240 8084 	bls.w	8000512 <__udivmoddi4+0x2b2>
 800040a:	f1a9 0902 	sub.w	r9, r9, #2
 800040e:	4473      	add	r3, lr
 8000410:	1b1b      	subs	r3, r3, r4
 8000412:	b2ad      	uxth	r5, r5
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000420:	fb00 fa0a 	mul.w	sl, r0, sl
 8000424:	45a2      	cmp	sl, r4
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x1da>
 8000428:	eb1e 0404 	adds.w	r4, lr, r4
 800042c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000430:	d26b      	bcs.n	800050a <__udivmoddi4+0x2aa>
 8000432:	45a2      	cmp	sl, r4
 8000434:	d969      	bls.n	800050a <__udivmoddi4+0x2aa>
 8000436:	3802      	subs	r0, #2
 8000438:	4474      	add	r4, lr
 800043a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800043e:	fba0 8902 	umull	r8, r9, r0, r2
 8000442:	eba4 040a 	sub.w	r4, r4, sl
 8000446:	454c      	cmp	r4, r9
 8000448:	46c2      	mov	sl, r8
 800044a:	464b      	mov	r3, r9
 800044c:	d354      	bcc.n	80004f8 <__udivmoddi4+0x298>
 800044e:	d051      	beq.n	80004f4 <__udivmoddi4+0x294>
 8000450:	2e00      	cmp	r6, #0
 8000452:	d069      	beq.n	8000528 <__udivmoddi4+0x2c8>
 8000454:	ebb1 050a 	subs.w	r5, r1, sl
 8000458:	eb64 0403 	sbc.w	r4, r4, r3
 800045c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000460:	40fd      	lsrs	r5, r7
 8000462:	40fc      	lsrs	r4, r7
 8000464:	ea4c 0505 	orr.w	r5, ip, r5
 8000468:	e9c6 5400 	strd	r5, r4, [r6]
 800046c:	2700      	movs	r7, #0
 800046e:	e747      	b.n	8000300 <__udivmoddi4+0xa0>
 8000470:	f1c2 0320 	rsb	r3, r2, #32
 8000474:	fa20 f703 	lsr.w	r7, r0, r3
 8000478:	4095      	lsls	r5, r2
 800047a:	fa01 f002 	lsl.w	r0, r1, r2
 800047e:	fa21 f303 	lsr.w	r3, r1, r3
 8000482:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000486:	4338      	orrs	r0, r7
 8000488:	0c01      	lsrs	r1, r0, #16
 800048a:	fbb3 f7fe 	udiv	r7, r3, lr
 800048e:	fa1f f885 	uxth.w	r8, r5
 8000492:	fb0e 3317 	mls	r3, lr, r7, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb07 f308 	mul.w	r3, r7, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	fa04 f402 	lsl.w	r4, r4, r2
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x256>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ac:	d22f      	bcs.n	800050e <__udivmoddi4+0x2ae>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d92d      	bls.n	800050e <__udivmoddi4+0x2ae>
 80004b2:	3f02      	subs	r7, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1acb      	subs	r3, r1, r3
 80004b8:	b281      	uxth	r1, r0
 80004ba:	fbb3 f0fe 	udiv	r0, r3, lr
 80004be:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c6:	fb00 f308 	mul.w	r3, r0, r8
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x27e>
 80004ce:	1869      	adds	r1, r5, r1
 80004d0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004d4:	d217      	bcs.n	8000506 <__udivmoddi4+0x2a6>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d915      	bls.n	8000506 <__udivmoddi4+0x2a6>
 80004da:	3802      	subs	r0, #2
 80004dc:	4429      	add	r1, r5
 80004de:	1ac9      	subs	r1, r1, r3
 80004e0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004e4:	e73b      	b.n	800035e <__udivmoddi4+0xfe>
 80004e6:	4637      	mov	r7, r6
 80004e8:	4630      	mov	r0, r6
 80004ea:	e709      	b.n	8000300 <__udivmoddi4+0xa0>
 80004ec:	4607      	mov	r7, r0
 80004ee:	e6e7      	b.n	80002c0 <__udivmoddi4+0x60>
 80004f0:	4618      	mov	r0, r3
 80004f2:	e6fb      	b.n	80002ec <__udivmoddi4+0x8c>
 80004f4:	4541      	cmp	r1, r8
 80004f6:	d2ab      	bcs.n	8000450 <__udivmoddi4+0x1f0>
 80004f8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004fc:	eb69 020e 	sbc.w	r2, r9, lr
 8000500:	3801      	subs	r0, #1
 8000502:	4613      	mov	r3, r2
 8000504:	e7a4      	b.n	8000450 <__udivmoddi4+0x1f0>
 8000506:	4660      	mov	r0, ip
 8000508:	e7e9      	b.n	80004de <__udivmoddi4+0x27e>
 800050a:	4618      	mov	r0, r3
 800050c:	e795      	b.n	800043a <__udivmoddi4+0x1da>
 800050e:	4667      	mov	r7, ip
 8000510:	e7d1      	b.n	80004b6 <__udivmoddi4+0x256>
 8000512:	4681      	mov	r9, r0
 8000514:	e77c      	b.n	8000410 <__udivmoddi4+0x1b0>
 8000516:	3802      	subs	r0, #2
 8000518:	442c      	add	r4, r5
 800051a:	e747      	b.n	80003ac <__udivmoddi4+0x14c>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	442b      	add	r3, r5
 8000522:	e72f      	b.n	8000384 <__udivmoddi4+0x124>
 8000524:	4638      	mov	r0, r7
 8000526:	e708      	b.n	800033a <__udivmoddi4+0xda>
 8000528:	4637      	mov	r7, r6
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0xa0>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800053c:	689b      	ldr	r3, [r3, #8]
 800053e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000542:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4313      	orrs	r3, r2
 800054a:	608b      	str	r3, [r1, #8]
}
 800054c:	bf00      	nop
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr

08000558 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 800055c:	f000 f80e 	bl	800057c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000560:	4905      	ldr	r1, [pc, #20]	; (8000578 <APPE_Init+0x20>)
 8000562:	2000      	movs	r0, #0
 8000564:	f000 fd84 	bl	8001070 <HW_TS_Init>

  /* Initialize the debug interface */
  Init_Debug();
#endif

  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000568:	2101      	movs	r1, #1
 800056a:	2001      	movs	r0, #1
 800056c:	f001 faa8 	bl	8001ac0 <UTIL_LPM_SetOffMode>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000570:	f000 f80e 	bl	8000590 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000574:	bf00      	nop
}
 8000576:	bd80      	pop	{r7, pc}
 8000578:	200006fc 	.word	0x200006fc

0800057c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000580:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000584:	f7ff ffd4 	bl	8000530 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 8000588:	f001 fa88 	bl	8001a9c <UTIL_LPM_Init>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 800058c:	bf00      	nop
}
 800058e:	bd80      	pop	{r7, pc}

08000590 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000596:	f00b fe6b 	bl	800c270 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 800059a:	4a11      	ldr	r2, [pc, #68]	; (80005e0 <appe_Tl_Init+0x50>)
 800059c:	2100      	movs	r1, #0
 800059e:	2040      	movs	r0, #64	; 0x40
 80005a0:	f001 fbf6 	bl	8001d90 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80005a4:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <appe_Tl_Init+0x54>)
 80005a6:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80005a8:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <appe_Tl_Init+0x58>)
 80005aa:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80005ac:	463b      	mov	r3, r7
 80005ae:	4619      	mov	r1, r3
 80005b0:	480e      	ldr	r0, [pc, #56]	; (80005ec <appe_Tl_Init+0x5c>)
 80005b2:	f00b fd27 	bl	800c004 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80005b6:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <appe_Tl_Init+0x60>)
 80005b8:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <appe_Tl_Init+0x64>)
 80005bc:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80005be:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <appe_Tl_Init+0x68>)
 80005c0:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80005c2:	f240 533c 	movw	r3, #1340	; 0x53c
 80005c6:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 80005c8:	f107 0308 	add.w	r3, r7, #8
 80005cc:	4618      	mov	r0, r3
 80005ce:	f00b ff5d 	bl	800c48c <TL_MM_Init>

  TL_Enable();
 80005d2:	f00b fe47 	bl	800c264 <TL_Enable>

  return;
 80005d6:	bf00      	nop
}
 80005d8:	3720      	adds	r7, #32
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	0800c03d 	.word	0x0800c03d
 80005e4:	20030700 	.word	0x20030700
 80005e8:	080005fd 	.word	0x080005fd
 80005ec:	08000613 	.word	0x08000613
 80005f0:	20030918 	.word	0x20030918
 80005f4:	2003080c 	.word	0x2003080c
 80005f8:	200301c4 	.word	0x200301c4

080005fc <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000606:	bf00      	nop
}
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr

08000612 <APPE_SysUserEvtRx>:

static void APPE_SysUserEvtRx( void * pPayload )
{
 8000612:	b580      	push	{r7, lr}
 8000614:	b082      	sub	sp, #8
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  TL_TRACES_Init( );
 800061a:	f00b ffa7 	bl	800c56c <TL_TRACES_Init>

  APP_BLE_Init( );
 800061e:	f00c f8db 	bl	800c7d8 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000622:	2100      	movs	r1, #0
 8000624:	2001      	movs	r0, #1
 8000626:	f001 fa4b 	bl	8001ac0 <UTIL_LPM_SetOffMode>
  return;
 800062a:	bf00      	nop
}
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 8000632:	b580      	push	{r7, lr}
 8000634:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
 8000636:	f001 fa71 	bl	8001b1c <UTIL_LPM_EnterLowPower>
#endif
  return;
 800063a:	bf00      	nop
}
 800063c:	bd80      	pop	{r7, pc}

0800063e <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b082      	sub	sp, #8
 8000642:	af00      	add	r7, sp, #0
 8000644:	6078      	str	r0, [r7, #4]
 8000646:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800064c:	f001 fac4 	bl	8001bd8 <UTIL_SEQ_Run>
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000660:	2100      	movs	r1, #0
 8000662:	2040      	movs	r0, #64	; 0x40
 8000664:	f001 fbb4 	bl	8001dd0 <UTIL_SEQ_SetTask>
  return;
 8000668:	bf00      	nop
}
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000678:	2002      	movs	r0, #2
 800067a:	f001 fc0f 	bl	8001e9c <UTIL_SEQ_SetEvt>
  return;
 800067e:	bf00      	nop
}
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}

08000686 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000686:	b580      	push	{r7, lr}
 8000688:	b082      	sub	sp, #8
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 800068e:	2002      	movs	r0, #2
 8000690:	f001 fc22 	bl	8001ed8 <UTIL_SEQ_WaitEvt>
  return;
 8000694:	bf00      	nop
}
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80006a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4313      	orrs	r3, r2
 80006b2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80006b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4013      	ands	r3, r2
 80006be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006c0:	68fb      	ldr	r3, [r7, #12]
}
 80006c2:	bf00      	nop
 80006c4:	3714      	adds	r7, #20
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
	...

080006d0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e4:	2004      	movs	r0, #4
 80006e6:	f7ff ffd9 	bl	800069c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ea:	2080      	movs	r0, #128	; 0x80
 80006ec:	f7ff ffd6 	bl	800069c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f0:	2002      	movs	r0, #2
 80006f2:	f7ff ffd3 	bl	800069c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	2001      	movs	r0, #1
 80006f8:	f7ff ffd0 	bl	800069c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006fc:	2010      	movs	r0, #16
 80006fe:	f7ff ffcd 	bl	800069c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000702:	2008      	movs	r0, #8
 8000704:	f7ff ffca 	bl	800069c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TEST_Pin|LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	f640 0123 	movw	r1, #2083	; 0x823
 800070e:	483f      	ldr	r0, [pc, #252]	; (800080c <MX_GPIO_Init+0x13c>)
 8000710:	f002 fbe8 	bl	8002ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000714:	2308      	movs	r3, #8
 8000716:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000718:	2303      	movs	r3, #3
 800071a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	4619      	mov	r1, r3
 8000724:	483a      	ldr	r0, [pc, #232]	; (8000810 <MX_GPIO_Init+0x140>)
 8000726:	f002 f9a1 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 PB2 PB10 
                           PB12 PB13 PB14 PB15 
                           PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_2|GPIO_PIN_10 
 800072a:	f24f 7314 	movw	r3, #63252	; 0xf714
 800072e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000730:	2303      	movs	r3, #3
 8000732:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	4619      	mov	r1, r3
 800073c:	4833      	ldr	r0, [pc, #204]	; (800080c <MX_GPIO_Init+0x13c>)
 800073e:	f002 f995 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 
                           PC5 PC6 PC10 PC11 
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000742:	f641 436f 	movw	r3, #7279	; 0x1c6f
 8000746:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000748:	2303      	movs	r3, #3
 800074a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	4619      	mov	r1, r3
 8000754:	482f      	ldr	r0, [pc, #188]	; (8000814 <MX_GPIO_Init+0x144>)
 8000756:	f002 f989 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA5 PA6 PA7 
                           PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800075a:	f248 73ff 	movw	r3, #34815	; 0x87ff
 800075e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000760:	2303      	movs	r3, #3
 8000762:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	4619      	mov	r1, r3
 800076c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000770:	f002 f97c 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8000774:	2310      	movs	r3, #16
 8000776:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000778:	4b27      	ldr	r3, [pc, #156]	; (8000818 <MX_GPIO_Init+0x148>)
 800077a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800077c:	2301      	movs	r3, #1
 800077e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	4619      	mov	r1, r3
 8000784:	4823      	ldr	r0, [pc, #140]	; (8000814 <MX_GPIO_Init+0x144>)
 8000786:	f002 f971 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TEST_Pin|LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin;
 800078a:	f640 0323 	movw	r3, #2083	; 0x823
 800078e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000790:	2301      	movs	r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	4619      	mov	r1, r3
 80007a0:	481a      	ldr	r0, [pc, #104]	; (800080c <MX_GPIO_Init+0x13c>)
 80007a2:	f002 f963 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007a6:	2310      	movs	r3, #16
 80007a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007aa:	2303      	movs	r3, #3
 80007ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	4619      	mov	r1, r3
 80007b6:	4819      	ldr	r0, [pc, #100]	; (800081c <MX_GPIO_Init+0x14c>)
 80007b8:	f002 f958 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = SW2_Pin|SW3_Pin;
 80007bc:	2303      	movs	r3, #3
 80007be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007c0:	4b15      	ldr	r3, [pc, #84]	; (8000818 <MX_GPIO_Init+0x148>)
 80007c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007c4:	2301      	movs	r3, #1
 80007c6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	4619      	mov	r1, r3
 80007cc:	4814      	ldr	r0, [pc, #80]	; (8000820 <MX_GPIO_Init+0x150>)
 80007ce:	f002 f94d 	bl	8002a6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2100      	movs	r1, #0
 80007d6:	2006      	movs	r0, #6
 80007d8:	f002 f8ae 	bl	8002938 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007dc:	2006      	movs	r0, #6
 80007de:	f002 f8d5 	bl	800298c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2100      	movs	r1, #0
 80007e6:	2007      	movs	r0, #7
 80007e8:	f002 f8a6 	bl	8002938 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80007ec:	2007      	movs	r0, #7
 80007ee:	f002 f8cd 	bl	800298c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2100      	movs	r1, #0
 80007f6:	200a      	movs	r0, #10
 80007f8:	f002 f89e 	bl	8002938 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80007fc:	200a      	movs	r0, #10
 80007fe:	f002 f8c5 	bl	800298c <HAL_NVIC_EnableIRQ>

}
 8000802:	bf00      	nop
 8000804:	3718      	adds	r7, #24
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	48000400 	.word	0x48000400
 8000810:	48001c00 	.word	0x48001c00
 8000814:	48000800 	.word	0x48000800
 8000818:	10110000 	.word	0x10110000
 800081c:	48001000 	.word	0x48001000
 8000820:	48000c00 	.word	0x48000c00

08000824 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <LL_EXTI_EnableIT_0_31+0x24>)
 800082e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000832:	4905      	ldr	r1, [pc, #20]	; (8000848 <LL_EXTI_EnableIT_0_31+0x24>)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4313      	orrs	r3, r2
 8000838:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	58000800 	.word	0x58000800

0800084c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	4904      	ldr	r1, [pc, #16]	; (800086c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4313      	orrs	r3, r2
 800085e:	600b      	str	r3, [r1, #0]

}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	58000800 	.word	0x58000800

08000870 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000876:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <ReadRtcSsrValue+0x3c>)
 8000878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800087a:	b29b      	uxth	r3, r3
 800087c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <ReadRtcSsrValue+0x3c>)
 8000880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000882:	b29b      	uxth	r3, r3
 8000884:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000886:	e005      	b.n	8000894 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800088c:	4b07      	ldr	r3, [pc, #28]	; (80008ac <ReadRtcSsrValue+0x3c>)
 800088e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000890:	b29b      	uxth	r3, r3
 8000892:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	429a      	cmp	r2, r3
 800089a:	d1f5      	bne.n	8000888 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 800089c:	683b      	ldr	r3, [r7, #0]
}
 800089e:	4618      	mov	r0, r3
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	40002800 	.word	0x40002800

080008b0 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	460a      	mov	r2, r1
 80008ba:	71fb      	strb	r3, [r7, #7]
 80008bc:	4613      	mov	r3, r2
 80008be:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80008c0:	79ba      	ldrb	r2, [r7, #6]
 80008c2:	491d      	ldr	r1, [pc, #116]	; (8000938 <LinkTimerAfter+0x88>)
 80008c4:	4613      	mov	r3, r2
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	4413      	add	r3, r2
 80008ca:	00db      	lsls	r3, r3, #3
 80008cc:	440b      	add	r3, r1
 80008ce:	3315      	adds	r3, #21
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
 80008d6:	2b06      	cmp	r3, #6
 80008d8:	d009      	beq.n	80008ee <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80008da:	7bfa      	ldrb	r2, [r7, #15]
 80008dc:	4916      	ldr	r1, [pc, #88]	; (8000938 <LinkTimerAfter+0x88>)
 80008de:	4613      	mov	r3, r2
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	4413      	add	r3, r2
 80008e4:	00db      	lsls	r3, r3, #3
 80008e6:	440b      	add	r3, r1
 80008e8:	3314      	adds	r3, #20
 80008ea:	79fa      	ldrb	r2, [r7, #7]
 80008ec:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80008ee:	79fa      	ldrb	r2, [r7, #7]
 80008f0:	4911      	ldr	r1, [pc, #68]	; (8000938 <LinkTimerAfter+0x88>)
 80008f2:	4613      	mov	r3, r2
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	4413      	add	r3, r2
 80008f8:	00db      	lsls	r3, r3, #3
 80008fa:	440b      	add	r3, r1
 80008fc:	3315      	adds	r3, #21
 80008fe:	7bfa      	ldrb	r2, [r7, #15]
 8000900:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000902:	79fa      	ldrb	r2, [r7, #7]
 8000904:	490c      	ldr	r1, [pc, #48]	; (8000938 <LinkTimerAfter+0x88>)
 8000906:	4613      	mov	r3, r2
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	4413      	add	r3, r2
 800090c:	00db      	lsls	r3, r3, #3
 800090e:	440b      	add	r3, r1
 8000910:	3314      	adds	r3, #20
 8000912:	79ba      	ldrb	r2, [r7, #6]
 8000914:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000916:	79ba      	ldrb	r2, [r7, #6]
 8000918:	4907      	ldr	r1, [pc, #28]	; (8000938 <LinkTimerAfter+0x88>)
 800091a:	4613      	mov	r3, r2
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	4413      	add	r3, r2
 8000920:	00db      	lsls	r3, r3, #3
 8000922:	440b      	add	r3, r1
 8000924:	3315      	adds	r3, #21
 8000926:	79fa      	ldrb	r2, [r7, #7]
 8000928:	701a      	strb	r2, [r3, #0]

  return;
 800092a:	bf00      	nop
}
 800092c:	3714      	adds	r7, #20
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	200001f0 	.word	0x200001f0

0800093c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	460a      	mov	r2, r1
 8000946:	71fb      	strb	r3, [r7, #7]
 8000948:	4613      	mov	r3, r2
 800094a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 800094c:	4b29      	ldr	r3, [pc, #164]	; (80009f4 <LinkTimerBefore+0xb8>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	79ba      	ldrb	r2, [r7, #6]
 8000954:	429a      	cmp	r2, r3
 8000956:	d032      	beq.n	80009be <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000958:	79ba      	ldrb	r2, [r7, #6]
 800095a:	4927      	ldr	r1, [pc, #156]	; (80009f8 <LinkTimerBefore+0xbc>)
 800095c:	4613      	mov	r3, r2
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	4413      	add	r3, r2
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	440b      	add	r3, r1
 8000966:	3314      	adds	r3, #20
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 800096c:	7bfa      	ldrb	r2, [r7, #15]
 800096e:	4922      	ldr	r1, [pc, #136]	; (80009f8 <LinkTimerBefore+0xbc>)
 8000970:	4613      	mov	r3, r2
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	4413      	add	r3, r2
 8000976:	00db      	lsls	r3, r3, #3
 8000978:	440b      	add	r3, r1
 800097a:	3315      	adds	r3, #21
 800097c:	79fa      	ldrb	r2, [r7, #7]
 800097e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000980:	79fa      	ldrb	r2, [r7, #7]
 8000982:	491d      	ldr	r1, [pc, #116]	; (80009f8 <LinkTimerBefore+0xbc>)
 8000984:	4613      	mov	r3, r2
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	4413      	add	r3, r2
 800098a:	00db      	lsls	r3, r3, #3
 800098c:	440b      	add	r3, r1
 800098e:	3315      	adds	r3, #21
 8000990:	79ba      	ldrb	r2, [r7, #6]
 8000992:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000994:	79fa      	ldrb	r2, [r7, #7]
 8000996:	4918      	ldr	r1, [pc, #96]	; (80009f8 <LinkTimerBefore+0xbc>)
 8000998:	4613      	mov	r3, r2
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	4413      	add	r3, r2
 800099e:	00db      	lsls	r3, r3, #3
 80009a0:	440b      	add	r3, r1
 80009a2:	3314      	adds	r3, #20
 80009a4:	7bfa      	ldrb	r2, [r7, #15]
 80009a6:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80009a8:	79ba      	ldrb	r2, [r7, #6]
 80009aa:	4913      	ldr	r1, [pc, #76]	; (80009f8 <LinkTimerBefore+0xbc>)
 80009ac:	4613      	mov	r3, r2
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	4413      	add	r3, r2
 80009b2:	00db      	lsls	r3, r3, #3
 80009b4:	440b      	add	r3, r1
 80009b6:	3314      	adds	r3, #20
 80009b8:	79fa      	ldrb	r2, [r7, #7]
 80009ba:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80009bc:	e014      	b.n	80009e8 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80009be:	79fa      	ldrb	r2, [r7, #7]
 80009c0:	490d      	ldr	r1, [pc, #52]	; (80009f8 <LinkTimerBefore+0xbc>)
 80009c2:	4613      	mov	r3, r2
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	4413      	add	r3, r2
 80009c8:	00db      	lsls	r3, r3, #3
 80009ca:	440b      	add	r3, r1
 80009cc:	3315      	adds	r3, #21
 80009ce:	79ba      	ldrb	r2, [r7, #6]
 80009d0:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80009d2:	79ba      	ldrb	r2, [r7, #6]
 80009d4:	4908      	ldr	r1, [pc, #32]	; (80009f8 <LinkTimerBefore+0xbc>)
 80009d6:	4613      	mov	r3, r2
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	4413      	add	r3, r2
 80009dc:	00db      	lsls	r3, r3, #3
 80009de:	440b      	add	r3, r1
 80009e0:	3314      	adds	r3, #20
 80009e2:	79fa      	ldrb	r2, [r7, #7]
 80009e4:	701a      	strb	r2, [r3, #0]
  return;
 80009e6:	bf00      	nop
}
 80009e8:	3714      	adds	r7, #20
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20000280 	.word	0x20000280
 80009f8:	200001f0 	.word	0x200001f0

080009fc <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000a06:	4b4e      	ldr	r3, [pc, #312]	; (8000b40 <linkTimer+0x144>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	2b06      	cmp	r3, #6
 8000a0e:	d118      	bne.n	8000a42 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000a10:	4b4b      	ldr	r3, [pc, #300]	; (8000b40 <linkTimer+0x144>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4b4b      	ldr	r3, [pc, #300]	; (8000b44 <linkTimer+0x148>)
 8000a18:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000a1a:	4a49      	ldr	r2, [pc, #292]	; (8000b40 <linkTimer+0x144>)
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000a20:	79fa      	ldrb	r2, [r7, #7]
 8000a22:	4949      	ldr	r1, [pc, #292]	; (8000b48 <linkTimer+0x14c>)
 8000a24:	4613      	mov	r3, r2
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	4413      	add	r3, r2
 8000a2a:	00db      	lsls	r3, r3, #3
 8000a2c:	440b      	add	r3, r1
 8000a2e:	3315      	adds	r3, #21
 8000a30:	2206      	movs	r2, #6
 8000a32:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000a34:	4b45      	ldr	r3, [pc, #276]	; (8000b4c <linkTimer+0x150>)
 8000a36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a3a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	81fb      	strh	r3, [r7, #14]
 8000a40:	e078      	b.n	8000b34 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000a42:	f000 f909 	bl	8000c58 <ReturnTimeElapsed>
 8000a46:	4603      	mov	r3, r0
 8000a48:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000a4a:	79fa      	ldrb	r2, [r7, #7]
 8000a4c:	493e      	ldr	r1, [pc, #248]	; (8000b48 <linkTimer+0x14c>)
 8000a4e:	4613      	mov	r3, r2
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	4413      	add	r3, r2
 8000a54:	00db      	lsls	r3, r3, #3
 8000a56:	440b      	add	r3, r1
 8000a58:	3308      	adds	r3, #8
 8000a5a:	6819      	ldr	r1, [r3, #0]
 8000a5c:	89fb      	ldrh	r3, [r7, #14]
 8000a5e:	79fa      	ldrb	r2, [r7, #7]
 8000a60:	4419      	add	r1, r3
 8000a62:	4839      	ldr	r0, [pc, #228]	; (8000b48 <linkTimer+0x14c>)
 8000a64:	4613      	mov	r3, r2
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	4413      	add	r3, r2
 8000a6a:	00db      	lsls	r3, r3, #3
 8000a6c:	4403      	add	r3, r0
 8000a6e:	3308      	adds	r3, #8
 8000a70:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000a72:	79fa      	ldrb	r2, [r7, #7]
 8000a74:	4934      	ldr	r1, [pc, #208]	; (8000b48 <linkTimer+0x14c>)
 8000a76:	4613      	mov	r3, r2
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	4413      	add	r3, r2
 8000a7c:	00db      	lsls	r3, r3, #3
 8000a7e:	440b      	add	r3, r1
 8000a80:	3308      	adds	r3, #8
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000a86:	4b2e      	ldr	r3, [pc, #184]	; (8000b40 <linkTimer+0x144>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4a2e      	ldr	r2, [pc, #184]	; (8000b48 <linkTimer+0x14c>)
 8000a90:	460b      	mov	r3, r1
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	440b      	add	r3, r1
 8000a96:	00db      	lsls	r3, r3, #3
 8000a98:	4413      	add	r3, r2
 8000a9a:	3308      	adds	r3, #8
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d337      	bcc.n	8000b14 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000aa4:	4b26      	ldr	r3, [pc, #152]	; (8000b40 <linkTimer+0x144>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000aaa:	7b7a      	ldrb	r2, [r7, #13]
 8000aac:	4926      	ldr	r1, [pc, #152]	; (8000b48 <linkTimer+0x14c>)
 8000aae:	4613      	mov	r3, r2
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	4413      	add	r3, r2
 8000ab4:	00db      	lsls	r3, r3, #3
 8000ab6:	440b      	add	r3, r1
 8000ab8:	3315      	adds	r3, #21
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000abe:	e013      	b.n	8000ae8 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000ac0:	7b7a      	ldrb	r2, [r7, #13]
 8000ac2:	4921      	ldr	r1, [pc, #132]	; (8000b48 <linkTimer+0x14c>)
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	4413      	add	r3, r2
 8000aca:	00db      	lsls	r3, r3, #3
 8000acc:	440b      	add	r3, r1
 8000ace:	3315      	adds	r3, #21
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000ad4:	7b7a      	ldrb	r2, [r7, #13]
 8000ad6:	491c      	ldr	r1, [pc, #112]	; (8000b48 <linkTimer+0x14c>)
 8000ad8:	4613      	mov	r3, r2
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	4413      	add	r3, r2
 8000ade:	00db      	lsls	r3, r3, #3
 8000ae0:	440b      	add	r3, r1
 8000ae2:	3315      	adds	r3, #21
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000ae8:	7b3b      	ldrb	r3, [r7, #12]
 8000aea:	2b06      	cmp	r3, #6
 8000aec:	d00b      	beq.n	8000b06 <linkTimer+0x10a>
 8000aee:	7b3a      	ldrb	r2, [r7, #12]
 8000af0:	4915      	ldr	r1, [pc, #84]	; (8000b48 <linkTimer+0x14c>)
 8000af2:	4613      	mov	r3, r2
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	4413      	add	r3, r2
 8000af8:	00db      	lsls	r3, r3, #3
 8000afa:	440b      	add	r3, r1
 8000afc:	3308      	adds	r3, #8
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	68ba      	ldr	r2, [r7, #8]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d2dc      	bcs.n	8000ac0 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000b06:	7b7a      	ldrb	r2, [r7, #13]
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	4611      	mov	r1, r2
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fecf 	bl	80008b0 <LinkTimerAfter>
 8000b12:	e00f      	b.n	8000b34 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000b14:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <linkTimer+0x144>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	4611      	mov	r1, r2
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff ff0c 	bl	800093c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <linkTimer+0x144>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <linkTimer+0x148>)
 8000b2c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000b2e:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <linkTimer+0x144>)
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000b34:	89fb      	ldrh	r3, [r7, #14]
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000280 	.word	0x20000280
 8000b44:	20000281 	.word	0x20000281
 8000b48:	200001f0 	.word	0x200001f0
 8000b4c:	20000284 	.word	0x20000284

08000b50 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	460a      	mov	r2, r1
 8000b5a:	71fb      	strb	r3, [r7, #7]
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000b60:	4b39      	ldr	r3, [pc, #228]	; (8000c48 <UnlinkTimer+0xf8>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	79fa      	ldrb	r2, [r7, #7]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d111      	bne.n	8000b90 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000b6c:	4b36      	ldr	r3, [pc, #216]	; (8000c48 <UnlinkTimer+0xf8>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	4b36      	ldr	r3, [pc, #216]	; (8000c4c <UnlinkTimer+0xfc>)
 8000b74:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000b76:	79fa      	ldrb	r2, [r7, #7]
 8000b78:	4935      	ldr	r1, [pc, #212]	; (8000c50 <UnlinkTimer+0x100>)
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	4413      	add	r3, r2
 8000b80:	00db      	lsls	r3, r3, #3
 8000b82:	440b      	add	r3, r1
 8000b84:	3315      	adds	r3, #21
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	4b2f      	ldr	r3, [pc, #188]	; (8000c48 <UnlinkTimer+0xf8>)
 8000b8c:	701a      	strb	r2, [r3, #0]
 8000b8e:	e03e      	b.n	8000c0e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000b90:	79fa      	ldrb	r2, [r7, #7]
 8000b92:	492f      	ldr	r1, [pc, #188]	; (8000c50 <UnlinkTimer+0x100>)
 8000b94:	4613      	mov	r3, r2
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	4413      	add	r3, r2
 8000b9a:	00db      	lsls	r3, r3, #3
 8000b9c:	440b      	add	r3, r1
 8000b9e:	3314      	adds	r3, #20
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000ba4:	79fa      	ldrb	r2, [r7, #7]
 8000ba6:	492a      	ldr	r1, [pc, #168]	; (8000c50 <UnlinkTimer+0x100>)
 8000ba8:	4613      	mov	r3, r2
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	4413      	add	r3, r2
 8000bae:	00db      	lsls	r3, r3, #3
 8000bb0:	440b      	add	r3, r1
 8000bb2:	3315      	adds	r3, #21
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000bb8:	79f9      	ldrb	r1, [r7, #7]
 8000bba:	7bfa      	ldrb	r2, [r7, #15]
 8000bbc:	4824      	ldr	r0, [pc, #144]	; (8000c50 <UnlinkTimer+0x100>)
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	440b      	add	r3, r1
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	4403      	add	r3, r0
 8000bc8:	3315      	adds	r3, #21
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	b2d8      	uxtb	r0, r3
 8000bce:	4920      	ldr	r1, [pc, #128]	; (8000c50 <UnlinkTimer+0x100>)
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	4413      	add	r3, r2
 8000bd6:	00db      	lsls	r3, r3, #3
 8000bd8:	440b      	add	r3, r1
 8000bda:	3315      	adds	r3, #21
 8000bdc:	4602      	mov	r2, r0
 8000bde:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000be0:	7bbb      	ldrb	r3, [r7, #14]
 8000be2:	2b06      	cmp	r3, #6
 8000be4:	d013      	beq.n	8000c0e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000be6:	79f9      	ldrb	r1, [r7, #7]
 8000be8:	7bba      	ldrb	r2, [r7, #14]
 8000bea:	4819      	ldr	r0, [pc, #100]	; (8000c50 <UnlinkTimer+0x100>)
 8000bec:	460b      	mov	r3, r1
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	440b      	add	r3, r1
 8000bf2:	00db      	lsls	r3, r3, #3
 8000bf4:	4403      	add	r3, r0
 8000bf6:	3314      	adds	r3, #20
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	b2d8      	uxtb	r0, r3
 8000bfc:	4914      	ldr	r1, [pc, #80]	; (8000c50 <UnlinkTimer+0x100>)
 8000bfe:	4613      	mov	r3, r2
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	4413      	add	r3, r2
 8000c04:	00db      	lsls	r3, r3, #3
 8000c06:	440b      	add	r3, r1
 8000c08:	3314      	adds	r3, #20
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000c0e:	79fa      	ldrb	r2, [r7, #7]
 8000c10:	490f      	ldr	r1, [pc, #60]	; (8000c50 <UnlinkTimer+0x100>)
 8000c12:	4613      	mov	r3, r2
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	4413      	add	r3, r2
 8000c18:	00db      	lsls	r3, r3, #3
 8000c1a:	440b      	add	r3, r1
 8000c1c:	330c      	adds	r3, #12
 8000c1e:	2201      	movs	r2, #1
 8000c20:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <UnlinkTimer+0xf8>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	2b06      	cmp	r3, #6
 8000c2a:	d107      	bne.n	8000c3c <UnlinkTimer+0xec>
 8000c2c:	79bb      	ldrb	r3, [r7, #6]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d104      	bne.n	8000c3c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <UnlinkTimer+0x104>)
 8000c34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c38:	601a      	str	r2, [r3, #0]
  }

  return;
 8000c3a:	bf00      	nop
 8000c3c:	bf00      	nop
}
 8000c3e:	3714      	adds	r7, #20
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	20000280 	.word	0x20000280
 8000c4c:	20000281 	.word	0x20000281
 8000c50:	200001f0 	.word	0x200001f0
 8000c54:	20000284 	.word	0x20000284

08000c58 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <ReturnTimeElapsed+0x70>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c66:	d026      	beq.n	8000cb6 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000c68:	f7ff fe02 	bl	8000870 <ReadRtcSsrValue>
 8000c6c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000c6e:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <ReturnTimeElapsed+0x70>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d805      	bhi.n	8000c84 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <ReturnTimeElapsed+0x70>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	e00a      	b.n	8000c9a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <ReturnTimeElapsed+0x74>)
 8000c86:	881b      	ldrh	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000c90:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <ReturnTimeElapsed+0x70>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	683a      	ldr	r2, [r7, #0]
 8000c96:	4413      	add	r3, r2
 8000c98:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <ReturnTimeElapsed+0x78>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	fb02 f303 	mul.w	r3, r2, r3
 8000ca6:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <ReturnTimeElapsed+0x7c>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	40d3      	lsrs	r3, r2
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	e001      	b.n	8000cba <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	b29b      	uxth	r3, r3
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000284 	.word	0x20000284
 8000ccc:	200003a2 	.word	0x200003a2
 8000cd0:	200003a1 	.word	0x200003a1
 8000cd4:	200003a0 	.word	0x200003a0

08000cd8 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000ce2:	88fb      	ldrh	r3, [r7, #6]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d108      	bne.n	8000cfa <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000ce8:	f7ff fdc2 	bl	8000870 <ReadRtcSsrValue>
 8000cec:	4602      	mov	r2, r0
 8000cee:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <RestartWakeupCounter+0xa8>)
 8000cf0:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000cf2:	2003      	movs	r0, #3
 8000cf4:	f001 fe86 	bl	8002a04 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000cf8:	e03e      	b.n	8000d78 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d803      	bhi.n	8000d08 <RestartWakeupCounter+0x30>
 8000d00:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <RestartWakeupCounter+0xac>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d002      	beq.n	8000d0e <RestartWakeupCounter+0x36>
      Value -= 1;
 8000d08:	88fb      	ldrh	r3, [r7, #6]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000d0e:	bf00      	nop
 8000d10:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <RestartWakeupCounter+0xb0>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	f003 0304 	and.w	r3, r3, #4
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d0f7      	beq.n	8000d10 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000d20:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <RestartWakeupCounter+0xb0>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <RestartWakeupCounter+0xb0>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000d34:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <RestartWakeupCounter+0xb4>)
 8000d38:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d3c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000d3e:	2003      	movs	r0, #3
 8000d40:	f001 fe7a 	bl	8002a38 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <RestartWakeupCounter+0xb8>)
 8000d46:	695b      	ldr	r3, [r3, #20]
 8000d48:	0c1b      	lsrs	r3, r3, #16
 8000d4a:	041b      	lsls	r3, r3, #16
 8000d4c:	88fa      	ldrh	r2, [r7, #6]
 8000d4e:	4910      	ldr	r1, [pc, #64]	; (8000d90 <RestartWakeupCounter+0xb8>)
 8000d50:	4313      	orrs	r3, r2
 8000d52:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000d54:	f7ff fd8c 	bl	8000870 <ReadRtcSsrValue>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <RestartWakeupCounter+0xa8>)
 8000d5c:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <RestartWakeupCounter+0xb0>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	689a      	ldr	r2, [r3, #8]
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <RestartWakeupCounter+0xb0>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d70:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000d72:	f3af 8000 	nop.w
  return ;
 8000d76:	bf00      	nop
}
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000284 	.word	0x20000284
 8000d84:	200003a0 	.word	0x200003a0
 8000d88:	2000039c 	.word	0x2000039c
 8000d8c:	58000800 	.word	0x58000800
 8000d90:	40002800 	.word	0x40002800

08000d94 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000d9a:	4b47      	ldr	r3, [pc, #284]	; (8000eb8 <RescheduleTimerList+0x124>)
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000da6:	d108      	bne.n	8000dba <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000da8:	bf00      	nop
 8000daa:	4b44      	ldr	r3, [pc, #272]	; (8000ebc <RescheduleTimerList+0x128>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	68db      	ldr	r3, [r3, #12]
 8000db2:	f003 0304 	and.w	r3, r3, #4
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d1f7      	bne.n	8000daa <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000dba:	4b40      	ldr	r3, [pc, #256]	; (8000ebc <RescheduleTimerList+0x128>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	689a      	ldr	r2, [r3, #8]
 8000dc2:	4b3e      	ldr	r3, [pc, #248]	; (8000ebc <RescheduleTimerList+0x128>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000dcc:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000dce:	4b3c      	ldr	r3, [pc, #240]	; (8000ec0 <RescheduleTimerList+0x12c>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000dd4:	7bfa      	ldrb	r2, [r7, #15]
 8000dd6:	493b      	ldr	r1, [pc, #236]	; (8000ec4 <RescheduleTimerList+0x130>)
 8000dd8:	4613      	mov	r3, r2
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	4413      	add	r3, r2
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	440b      	add	r3, r1
 8000de2:	3308      	adds	r3, #8
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000de8:	f7ff ff36 	bl	8000c58 <ReturnTimeElapsed>
 8000dec:	4603      	mov	r3, r0
 8000dee:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000df0:	88fb      	ldrh	r3, [r7, #6]
 8000df2:	68ba      	ldr	r2, [r7, #8]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d205      	bcs.n	8000e04 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000dfc:	4b32      	ldr	r3, [pc, #200]	; (8000ec8 <RescheduleTimerList+0x134>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	701a      	strb	r2, [r3, #0]
 8000e02:	e04d      	b.n	8000ea0 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000e04:	88fb      	ldrh	r3, [r7, #6]
 8000e06:	4a31      	ldr	r2, [pc, #196]	; (8000ecc <RescheduleTimerList+0x138>)
 8000e08:	8812      	ldrh	r2, [r2, #0]
 8000e0a:	b292      	uxth	r2, r2
 8000e0c:	4413      	add	r3, r2
 8000e0e:	461a      	mov	r2, r3
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d906      	bls.n	8000e24 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000e16:	4b2d      	ldr	r3, [pc, #180]	; (8000ecc <RescheduleTimerList+0x138>)
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000e1c:	4b2a      	ldr	r3, [pc, #168]	; (8000ec8 <RescheduleTimerList+0x134>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	701a      	strb	r2, [r3, #0]
 8000e22:	e03d      	b.n	8000ea0 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	b29a      	uxth	r2, r3
 8000e28:	88fb      	ldrh	r3, [r7, #6]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000e2e:	4b26      	ldr	r3, [pc, #152]	; (8000ec8 <RescheduleTimerList+0x134>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000e34:	e034      	b.n	8000ea0 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000e36:	7bfa      	ldrb	r2, [r7, #15]
 8000e38:	4922      	ldr	r1, [pc, #136]	; (8000ec4 <RescheduleTimerList+0x130>)
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	4413      	add	r3, r2
 8000e40:	00db      	lsls	r3, r3, #3
 8000e42:	440b      	add	r3, r1
 8000e44:	3308      	adds	r3, #8
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	88fb      	ldrh	r3, [r7, #6]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d20a      	bcs.n	8000e64 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000e4e:	7bfa      	ldrb	r2, [r7, #15]
 8000e50:	491c      	ldr	r1, [pc, #112]	; (8000ec4 <RescheduleTimerList+0x130>)
 8000e52:	4613      	mov	r3, r2
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	4413      	add	r3, r2
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	440b      	add	r3, r1
 8000e5c:	3308      	adds	r3, #8
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	e013      	b.n	8000e8c <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000e64:	7bfa      	ldrb	r2, [r7, #15]
 8000e66:	4917      	ldr	r1, [pc, #92]	; (8000ec4 <RescheduleTimerList+0x130>)
 8000e68:	4613      	mov	r3, r2
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	4413      	add	r3, r2
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	440b      	add	r3, r1
 8000e72:	3308      	adds	r3, #8
 8000e74:	6819      	ldr	r1, [r3, #0]
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	7bfa      	ldrb	r2, [r7, #15]
 8000e7a:	1ac9      	subs	r1, r1, r3
 8000e7c:	4811      	ldr	r0, [pc, #68]	; (8000ec4 <RescheduleTimerList+0x130>)
 8000e7e:	4613      	mov	r3, r2
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	4413      	add	r3, r2
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	4403      	add	r3, r0
 8000e88:	3308      	adds	r3, #8
 8000e8a:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000e8c:	7bfa      	ldrb	r2, [r7, #15]
 8000e8e:	490d      	ldr	r1, [pc, #52]	; (8000ec4 <RescheduleTimerList+0x130>)
 8000e90:	4613      	mov	r3, r2
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	4413      	add	r3, r2
 8000e96:	00db      	lsls	r3, r3, #3
 8000e98:	440b      	add	r3, r1
 8000e9a:	3315      	adds	r3, #21
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	2b06      	cmp	r3, #6
 8000ea4:	d1c7      	bne.n	8000e36 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000ea6:	89bb      	ldrh	r3, [r7, #12]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff15 	bl	8000cd8 <RestartWakeupCounter>

  return ;
 8000eae:	bf00      	nop
}
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40002800 	.word	0x40002800
 8000ebc:	2000039c 	.word	0x2000039c
 8000ec0:	20000280 	.word	0x20000280
 8000ec4:	200001f0 	.word	0x200001f0
 8000ec8:	20000288 	.word	0x20000288
 8000ecc:	200003a4 	.word	0x200003a4

08000ed0 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8000eda:	617b      	str	r3, [r7, #20]
  return(result);
 8000edc:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee0:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000ee2:	4b5e      	ldr	r3, [pc, #376]	; (800105c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	22ca      	movs	r2, #202	; 0xca
 8000eea:	625a      	str	r2, [r3, #36]	; 0x24
 8000eec:	4b5b      	ldr	r3, [pc, #364]	; (800105c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2253      	movs	r2, #83	; 0x53
 8000ef4:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000ef6:	4b59      	ldr	r3, [pc, #356]	; (800105c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	689a      	ldr	r2, [r3, #8]
 8000efe:	4b57      	ldr	r3, [pc, #348]	; (800105c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f08:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000f0a:	4b55      	ldr	r3, [pc, #340]	; (8001060 <HW_TS_RTC_Wakeup_Handler+0x190>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000f12:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f16:	4953      	ldr	r1, [pc, #332]	; (8001064 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f18:	4613      	mov	r3, r2
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	4413      	add	r3, r2
 8000f1e:	00db      	lsls	r3, r3, #3
 8000f20:	440b      	add	r3, r1
 8000f22:	330c      	adds	r3, #12
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d170      	bne.n	800100e <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000f2c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f30:	494c      	ldr	r1, [pc, #304]	; (8001064 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f32:	4613      	mov	r3, r2
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	4413      	add	r3, r2
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	440b      	add	r3, r1
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000f40:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f44:	4947      	ldr	r1, [pc, #284]	; (8001064 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f46:	4613      	mov	r3, r2
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	4413      	add	r3, r2
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	440b      	add	r3, r1
 8000f50:	3310      	adds	r3, #16
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000f56:	4b44      	ldr	r3, [pc, #272]	; (8001068 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d04e      	beq.n	8000ffe <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000f60:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f64:	493f      	ldr	r1, [pc, #252]	; (8001064 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f66:	4613      	mov	r3, r2
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	4413      	add	r3, r2
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	440b      	add	r3, r1
 8000f70:	330d      	adds	r3, #13
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d125      	bne.n	8000fc6 <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000f7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f7e:	2101      	movs	r1, #1
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fde5 	bl	8000b50 <UnlinkTimer>
 8000f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f88:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000f90:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f94:	4933      	ldr	r1, [pc, #204]	; (8001064 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f96:	4613      	mov	r3, r2
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	4413      	add	r3, r2
 8000f9c:	00db      	lsls	r3, r3, #3
 8000f9e:	440b      	add	r3, r1
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000fa8:	4611      	mov	r1, r2
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 fa40 	bl	8001430 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000fb0:	4b2a      	ldr	r3, [pc, #168]	; (800105c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	22ca      	movs	r2, #202	; 0xca
 8000fb8:	625a      	str	r2, [r3, #36]	; 0x24
 8000fba:	4b28      	ldr	r3, [pc, #160]	; (800105c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2253      	movs	r2, #83	; 0x53
 8000fc2:	625a      	str	r2, [r3, #36]	; 0x24
 8000fc4:	e013      	b.n	8000fee <HW_TS_RTC_Wakeup_Handler+0x11e>
 8000fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000fd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 f9a1 	bl	800131c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000fda:	4b20      	ldr	r3, [pc, #128]	; (800105c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	22ca      	movs	r2, #202	; 0xca
 8000fe2:	625a      	str	r2, [r3, #36]	; 0x24
 8000fe4:	4b1d      	ldr	r3, [pc, #116]	; (800105c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2253      	movs	r2, #83	; 0x53
 8000fec:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000fee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ff2:	69fa      	ldr	r2, [r7, #28]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	69b8      	ldr	r0, [r7, #24]
 8000ff8:	f000 faa0 	bl	800153c <HW_TS_RTC_Int_AppNot>
 8000ffc:	e024      	b.n	8001048 <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 8000ffe:	f7ff fec9 	bl	8000d94 <RescheduleTimerList>
 8001002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	f383 8810 	msr	PRIMASK, r3
 800100c:	e01c      	b.n	8001048 <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800100e:	bf00      	nop
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	f003 0304 	and.w	r3, r3, #4
 800101c:	2b00      	cmp	r3, #0
 800101e:	d0f7      	beq.n	8001010 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001020:	4b0e      	ldr	r3, [pc, #56]	; (800105c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4b0c      	ldr	r3, [pc, #48]	; (800105c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001034:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001036:	4b0d      	ldr	r3, [pc, #52]	; (800106c <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001038:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001048:	4b04      	ldr	r3, [pc, #16]	; (800105c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	22ff      	movs	r2, #255	; 0xff
 8001050:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001052:	bf00      	nop
}
 8001054:	3728      	adds	r7, #40	; 0x28
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	2000039c 	.word	0x2000039c
 8001060:	20000280 	.word	0x20000280
 8001064:	200001f0 	.word	0x200001f0
 8001068:	20000288 	.word	0x20000288
 800106c:	58000800 	.word	0x58000800

08001070 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 800107c:	4a61      	ldr	r2, [pc, #388]	; (8001204 <HW_TS_Init+0x194>)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001082:	4b60      	ldr	r3, [pc, #384]	; (8001204 <HW_TS_Init+0x194>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	22ca      	movs	r2, #202	; 0xca
 800108a:	625a      	str	r2, [r3, #36]	; 0x24
 800108c:	4b5d      	ldr	r3, [pc, #372]	; (8001204 <HW_TS_Init+0x194>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2253      	movs	r2, #83	; 0x53
 8001094:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001096:	4b5c      	ldr	r3, [pc, #368]	; (8001208 <HW_TS_Init+0x198>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	4a5b      	ldr	r2, [pc, #364]	; (8001208 <HW_TS_Init+0x198>)
 800109c:	f043 0320 	orr.w	r3, r3, #32
 80010a0:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80010a2:	4b59      	ldr	r3, [pc, #356]	; (8001208 <HW_TS_Init+0x198>)
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	f003 0307 	and.w	r3, r3, #7
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	f1c3 0304 	rsb	r3, r3, #4
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	4b55      	ldr	r3, [pc, #340]	; (800120c <HW_TS_Init+0x19c>)
 80010b6:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80010b8:	4b53      	ldr	r3, [pc, #332]	; (8001208 <HW_TS_Init+0x198>)
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80010c0:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80010c4:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	fa92 f2a2 	rbit	r2, r2
 80010cc:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	fab2 f282 	clz	r2, r2
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	40d3      	lsrs	r3, r2
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	3301      	adds	r3, #1
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4b4c      	ldr	r3, [pc, #304]	; (8001210 <HW_TS_Init+0x1a0>)
 80010e0:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80010e2:	4b49      	ldr	r3, [pc, #292]	; (8001208 <HW_TS_Init+0x198>)
 80010e4:	691b      	ldr	r3, [r3, #16]
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	3301      	adds	r3, #1
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	4b48      	ldr	r3, [pc, #288]	; (8001214 <HW_TS_Init+0x1a4>)
 80010f4:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80010f6:	4b47      	ldr	r3, [pc, #284]	; (8001214 <HW_TS_Init+0x1a4>)
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	4a44      	ldr	r2, [pc, #272]	; (8001210 <HW_TS_Init+0x1a0>)
 80010fe:	7812      	ldrb	r2, [r2, #0]
 8001100:	fb02 f303 	mul.w	r3, r2, r3
 8001104:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001108:	4a40      	ldr	r2, [pc, #256]	; (800120c <HW_TS_Init+0x19c>)
 800110a:	7812      	ldrb	r2, [r2, #0]
 800110c:	40d3      	lsrs	r3, r2
 800110e:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001116:	4293      	cmp	r3, r2
 8001118:	d904      	bls.n	8001124 <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800111a:	4b3f      	ldr	r3, [pc, #252]	; (8001218 <HW_TS_Init+0x1a8>)
 800111c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001120:	801a      	strh	r2, [r3, #0]
 8001122:	e003      	b.n	800112c <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	b29a      	uxth	r2, r3
 8001128:	4b3b      	ldr	r3, [pc, #236]	; (8001218 <HW_TS_Init+0x1a8>)
 800112a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800112c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001130:	f7ff fb8c 	bl	800084c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001134:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001138:	f7ff fb74 	bl	8000824 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d143      	bne.n	80011ca <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001142:	4b36      	ldr	r3, [pc, #216]	; (800121c <HW_TS_Init+0x1ac>)
 8001144:	2201      	movs	r2, #1
 8001146:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001148:	4b35      	ldr	r3, [pc, #212]	; (8001220 <HW_TS_Init+0x1b0>)
 800114a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800114e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001150:	2300      	movs	r3, #0
 8001152:	75fb      	strb	r3, [r7, #23]
 8001154:	e00c      	b.n	8001170 <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001156:	7dfa      	ldrb	r2, [r7, #23]
 8001158:	4932      	ldr	r1, [pc, #200]	; (8001224 <HW_TS_Init+0x1b4>)
 800115a:	4613      	mov	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4413      	add	r3, r2
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	440b      	add	r3, r1
 8001164:	330c      	adds	r3, #12
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800116a:	7dfb      	ldrb	r3, [r7, #23]
 800116c:	3301      	adds	r3, #1
 800116e:	75fb      	strb	r3, [r7, #23]
 8001170:	7dfb      	ldrb	r3, [r7, #23]
 8001172:	2b05      	cmp	r3, #5
 8001174:	d9ef      	bls.n	8001156 <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001176:	4b2c      	ldr	r3, [pc, #176]	; (8001228 <HW_TS_Init+0x1b8>)
 8001178:	2206      	movs	r2, #6
 800117a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 800117c:	4b21      	ldr	r3, [pc, #132]	; (8001204 <HW_TS_Init+0x194>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <HW_TS_Init+0x194>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800118e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001190:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <HW_TS_Init+0x194>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <HW_TS_Init+0x194>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80011a4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80011a6:	4b21      	ldr	r3, [pc, #132]	; (800122c <HW_TS_Init+0x1bc>)
 80011a8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011ac:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80011ae:	2003      	movs	r0, #3
 80011b0:	f001 fc42 	bl	8002a38 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <HW_TS_Init+0x194>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <HW_TS_Init+0x194>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	e00a      	b.n	80011e0 <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <HW_TS_Init+0x194>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d002      	beq.n	80011e0 <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80011da:	2003      	movs	r0, #3
 80011dc:	f001 fc12 	bl	8002a04 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <HW_TS_Init+0x194>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	22ff      	movs	r2, #255	; 0xff
 80011e8:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80011ea:	2200      	movs	r2, #0
 80011ec:	2103      	movs	r1, #3
 80011ee:	2003      	movs	r0, #3
 80011f0:	f001 fba2 	bl	8002938 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80011f4:	2003      	movs	r0, #3
 80011f6:	f001 fbc9 	bl	800298c <HAL_NVIC_EnableIRQ>

  return;
 80011fa:	bf00      	nop
}
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	2000039c 	.word	0x2000039c
 8001208:	40002800 	.word	0x40002800
 800120c:	200003a0 	.word	0x200003a0
 8001210:	200003a1 	.word	0x200003a1
 8001214:	200003a2 	.word	0x200003a2
 8001218:	200003a4 	.word	0x200003a4
 800121c:	20000288 	.word	0x20000288
 8001220:	20000284 	.word	0x20000284
 8001224:	200001f0 	.word	0x200001f0
 8001228:	20000280 	.word	0x20000280
 800122c:	58000800 	.word	0x58000800

08001230 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001230:	b480      	push	{r7}
 8001232:	b08b      	sub	sp, #44	; 0x2c
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	4613      	mov	r3, r2
 800123e:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001246:	f3ef 8310 	mrs	r3, PRIMASK
 800124a:	61fb      	str	r3, [r7, #28]
  return(result);
 800124c:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800124e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001250:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001252:	e004      	b.n	800125e <HW_TS_Create+0x2e>
  {
    loop++;
 8001254:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001258:	3301      	adds	r3, #1
 800125a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800125e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001262:	2b05      	cmp	r3, #5
 8001264:	d80c      	bhi.n	8001280 <HW_TS_Create+0x50>
 8001266:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800126a:	492b      	ldr	r1, [pc, #172]	; (8001318 <HW_TS_Create+0xe8>)
 800126c:	4613      	mov	r3, r2
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	4413      	add	r3, r2
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	440b      	add	r3, r1
 8001276:	330c      	adds	r3, #12
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1e9      	bne.n	8001254 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001280:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001284:	2b06      	cmp	r3, #6
 8001286:	d037      	beq.n	80012f8 <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001288:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800128c:	4922      	ldr	r1, [pc, #136]	; (8001318 <HW_TS_Create+0xe8>)
 800128e:	4613      	mov	r3, r2
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	4413      	add	r3, r2
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	440b      	add	r3, r1
 8001298:	330c      	adds	r3, #12
 800129a:	2201      	movs	r2, #1
 800129c:	701a      	strb	r2, [r3, #0]
 800129e:	6a3b      	ldr	r3, [r7, #32]
 80012a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80012a8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80012ac:	491a      	ldr	r1, [pc, #104]	; (8001318 <HW_TS_Create+0xe8>)
 80012ae:	4613      	mov	r3, r2
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	4413      	add	r3, r2
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	440b      	add	r3, r1
 80012b8:	3310      	adds	r3, #16
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80012be:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80012c2:	4915      	ldr	r1, [pc, #84]	; (8001318 <HW_TS_Create+0xe8>)
 80012c4:	4613      	mov	r3, r2
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	4413      	add	r3, r2
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	440b      	add	r3, r1
 80012ce:	330d      	adds	r3, #13
 80012d0:	79fa      	ldrb	r2, [r7, #7]
 80012d2:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80012d4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80012d8:	490f      	ldr	r1, [pc, #60]	; (8001318 <HW_TS_Create+0xe8>)
 80012da:	4613      	mov	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	4413      	add	r3, r2
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	440b      	add	r3, r1
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80012ee:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80012f0:	2300      	movs	r3, #0
 80012f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012f6:	e007      	b.n	8001308 <HW_TS_Create+0xd8>
 80012f8:	6a3b      	ldr	r3, [r7, #32]
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8001302:	2301      	movs	r3, #1
 8001304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8001308:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800130c:	4618      	mov	r0, r3
 800130e:	372c      	adds	r7, #44	; 0x2c
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	200001f0 	.word	0x200001f0

0800131c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001326:	f3ef 8310 	mrs	r3, PRIMASK
 800132a:	60fb      	str	r3, [r7, #12]
  return(result);
 800132c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800132e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001330:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001332:	2003      	movs	r0, #3
 8001334:	f001 fb42 	bl	80029bc <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001338:	4b37      	ldr	r3, [pc, #220]	; (8001418 <HW_TS_Stop+0xfc>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	22ca      	movs	r2, #202	; 0xca
 8001340:	625a      	str	r2, [r3, #36]	; 0x24
 8001342:	4b35      	ldr	r3, [pc, #212]	; (8001418 <HW_TS_Stop+0xfc>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2253      	movs	r2, #83	; 0x53
 800134a:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800134c:	79fa      	ldrb	r2, [r7, #7]
 800134e:	4933      	ldr	r1, [pc, #204]	; (800141c <HW_TS_Stop+0x100>)
 8001350:	4613      	mov	r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4413      	add	r3, r2
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	440b      	add	r3, r1
 800135a:	330c      	adds	r3, #12
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	b2db      	uxtb	r3, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d148      	bne.n	80013f6 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	2100      	movs	r1, #0
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fbf1 	bl	8000b50 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800136e:	4b2c      	ldr	r3, [pc, #176]	; (8001420 <HW_TS_Stop+0x104>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001374:	7cfb      	ldrb	r3, [r7, #19]
 8001376:	2b06      	cmp	r3, #6
 8001378:	d135      	bne.n	80013e6 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800137a:	4b2a      	ldr	r3, [pc, #168]	; (8001424 <HW_TS_Stop+0x108>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001386:	d108      	bne.n	800139a <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001388:	bf00      	nop
 800138a:	4b23      	ldr	r3, [pc, #140]	; (8001418 <HW_TS_Stop+0xfc>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	f003 0304 	and.w	r3, r3, #4
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f7      	bne.n	800138a <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800139a:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <HW_TS_Stop+0xfc>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <HW_TS_Stop+0xfc>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013ac:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80013ae:	bf00      	nop
 80013b0:	4b19      	ldr	r3, [pc, #100]	; (8001418 <HW_TS_Stop+0xfc>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d0f7      	beq.n	80013b0 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80013c0:	4b15      	ldr	r3, [pc, #84]	; (8001418 <HW_TS_Stop+0xfc>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4b13      	ldr	r3, [pc, #76]	; (8001418 <HW_TS_Stop+0xfc>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80013d4:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80013d6:	4b14      	ldr	r3, [pc, #80]	; (8001428 <HW_TS_Stop+0x10c>)
 80013d8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013dc:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80013de:	2003      	movs	r0, #3
 80013e0:	f001 fb2a 	bl	8002a38 <HAL_NVIC_ClearPendingIRQ>
 80013e4:	e007      	b.n	80013f6 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <HW_TS_Stop+0x110>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	7cfa      	ldrb	r2, [r7, #19]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d001      	beq.n	80013f6 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 80013f2:	f7ff fccf 	bl	8000d94 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <HW_TS_Stop+0xfc>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	22ff      	movs	r2, #255	; 0xff
 80013fe:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001400:	2003      	movs	r0, #3
 8001402:	f001 fac3 	bl	800298c <HAL_NVIC_EnableIRQ>
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001410:	bf00      	nop
}
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	2000039c 	.word	0x2000039c
 800141c:	200001f0 	.word	0x200001f0
 8001420:	20000280 	.word	0x20000280
 8001424:	40002800 	.word	0x40002800
 8001428:	58000800 	.word	0x58000800
 800142c:	20000281 	.word	0x20000281

08001430 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	6039      	str	r1, [r7, #0]
 800143a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800143c:	79fa      	ldrb	r2, [r7, #7]
 800143e:	493b      	ldr	r1, [pc, #236]	; (800152c <HW_TS_Start+0xfc>)
 8001440:	4613      	mov	r3, r2
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	4413      	add	r3, r2
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	440b      	add	r3, r1
 800144a:	330c      	adds	r3, #12
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d103      	bne.n	800145c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff ff60 	bl	800131c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800145c:	f3ef 8310 	mrs	r3, PRIMASK
 8001460:	60fb      	str	r3, [r7, #12]
  return(result);
 8001462:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001464:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001466:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001468:	2003      	movs	r0, #3
 800146a:	f001 faa7 	bl	80029bc <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800146e:	4b30      	ldr	r3, [pc, #192]	; (8001530 <HW_TS_Start+0x100>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	22ca      	movs	r2, #202	; 0xca
 8001476:	625a      	str	r2, [r3, #36]	; 0x24
 8001478:	4b2d      	ldr	r3, [pc, #180]	; (8001530 <HW_TS_Start+0x100>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2253      	movs	r2, #83	; 0x53
 8001480:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001482:	79fa      	ldrb	r2, [r7, #7]
 8001484:	4929      	ldr	r1, [pc, #164]	; (800152c <HW_TS_Start+0xfc>)
 8001486:	4613      	mov	r3, r2
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	4413      	add	r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	440b      	add	r3, r1
 8001490:	330c      	adds	r3, #12
 8001492:	2202      	movs	r2, #2
 8001494:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001496:	79fa      	ldrb	r2, [r7, #7]
 8001498:	4924      	ldr	r1, [pc, #144]	; (800152c <HW_TS_Start+0xfc>)
 800149a:	4613      	mov	r3, r2
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	4413      	add	r3, r2
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	440b      	add	r3, r1
 80014a4:	3308      	adds	r3, #8
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80014aa:	79fa      	ldrb	r2, [r7, #7]
 80014ac:	491f      	ldr	r1, [pc, #124]	; (800152c <HW_TS_Start+0xfc>)
 80014ae:	4613      	mov	r3, r2
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	4413      	add	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	440b      	add	r3, r1
 80014b8:	3304      	adds	r3, #4
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fa9b 	bl	80009fc <linkTimer>
 80014c6:	4603      	mov	r3, r0
 80014c8:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80014ca:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <HW_TS_Start+0x104>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80014d0:	4b19      	ldr	r3, [pc, #100]	; (8001538 <HW_TS_Start+0x108>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	7c7a      	ldrb	r2, [r7, #17]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d002      	beq.n	80014e2 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 80014dc:	f7ff fc5a 	bl	8000d94 <RescheduleTimerList>
 80014e0:	e013      	b.n	800150a <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80014e2:	79fa      	ldrb	r2, [r7, #7]
 80014e4:	4911      	ldr	r1, [pc, #68]	; (800152c <HW_TS_Start+0xfc>)
 80014e6:	4613      	mov	r3, r2
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	4413      	add	r3, r2
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	440b      	add	r3, r1
 80014f0:	3308      	adds	r3, #8
 80014f2:	6819      	ldr	r1, [r3, #0]
 80014f4:	8a7b      	ldrh	r3, [r7, #18]
 80014f6:	79fa      	ldrb	r2, [r7, #7]
 80014f8:	1ac9      	subs	r1, r1, r3
 80014fa:	480c      	ldr	r0, [pc, #48]	; (800152c <HW_TS_Start+0xfc>)
 80014fc:	4613      	mov	r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4413      	add	r3, r2
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	4403      	add	r3, r0
 8001506:	3308      	adds	r3, #8
 8001508:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <HW_TS_Start+0x100>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	22ff      	movs	r2, #255	; 0xff
 8001512:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001514:	2003      	movs	r0, #3
 8001516:	f001 fa39 	bl	800298c <HAL_NVIC_EnableIRQ>
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001524:	bf00      	nop
}
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	200001f0 	.word	0x200001f0
 8001530:	2000039c 	.word	0x2000039c
 8001534:	20000280 	.word	0x20000280
 8001538:	20000281 	.word	0x20000281

0800153c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	460b      	mov	r3, r1
 8001546:	607a      	str	r2, [r7, #4]
 8001548:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4798      	blx	r3

  return;
 800154e:	bf00      	nop
}
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <LL_RCC_LSE_SetDriveCapability>:
{
 8001556:	b480      	push	{r7}
 8001558:	b083      	sub	sp, #12
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800155e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001566:	f023 0218 	bic.w	r2, r3, #24
 800156a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4313      	orrs	r3, r2
 8001572:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001588:	f000 ffe2 	bl	8002550 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800158c:	f000 f828 	bl	80015e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001590:	f7ff f89e 	bl	80006d0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001594:	f000 ff28 	bl	80023e8 <MX_USART1_UART_Init>
  MX_RF_Init();
 8001598:	f000 fa37 	bl	8001a0a <MX_RF_Init>
  MX_RTC_Init();
 800159c:	f000 fa4e 	bl	8001a3c <MX_RTC_Init>
  MX_USB_Device_Init();
 80015a0:	f00c fa72 	bl	800da88 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  while(!VCPInitialized) {
 80015a4:	e007      	b.n	80015b6 <main+0x32>
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin); // led red pisca se USB off
 80015a6:	2102      	movs	r1, #2
 80015a8:	480b      	ldr	r0, [pc, #44]	; (80015d8 <main+0x54>)
 80015aa:	f001 fccb 	bl	8002f44 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80015ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015b2:	f001 f851 	bl	8002658 <HAL_Delay>
  while(!VCPInitialized) {
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <main+0x58>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0f3      	beq.n	80015a6 <main+0x22>
  }
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	2102      	movs	r1, #2
 80015c2:	4805      	ldr	r0, [pc, #20]	; (80015d8 <main+0x54>)
 80015c4:	f001 fc8e 	bl	8002ee4 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */  
  APPE_Init();
 80015c8:	f7fe ffc6 	bl	8000558 <APPE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80015cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015d0:	f000 fb02 	bl	8001bd8 <UTIL_SEQ_Run>
 80015d4:	e7fa      	b.n	80015cc <main+0x48>
 80015d6:	bf00      	nop
 80015d8:	48000400 	.word	0x48000400
 80015dc:	200004d0 	.word	0x200004d0

080015e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b0ae      	sub	sp, #184	; 0xb8
 80015e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80015ea:	2248      	movs	r2, #72	; 0x48
 80015ec:	2100      	movs	r1, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f00c ffa9 	bl	800e546 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
 8001604:	615a      	str	r2, [r3, #20]
 8001606:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	2250      	movs	r2, #80	; 0x50
 800160c:	2100      	movs	r1, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f00c ff99 	bl	800e546 <memset>

  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001614:	2000      	movs	r0, #0
 8001616:	f7ff ff9e 	bl	8001556 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800161a:	4b31      	ldr	r3, [pc, #196]	; (80016e0 <SystemClock_Config+0x100>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001622:	4a2f      	ldr	r2, [pc, #188]	; (80016e0 <SystemClock_Config+0x100>)
 8001624:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	4b2d      	ldr	r3, [pc, #180]	; (80016e0 <SystemClock_Config+0x100>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001632:	603b      	str	r3, [r7, #0]
 8001634:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001636:	2347      	movs	r3, #71	; 0x47
 8001638:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800163a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800163e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001640:	2301      	movs	r3, #1
 8001642:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001644:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001648:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800164a:	2301      	movs	r3, #1
 800164c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001650:	2340      	movs	r3, #64	; 0x40
 8001652:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001656:	2300      	movs	r3, #0
 8001658:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800165c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001660:	4618      	mov	r0, r3
 8001662:	f002 ff99 	bl	8004598 <HAL_RCC_OscConfig>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800166c:	f000 f9b6 	bl	80019dc <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001670:	236f      	movs	r3, #111	; 0x6f
 8001672:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001674:	2302      	movs	r3, #2
 8001676:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001678:	2300      	movs	r3, #0
 800167a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800167c:	2300      	movs	r3, #0
 800167e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001680:	2300      	movs	r3, #0
 8001682:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001684:	2300      	movs	r3, #0
 8001686:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001688:	2300      	movs	r3, #0
 800168a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800168c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001690:	2101      	movs	r1, #1
 8001692:	4618      	mov	r0, r3
 8001694:	f003 fc4a 	bl	8004f2c <HAL_RCC_ClockConfig>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800169e:	f000 f99d 	bl	80019dc <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80016a2:	f643 1301 	movw	r3, #14593	; 0x3901
 80016a6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80016ac:	2300      	movs	r3, #0
 80016ae:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80016b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016b4:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80016b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016ba:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80016bc:	2302      	movs	r3, #2
 80016be:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80016c0:	2310      	movs	r3, #16
 80016c2:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	4618      	mov	r0, r3
 80016c8:	f004 f9c0 	bl	8005a4c <HAL_RCCEx_PeriphCLKConfig>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80016d2:	f000 f983 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80016d6:	bf00      	nop
 80016d8:	37b8      	adds	r7, #184	; 0xb8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	58000400 	.word	0x58000400

080016e4 <transmit_CDC_messege>:

/* USER CODE BEGIN 4 */
void transmit_CDC_messege(uint8_t* Buff, uint16_t Len){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	f5ad 6de8 	sub.w	sp, sp, #1856	; 0x740
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	1d3b      	adds	r3, r7, #4
 80016ee:	6018      	str	r0, [r3, #0]
 80016f0:	460a      	mov	r2, r1
 80016f2:	1cbb      	adds	r3, r7, #2
 80016f4:	801a      	strh	r2, [r3, #0]

	uint8_t result = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	f887 372b 	strb.w	r3, [r7, #1835]	; 0x72b
	char t[800];
	uint8_t t_i[800];
	char aux[10];
	uint16_t dest[102] = {0};
 80016fc:	f107 030c 	add.w	r3, r7, #12
 8001700:	4618      	mov	r0, r3
 8001702:	23cc      	movs	r3, #204	; 0xcc
 8001704:	461a      	mov	r2, r3
 8001706:	2100      	movs	r1, #0
 8001708:	f00c ff1d 	bl	800e546 <memset>
	unsigned size;

	memset(t,0,800);
 800170c:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8001710:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001714:	2100      	movs	r1, #0
 8001716:	4618      	mov	r0, r3
 8001718:	f00c ff15 	bl	800e546 <memset>
	memset(t_i,0,800);
 800171c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001720:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001724:	2100      	movs	r1, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f00c ff0d 	bl	800e546 <memset>
	memset(aux,0,10);
 800172c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001730:	220a      	movs	r2, #10
 8001732:	2100      	movs	r1, #0
 8001734:	4618      	mov	r0, r3
 8001736:	f00c ff06 	bl	800e546 <memset>

	if((Buff[0]==0x00)&&(Buff[1]==0xFA)&&(Buff[2]==0xAF)&&(Buff[3]==0x00)){
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d176      	bne.n	8001832 <transmit_CDC_messege+0x14e>
 8001744:	1d3b      	adds	r3, r7, #4
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	3301      	adds	r3, #1
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2bfa      	cmp	r3, #250	; 0xfa
 800174e:	d170      	bne.n	8001832 <transmit_CDC_messege+0x14e>
 8001750:	1d3b      	adds	r3, r7, #4
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	3302      	adds	r3, #2
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2baf      	cmp	r3, #175	; 0xaf
 800175a:	d16a      	bne.n	8001832 <transmit_CDC_messege+0x14e>
 800175c:	1d3b      	adds	r3, r7, #4
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	3303      	adds	r3, #3
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d164      	bne.n	8001832 <transmit_CDC_messege+0x14e>
		for(int i=0; i<72; i++){
 8001768:	2300      	movs	r3, #0
 800176a:	f8c7 373c 	str.w	r3, [r7, #1852]	; 0x73c
 800176e:	e020      	b.n	80017b2 <transmit_CDC_messege+0xce>
			dest[i] = (uint16_t)(((uint16_t)Buff[(2*i+1)] << 8) | Buff[2*i]);  // Turn the MSB and LSB into a signed 16-bit value
 8001770:	f8d7 373c 	ldr.w	r3, [r7, #1852]	; 0x73c
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	3301      	adds	r3, #1
 8001778:	1d3a      	adds	r2, r7, #4
 800177a:	6812      	ldr	r2, [r2, #0]
 800177c:	4413      	add	r3, r2
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	021b      	lsls	r3, r3, #8
 8001782:	b21a      	sxth	r2, r3
 8001784:	f8d7 373c 	ldr.w	r3, [r7, #1852]	; 0x73c
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	4619      	mov	r1, r3
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	440b      	add	r3, r1
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	b21b      	sxth	r3, r3
 8001796:	4313      	orrs	r3, r2
 8001798:	b21b      	sxth	r3, r3
 800179a:	b299      	uxth	r1, r3
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	f8d7 273c 	ldr.w	r2, [r7, #1852]	; 0x73c
 80017a4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(int i=0; i<72; i++){
 80017a8:	f8d7 373c 	ldr.w	r3, [r7, #1852]	; 0x73c
 80017ac:	3301      	adds	r3, #1
 80017ae:	f8c7 373c 	str.w	r3, [r7, #1852]	; 0x73c
 80017b2:	f8d7 373c 	ldr.w	r3, [r7, #1852]	; 0x73c
 80017b6:	2b47      	cmp	r3, #71	; 0x47
 80017b8:	ddda      	ble.n	8001770 <transmit_CDC_messege+0x8c>
		}
		for(int i=0;i<71;i++){
 80017ba:	2300      	movs	r3, #0
 80017bc:	f8c7 3738 	str.w	r3, [r7, #1848]	; 0x738
 80017c0:	e020      	b.n	8001804 <transmit_CDC_messege+0x120>
			sprintf(aux,"%u,",dest[i]);
 80017c2:	f107 030c 	add.w	r3, r7, #12
 80017c6:	f8d7 2738 	ldr.w	r2, [r7, #1848]	; 0x738
 80017ca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80017ce:	461a      	mov	r2, r3
 80017d0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80017d4:	4978      	ldr	r1, [pc, #480]	; (80019b8 <transmit_CDC_messege+0x2d4>)
 80017d6:	4618      	mov	r0, r3
 80017d8:	f00c febe 	bl	800e558 <siprintf>
			strcat(t,aux);
 80017dc:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80017e0:	f207 4304 	addw	r3, r7, #1028	; 0x404
 80017e4:	4611      	mov	r1, r2
 80017e6:	4618      	mov	r0, r3
 80017e8:	f00c fed6 	bl	800e598 <strcat>
			memset(aux,0,10);
 80017ec:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80017f0:	220a      	movs	r2, #10
 80017f2:	2100      	movs	r1, #0
 80017f4:	4618      	mov	r0, r3
 80017f6:	f00c fea6 	bl	800e546 <memset>
		for(int i=0;i<71;i++){
 80017fa:	f8d7 3738 	ldr.w	r3, [r7, #1848]	; 0x738
 80017fe:	3301      	adds	r3, #1
 8001800:	f8c7 3738 	str.w	r3, [r7, #1848]	; 0x738
 8001804:	f8d7 3738 	ldr.w	r3, [r7, #1848]	; 0x738
 8001808:	2b46      	cmp	r3, #70	; 0x46
 800180a:	ddda      	ble.n	80017c2 <transmit_CDC_messege+0xde>
		}
		sprintf(aux,"%u\n",dest[71]);
 800180c:	f107 030c 	add.w	r3, r7, #12
 8001810:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 8001814:	461a      	mov	r2, r3
 8001816:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800181a:	4968      	ldr	r1, [pc, #416]	; (80019bc <transmit_CDC_messege+0x2d8>)
 800181c:	4618      	mov	r0, r3
 800181e:	f00c fe9b 	bl	800e558 <siprintf>
		strcat(t,aux);
 8001822:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8001826:	f207 4304 	addw	r3, r7, #1028	; 0x404
 800182a:	4611      	mov	r1, r2
 800182c:	4618      	mov	r0, r3
 800182e:	f00c feb3 	bl	800e598 <strcat>
	}
	if((Buff[0]==0x00)&&(Buff[1]==0xAF)&&(Buff[2]==0xFA)&&(Buff[3]==0x00)){
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d176      	bne.n	800192a <transmit_CDC_messege+0x246>
 800183c:	1d3b      	adds	r3, r7, #4
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	3301      	adds	r3, #1
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2baf      	cmp	r3, #175	; 0xaf
 8001846:	d170      	bne.n	800192a <transmit_CDC_messege+0x246>
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	3302      	adds	r3, #2
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2bfa      	cmp	r3, #250	; 0xfa
 8001852:	d16a      	bne.n	800192a <transmit_CDC_messege+0x246>
 8001854:	1d3b      	adds	r3, r7, #4
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	3303      	adds	r3, #3
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d164      	bne.n	800192a <transmit_CDC_messege+0x246>
		for(int i=0; i<102; i++){
 8001860:	2300      	movs	r3, #0
 8001862:	f8c7 3734 	str.w	r3, [r7, #1844]	; 0x734
 8001866:	e020      	b.n	80018aa <transmit_CDC_messege+0x1c6>
			dest[i] = (uint16_t)(((uint16_t)Buff[(2*i+1)] << 8) | Buff[2*i]);  // Turn the MSB and LSB into a signed 16-bit value
 8001868:	f8d7 3734 	ldr.w	r3, [r7, #1844]	; 0x734
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	3301      	adds	r3, #1
 8001870:	1d3a      	adds	r2, r7, #4
 8001872:	6812      	ldr	r2, [r2, #0]
 8001874:	4413      	add	r3, r2
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	021b      	lsls	r3, r3, #8
 800187a:	b21a      	sxth	r2, r3
 800187c:	f8d7 3734 	ldr.w	r3, [r7, #1844]	; 0x734
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	4619      	mov	r1, r3
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	440b      	add	r3, r1
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	b21b      	sxth	r3, r3
 800188e:	4313      	orrs	r3, r2
 8001890:	b21b      	sxth	r3, r3
 8001892:	b299      	uxth	r1, r3
 8001894:	f107 030c 	add.w	r3, r7, #12
 8001898:	f8d7 2734 	ldr.w	r2, [r7, #1844]	; 0x734
 800189c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(int i=0; i<102; i++){
 80018a0:	f8d7 3734 	ldr.w	r3, [r7, #1844]	; 0x734
 80018a4:	3301      	adds	r3, #1
 80018a6:	f8c7 3734 	str.w	r3, [r7, #1844]	; 0x734
 80018aa:	f8d7 3734 	ldr.w	r3, [r7, #1844]	; 0x734
 80018ae:	2b65      	cmp	r3, #101	; 0x65
 80018b0:	ddda      	ble.n	8001868 <transmit_CDC_messege+0x184>
		}
		for(int i=0;i<101;i++){
 80018b2:	2300      	movs	r3, #0
 80018b4:	f8c7 3730 	str.w	r3, [r7, #1840]	; 0x730
 80018b8:	e020      	b.n	80018fc <transmit_CDC_messege+0x218>
			sprintf(aux,"%u,",dest[i]);
 80018ba:	f107 030c 	add.w	r3, r7, #12
 80018be:	f8d7 2730 	ldr.w	r2, [r7, #1840]	; 0x730
 80018c2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80018c6:	461a      	mov	r2, r3
 80018c8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80018cc:	493a      	ldr	r1, [pc, #232]	; (80019b8 <transmit_CDC_messege+0x2d4>)
 80018ce:	4618      	mov	r0, r3
 80018d0:	f00c fe42 	bl	800e558 <siprintf>
			strcat(t,aux);
 80018d4:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80018d8:	f207 4304 	addw	r3, r7, #1028	; 0x404
 80018dc:	4611      	mov	r1, r2
 80018de:	4618      	mov	r0, r3
 80018e0:	f00c fe5a 	bl	800e598 <strcat>
			memset(aux,0,10);
 80018e4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80018e8:	220a      	movs	r2, #10
 80018ea:	2100      	movs	r1, #0
 80018ec:	4618      	mov	r0, r3
 80018ee:	f00c fe2a 	bl	800e546 <memset>
		for(int i=0;i<101;i++){
 80018f2:	f8d7 3730 	ldr.w	r3, [r7, #1840]	; 0x730
 80018f6:	3301      	adds	r3, #1
 80018f8:	f8c7 3730 	str.w	r3, [r7, #1840]	; 0x730
 80018fc:	f8d7 3730 	ldr.w	r3, [r7, #1840]	; 0x730
 8001900:	2b64      	cmp	r3, #100	; 0x64
 8001902:	ddda      	ble.n	80018ba <transmit_CDC_messege+0x1d6>
		}
		sprintf(aux,"%u\n",dest[101]);
 8001904:	f107 030c 	add.w	r3, r7, #12
 8001908:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 800190c:	461a      	mov	r2, r3
 800190e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001912:	492a      	ldr	r1, [pc, #168]	; (80019bc <transmit_CDC_messege+0x2d8>)
 8001914:	4618      	mov	r0, r3
 8001916:	f00c fe1f 	bl	800e558 <siprintf>
		strcat(t,aux);
 800191a:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 800191e:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8001922:	4611      	mov	r1, r2
 8001924:	4618      	mov	r0, r3
 8001926:	f00c fe37 	bl	800e598 <strcat>
	}

	for(int i=0;i<strlen(t);i++){
 800192a:	2300      	movs	r3, #0
 800192c:	f8c7 372c 	str.w	r3, [r7, #1836]	; 0x72c
 8001930:	e011      	b.n	8001956 <transmit_CDC_messege+0x272>
		t_i[i] = (uint8_t)t[i];
 8001932:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8001936:	f8d7 372c 	ldr.w	r3, [r7, #1836]	; 0x72c
 800193a:	4413      	add	r3, r2
 800193c:	7819      	ldrb	r1, [r3, #0]
 800193e:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8001942:	f8d7 372c 	ldr.w	r3, [r7, #1836]	; 0x72c
 8001946:	4413      	add	r3, r2
 8001948:	460a      	mov	r2, r1
 800194a:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<strlen(t);i++){
 800194c:	f8d7 372c 	ldr.w	r3, [r7, #1836]	; 0x72c
 8001950:	3301      	adds	r3, #1
 8001952:	f8c7 372c 	str.w	r3, [r7, #1836]	; 0x72c
 8001956:	f207 4304 	addw	r3, r7, #1028	; 0x404
 800195a:	4618      	mov	r0, r3
 800195c:	f7fe fc10 	bl	8000180 <strlen>
 8001960:	4602      	mov	r2, r0
 8001962:	f8d7 372c 	ldr.w	r3, [r7, #1836]	; 0x72c
 8001966:	429a      	cmp	r2, r3
 8001968:	d8e3      	bhi.n	8001932 <transmit_CDC_messege+0x24e>
	}

	size = (unsigned)strlen(t_i);
 800196a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fc06 	bl	8000180 <strlen>
 8001974:	f8c7 0724 	str.w	r0, [r7, #1828]	; 0x724
	result = CDC_Transmit_FS(t_i, size);
 8001978:	f8d7 3724 	ldr.w	r3, [r7, #1828]	; 0x724
 800197c:	b29a      	uxth	r2, r3
 800197e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001982:	4611      	mov	r1, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f00c f949 	bl	800dc1c <CDC_Transmit_FS>
 800198a:	4603      	mov	r3, r0
 800198c:	f887 372b 	strb.w	r3, [r7, #1835]	; 0x72b


	if (result == 1)
 8001990:	f897 372b 	ldrb.w	r3, [r7, #1835]	; 0x72b
 8001994:	2b01      	cmp	r3, #1
 8001996:	d105      	bne.n	80019a4 <transmit_CDC_messege+0x2c0>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 8001998:	2201      	movs	r2, #1
 800199a:	2120      	movs	r1, #32
 800199c:	4808      	ldr	r0, [pc, #32]	; (80019c0 <transmit_CDC_messege+0x2dc>)
 800199e:	f001 faa1 	bl	8002ee4 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);


}
 80019a2:	e004      	b.n	80019ae <transmit_CDC_messege+0x2ca>
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 80019a4:	2200      	movs	r2, #0
 80019a6:	2120      	movs	r1, #32
 80019a8:	4805      	ldr	r0, [pc, #20]	; (80019c0 <transmit_CDC_messege+0x2dc>)
 80019aa:	f001 fa9b 	bl	8002ee4 <HAL_GPIO_WritePin>
}
 80019ae:	bf00      	nop
 80019b0:	f507 67e8 	add.w	r7, r7, #1856	; 0x740
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	0800ed88 	.word	0x0800ed88
 80019bc:	0800ed8c 	.word	0x0800ed8c
 80019c0:	48000400 	.word	0x48000400

080019c4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == SW2_Pin){}
  if(GPIO_Pin == SW3_Pin){}
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80019e0:	2201      	movs	r2, #1
 80019e2:	2102      	movs	r1, #2
 80019e4:	4802      	ldr	r0, [pc, #8]	; (80019f0 <Error_Handler+0x14>)
 80019e6:	f001 fa7d 	bl	8002ee4 <HAL_GPIO_WritePin>
	while(1){
		__NOP();
 80019ea:	bf00      	nop
 80019ec:	e7fd      	b.n	80019ea <Error_Handler+0xe>
 80019ee:	bf00      	nop
 80019f0:	48000400 	.word	0x48000400

080019f4 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0

}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
	...

08001a3c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <MX_RTC_Init+0x34>)
 8001a42:	4a0c      	ldr	r2, [pc, #48]	; (8001a74 <MX_RTC_Init+0x38>)
 8001a44:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a46:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <MX_RTC_Init+0x34>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001a4c:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <MX_RTC_Init+0x34>)
 8001a4e:	220f      	movs	r2, #15
 8001a50:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001a52:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <MX_RTC_Init+0x34>)
 8001a54:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001a58:	60da      	str	r2, [r3, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a5a:	4805      	ldr	r0, [pc, #20]	; (8001a70 <MX_RTC_Init+0x34>)
 8001a5c:	f004 fce2 	bl	8006424 <HAL_RTC_Init>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_RTC_Init+0x2e>
  {
    Error_Handler();
 8001a66:	f7ff ffb9 	bl	80019dc <Error_Handler>
  }

}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	200006fc 	.word	0x200006fc
 8001a74:	40002800 	.word	0x40002800

08001a78 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <HAL_RTC_MspInit+0x20>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d101      	bne.n	8001a8e <HAL_RTC_MspInit+0x16>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a8a:	f7ff ffc5 	bl	8001a18 <LL_RCC_EnableRTC>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40002800 	.word	0x40002800

08001a9c <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <UTIL_LPM_Init+0x1c>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8001aa6:	4b05      	ldr	r3, [pc, #20]	; (8001abc <UTIL_LPM_Init+0x20>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	200003a8 	.word	0x200003a8
 8001abc:	200003ac 	.word	0x200003ac

08001ac0 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b087      	sub	sp, #28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001acc:	f3ef 8310 	mrs	r3, PRIMASK
 8001ad0:	613b      	str	r3, [r7, #16]
  return(result);
 8001ad2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8001ad4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ad6:	b672      	cpsid	i
  
  switch(state)
 8001ad8:	78fb      	ldrb	r3, [r7, #3]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d009      	beq.n	8001af2 <UTIL_LPM_SetOffMode+0x32>
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d000      	beq.n	8001ae4 <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 8001ae2:	e00e      	b.n	8001b02 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <UTIL_LPM_SetOffMode+0x58>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	4a0a      	ldr	r2, [pc, #40]	; (8001b18 <UTIL_LPM_SetOffMode+0x58>)
 8001aee:	6013      	str	r3, [r2, #0]
      break;
 8001af0:	e007      	b.n	8001b02 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	43da      	mvns	r2, r3
 8001af6:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <UTIL_LPM_SetOffMode+0x58>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4013      	ands	r3, r2
 8001afc:	4a06      	ldr	r2, [pc, #24]	; (8001b18 <UTIL_LPM_SetOffMode+0x58>)
 8001afe:	6013      	str	r3, [r2, #0]
      break;
 8001b00:	bf00      	nop
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8001b0c:	bf00      	nop
 8001b0e:	371c      	adds	r7, #28
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	200003ac 	.word	0x200003ac

08001b1c <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b22:	f3ef 8310 	mrs	r3, PRIMASK
 8001b26:	60bb      	str	r3, [r7, #8]
  return(result);
 8001b28:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8001b2a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b2c:	b672      	cpsid	i

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <UTIL_LPM_EnterLowPower+0x5c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d006      	beq.n	8001b44 <UTIL_LPM_EnterLowPower+0x28>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8001b36:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <UTIL_LPM_EnterLowPower+0x60>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <UTIL_LPM_EnterLowPower+0x60>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	4798      	blx	r3
 8001b42:	e010      	b.n	8001b66 <UTIL_LPM_EnterLowPower+0x4a>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8001b44:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <UTIL_LPM_EnterLowPower+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d006      	beq.n	8001b5a <UTIL_LPM_EnterLowPower+0x3e>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <UTIL_LPM_EnterLowPower+0x60>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8001b52:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <UTIL_LPM_EnterLowPower+0x60>)
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	4798      	blx	r3
 8001b58:	e005      	b.n	8001b66 <UTIL_LPM_EnterLowPower+0x4a>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8001b5a:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <UTIL_LPM_EnterLowPower+0x60>)
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <UTIL_LPM_EnterLowPower+0x60>)
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	4798      	blx	r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8001b70:	bf00      	nop
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	200003a8 	.word	0x200003a8
 8001b7c:	0800f020 	.word	0x0800f020
 8001b80:	200003ac 	.word	0x200003ac

08001b84 <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode( void )
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterOffMode */

/* USER CODE END PWR_EnterOffMode */
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode( void )
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitOffMode */

/* USER CODE END PWR_ExitOffMode */
}
 8001b96:	bf00      	nop
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode( void )
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterStopMode */

/* USER CODE END PWR_EnterStopMode */
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode( void )
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitStopMode */

/* USER CODE END PWR_ExitStopMode */
}
 8001bb2:	bf00      	nop
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode( void )
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode */

/* USER CODE END PWR_EnterSleepMode */
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode( void )
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode */

/* USER CODE END PWR_ExitSleepMode */
}
 8001bce:	bf00      	nop
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t mask_bm )
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08c      	sub	sp, #48	; 0x30
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8001be0:	4b63      	ldr	r3, [pc, #396]	; (8001d70 <UTIL_SEQ_Run+0x198>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= mask_bm;
 8001be6:	4b62      	ldr	r3, [pc, #392]	; (8001d70 <UTIL_SEQ_Run+0x198>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4013      	ands	r3, r2
 8001bee:	4a60      	ldr	r2, [pc, #384]	; (8001d70 <UTIL_SEQ_Run+0x198>)
 8001bf0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 8001bf2:	e082      	b.n	8001cfa <UTIL_SEQ_Run+0x122>
  {
    counter = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 8001bf8:	e002      	b.n	8001c00 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 8001bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 8001c00:	4a5c      	ldr	r2, [pc, #368]	; (8001d74 <UTIL_SEQ_Run+0x19c>)
 8001c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c04:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001c08:	4b5b      	ldr	r3, [pc, #364]	; (8001d78 <UTIL_SEQ_Run+0x1a0>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	401a      	ands	r2, r3
 8001c0e:	4b58      	ldr	r3, [pc, #352]	; (8001d70 <UTIL_SEQ_Run+0x198>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0f0      	beq.n	8001bfa <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 8001c18:	4a56      	ldr	r2, [pc, #344]	; (8001d74 <UTIL_SEQ_Run+0x19c>)
 8001c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c1c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001c20:	4b55      	ldr	r3, [pc, #340]	; (8001d78 <UTIL_SEQ_Run+0x1a0>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	401a      	ands	r2, r3
 8001c26:	4b52      	ldr	r3, [pc, #328]	; (8001d70 <UTIL_SEQ_Run+0x198>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if (!(TaskPrio[counter].round_robin & current_task_set))
 8001c2e:	4a51      	ldr	r2, [pc, #324]	; (8001d74 <UTIL_SEQ_Run+0x19c>)
 8001c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	4413      	add	r3, r2
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d106      	bne.n	8001c4e <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8001c40:	4a4c      	ldr	r2, [pc, #304]	; (8001d74 <UTIL_SEQ_Run+0x19c>)
 8001c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	4413      	add	r3, r2
 8001c48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c4c:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = bit_position(current_task_set & TaskPrio[counter].round_robin);
 8001c4e:	4a49      	ldr	r2, [pc, #292]	; (8001d74 <UTIL_SEQ_Run+0x19c>)
 8001c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	4413      	add	r3, r2
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f000 f97d 	bl	8001f5c <bit_position>
 8001c62:	4602      	mov	r2, r0
 8001c64:	4b45      	ldr	r3, [pc, #276]	; (8001d7c <UTIL_SEQ_Run+0x1a4>)
 8001c66:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1 << (CurrentTaskIdx));
 8001c68:	4a42      	ldr	r2, [pc, #264]	; (8001d74 <UTIL_SEQ_Run+0x19c>)
 8001c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	4413      	add	r3, r2
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	4a42      	ldr	r2, [pc, #264]	; (8001d7c <UTIL_SEQ_Run+0x1a4>)
 8001c74:	6812      	ldr	r2, [r2, #0]
 8001c76:	2101      	movs	r1, #1
 8001c78:	fa01 f202 	lsl.w	r2, r1, r2
 8001c7c:	43d2      	mvns	r2, r2
 8001c7e:	401a      	ands	r2, r3
 8001c80:	493c      	ldr	r1, [pc, #240]	; (8001d74 <UTIL_SEQ_Run+0x19c>)
 8001c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	440b      	add	r3, r1
 8001c88:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c8a:	f3ef 8310 	mrs	r3, PRIMASK
 8001c8e:	61bb      	str	r3, [r7, #24]
  return(result);
 8001c90:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8001c92:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c94:	b672      	cpsid	i
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1 << (CurrentTaskIdx));
 8001c96:	4b39      	ldr	r3, [pc, #228]	; (8001d7c <UTIL_SEQ_Run+0x1a4>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	4b36      	ldr	r3, [pc, #216]	; (8001d80 <UTIL_SEQ_Run+0x1a8>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	4a35      	ldr	r2, [pc, #212]	; (8001d80 <UTIL_SEQ_Run+0x1a8>)
 8001cac:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter; counter--)
 8001cae:	2302      	movs	r3, #2
 8001cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cb2:	e014      	b.n	8001cde <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1].priority &= ~(1 << (CurrentTaskIdx));
 8001cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	4a2e      	ldr	r2, [pc, #184]	; (8001d74 <UTIL_SEQ_Run+0x19c>)
 8001cba:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001cbe:	4b2f      	ldr	r3, [pc, #188]	; (8001d7c <UTIL_SEQ_Run+0x1a4>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	4619      	mov	r1, r3
 8001ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	400a      	ands	r2, r1
 8001cd2:	4928      	ldr	r1, [pc, #160]	; (8001d74 <UTIL_SEQ_Run+0x19c>)
 8001cd4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter; counter--)
 8001cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1e7      	bne.n	8001cb4 <UTIL_SEQ_Run+0xdc>
 8001ce4:	6a3b      	ldr	r3, [r7, #32]
 8001ce6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	f383 8810 	msr	PRIMASK, r3
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8001cee:	4b23      	ldr	r3, [pc, #140]	; (8001d7c <UTIL_SEQ_Run+0x1a4>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a24      	ldr	r2, [pc, #144]	; (8001d84 <UTIL_SEQ_Run+0x1ac>)
 8001cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf8:	4798      	blx	r3
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 8001cfa:	4b21      	ldr	r3, [pc, #132]	; (8001d80 <UTIL_SEQ_Run+0x1a8>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <UTIL_SEQ_Run+0x1a0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	401a      	ands	r2, r3
 8001d04:	4b1a      	ldr	r3, [pc, #104]	; (8001d70 <UTIL_SEQ_Run+0x198>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d007      	beq.n	8001d1e <UTIL_SEQ_Run+0x146>
 8001d0e:	4b1e      	ldr	r3, [pc, #120]	; (8001d88 <UTIL_SEQ_Run+0x1b0>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	4b1e      	ldr	r3, [pc, #120]	; (8001d8c <UTIL_SEQ_Run+0x1b4>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4013      	ands	r3, r2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f43f af6b 	beq.w	8001bf4 <UTIL_SEQ_Run+0x1c>
  }

  UTIL_SEQ_PreIdle( );
 8001d1e:	f000 f90f 	bl	8001f40 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d22:	f3ef 8310 	mrs	r3, PRIMASK
 8001d26:	613b      	str	r3, [r7, #16]
  return(result);
 8001d28:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8001d2a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d2c:	b672      	cpsid	i
  if (!((TaskSet & TaskMask & SuperMask) || (EvtSet & EvtWaited)))
 8001d2e:	4b14      	ldr	r3, [pc, #80]	; (8001d80 <UTIL_SEQ_Run+0x1a8>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <UTIL_SEQ_Run+0x1a0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	401a      	ands	r2, r3
 8001d38:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <UTIL_SEQ_Run+0x198>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d108      	bne.n	8001d54 <UTIL_SEQ_Run+0x17c>
 8001d42:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <UTIL_SEQ_Run+0x1b0>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <UTIL_SEQ_Run+0x1b4>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <UTIL_SEQ_Run+0x17c>
  {
    UTIL_SEQ_Idle( );
 8001d50:	f7fe fc6f 	bl	8000632 <UTIL_SEQ_Idle>
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f383 8810 	msr	PRIMASK, r3
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  
  UTIL_SEQ_PostIdle( );
 8001d5e:	f000 f8f6 	bl	8001f4e <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8001d62:	4a03      	ldr	r2, [pc, #12]	; (8001d70 <UTIL_SEQ_Run+0x198>)
 8001d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d66:	6013      	str	r3, [r2, #0]

  return;
 8001d68:	bf00      	nop
}
 8001d6a:	3730      	adds	r7, #48	; 0x30
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000008 	.word	0x20000008
 8001d74:	20000440 	.word	0x20000440
 8001d78:	20000004 	.word	0x20000004
 8001d7c:	200003bc 	.word	0x200003bc
 8001d80:	200003b0 	.word	0x200003b0
 8001d84:	200003c0 	.word	0x200003c0
 8001d88:	200003b4 	.word	0x200003b4
 8001d8c:	200003b8 	.word	0x200003b8

08001d90 <UTIL_SEQ_RegTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_RegTask( UTIL_SEQ_bm_t task_id_bm , uint32_t flags, void (*task)( void ) )
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b088      	sub	sp, #32
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d9c:	f3ef 8310 	mrs	r3, PRIMASK
 8001da0:	617b      	str	r3, [r7, #20]
  return(result);
 8001da2:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8001da4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8001da6:	b672      	cpsid	i

  TaskCb[bit_position(task_id_bm)] = task;
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f000 f8d7 	bl	8001f5c <bit_position>
 8001dae:	4601      	mov	r1, r0
 8001db0:	4a06      	ldr	r2, [pc, #24]	; (8001dcc <UTIL_SEQ_RegTask+0x3c>)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8001dc2:	bf00      	nop
}
 8001dc4:	3720      	adds	r7, #32
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	200003c0 	.word	0x200003c0

08001dd0 <UTIL_SEQ_SetTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t task_id_bm , uint32_t task_prio )
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b087      	sub	sp, #28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001dda:	f3ef 8310 	mrs	r3, PRIMASK
 8001dde:	60fb      	str	r3, [r7, #12]
  return(result);
 8001de0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8001de2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001de4:	b672      	cpsid	i

  TaskSet |= task_id_bm;
 8001de6:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <UTIL_SEQ_SetTask+0x4c>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	4a0b      	ldr	r2, [pc, #44]	; (8001e1c <UTIL_SEQ_SetTask+0x4c>)
 8001df0:	6013      	str	r3, [r2, #0]
  TaskPrio[task_prio].priority |= task_id_bm;
 8001df2:	4a0b      	ldr	r2, [pc, #44]	; (8001e20 <UTIL_SEQ_SetTask+0x50>)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	4908      	ldr	r1, [pc, #32]	; (8001e20 <UTIL_SEQ_SetTask+0x50>)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8001e10:	bf00      	nop
}
 8001e12:	371c      	adds	r7, #28
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	200003b0 	.word	0x200003b0
 8001e20:	20000440 	.word	0x20000440

08001e24 <UTIL_SEQ_PauseTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t task_id_bm )
{
 8001e24:	b480      	push	{r7}
 8001e26:	b087      	sub	sp, #28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e2c:	f3ef 8310 	mrs	r3, PRIMASK
 8001e30:	60fb      	str	r3, [r7, #12]
  return(result);
 8001e32:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8001e34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e36:	b672      	cpsid	i

  TaskMask &= (~task_id_bm);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	43da      	mvns	r2, r3
 8001e3c:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <UTIL_SEQ_PauseTask+0x38>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4013      	ands	r3, r2
 8001e42:	4a06      	ldr	r2, [pc, #24]	; (8001e5c <UTIL_SEQ_PauseTask+0x38>)
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8001e50:	bf00      	nop
}
 8001e52:	371c      	adds	r7, #28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	20000004 	.word	0x20000004

08001e60 <UTIL_SEQ_ResumeTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t task_id_bm )
{
 8001e60:	b480      	push	{r7}
 8001e62:	b087      	sub	sp, #28
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e68:	f3ef 8310 	mrs	r3, PRIMASK
 8001e6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8001e70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e72:	b672      	cpsid	i

  TaskMask |= task_id_bm;
 8001e74:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <UTIL_SEQ_ResumeTask+0x38>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	4a06      	ldr	r2, [pc, #24]	; (8001e98 <UTIL_SEQ_ResumeTask+0x38>)
 8001e7e:	6013      	str	r3, [r2, #0]
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8001e8a:	bf00      	nop
}
 8001e8c:	371c      	adds	r7, #28
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	20000004 	.word	0x20000004

08001e9c <UTIL_SEQ_SetEvt>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t evt_id_bm )
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b087      	sub	sp, #28
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ea4:	f3ef 8310 	mrs	r3, PRIMASK
 8001ea8:	60fb      	str	r3, [r7, #12]
  return(result);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8001eac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001eae:	b672      	cpsid	i

  EvtSet |= evt_id_bm;
 8001eb0:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <UTIL_SEQ_SetEvt+0x38>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	4a06      	ldr	r2, [pc, #24]	; (8001ed4 <UTIL_SEQ_SetEvt+0x38>)
 8001eba:	6013      	str	r3, [r2, #0]
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8001ec6:	bf00      	nop
}
 8001ec8:	371c      	adds	r7, #28
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	200003b4 	.word	0x200003b4

08001ed8 <UTIL_SEQ_WaitEvt>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_WaitEvt( UTIL_SEQ_bm_t evt_id_bm )
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_id_bm;

  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_id_bm = (1 << CurrentTaskIdx);
 8001ee0:	4b14      	ldr	r3, [pc, #80]	; (8001f34 <UTIL_SEQ_WaitEvt+0x5c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	60fb      	str	r3, [r7, #12]

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8001eec:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <UTIL_SEQ_WaitEvt+0x60>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	60bb      	str	r3, [r7, #8]
  EvtWaited = evt_id_bm;
 8001ef2:	4a11      	ldr	r2, [pc, #68]	; (8001f38 <UTIL_SEQ_WaitEvt+0x60>)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again fro the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while((EvtSet & EvtWaited) == 0)
 8001ef8:	e005      	b.n	8001f06 <UTIL_SEQ_WaitEvt+0x2e>
  {
    UTIL_SEQ_EvtIdle(current_task_id_bm, EvtWaited);
 8001efa:	4b0f      	ldr	r3, [pc, #60]	; (8001f38 <UTIL_SEQ_WaitEvt+0x60>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4619      	mov	r1, r3
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f7fe fb9c 	bl	800063e <UTIL_SEQ_EvtIdle>
  while((EvtSet & EvtWaited) == 0)
 8001f06:	4b0d      	ldr	r3, [pc, #52]	; (8001f3c <UTIL_SEQ_WaitEvt+0x64>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <UTIL_SEQ_WaitEvt+0x60>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0f2      	beq.n	8001efa <UTIL_SEQ_WaitEvt+0x22>
  }
  EvtSet &= (~EvtWaited);
 8001f14:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <UTIL_SEQ_WaitEvt+0x60>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	43da      	mvns	r2, r3
 8001f1a:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <UTIL_SEQ_WaitEvt+0x64>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	4a06      	ldr	r2, [pc, #24]	; (8001f3c <UTIL_SEQ_WaitEvt+0x64>)
 8001f22:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 8001f24:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <UTIL_SEQ_WaitEvt+0x60>)
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	6013      	str	r3, [r2, #0]

  return;
 8001f2a:	bf00      	nop
}
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	200003bc 	.word	0x200003bc
 8001f38:	200003b8 	.word	0x200003b8
 8001f3c:	200003b4 	.word	0x200003b4

08001f40 <UTIL_SEQ_PreIdle>:
   */
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8001f44:	bf00      	nop
}
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8001f52:	bf00      	nop
}
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <bit_position>:

#if( __CORTEX_M == 0)
static const uint8_t clz_table_4bit[16] = { 4, 3, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 };	
static uint32_t bit_position(uint32_t value)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]

  uint32_t n = 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60fb      	str	r3, [r7, #12]

  if ((value & 0xFFFF0000) == 0)  { n  = 16; value <<= 16;  }
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	0c1b      	lsrs	r3, r3, #16
 8001f6c:	041b      	lsls	r3, r3, #16
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d104      	bne.n	8001f7c <bit_position+0x20>
 8001f72:	2310      	movs	r3, #16
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	041b      	lsls	r3, r3, #16
 8001f7a:	607b      	str	r3, [r7, #4]
  if ((value & 0xFF000000) == 0)  { n +=  8; value <<=  8;  }
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d105      	bne.n	8001f92 <bit_position+0x36>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	3308      	adds	r3, #8
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	021b      	lsls	r3, r3, #8
 8001f90:	607b      	str	r3, [r7, #4]
  if ((value & 0xF0000000) == 0)  { n +=  4; value <<=  4;  }
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d105      	bne.n	8001fa8 <bit_position+0x4c>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	3304      	adds	r3, #4
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	011b      	lsls	r3, r3, #4
 8001fa6:	607b      	str	r3, [r7, #4]

  n += (uint32_t)clz_table_4bit[value >> (32-4)];
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	0f1b      	lsrs	r3, r3, #28
 8001fac:	4a07      	ldr	r2, [pc, #28]	; (8001fcc <bit_position+0x70>)
 8001fae:	5cd3      	ldrb	r3, [r2, r3]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]

  return (31-n);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f1c3 031f 	rsb	r3, r3, #31
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	0800f038 	.word	0x0800f038

08001fd0 <LL_RCC_HSE_SetCapacitorTuning>:
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fdc:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001fde:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8001fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001fea:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	021b      	lsls	r3, r3, #8
 8001ff2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	cafecafe 	.word	0xcafecafe

0800200c <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002018:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800201a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4313      	orrs	r3, r2
 8002022:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002028:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4013      	ands	r3, r2
 800202e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002030:	68fb      	ldr	r3, [r7, #12]
}
 8002032:	bf00      	nop
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0

	OTP_ID0_t * p_otp;
	/**
	* Read HSE_Tuning from OTP
	*/
	p_otp = (OTP_ID0_t *) OTP_Read(0);
 8002044:	2000      	movs	r0, #0
 8002046:	f00a fac7 	bl	800c5d8 <OTP_Read>
 800204a:	6078      	str	r0, [r7, #4]
	if (p_otp)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d004      	beq.n	800205c <HAL_MspInit+0x1e>
	{
		LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	799b      	ldrb	r3, [r3, #6]
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff ffba 	bl	8001fd0 <LL_RCC_HSE_SetCapacitorTuning>
	}
  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800205c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002060:	f7ff ffd4 	bl	800200c <LL_AHB3_GRP1_EnableClock>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002064:	bf00      	nop
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
	...

0800207c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 8002080:	2102      	movs	r1, #2
 8002082:	4802      	ldr	r0, [pc, #8]	; (800208c <HardFault_Handler+0x10>)
 8002084:	f000 ff5e 	bl	8002f44 <HAL_GPIO_TogglePin>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002088:	e7fe      	b.n	8002088 <HardFault_Handler+0xc>
 800208a:	bf00      	nop
 800208c:	48000400 	.word	0x48000400

08002090 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002094:	e7fe      	b.n	8002094 <MemManage_Handler+0x4>

08002096 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002096:	b480      	push	{r7}
 8002098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800209a:	e7fe      	b.n	800209a <BusFault_Handler+0x4>

0800209c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020a0:	e7fe      	b.n	80020a0 <UsageFault_Handler+0x4>

080020a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020a2:	b480      	push	{r7}
 80020a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020be:	b480      	push	{r7}
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020d0:	f000 fa98 	bl	8002604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020d4:	bf00      	nop
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80020dc:	2001      	movs	r0, #1
 80020de:	f000 ff57 	bl	8002f90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80020ea:	2002      	movs	r0, #2
 80020ec:	f000 ff50 	bl	8002f90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80020f0:	bf00      	nop
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80020f8:	2010      	movs	r0, #16
 80020fa:	f000 ff49 	bl	8002f90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
	...

08002104 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002108:	4802      	ldr	r0, [pc, #8]	; (8002114 <USB_LP_IRQHandler+0x10>)
 800210a:	f001 f843 	bl	8003194 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20000cac 	.word	0x20000cac

08002118 <RTC_WKUP_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
* @brief This function handles RTC wake-up interrupt through EXTI line 19.
*/
void RTC_WKUP_IRQHandler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
	HW_TS_RTC_Wakeup_Handler();
 800211c:	f7fe fed8 	bl	8000ed0 <HW_TS_RTC_Wakeup_Handler>
}
 8002120:	bf00      	nop
 8002122:	bd80      	pop	{r7, pc}

08002124 <IPCC_C1_RX_IRQHandler>:
/**
* @brief This function handles IPCC RX occupied interrupt.
*/
void IPCC_C1_RX_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
	HW_IPCC_Rx_Handler();
 8002128:	f00b fb66 	bl	800d7f8 <HW_IPCC_Rx_Handler>
}
 800212c:	bf00      	nop
 800212e:	bd80      	pop	{r7, pc}

08002130 <IPCC_C1_TX_IRQHandler>:
/**
* @brief This function handles IPCC TX free interrupt.
*/
void IPCC_C1_TX_IRQHandler(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
	HW_IPCC_Tx_Handler();
 8002134:	f00b fb98 	bl	800d868 <HW_IPCC_Tx_Handler>
}
 8002138:	bf00      	nop
 800213a:	bd80      	pop	{r7, pc}

0800213c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002144:	4b11      	ldr	r3, [pc, #68]	; (800218c <_sbrk+0x50>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d102      	bne.n	8002152 <_sbrk+0x16>
		heap_end = &end;
 800214c:	4b0f      	ldr	r3, [pc, #60]	; (800218c <_sbrk+0x50>)
 800214e:	4a10      	ldr	r2, [pc, #64]	; (8002190 <_sbrk+0x54>)
 8002150:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002152:	4b0e      	ldr	r3, [pc, #56]	; (800218c <_sbrk+0x50>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002158:	4b0c      	ldr	r3, [pc, #48]	; (800218c <_sbrk+0x50>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4413      	add	r3, r2
 8002160:	466a      	mov	r2, sp
 8002162:	4293      	cmp	r3, r2
 8002164:	d907      	bls.n	8002176 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002166:	f00c f9b9 	bl	800e4dc <__errno>
 800216a:	4602      	mov	r2, r0
 800216c:	230c      	movs	r3, #12
 800216e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002170:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002174:	e006      	b.n	8002184 <_sbrk+0x48>
	}

	heap_end += incr;
 8002176:	4b05      	ldr	r3, [pc, #20]	; (800218c <_sbrk+0x50>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4413      	add	r3, r2
 800217e:	4a03      	ldr	r2, [pc, #12]	; (800218c <_sbrk+0x50>)
 8002180:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002182:	68fb      	ldr	r3, [r7, #12]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20000450 	.word	0x20000450
 8002190:	20000f28 	.word	0x20000f28

08002194 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8002198:	4b26      	ldr	r3, [pc, #152]	; (8002234 <SystemInit+0xa0>)
 800219a:	2200      	movs	r2, #0
 800219c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800219e:	4b25      	ldr	r3, [pc, #148]	; (8002234 <SystemInit+0xa0>)
 80021a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a4:	4a23      	ldr	r2, [pc, #140]	; (8002234 <SystemInit+0xa0>)
 80021a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021aa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80021ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80021be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80021c6:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80021c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021d2:	4b19      	ldr	r3, [pc, #100]	; (8002238 <SystemInit+0xa4>)
 80021d4:	4013      	ands	r3, r2
 80021d6:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80021d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021e4:	f023 0305 	bic.w	r3, r3, #5
 80021e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80021ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021f8:	f023 0301 	bic.w	r3, r3, #1
 80021fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002204:	4a0d      	ldr	r2, [pc, #52]	; (800223c <SystemInit+0xa8>)
 8002206:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800220c:	4a0b      	ldr	r2, [pc, #44]	; (800223c <SystemInit+0xa8>)
 800220e:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800221a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800221e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002224:	2200      	movs	r2, #0
 8002226:	619a      	str	r2, [r3, #24]
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	e000ed00 	.word	0xe000ed00
 8002238:	faf6fefb 	.word	0xfaf6fefb
 800223c:	22041000 	.word	0x22041000

08002240 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002240:	b480      	push	{r7}
 8002242:	b087      	sub	sp, #28
 8002244:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8002246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	091b      	lsrs	r3, r3, #4
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	4a47      	ldr	r2, [pc, #284]	; (8002370 <SystemCoreClockUpdate+0x130>)
 8002254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002258:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800225a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 030c 	and.w	r3, r3, #12
 8002264:	2b0c      	cmp	r3, #12
 8002266:	d867      	bhi.n	8002338 <SystemCoreClockUpdate+0xf8>
 8002268:	a201      	add	r2, pc, #4	; (adr r2, 8002270 <SystemCoreClockUpdate+0x30>)
 800226a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800226e:	bf00      	nop
 8002270:	080022a5 	.word	0x080022a5
 8002274:	08002339 	.word	0x08002339
 8002278:	08002339 	.word	0x08002339
 800227c:	08002339 	.word	0x08002339
 8002280:	080022ad 	.word	0x080022ad
 8002284:	08002339 	.word	0x08002339
 8002288:	08002339 	.word	0x08002339
 800228c:	08002339 	.word	0x08002339
 8002290:	080022b5 	.word	0x080022b5
 8002294:	08002339 	.word	0x08002339
 8002298:	08002339 	.word	0x08002339
 800229c:	08002339 	.word	0x08002339
 80022a0:	080022bd 	.word	0x080022bd
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80022a4:	4a33      	ldr	r2, [pc, #204]	; (8002374 <SystemCoreClockUpdate+0x134>)
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	6013      	str	r3, [r2, #0]
      break;
 80022aa:	e049      	b.n	8002340 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 80022ac:	4b31      	ldr	r3, [pc, #196]	; (8002374 <SystemCoreClockUpdate+0x134>)
 80022ae:	4a32      	ldr	r2, [pc, #200]	; (8002378 <SystemCoreClockUpdate+0x138>)
 80022b0:	601a      	str	r2, [r3, #0]
      break;
 80022b2:	e045      	b.n	8002340 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80022b4:	4b2f      	ldr	r3, [pc, #188]	; (8002374 <SystemCoreClockUpdate+0x134>)
 80022b6:	4a31      	ldr	r2, [pc, #196]	; (800237c <SystemCoreClockUpdate+0x13c>)
 80022b8:	601a      	str	r2, [r3, #0]
      break;
 80022ba:	e041      	b.n	8002340 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80022bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 80022c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	091b      	lsrs	r3, r3, #4
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	3301      	adds	r3, #1
 80022d6:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d105      	bne.n	80022ea <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 80022de:	4a26      	ldr	r2, [pc, #152]	; (8002378 <SystemCoreClockUpdate+0x138>)
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	e00d      	b.n	8002306 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d105      	bne.n	80022fc <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 80022f0:	4a22      	ldr	r2, [pc, #136]	; (800237c <SystemCoreClockUpdate+0x13c>)
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	e004      	b.n	8002306 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	fbb2 f3f3 	udiv	r3, r2, r3
 8002304:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	0a1b      	lsrs	r3, r3, #8
 800230e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	fb02 f303 	mul.w	r3, r2, r3
 8002318:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 800231a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	0f5b      	lsrs	r3, r3, #29
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	3301      	adds	r3, #1
 8002328:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002332:	4a10      	ldr	r2, [pc, #64]	; (8002374 <SystemCoreClockUpdate+0x134>)
 8002334:	6013      	str	r3, [r2, #0]
      break;
 8002336:	e003      	b.n	8002340 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8002338:	4a0e      	ldr	r2, [pc, #56]	; (8002374 <SystemCoreClockUpdate+0x134>)
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	6013      	str	r3, [r2, #0]
      break;
 800233e:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	091b      	lsrs	r3, r3, #4
 8002348:	f003 030f 	and.w	r3, r3, #15
 800234c:	4a0c      	ldr	r2, [pc, #48]	; (8002380 <SystemCoreClockUpdate+0x140>)
 800234e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002352:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8002354:	4b07      	ldr	r3, [pc, #28]	; (8002374 <SystemCoreClockUpdate+0x134>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	fbb2 f3f3 	udiv	r3, r2, r3
 800235e:	4a05      	ldr	r2, [pc, #20]	; (8002374 <SystemCoreClockUpdate+0x134>)
 8002360:	6013      	str	r3, [r2, #0]

}
 8002362:	bf00      	nop
 8002364:	371c      	adds	r7, #28
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	0800f0a8 	.word	0x0800f0a8
 8002374:	2000000c 	.word	0x2000000c
 8002378:	00f42400 	.word	0x00f42400
 800237c:	01e84800 	.word	0x01e84800
 8002380:	0800f048 	.word	0x0800f048

08002384 <LL_AHB2_GRP1_EnableClock>:
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800238c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002390:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002392:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4313      	orrs	r3, r2
 800239a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800239c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4013      	ands	r3, r2
 80023a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023a8:	68fb      	ldr	r3, [r7, #12]
}
 80023aa:	bf00      	nop
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b085      	sub	sp, #20
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80023be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80023ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4013      	ands	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023da:	68fb      	ldr	r3, [r7, #12]
}
 80023dc:	bf00      	nop
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80023ec:	4b22      	ldr	r3, [pc, #136]	; (8002478 <MX_USART1_UART_Init+0x90>)
 80023ee:	4a23      	ldr	r2, [pc, #140]	; (800247c <MX_USART1_UART_Init+0x94>)
 80023f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023f2:	4b21      	ldr	r3, [pc, #132]	; (8002478 <MX_USART1_UART_Init+0x90>)
 80023f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023fa:	4b1f      	ldr	r3, [pc, #124]	; (8002478 <MX_USART1_UART_Init+0x90>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002400:	4b1d      	ldr	r3, [pc, #116]	; (8002478 <MX_USART1_UART_Init+0x90>)
 8002402:	2200      	movs	r2, #0
 8002404:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002406:	4b1c      	ldr	r3, [pc, #112]	; (8002478 <MX_USART1_UART_Init+0x90>)
 8002408:	2200      	movs	r2, #0
 800240a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800240c:	4b1a      	ldr	r3, [pc, #104]	; (8002478 <MX_USART1_UART_Init+0x90>)
 800240e:	220c      	movs	r2, #12
 8002410:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002412:	4b19      	ldr	r3, [pc, #100]	; (8002478 <MX_USART1_UART_Init+0x90>)
 8002414:	2200      	movs	r2, #0
 8002416:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002418:	4b17      	ldr	r3, [pc, #92]	; (8002478 <MX_USART1_UART_Init+0x90>)
 800241a:	2200      	movs	r2, #0
 800241c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800241e:	4b16      	ldr	r3, [pc, #88]	; (8002478 <MX_USART1_UART_Init+0x90>)
 8002420:	2200      	movs	r2, #0
 8002422:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002424:	4b14      	ldr	r3, [pc, #80]	; (8002478 <MX_USART1_UART_Init+0x90>)
 8002426:	2200      	movs	r2, #0
 8002428:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800242a:	4b13      	ldr	r3, [pc, #76]	; (8002478 <MX_USART1_UART_Init+0x90>)
 800242c:	2200      	movs	r2, #0
 800242e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002430:	4811      	ldr	r0, [pc, #68]	; (8002478 <MX_USART1_UART_Init+0x90>)
 8002432:	f004 f96b 	bl	800670c <HAL_UART_Init>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800243c:	f7ff face 	bl	80019dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002440:	2100      	movs	r1, #0
 8002442:	480d      	ldr	r0, [pc, #52]	; (8002478 <MX_USART1_UART_Init+0x90>)
 8002444:	f005 fd6c 	bl	8007f20 <HAL_UARTEx_SetTxFifoThreshold>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800244e:	f7ff fac5 	bl	80019dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002452:	2100      	movs	r1, #0
 8002454:	4808      	ldr	r0, [pc, #32]	; (8002478 <MX_USART1_UART_Init+0x90>)
 8002456:	f005 fdd3 	bl	8008000 <HAL_UARTEx_SetRxFifoThreshold>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002460:	f7ff fabc 	bl	80019dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002464:	4804      	ldr	r0, [pc, #16]	; (8002478 <MX_USART1_UART_Init+0x90>)
 8002466:	f005 fd0f 	bl	8007e88 <HAL_UARTEx_DisableFifoMode>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002470:	f7ff fab4 	bl	80019dc <Error_Handler>
  }

}
 8002474:	bf00      	nop
 8002476:	bd80      	pop	{r7, pc}
 8002478:	20000720 	.word	0x20000720
 800247c:	40013800 	.word	0x40013800

08002480 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002488:	f107 030c 	add.w	r3, r7, #12
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a0e      	ldr	r2, [pc, #56]	; (80024d8 <HAL_UART_MspInit+0x58>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d116      	bne.n	80024d0 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024a2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80024a6:	f7ff ff86 	bl	80023b6 <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024aa:	2002      	movs	r0, #2
 80024ac:	f7ff ff6a 	bl	8002384 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80024b0:	23c0      	movs	r3, #192	; 0xc0
 80024b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b4:	2302      	movs	r3, #2
 80024b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024bc:	2300      	movs	r3, #0
 80024be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024c0:	2307      	movs	r3, #7
 80024c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024c4:	f107 030c 	add.w	r3, r7, #12
 80024c8:	4619      	mov	r1, r3
 80024ca:	4804      	ldr	r0, [pc, #16]	; (80024dc <HAL_UART_MspInit+0x5c>)
 80024cc:	f000 face 	bl	8002a6c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80024d0:	bf00      	nop
 80024d2:	3720      	adds	r7, #32
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40013800 	.word	0x40013800
 80024dc:	48000400 	.word	0x48000400

080024e0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80024e0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024e2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024e4:	3304      	adds	r3, #4

080024e6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024e6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024e8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80024ea:	d3f9      	bcc.n	80024e0 <CopyDataInit>
  bx lr
 80024ec:	4770      	bx	lr

080024ee <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80024ee:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80024f0:	3004      	adds	r0, #4

080024f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80024f2:	4288      	cmp	r0, r1
  bcc FillZerobss
 80024f4:	d3fb      	bcc.n	80024ee <FillZerobss>
  bx lr
 80024f6:	4770      	bx	lr

080024f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024f8:	480c      	ldr	r0, [pc, #48]	; (800252c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80024fa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80024fc:	480c      	ldr	r0, [pc, #48]	; (8002530 <LoopForever+0x8>)
 80024fe:	490d      	ldr	r1, [pc, #52]	; (8002534 <LoopForever+0xc>)
 8002500:	4a0d      	ldr	r2, [pc, #52]	; (8002538 <LoopForever+0x10>)
 8002502:	2300      	movs	r3, #0
 8002504:	f7ff ffef 	bl	80024e6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002508:	480c      	ldr	r0, [pc, #48]	; (800253c <LoopForever+0x14>)
 800250a:	490d      	ldr	r1, [pc, #52]	; (8002540 <LoopForever+0x18>)
 800250c:	2300      	movs	r3, #0
 800250e:	f7ff fff0 	bl	80024f2 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002512:	480c      	ldr	r0, [pc, #48]	; (8002544 <LoopForever+0x1c>)
 8002514:	490c      	ldr	r1, [pc, #48]	; (8002548 <LoopForever+0x20>)
 8002516:	2300      	movs	r3, #0
 8002518:	f7ff ffeb 	bl	80024f2 <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800251c:	f7ff fe3a 	bl	8002194 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002520:	f00b ffe2 	bl	800e4e8 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002524:	f7ff f82e 	bl	8001584 <main>

08002528 <LoopForever>:

LoopForever:
  b LoopForever
 8002528:	e7fe      	b.n	8002528 <LoopForever>
 800252a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800252c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002530:	20000004 	.word	0x20000004
 8002534:	200001f0 	.word	0x200001f0
 8002538:	0800f1b4 	.word	0x0800f1b4
  INIT_BSS _sbss, _ebss
 800253c:	20000380 	.word	0x20000380
 8002540:	20000f24 	.word	0x20000f24
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002544:	200301c4 	.word	0x200301c4
 8002548:	20030a44 	.word	0x20030a44

0800254c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800254c:	e7fe      	b.n	800254c <ADC1_IRQHandler>
	...

08002550 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002556:	2300      	movs	r3, #0
 8002558:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800255a:	4b0c      	ldr	r3, [pc, #48]	; (800258c <HAL_Init+0x3c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a0b      	ldr	r2, [pc, #44]	; (800258c <HAL_Init+0x3c>)
 8002560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002564:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002566:	2003      	movs	r0, #3
 8002568:	f000 f9c6 	bl	80028f8 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800256c:	2000      	movs	r0, #0
 800256e:	f000 f80f 	bl	8002590 <HAL_InitTick>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	71fb      	strb	r3, [r7, #7]
 800257c:	e001      	b.n	8002582 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800257e:	f7ff fd5e 	bl	800203e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002582:	79fb      	ldrb	r3, [r7, #7]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	58004000 	.word	0x58004000

08002590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002598:	2300      	movs	r3, #0
 800259a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800259c:	4b17      	ldr	r3, [pc, #92]	; (80025fc <HAL_InitTick+0x6c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d023      	beq.n	80025ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 80025a4:	f002 ff92 	bl	80054cc <HAL_RCC_GetHCLKFreq>
 80025a8:	4601      	mov	r1, r0
 80025aa:	4b14      	ldr	r3, [pc, #80]	; (80025fc <HAL_InitTick+0x6c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 fa16 	bl	80029ec <HAL_SYSTICK_Config>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10f      	bne.n	80025e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b0f      	cmp	r3, #15
 80025ca:	d809      	bhi.n	80025e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025cc:	2200      	movs	r2, #0
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025d4:	f000 f9b0 	bl	8002938 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025d8:	4a09      	ldr	r2, [pc, #36]	; (8002600 <HAL_InitTick+0x70>)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	e007      	b.n	80025f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
 80025e4:	e004      	b.n	80025f0 <HAL_InitTick+0x60>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	73fb      	strb	r3, [r7, #15]
 80025ea:	e001      	b.n	80025f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000014 	.word	0x20000014
 8002600:	20000010 	.word	0x20000010

08002604 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002608:	4b05      	ldr	r3, [pc, #20]	; (8002620 <HAL_IncTick+0x1c>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4b05      	ldr	r3, [pc, #20]	; (8002624 <HAL_IncTick+0x20>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4413      	add	r3, r2
 8002612:	4a03      	ldr	r2, [pc, #12]	; (8002620 <HAL_IncTick+0x1c>)
 8002614:	6013      	str	r3, [r2, #0]
}
 8002616:	bf00      	nop
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	200007ac 	.word	0x200007ac
 8002624:	20000014 	.word	0x20000014

08002628 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  return uwTick;
 800262c:	4b03      	ldr	r3, [pc, #12]	; (800263c <HAL_GetTick+0x14>)
 800262e:	681b      	ldr	r3, [r3, #0]
}
 8002630:	4618      	mov	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	200007ac 	.word	0x200007ac

08002640 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002644:	4b03      	ldr	r3, [pc, #12]	; (8002654 <HAL_GetTickPrio+0x14>)
 8002646:	681b      	ldr	r3, [r3, #0]
}
 8002648:	4618      	mov	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	20000010 	.word	0x20000010

08002658 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8002660:	f7ff ffe2 	bl	8002628 <HAL_GetTick>
 8002664:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002670:	d004      	beq.n	800267c <HAL_Delay+0x24>
    {
      wait += (uint32_t)(uwTickFreq);
 8002672:	4b09      	ldr	r3, [pc, #36]	; (8002698 <HAL_Delay+0x40>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	4413      	add	r3, r2
 800267a:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 800267c:	bf00      	nop
 800267e:	f7ff ffd3 	bl	8002628 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	429a      	cmp	r2, r3
 800268c:	d8f7      	bhi.n	800267e <HAL_Delay+0x26>
    {
    }
  }
 800268e:	bf00      	nop
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20000014 	.word	0x20000014

0800269c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026ac:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <__NVIC_SetPriorityGrouping+0x44>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026b8:	4013      	ands	r3, r2
 80026ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ce:	4a04      	ldr	r2, [pc, #16]	; (80026e0 <__NVIC_SetPriorityGrouping+0x44>)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	60d3      	str	r3, [r2, #12]
}
 80026d4:	bf00      	nop
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026e8:	4b04      	ldr	r3, [pc, #16]	; (80026fc <__NVIC_GetPriorityGrouping+0x18>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	0a1b      	lsrs	r3, r3, #8
 80026ee:	f003 0307 	and.w	r3, r3, #7
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	e000ed00 	.word	0xe000ed00

08002700 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800270a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270e:	2b00      	cmp	r3, #0
 8002710:	db0b      	blt.n	800272a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002712:	79fb      	ldrb	r3, [r7, #7]
 8002714:	f003 021f 	and.w	r2, r3, #31
 8002718:	4907      	ldr	r1, [pc, #28]	; (8002738 <__NVIC_EnableIRQ+0x38>)
 800271a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271e:	095b      	lsrs	r3, r3, #5
 8002720:	2001      	movs	r0, #1
 8002722:	fa00 f202 	lsl.w	r2, r0, r2
 8002726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	e000e100 	.word	0xe000e100

0800273c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274a:	2b00      	cmp	r3, #0
 800274c:	db10      	blt.n	8002770 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800274e:	79fb      	ldrb	r3, [r7, #7]
 8002750:	f003 021f 	and.w	r2, r3, #31
 8002754:	4909      	ldr	r1, [pc, #36]	; (800277c <__NVIC_DisableIRQ+0x40>)
 8002756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275a:	095b      	lsrs	r3, r3, #5
 800275c:	2001      	movs	r0, #1
 800275e:	fa00 f202 	lsl.w	r2, r0, r2
 8002762:	3320      	adds	r3, #32
 8002764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002768:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800276c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	e000e100 	.word	0xe000e100

08002780 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	2b00      	cmp	r3, #0
 8002790:	db0c      	blt.n	80027ac <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	f003 021f 	and.w	r2, r3, #31
 8002798:	4907      	ldr	r1, [pc, #28]	; (80027b8 <__NVIC_SetPendingIRQ+0x38>)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	095b      	lsrs	r3, r3, #5
 80027a0:	2001      	movs	r0, #1
 80027a2:	fa00 f202 	lsl.w	r2, r0, r2
 80027a6:	3340      	adds	r3, #64	; 0x40
 80027a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	e000e100 	.word	0xe000e100

080027bc <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	db0c      	blt.n	80027e8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	f003 021f 	and.w	r2, r3, #31
 80027d4:	4907      	ldr	r1, [pc, #28]	; (80027f4 <__NVIC_ClearPendingIRQ+0x38>)
 80027d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027da:	095b      	lsrs	r3, r3, #5
 80027dc:	2001      	movs	r0, #1
 80027de:	fa00 f202 	lsl.w	r2, r0, r2
 80027e2:	3360      	adds	r3, #96	; 0x60
 80027e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	e000e100 	.word	0xe000e100

080027f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	6039      	str	r1, [r7, #0]
 8002802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002808:	2b00      	cmp	r3, #0
 800280a:	db0a      	blt.n	8002822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	b2da      	uxtb	r2, r3
 8002810:	490c      	ldr	r1, [pc, #48]	; (8002844 <__NVIC_SetPriority+0x4c>)
 8002812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002816:	0112      	lsls	r2, r2, #4
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	440b      	add	r3, r1
 800281c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002820:	e00a      	b.n	8002838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	b2da      	uxtb	r2, r3
 8002826:	4908      	ldr	r1, [pc, #32]	; (8002848 <__NVIC_SetPriority+0x50>)
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	3b04      	subs	r3, #4
 8002830:	0112      	lsls	r2, r2, #4
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	440b      	add	r3, r1
 8002836:	761a      	strb	r2, [r3, #24]
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	e000e100 	.word	0xe000e100
 8002848:	e000ed00 	.word	0xe000ed00

0800284c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800284c:	b480      	push	{r7}
 800284e:	b089      	sub	sp, #36	; 0x24
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f1c3 0307 	rsb	r3, r3, #7
 8002866:	2b04      	cmp	r3, #4
 8002868:	bf28      	it	cs
 800286a:	2304      	movcs	r3, #4
 800286c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	3304      	adds	r3, #4
 8002872:	2b06      	cmp	r3, #6
 8002874:	d902      	bls.n	800287c <NVIC_EncodePriority+0x30>
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	3b03      	subs	r3, #3
 800287a:	e000      	b.n	800287e <NVIC_EncodePriority+0x32>
 800287c:	2300      	movs	r3, #0
 800287e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002880:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43da      	mvns	r2, r3
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	401a      	ands	r2, r3
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002894:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	fa01 f303 	lsl.w	r3, r1, r3
 800289e:	43d9      	mvns	r1, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a4:	4313      	orrs	r3, r2
         );
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3724      	adds	r7, #36	; 0x24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
	...

080028b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3b01      	subs	r3, #1
 80028c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028c4:	d301      	bcc.n	80028ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028c6:	2301      	movs	r3, #1
 80028c8:	e00f      	b.n	80028ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ca:	4a0a      	ldr	r2, [pc, #40]	; (80028f4 <SysTick_Config+0x40>)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028d2:	210f      	movs	r1, #15
 80028d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028d8:	f7ff ff8e 	bl	80027f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028dc:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <SysTick_Config+0x40>)
 80028de:	2200      	movs	r2, #0
 80028e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028e2:	4b04      	ldr	r3, [pc, #16]	; (80028f4 <SysTick_Config+0x40>)
 80028e4:	2207      	movs	r2, #7
 80028e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	e000e010 	.word	0xe000e010

080028f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b07      	cmp	r3, #7
 8002904:	d00f      	beq.n	8002926 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b06      	cmp	r3, #6
 800290a:	d00c      	beq.n	8002926 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b05      	cmp	r3, #5
 8002910:	d009      	beq.n	8002926 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b04      	cmp	r3, #4
 8002916:	d006      	beq.n	8002926 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b03      	cmp	r3, #3
 800291c:	d003      	beq.n	8002926 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800291e:	218d      	movs	r1, #141	; 0x8d
 8002920:	4804      	ldr	r0, [pc, #16]	; (8002934 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002922:	f7ff f867 	bl	80019f4 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7ff feb8 	bl	800269c <__NVIC_SetPriorityGrouping>
}
 800292c:	bf00      	nop
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	0800ed90 	.word	0x0800ed90

08002938 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
 8002944:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b0f      	cmp	r3, #15
 800294a:	d903      	bls.n	8002954 <HAL_NVIC_SetPriority+0x1c>
 800294c:	21a5      	movs	r1, #165	; 0xa5
 800294e:	480e      	ldr	r0, [pc, #56]	; (8002988 <HAL_NVIC_SetPriority+0x50>)
 8002950:	f7ff f850 	bl	80019f4 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	2b0f      	cmp	r3, #15
 8002958:	d903      	bls.n	8002962 <HAL_NVIC_SetPriority+0x2a>
 800295a:	21a6      	movs	r1, #166	; 0xa6
 800295c:	480a      	ldr	r0, [pc, #40]	; (8002988 <HAL_NVIC_SetPriority+0x50>)
 800295e:	f7ff f849 	bl	80019f4 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8002962:	f7ff febf 	bl	80026e4 <__NVIC_GetPriorityGrouping>
 8002966:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	68b9      	ldr	r1, [r7, #8]
 800296c:	6978      	ldr	r0, [r7, #20]
 800296e:	f7ff ff6d 	bl	800284c <NVIC_EncodePriority>
 8002972:	4602      	mov	r2, r0
 8002974:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002978:	4611      	mov	r1, r2
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff ff3c 	bl	80027f8 <__NVIC_SetPriority>
}
 8002980:	bf00      	nop
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	0800ed90 	.word	0x0800ed90

0800298c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299a:	2b00      	cmp	r3, #0
 800299c:	da03      	bge.n	80029a6 <HAL_NVIC_EnableIRQ+0x1a>
 800299e:	21b7      	movs	r1, #183	; 0xb7
 80029a0:	4805      	ldr	r0, [pc, #20]	; (80029b8 <HAL_NVIC_EnableIRQ+0x2c>)
 80029a2:	f7ff f827 	bl	80019f4 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff fea8 	bl	8002700 <__NVIC_EnableIRQ>
}
 80029b0:	bf00      	nop
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	0800ed90 	.word	0x0800ed90

080029bc <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80029c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	da03      	bge.n	80029d6 <HAL_NVIC_DisableIRQ+0x1a>
 80029ce:	21c7      	movs	r1, #199	; 0xc7
 80029d0:	4805      	ldr	r0, [pc, #20]	; (80029e8 <HAL_NVIC_DisableIRQ+0x2c>)
 80029d2:	f7ff f80f 	bl	80019f4 <assert_failed>
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80029d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff feae 	bl	800273c <__NVIC_DisableIRQ>
}
 80029e0:	bf00      	nop
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	0800ed90 	.word	0x0800ed90

080029ec <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff ff5d 	bl	80028b4 <SysTick_Config>
 80029fa:	4603      	mov	r3, r0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	da04      	bge.n	8002a20 <HAL_NVIC_SetPendingIRQ+0x1c>
 8002a16:	f44f 7194 	mov.w	r1, #296	; 0x128
 8002a1a:	4806      	ldr	r0, [pc, #24]	; (8002a34 <HAL_NVIC_SetPendingIRQ+0x30>)
 8002a1c:	f7fe ffea 	bl	80019f4 <assert_failed>
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff feab 	bl	8002780 <__NVIC_SetPendingIRQ>
}
 8002a2a:	bf00      	nop
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	0800ed90 	.word	0x0800ed90

08002a38 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4603      	mov	r3, r0
 8002a40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	da04      	bge.n	8002a54 <HAL_NVIC_ClearPendingIRQ+0x1c>
 8002a4a:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8002a4e:	4806      	ldr	r0, [pc, #24]	; (8002a68 <HAL_NVIC_ClearPendingIRQ+0x30>)
 8002a50:	f7fe ffd0 	bl	80019f4 <assert_failed>
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff feaf 	bl	80027bc <__NVIC_ClearPendingIRQ>
}
 8002a5e:	bf00      	nop
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	0800ed90 	.word	0x0800ed90

08002a6c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a80:	d017      	beq.n	8002ab2 <HAL_GPIO_Init+0x46>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a39      	ldr	r2, [pc, #228]	; (8002b6c <HAL_GPIO_Init+0x100>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d013      	beq.n	8002ab2 <HAL_GPIO_Init+0x46>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a38      	ldr	r2, [pc, #224]	; (8002b70 <HAL_GPIO_Init+0x104>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d00f      	beq.n	8002ab2 <HAL_GPIO_Init+0x46>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a37      	ldr	r2, [pc, #220]	; (8002b74 <HAL_GPIO_Init+0x108>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d00b      	beq.n	8002ab2 <HAL_GPIO_Init+0x46>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a36      	ldr	r2, [pc, #216]	; (8002b78 <HAL_GPIO_Init+0x10c>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d007      	beq.n	8002ab2 <HAL_GPIO_Init+0x46>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a35      	ldr	r2, [pc, #212]	; (8002b7c <HAL_GPIO_Init+0x110>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d003      	beq.n	8002ab2 <HAL_GPIO_Init+0x46>
 8002aaa:	21b1      	movs	r1, #177	; 0xb1
 8002aac:	4834      	ldr	r0, [pc, #208]	; (8002b80 <HAL_GPIO_Init+0x114>)
 8002aae:	f7fe ffa1 	bl	80019f4 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <HAL_GPIO_Init+0x5c>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	0c1b      	lsrs	r3, r3, #16
 8002ac2:	041b      	lsls	r3, r3, #16
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_GPIO_Init+0x64>
 8002ac8:	21b2      	movs	r1, #178	; 0xb2
 8002aca:	482d      	ldr	r0, [pc, #180]	; (8002b80 <HAL_GPIO_Init+0x114>)
 8002acc:	f7fe ff92 	bl	80019f4 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d035      	beq.n	8002b44 <HAL_GPIO_Init+0xd8>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d031      	beq.n	8002b44 <HAL_GPIO_Init+0xd8>
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b11      	cmp	r3, #17
 8002ae6:	d02d      	beq.n	8002b44 <HAL_GPIO_Init+0xd8>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d029      	beq.n	8002b44 <HAL_GPIO_Init+0xd8>
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	2b12      	cmp	r3, #18
 8002af6:	d025      	beq.n	8002b44 <HAL_GPIO_Init+0xd8>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	4a21      	ldr	r2, [pc, #132]	; (8002b84 <HAL_GPIO_Init+0x118>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d020      	beq.n	8002b44 <HAL_GPIO_Init+0xd8>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	4a20      	ldr	r2, [pc, #128]	; (8002b88 <HAL_GPIO_Init+0x11c>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d01b      	beq.n	8002b44 <HAL_GPIO_Init+0xd8>
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	4a1e      	ldr	r2, [pc, #120]	; (8002b8c <HAL_GPIO_Init+0x120>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d016      	beq.n	8002b44 <HAL_GPIO_Init+0xd8>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	4a1d      	ldr	r2, [pc, #116]	; (8002b90 <HAL_GPIO_Init+0x124>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d011      	beq.n	8002b44 <HAL_GPIO_Init+0xd8>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	4a1b      	ldr	r2, [pc, #108]	; (8002b94 <HAL_GPIO_Init+0x128>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d00c      	beq.n	8002b44 <HAL_GPIO_Init+0xd8>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	4a1a      	ldr	r2, [pc, #104]	; (8002b98 <HAL_GPIO_Init+0x12c>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d007      	beq.n	8002b44 <HAL_GPIO_Init+0xd8>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b03      	cmp	r3, #3
 8002b3a:	d003      	beq.n	8002b44 <HAL_GPIO_Init+0xd8>
 8002b3c:	21b3      	movs	r1, #179	; 0xb3
 8002b3e:	4810      	ldr	r0, [pc, #64]	; (8002b80 <HAL_GPIO_Init+0x114>)
 8002b40:	f7fe ff58 	bl	80019f4 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 81ba 	beq.w	8002ec2 <HAL_GPIO_Init+0x456>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	f000 81b5 	beq.w	8002ec2 <HAL_GPIO_Init+0x456>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	f000 81b0 	beq.w	8002ec2 <HAL_GPIO_Init+0x456>
 8002b62:	21b4      	movs	r1, #180	; 0xb4
 8002b64:	4806      	ldr	r0, [pc, #24]	; (8002b80 <HAL_GPIO_Init+0x114>)
 8002b66:	f7fe ff45 	bl	80019f4 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b6a:	e1aa      	b.n	8002ec2 <HAL_GPIO_Init+0x456>
 8002b6c:	48000400 	.word	0x48000400
 8002b70:	48000800 	.word	0x48000800
 8002b74:	48000c00 	.word	0x48000c00
 8002b78:	48001000 	.word	0x48001000
 8002b7c:	48001c00 	.word	0x48001c00
 8002b80:	0800edcc 	.word	0x0800edcc
 8002b84:	10110000 	.word	0x10110000
 8002b88:	10210000 	.word	0x10210000
 8002b8c:	10310000 	.word	0x10310000
 8002b90:	10120000 	.word	0x10120000
 8002b94:	10220000 	.word	0x10220000
 8002b98:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba8:	4013      	ands	r3, r2
 8002baa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 8184 	beq.w	8002ebc <HAL_GPIO_Init+0x450>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d003      	beq.n	8002bc4 <HAL_GPIO_Init+0x158>
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	2b12      	cmp	r3, #18
 8002bc2:	d147      	bne.n	8002c54 <HAL_GPIO_Init+0x1e8>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002bca:	d017      	beq.n	8002bfc <HAL_GPIO_Init+0x190>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a80      	ldr	r2, [pc, #512]	; (8002dd0 <HAL_GPIO_Init+0x364>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d013      	beq.n	8002bfc <HAL_GPIO_Init+0x190>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a7f      	ldr	r2, [pc, #508]	; (8002dd4 <HAL_GPIO_Init+0x368>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d00f      	beq.n	8002bfc <HAL_GPIO_Init+0x190>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a7e      	ldr	r2, [pc, #504]	; (8002dd8 <HAL_GPIO_Init+0x36c>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d00b      	beq.n	8002bfc <HAL_GPIO_Init+0x190>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a7d      	ldr	r2, [pc, #500]	; (8002ddc <HAL_GPIO_Init+0x370>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d007      	beq.n	8002bfc <HAL_GPIO_Init+0x190>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a7c      	ldr	r2, [pc, #496]	; (8002de0 <HAL_GPIO_Init+0x374>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d003      	beq.n	8002bfc <HAL_GPIO_Init+0x190>
 8002bf4:	21c3      	movs	r1, #195	; 0xc3
 8002bf6:	487b      	ldr	r0, [pc, #492]	; (8002de4 <HAL_GPIO_Init+0x378>)
 8002bf8:	f7fe fefc 	bl	80019f4 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	2b0f      	cmp	r3, #15
 8002c02:	d903      	bls.n	8002c0c <HAL_GPIO_Init+0x1a0>
 8002c04:	21c4      	movs	r1, #196	; 0xc4
 8002c06:	4877      	ldr	r0, [pc, #476]	; (8002de4 <HAL_GPIO_Init+0x378>)
 8002c08:	f7fe fef4 	bl	80019f4 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	08da      	lsrs	r2, r3, #3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3208      	adds	r2, #8
 8002c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c18:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	220f      	movs	r2, #15
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	691a      	ldr	r2, [r3, #16]
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	08da      	lsrs	r2, r3, #3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3208      	adds	r2, #8
 8002c4e:	6939      	ldr	r1, [r7, #16]
 8002c50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	2203      	movs	r2, #3
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	43db      	mvns	r3, r3
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f003 0203 	and.w	r2, r3, #3
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d00b      	beq.n	8002ca8 <HAL_GPIO_Init+0x23c>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d007      	beq.n	8002ca8 <HAL_GPIO_Init+0x23c>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c9c:	2b11      	cmp	r3, #17
 8002c9e:	d003      	beq.n	8002ca8 <HAL_GPIO_Init+0x23c>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2b12      	cmp	r3, #18
 8002ca6:	d144      	bne.n	8002d32 <HAL_GPIO_Init+0x2c6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00f      	beq.n	8002cd0 <HAL_GPIO_Init+0x264>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d00b      	beq.n	8002cd0 <HAL_GPIO_Init+0x264>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d007      	beq.n	8002cd0 <HAL_GPIO_Init+0x264>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	2b03      	cmp	r3, #3
 8002cc6:	d003      	beq.n	8002cd0 <HAL_GPIO_Init+0x264>
 8002cc8:	21d8      	movs	r1, #216	; 0xd8
 8002cca:	4846      	ldr	r0, [pc, #280]	; (8002de4 <HAL_GPIO_Init+0x378>)
 8002ccc:	f7fe fe92 	bl	80019f4 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	2203      	movs	r2, #3
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	68da      	ldr	r2, [r3, #12]
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d06:	2201      	movs	r2, #1
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	4013      	ands	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	091b      	lsrs	r3, r3, #4
 8002d1c:	f003 0201 	and.w	r2, r3, #1
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	43db      	mvns	r3, r3
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	4013      	ands	r3, r2
 8002d48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	689a      	ldr	r2, [r3, #8]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 80a6 	beq.w	8002ebc <HAL_GPIO_Init+0x450>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002d70:	4a1d      	ldr	r2, [pc, #116]	; (8002de8 <HAL_GPIO_Init+0x37c>)
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	089b      	lsrs	r3, r3, #2
 8002d76:	3302      	adds	r3, #2
 8002d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f003 0303 	and.w	r3, r3, #3
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	220f      	movs	r2, #15
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	4013      	ands	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d9a:	d027      	beq.n	8002dec <HAL_GPIO_Init+0x380>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a0c      	ldr	r2, [pc, #48]	; (8002dd0 <HAL_GPIO_Init+0x364>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d013      	beq.n	8002dcc <HAL_GPIO_Init+0x360>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a0b      	ldr	r2, [pc, #44]	; (8002dd4 <HAL_GPIO_Init+0x368>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d00d      	beq.n	8002dc8 <HAL_GPIO_Init+0x35c>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a0a      	ldr	r2, [pc, #40]	; (8002dd8 <HAL_GPIO_Init+0x36c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d007      	beq.n	8002dc4 <HAL_GPIO_Init+0x358>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a09      	ldr	r2, [pc, #36]	; (8002ddc <HAL_GPIO_Init+0x370>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d101      	bne.n	8002dc0 <HAL_GPIO_Init+0x354>
 8002dbc:	2304      	movs	r3, #4
 8002dbe:	e016      	b.n	8002dee <HAL_GPIO_Init+0x382>
 8002dc0:	2307      	movs	r3, #7
 8002dc2:	e014      	b.n	8002dee <HAL_GPIO_Init+0x382>
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e012      	b.n	8002dee <HAL_GPIO_Init+0x382>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	e010      	b.n	8002dee <HAL_GPIO_Init+0x382>
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e00e      	b.n	8002dee <HAL_GPIO_Init+0x382>
 8002dd0:	48000400 	.word	0x48000400
 8002dd4:	48000800 	.word	0x48000800
 8002dd8:	48000c00 	.word	0x48000c00
 8002ddc:	48001000 	.word	0x48001000
 8002de0:	48001c00 	.word	0x48001c00
 8002de4:	0800edcc 	.word	0x0800edcc
 8002de8:	40010000 	.word	0x40010000
 8002dec:	2300      	movs	r3, #0
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	f002 0203 	and.w	r2, r2, #3
 8002df4:	0092      	lsls	r2, r2, #2
 8002df6:	4093      	lsls	r3, r2
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002dfe:	4937      	ldr	r1, [pc, #220]	; (8002edc <HAL_GPIO_Init+0x470>)
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	089b      	lsrs	r3, r3, #2
 8002e04:	3302      	adds	r3, #2
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002e0c:	4b34      	ldr	r3, [pc, #208]	; (8002ee0 <HAL_GPIO_Init+0x474>)
 8002e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	43db      	mvns	r3, r3
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_GPIO_Init+0x3c6>
        {
          temp |= iocurrent;
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e32:	4a2b      	ldr	r2, [pc, #172]	; (8002ee0 <HAL_GPIO_Init+0x474>)
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002e3a:	4b29      	ldr	r3, [pc, #164]	; (8002ee0 <HAL_GPIO_Init+0x474>)
 8002e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	43db      	mvns	r3, r3
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d003      	beq.n	8002e60 <HAL_GPIO_Init+0x3f4>
        {
          temp |= iocurrent;
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e60:	4a1f      	ldr	r2, [pc, #124]	; (8002ee0 <HAL_GPIO_Init+0x474>)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e68:	4b1d      	ldr	r3, [pc, #116]	; (8002ee0 <HAL_GPIO_Init+0x474>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	43db      	mvns	r3, r3
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	4013      	ands	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_GPIO_Init+0x420>
        {
          temp |= iocurrent;
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e8c:	4a14      	ldr	r2, [pc, #80]	; (8002ee0 <HAL_GPIO_Init+0x474>)
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002e92:	4b13      	ldr	r3, [pc, #76]	; (8002ee0 <HAL_GPIO_Init+0x474>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_GPIO_Init+0x44a>
        {
          temp |= iocurrent;
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002eb6:	4a0a      	ldr	r2, [pc, #40]	; (8002ee0 <HAL_GPIO_Init+0x474>)
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f47f ae65 	bne.w	8002b9c <HAL_GPIO_Init+0x130>
  }
}
 8002ed2:	bf00      	nop
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40010000 	.word	0x40010000
 8002ee0:	58000800 	.word	0x58000800

08002ee4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	460b      	mov	r3, r1
 8002eee:	807b      	strh	r3, [r7, #2]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002ef4:	887b      	ldrh	r3, [r7, #2]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d004      	beq.n	8002f04 <HAL_GPIO_WritePin+0x20>
 8002efa:	887b      	ldrh	r3, [r7, #2]
 8002efc:	0c1b      	lsrs	r3, r3, #16
 8002efe:	041b      	lsls	r3, r3, #16
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d004      	beq.n	8002f0e <HAL_GPIO_WritePin+0x2a>
 8002f04:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8002f08:	480d      	ldr	r0, [pc, #52]	; (8002f40 <HAL_GPIO_WritePin+0x5c>)
 8002f0a:	f7fe fd73 	bl	80019f4 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002f0e:	787b      	ldrb	r3, [r7, #1]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d007      	beq.n	8002f24 <HAL_GPIO_WritePin+0x40>
 8002f14:	787b      	ldrb	r3, [r7, #1]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d004      	beq.n	8002f24 <HAL_GPIO_WritePin+0x40>
 8002f1a:	f240 119b 	movw	r1, #411	; 0x19b
 8002f1e:	4808      	ldr	r0, [pc, #32]	; (8002f40 <HAL_GPIO_WritePin+0x5c>)
 8002f20:	f7fe fd68 	bl	80019f4 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002f24:	787b      	ldrb	r3, [r7, #1]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f2a:	887a      	ldrh	r2, [r7, #2]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f30:	e002      	b.n	8002f38 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f32:	887a      	ldrh	r2, [r7, #2]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f38:	bf00      	nop
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	0800edcc 	.word	0x0800edcc

08002f44 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002f50:	887b      	ldrh	r3, [r7, #2]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d004      	beq.n	8002f60 <HAL_GPIO_TogglePin+0x1c>
 8002f56:	887b      	ldrh	r3, [r7, #2]
 8002f58:	0c1b      	lsrs	r3, r3, #16
 8002f5a:	041b      	lsls	r3, r3, #16
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d004      	beq.n	8002f6a <HAL_GPIO_TogglePin+0x26>
 8002f60:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8002f64:	4809      	ldr	r0, [pc, #36]	; (8002f8c <HAL_GPIO_TogglePin+0x48>)
 8002f66:	f7fe fd45 	bl	80019f4 <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695a      	ldr	r2, [r3, #20]
 8002f6e:	887b      	ldrh	r3, [r7, #2]
 8002f70:	4013      	ands	r3, r2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_GPIO_TogglePin+0x3a>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f76:	887a      	ldrh	r2, [r7, #2]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002f7c:	e002      	b.n	8002f84 <HAL_GPIO_TogglePin+0x40>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f7e:	887a      	ldrh	r2, [r7, #2]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	619a      	str	r2, [r3, #24]
}
 8002f84:	bf00      	nop
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	0800edcc 	.word	0x0800edcc

08002f90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f9a:	4b08      	ldr	r3, [pc, #32]	; (8002fbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	88fb      	ldrh	r3, [r7, #6]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d006      	beq.n	8002fb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fa6:	4a05      	ldr	r2, [pc, #20]	; (8002fbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fa8:	88fb      	ldrh	r3, [r7, #6]
 8002faa:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fac:	88fb      	ldrh	r3, [r7, #6]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fe fd08 	bl	80019c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002fb4:	bf00      	nop
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	58000800 	.word	0x58000800

08002fc0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fc2:	b08b      	sub	sp, #44	; 0x2c
 8002fc4:	af06      	add	r7, sp, #24
 8002fc6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e0b6      	b.n	8003140 <HAL_PCD_Init+0x180>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a5c      	ldr	r2, [pc, #368]	; (8003148 <HAL_PCD_Init+0x188>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d003      	beq.n	8002fe4 <HAL_PCD_Init+0x24>
 8002fdc:	2183      	movs	r1, #131	; 0x83
 8002fde:	485b      	ldr	r0, [pc, #364]	; (800314c <HAL_PCD_Init+0x18c>)
 8002fe0:	f7fe fd08 	bl	80019f4 <assert_failed>

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d106      	bne.n	8002ffe <HAL_PCD_Init+0x3e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f00a ff75 	bl	800dee8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2203      	movs	r2, #3
 8003002:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f005 f8e8 	bl	80081e0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003010:	2300      	movs	r3, #0
 8003012:	73fb      	strb	r3, [r7, #15]
 8003014:	e035      	b.n	8003082 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003016:	7bfb      	ldrb	r3, [r7, #15]
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	015b      	lsls	r3, r3, #5
 800301c:	4413      	add	r3, r2
 800301e:	3329      	adds	r3, #41	; 0x29
 8003020:	2201      	movs	r2, #1
 8003022:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003024:	7bfb      	ldrb	r3, [r7, #15]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	015b      	lsls	r3, r3, #5
 800302a:	4413      	add	r3, r2
 800302c:	3328      	adds	r3, #40	; 0x28
 800302e:	7bfa      	ldrb	r2, [r7, #15]
 8003030:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003032:	7bfb      	ldrb	r3, [r7, #15]
 8003034:	7bfa      	ldrb	r2, [r7, #15]
 8003036:	b291      	uxth	r1, r2
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	015b      	lsls	r3, r3, #5
 800303c:	4413      	add	r3, r2
 800303e:	3336      	adds	r3, #54	; 0x36
 8003040:	460a      	mov	r2, r1
 8003042:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003044:	7bfb      	ldrb	r3, [r7, #15]
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	015b      	lsls	r3, r3, #5
 800304a:	4413      	add	r3, r2
 800304c:	332b      	adds	r3, #43	; 0x2b
 800304e:	2200      	movs	r2, #0
 8003050:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003052:	7bfb      	ldrb	r3, [r7, #15]
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	015b      	lsls	r3, r3, #5
 8003058:	4413      	add	r3, r2
 800305a:	3338      	adds	r3, #56	; 0x38
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003060:	7bfb      	ldrb	r3, [r7, #15]
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	015b      	lsls	r3, r3, #5
 8003066:	4413      	add	r3, r2
 8003068:	333c      	adds	r3, #60	; 0x3c
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800306e:	7bfb      	ldrb	r3, [r7, #15]
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	3302      	adds	r3, #2
 8003074:	015b      	lsls	r3, r3, #5
 8003076:	4413      	add	r3, r2
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800307c:	7bfb      	ldrb	r3, [r7, #15]
 800307e:	3301      	adds	r3, #1
 8003080:	73fb      	strb	r3, [r7, #15]
 8003082:	7bfa      	ldrb	r2, [r7, #15]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	429a      	cmp	r2, r3
 800308a:	d3c4      	bcc.n	8003016 <HAL_PCD_Init+0x56>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800308c:	2300      	movs	r3, #0
 800308e:	73fb      	strb	r3, [r7, #15]
 8003090:	e031      	b.n	80030f6 <HAL_PCD_Init+0x136>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003092:	7bfb      	ldrb	r3, [r7, #15]
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	015b      	lsls	r3, r3, #5
 8003098:	4413      	add	r3, r2
 800309a:	f203 1329 	addw	r3, r3, #297	; 0x129
 800309e:	2200      	movs	r2, #0
 80030a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	015b      	lsls	r3, r3, #5
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80030ae:	7bfa      	ldrb	r2, [r7, #15]
 80030b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	015b      	lsls	r3, r3, #5
 80030b8:	4413      	add	r3, r2
 80030ba:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80030be:	2200      	movs	r2, #0
 80030c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030c2:	7bfb      	ldrb	r3, [r7, #15]
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	015b      	lsls	r3, r3, #5
 80030c8:	4413      	add	r3, r2
 80030ca:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80030ce:	2200      	movs	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	015b      	lsls	r3, r3, #5
 80030d8:	4413      	add	r3, r2
 80030da:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030e2:	7bfb      	ldrb	r3, [r7, #15]
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	330a      	adds	r3, #10
 80030e8:	015b      	lsls	r3, r3, #5
 80030ea:	4413      	add	r3, r2
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
 80030f2:	3301      	adds	r3, #1
 80030f4:	73fb      	strb	r3, [r7, #15]
 80030f6:	7bfa      	ldrb	r2, [r7, #15]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d3c8      	bcc.n	8003092 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	603b      	str	r3, [r7, #0]
 8003106:	687e      	ldr	r6, [r7, #4]
 8003108:	466d      	mov	r5, sp
 800310a:	f106 0410 	add.w	r4, r6, #16
 800310e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003110:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003112:	6823      	ldr	r3, [r4, #0]
 8003114:	602b      	str	r3, [r5, #0]
 8003116:	1d33      	adds	r3, r6, #4
 8003118:	cb0e      	ldmia	r3, {r1, r2, r3}
 800311a:	6838      	ldr	r0, [r7, #0]
 800311c:	f005 f87d 	bl	800821a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d102      	bne.n	800313e <HAL_PCD_Init+0x17e>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 fe40 	bl	8003dbe <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003148:	40006800 	.word	0x40006800
 800314c:	0800ee08 	.word	0x0800ee08

08003150 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800315e:	2b01      	cmp	r3, #1
 8003160:	d101      	bne.n	8003166 <HAL_PCD_Start+0x16>
 8003162:	2302      	movs	r3, #2
 8003164:	e012      	b.n	800318c <HAL_PCD_Start+0x3c>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f006 f88c 	bl	8009290 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f005 f817 	bl	80081b0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f006 f88c 	bl	80092be <USB_ReadInterrupts>
 80031a6:	4603      	mov	r3, r0
 80031a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031b0:	d102      	bne.n	80031b8 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 fb3e 	bl	8003834 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4618      	mov	r0, r3
 80031be:	f006 f87e 	bl	80092be <USB_ReadInterrupts>
 80031c2:	4603      	mov	r3, r0
 80031c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031cc:	d112      	bne.n	80031f4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e0:	b292      	uxth	r2, r2
 80031e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f00a ff05 	bl	800dff6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80031ec:	2100      	movs	r1, #0
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f929 	bl	8003446 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f006 f860 	bl	80092be <USB_ReadInterrupts>
 80031fe:	4603      	mov	r3, r0
 8003200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003204:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003208:	d10b      	bne.n	8003222 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003212:	b29a      	uxth	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800321c:	b292      	uxth	r2, r2
 800321e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f006 f849 	bl	80092be <USB_ReadInterrupts>
 800322c:	4603      	mov	r3, r0
 800322e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003236:	d10b      	bne.n	8003250 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003240:	b29a      	uxth	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800324a:	b292      	uxth	r2, r2
 800324c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f006 f832 	bl	80092be <USB_ReadInterrupts>
 800325a:	4603      	mov	r3, r0
 800325c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003264:	d133      	bne.n	80032ce <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800326e:	b29a      	uxth	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0204 	bic.w	r2, r2, #4
 8003278:	b292      	uxth	r2, r2
 800327a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003286:	b29a      	uxth	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0208 	bic.w	r2, r2, #8
 8003290:	b292      	uxth	r2, r2
 8003292:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800329c:	2b01      	cmp	r3, #1
 800329e:	d107      	bne.n	80032b0 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80032a8:	2100      	movs	r1, #0
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f00b f896 	bl	800e3dc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f00a fed9 	bl	800e068 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032be:	b29a      	uxth	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032c8:	b292      	uxth	r2, r2
 80032ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f005 fff3 	bl	80092be <USB_ReadInterrupts>
 80032d8:	4603      	mov	r3, r0
 80032da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032e2:	d131      	bne.n	8003348 <HAL_PCD_IRQHandler+0x1b4>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 0208 	orr.w	r2, r2, #8
 80032f6:	b292      	uxth	r2, r2
 80032f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003304:	b29a      	uxth	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800330e:	b292      	uxth	r2, r2
 8003310:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800331c:	b29a      	uxth	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0204 	orr.w	r2, r2, #4
 8003326:	b292      	uxth	r2, r2
 8003328:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f005 ffc4 	bl	80092be <USB_ReadInterrupts>
 8003336:	4603      	mov	r3, r0
 8003338:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800333c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003340:	d002      	beq.n	8003348 <HAL_PCD_IRQHandler+0x1b4>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f00a fe76 	bl	800e034 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f005 ffb6 	bl	80092be <USB_ReadInterrupts>
 8003352:	4603      	mov	r3, r0
 8003354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003358:	2b80      	cmp	r3, #128	; 0x80
 800335a:	d13f      	bne.n	80033dc <HAL_PCD_IRQHandler+0x248>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003364:	b29a      	uxth	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800336e:	b292      	uxth	r2, r2
 8003370:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800337a:	2b00      	cmp	r3, #0
 800337c:	d12b      	bne.n	80033d6 <HAL_PCD_IRQHandler+0x242>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003386:	b29a      	uxth	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f042 0204 	orr.w	r2, r2, #4
 8003390:	b292      	uxth	r2, r2
 8003392:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800339e:	b29a      	uxth	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f042 0208 	orr.w	r2, r2, #8
 80033a8:	b292      	uxth	r2, r2
 80033aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80033be:	b29b      	uxth	r3, r3
 80033c0:	089b      	lsrs	r3, r3, #2
 80033c2:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80033cc:	2101      	movs	r1, #1
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f00b f804 	bl	800e3dc <HAL_PCDEx_LPM_Callback>
 80033d4:	e002      	b.n	80033dc <HAL_PCD_IRQHandler+0x248>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f00a fe2c 	bl	800e034 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f005 ff6c 	bl	80092be <USB_ReadInterrupts>
 80033e6:	4603      	mov	r3, r0
 80033e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033f0:	d10e      	bne.n	8003410 <HAL_PCD_IRQHandler+0x27c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003404:	b292      	uxth	r2, r2
 8003406:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f00a fde5 	bl	800dfda <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f005 ff52 	bl	80092be <USB_ReadInterrupts>
 800341a:	4603      	mov	r3, r0
 800341c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003420:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003424:	d10b      	bne.n	800343e <HAL_PCD_IRQHandler+0x2aa>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800342e:	b29a      	uxth	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003438:	b292      	uxth	r2, r2
 800343a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800343e:	bf00      	nop
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b082      	sub	sp, #8
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	460b      	mov	r3, r1
 8003450:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <HAL_PCD_SetAddress+0x1a>
 800345c:	2302      	movs	r3, #2
 800345e:	e013      	b.n	8003488 <HAL_PCD_SetAddress+0x42>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	78fa      	ldrb	r2, [r7, #3]
 800346c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	78fa      	ldrb	r2, [r7, #3]
 8003476:	4611      	mov	r1, r2
 8003478:	4618      	mov	r0, r3
 800347a:	f005 fef5 	bl	8009268 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	4608      	mov	r0, r1
 800349a:	4611      	mov	r1, r2
 800349c:	461a      	mov	r2, r3
 800349e:	4603      	mov	r3, r0
 80034a0:	70fb      	strb	r3, [r7, #3]
 80034a2:	460b      	mov	r3, r1
 80034a4:	803b      	strh	r3, [r7, #0]
 80034a6:	4613      	mov	r3, r2
 80034a8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80034aa:	2300      	movs	r3, #0
 80034ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	da0b      	bge.n	80034ce <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034b6:	78fb      	ldrb	r3, [r7, #3]
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	015b      	lsls	r3, r3, #5
 80034be:	3328      	adds	r3, #40	; 0x28
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	4413      	add	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2201      	movs	r2, #1
 80034ca:	705a      	strb	r2, [r3, #1]
 80034cc:	e00b      	b.n	80034e6 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034ce:	78fb      	ldrb	r3, [r7, #3]
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	015b      	lsls	r3, r3, #5
 80034d6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	4413      	add	r3, r2
 80034de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80034e6:	78fb      	ldrb	r3, [r7, #3]
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80034f2:	883a      	ldrh	r2, [r7, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	78ba      	ldrb	r2, [r7, #2]
 80034fc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	785b      	ldrb	r3, [r3, #1]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d004      	beq.n	8003510 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	b29a      	uxth	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003510:	78bb      	ldrb	r3, [r7, #2]
 8003512:	2b02      	cmp	r3, #2
 8003514:	d102      	bne.n	800351c <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003522:	2b01      	cmp	r3, #1
 8003524:	d101      	bne.n	800352a <HAL_PCD_EP_Open+0x9a>
 8003526:	2302      	movs	r3, #2
 8003528:	e00e      	b.n	8003548 <HAL_PCD_EP_Open+0xb8>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68f9      	ldr	r1, [r7, #12]
 8003538:	4618      	mov	r0, r3
 800353a:	f004 fe93 	bl	8008264 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8003546:	7afb      	ldrb	r3, [r7, #11]
}
 8003548:	4618      	mov	r0, r3
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	460b      	mov	r3, r1
 800355a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800355c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003560:	2b00      	cmp	r3, #0
 8003562:	da0b      	bge.n	800357c <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003564:	78fb      	ldrb	r3, [r7, #3]
 8003566:	f003 0307 	and.w	r3, r3, #7
 800356a:	015b      	lsls	r3, r3, #5
 800356c:	3328      	adds	r3, #40	; 0x28
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	4413      	add	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2201      	movs	r2, #1
 8003578:	705a      	strb	r2, [r3, #1]
 800357a:	e00b      	b.n	8003594 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800357c:	78fb      	ldrb	r3, [r7, #3]
 800357e:	f003 0307 	and.w	r3, r3, #7
 8003582:	015b      	lsls	r3, r3, #5
 8003584:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	4413      	add	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003594:	78fb      	ldrb	r3, [r7, #3]
 8003596:	f003 0307 	and.w	r3, r3, #7
 800359a:	b2da      	uxtb	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d101      	bne.n	80035ae <HAL_PCD_EP_Close+0x5e>
 80035aa:	2302      	movs	r3, #2
 80035ac:	e00e      	b.n	80035cc <HAL_PCD_EP_Close+0x7c>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68f9      	ldr	r1, [r7, #12]
 80035bc:	4618      	mov	r0, r3
 80035be:	f005 f93b 	bl	8008838 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	607a      	str	r2, [r7, #4]
 80035de:	603b      	str	r3, [r7, #0]
 80035e0:	460b      	mov	r3, r1
 80035e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035e4:	7afb      	ldrb	r3, [r7, #11]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	015b      	lsls	r3, r3, #5
 80035ec:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	4413      	add	r3, r2
 80035f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2200      	movs	r2, #0
 8003606:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	2200      	movs	r2, #0
 800360c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800360e:	7afb      	ldrb	r3, [r7, #11]
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	b2da      	uxtb	r2, r3
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800361a:	7afb      	ldrb	r3, [r7, #11]
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	2b00      	cmp	r3, #0
 8003622:	d106      	bne.n	8003632 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6979      	ldr	r1, [r7, #20]
 800362a:	4618      	mov	r0, r3
 800362c:	f005 fa9a 	bl	8008b64 <USB_EPStartXfer>
 8003630:	e005      	b.n	800363e <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6979      	ldr	r1, [r7, #20]
 8003638:	4618      	mov	r0, r3
 800363a:	f005 fa93 	bl	8008b64 <USB_EPStartXfer>
  }

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3718      	adds	r7, #24
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	460b      	mov	r3, r1
 8003652:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003654:	78fb      	ldrb	r3, [r7, #3]
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	330a      	adds	r3, #10
 800365e:	015b      	lsls	r3, r3, #5
 8003660:	4413      	add	r3, r2
 8003662:	3304      	adds	r3, #4
 8003664:	681b      	ldr	r3, [r3, #0]
}
 8003666:	4618      	mov	r0, r3
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b086      	sub	sp, #24
 8003676:	af00      	add	r7, sp, #0
 8003678:	60f8      	str	r0, [r7, #12]
 800367a:	607a      	str	r2, [r7, #4]
 800367c:	603b      	str	r3, [r7, #0]
 800367e:	460b      	mov	r3, r1
 8003680:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003682:	7afb      	ldrb	r3, [r7, #11]
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	015b      	lsls	r3, r3, #5
 800368a:	3328      	adds	r3, #40	; 0x28
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	4413      	add	r3, r2
 8003690:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	2200      	movs	r2, #0
 80036a2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	2201      	movs	r2, #1
 80036a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036aa:	7afb      	ldrb	r3, [r7, #11]
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036b6:	7afb      	ldrb	r3, [r7, #11]
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d106      	bne.n	80036ce <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6979      	ldr	r1, [r7, #20]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f005 fa4c 	bl	8008b64 <USB_EPStartXfer>
 80036cc:	e005      	b.n	80036da <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6979      	ldr	r1, [r7, #20]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f005 fa45 	bl	8008b64 <USB_EPStartXfer>
  }

  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3718      	adds	r7, #24
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	460b      	mov	r3, r1
 80036ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80036f0:	78fb      	ldrb	r3, [r7, #3]
 80036f2:	f003 0207 	and.w	r2, r3, #7
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d901      	bls.n	8003702 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e046      	b.n	8003790 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003702:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003706:	2b00      	cmp	r3, #0
 8003708:	da0b      	bge.n	8003722 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800370a:	78fb      	ldrb	r3, [r7, #3]
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	015b      	lsls	r3, r3, #5
 8003712:	3328      	adds	r3, #40	; 0x28
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	4413      	add	r3, r2
 8003718:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2201      	movs	r2, #1
 800371e:	705a      	strb	r2, [r3, #1]
 8003720:	e009      	b.n	8003736 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003722:	78fb      	ldrb	r3, [r7, #3]
 8003724:	015b      	lsls	r3, r3, #5
 8003726:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	4413      	add	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2201      	movs	r2, #1
 800373a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800373c:	78fb      	ldrb	r3, [r7, #3]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	b2da      	uxtb	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800374e:	2b01      	cmp	r3, #1
 8003750:	d101      	bne.n	8003756 <HAL_PCD_EP_SetStall+0x72>
 8003752:	2302      	movs	r3, #2
 8003754:	e01c      	b.n	8003790 <HAL_PCD_EP_SetStall+0xac>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68f9      	ldr	r1, [r7, #12]
 8003764:	4618      	mov	r0, r3
 8003766:	f005 fca9 	bl	80090bc <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800376a:	78fb      	ldrb	r3, [r7, #3]
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	2b00      	cmp	r3, #0
 8003772:	d108      	bne.n	8003786 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800377e:	4619      	mov	r1, r3
 8003780:	4610      	mov	r0, r2
 8003782:	f005 fdac 	bl	80092de <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80037a4:	78fb      	ldrb	r3, [r7, #3]
 80037a6:	f003 020f 	and.w	r2, r3, #15
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d901      	bls.n	80037b6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e03a      	b.n	800382c <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	da0b      	bge.n	80037d6 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037be:	78fb      	ldrb	r3, [r7, #3]
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	015b      	lsls	r3, r3, #5
 80037c6:	3328      	adds	r3, #40	; 0x28
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	4413      	add	r3, r2
 80037cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2201      	movs	r2, #1
 80037d2:	705a      	strb	r2, [r3, #1]
 80037d4:	e00b      	b.n	80037ee <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037d6:	78fb      	ldrb	r3, [r7, #3]
 80037d8:	f003 0307 	and.w	r3, r3, #7
 80037dc:	015b      	lsls	r3, r3, #5
 80037de:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	4413      	add	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037f4:	78fb      	ldrb	r3, [r7, #3]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003806:	2b01      	cmp	r3, #1
 8003808:	d101      	bne.n	800380e <HAL_PCD_EP_ClrStall+0x76>
 800380a:	2302      	movs	r3, #2
 800380c:	e00e      	b.n	800382c <HAL_PCD_EP_ClrStall+0x94>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68f9      	ldr	r1, [r7, #12]
 800381c:	4618      	mov	r0, r3
 800381e:	f005 fc8f 	bl	8009140 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003834:	b590      	push	{r4, r7, lr}
 8003836:	b089      	sub	sp, #36	; 0x24
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800383c:	e26f      	b.n	8003d1e <PCD_EP_ISR_Handler+0x4ea>
  {
    wIstr = hpcd->Instance->ISTR;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003846:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003848:	8afb      	ldrh	r3, [r7, #22]
 800384a:	b2db      	uxtb	r3, r3
 800384c:	f003 030f 	and.w	r3, r3, #15
 8003850:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8003852:	7d7b      	ldrb	r3, [r7, #21]
 8003854:	2b00      	cmp	r3, #0
 8003856:	f040 8137 	bne.w	8003ac8 <PCD_EP_ISR_Handler+0x294>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800385a:	8afb      	ldrh	r3, [r7, #22]
 800385c:	f003 0310 	and.w	r3, r3, #16
 8003860:	2b00      	cmp	r3, #0
 8003862:	d14f      	bne.n	8003904 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	881b      	ldrh	r3, [r3, #0]
 800386a:	b29b      	uxth	r3, r3
 800386c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003874:	b29c      	uxth	r4, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800387e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003882:	b29b      	uxth	r3, r3
 8003884:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	3328      	adds	r3, #40	; 0x28
 800388a:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003894:	b29b      	uxth	r3, r3
 8003896:	461a      	mov	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	4413      	add	r3, r2
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6812      	ldr	r2, [r2, #0]
 80038a4:	4413      	add	r3, r2
 80038a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80038aa:	881b      	ldrh	r3, [r3, #0]
 80038ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	695a      	ldr	r2, [r3, #20]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	441a      	add	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80038c2:	2100      	movs	r1, #0
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f00a fb71 	bl	800dfac <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 8223 	beq.w	8003d1e <PCD_EP_ISR_Handler+0x4ea>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f040 821e 	bne.w	8003d1e <PCD_EP_ISR_Handler+0x4ea>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80038ee:	b2da      	uxtb	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	b292      	uxth	r2, r2
 80038f6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003902:	e20c      	b.n	8003d1e <PCD_EP_ISR_Handler+0x4ea>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800390a:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	881b      	ldrh	r3, [r3, #0]
 8003912:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003914:	8a7b      	ldrh	r3, [r7, #18]
 8003916:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800391a:	2b00      	cmp	r3, #0
 800391c:	d031      	beq.n	8003982 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003926:	b29b      	uxth	r3, r3
 8003928:	461a      	mov	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	4413      	add	r3, r2
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	6812      	ldr	r2, [r2, #0]
 8003936:	4413      	add	r3, r2
 8003938:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6818      	ldr	r0, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003958:	b29b      	uxth	r3, r3
 800395a:	f005 fd0d 	bl	8009378 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	881b      	ldrh	r3, [r3, #0]
 8003964:	b29a      	uxth	r2, r3
 8003966:	f640 738f 	movw	r3, #3983	; 0xf8f
 800396a:	4013      	ands	r3, r2
 800396c:	b29c      	uxth	r4, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003976:	b292      	uxth	r2, r2
 8003978:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f00a faec 	bl	800df58 <HAL_PCD_SetupStageCallback>
 8003980:	e1cd      	b.n	8003d1e <PCD_EP_ISR_Handler+0x4ea>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003982:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003986:	2b00      	cmp	r3, #0
 8003988:	f280 81c9 	bge.w	8003d1e <PCD_EP_ISR_Handler+0x4ea>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	881b      	ldrh	r3, [r3, #0]
 8003992:	b29a      	uxth	r2, r3
 8003994:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003998:	4013      	ands	r3, r2
 800399a:	b29c      	uxth	r4, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80039a4:	b292      	uxth	r2, r2
 80039a6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	461a      	mov	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	4413      	add	r3, r2
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6812      	ldr	r2, [r2, #0]
 80039c0:	4413      	add	r3, r2
 80039c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80039c6:	881b      	ldrh	r3, [r3, #0]
 80039c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d019      	beq.n	8003a0c <PCD_EP_ISR_Handler+0x1d8>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d015      	beq.n	8003a0c <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6818      	ldr	r0, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6959      	ldr	r1, [r3, #20]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	f005 fcc1 	bl	8009378 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	695a      	ldr	r2, [r3, #20]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	441a      	add	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003a04:	2100      	movs	r1, #0
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f00a fab8 	bl	800df7c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	461c      	mov	r4, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	441c      	add	r4, r3
 8003a1e:	f204 4306 	addw	r3, r4, #1030	; 0x406
 8003a22:	60bb      	str	r3, [r7, #8]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d110      	bne.n	8003a4e <PCD_EP_ISR_Handler+0x21a>
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	881b      	ldrh	r3, [r3, #0]
 8003a30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	801a      	strh	r2, [r3, #0]
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	881b      	ldrh	r3, [r3, #0]
 8003a3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	801a      	strh	r2, [r3, #0]
 8003a4c:	e026      	b.n	8003a9c <PCD_EP_ISR_Handler+0x268>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	2b3d      	cmp	r3, #61	; 0x3d
 8003a54:	d813      	bhi.n	8003a7e <PCD_EP_ISR_Handler+0x24a>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	085b      	lsrs	r3, r3, #1
 8003a5c:	61bb      	str	r3, [r7, #24]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <PCD_EP_ISR_Handler+0x23c>
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	61bb      	str	r3, [r7, #24]
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	029b      	lsls	r3, r3, #10
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	801a      	strh	r2, [r3, #0]
 8003a7c:	e00e      	b.n	8003a9c <PCD_EP_ISR_Handler+0x268>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	095b      	lsrs	r3, r3, #5
 8003a84:	61bb      	str	r3, [r7, #24]
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	029b      	lsls	r3, r3, #10
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	881b      	ldrh	r3, [r3, #0]
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aac:	b29c      	uxth	r4, r3
 8003aae:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003ab2:	b29c      	uxth	r4, r3
 8003ab4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003ab8:	b29c      	uxth	r4, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	4b9f      	ldr	r3, [pc, #636]	; (8003d3c <PCD_EP_ISR_Handler+0x508>)
 8003ac0:	4323      	orrs	r3, r4
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	8013      	strh	r3, [r2, #0]
 8003ac6:	e12a      	b.n	8003d1e <PCD_EP_ISR_Handler+0x4ea>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	461a      	mov	r2, r3
 8003ace:	7d7b      	ldrb	r3, [r7, #21]
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4413      	add	r3, r2
 8003ad4:	881b      	ldrh	r3, [r3, #0]
 8003ad6:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003ad8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f280 80cb 	bge.w	8003c78 <PCD_EP_ISR_Handler+0x444>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	7d7b      	ldrb	r3, [r7, #21]
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	881b      	ldrh	r3, [r3, #0]
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003af6:	4013      	ands	r3, r2
 8003af8:	b29c      	uxth	r4, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	461a      	mov	r2, r3
 8003b00:	7d7b      	ldrb	r3, [r7, #21]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4413      	add	r3, r2
 8003b06:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003b0a:	b292      	uxth	r2, r2
 8003b0c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003b0e:	7d7b      	ldrb	r3, [r7, #21]
 8003b10:	015b      	lsls	r3, r3, #5
 8003b12:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	4413      	add	r3, r2
 8003b1a:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	7b1b      	ldrb	r3, [r3, #12]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d11f      	bne.n	8003b64 <PCD_EP_ISR_Handler+0x330>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	461a      	mov	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	4413      	add	r3, r2
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6812      	ldr	r2, [r2, #0]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003b42:	881b      	ldrh	r3, [r3, #0]
 8003b44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b48:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8003b4a:	8bfb      	ldrh	r3, [r7, #30]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d06e      	beq.n	8003c2e <PCD_EP_ISR_Handler+0x3fa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6818      	ldr	r0, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6959      	ldr	r1, [r3, #20]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	88da      	ldrh	r2, [r3, #6]
 8003b5c:	8bfb      	ldrh	r3, [r7, #30]
 8003b5e:	f005 fc0b 	bl	8009378 <USB_ReadPMA>
 8003b62:	e064      	b.n	8003c2e <PCD_EP_ISR_Handler+0x3fa>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	881b      	ldrh	r3, [r3, #0]
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d01f      	beq.n	8003bbe <PCD_EP_ISR_Handler+0x38a>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	461a      	mov	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	4413      	add	r3, r2
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	6812      	ldr	r2, [r2, #0]
 8003b96:	4413      	add	r3, r2
 8003b98:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003b9c:	881b      	ldrh	r3, [r3, #0]
 8003b9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ba2:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003ba4:	8bfb      	ldrh	r3, [r7, #30]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d028      	beq.n	8003bfc <PCD_EP_ISR_Handler+0x3c8>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6818      	ldr	r0, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6959      	ldr	r1, [r3, #20]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	891a      	ldrh	r2, [r3, #8]
 8003bb6:	8bfb      	ldrh	r3, [r7, #30]
 8003bb8:	f005 fbde 	bl	8009378 <USB_ReadPMA>
 8003bbc:	e01e      	b.n	8003bfc <PCD_EP_ISR_Handler+0x3c8>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	461a      	mov	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	6812      	ldr	r2, [r2, #0]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003bdc:	881b      	ldrh	r3, [r3, #0]
 8003bde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003be2:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003be4:	8bfb      	ldrh	r3, [r7, #30]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d008      	beq.n	8003bfc <PCD_EP_ISR_Handler+0x3c8>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6818      	ldr	r0, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6959      	ldr	r1, [r3, #20]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	895a      	ldrh	r2, [r3, #10]
 8003bf6:	8bfb      	ldrh	r3, [r7, #30]
 8003bf8:	f005 fbbe 	bl	8009378 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	461a      	mov	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4413      	add	r3, r2
 8003c0a:	881b      	ldrh	r3, [r3, #0]
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c16:	b29c      	uxth	r4, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	441a      	add	r2, r3
 8003c26:	4b46      	ldr	r3, [pc, #280]	; (8003d40 <PCD_EP_ISR_Handler+0x50c>)
 8003c28:	4323      	orrs	r3, r4
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	69da      	ldr	r2, [r3, #28]
 8003c32:	8bfb      	ldrh	r3, [r7, #30]
 8003c34:	441a      	add	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	695a      	ldr	r2, [r3, #20]
 8003c3e:	8bfb      	ldrh	r3, [r7, #30]
 8003c40:	441a      	add	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d004      	beq.n	8003c58 <PCD_EP_ISR_Handler+0x424>
 8003c4e:	8bfa      	ldrh	r2, [r7, #30]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d206      	bcs.n	8003c66 <PCD_EP_ISR_Handler+0x432>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f00a f98c 	bl	800df7c <HAL_PCD_DataOutStageCallback>
 8003c64:	e008      	b.n	8003c78 <PCD_EP_ISR_Handler+0x444>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	7819      	ldrb	r1, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	695a      	ldr	r2, [r3, #20]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7ff fcae 	bl	80035d4 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003c78:	8a7b      	ldrh	r3, [r7, #18]
 8003c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d04d      	beq.n	8003d1e <PCD_EP_ISR_Handler+0x4ea>
      {
        ep = &hpcd->IN_ep[epindex];
 8003c82:	7d7b      	ldrb	r3, [r7, #21]
 8003c84:	015b      	lsls	r3, r3, #5
 8003c86:	3328      	adds	r3, #40	; 0x28
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	461a      	mov	r2, r3
 8003c94:	7d7b      	ldrb	r3, [r7, #21]
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca6:	b29c      	uxth	r4, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	461a      	mov	r2, r3
 8003cae:	7d7b      	ldrb	r3, [r7, #21]
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	441a      	add	r2, r3
 8003cb4:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8003cb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	461a      	mov	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	4413      	add	r3, r2
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6812      	ldr	r2, [r2, #0]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003cde:	881b      	ldrh	r3, [r3, #0]
 8003ce0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	695a      	ldr	r2, [r3, #20]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	69db      	ldr	r3, [r3, #28]
 8003cf0:	441a      	add	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d106      	bne.n	8003d0c <PCD_EP_ISR_Handler+0x4d8>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	4619      	mov	r1, r3
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f00a f951 	bl	800dfac <HAL_PCD_DataInStageCallback>
 8003d0a:	e008      	b.n	8003d1e <PCD_EP_ISR_Handler+0x4ea>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	7819      	ldrb	r1, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	695a      	ldr	r2, [r3, #20]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f7ff fcaa 	bl	8003672 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	b21b      	sxth	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f6ff ad87 	blt.w	800383e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3724      	adds	r7, #36	; 0x24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd90      	pop	{r4, r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	ffff8080 	.word	0xffff8080
 8003d40:	ffff80c0 	.word	0xffff80c0

08003d44 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b087      	sub	sp, #28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	607b      	str	r3, [r7, #4]
 8003d4e:	460b      	mov	r3, r1
 8003d50:	817b      	strh	r3, [r7, #10]
 8003d52:	4613      	mov	r3, r2
 8003d54:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003d56:	897b      	ldrh	r3, [r7, #10]
 8003d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d008      	beq.n	8003d74 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d62:	897b      	ldrh	r3, [r7, #10]
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	015b      	lsls	r3, r3, #5
 8003d6a:	3328      	adds	r3, #40	; 0x28
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	4413      	add	r3, r2
 8003d70:	617b      	str	r3, [r7, #20]
 8003d72:	e006      	b.n	8003d82 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d74:	897b      	ldrh	r3, [r7, #10]
 8003d76:	015b      	lsls	r3, r3, #5
 8003d78:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	4413      	add	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003d82:	893b      	ldrh	r3, [r7, #8]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d107      	bne.n	8003d98 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	80da      	strh	r2, [r3, #6]
 8003d96:	e00b      	b.n	8003db0 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	0c1b      	lsrs	r3, r3, #16
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	371c      	adds	r7, #28
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b085      	sub	sp, #20
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	f043 0301 	orr.w	r3, r3, #1
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	f043 0302 	orr.w	r3, r3, #2
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
	...

08003e14 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e18:	4b05      	ldr	r3, [pc, #20]	; (8003e30 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a04      	ldr	r2, [pc, #16]	; (8003e30 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e22:	6013      	str	r3, [r2, #0]
}
 8003e24:	bf00      	nop
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	58000400 	.word	0x58000400

08003e34 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003e38:	4b04      	ldr	r3, [pc, #16]	; (8003e4c <HAL_PWREx_GetVoltageRange+0x18>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	58000400 	.word	0x58000400

08003e50 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003e54:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	4a04      	ldr	r2, [pc, #16]	; (8003e6c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003e5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e5e:	6053      	str	r3, [r2, #4]
}
 8003e60:	bf00      	nop
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	58000400 	.word	0x58000400

08003e70 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e82:	d101      	bne.n	8003e88 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003e84:	2301      	movs	r3, #1
 8003e86:	e000      	b.n	8003e8a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <LL_RCC_HSE_EnableBypass>:
{
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8003e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ea2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ea6:	6013      	str	r3, [r2, #0]
}
 8003ea8:	bf00      	nop
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <LL_RCC_HSE_DisableBypass>:
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8003eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ec0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ec4:	6013      	str	r3, [r2, #0]
}
 8003ec6:	bf00      	nop
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <LL_RCC_HSE_Enable>:
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee2:	6013      	str	r3, [r2, #0]
}
 8003ee4:	bf00      	nop
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <LL_RCC_HSE_Disable>:
{
 8003eee:	b480      	push	{r7}
 8003ef0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f00:	6013      	str	r3, [r2, #0]
}
 8003f02:	bf00      	nop
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <LL_RCC_HSE_IsReady>:
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f1e:	d101      	bne.n	8003f24 <LL_RCC_HSE_IsReady+0x18>
 8003f20:	2301      	movs	r3, #1
 8003f22:	e000      	b.n	8003f26 <LL_RCC_HSE_IsReady+0x1a>
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <LL_RCC_HSI_Enable>:
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f42:	6013      	str	r3, [r2, #0]
}
 8003f44:	bf00      	nop
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <LL_RCC_HSI_Disable>:
{
 8003f4e:	b480      	push	{r7}
 8003f50:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f60:	6013      	str	r3, [r2, #0]
}
 8003f62:	bf00      	nop
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <LL_RCC_HSI_IsReady>:
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f7e:	d101      	bne.n	8003f84 <LL_RCC_HSI_IsReady+0x18>
 8003f80:	2301      	movs	r3, #1
 8003f82:	e000      	b.n	8003f86 <LL_RCC_HSI_IsReady+0x1a>
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	061b      	lsls	r3, r3, #24
 8003fa6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003faa:	4313      	orrs	r3, r2
 8003fac:	604b      	str	r3, [r1, #4]
}
 8003fae:	bf00      	nop
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <LL_RCC_HSI48_Enable>:
{
 8003fba:	b480      	push	{r7}
 8003fbc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fca:	f043 0301 	orr.w	r3, r3, #1
 8003fce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003fd2:	bf00      	nop
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <LL_RCC_HSI48_Disable>:
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fe4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fe8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fec:	f023 0301 	bic.w	r3, r3, #1
 8003ff0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003ff4:	bf00      	nop
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <LL_RCC_HSI48_IsReady>:
{
 8003ffe:	b480      	push	{r7}
 8004000:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004006:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b02      	cmp	r3, #2
 8004010:	d101      	bne.n	8004016 <LL_RCC_HSI48_IsReady+0x18>
 8004012:	2301      	movs	r3, #1
 8004014:	e000      	b.n	8004018 <LL_RCC_HSI48_IsReady+0x1a>
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <LL_RCC_LSE_Enable>:
{
 8004022:	b480      	push	{r7}
 8004024:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800402a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004032:	f043 0301 	orr.w	r3, r3, #1
 8004036:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800403a:	bf00      	nop
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <LL_RCC_LSE_Disable>:
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800404c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004050:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004054:	f023 0301 	bic.w	r3, r3, #1
 8004058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800405c:	bf00      	nop
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <LL_RCC_LSE_EnableBypass>:
{
 8004066:	b480      	push	{r7}
 8004068:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800406a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800406e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004072:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004076:	f043 0304 	orr.w	r3, r3, #4
 800407a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800407e:	bf00      	nop
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <LL_RCC_LSE_DisableBypass>:
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800408c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004094:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004098:	f023 0304 	bic.w	r3, r3, #4
 800409c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80040a0:	bf00      	nop
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <LL_RCC_LSE_IsReady>:
{
 80040aa:	b480      	push	{r7}
 80040ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80040ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d101      	bne.n	80040c2 <LL_RCC_LSE_IsReady+0x18>
 80040be:	2301      	movs	r3, #1
 80040c0:	e000      	b.n	80040c4 <LL_RCC_LSE_IsReady+0x1a>
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <LL_RCC_LSI1_Enable>:
{
 80040ce:	b480      	push	{r7}
 80040d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80040d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040de:	f043 0301 	orr.w	r3, r3, #1
 80040e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80040e6:	bf00      	nop
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <LL_RCC_LSI1_Disable>:
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80040f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004100:	f023 0301 	bic.w	r3, r3, #1
 8004104:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004108:	bf00      	nop
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <LL_RCC_LSI1_IsReady>:
{
 8004112:	b480      	push	{r7}
 8004114:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800411a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b02      	cmp	r3, #2
 8004124:	d101      	bne.n	800412a <LL_RCC_LSI1_IsReady+0x18>
 8004126:	2301      	movs	r3, #1
 8004128:	e000      	b.n	800412c <LL_RCC_LSI1_IsReady+0x1a>
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <LL_RCC_LSI2_Enable>:
{
 8004136:	b480      	push	{r7}
 8004138:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800413a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800413e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004142:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004146:	f043 0304 	orr.w	r3, r3, #4
 800414a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800414e:	bf00      	nop
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <LL_RCC_LSI2_Disable>:
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800415c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004160:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004164:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004168:	f023 0304 	bic.w	r3, r3, #4
 800416c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004170:	bf00      	nop
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <LL_RCC_LSI2_IsReady>:
{
 800417a:	b480      	push	{r7}
 800417c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800417e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004182:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004186:	f003 0308 	and.w	r3, r3, #8
 800418a:	2b08      	cmp	r3, #8
 800418c:	d101      	bne.n	8004192 <LL_RCC_LSI2_IsReady+0x18>
 800418e:	2301      	movs	r3, #1
 8004190:	e000      	b.n	8004194 <LL_RCC_LSI2_IsReady+0x1a>
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <LL_RCC_LSI2_SetTrimming>:
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80041a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	021b      	lsls	r3, r3, #8
 80041b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041ba:	4313      	orrs	r3, r2
 80041bc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <LL_RCC_MSI_Enable>:
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80041d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041da:	f043 0301 	orr.w	r3, r3, #1
 80041de:	6013      	str	r3, [r2, #0]
}
 80041e0:	bf00      	nop
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <LL_RCC_MSI_Disable>:
{
 80041ea:	b480      	push	{r7}
 80041ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80041ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041f8:	f023 0301 	bic.w	r3, r3, #1
 80041fc:	6013      	str	r3, [r2, #0]
}
 80041fe:	bf00      	nop
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <LL_RCC_MSI_IsReady>:
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800420c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b02      	cmp	r3, #2
 8004218:	d101      	bne.n	800421e <LL_RCC_MSI_IsReady+0x16>
 800421a:	2301      	movs	r3, #1
 800421c:	e000      	b.n	8004220 <LL_RCC_MSI_IsReady+0x18>
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <LL_RCC_MSI_SetRange>:
{
 800422a:	b480      	push	{r7}
 800422c:	b083      	sub	sp, #12
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800423c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4313      	orrs	r3, r2
 8004244:	600b      	str	r3, [r1, #0]
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <LL_RCC_MSI_GetRange>:
{
 8004252:	b480      	push	{r7}
 8004254:	b083      	sub	sp, #12
 8004256:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004262:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2bb0      	cmp	r3, #176	; 0xb0
 8004268:	d901      	bls.n	800426e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800426a:	23b0      	movs	r3, #176	; 0xb0
 800426c:	607b      	str	r3, [r7, #4]
  return msiRange;
 800426e:	687b      	ldr	r3, [r7, #4]
}
 8004270:	4618      	mov	r0, r3
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <LL_RCC_MSI_SetCalibTrimming>:
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	021b      	lsls	r3, r3, #8
 8004292:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004296:	4313      	orrs	r3, r2
 8004298:	604b      	str	r3, [r1, #4]
}
 800429a:	bf00      	nop
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <LL_RCC_SetSysClkSource>:
{
 80042a6:	b480      	push	{r7}
 80042a8:	b083      	sub	sp, #12
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80042ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f023 0203 	bic.w	r2, r3, #3
 80042b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4313      	orrs	r3, r2
 80042c0:	608b      	str	r3, [r1, #8]
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <LL_RCC_GetSysClkSource>:
{
 80042ce:	b480      	push	{r7}
 80042d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80042d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f003 030c 	and.w	r3, r3, #12
}
 80042dc:	4618      	mov	r0, r3
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <LL_RCC_SetAHBPrescaler>:
{
 80042e6:	b480      	push	{r7}
 80042e8:	b083      	sub	sp, #12
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80042ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4313      	orrs	r3, r2
 8004300:	608b      	str	r3, [r1, #8]
}
 8004302:	bf00      	nop
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <LL_C2_RCC_SetAHBPrescaler>:
{
 800430e:	b480      	push	{r7}
 8004310:	b083      	sub	sp, #12
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800431a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800431e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004322:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4313      	orrs	r3, r2
 800432a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800432e:	bf00      	nop
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <LL_RCC_SetAHB4Prescaler>:
{
 800433a:	b480      	push	{r7}
 800433c:	b083      	sub	sp, #12
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004346:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800434a:	f023 020f 	bic.w	r2, r3, #15
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	091b      	lsrs	r3, r3, #4
 8004352:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004356:	4313      	orrs	r3, r2
 8004358:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <LL_RCC_SetAPB1Prescaler>:
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800437a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4313      	orrs	r3, r2
 8004382:	608b      	str	r3, [r1, #8]
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <LL_RCC_SetAPB2Prescaler>:
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	608b      	str	r3, [r1, #8]
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <LL_RCC_GetAHBPrescaler>:
{
 80043b8:	b480      	push	{r7}
 80043ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80043bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <LL_RCC_GetAHB4Prescaler>:
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80043d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80043dc:	011b      	lsls	r3, r3, #4
 80043de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <LL_RCC_GetAPB1Prescaler>:
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80043f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <LL_RCC_GetAPB2Prescaler>:
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004412:	4618      	mov	r0, r3
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800442a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800442e:	6013      	str	r3, [r2, #0]
}
 8004430:	bf00      	nop
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800443a:	b480      	push	{r7}
 800443c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800443e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004448:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800444c:	6013      	str	r3, [r2, #0]
}
 800444e:	bf00      	nop
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800445c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004466:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800446a:	d101      	bne.n	8004470 <LL_RCC_PLL_IsReady+0x18>
 800446c:	2301      	movs	r3, #1
 800446e:	e000      	b.n	8004472 <LL_RCC_PLL_IsReady+0x1a>
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	0a1b      	lsrs	r3, r3, #8
 8004488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800448c:	4618      	mov	r0, r3
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004496:	b480      	push	{r7}
 8004498:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800449a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80044ae:	b480      	push	{r7}
 80044b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80044b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80044bc:	4618      	mov	r0, r3
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80044c6:	b480      	push	{r7}
 80044c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80044ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f003 0303 	and.w	r3, r3, #3
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80044de:	b480      	push	{r7}
 80044e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80044e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044f0:	d101      	bne.n	80044f6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80044f2:	2301      	movs	r3, #1
 80044f4:	e000      	b.n	80044f8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004502:	b480      	push	{r7}
 8004504:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800450a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800450e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004512:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004516:	d101      	bne.n	800451c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004518:	2301      	movs	r3, #1
 800451a:	e000      	b.n	800451e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800452c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004530:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800453c:	d101      	bne.n	8004542 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800453e:	2301      	movs	r3, #1
 8004540:	e000      	b.n	8004544 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800454e:	b480      	push	{r7}
 8004550:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800455c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004560:	d101      	bne.n	8004566 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004562:	2301      	movs	r3, #1
 8004564:	e000      	b.n	8004568 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004572:	b480      	push	{r7}
 8004574:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004580:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004584:	d101      	bne.n	800458a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004586:	2301      	movs	r3, #1
 8004588:	e000      	b.n	800458c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
	...

08004598 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004598:	b590      	push	{r4, r7, lr}
 800459a:	b08b      	sub	sp, #44	; 0x2c
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d102      	bne.n	80045ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	f000 bcbc 	b.w	8004f24 <HAL_RCC_OscConfig+0x98c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d02e      	beq.n	8004612 <HAL_RCC_OscConfig+0x7a>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d128      	bne.n	8004612 <HAL_RCC_OscConfig+0x7a>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d122      	bne.n	8004612 <HAL_RCC_OscConfig+0x7a>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d11c      	bne.n	8004612 <HAL_RCC_OscConfig+0x7a>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0320 	and.w	r3, r3, #32
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d116      	bne.n	8004612 <HAL_RCC_OscConfig+0x7a>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0308 	and.w	r3, r3, #8
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d110      	bne.n	8004612 <HAL_RCC_OscConfig+0x7a>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0310 	and.w	r3, r3, #16
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d10a      	bne.n	8004612 <HAL_RCC_OscConfig+0x7a>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b00      	cmp	r3, #0
 8004606:	d104      	bne.n	8004612 <HAL_RCC_OscConfig+0x7a>
 8004608:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 800460c:	48ac      	ldr	r0, [pc, #688]	; (80048c0 <HAL_RCC_OscConfig+0x328>)
 800460e:	f7fd f9f1 	bl	80019f4 <assert_failed>

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0320 	and.w	r3, r3, #32
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 80dc 	beq.w	80047d8 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d008      	beq.n	800463a <HAL_RCC_OscConfig+0xa2>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	69db      	ldr	r3, [r3, #28]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d004      	beq.n	800463a <HAL_RCC_OscConfig+0xa2>
 8004630:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004634:	48a2      	ldr	r0, [pc, #648]	; (80048c0 <HAL_RCC_OscConfig+0x328>)
 8004636:	f7fd f9dd 	bl	80019f4 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	2bff      	cmp	r3, #255	; 0xff
 8004640:	d904      	bls.n	800464c <HAL_RCC_OscConfig+0xb4>
 8004642:	f240 1191 	movw	r1, #401	; 0x191
 8004646:	489e      	ldr	r0, [pc, #632]	; (80048c0 <HAL_RCC_OscConfig+0x328>)
 8004648:	f7fd f9d4 	bl	80019f4 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	2b00      	cmp	r3, #0
 8004652:	d030      	beq.n	80046b6 <HAL_RCC_OscConfig+0x11e>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	2b10      	cmp	r3, #16
 800465a:	d02c      	beq.n	80046b6 <HAL_RCC_OscConfig+0x11e>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	2b20      	cmp	r3, #32
 8004662:	d028      	beq.n	80046b6 <HAL_RCC_OscConfig+0x11e>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	2b30      	cmp	r3, #48	; 0x30
 800466a:	d024      	beq.n	80046b6 <HAL_RCC_OscConfig+0x11e>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004670:	2b40      	cmp	r3, #64	; 0x40
 8004672:	d020      	beq.n	80046b6 <HAL_RCC_OscConfig+0x11e>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	2b50      	cmp	r3, #80	; 0x50
 800467a:	d01c      	beq.n	80046b6 <HAL_RCC_OscConfig+0x11e>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	2b60      	cmp	r3, #96	; 0x60
 8004682:	d018      	beq.n	80046b6 <HAL_RCC_OscConfig+0x11e>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	2b70      	cmp	r3, #112	; 0x70
 800468a:	d014      	beq.n	80046b6 <HAL_RCC_OscConfig+0x11e>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	2b80      	cmp	r3, #128	; 0x80
 8004692:	d010      	beq.n	80046b6 <HAL_RCC_OscConfig+0x11e>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	2b90      	cmp	r3, #144	; 0x90
 800469a:	d00c      	beq.n	80046b6 <HAL_RCC_OscConfig+0x11e>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	2ba0      	cmp	r3, #160	; 0xa0
 80046a2:	d008      	beq.n	80046b6 <HAL_RCC_OscConfig+0x11e>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	2bb0      	cmp	r3, #176	; 0xb0
 80046aa:	d004      	beq.n	80046b6 <HAL_RCC_OscConfig+0x11e>
 80046ac:	f44f 71c9 	mov.w	r1, #402	; 0x192
 80046b0:	4883      	ldr	r0, [pc, #524]	; (80048c0 <HAL_RCC_OscConfig+0x328>)
 80046b2:	f7fd f99f 	bl	80019f4 <assert_failed>

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046b6:	f7ff fe0a 	bl	80042ce <LL_RCC_GetSysClkSource>
 80046ba:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046bc:	f7ff ff03 	bl	80044c6 <LL_RCC_PLL_GetMainSource>
 80046c0:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80046c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d005      	beq.n	80046d4 <HAL_RCC_OscConfig+0x13c>
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	2b0c      	cmp	r3, #12
 80046cc:	d14b      	bne.n	8004766 <HAL_RCC_OscConfig+0x1ce>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80046ce:	6a3b      	ldr	r3, [r7, #32]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d148      	bne.n	8004766 <HAL_RCC_OscConfig+0x1ce>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046d4:	f7ff fd98 	bl	8004208 <LL_RCC_MSI_IsReady>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d006      	beq.n	80046ec <HAL_RCC_OscConfig+0x154>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d102      	bne.n	80046ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	f000 bc1c 	b.w	8004f24 <HAL_RCC_OscConfig+0x98c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80046f0:	f7ff fdaf 	bl	8004252 <LL_RCC_MSI_GetRange>
 80046f4:	4603      	mov	r3, r0
 80046f6:	429c      	cmp	r4, r3
 80046f8:	d915      	bls.n	8004726 <HAL_RCC_OscConfig+0x18e>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 ff24 	bl	800554c <RCC_SetFlashLatencyFromMSIRange>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d002      	beq.n	8004710 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	f000 bc0a 	b.w	8004f24 <HAL_RCC_OscConfig+0x98c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004714:	4618      	mov	r0, r3
 8004716:	f7ff fd88 	bl	800422a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	4618      	mov	r0, r3
 8004720:	f7ff fdac 	bl	800427c <LL_RCC_MSI_SetCalibTrimming>
 8004724:	e013      	b.n	800474e <HAL_RCC_OscConfig+0x1b6>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472a:	4618      	mov	r0, r3
 800472c:	f7ff fd7d 	bl	800422a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff fda1 	bl	800427c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	4618      	mov	r0, r3
 8004740:	f000 ff04 	bl	800554c <RCC_SetFlashLatencyFromMSIRange>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <HAL_RCC_OscConfig+0x1b6>
          {
            return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e3ea      	b.n	8004f24 <HAL_RCC_OscConfig+0x98c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 800474e:	f7fd fd77 	bl	8002240 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004752:	4b5c      	ldr	r3, [pc, #368]	; (80048c4 <HAL_RCC_OscConfig+0x32c>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4618      	mov	r0, r3
 8004758:	f7fd ff1a 	bl	8002590 <HAL_InitTick>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d039      	beq.n	80047d6 <HAL_RCC_OscConfig+0x23e>
        {
          return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e3de      	b.n	8004f24 <HAL_RCC_OscConfig+0x98c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d01e      	beq.n	80047ac <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800476e:	f7ff fd2d 	bl	80041cc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004772:	f7fd ff59 	bl	8002628 <HAL_GetTick>
 8004776:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004778:	e008      	b.n	800478c <HAL_RCC_OscConfig+0x1f4>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800477a:	f7fd ff55 	bl	8002628 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d901      	bls.n	800478c <HAL_RCC_OscConfig+0x1f4>
          {
            return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e3cb      	b.n	8004f24 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_MSI_IsReady() == 0U)
 800478c:	f7ff fd3c 	bl	8004208 <LL_RCC_MSI_IsReady>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d0f1      	beq.n	800477a <HAL_RCC_OscConfig+0x1e2>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479a:	4618      	mov	r0, r3
 800479c:	f7ff fd45 	bl	800422a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7ff fd69 	bl	800427c <LL_RCC_MSI_SetCalibTrimming>
 80047aa:	e015      	b.n	80047d8 <HAL_RCC_OscConfig+0x240>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80047ac:	f7ff fd1d 	bl	80041ea <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80047b0:	f7fd ff3a 	bl	8002628 <HAL_GetTick>
 80047b4:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0x232>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047b8:	f7fd ff36 	bl	8002628 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x232>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e3ac      	b.n	8004f24 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_MSI_IsReady() != 0U)
 80047ca:	f7ff fd1d 	bl	8004208 <LL_RCC_MSI_IsReady>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1f1      	bne.n	80047b8 <HAL_RCC_OscConfig+0x220>
 80047d4:	e000      	b.n	80047d8 <HAL_RCC_OscConfig+0x240>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047d6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d072      	beq.n	80048ca <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00e      	beq.n	800480a <HAL_RCC_OscConfig+0x272>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f4:	d009      	beq.n	800480a <HAL_RCC_OscConfig+0x272>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047fe:	d004      	beq.n	800480a <HAL_RCC_OscConfig+0x272>
 8004800:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8004804:	482e      	ldr	r0, [pc, #184]	; (80048c0 <HAL_RCC_OscConfig+0x328>)
 8004806:	f7fd f8f5 	bl	80019f4 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800480a:	f7ff fd60 	bl	80042ce <LL_RCC_GetSysClkSource>
 800480e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004810:	f7ff fe59 	bl	80044c6 <LL_RCC_PLL_GetMainSource>
 8004814:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	2b08      	cmp	r3, #8
 800481a:	d005      	beq.n	8004828 <HAL_RCC_OscConfig+0x290>
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	2b0c      	cmp	r3, #12
 8004820:	d10d      	bne.n	800483e <HAL_RCC_OscConfig+0x2a6>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2b03      	cmp	r3, #3
 8004826:	d10a      	bne.n	800483e <HAL_RCC_OscConfig+0x2a6>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004828:	f7ff fb70 	bl	8003f0c <LL_RCC_HSE_IsReady>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d04a      	beq.n	80048c8 <HAL_RCC_OscConfig+0x330>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d146      	bne.n	80048c8 <HAL_RCC_OscConfig+0x330>
      {
        return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e372      	b.n	8004f24 <HAL_RCC_OscConfig+0x98c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004846:	d102      	bne.n	800484e <HAL_RCC_OscConfig+0x2b6>
 8004848:	f7ff fb42 	bl	8003ed0 <LL_RCC_HSE_Enable>
 800484c:	e00d      	b.n	800486a <HAL_RCC_OscConfig+0x2d2>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004856:	d104      	bne.n	8004862 <HAL_RCC_OscConfig+0x2ca>
 8004858:	f7ff fb1c 	bl	8003e94 <LL_RCC_HSE_EnableBypass>
 800485c:	f7ff fb38 	bl	8003ed0 <LL_RCC_HSE_Enable>
 8004860:	e003      	b.n	800486a <HAL_RCC_OscConfig+0x2d2>
 8004862:	f7ff fb44 	bl	8003eee <LL_RCC_HSE_Disable>
 8004866:	f7ff fb24 	bl	8003eb2 <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d012      	beq.n	8004898 <HAL_RCC_OscConfig+0x300>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004872:	f7fd fed9 	bl	8002628 <HAL_GetTick>
 8004876:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004878:	e008      	b.n	800488c <HAL_RCC_OscConfig+0x2f4>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800487a:	f7fd fed5 	bl	8002628 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b64      	cmp	r3, #100	; 0x64
 8004886:	d901      	bls.n	800488c <HAL_RCC_OscConfig+0x2f4>
          {
            return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e34b      	b.n	8004f24 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_HSE_IsReady() == 0U)
 800488c:	f7ff fb3e 	bl	8003f0c <LL_RCC_HSE_IsReady>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d0f1      	beq.n	800487a <HAL_RCC_OscConfig+0x2e2>
 8004896:	e018      	b.n	80048ca <HAL_RCC_OscConfig+0x332>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004898:	f7fd fec6 	bl	8002628 <HAL_GetTick>
 800489c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0x31a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048a0:	f7fd fec2 	bl	8002628 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b64      	cmp	r3, #100	; 0x64
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e338      	b.n	8004f24 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_HSE_IsReady() != 0U)
 80048b2:	f7ff fb2b 	bl	8003f0c <LL_RCC_HSE_IsReady>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1f1      	bne.n	80048a0 <HAL_RCC_OscConfig+0x308>
 80048bc:	e005      	b.n	80048ca <HAL_RCC_OscConfig+0x332>
 80048be:	bf00      	nop
 80048c0:	0800ee40 	.word	0x0800ee40
 80048c4:	20000010 	.word	0x20000010
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d068      	beq.n	80049a8 <HAL_RCC_OscConfig+0x410>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d009      	beq.n	80048f2 <HAL_RCC_OscConfig+0x35a>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048e6:	d004      	beq.n	80048f2 <HAL_RCC_OscConfig+0x35a>
 80048e8:	f240 212d 	movw	r1, #557	; 0x22d
 80048ec:	48b0      	ldr	r0, [pc, #704]	; (8004bb0 <HAL_RCC_OscConfig+0x618>)
 80048ee:	f7fd f881 	bl	80019f4 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	2b7f      	cmp	r3, #127	; 0x7f
 80048f8:	d904      	bls.n	8004904 <HAL_RCC_OscConfig+0x36c>
 80048fa:	f240 212e 	movw	r1, #558	; 0x22e
 80048fe:	48ac      	ldr	r0, [pc, #688]	; (8004bb0 <HAL_RCC_OscConfig+0x618>)
 8004900:	f7fd f878 	bl	80019f4 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004904:	f7ff fce3 	bl	80042ce <LL_RCC_GetSysClkSource>
 8004908:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800490a:	f7ff fddc 	bl	80044c6 <LL_RCC_PLL_GetMainSource>
 800490e:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	2b04      	cmp	r3, #4
 8004914:	d005      	beq.n	8004922 <HAL_RCC_OscConfig+0x38a>
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	2b0c      	cmp	r3, #12
 800491a:	d113      	bne.n	8004944 <HAL_RCC_OscConfig+0x3ac>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b02      	cmp	r3, #2
 8004920:	d110      	bne.n	8004944 <HAL_RCC_OscConfig+0x3ac>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004922:	f7ff fb23 	bl	8003f6c <LL_RCC_HSI_IsReady>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d005      	beq.n	8004938 <HAL_RCC_OscConfig+0x3a0>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d101      	bne.n	8004938 <HAL_RCC_OscConfig+0x3a0>
      {
        return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e2f5      	b.n	8004f24 <HAL_RCC_OscConfig+0x98c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	4618      	mov	r0, r3
 800493e:	f7ff fb27 	bl	8003f90 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004942:	e031      	b.n	80049a8 <HAL_RCC_OscConfig+0x410>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d019      	beq.n	8004980 <HAL_RCC_OscConfig+0x3e8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800494c:	f7ff faf0 	bl	8003f30 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004950:	f7fd fe6a 	bl	8002628 <HAL_GetTick>
 8004954:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004958:	f7fd fe66 	bl	8002628 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e2dc      	b.n	8004f24 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_HSI_IsReady() == 0U)
 800496a:	f7ff faff 	bl	8003f6c <LL_RCC_HSI_IsReady>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d0f1      	beq.n	8004958 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	4618      	mov	r0, r3
 800497a:	f7ff fb09 	bl	8003f90 <LL_RCC_HSI_SetCalibTrimming>
 800497e:	e013      	b.n	80049a8 <HAL_RCC_OscConfig+0x410>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004980:	f7ff fae5 	bl	8003f4e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004984:	f7fd fe50 	bl	8002628 <HAL_GetTick>
 8004988:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800498a:	e008      	b.n	800499e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800498c:	f7fd fe4c 	bl	8002628 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b02      	cmp	r3, #2
 8004998:	d901      	bls.n	800499e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e2c2      	b.n	8004f24 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_HSI_IsReady() != 0U)
 800499e:	f7ff fae5 	bl	8003f6c <LL_RCC_HSI_IsReady>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1f1      	bne.n	800498c <HAL_RCC_OscConfig+0x3f4>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0308 	and.w	r3, r3, #8
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d106      	bne.n	80049c2 <HAL_RCC_OscConfig+0x42a>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 80b5 	beq.w	8004b2c <HAL_RCC_OscConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d008      	beq.n	80049dc <HAL_RCC_OscConfig+0x444>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	2b05      	cmp	r3, #5
 80049d0:	d004      	beq.n	80049dc <HAL_RCC_OscConfig+0x444>
 80049d2:	f240 2172 	movw	r1, #626	; 0x272
 80049d6:	4876      	ldr	r0, [pc, #472]	; (8004bb0 <HAL_RCC_OscConfig+0x618>)
 80049d8:	f7fd f80c 	bl	80019f4 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d07b      	beq.n	8004adc <HAL_RCC_OscConfig+0x544>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0310 	and.w	r3, r3, #16
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d04f      	beq.n	8004a90 <HAL_RCC_OscConfig+0x4f8>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	2b0f      	cmp	r3, #15
 80049f6:	d904      	bls.n	8004a02 <HAL_RCC_OscConfig+0x46a>
 80049f8:	f240 217a 	movw	r1, #634	; 0x27a
 80049fc:	486c      	ldr	r0, [pc, #432]	; (8004bb0 <HAL_RCC_OscConfig+0x618>)
 80049fe:	f7fc fff9 	bl	80019f4 <assert_failed>

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004a02:	f7ff fb86 	bl	8004112 <LL_RCC_LSI1_IsReady>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d113      	bne.n	8004a34 <HAL_RCC_OscConfig+0x49c>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004a0c:	f7ff fb5f 	bl	80040ce <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a10:	f7fd fe0a 	bl	8002628 <HAL_GetTick>
 8004a14:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004a16:	e008      	b.n	8004a2a <HAL_RCC_OscConfig+0x492>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004a18:	f7fd fe06 	bl	8002628 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x492>
            {
              return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e27c      	b.n	8004f24 <HAL_RCC_OscConfig+0x98c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004a2a:	f7ff fb72 	bl	8004112 <LL_RCC_LSI1_IsReady>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d0f1      	beq.n	8004a18 <HAL_RCC_OscConfig+0x480>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004a34:	f7ff fb7f 	bl	8004136 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a38:	f7fd fdf6 	bl	8002628 <HAL_GetTick>
 8004a3c:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004a3e:	e008      	b.n	8004a52 <HAL_RCC_OscConfig+0x4ba>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004a40:	f7fd fdf2 	bl	8002628 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b03      	cmp	r3, #3
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x4ba>
          {
            return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e268      	b.n	8004f24 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004a52:	f7ff fb92 	bl	800417a <LL_RCC_LSI2_IsReady>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0f1      	beq.n	8004a40 <HAL_RCC_OscConfig+0x4a8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7ff fb9c 	bl	800419e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004a66:	f7ff fb43 	bl	80040f0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a6a:	f7fd fddd 	bl	8002628 <HAL_GetTick>
 8004a6e:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004a70:	e008      	b.n	8004a84 <HAL_RCC_OscConfig+0x4ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004a72:	f7fd fdd9 	bl	8002628 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d901      	bls.n	8004a84 <HAL_RCC_OscConfig+0x4ec>
          {
            return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e24f      	b.n	8004f24 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004a84:	f7ff fb45 	bl	8004112 <LL_RCC_LSI1_IsReady>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1f1      	bne.n	8004a72 <HAL_RCC_OscConfig+0x4da>
 8004a8e:	e04d      	b.n	8004b2c <HAL_RCC_OscConfig+0x594>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004a90:	f7ff fb1d 	bl	80040ce <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a94:	f7fd fdc8 	bl	8002628 <HAL_GetTick>
 8004a98:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0x516>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004a9c:	f7fd fdc4 	bl	8002628 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x516>
          {
            return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e23a      	b.n	8004f24 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004aae:	f7ff fb30 	bl	8004112 <LL_RCC_LSI1_IsReady>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d0f1      	beq.n	8004a9c <HAL_RCC_OscConfig+0x504>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004ab8:	f7ff fb4e 	bl	8004158 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004abc:	e008      	b.n	8004ad0 <HAL_RCC_OscConfig+0x538>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004abe:	f7fd fdb3 	bl	8002628 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b03      	cmp	r3, #3
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e229      	b.n	8004f24 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004ad0:	f7ff fb53 	bl	800417a <LL_RCC_LSI2_IsReady>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1f1      	bne.n	8004abe <HAL_RCC_OscConfig+0x526>
 8004ada:	e027      	b.n	8004b2c <HAL_RCC_OscConfig+0x594>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004adc:	f7ff fb3c 	bl	8004158 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae0:	f7fd fda2 	bl	8002628 <HAL_GetTick>
 8004ae4:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0x562>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004ae8:	f7fd fd9e 	bl	8002628 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b03      	cmp	r3, #3
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x562>
        {
          return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e214      	b.n	8004f24 <HAL_RCC_OscConfig+0x98c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004afa:	f7ff fb3e 	bl	800417a <LL_RCC_LSI2_IsReady>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1f1      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x550>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004b04:	f7ff faf4 	bl	80040f0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b08:	f7fd fd8e 	bl	8002628 <HAL_GetTick>
 8004b0c:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004b10:	f7fd fd8a 	bl	8002628 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e200      	b.n	8004f24 <HAL_RCC_OscConfig+0x98c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004b22:	f7ff faf6 	bl	8004112 <LL_RCC_LSI1_IsReady>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1f1      	bne.n	8004b10 <HAL_RCC_OscConfig+0x578>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0304 	and.w	r3, r3, #4
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d070      	beq.n	8004c1a <HAL_RCC_OscConfig+0x682>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00c      	beq.n	8004b5a <HAL_RCC_OscConfig+0x5c2>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d008      	beq.n	8004b5a <HAL_RCC_OscConfig+0x5c2>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	2b05      	cmp	r3, #5
 8004b4e:	d004      	beq.n	8004b5a <HAL_RCC_OscConfig+0x5c2>
 8004b50:	f240 21f9 	movw	r1, #761	; 0x2f9
 8004b54:	4816      	ldr	r0, [pc, #88]	; (8004bb0 <HAL_RCC_OscConfig+0x618>)
 8004b56:	f7fc ff4d 	bl	80019f4 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b5a:	4b16      	ldr	r3, [pc, #88]	; (8004bb4 <HAL_RCC_OscConfig+0x61c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d114      	bne.n	8004b90 <HAL_RCC_OscConfig+0x5f8>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004b66:	f7ff f955 	bl	8003e14 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b6a:	f7fd fd5d 	bl	8002628 <HAL_GetTick>
 8004b6e:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b70:	e008      	b.n	8004b84 <HAL_RCC_OscConfig+0x5ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b72:	f7fd fd59 	bl	8002628 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d901      	bls.n	8004b84 <HAL_RCC_OscConfig+0x5ec>
        {
          return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e1cf      	b.n	8004f24 <HAL_RCC_OscConfig+0x98c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b84:	4b0b      	ldr	r3, [pc, #44]	; (8004bb4 <HAL_RCC_OscConfig+0x61c>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d0f0      	beq.n	8004b72 <HAL_RCC_OscConfig+0x5da>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d102      	bne.n	8004b9e <HAL_RCC_OscConfig+0x606>
 8004b98:	f7ff fa43 	bl	8004022 <LL_RCC_LSE_Enable>
 8004b9c:	e010      	b.n	8004bc0 <HAL_RCC_OscConfig+0x628>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	2b05      	cmp	r3, #5
 8004ba4:	d108      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x620>
 8004ba6:	f7ff fa5e 	bl	8004066 <LL_RCC_LSE_EnableBypass>
 8004baa:	f7ff fa3a 	bl	8004022 <LL_RCC_LSE_Enable>
 8004bae:	e007      	b.n	8004bc0 <HAL_RCC_OscConfig+0x628>
 8004bb0:	0800ee40 	.word	0x0800ee40
 8004bb4:	58000400 	.word	0x58000400
 8004bb8:	f7ff fa44 	bl	8004044 <LL_RCC_LSE_Disable>
 8004bbc:	f7ff fa64 	bl	8004088 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d014      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x65a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc8:	f7fd fd2e 	bl	8002628 <HAL_GetTick>
 8004bcc:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004bce:	e00a      	b.n	8004be6 <HAL_RCC_OscConfig+0x64e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bd0:	f7fd fd2a 	bl	8002628 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x64e>
        {
          return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e19e      	b.n	8004f24 <HAL_RCC_OscConfig+0x98c>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004be6:	f7ff fa60 	bl	80040aa <LL_RCC_LSE_IsReady>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0ef      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x638>
 8004bf0:	e013      	b.n	8004c1a <HAL_RCC_OscConfig+0x682>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf2:	f7fd fd19 	bl	8002628 <HAL_GetTick>
 8004bf6:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004bf8:	e00a      	b.n	8004c10 <HAL_RCC_OscConfig+0x678>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bfa:	f7fd fd15 	bl	8002628 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d901      	bls.n	8004c10 <HAL_RCC_OscConfig+0x678>
        {
          return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e189      	b.n	8004f24 <HAL_RCC_OscConfig+0x98c>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004c10:	f7ff fa4b 	bl	80040aa <LL_RCC_LSE_IsReady>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1ef      	bne.n	8004bfa <HAL_RCC_OscConfig+0x662>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d039      	beq.n	8004c9a <HAL_RCC_OscConfig+0x702>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d008      	beq.n	8004c40 <HAL_RCC_OscConfig+0x6a8>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d004      	beq.n	8004c40 <HAL_RCC_OscConfig+0x6a8>
 8004c36:	f240 3135 	movw	r1, #821	; 0x335
 8004c3a:	489f      	ldr	r0, [pc, #636]	; (8004eb8 <HAL_RCC_OscConfig+0x920>)
 8004c3c:	f7fc feda 	bl	80019f4 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d014      	beq.n	8004c72 <HAL_RCC_OscConfig+0x6da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c48:	f7ff f9b7 	bl	8003fba <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c4c:	f7fd fcec 	bl	8002628 <HAL_GetTick>
 8004c50:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004c52:	e008      	b.n	8004c66 <HAL_RCC_OscConfig+0x6ce>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c54:	f7fd fce8 	bl	8002628 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_OscConfig+0x6ce>
        {
          return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e15e      	b.n	8004f24 <HAL_RCC_OscConfig+0x98c>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004c66:	f7ff f9ca 	bl	8003ffe <LL_RCC_HSI48_IsReady>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d0f1      	beq.n	8004c54 <HAL_RCC_OscConfig+0x6bc>
 8004c70:	e013      	b.n	8004c9a <HAL_RCC_OscConfig+0x702>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c72:	f7ff f9b3 	bl	8003fdc <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c76:	f7fd fcd7 	bl	8002628 <HAL_GetTick>
 8004c7a:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004c7c:	e008      	b.n	8004c90 <HAL_RCC_OscConfig+0x6f8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c7e:	f7fd fcd3 	bl	8002628 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0x6f8>
        {
          return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e149      	b.n	8004f24 <HAL_RCC_OscConfig+0x98c>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004c90:	f7ff f9b5 	bl	8003ffe <LL_RCC_HSI48_IsReady>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1f1      	bne.n	8004c7e <HAL_RCC_OscConfig+0x6e6>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00c      	beq.n	8004cbc <HAL_RCC_OscConfig+0x724>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d008      	beq.n	8004cbc <HAL_RCC_OscConfig+0x724>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d004      	beq.n	8004cbc <HAL_RCC_OscConfig+0x724>
 8004cb2:	f240 315d 	movw	r1, #861	; 0x35d
 8004cb6:	4880      	ldr	r0, [pc, #512]	; (8004eb8 <HAL_RCC_OscConfig+0x920>)
 8004cb8:	f7fc fe9c 	bl	80019f4 <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 812e 	beq.w	8004f22 <HAL_RCC_OscConfig+0x98a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cc6:	f7ff fb02 	bl	80042ce <LL_RCC_GetSysClkSource>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b0c      	cmp	r3, #12
 8004cce:	f000 80ec 	beq.w	8004eaa <HAL_RCC_OscConfig+0x912>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	f040 80c0 	bne.w	8004e5c <HAL_RCC_OscConfig+0x8c4>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d010      	beq.n	8004d06 <HAL_RCC_OscConfig+0x76e>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d00c      	beq.n	8004d06 <HAL_RCC_OscConfig+0x76e>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d008      	beq.n	8004d06 <HAL_RCC_OscConfig+0x76e>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf8:	2b03      	cmp	r3, #3
 8004cfa:	d004      	beq.n	8004d06 <HAL_RCC_OscConfig+0x76e>
 8004cfc:	f240 3167 	movw	r1, #871	; 0x367
 8004d00:	486d      	ldr	r0, [pc, #436]	; (8004eb8 <HAL_RCC_OscConfig+0x920>)
 8004d02:	f7fc fe77 	bl	80019f4 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d020      	beq.n	8004d50 <HAL_RCC_OscConfig+0x7b8>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d12:	2b10      	cmp	r3, #16
 8004d14:	d01c      	beq.n	8004d50 <HAL_RCC_OscConfig+0x7b8>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d1a:	2b20      	cmp	r3, #32
 8004d1c:	d018      	beq.n	8004d50 <HAL_RCC_OscConfig+0x7b8>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d22:	2b30      	cmp	r3, #48	; 0x30
 8004d24:	d014      	beq.n	8004d50 <HAL_RCC_OscConfig+0x7b8>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d2a:	2b40      	cmp	r3, #64	; 0x40
 8004d2c:	d010      	beq.n	8004d50 <HAL_RCC_OscConfig+0x7b8>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d32:	2b50      	cmp	r3, #80	; 0x50
 8004d34:	d00c      	beq.n	8004d50 <HAL_RCC_OscConfig+0x7b8>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d3a:	2b60      	cmp	r3, #96	; 0x60
 8004d3c:	d008      	beq.n	8004d50 <HAL_RCC_OscConfig+0x7b8>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d42:	2b70      	cmp	r3, #112	; 0x70
 8004d44:	d004      	beq.n	8004d50 <HAL_RCC_OscConfig+0x7b8>
 8004d46:	f44f 715a 	mov.w	r1, #872	; 0x368
 8004d4a:	485b      	ldr	r0, [pc, #364]	; (8004eb8 <HAL_RCC_OscConfig+0x920>)
 8004d4c:	f7fc fe52 	bl	80019f4 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d54:	2b05      	cmp	r3, #5
 8004d56:	d903      	bls.n	8004d60 <HAL_RCC_OscConfig+0x7c8>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5c:	2b7f      	cmp	r3, #127	; 0x7f
 8004d5e:	d904      	bls.n	8004d6a <HAL_RCC_OscConfig+0x7d2>
 8004d60:	f240 3169 	movw	r1, #873	; 0x369
 8004d64:	4854      	ldr	r0, [pc, #336]	; (8004eb8 <HAL_RCC_OscConfig+0x920>)
 8004d66:	f7fc fe45 	bl	80019f4 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d72:	d304      	bcc.n	8004d7e <HAL_RCC_OscConfig+0x7e6>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d78:	f5b3 1f78 	cmp.w	r3, #4063232	; 0x3e0000
 8004d7c:	d904      	bls.n	8004d88 <HAL_RCC_OscConfig+0x7f0>
 8004d7e:	f240 316a 	movw	r1, #874	; 0x36a
 8004d82:	484d      	ldr	r0, [pc, #308]	; (8004eb8 <HAL_RCC_OscConfig+0x920>)
 8004d84:	f7fc fe36 	bl	80019f4 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d90:	d304      	bcc.n	8004d9c <HAL_RCC_OscConfig+0x804>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8004d9a:	d904      	bls.n	8004da6 <HAL_RCC_OscConfig+0x80e>
 8004d9c:	f240 316b 	movw	r1, #875	; 0x36b
 8004da0:	4845      	ldr	r0, [pc, #276]	; (8004eb8 <HAL_RCC_OscConfig+0x920>)
 8004da2:	f7fc fe27 	bl	80019f4 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004daa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dae:	d304      	bcc.n	8004dba <HAL_RCC_OscConfig+0x822>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db4:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8004db8:	d904      	bls.n	8004dc4 <HAL_RCC_OscConfig+0x82c>
 8004dba:	f44f 715b 	mov.w	r1, #876	; 0x36c
 8004dbe:	483e      	ldr	r0, [pc, #248]	; (8004eb8 <HAL_RCC_OscConfig+0x920>)
 8004dc0:	f7fc fe18 	bl	80019f4 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dc4:	f7ff fb39 	bl	800443a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc8:	f7fd fc2e 	bl	8002628 <HAL_GetTick>
 8004dcc:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0x84a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dd0:	f7fd fc2a 	bl	8002628 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0x84a>
          {
            return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e0a0      	b.n	8004f24 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004de2:	f7ff fb39 	bl	8004458 <LL_RCC_PLL_IsReady>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1f1      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x838>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004df0:	68da      	ldr	r2, [r3, #12]
 8004df2:	4b32      	ldr	r3, [pc, #200]	; (8004ebc <HAL_RCC_OscConfig+0x924>)
 8004df4:	4013      	ands	r3, r2
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004dfe:	4311      	orrs	r1, r2
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e04:	0212      	lsls	r2, r2, #8
 8004e06:	4311      	orrs	r1, r2
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004e0c:	4311      	orrs	r1, r2
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004e12:	4311      	orrs	r1, r2
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e22:	f7ff fafb 	bl	800441c <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e34:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e36:	f7fd fbf7 	bl	8002628 <HAL_GetTick>
 8004e3a:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8004e3c:	e008      	b.n	8004e50 <HAL_RCC_OscConfig+0x8b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e3e:	f7fd fbf3 	bl	8002628 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCC_OscConfig+0x8b8>
          {
            return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e069      	b.n	8004f24 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_PLL_IsReady() == 0U)
 8004e50:	f7ff fb02 	bl	8004458 <LL_RCC_PLL_IsReady>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d0f1      	beq.n	8004e3e <HAL_RCC_OscConfig+0x8a6>
 8004e5a:	e062      	b.n	8004f22 <HAL_RCC_OscConfig+0x98a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e5c:	f7ff faed 	bl	800443a <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e6a:	f023 0303 	bic.w	r3, r3, #3
 8004e6e:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8004e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e7a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8004e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e82:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e84:	f7fd fbd0 	bl	8002628 <HAL_GetTick>
 8004e88:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004e8a:	e008      	b.n	8004e9e <HAL_RCC_OscConfig+0x906>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e8c:	f7fd fbcc 	bl	8002628 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_OscConfig+0x906>
          {
            return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e042      	b.n	8004f24 <HAL_RCC_OscConfig+0x98c>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004e9e:	f7ff fadb 	bl	8004458 <LL_RCC_PLL_IsReady>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1f1      	bne.n	8004e8c <HAL_RCC_OscConfig+0x8f4>
 8004ea8:	e03b      	b.n	8004f22 <HAL_RCC_OscConfig+0x98a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d106      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x928>
      {
        return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e036      	b.n	8004f24 <HAL_RCC_OscConfig+0x98c>
 8004eb6:	bf00      	nop
 8004eb8:	0800ee40 	.word	0x0800ee40
 8004ebc:	11c1808c 	.word	0x11c1808c
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8004ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	f003 0203 	and.w	r2, r3, #3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d123      	bne.n	8004f1e <HAL_RCC_OscConfig+0x986>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d11c      	bne.n	8004f1e <HAL_RCC_OscConfig+0x986>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	0a1b      	lsrs	r3, r3, #8
 8004ee8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d114      	bne.n	8004f1e <HAL_RCC_OscConfig+0x986>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d10d      	bne.n	8004f1e <HAL_RCC_OscConfig+0x986>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d106      	bne.n	8004f1e <HAL_RCC_OscConfig+0x986>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d001      	beq.n	8004f22 <HAL_RCC_OscConfig+0x98a>
        {
          return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e000      	b.n	8004f24 <HAL_RCC_OscConfig+0x98c>
        }
      }
    }
  }
  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	372c      	adds	r7, #44	; 0x2c
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd90      	pop	{r4, r7, pc}

08004f2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d101      	bne.n	8004f40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e253      	b.n	80053e8 <HAL_RCC_ClockConfig+0x4bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d003      	beq.n	8004f50 <HAL_RCC_ClockConfig+0x24>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b6f      	cmp	r3, #111	; 0x6f
 8004f4e:	d904      	bls.n	8004f5a <HAL_RCC_ClockConfig+0x2e>
 8004f50:	f240 31fd 	movw	r1, #1021	; 0x3fd
 8004f54:	489b      	ldr	r0, [pc, #620]	; (80051c4 <HAL_RCC_ClockConfig+0x298>)
 8004f56:	f7fc fd4d 	bl	80019f4 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00d      	beq.n	8004f7c <HAL_RCC_ClockConfig+0x50>
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d00a      	beq.n	8004f7c <HAL_RCC_ClockConfig+0x50>
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d007      	beq.n	8004f7c <HAL_RCC_ClockConfig+0x50>
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	2b03      	cmp	r3, #3
 8004f70:	d004      	beq.n	8004f7c <HAL_RCC_ClockConfig+0x50>
 8004f72:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8004f76:	4893      	ldr	r0, [pc, #588]	; (80051c4 <HAL_RCC_ClockConfig+0x298>)
 8004f78:	f7fc fd3c 	bl	80019f4 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f7c:	4b92      	ldr	r3, [pc, #584]	; (80051c8 <HAL_RCC_ClockConfig+0x29c>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0307 	and.w	r3, r3, #7
 8004f84:	683a      	ldr	r2, [r7, #0]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d91b      	bls.n	8004fc2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f8a:	4b8f      	ldr	r3, [pc, #572]	; (80051c8 <HAL_RCC_ClockConfig+0x29c>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f023 0207 	bic.w	r2, r3, #7
 8004f92:	498d      	ldr	r1, [pc, #564]	; (80051c8 <HAL_RCC_ClockConfig+0x29c>)
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f9a:	f7fd fb45 	bl	8002628 <HAL_GetTick>
 8004f9e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fa0:	e008      	b.n	8004fb4 <HAL_RCC_ClockConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004fa2:	f7fd fb41 	bl	8002628 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d901      	bls.n	8004fb4 <HAL_RCC_ClockConfig+0x88>
      {
        return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e219      	b.n	80053e8 <HAL_RCC_ClockConfig+0x4bc>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fb4:	4b84      	ldr	r3, [pc, #528]	; (80051c8 <HAL_RCC_ClockConfig+0x29c>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0307 	and.w	r3, r3, #7
 8004fbc:	683a      	ldr	r2, [r7, #0]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d1ef      	bne.n	8004fa2 <HAL_RCC_ClockConfig+0x76>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d053      	beq.n	8005076 <HAL_RCC_ClockConfig+0x14a>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d038      	beq.n	8005048 <HAL_RCC_ClockConfig+0x11c>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	2b80      	cmp	r3, #128	; 0x80
 8004fdc:	d034      	beq.n	8005048 <HAL_RCC_ClockConfig+0x11c>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	2b10      	cmp	r3, #16
 8004fe4:	d030      	beq.n	8005048 <HAL_RCC_ClockConfig+0x11c>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	2b90      	cmp	r3, #144	; 0x90
 8004fec:	d02c      	beq.n	8005048 <HAL_RCC_ClockConfig+0x11c>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	2b20      	cmp	r3, #32
 8004ff4:	d028      	beq.n	8005048 <HAL_RCC_ClockConfig+0x11c>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	2b50      	cmp	r3, #80	; 0x50
 8004ffc:	d024      	beq.n	8005048 <HAL_RCC_ClockConfig+0x11c>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	2ba0      	cmp	r3, #160	; 0xa0
 8005004:	d020      	beq.n	8005048 <HAL_RCC_ClockConfig+0x11c>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	2b60      	cmp	r3, #96	; 0x60
 800500c:	d01c      	beq.n	8005048 <HAL_RCC_ClockConfig+0x11c>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	2bb0      	cmp	r3, #176	; 0xb0
 8005014:	d018      	beq.n	8005048 <HAL_RCC_ClockConfig+0x11c>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	2b70      	cmp	r3, #112	; 0x70
 800501c:	d014      	beq.n	8005048 <HAL_RCC_ClockConfig+0x11c>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	2bc0      	cmp	r3, #192	; 0xc0
 8005024:	d010      	beq.n	8005048 <HAL_RCC_ClockConfig+0x11c>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	2bd0      	cmp	r3, #208	; 0xd0
 800502c:	d00c      	beq.n	8005048 <HAL_RCC_ClockConfig+0x11c>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	2be0      	cmp	r3, #224	; 0xe0
 8005034:	d008      	beq.n	8005048 <HAL_RCC_ClockConfig+0x11c>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	2bf0      	cmp	r3, #240	; 0xf0
 800503c:	d004      	beq.n	8005048 <HAL_RCC_ClockConfig+0x11c>
 800503e:	f240 411b 	movw	r1, #1051	; 0x41b
 8005042:	4860      	ldr	r0, [pc, #384]	; (80051c4 <HAL_RCC_ClockConfig+0x298>)
 8005044:	f7fc fcd6 	bl	80019f4 <assert_failed>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	4618      	mov	r0, r3
 800504e:	f7ff f94a 	bl	80042e6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005052:	f7fd fae9 	bl	8002628 <HAL_GetTick>
 8005056:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005058:	e008      	b.n	800506c <HAL_RCC_ClockConfig+0x140>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800505a:	f7fd fae5 	bl	8002628 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d901      	bls.n	800506c <HAL_RCC_ClockConfig+0x140>
      {
        return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e1bd      	b.n	80053e8 <HAL_RCC_ClockConfig+0x4bc>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800506c:	f7ff fa37 	bl	80044de <LL_RCC_IsActiveFlag_HPRE>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d0f1      	beq.n	800505a <HAL_RCC_ClockConfig+0x12e>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0320 	and.w	r3, r3, #32
 800507e:	2b00      	cmp	r3, #0
 8005080:	d053      	beq.n	800512a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d038      	beq.n	80050fc <HAL_RCC_ClockConfig+0x1d0>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	2b80      	cmp	r3, #128	; 0x80
 8005090:	d034      	beq.n	80050fc <HAL_RCC_ClockConfig+0x1d0>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	2b10      	cmp	r3, #16
 8005098:	d030      	beq.n	80050fc <HAL_RCC_ClockConfig+0x1d0>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	2b90      	cmp	r3, #144	; 0x90
 80050a0:	d02c      	beq.n	80050fc <HAL_RCC_ClockConfig+0x1d0>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	2b20      	cmp	r3, #32
 80050a8:	d028      	beq.n	80050fc <HAL_RCC_ClockConfig+0x1d0>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	2b50      	cmp	r3, #80	; 0x50
 80050b0:	d024      	beq.n	80050fc <HAL_RCC_ClockConfig+0x1d0>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	2ba0      	cmp	r3, #160	; 0xa0
 80050b8:	d020      	beq.n	80050fc <HAL_RCC_ClockConfig+0x1d0>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	2b60      	cmp	r3, #96	; 0x60
 80050c0:	d01c      	beq.n	80050fc <HAL_RCC_ClockConfig+0x1d0>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	2bb0      	cmp	r3, #176	; 0xb0
 80050c8:	d018      	beq.n	80050fc <HAL_RCC_ClockConfig+0x1d0>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	2b70      	cmp	r3, #112	; 0x70
 80050d0:	d014      	beq.n	80050fc <HAL_RCC_ClockConfig+0x1d0>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	2bc0      	cmp	r3, #192	; 0xc0
 80050d8:	d010      	beq.n	80050fc <HAL_RCC_ClockConfig+0x1d0>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	2bd0      	cmp	r3, #208	; 0xd0
 80050e0:	d00c      	beq.n	80050fc <HAL_RCC_ClockConfig+0x1d0>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	2be0      	cmp	r3, #224	; 0xe0
 80050e8:	d008      	beq.n	80050fc <HAL_RCC_ClockConfig+0x1d0>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	2bf0      	cmp	r3, #240	; 0xf0
 80050f0:	d004      	beq.n	80050fc <HAL_RCC_ClockConfig+0x1d0>
 80050f2:	f240 412c 	movw	r1, #1068	; 0x42c
 80050f6:	4833      	ldr	r0, [pc, #204]	; (80051c4 <HAL_RCC_ClockConfig+0x298>)
 80050f8:	f7fc fc7c 	bl	80019f4 <assert_failed>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	4618      	mov	r0, r3
 8005102:	f7ff f904 	bl	800430e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005106:	f7fd fa8f 	bl	8002628 <HAL_GetTick>
 800510a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800510c:	e008      	b.n	8005120 <HAL_RCC_ClockConfig+0x1f4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800510e:	f7fd fa8b 	bl	8002628 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	2b02      	cmp	r3, #2
 800511a:	d901      	bls.n	8005120 <HAL_RCC_ClockConfig+0x1f4>
      {
        return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e163      	b.n	80053e8 <HAL_RCC_ClockConfig+0x4bc>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005120:	f7ff f9ef 	bl	8004502 <LL_RCC_IsActiveFlag_C2HPRE>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d0f1      	beq.n	800510e <HAL_RCC_ClockConfig+0x1e2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005132:	2b00      	cmp	r3, #0
 8005134:	d058      	beq.n	80051e8 <HAL_RCC_ClockConfig+0x2bc>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d038      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x284>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	2b80      	cmp	r3, #128	; 0x80
 8005144:	d034      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x284>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	2b10      	cmp	r3, #16
 800514c:	d030      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x284>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	2b90      	cmp	r3, #144	; 0x90
 8005154:	d02c      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x284>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	2b20      	cmp	r3, #32
 800515c:	d028      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x284>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	2b50      	cmp	r3, #80	; 0x50
 8005164:	d024      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x284>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	2ba0      	cmp	r3, #160	; 0xa0
 800516c:	d020      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x284>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	2b60      	cmp	r3, #96	; 0x60
 8005174:	d01c      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x284>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	2bb0      	cmp	r3, #176	; 0xb0
 800517c:	d018      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x284>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	2b70      	cmp	r3, #112	; 0x70
 8005184:	d014      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x284>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	2bc0      	cmp	r3, #192	; 0xc0
 800518c:	d010      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x284>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	2bd0      	cmp	r3, #208	; 0xd0
 8005194:	d00c      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x284>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	2be0      	cmp	r3, #224	; 0xe0
 800519c:	d008      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x284>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	2bf0      	cmp	r3, #240	; 0xf0
 80051a4:	d004      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x284>
 80051a6:	f240 413c 	movw	r1, #1084	; 0x43c
 80051aa:	4806      	ldr	r0, [pc, #24]	; (80051c4 <HAL_RCC_ClockConfig+0x298>)
 80051ac:	f7fc fc22 	bl	80019f4 <assert_failed>
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7ff f8c0 	bl	800433a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80051ba:	f7fd fa35 	bl	8002628 <HAL_GetTick>
 80051be:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80051c0:	e00d      	b.n	80051de <HAL_RCC_ClockConfig+0x2b2>
 80051c2:	bf00      	nop
 80051c4:	0800ee40 	.word	0x0800ee40
 80051c8:	58004000 	.word	0x58004000
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80051cc:	f7fd fa2c 	bl	8002628 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d901      	bls.n	80051de <HAL_RCC_ClockConfig+0x2b2>
      {
        return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e104      	b.n	80053e8 <HAL_RCC_ClockConfig+0x4bc>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80051de:	f7ff f9a3 	bl	8004528 <LL_RCC_IsActiveFlag_SHDHPRE>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d0f1      	beq.n	80051cc <HAL_RCC_ClockConfig+0x2a0>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0304 	and.w	r3, r3, #4
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d033      	beq.n	800525c <HAL_RCC_ClockConfig+0x330>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d018      	beq.n	800522e <HAL_RCC_ClockConfig+0x302>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005204:	d013      	beq.n	800522e <HAL_RCC_ClockConfig+0x302>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800520e:	d00e      	beq.n	800522e <HAL_RCC_ClockConfig+0x302>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005218:	d009      	beq.n	800522e <HAL_RCC_ClockConfig+0x302>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005222:	d004      	beq.n	800522e <HAL_RCC_ClockConfig+0x302>
 8005224:	f240 414d 	movw	r1, #1101	; 0x44d
 8005228:	4871      	ldr	r0, [pc, #452]	; (80053f0 <HAL_RCC_ClockConfig+0x4c4>)
 800522a:	f7fc fbe3 	bl	80019f4 <assert_failed>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	4618      	mov	r0, r3
 8005234:	f7ff f898 	bl	8004368 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005238:	f7fd f9f6 	bl	8002628 <HAL_GetTick>
 800523c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800523e:	e008      	b.n	8005252 <HAL_RCC_ClockConfig+0x326>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005240:	f7fd f9f2 	bl	8002628 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b02      	cmp	r3, #2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_ClockConfig+0x326>
      {
        return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e0ca      	b.n	80053e8 <HAL_RCC_ClockConfig+0x4bc>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005252:	f7ff f97c 	bl	800454e <LL_RCC_IsActiveFlag_PPRE1>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d0f1      	beq.n	8005240 <HAL_RCC_ClockConfig+0x314>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0308 	and.w	r3, r3, #8
 8005264:	2b00      	cmp	r3, #0
 8005266:	d034      	beq.n	80052d2 <HAL_RCC_ClockConfig+0x3a6>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d018      	beq.n	80052a2 <HAL_RCC_ClockConfig+0x376>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005278:	d013      	beq.n	80052a2 <HAL_RCC_ClockConfig+0x376>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005282:	d00e      	beq.n	80052a2 <HAL_RCC_ClockConfig+0x376>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800528c:	d009      	beq.n	80052a2 <HAL_RCC_ClockConfig+0x376>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005296:	d004      	beq.n	80052a2 <HAL_RCC_ClockConfig+0x376>
 8005298:	f240 415e 	movw	r1, #1118	; 0x45e
 800529c:	4854      	ldr	r0, [pc, #336]	; (80053f0 <HAL_RCC_ClockConfig+0x4c4>)
 800529e:	f7fc fba9 	bl	80019f4 <assert_failed>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	00db      	lsls	r3, r3, #3
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7ff f871 	bl	8004390 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80052ae:	f7fd f9bb 	bl	8002628 <HAL_GetTick>
 80052b2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80052b4:	e008      	b.n	80052c8 <HAL_RCC_ClockConfig+0x39c>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80052b6:	f7fd f9b7 	bl	8002628 <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d901      	bls.n	80052c8 <HAL_RCC_ClockConfig+0x39c>
      {
        return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e08f      	b.n	80053e8 <HAL_RCC_ClockConfig+0x4bc>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80052c8:	f7ff f953 	bl	8004572 <LL_RCC_IsActiveFlag_PPRE2>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d0f1      	beq.n	80052b6 <HAL_RCC_ClockConfig+0x38a>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d058      	beq.n	8005390 <HAL_RCC_ClockConfig+0x464>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d010      	beq.n	8005308 <HAL_RCC_ClockConfig+0x3dc>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d00c      	beq.n	8005308 <HAL_RCC_ClockConfig+0x3dc>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d008      	beq.n	8005308 <HAL_RCC_ClockConfig+0x3dc>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2b03      	cmp	r3, #3
 80052fc:	d004      	beq.n	8005308 <HAL_RCC_ClockConfig+0x3dc>
 80052fe:	f240 416f 	movw	r1, #1135	; 0x46f
 8005302:	483b      	ldr	r0, [pc, #236]	; (80053f0 <HAL_RCC_ClockConfig+0x4c4>)
 8005304:	f7fc fb76 	bl	80019f4 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	2b02      	cmp	r3, #2
 800530e:	d106      	bne.n	800531e <HAL_RCC_ClockConfig+0x3f2>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005310:	f7fe fdfc 	bl	8003f0c <LL_RCC_HSE_IsReady>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d11e      	bne.n	8005358 <HAL_RCC_ClockConfig+0x42c>
      {
        return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e064      	b.n	80053e8 <HAL_RCC_ClockConfig+0x4bc>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	2b03      	cmp	r3, #3
 8005324:	d106      	bne.n	8005334 <HAL_RCC_ClockConfig+0x408>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005326:	f7ff f897 	bl	8004458 <LL_RCC_PLL_IsReady>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d113      	bne.n	8005358 <HAL_RCC_ClockConfig+0x42c>
      {
        return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e059      	b.n	80053e8 <HAL_RCC_ClockConfig+0x4bc>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d106      	bne.n	800534a <HAL_RCC_ClockConfig+0x41e>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800533c:	f7fe ff64 	bl	8004208 <LL_RCC_MSI_IsReady>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d108      	bne.n	8005358 <HAL_RCC_ClockConfig+0x42c>
      {
        return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e04e      	b.n	80053e8 <HAL_RCC_ClockConfig+0x4bc>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800534a:	f7fe fe0f 	bl	8003f6c <LL_RCC_HSI_IsReady>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d101      	bne.n	8005358 <HAL_RCC_ClockConfig+0x42c>
      {
        return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e047      	b.n	80053e8 <HAL_RCC_ClockConfig+0x4bc>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	4618      	mov	r0, r3
 800535e:	f7fe ffa2 	bl	80042a6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005362:	f7fd f961 	bl	8002628 <HAL_GetTick>
 8005366:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005368:	e00a      	b.n	8005380 <HAL_RCC_ClockConfig+0x454>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800536a:	f7fd f95d 	bl	8002628 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	f241 3288 	movw	r2, #5000	; 0x1388
 8005378:	4293      	cmp	r3, r2
 800537a:	d901      	bls.n	8005380 <HAL_RCC_ClockConfig+0x454>
      {
        return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e033      	b.n	80053e8 <HAL_RCC_ClockConfig+0x4bc>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005380:	f7fe ffa5 	bl	80042ce <LL_RCC_GetSysClkSource>
 8005384:	4602      	mov	r2, r0
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	429a      	cmp	r2, r3
 800538e:	d1ec      	bne.n	800536a <HAL_RCC_ClockConfig+0x43e>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005390:	4b18      	ldr	r3, [pc, #96]	; (80053f4 <HAL_RCC_ClockConfig+0x4c8>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0307 	and.w	r3, r3, #7
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	429a      	cmp	r2, r3
 800539c:	d21b      	bcs.n	80053d6 <HAL_RCC_ClockConfig+0x4aa>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800539e:	4b15      	ldr	r3, [pc, #84]	; (80053f4 <HAL_RCC_ClockConfig+0x4c8>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f023 0207 	bic.w	r2, r3, #7
 80053a6:	4913      	ldr	r1, [pc, #76]	; (80053f4 <HAL_RCC_ClockConfig+0x4c8>)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053ae:	f7fd f93b 	bl	8002628 <HAL_GetTick>
 80053b2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053b4:	e008      	b.n	80053c8 <HAL_RCC_ClockConfig+0x49c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80053b6:	f7fd f937 	bl	8002628 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d901      	bls.n	80053c8 <HAL_RCC_ClockConfig+0x49c>
      {
        return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e00f      	b.n	80053e8 <HAL_RCC_ClockConfig+0x4bc>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053c8:	4b0a      	ldr	r3, [pc, #40]	; (80053f4 <HAL_RCC_ClockConfig+0x4c8>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0307 	and.w	r3, r3, #7
 80053d0:	683a      	ldr	r2, [r7, #0]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d1ef      	bne.n	80053b6 <HAL_RCC_ClockConfig+0x48a>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 80053d6:	f7fc ff33 	bl	8002240 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80053da:	f7fd f931 	bl	8002640 <HAL_GetTickPrio>
 80053de:	4603      	mov	r3, r0
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7fd f8d5 	bl	8002590 <HAL_InitTick>
 80053e6:	4603      	mov	r3, r0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	0800ee40 	.word	0x0800ee40
 80053f4:	58004000 	.word	0x58004000

080053f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053f8:	b590      	push	{r4, r7, lr}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053fe:	f7fe ff66 	bl	80042ce <LL_RCC_GetSysClkSource>
 8005402:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10a      	bne.n	8005420 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800540a:	f7fe ff22 	bl	8004252 <LL_RCC_MSI_GetRange>
 800540e:	4603      	mov	r3, r0
 8005410:	091b      	lsrs	r3, r3, #4
 8005412:	f003 030f 	and.w	r3, r3, #15
 8005416:	4a2a      	ldr	r2, [pc, #168]	; (80054c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800541c:	60fb      	str	r3, [r7, #12]
 800541e:	e04a      	b.n	80054b6 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b04      	cmp	r3, #4
 8005424:	d102      	bne.n	800542c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005426:	4b27      	ldr	r3, [pc, #156]	; (80054c4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005428:	60fb      	str	r3, [r7, #12]
 800542a:	e044      	b.n	80054b6 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b08      	cmp	r3, #8
 8005430:	d10a      	bne.n	8005448 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005432:	f7fe fd1d 	bl	8003e70 <LL_RCC_HSE_IsEnabledDiv2>
 8005436:	4603      	mov	r3, r0
 8005438:	2b01      	cmp	r3, #1
 800543a:	d102      	bne.n	8005442 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800543c:	4b21      	ldr	r3, [pc, #132]	; (80054c4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800543e:	60fb      	str	r3, [r7, #12]
 8005440:	e039      	b.n	80054b6 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005442:	4b21      	ldr	r3, [pc, #132]	; (80054c8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005444:	60fb      	str	r3, [r7, #12]
 8005446:	e036      	b.n	80054b6 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005448:	f7ff f83d 	bl	80044c6 <LL_RCC_PLL_GetMainSource>
 800544c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b02      	cmp	r3, #2
 8005452:	d002      	beq.n	800545a <HAL_RCC_GetSysClockFreq+0x62>
 8005454:	2b03      	cmp	r3, #3
 8005456:	d003      	beq.n	8005460 <HAL_RCC_GetSysClockFreq+0x68>
 8005458:	e00d      	b.n	8005476 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800545a:	4b1a      	ldr	r3, [pc, #104]	; (80054c4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800545c:	60bb      	str	r3, [r7, #8]
        break;
 800545e:	e015      	b.n	800548c <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005460:	f7fe fd06 	bl	8003e70 <LL_RCC_HSE_IsEnabledDiv2>
 8005464:	4603      	mov	r3, r0
 8005466:	2b01      	cmp	r3, #1
 8005468:	d102      	bne.n	8005470 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800546a:	4b16      	ldr	r3, [pc, #88]	; (80054c4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800546c:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800546e:	e00d      	b.n	800548c <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8005470:	4b15      	ldr	r3, [pc, #84]	; (80054c8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005472:	60bb      	str	r3, [r7, #8]
        break;
 8005474:	e00a      	b.n	800548c <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005476:	f7fe feec 	bl	8004252 <LL_RCC_MSI_GetRange>
 800547a:	4603      	mov	r3, r0
 800547c:	091b      	lsrs	r3, r3, #4
 800547e:	f003 030f 	and.w	r3, r3, #15
 8005482:	4a0f      	ldr	r2, [pc, #60]	; (80054c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005488:	60bb      	str	r3, [r7, #8]
        break;
 800548a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800548c:	f7fe fff6 	bl	800447c <LL_RCC_PLL_GetN>
 8005490:	4602      	mov	r2, r0
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	fb03 f402 	mul.w	r4, r3, r2
 8005498:	f7ff f809 	bl	80044ae <LL_RCC_PLL_GetDivider>
 800549c:	4603      	mov	r3, r0
 800549e:	091b      	lsrs	r3, r3, #4
 80054a0:	3301      	adds	r3, #1
 80054a2:	fbb4 f4f3 	udiv	r4, r4, r3
 80054a6:	f7fe fff6 	bl	8004496 <LL_RCC_PLL_GetR>
 80054aa:	4603      	mov	r3, r0
 80054ac:	0f5b      	lsrs	r3, r3, #29
 80054ae:	3301      	adds	r3, #1
 80054b0:	fbb4 f3f3 	udiv	r3, r4, r3
 80054b4:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80054b6:	68fb      	ldr	r3, [r7, #12]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3714      	adds	r7, #20
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd90      	pop	{r4, r7, pc}
 80054c0:	0800f0a8 	.word	0x0800f0a8
 80054c4:	00f42400 	.word	0x00f42400
 80054c8:	01e84800 	.word	0x01e84800

080054cc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054cc:	b598      	push	{r3, r4, r7, lr}
 80054ce:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80054d0:	f7ff ff92 	bl	80053f8 <HAL_RCC_GetSysClockFreq>
 80054d4:	4604      	mov	r4, r0
 80054d6:	f7fe ff6f 	bl	80043b8 <LL_RCC_GetAHBPrescaler>
 80054da:	4603      	mov	r3, r0
 80054dc:	091b      	lsrs	r3, r3, #4
 80054de:	f003 030f 	and.w	r3, r3, #15
 80054e2:	4a03      	ldr	r2, [pc, #12]	; (80054f0 <HAL_RCC_GetHCLKFreq+0x24>)
 80054e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054e8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	bd98      	pop	{r3, r4, r7, pc}
 80054f0:	0800f048 	.word	0x0800f048

080054f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054f4:	b598      	push	{r3, r4, r7, lr}
 80054f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80054f8:	f7ff ffe8 	bl	80054cc <HAL_RCC_GetHCLKFreq>
 80054fc:	4604      	mov	r4, r0
 80054fe:	f7fe ff75 	bl	80043ec <LL_RCC_GetAPB1Prescaler>
 8005502:	4603      	mov	r3, r0
 8005504:	0a1b      	lsrs	r3, r3, #8
 8005506:	f003 0307 	and.w	r3, r3, #7
 800550a:	4a04      	ldr	r2, [pc, #16]	; (800551c <HAL_RCC_GetPCLK1Freq+0x28>)
 800550c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005510:	f003 031f 	and.w	r3, r3, #31
 8005514:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005518:	4618      	mov	r0, r3
 800551a:	bd98      	pop	{r3, r4, r7, pc}
 800551c:	0800f088 	.word	0x0800f088

08005520 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005520:	b598      	push	{r3, r4, r7, lr}
 8005522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005524:	f7ff ffd2 	bl	80054cc <HAL_RCC_GetHCLKFreq>
 8005528:	4604      	mov	r4, r0
 800552a:	f7fe ff6b 	bl	8004404 <LL_RCC_GetAPB2Prescaler>
 800552e:	4603      	mov	r3, r0
 8005530:	0adb      	lsrs	r3, r3, #11
 8005532:	f003 0307 	and.w	r3, r3, #7
 8005536:	4a04      	ldr	r2, [pc, #16]	; (8005548 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800553c:	f003 031f 	and.w	r3, r3, #31
 8005540:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005544:	4618      	mov	r0, r3
 8005546:	bd98      	pop	{r3, r4, r7, pc}
 8005548:	0800f088 	.word	0x0800f088

0800554c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800554c:	b590      	push	{r4, r7, lr}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq, msifreq;

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d025      	beq.n	80055a6 <RCC_SetFlashLatencyFromMSIRange+0x5a>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2b10      	cmp	r3, #16
 800555e:	d022      	beq.n	80055a6 <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b20      	cmp	r3, #32
 8005564:	d01f      	beq.n	80055a6 <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b30      	cmp	r3, #48	; 0x30
 800556a:	d01c      	beq.n	80055a6 <RCC_SetFlashLatencyFromMSIRange+0x5a>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b40      	cmp	r3, #64	; 0x40
 8005570:	d019      	beq.n	80055a6 <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b50      	cmp	r3, #80	; 0x50
 8005576:	d016      	beq.n	80055a6 <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b60      	cmp	r3, #96	; 0x60
 800557c:	d013      	beq.n	80055a6 <RCC_SetFlashLatencyFromMSIRange+0x5a>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b70      	cmp	r3, #112	; 0x70
 8005582:	d010      	beq.n	80055a6 <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b80      	cmp	r3, #128	; 0x80
 8005588:	d00d      	beq.n	80055a6 <RCC_SetFlashLatencyFromMSIRange+0x5a>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2b90      	cmp	r3, #144	; 0x90
 800558e:	d00a      	beq.n	80055a6 <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2ba0      	cmp	r3, #160	; 0xa0
 8005594:	d007      	beq.n	80055a6 <RCC_SetFlashLatencyFromMSIRange+0x5a>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2bb0      	cmp	r3, #176	; 0xb0
 800559a:	d004      	beq.n	80055a6 <RCC_SetFlashLatencyFromMSIRange+0x5a>
 800559c:	f240 6191 	movw	r1, #1681	; 0x691
 80055a0:	4817      	ldr	r0, [pc, #92]	; (8005600 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80055a2:	f7fc fa27 	bl	80019f4 <assert_failed>

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2bb0      	cmp	r3, #176	; 0xb0
 80055aa:	d903      	bls.n	80055b4 <RCC_SetFlashLatencyFromMSIRange+0x68>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80055ac:	4b15      	ldr	r3, [pc, #84]	; (8005604 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b0:	60fb      	str	r3, [r7, #12]
 80055b2:	e007      	b.n	80055c4 <RCC_SetFlashLatencyFromMSIRange+0x78>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	091b      	lsrs	r3, r3, #4
 80055b8:	f003 030f 	and.w	r3, r3, #15
 80055bc:	4a11      	ldr	r2, [pc, #68]	; (8005604 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055c2:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80055c4:	f7fe ff04 	bl	80043d0 <LL_RCC_GetAHB4Prescaler>
 80055c8:	4603      	mov	r3, r0
 80055ca:	091b      	lsrs	r3, r3, #4
 80055cc:	f003 030f 	and.w	r3, r3, #15
 80055d0:	4a0d      	ldr	r2, [pc, #52]	; (8005608 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80055d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055dc:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	4a0a      	ldr	r2, [pc, #40]	; (800560c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80055e2:	fba2 2303 	umull	r2, r3, r2, r3
 80055e6:	0c9c      	lsrs	r4, r3, #18
 80055e8:	f7fe fc24 	bl	8003e34 <HAL_PWREx_GetVoltageRange>
 80055ec:	4603      	mov	r3, r0
 80055ee:	4619      	mov	r1, r3
 80055f0:	4620      	mov	r0, r4
 80055f2:	f000 f80d 	bl	8005610 <RCC_SetFlashLatency>
 80055f6:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3714      	adds	r7, #20
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd90      	pop	{r4, r7, pc}
 8005600:	0800ee40 	.word	0x0800ee40
 8005604:	0800f0a8 	.word	0x0800f0a8
 8005608:	0800f048 	.word	0x0800f048
 800560c:	431bde83 	.word	0x431bde83

08005610 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005610:	b590      	push	{r4, r7, lr}
 8005612:	b093      	sub	sp, #76	; 0x4c
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800561a:	4b39      	ldr	r3, [pc, #228]	; (8005700 <RCC_SetFlashLatency+0xf0>)
 800561c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005620:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005622:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005626:	4a37      	ldr	r2, [pc, #220]	; (8005704 <RCC_SetFlashLatency+0xf4>)
 8005628:	f107 031c 	add.w	r3, r7, #28
 800562c:	ca07      	ldmia	r2, {r0, r1, r2}
 800562e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005632:	4b35      	ldr	r3, [pc, #212]	; (8005708 <RCC_SetFlashLatency+0xf8>)
 8005634:	f107 040c 	add.w	r4, r7, #12
 8005638:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800563a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800563e:	2300      	movs	r3, #0
 8005640:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005648:	d11c      	bne.n	8005684 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800564a:	2300      	movs	r3, #0
 800564c:	643b      	str	r3, [r7, #64]	; 0x40
 800564e:	e015      	b.n	800567c <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005658:	4413      	add	r3, r2
 800565a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	429a      	cmp	r2, r3
 8005662:	d808      	bhi.n	8005676 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800566c:	4413      	add	r3, r2
 800566e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005672:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005674:	e022      	b.n	80056bc <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005678:	3301      	adds	r3, #1
 800567a:	643b      	str	r3, [r7, #64]	; 0x40
 800567c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800567e:	2b03      	cmp	r3, #3
 8005680:	d9e6      	bls.n	8005650 <RCC_SetFlashLatency+0x40>
 8005682:	e01b      	b.n	80056bc <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005684:	2300      	movs	r3, #0
 8005686:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005688:	e015      	b.n	80056b6 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800568a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005692:	4413      	add	r3, r2
 8005694:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	429a      	cmp	r2, r3
 800569c:	d808      	bhi.n	80056b0 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800569e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80056a6:	4413      	add	r3, r2
 80056a8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80056ac:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80056ae:	e005      	b.n	80056bc <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80056b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056b2:	3301      	adds	r3, #1
 80056b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d9e6      	bls.n	800568a <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80056bc:	4b13      	ldr	r3, [pc, #76]	; (800570c <RCC_SetFlashLatency+0xfc>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f023 0207 	bic.w	r2, r3, #7
 80056c4:	4911      	ldr	r1, [pc, #68]	; (800570c <RCC_SetFlashLatency+0xfc>)
 80056c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056c8:	4313      	orrs	r3, r2
 80056ca:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80056cc:	f7fc ffac 	bl	8002628 <HAL_GetTick>
 80056d0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80056d2:	e008      	b.n	80056e6 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80056d4:	f7fc ffa8 	bl	8002628 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d901      	bls.n	80056e6 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e007      	b.n	80056f6 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80056e6:	4b09      	ldr	r3, [pc, #36]	; (800570c <RCC_SetFlashLatency+0xfc>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0307 	and.w	r3, r3, #7
 80056ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d1ef      	bne.n	80056d4 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	374c      	adds	r7, #76	; 0x4c
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd90      	pop	{r4, r7, pc}
 80056fe:	bf00      	nop
 8005700:	0800ee78 	.word	0x0800ee78
 8005704:	0800ee88 	.word	0x0800ee88
 8005708:	0800ee94 	.word	0x0800ee94
 800570c:	58004000 	.word	0x58004000

08005710 <LL_RCC_LSE_IsEnabled>:
{
 8005710:	b480      	push	{r7}
 8005712:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800571c:	f003 0301 	and.w	r3, r3, #1
 8005720:	2b01      	cmp	r3, #1
 8005722:	d101      	bne.n	8005728 <LL_RCC_LSE_IsEnabled+0x18>
 8005724:	2301      	movs	r3, #1
 8005726:	e000      	b.n	800572a <LL_RCC_LSE_IsEnabled+0x1a>
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <LL_RCC_LSE_IsReady>:
{
 8005734:	b480      	push	{r7}
 8005736:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800573c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005740:	f003 0302 	and.w	r3, r3, #2
 8005744:	2b02      	cmp	r3, #2
 8005746:	d101      	bne.n	800574c <LL_RCC_LSE_IsReady+0x18>
 8005748:	2301      	movs	r3, #1
 800574a:	e000      	b.n	800574e <LL_RCC_LSE_IsReady+0x1a>
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <LL_RCC_SetRFWKPClockSource>:
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005764:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005768:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800576c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4313      	orrs	r3, r2
 8005774:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <LL_RCC_SetSMPSClockSource>:
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800578c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005792:	f023 0203 	bic.w	r2, r3, #3
 8005796:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4313      	orrs	r3, r2
 800579e:	624b      	str	r3, [r1, #36]	; 0x24
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <LL_RCC_SetSMPSPrescaler>:
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80057b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80057be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <LL_RCC_SetUSARTClockSource>:
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80057dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e4:	f023 0203 	bic.w	r2, r3, #3
 80057e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80057f4:	bf00      	nop
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <LL_RCC_SetLPUARTClockSource>:
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800580c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005810:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005814:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4313      	orrs	r3, r2
 800581c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <LL_RCC_SetI2CClockSource>:
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005838:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	091b      	lsrs	r3, r3, #4
 8005840:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005844:	43db      	mvns	r3, r3
 8005846:	401a      	ands	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	011b      	lsls	r3, r3, #4
 800584c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005850:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005854:	4313      	orrs	r3, r2
 8005856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800585a:	bf00      	nop
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <LL_RCC_SetLPTIMClockSource>:
{
 8005866:	b480      	push	{r7}
 8005868:	b083      	sub	sp, #12
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800586e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005872:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	0c1b      	lsrs	r3, r3, #16
 800587a:	041b      	lsls	r3, r3, #16
 800587c:	43db      	mvns	r3, r3
 800587e:	401a      	ands	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	041b      	lsls	r3, r3, #16
 8005884:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005888:	4313      	orrs	r3, r2
 800588a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800588e:	bf00      	nop
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <LL_RCC_SetSAIClockSource>:
{
 800589a:	b480      	push	{r7}
 800589c:	b083      	sub	sp, #12
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80058a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80058ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80058ba:	bf00      	nop
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <LL_RCC_SetRNGClockSource>:
{
 80058c6:	b480      	push	{r7}
 80058c8:	b083      	sub	sp, #12
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80058ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80058da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80058e6:	bf00      	nop
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <LL_RCC_SetCLK48ClockSource>:
{
 80058f2:	b480      	push	{r7}
 80058f4:	b083      	sub	sp, #12
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80058fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005902:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005906:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4313      	orrs	r3, r2
 800590e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005912:	bf00      	nop
 8005914:	370c      	adds	r7, #12
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <LL_RCC_SetUSBClockSource>:
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b082      	sub	sp, #8
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7ff ffe3 	bl	80058f2 <LL_RCC_SetCLK48ClockSource>
}
 800592c:	bf00      	nop
 800592e:	3708      	adds	r7, #8
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <LL_RCC_SetADCClockSource>:
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800593c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005944:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005948:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4313      	orrs	r3, r2
 8005950:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <LL_RCC_SetRTCClockSource>:
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800596c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005970:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005974:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4313      	orrs	r3, r2
 800597c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <LL_RCC_GetRTCClockSource>:
{
 800598c:	b480      	push	{r7}
 800598e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005998:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800599c:	4618      	mov	r0, r3
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr

080059a6 <LL_RCC_ForceBackupDomainReset>:
{
 80059a6:	b480      	push	{r7}
 80059a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80059aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80059be:	bf00      	nop
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <LL_RCC_ReleaseBackupDomainReset>:
{
 80059c8:	b480      	push	{r7}
 80059ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80059cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80059e0:	bf00      	nop
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr

080059ea <LL_RCC_PLLSAI1_Enable>:
{
 80059ea:	b480      	push	{r7}
 80059ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80059ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059fc:	6013      	str	r3, [r2, #0]
}
 80059fe:	bf00      	nop
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <LL_RCC_PLLSAI1_Disable>:
{
 8005a08:	b480      	push	{r7}
 8005a0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a1a:	6013      	str	r3, [r2, #0]
}
 8005a1c:	bf00      	nop
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <LL_RCC_PLLSAI1_IsReady>:
{
 8005a26:	b480      	push	{r7}
 8005a28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a38:	d101      	bne.n	8005a3e <LL_RCC_PLLSAI1_IsReady+0x18>
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e000      	b.n	8005a40 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
	...

08005a4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b088      	sub	sp, #32
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005a54:	2300      	movs	r3, #0
 8005a56:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005a58:	2300      	movs	r3, #0
 8005a5a:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0301 	and.w	r3, r3, #1
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d14b      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0302 	and.w	r3, r3, #2
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d145      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0304 	and.w	r3, r3, #4
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d13f      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0308 	and.w	r3, r3, #8
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d139      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0310 	and.w	r3, r3, #16
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d133      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0320 	and.w	r3, r3, #32
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d12d      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d127      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d121      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d11b      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d115      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10f      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d109      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d103      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8005af8:	219b      	movs	r1, #155	; 0x9b
 8005afa:	485b      	ldr	r0, [pc, #364]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8005afc:	f7fb ff7a 	bl	80019f4 <assert_failed>

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d04a      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d012      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0xee>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b1c:	d00d      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0xee>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b26:	d008      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0xee>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005b30:	d003      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0xee>
 8005b32:	21a2      	movs	r1, #162	; 0xa2
 8005b34:	484c      	ldr	r0, [pc, #304]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8005b36:	f7fb ff5d 	bl	80019f4 <assert_failed>

    switch (PeriphClkInit->Sai1ClockSelection)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b42:	d00c      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005b44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b48:	d802      	bhi.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d010      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8005b4e:	e017      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8005b50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b54:	d017      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x13a>
 8005b56:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005b5a:	d016      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8005b5c:	e010      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x134>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b6c:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005b6e:	e00d      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	3304      	adds	r3, #4
 8005b74:	4618      	mov	r0, r3
 8005b76:	f000 fa8d 	bl	8006094 <RCCEx_PLLSAI1_ConfigNP>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005b7e:	e005      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x140>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	77fb      	strb	r3, [r7, #31]
        break;
 8005b84:	e002      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005b86:	bf00      	nop
 8005b88:	e000      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005b8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b8c:	7ffb      	ldrb	r3, [r7, #31]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d105      	bne.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x152>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7ff fe7f 	bl	800589a <LL_RCC_SetSAIClockSource>
 8005b9c:	e001      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x156>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b9e:	7ffb      	ldrb	r3, [r7, #31]
 8005ba0:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d060      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005bae:	f7ff feed 	bl	800598c <LL_RCC_GetRTCClockSource>
 8005bb2:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d012      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bc4:	d00d      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bce:	d008      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bd8:	d003      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005bda:	21d4      	movs	r1, #212	; 0xd4
 8005bdc:	4822      	ldr	r0, [pc, #136]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8005bde:	f7fb ff09 	bl	80019f4 <assert_failed>

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be6:	69ba      	ldr	r2, [r7, #24]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d03f      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x220>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005bec:	f7fe f912 	bl	8003e14 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d105      	bne.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7ff feb0 	bl	8005960 <LL_RCC_SetRTCClockSource>
 8005c00:	e02e      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x214>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c0a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005c0c:	f7ff fecb 	bl	80059a6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005c10:	f7ff feda 	bl	80059c8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005c22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005c2c:	f7ff fd70 	bl	8005710 <LL_RCC_LSE_IsEnabled>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d114      	bne.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x214>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005c36:	f7fc fcf7 	bl	8002628 <HAL_GetTick>
 8005c3a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005c3c:	e00b      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c3e:	f7fc fcf3 	bl	8002628 <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d902      	bls.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x20a>
            {
              ret = HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	77fb      	strb	r3, [r7, #31]
              break;
 8005c54:	e004      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x214>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005c56:	f7ff fd6d 	bl	8005734 <LL_RCC_LSE_IsReady>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d1ee      	bne.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005c60:	7ffb      	ldrb	r3, [r7, #31]
 8005c62:	77bb      	strb	r3, [r7, #30]
 8005c64:	e004      	b.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x224>
 8005c66:	bf00      	nop
 8005c68:	0800eea4 	.word	0x0800eea4
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c6c:	7ffb      	ldrb	r3, [r7, #31]
 8005c6e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0301 	and.w	r3, r3, #1
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d019      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x264>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d010      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d00c      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	2b03      	cmp	r3, #3
 8005c92:	d008      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d004      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8005c9c:	f44f 7189 	mov.w	r1, #274	; 0x112
 8005ca0:	4896      	ldr	r0, [pc, #600]	; (8005efc <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8005ca2:	f7fb fea7 	bl	80019f4 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7ff fd92 	bl	80057d4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d01c      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	69db      	ldr	r3, [r3, #28]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d013      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	69db      	ldr	r3, [r3, #28]
 8005cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ccc:	d00e      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	69db      	ldr	r3, [r3, #28]
 8005cd2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cd6:	d009      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	69db      	ldr	r3, [r3, #28]
 8005cdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ce0:	d004      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8005ce2:	f240 111d 	movw	r1, #285	; 0x11d
 8005ce6:	4885      	ldr	r0, [pc, #532]	; (8005efc <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8005ce8:	f7fb fe84 	bl	80019f4 <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	69db      	ldr	r3, [r3, #28]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7ff fd85 	bl	8005800 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0310 	and.w	r3, r3, #16
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d01d      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d06:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005d0a:	d013      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d10:	4a7b      	ldr	r2, [pc, #492]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d00e      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1a:	4a7a      	ldr	r2, [pc, #488]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d009      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d24:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8005d28:	d004      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8005d2a:	f240 1127 	movw	r1, #295	; 0x127
 8005d2e:	4873      	ldr	r0, [pc, #460]	; (8005efc <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8005d30:	f7fb fe60 	bl	80019f4 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7ff fd94 	bl	8005866 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0320 	and.w	r3, r3, #32
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d01d      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x33a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005d52:	d013      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d58:	4a6b      	ldr	r2, [pc, #428]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d00e      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d62:	4a6a      	ldr	r2, [pc, #424]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x4c0>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d009      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6c:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8005d70:	d004      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005d72:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8005d76:	4861      	ldr	r0, [pc, #388]	; (8005efc <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8005d78:	f7fb fe3c 	bl	80019f4 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7ff fd70 	bl	8005866 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0304 	and.w	r3, r3, #4
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d018      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x378>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d9a:	d00e      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	4a5b      	ldr	r2, [pc, #364]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x4c4>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d009      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	4a5a      	ldr	r2, [pc, #360]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d004      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005db0:	f44f 719b 	mov.w	r1, #310	; 0x136
 8005db4:	4851      	ldr	r0, [pc, #324]	; (8005efc <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8005db6:	f7fb fe1d 	bl	80019f4 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7ff fd34 	bl	800582c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0308 	and.w	r3, r3, #8
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d018      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005dd8:	d00e      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dde:	4a4e      	ldr	r2, [pc, #312]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d009      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de8:	4a4c      	ldr	r2, [pc, #304]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d004      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005dee:	f240 1141 	movw	r1, #321	; 0x141
 8005df2:	4842      	ldr	r0, [pc, #264]	; (8005efc <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8005df4:	f7fb fdfe 	bl	80019f4 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7ff fd15 	bl	800582c <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d03a      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d013      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e1e:	d00e      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e28:	d009      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e2e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005e32:	d004      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005e34:	f240 114b 	movw	r1, #331	; 0x14b
 8005e38:	4830      	ldr	r0, [pc, #192]	; (8005efc <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8005e3a:	f7fb fddb 	bl	80019f4 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7ff fd6b 	bl	800591e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e50:	d107      	bne.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x416>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e60:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e6a:	d10b      	bne.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x438>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	3304      	adds	r3, #4
 8005e70:	4618      	mov	r0, r3
 8005e72:	f000 f9a7 	bl	80061c4 <RCCEx_PLLSAI1_ConfigNQ>
 8005e76:	4603      	mov	r3, r0
 8005e78:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005e7a:	7ffb      	ldrb	r3, [r7, #31]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d001      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x438>
      {
        /* set overall return value */
        status = ret;
 8005e80:	7ffb      	ldrb	r3, [r7, #31]
 8005e82:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d05f      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x504>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e98:	d01c      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005ea2:	d017      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea8:	f1b3 5fe0 	cmp.w	r3, #469762048	; 0x1c000000
 8005eac:	d012      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00e      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ebe:	d009      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ec8:	d004      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005eca:	f240 1167 	movw	r1, #359	; 0x167
 8005ece:	480b      	ldr	r0, [pc, #44]	; (8005efc <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8005ed0:	f7fb fd90 	bl	80019f4 <assert_failed>

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005edc:	d008      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ee6:	d003      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d117      	bne.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7ff fce6 	bl	80058c6 <LL_RCC_SetRNGClockSource>
 8005efa:	e01c      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8005efc:	0800eea4 	.word	0x0800eea4
 8005f00:	000c0004 	.word	0x000c0004
 8005f04:	000c0008 	.word	0x000c0008
 8005f08:	00300010 	.word	0x00300010
 8005f0c:	00300020 	.word	0x00300020
 8005f10:	00030100 	.word	0x00030100
 8005f14:	00030200 	.word	0x00030200
 8005f18:	00301000 	.word	0x00301000
 8005f1c:	00302000 	.word	0x00302000
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f28:	60fb      	str	r3, [r7, #12]
 8005f2a:	2000      	movs	r0, #0
 8005f2c:	f7ff fccb 	bl	80058c6 <LL_RCC_SetRNGClockSource>
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f7ff fcde 	bl	80058f2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005f3e:	d107      	bne.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f4e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d03a      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x586>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d013      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x540>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f6c:	d00e      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x540>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f76:	d009      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x540>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f7c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f80:	d004      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x540>
 8005f82:	f240 1177 	movw	r1, #375	; 0x177
 8005f86:	4842      	ldr	r0, [pc, #264]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005f88:	f7fb fd34 	bl	80019f4 <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7ff fccf 	bl	8005934 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f9e:	d107      	bne.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x564>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fae:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fb8:	d10b      	bne.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x586>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	3304      	adds	r3, #4
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 f998 	bl	80062f4 <RCCEx_PLLSAI1_ConfigNR>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005fc8:	7ffb      	ldrb	r3, [r7, #31]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d001      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x586>
      {
        /* set overall return value */
        status = ret;
 8005fce:	7ffb      	ldrb	r3, [r7, #31]
 8005fd0:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d01c      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d013      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fee:	d00e      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ff8:	d009      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ffe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006002:	d004      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
 8006004:	f240 1195 	movw	r1, #405	; 0x195
 8006008:	4821      	ldr	r0, [pc, #132]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800600a:	f7fb fcf3 	bl	80019f4 <assert_failed>

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006012:	4618      	mov	r0, r3
 8006014:	f7ff fba0 	bl	8005758 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d02f      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x638>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006028:	2b00      	cmp	r3, #0
 800602a:	d010      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x602>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006030:	2b10      	cmp	r3, #16
 8006032:	d00c      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x602>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006038:	2b20      	cmp	r3, #32
 800603a:	d008      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x602>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006040:	2b30      	cmp	r3, #48	; 0x30
 8006042:	d004      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x602>
 8006044:	f240 11a1 	movw	r1, #417	; 0x1a1
 8006048:	4811      	ldr	r0, [pc, #68]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800604a:	f7fb fcd3 	bl	80019f4 <assert_failed>
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00c      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800605a:	2b01      	cmp	r3, #1
 800605c:	d008      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x624>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006062:	2b02      	cmp	r3, #2
 8006064:	d004      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8006066:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 800606a:	4809      	ldr	r0, [pc, #36]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800606c:	f7fb fcc2 	bl	80019f4 <assert_failed>

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006074:	4618      	mov	r0, r3
 8006076:	f7ff fb99 	bl	80057ac <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800607e:	4618      	mov	r0, r3
 8006080:	f7ff fb80 	bl	8005784 <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 8006084:	7fbb      	ldrb	r3, [r7, #30]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3720      	adds	r7, #32
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	0800eea4 	.word	0x0800eea4

08006094 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800609c:	2300      	movs	r3, #0
 800609e:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2b05      	cmp	r3, #5
 80060a6:	d903      	bls.n	80060b0 <RCCEx_PLLSAI1_ConfigNP+0x1c>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2b7f      	cmp	r3, #127	; 0x7f
 80060ae:	d904      	bls.n	80060ba <RCCEx_PLLSAI1_ConfigNP+0x26>
 80060b0:	f240 718d 	movw	r1, #1933	; 0x78d
 80060b4:	4842      	ldr	r0, [pc, #264]	; (80061c0 <RCCEx_PLLSAI1_ConfigNP+0x12c>)
 80060b6:	f7fb fc9d 	bl	80019f4 <assert_failed>
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060c2:	d304      	bcc.n	80060ce <RCCEx_PLLSAI1_ConfigNP+0x3a>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	f5b3 1f78 	cmp.w	r3, #4063232	; 0x3e0000
 80060cc:	d904      	bls.n	80060d8 <RCCEx_PLLSAI1_ConfigNP+0x44>
 80060ce:	f240 718e 	movw	r1, #1934	; 0x78e
 80060d2:	483b      	ldr	r0, [pc, #236]	; (80061c0 <RCCEx_PLLSAI1_ConfigNP+0x12c>)
 80060d4:	f7fb fc8e 	bl	80019f4 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d10b      	bne.n	80060fc <RCCEx_PLLSAI1_ConfigNP+0x68>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d105      	bne.n	80060fc <RCCEx_PLLSAI1_ConfigNP+0x68>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d007      	beq.n	800610c <RCCEx_PLLSAI1_ConfigNP+0x78>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8006104:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d004      	beq.n	8006116 <RCCEx_PLLSAI1_ConfigNP+0x82>
 800610c:	f240 718f 	movw	r1, #1935	; 0x78f
 8006110:	482b      	ldr	r0, [pc, #172]	; (80061c0 <RCCEx_PLLSAI1_ConfigNP+0x12c>)
 8006112:	f7fb fc6f 	bl	80019f4 <assert_failed>

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006116:	f7ff fc77 	bl	8005a08 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800611a:	f7fc fa85 	bl	8002628 <HAL_GetTick>
 800611e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006120:	e009      	b.n	8006136 <RCCEx_PLLSAI1_ConfigNP+0xa2>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006122:	f7fc fa81 	bl	8002628 <HAL_GetTick>
 8006126:	4602      	mov	r2, r0
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	2b02      	cmp	r3, #2
 800612e:	d902      	bls.n	8006136 <RCCEx_PLLSAI1_ConfigNP+0xa2>
    {
      status = HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	73fb      	strb	r3, [r7, #15]
      break;
 8006134:	e004      	b.n	8006140 <RCCEx_PLLSAI1_ConfigNP+0xac>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006136:	f7ff fc76 	bl	8005a26 <LL_RCC_PLLSAI1_IsReady>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1f0      	bne.n	8006122 <RCCEx_PLLSAI1_ConfigNP+0x8e>
    }
  }

  if (status == HAL_OK)
 8006140:	7bfb      	ldrb	r3, [r7, #15]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d137      	bne.n	80061b6 <RCCEx_PLLSAI1_ConfigNP+0x122>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	021b      	lsls	r3, r3, #8
 8006156:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800615a:	4313      	orrs	r3, r2
 800615c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800615e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006170:	4313      	orrs	r3, r2
 8006172:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006174:	f7ff fc39 	bl	80059ea <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006178:	f7fc fa56 	bl	8002628 <HAL_GetTick>
 800617c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800617e:	e009      	b.n	8006194 <RCCEx_PLLSAI1_ConfigNP+0x100>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006180:	f7fc fa52 	bl	8002628 <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	2b02      	cmp	r3, #2
 800618c:	d902      	bls.n	8006194 <RCCEx_PLLSAI1_ConfigNP+0x100>
      {
        status = HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	73fb      	strb	r3, [r7, #15]
        break;
 8006192:	e004      	b.n	800619e <RCCEx_PLLSAI1_ConfigNP+0x10a>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006194:	f7ff fc47 	bl	8005a26 <LL_RCC_PLLSAI1_IsReady>
 8006198:	4603      	mov	r3, r0
 800619a:	2b01      	cmp	r3, #1
 800619c:	d1f0      	bne.n	8006180 <RCCEx_PLLSAI1_ConfigNP+0xec>
      }
    }

    if (status == HAL_OK)
 800619e:	7bfb      	ldrb	r3, [r7, #15]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d108      	bne.n	80061b6 <RCCEx_PLLSAI1_ConfigNP+0x122>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80061a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061a8:	691a      	ldr	r2, [r3, #16]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061b2:	4313      	orrs	r3, r2
 80061b4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80061b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	0800eea4 	.word	0x0800eea4

080061c4 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061cc:	2300      	movs	r3, #0
 80061ce:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2b05      	cmp	r3, #5
 80061d6:	d903      	bls.n	80061e0 <RCCEx_PLLSAI1_ConfigNQ+0x1c>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2b7f      	cmp	r3, #127	; 0x7f
 80061de:	d904      	bls.n	80061ea <RCCEx_PLLSAI1_ConfigNQ+0x26>
 80061e0:	f240 71d2 	movw	r1, #2002	; 0x7d2
 80061e4:	4842      	ldr	r0, [pc, #264]	; (80062f0 <RCCEx_PLLSAI1_ConfigNQ+0x12c>)
 80061e6:	f7fb fc05 	bl	80019f4 <assert_failed>
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061f2:	d304      	bcc.n	80061fe <RCCEx_PLLSAI1_ConfigNQ+0x3a>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80061fc:	d904      	bls.n	8006208 <RCCEx_PLLSAI1_ConfigNQ+0x44>
 80061fe:	f240 71d3 	movw	r1, #2003	; 0x7d3
 8006202:	483b      	ldr	r0, [pc, #236]	; (80062f0 <RCCEx_PLLSAI1_ConfigNQ+0x12c>)
 8006204:	f7fb fbf6 	bl	80019f4 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d10b      	bne.n	800622c <RCCEx_PLLSAI1_ConfigNQ+0x68>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d105      	bne.n	800622c <RCCEx_PLLSAI1_ConfigNQ+0x68>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d007      	beq.n	800623c <RCCEx_PLLSAI1_ConfigNQ+0x78>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8006234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006238:	2b00      	cmp	r3, #0
 800623a:	d004      	beq.n	8006246 <RCCEx_PLLSAI1_ConfigNQ+0x82>
 800623c:	f240 71d4 	movw	r1, #2004	; 0x7d4
 8006240:	482b      	ldr	r0, [pc, #172]	; (80062f0 <RCCEx_PLLSAI1_ConfigNQ+0x12c>)
 8006242:	f7fb fbd7 	bl	80019f4 <assert_failed>

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006246:	f7ff fbdf 	bl	8005a08 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800624a:	f7fc f9ed 	bl	8002628 <HAL_GetTick>
 800624e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006250:	e009      	b.n	8006266 <RCCEx_PLLSAI1_ConfigNQ+0xa2>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006252:	f7fc f9e9 	bl	8002628 <HAL_GetTick>
 8006256:	4602      	mov	r2, r0
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	2b02      	cmp	r3, #2
 800625e:	d902      	bls.n	8006266 <RCCEx_PLLSAI1_ConfigNQ+0xa2>
    {
      status = HAL_TIMEOUT;
 8006260:	2303      	movs	r3, #3
 8006262:	73fb      	strb	r3, [r7, #15]
      break;
 8006264:	e004      	b.n	8006270 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006266:	f7ff fbde 	bl	8005a26 <LL_RCC_PLLSAI1_IsReady>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1f0      	bne.n	8006252 <RCCEx_PLLSAI1_ConfigNQ+0x8e>
    }
  }

  if (status == HAL_OK)
 8006270:	7bfb      	ldrb	r3, [r7, #15]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d137      	bne.n	80062e6 <RCCEx_PLLSAI1_ConfigNQ+0x122>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	021b      	lsls	r3, r3, #8
 8006286:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800628a:	4313      	orrs	r3, r2
 800628c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800628e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062a0:	4313      	orrs	r3, r2
 80062a2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80062a4:	f7ff fba1 	bl	80059ea <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062a8:	f7fc f9be 	bl	8002628 <HAL_GetTick>
 80062ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80062ae:	e009      	b.n	80062c4 <RCCEx_PLLSAI1_ConfigNQ+0x100>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80062b0:	f7fc f9ba 	bl	8002628 <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d902      	bls.n	80062c4 <RCCEx_PLLSAI1_ConfigNQ+0x100>
      {
        status = HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	73fb      	strb	r3, [r7, #15]
        break;
 80062c2:	e004      	b.n	80062ce <RCCEx_PLLSAI1_ConfigNQ+0x10a>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80062c4:	f7ff fbaf 	bl	8005a26 <LL_RCC_PLLSAI1_IsReady>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d1f0      	bne.n	80062b0 <RCCEx_PLLSAI1_ConfigNQ+0xec>
      }
    }

    if (status == HAL_OK)
 80062ce:	7bfb      	ldrb	r3, [r7, #15]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d108      	bne.n	80062e6 <RCCEx_PLLSAI1_ConfigNQ+0x122>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80062d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062d8:	691a      	ldr	r2, [r3, #16]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062e2:	4313      	orrs	r3, r2
 80062e4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80062e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	0800eea4 	.word	0x0800eea4

080062f4 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062fc:	2300      	movs	r3, #0
 80062fe:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2b05      	cmp	r3, #5
 8006306:	d903      	bls.n	8006310 <RCCEx_PLLSAI1_ConfigNR+0x1c>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2b7f      	cmp	r3, #127	; 0x7f
 800630e:	d904      	bls.n	800631a <RCCEx_PLLSAI1_ConfigNR+0x26>
 8006310:	f640 0116 	movw	r1, #2070	; 0x816
 8006314:	4842      	ldr	r0, [pc, #264]	; (8006420 <RCCEx_PLLSAI1_ConfigNR+0x12c>)
 8006316:	f7fb fb6d 	bl	80019f4 <assert_failed>
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006322:	d304      	bcc.n	800632e <RCCEx_PLLSAI1_ConfigNR+0x3a>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800632c:	d904      	bls.n	8006338 <RCCEx_PLLSAI1_ConfigNR+0x44>
 800632e:	f640 0117 	movw	r1, #2071	; 0x817
 8006332:	483b      	ldr	r0, [pc, #236]	; (8006420 <RCCEx_PLLSAI1_ConfigNR+0x12c>)
 8006334:	f7fb fb5e 	bl	80019f4 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10b      	bne.n	800635c <RCCEx_PLLSAI1_ConfigNR+0x68>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d105      	bne.n	800635c <RCCEx_PLLSAI1_ConfigNR+0x68>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d007      	beq.n	800636c <RCCEx_PLLSAI1_ConfigNR+0x78>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8006364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d004      	beq.n	8006376 <RCCEx_PLLSAI1_ConfigNR+0x82>
 800636c:	f640 0118 	movw	r1, #2072	; 0x818
 8006370:	482b      	ldr	r0, [pc, #172]	; (8006420 <RCCEx_PLLSAI1_ConfigNR+0x12c>)
 8006372:	f7fb fb3f 	bl	80019f4 <assert_failed>

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006376:	f7ff fb47 	bl	8005a08 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800637a:	f7fc f955 	bl	8002628 <HAL_GetTick>
 800637e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006380:	e009      	b.n	8006396 <RCCEx_PLLSAI1_ConfigNR+0xa2>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006382:	f7fc f951 	bl	8002628 <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	2b02      	cmp	r3, #2
 800638e:	d902      	bls.n	8006396 <RCCEx_PLLSAI1_ConfigNR+0xa2>
    {
      status = HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	73fb      	strb	r3, [r7, #15]
      break;
 8006394:	e004      	b.n	80063a0 <RCCEx_PLLSAI1_ConfigNR+0xac>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006396:	f7ff fb46 	bl	8005a26 <LL_RCC_PLLSAI1_IsReady>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1f0      	bne.n	8006382 <RCCEx_PLLSAI1_ConfigNR+0x8e>
    }
  }

  if (status == HAL_OK)
 80063a0:	7bfb      	ldrb	r3, [r7, #15]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d137      	bne.n	8006416 <RCCEx_PLLSAI1_ConfigNR+0x122>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80063a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	021b      	lsls	r3, r3, #8
 80063b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063ba:	4313      	orrs	r3, r2
 80063bc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80063be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063d0:	4313      	orrs	r3, r2
 80063d2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80063d4:	f7ff fb09 	bl	80059ea <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063d8:	f7fc f926 	bl	8002628 <HAL_GetTick>
 80063dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80063de:	e009      	b.n	80063f4 <RCCEx_PLLSAI1_ConfigNR+0x100>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80063e0:	f7fc f922 	bl	8002628 <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d902      	bls.n	80063f4 <RCCEx_PLLSAI1_ConfigNR+0x100>
      {
        status = HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	73fb      	strb	r3, [r7, #15]
        break;
 80063f2:	e004      	b.n	80063fe <RCCEx_PLLSAI1_ConfigNR+0x10a>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80063f4:	f7ff fb17 	bl	8005a26 <LL_RCC_PLLSAI1_IsReady>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d1f0      	bne.n	80063e0 <RCCEx_PLLSAI1_ConfigNR+0xec>
      }
    }

    if (status == HAL_OK)
 80063fe:	7bfb      	ldrb	r3, [r7, #15]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d108      	bne.n	8006416 <RCCEx_PLLSAI1_ConfigNR+0x122>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006408:	691a      	ldr	r2, [r3, #16]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006412:	4313      	orrs	r3, r2
 8006414:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006416:	7bfb      	ldrb	r3, [r7, #15]
}
 8006418:	4618      	mov	r0, r3
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	0800eea4 	.word	0x0800eea4

08006424 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d101      	bne.n	8006436 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e0f2      	b.n	800661c <HAL_RTC_Init+0x1f8>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a7a      	ldr	r2, [pc, #488]	; (8006624 <HAL_RTC_Init+0x200>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d003      	beq.n	8006448 <HAL_RTC_Init+0x24>
 8006440:	21f0      	movs	r1, #240	; 0xf0
 8006442:	4879      	ldr	r0, [pc, #484]	; (8006628 <HAL_RTC_Init+0x204>)
 8006444:	f7fb fad6 	bl	80019f4 <assert_failed>
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	2b40      	cmp	r3, #64	; 0x40
 800644e:	d007      	beq.n	8006460 <HAL_RTC_Init+0x3c>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d003      	beq.n	8006460 <HAL_RTC_Init+0x3c>
 8006458:	21f1      	movs	r1, #241	; 0xf1
 800645a:	4873      	ldr	r0, [pc, #460]	; (8006628 <HAL_RTC_Init+0x204>)
 800645c:	f7fb faca 	bl	80019f4 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	2b7f      	cmp	r3, #127	; 0x7f
 8006466:	d903      	bls.n	8006470 <HAL_RTC_Init+0x4c>
 8006468:	21f2      	movs	r1, #242	; 0xf2
 800646a:	486f      	ldr	r0, [pc, #444]	; (8006628 <HAL_RTC_Init+0x204>)
 800646c:	f7fb fac2 	bl	80019f4 <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006478:	d303      	bcc.n	8006482 <HAL_RTC_Init+0x5e>
 800647a:	21f3      	movs	r1, #243	; 0xf3
 800647c:	486a      	ldr	r0, [pc, #424]	; (8006628 <HAL_RTC_Init+0x204>)
 800647e:	f7fb fab9 	bl	80019f4 <assert_failed>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d012      	beq.n	80064b0 <HAL_RTC_Init+0x8c>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006492:	d00d      	beq.n	80064b0 <HAL_RTC_Init+0x8c>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800649c:	d008      	beq.n	80064b0 <HAL_RTC_Init+0x8c>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80064a6:	d003      	beq.n	80064b0 <HAL_RTC_Init+0x8c>
 80064a8:	21f4      	movs	r1, #244	; 0xf4
 80064aa:	485f      	ldr	r0, [pc, #380]	; (8006628 <HAL_RTC_Init+0x204>)
 80064ac:	f7fb faa2 	bl	80019f4 <assert_failed>
  assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	695b      	ldr	r3, [r3, #20]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d007      	beq.n	80064c8 <HAL_RTC_Init+0xa4>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	695b      	ldr	r3, [r3, #20]
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d003      	beq.n	80064c8 <HAL_RTC_Init+0xa4>
 80064c0:	21f5      	movs	r1, #245	; 0xf5
 80064c2:	4859      	ldr	r0, [pc, #356]	; (8006628 <HAL_RTC_Init+0x204>)
 80064c4:	f7fb fa96 	bl	80019f4 <assert_failed>
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d008      	beq.n	80064e2 <HAL_RTC_Init+0xbe>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064d8:	d003      	beq.n	80064e2 <HAL_RTC_Init+0xbe>
 80064da:	21f6      	movs	r1, #246	; 0xf6
 80064dc:	4852      	ldr	r0, [pc, #328]	; (8006628 <HAL_RTC_Init+0x204>)
 80064de:	f7fb fa89 	bl	80019f4 <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	69db      	ldr	r3, [r3, #28]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d007      	beq.n	80064fa <HAL_RTC_Init+0xd6>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	69db      	ldr	r3, [r3, #28]
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d003      	beq.n	80064fa <HAL_RTC_Init+0xd6>
 80064f2:	21f7      	movs	r1, #247	; 0xf7
 80064f4:	484c      	ldr	r0, [pc, #304]	; (8006628 <HAL_RTC_Init+0x204>)
 80064f6:	f7fb fa7d 	bl	80019f4 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b00      	cmp	r3, #0
 8006504:	d106      	bne.n	8006514 <HAL_RTC_Init+0xf0>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f7fb fab2 	bl	8001a78 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2202      	movs	r2, #2
 8006518:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	22ca      	movs	r2, #202	; 0xca
 8006522:	625a      	str	r2, [r3, #36]	; 0x24
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2253      	movs	r2, #83	; 0x53
 800652a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 f8a3 	bl	8006678 <RTC_EnterInitMode>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d009      	beq.n	800654c <HAL_RTC_Init+0x128>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	22ff      	movs	r2, #255	; 0xff
 800653e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2204      	movs	r2, #4
 8006544:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e067      	b.n	800661c <HAL_RTC_Init+0x1f8>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	6812      	ldr	r2, [r2, #0]
 8006556:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800655a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800655e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6899      	ldr	r1, [r3, #8]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	431a      	orrs	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	431a      	orrs	r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	430a      	orrs	r2, r1
 800657c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	68d2      	ldr	r2, [r2, #12]
 8006586:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6919      	ldr	r1, [r3, #16]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	041a      	lsls	r2, r3, #16
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	430a      	orrs	r2, r1
 800659a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68da      	ldr	r2, [r3, #12]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065aa:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f022 0203 	bic.w	r2, r2, #3
 80065ba:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	69da      	ldr	r2, [r3, #28]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	431a      	orrs	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	430a      	orrs	r2, r1
 80065d2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f003 0320 	and.w	r3, r3, #32
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d113      	bne.n	800660a <HAL_RTC_Init+0x1e6>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f822 	bl	800662c <HAL_RTC_WaitForSynchro>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00d      	beq.n	800660a <HAL_RTC_Init+0x1e6>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	22ff      	movs	r2, #255	; 0xff
 80065f4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2204      	movs	r2, #4
 80065fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e008      	b.n	800661c <HAL_RTC_Init+0x1f8>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	22ff      	movs	r2, #255	; 0xff
 8006610:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800661a:	2300      	movs	r3, #0
  }
}
 800661c:	4618      	mov	r0, r3
 800661e:	3708      	adds	r7, #8
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	40002800 	.word	0x40002800
 8006628:	0800eee0 	.word	0x0800eee0

0800662c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68da      	ldr	r2, [r3, #12]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006642:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006644:	f7fb fff0 	bl	8002628 <HAL_GetTick>
 8006648:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800664a:	e009      	b.n	8006660 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800664c:	f7fb ffec 	bl	8002628 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800665a:	d901      	bls.n	8006660 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e007      	b.n	8006670 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	f003 0320 	and.w	r3, r3, #32
 800666a:	2b00      	cmp	r3, #0
 800666c:	d0ee      	beq.n	800664c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800668a:	2b00      	cmp	r3, #0
 800668c:	d119      	bne.n	80066c2 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006696:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006698:	f7fb ffc6 	bl	8002628 <HAL_GetTick>
 800669c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800669e:	e009      	b.n	80066b4 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80066a0:	f7fb ffc2 	bl	8002628 <HAL_GetTick>
 80066a4:	4602      	mov	r2, r0
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066ae:	d901      	bls.n	80066b4 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e007      	b.n	80066c4 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d0ee      	beq.n	80066a0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <LL_RCC_GetUSARTClockSource>:
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80066d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4013      	ands	r3, r2
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <LL_RCC_GetLPUARTClockSource>:
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80066f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4013      	ands	r3, r2
}
 8006700:	4618      	mov	r0, r3
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d101      	bne.n	800671e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e065      	b.n	80067ea <HAL_UART_Init+0xde>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00f      	beq.n	8006746 <HAL_UART_Init+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a32      	ldr	r2, [pc, #200]	; (80067f4 <HAL_UART_Init+0xe8>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d019      	beq.n	8006764 <HAL_UART_Init+0x58>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a30      	ldr	r2, [pc, #192]	; (80067f8 <HAL_UART_Init+0xec>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d014      	beq.n	8006764 <HAL_UART_Init+0x58>
 800673a:	f44f 719a 	mov.w	r1, #308	; 0x134
 800673e:	482f      	ldr	r0, [pc, #188]	; (80067fc <HAL_UART_Init+0xf0>)
 8006740:	f7fb f958 	bl	80019f4 <assert_failed>
 8006744:	e00e      	b.n	8006764 <HAL_UART_Init+0x58>
  }
  else
  {
    /* Check the parameters */
#if defined(LPUART1)
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a2a      	ldr	r2, [pc, #168]	; (80067f4 <HAL_UART_Init+0xe8>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d009      	beq.n	8006764 <HAL_UART_Init+0x58>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a28      	ldr	r2, [pc, #160]	; (80067f8 <HAL_UART_Init+0xec>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d004      	beq.n	8006764 <HAL_UART_Init+0x58>
 800675a:	f44f 719d 	mov.w	r1, #314	; 0x13a
 800675e:	4827      	ldr	r0, [pc, #156]	; (80067fc <HAL_UART_Init+0xf0>)
 8006760:	f7fb f948 	bl	80019f4 <assert_failed>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800676a:	2b00      	cmp	r3, #0
 800676c:	d106      	bne.n	800677c <HAL_UART_Init+0x70>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f7fb fe82 	bl	8002480 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2224      	movs	r2, #36	; 0x24
 8006780:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f022 0201 	bic.w	r2, r2, #1
 8006792:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 f833 	bl	8006800 <UART_SetConfig>
 800679a:	4603      	mov	r3, r0
 800679c:	2b01      	cmp	r3, #1
 800679e:	d101      	bne.n	80067a4 <HAL_UART_Init+0x98>
  {
    return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e022      	b.n	80067ea <HAL_UART_Init+0xde>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d002      	beq.n	80067b2 <HAL_UART_Init+0xa6>
  {
    UART_AdvFeatureConfig(huart);
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f001 f963 	bl	8007a78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	685a      	ldr	r2, [r3, #4]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	689a      	ldr	r2, [r3, #8]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067d0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f042 0201 	orr.w	r2, r2, #1
 80067e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f001 fa88 	bl	8007cf8 <UART_CheckIdleState>
 80067e8:	4603      	mov	r3, r0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3708      	adds	r7, #8
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	40013800 	.word	0x40013800
 80067f8:	40008000 	.word	0x40008000
 80067fc:	0800ef18 	.word	0x0800ef18

08006800 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006800:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006804:	b08a      	sub	sp, #40	; 0x28
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800680a:	2300      	movs	r3, #0
 800680c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800680e:	2300      	movs	r3, #0
 8006810:	76fb      	strb	r3, [r7, #27]
#if defined(LPUART1)
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006812:	2300      	movs	r3, #0
 8006814:	617b      	str	r3, [r7, #20]
#endif
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	4a9f      	ldr	r2, [pc, #636]	; (8006a98 <UART_SetConfig+0x298>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d904      	bls.n	800682a <UART_SetConfig+0x2a>
 8006820:	f640 313e 	movw	r1, #2878	; 0xb3e
 8006824:	489d      	ldr	r0, [pc, #628]	; (8006a9c <UART_SetConfig+0x29c>)
 8006826:	f7fb f8e5 	bl	80019f4 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006832:	d00d      	beq.n	8006850 <UART_SetConfig+0x50>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d009      	beq.n	8006850 <UART_SetConfig+0x50>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006844:	d004      	beq.n	8006850 <UART_SetConfig+0x50>
 8006846:	f640 313f 	movw	r1, #2879	; 0xb3f
 800684a:	4894      	ldr	r0, [pc, #592]	; (8006a9c <UART_SetConfig+0x29c>)
 800684c:	f7fb f8d2 	bl	80019f4 <assert_failed>
#if defined(LPUART1)
  if (UART_INSTANCE_LOWPOWER(huart))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a92      	ldr	r2, [pc, #584]	; (8006aa0 <UART_SetConfig+0x2a0>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d10e      	bne.n	8006878 <UART_SetConfig+0x78>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d030      	beq.n	80068c4 <UART_SetConfig+0xc4>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800686a:	d02b      	beq.n	80068c4 <UART_SetConfig+0xc4>
 800686c:	f640 3143 	movw	r1, #2883	; 0xb43
 8006870:	488a      	ldr	r0, [pc, #552]	; (8006a9c <UART_SetConfig+0x29c>)
 8006872:	f7fb f8bf 	bl	80019f4 <assert_failed>
 8006876:	e025      	b.n	80068c4 <UART_SetConfig+0xc4>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006880:	d012      	beq.n	80068a8 <UART_SetConfig+0xa8>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00e      	beq.n	80068a8 <UART_SetConfig+0xa8>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006892:	d009      	beq.n	80068a8 <UART_SetConfig+0xa8>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800689c:	d004      	beq.n	80068a8 <UART_SetConfig+0xa8>
 800689e:	f640 3147 	movw	r1, #2887	; 0xb47
 80068a2:	487e      	ldr	r0, [pc, #504]	; (8006a9c <UART_SetConfig+0x29c>)
 80068a4:	f7fb f8a6 	bl	80019f4 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a1b      	ldr	r3, [r3, #32]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d009      	beq.n	80068c4 <UART_SetConfig+0xc4>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a1b      	ldr	r3, [r3, #32]
 80068b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068b8:	d004      	beq.n	80068c4 <UART_SetConfig+0xc4>
 80068ba:	f640 3148 	movw	r1, #2888	; 0xb48
 80068be:	4877      	ldr	r0, [pc, #476]	; (8006a9c <UART_SetConfig+0x29c>)
 80068c0:	f7fb f898 	bl	80019f4 <assert_failed>
#else
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
#endif

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00e      	beq.n	80068ea <UART_SetConfig+0xea>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068d4:	d009      	beq.n	80068ea <UART_SetConfig+0xea>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80068de:	d004      	beq.n	80068ea <UART_SetConfig+0xea>
 80068e0:	f640 314f 	movw	r1, #2895	; 0xb4f
 80068e4:	486d      	ldr	r0, [pc, #436]	; (8006a9c <UART_SetConfig+0x29c>)
 80068e6:	f7fb f885 	bl	80019f4 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	695b      	ldr	r3, [r3, #20]
 80068ee:	f023 030c 	bic.w	r3, r3, #12
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d103      	bne.n	80068fe <UART_SetConfig+0xfe>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	695b      	ldr	r3, [r3, #20]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d104      	bne.n	8006908 <UART_SetConfig+0x108>
 80068fe:	f44f 6135 	mov.w	r1, #2896	; 0xb50
 8006902:	4866      	ldr	r0, [pc, #408]	; (8006a9c <UART_SetConfig+0x29c>)
 8006904:	f7fb f876 	bl	80019f4 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d013      	beq.n	8006938 <UART_SetConfig+0x138>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006918:	d00e      	beq.n	8006938 <UART_SetConfig+0x138>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006922:	d009      	beq.n	8006938 <UART_SetConfig+0x138>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800692c:	d004      	beq.n	8006938 <UART_SetConfig+0x138>
 800692e:	f640 3151 	movw	r1, #2897	; 0xb51
 8006932:	485a      	ldr	r0, [pc, #360]	; (8006a9c <UART_SetConfig+0x29c>)
 8006934:	f7fb f85e 	bl	80019f4 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	69db      	ldr	r3, [r3, #28]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d009      	beq.n	8006954 <UART_SetConfig+0x154>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	69db      	ldr	r3, [r3, #28]
 8006944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006948:	d004      	beq.n	8006954 <UART_SetConfig+0x154>
 800694a:	f640 3152 	movw	r1, #2898	; 0xb52
 800694e:	4853      	ldr	r0, [pc, #332]	; (8006a9c <UART_SetConfig+0x29c>)
 8006950:	f7fb f850 	bl	80019f4 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006958:	2b00      	cmp	r3, #0
 800695a:	d030      	beq.n	80069be <UART_SetConfig+0x1be>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006960:	2b01      	cmp	r3, #1
 8006962:	d02c      	beq.n	80069be <UART_SetConfig+0x1be>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006968:	2b02      	cmp	r3, #2
 800696a:	d028      	beq.n	80069be <UART_SetConfig+0x1be>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006970:	2b03      	cmp	r3, #3
 8006972:	d024      	beq.n	80069be <UART_SetConfig+0x1be>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006978:	2b04      	cmp	r3, #4
 800697a:	d020      	beq.n	80069be <UART_SetConfig+0x1be>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006980:	2b05      	cmp	r3, #5
 8006982:	d01c      	beq.n	80069be <UART_SetConfig+0x1be>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006988:	2b06      	cmp	r3, #6
 800698a:	d018      	beq.n	80069be <UART_SetConfig+0x1be>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006990:	2b07      	cmp	r3, #7
 8006992:	d014      	beq.n	80069be <UART_SetConfig+0x1be>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006998:	2b08      	cmp	r3, #8
 800699a:	d010      	beq.n	80069be <UART_SetConfig+0x1be>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a0:	2b09      	cmp	r3, #9
 80069a2:	d00c      	beq.n	80069be <UART_SetConfig+0x1be>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a8:	2b0a      	cmp	r3, #10
 80069aa:	d008      	beq.n	80069be <UART_SetConfig+0x1be>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b0:	2b0b      	cmp	r3, #11
 80069b2:	d004      	beq.n	80069be <UART_SetConfig+0x1be>
 80069b4:	f640 3153 	movw	r1, #2899	; 0xb53
 80069b8:	4838      	ldr	r0, [pc, #224]	; (8006a9c <UART_SetConfig+0x29c>)
 80069ba:	f7fb f81b 	bl	80019f4 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	689a      	ldr	r2, [r3, #8]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	431a      	orrs	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	431a      	orrs	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069dc:	4313      	orrs	r3, r2
 80069de:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	4b2f      	ldr	r3, [pc, #188]	; (8006aa4 <UART_SetConfig+0x2a4>)
 80069e8:	4013      	ands	r3, r2
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	6812      	ldr	r2, [r2, #0]
 80069ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069f0:	430b      	orrs	r3, r1
 80069f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	68da      	ldr	r2, [r3, #12]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	430a      	orrs	r2, r1
 8006a08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a22      	ldr	r2, [pc, #136]	; (8006aa0 <UART_SetConfig+0x2a0>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d004      	beq.n	8006a24 <UART_SetConfig+0x224>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a20:	4313      	orrs	r3, r2
 8006a22:	627b      	str	r3, [r7, #36]	; 0x24
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006a2e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	6812      	ldr	r2, [r2, #0]
 8006a36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a38:	430b      	orrs	r3, r1
 8006a3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a42:	f023 010f 	bic.w	r1, r3, #15
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	430a      	orrs	r2, r1
 8006a50:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a14      	ldr	r2, [pc, #80]	; (8006aa8 <UART_SetConfig+0x2a8>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d130      	bne.n	8006abe <UART_SetConfig+0x2be>
 8006a5c:	2003      	movs	r0, #3
 8006a5e:	f7ff fe35 	bl	80066cc <LL_RCC_GetUSARTClockSource>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b03      	cmp	r3, #3
 8006a66:	d825      	bhi.n	8006ab4 <UART_SetConfig+0x2b4>
 8006a68:	a201      	add	r2, pc, #4	; (adr r2, 8006a70 <UART_SetConfig+0x270>)
 8006a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a6e:	bf00      	nop
 8006a70:	08006a81 	.word	0x08006a81
 8006a74:	08006a91 	.word	0x08006a91
 8006a78:	08006a89 	.word	0x08006a89
 8006a7c:	08006aad 	.word	0x08006aad
 8006a80:	2301      	movs	r3, #1
 8006a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a86:	e04c      	b.n	8006b22 <UART_SetConfig+0x322>
 8006a88:	2302      	movs	r3, #2
 8006a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a8e:	e048      	b.n	8006b22 <UART_SetConfig+0x322>
 8006a90:	2304      	movs	r3, #4
 8006a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a96:	e044      	b.n	8006b22 <UART_SetConfig+0x322>
 8006a98:	007a1200 	.word	0x007a1200
 8006a9c:	0800ef18 	.word	0x0800ef18
 8006aa0:	40008000 	.word	0x40008000
 8006aa4:	cfff69f3 	.word	0xcfff69f3
 8006aa8:	40013800 	.word	0x40013800
 8006aac:	2308      	movs	r3, #8
 8006aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ab2:	e036      	b.n	8006b22 <UART_SetConfig+0x322>
 8006ab4:	2310      	movs	r3, #16
 8006ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aba:	bf00      	nop
 8006abc:	e031      	b.n	8006b22 <UART_SetConfig+0x322>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a9f      	ldr	r2, [pc, #636]	; (8006d40 <UART_SetConfig+0x540>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d129      	bne.n	8006b1c <UART_SetConfig+0x31c>
 8006ac8:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8006acc:	f7ff fe0e 	bl	80066ec <LL_RCC_GetLPUARTClockSource>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ad6:	d014      	beq.n	8006b02 <UART_SetConfig+0x302>
 8006ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006adc:	d802      	bhi.n	8006ae4 <UART_SetConfig+0x2e4>
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d007      	beq.n	8006af2 <UART_SetConfig+0x2f2>
 8006ae2:	e016      	b.n	8006b12 <UART_SetConfig+0x312>
 8006ae4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ae8:	d007      	beq.n	8006afa <UART_SetConfig+0x2fa>
 8006aea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006aee:	d00c      	beq.n	8006b0a <UART_SetConfig+0x30a>
 8006af0:	e00f      	b.n	8006b12 <UART_SetConfig+0x312>
 8006af2:	2300      	movs	r3, #0
 8006af4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006af8:	e013      	b.n	8006b22 <UART_SetConfig+0x322>
 8006afa:	2302      	movs	r3, #2
 8006afc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b00:	e00f      	b.n	8006b22 <UART_SetConfig+0x322>
 8006b02:	2304      	movs	r3, #4
 8006b04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b08:	e00b      	b.n	8006b22 <UART_SetConfig+0x322>
 8006b0a:	2308      	movs	r3, #8
 8006b0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b10:	e007      	b.n	8006b22 <UART_SetConfig+0x322>
 8006b12:	2310      	movs	r3, #16
 8006b14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b18:	bf00      	nop
 8006b1a:	e002      	b.n	8006b22 <UART_SetConfig+0x322>
 8006b1c:	2310      	movs	r3, #16
 8006b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a86      	ldr	r2, [pc, #536]	; (8006d40 <UART_SetConfig+0x540>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	f040 8422 	bne.w	8007372 <UART_SetConfig+0xb72>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b32:	2b08      	cmp	r3, #8
 8006b34:	f200 8173 	bhi.w	8006e1e <UART_SetConfig+0x61e>
 8006b38:	a201      	add	r2, pc, #4	; (adr r2, 8006b40 <UART_SetConfig+0x340>)
 8006b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3e:	bf00      	nop
 8006b40:	08006b65 	.word	0x08006b65
 8006b44:	08006e1f 	.word	0x08006e1f
 8006b48:	08006c07 	.word	0x08006c07
 8006b4c:	08006e1f 	.word	0x08006e1f
 8006b50:	08006c9f 	.word	0x08006c9f
 8006b54:	08006e1f 	.word	0x08006e1f
 8006b58:	08006e1f 	.word	0x08006e1f
 8006b5c:	08006e1f 	.word	0x08006e1f
 8006b60:	08006d71 	.word	0x08006d71
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006b64:	f7fe fcc6 	bl	80054f4 <HAL_RCC_GetPCLK1Freq>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d044      	beq.n	8006bfc <UART_SetConfig+0x3fc>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d03e      	beq.n	8006bf8 <UART_SetConfig+0x3f8>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d038      	beq.n	8006bf4 <UART_SetConfig+0x3f4>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b86:	2b03      	cmp	r3, #3
 8006b88:	d032      	beq.n	8006bf0 <UART_SetConfig+0x3f0>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8e:	2b04      	cmp	r3, #4
 8006b90:	d02c      	beq.n	8006bec <UART_SetConfig+0x3ec>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b96:	2b05      	cmp	r3, #5
 8006b98:	d026      	beq.n	8006be8 <UART_SetConfig+0x3e8>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9e:	2b06      	cmp	r3, #6
 8006ba0:	d020      	beq.n	8006be4 <UART_SetConfig+0x3e4>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba6:	2b07      	cmp	r3, #7
 8006ba8:	d01a      	beq.n	8006be0 <UART_SetConfig+0x3e0>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bae:	2b08      	cmp	r3, #8
 8006bb0:	d014      	beq.n	8006bdc <UART_SetConfig+0x3dc>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb6:	2b09      	cmp	r3, #9
 8006bb8:	d00e      	beq.n	8006bd8 <UART_SetConfig+0x3d8>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbe:	2b0a      	cmp	r3, #10
 8006bc0:	d008      	beq.n	8006bd4 <UART_SetConfig+0x3d4>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc6:	2b0b      	cmp	r3, #11
 8006bc8:	d102      	bne.n	8006bd0 <UART_SetConfig+0x3d0>
 8006bca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bce:	e016      	b.n	8006bfe <UART_SetConfig+0x3fe>
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e014      	b.n	8006bfe <UART_SetConfig+0x3fe>
 8006bd4:	2380      	movs	r3, #128	; 0x80
 8006bd6:	e012      	b.n	8006bfe <UART_SetConfig+0x3fe>
 8006bd8:	2340      	movs	r3, #64	; 0x40
 8006bda:	e010      	b.n	8006bfe <UART_SetConfig+0x3fe>
 8006bdc:	2320      	movs	r3, #32
 8006bde:	e00e      	b.n	8006bfe <UART_SetConfig+0x3fe>
 8006be0:	2310      	movs	r3, #16
 8006be2:	e00c      	b.n	8006bfe <UART_SetConfig+0x3fe>
 8006be4:	230c      	movs	r3, #12
 8006be6:	e00a      	b.n	8006bfe <UART_SetConfig+0x3fe>
 8006be8:	230a      	movs	r3, #10
 8006bea:	e008      	b.n	8006bfe <UART_SetConfig+0x3fe>
 8006bec:	2308      	movs	r3, #8
 8006bee:	e006      	b.n	8006bfe <UART_SetConfig+0x3fe>
 8006bf0:	2306      	movs	r3, #6
 8006bf2:	e004      	b.n	8006bfe <UART_SetConfig+0x3fe>
 8006bf4:	2304      	movs	r3, #4
 8006bf6:	e002      	b.n	8006bfe <UART_SetConfig+0x3fe>
 8006bf8:	2302      	movs	r3, #2
 8006bfa:	e000      	b.n	8006bfe <UART_SetConfig+0x3fe>
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c02:	617b      	str	r3, [r7, #20]
        break;
 8006c04:	e10e      	b.n	8006e24 <UART_SetConfig+0x624>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d044      	beq.n	8006c98 <UART_SetConfig+0x498>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d03e      	beq.n	8006c94 <UART_SetConfig+0x494>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d038      	beq.n	8006c90 <UART_SetConfig+0x490>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c22:	2b03      	cmp	r3, #3
 8006c24:	d032      	beq.n	8006c8c <UART_SetConfig+0x48c>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2a:	2b04      	cmp	r3, #4
 8006c2c:	d02c      	beq.n	8006c88 <UART_SetConfig+0x488>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c32:	2b05      	cmp	r3, #5
 8006c34:	d026      	beq.n	8006c84 <UART_SetConfig+0x484>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3a:	2b06      	cmp	r3, #6
 8006c3c:	d020      	beq.n	8006c80 <UART_SetConfig+0x480>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c42:	2b07      	cmp	r3, #7
 8006c44:	d01a      	beq.n	8006c7c <UART_SetConfig+0x47c>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4a:	2b08      	cmp	r3, #8
 8006c4c:	d014      	beq.n	8006c78 <UART_SetConfig+0x478>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c52:	2b09      	cmp	r3, #9
 8006c54:	d00e      	beq.n	8006c74 <UART_SetConfig+0x474>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5a:	2b0a      	cmp	r3, #10
 8006c5c:	d008      	beq.n	8006c70 <UART_SetConfig+0x470>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c62:	2b0b      	cmp	r3, #11
 8006c64:	d102      	bne.n	8006c6c <UART_SetConfig+0x46c>
 8006c66:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006c6a:	e016      	b.n	8006c9a <UART_SetConfig+0x49a>
 8006c6c:	4b35      	ldr	r3, [pc, #212]	; (8006d44 <UART_SetConfig+0x544>)
 8006c6e:	e014      	b.n	8006c9a <UART_SetConfig+0x49a>
 8006c70:	4b35      	ldr	r3, [pc, #212]	; (8006d48 <UART_SetConfig+0x548>)
 8006c72:	e012      	b.n	8006c9a <UART_SetConfig+0x49a>
 8006c74:	4b35      	ldr	r3, [pc, #212]	; (8006d4c <UART_SetConfig+0x54c>)
 8006c76:	e010      	b.n	8006c9a <UART_SetConfig+0x49a>
 8006c78:	4b35      	ldr	r3, [pc, #212]	; (8006d50 <UART_SetConfig+0x550>)
 8006c7a:	e00e      	b.n	8006c9a <UART_SetConfig+0x49a>
 8006c7c:	4b35      	ldr	r3, [pc, #212]	; (8006d54 <UART_SetConfig+0x554>)
 8006c7e:	e00c      	b.n	8006c9a <UART_SetConfig+0x49a>
 8006c80:	4b35      	ldr	r3, [pc, #212]	; (8006d58 <UART_SetConfig+0x558>)
 8006c82:	e00a      	b.n	8006c9a <UART_SetConfig+0x49a>
 8006c84:	4b35      	ldr	r3, [pc, #212]	; (8006d5c <UART_SetConfig+0x55c>)
 8006c86:	e008      	b.n	8006c9a <UART_SetConfig+0x49a>
 8006c88:	4b35      	ldr	r3, [pc, #212]	; (8006d60 <UART_SetConfig+0x560>)
 8006c8a:	e006      	b.n	8006c9a <UART_SetConfig+0x49a>
 8006c8c:	4b35      	ldr	r3, [pc, #212]	; (8006d64 <UART_SetConfig+0x564>)
 8006c8e:	e004      	b.n	8006c9a <UART_SetConfig+0x49a>
 8006c90:	4b35      	ldr	r3, [pc, #212]	; (8006d68 <UART_SetConfig+0x568>)
 8006c92:	e002      	b.n	8006c9a <UART_SetConfig+0x49a>
 8006c94:	4b35      	ldr	r3, [pc, #212]	; (8006d6c <UART_SetConfig+0x56c>)
 8006c96:	e000      	b.n	8006c9a <UART_SetConfig+0x49a>
 8006c98:	4b2a      	ldr	r3, [pc, #168]	; (8006d44 <UART_SetConfig+0x544>)
 8006c9a:	617b      	str	r3, [r7, #20]
        break;
 8006c9c:	e0c2      	b.n	8006e24 <UART_SetConfig+0x624>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006c9e:	f7fe fbab 	bl	80053f8 <HAL_RCC_GetSysClockFreq>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d044      	beq.n	8006d36 <UART_SetConfig+0x536>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d03e      	beq.n	8006d32 <UART_SetConfig+0x532>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d038      	beq.n	8006d2e <UART_SetConfig+0x52e>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc0:	2b03      	cmp	r3, #3
 8006cc2:	d032      	beq.n	8006d2a <UART_SetConfig+0x52a>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc8:	2b04      	cmp	r3, #4
 8006cca:	d02c      	beq.n	8006d26 <UART_SetConfig+0x526>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd0:	2b05      	cmp	r3, #5
 8006cd2:	d026      	beq.n	8006d22 <UART_SetConfig+0x522>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd8:	2b06      	cmp	r3, #6
 8006cda:	d020      	beq.n	8006d1e <UART_SetConfig+0x51e>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce0:	2b07      	cmp	r3, #7
 8006ce2:	d01a      	beq.n	8006d1a <UART_SetConfig+0x51a>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce8:	2b08      	cmp	r3, #8
 8006cea:	d014      	beq.n	8006d16 <UART_SetConfig+0x516>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf0:	2b09      	cmp	r3, #9
 8006cf2:	d00e      	beq.n	8006d12 <UART_SetConfig+0x512>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf8:	2b0a      	cmp	r3, #10
 8006cfa:	d008      	beq.n	8006d0e <UART_SetConfig+0x50e>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d00:	2b0b      	cmp	r3, #11
 8006d02:	d102      	bne.n	8006d0a <UART_SetConfig+0x50a>
 8006d04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d08:	e016      	b.n	8006d38 <UART_SetConfig+0x538>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e014      	b.n	8006d38 <UART_SetConfig+0x538>
 8006d0e:	2380      	movs	r3, #128	; 0x80
 8006d10:	e012      	b.n	8006d38 <UART_SetConfig+0x538>
 8006d12:	2340      	movs	r3, #64	; 0x40
 8006d14:	e010      	b.n	8006d38 <UART_SetConfig+0x538>
 8006d16:	2320      	movs	r3, #32
 8006d18:	e00e      	b.n	8006d38 <UART_SetConfig+0x538>
 8006d1a:	2310      	movs	r3, #16
 8006d1c:	e00c      	b.n	8006d38 <UART_SetConfig+0x538>
 8006d1e:	230c      	movs	r3, #12
 8006d20:	e00a      	b.n	8006d38 <UART_SetConfig+0x538>
 8006d22:	230a      	movs	r3, #10
 8006d24:	e008      	b.n	8006d38 <UART_SetConfig+0x538>
 8006d26:	2308      	movs	r3, #8
 8006d28:	e006      	b.n	8006d38 <UART_SetConfig+0x538>
 8006d2a:	2306      	movs	r3, #6
 8006d2c:	e004      	b.n	8006d38 <UART_SetConfig+0x538>
 8006d2e:	2304      	movs	r3, #4
 8006d30:	e002      	b.n	8006d38 <UART_SetConfig+0x538>
 8006d32:	2302      	movs	r3, #2
 8006d34:	e000      	b.n	8006d38 <UART_SetConfig+0x538>
 8006d36:	2301      	movs	r3, #1
 8006d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d3c:	617b      	str	r3, [r7, #20]
        break;
 8006d3e:	e071      	b.n	8006e24 <UART_SetConfig+0x624>
 8006d40:	40008000 	.word	0x40008000
 8006d44:	00f42400 	.word	0x00f42400
 8006d48:	0001e848 	.word	0x0001e848
 8006d4c:	0003d090 	.word	0x0003d090
 8006d50:	0007a120 	.word	0x0007a120
 8006d54:	000f4240 	.word	0x000f4240
 8006d58:	00145855 	.word	0x00145855
 8006d5c:	00186a00 	.word	0x00186a00
 8006d60:	001e8480 	.word	0x001e8480
 8006d64:	0028b0aa 	.word	0x0028b0aa
 8006d68:	003d0900 	.word	0x003d0900
 8006d6c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d04e      	beq.n	8006e16 <UART_SetConfig+0x616>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d047      	beq.n	8006e10 <UART_SetConfig+0x610>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	d040      	beq.n	8006e0a <UART_SetConfig+0x60a>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8c:	2b03      	cmp	r3, #3
 8006d8e:	d039      	beq.n	8006e04 <UART_SetConfig+0x604>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d94:	2b04      	cmp	r3, #4
 8006d96:	d032      	beq.n	8006dfe <UART_SetConfig+0x5fe>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9c:	2b05      	cmp	r3, #5
 8006d9e:	d02b      	beq.n	8006df8 <UART_SetConfig+0x5f8>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da4:	2b06      	cmp	r3, #6
 8006da6:	d024      	beq.n	8006df2 <UART_SetConfig+0x5f2>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dac:	2b07      	cmp	r3, #7
 8006dae:	d01d      	beq.n	8006dec <UART_SetConfig+0x5ec>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db4:	2b08      	cmp	r3, #8
 8006db6:	d016      	beq.n	8006de6 <UART_SetConfig+0x5e6>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbc:	2b09      	cmp	r3, #9
 8006dbe:	d00f      	beq.n	8006de0 <UART_SetConfig+0x5e0>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc4:	2b0a      	cmp	r3, #10
 8006dc6:	d008      	beq.n	8006dda <UART_SetConfig+0x5da>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dcc:	2b0b      	cmp	r3, #11
 8006dce:	d101      	bne.n	8006dd4 <UART_SetConfig+0x5d4>
 8006dd0:	2380      	movs	r3, #128	; 0x80
 8006dd2:	e022      	b.n	8006e1a <UART_SetConfig+0x61a>
 8006dd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dd8:	e01f      	b.n	8006e1a <UART_SetConfig+0x61a>
 8006dda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006dde:	e01c      	b.n	8006e1a <UART_SetConfig+0x61a>
 8006de0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006de4:	e019      	b.n	8006e1a <UART_SetConfig+0x61a>
 8006de6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dea:	e016      	b.n	8006e1a <UART_SetConfig+0x61a>
 8006dec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006df0:	e013      	b.n	8006e1a <UART_SetConfig+0x61a>
 8006df2:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8006df6:	e010      	b.n	8006e1a <UART_SetConfig+0x61a>
 8006df8:	f640 43cc 	movw	r3, #3276	; 0xccc
 8006dfc:	e00d      	b.n	8006e1a <UART_SetConfig+0x61a>
 8006dfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e02:	e00a      	b.n	8006e1a <UART_SetConfig+0x61a>
 8006e04:	f241 5355 	movw	r3, #5461	; 0x1555
 8006e08:	e007      	b.n	8006e1a <UART_SetConfig+0x61a>
 8006e0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006e0e:	e004      	b.n	8006e1a <UART_SetConfig+0x61a>
 8006e10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006e14:	e001      	b.n	8006e1a <UART_SetConfig+0x61a>
 8006e16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e1a:	617b      	str	r3, [r7, #20]
        break;
 8006e1c:	e002      	b.n	8006e24 <UART_SetConfig+0x624>
      default:
        ret = HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	76fb      	strb	r3, [r7, #27]
        break;
 8006e22:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	f000 85fc 	beq.w	8007a24 <UART_SetConfig+0x1224>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685a      	ldr	r2, [r3, #4]
 8006e30:	4613      	mov	r3, r2
 8006e32:	005b      	lsls	r3, r3, #1
 8006e34:	4413      	add	r3, r2
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d305      	bcc.n	8006e48 <UART_SetConfig+0x648>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e42:	697a      	ldr	r2, [r7, #20]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d903      	bls.n	8006e50 <UART_SetConfig+0x650>
      {
        ret = HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	76fb      	strb	r3, [r7, #27]
 8006e4c:	f000 bdea 	b.w	8007a24 <UART_SetConfig+0x1224>
      }
      else
      {
        switch (clocksource)
 8006e50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e54:	2b08      	cmp	r3, #8
 8006e56:	f200 8279 	bhi.w	800734c <UART_SetConfig+0xb4c>
 8006e5a:	a201      	add	r2, pc, #4	; (adr r2, 8006e60 <UART_SetConfig+0x660>)
 8006e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e60:	08006e85 	.word	0x08006e85
 8006e64:	0800734d 	.word	0x0800734d
 8006e68:	08006fc3 	.word	0x08006fc3
 8006e6c:	0800734d 	.word	0x0800734d
 8006e70:	080070b9 	.word	0x080070b9
 8006e74:	0800734d 	.word	0x0800734d
 8006e78:	0800734d 	.word	0x0800734d
 8006e7c:	0800734d 	.word	0x0800734d
 8006e80:	080071f7 	.word	0x080071f7
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8006e84:	f7fe fb36 	bl	80054f4 <HAL_RCC_GetPCLK1Freq>
 8006e88:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f04f 0100 	mov.w	r1, #0
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d067      	beq.n	8006f6a <UART_SetConfig+0x76a>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d05e      	beq.n	8006f60 <UART_SetConfig+0x760>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d055      	beq.n	8006f56 <UART_SetConfig+0x756>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eae:	2b03      	cmp	r3, #3
 8006eb0:	d04c      	beq.n	8006f4c <UART_SetConfig+0x74c>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb6:	2b04      	cmp	r3, #4
 8006eb8:	d043      	beq.n	8006f42 <UART_SetConfig+0x742>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebe:	2b05      	cmp	r3, #5
 8006ec0:	d03a      	beq.n	8006f38 <UART_SetConfig+0x738>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec6:	2b06      	cmp	r3, #6
 8006ec8:	d031      	beq.n	8006f2e <UART_SetConfig+0x72e>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ece:	2b07      	cmp	r3, #7
 8006ed0:	d028      	beq.n	8006f24 <UART_SetConfig+0x724>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed6:	2b08      	cmp	r3, #8
 8006ed8:	d01f      	beq.n	8006f1a <UART_SetConfig+0x71a>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ede:	2b09      	cmp	r3, #9
 8006ee0:	d016      	beq.n	8006f10 <UART_SetConfig+0x710>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee6:	2b0a      	cmp	r3, #10
 8006ee8:	d00d      	beq.n	8006f06 <UART_SetConfig+0x706>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eee:	2b0b      	cmp	r3, #11
 8006ef0:	d104      	bne.n	8006efc <UART_SetConfig+0x6fc>
 8006ef2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ef6:	f04f 0400 	mov.w	r4, #0
 8006efa:	e03a      	b.n	8006f72 <UART_SetConfig+0x772>
 8006efc:	f04f 0301 	mov.w	r3, #1
 8006f00:	f04f 0400 	mov.w	r4, #0
 8006f04:	e035      	b.n	8006f72 <UART_SetConfig+0x772>
 8006f06:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006f0a:	f04f 0400 	mov.w	r4, #0
 8006f0e:	e030      	b.n	8006f72 <UART_SetConfig+0x772>
 8006f10:	f04f 0340 	mov.w	r3, #64	; 0x40
 8006f14:	f04f 0400 	mov.w	r4, #0
 8006f18:	e02b      	b.n	8006f72 <UART_SetConfig+0x772>
 8006f1a:	f04f 0320 	mov.w	r3, #32
 8006f1e:	f04f 0400 	mov.w	r4, #0
 8006f22:	e026      	b.n	8006f72 <UART_SetConfig+0x772>
 8006f24:	f04f 0310 	mov.w	r3, #16
 8006f28:	f04f 0400 	mov.w	r4, #0
 8006f2c:	e021      	b.n	8006f72 <UART_SetConfig+0x772>
 8006f2e:	f04f 030c 	mov.w	r3, #12
 8006f32:	f04f 0400 	mov.w	r4, #0
 8006f36:	e01c      	b.n	8006f72 <UART_SetConfig+0x772>
 8006f38:	f04f 030a 	mov.w	r3, #10
 8006f3c:	f04f 0400 	mov.w	r4, #0
 8006f40:	e017      	b.n	8006f72 <UART_SetConfig+0x772>
 8006f42:	f04f 0308 	mov.w	r3, #8
 8006f46:	f04f 0400 	mov.w	r4, #0
 8006f4a:	e012      	b.n	8006f72 <UART_SetConfig+0x772>
 8006f4c:	f04f 0306 	mov.w	r3, #6
 8006f50:	f04f 0400 	mov.w	r4, #0
 8006f54:	e00d      	b.n	8006f72 <UART_SetConfig+0x772>
 8006f56:	f04f 0304 	mov.w	r3, #4
 8006f5a:	f04f 0400 	mov.w	r4, #0
 8006f5e:	e008      	b.n	8006f72 <UART_SetConfig+0x772>
 8006f60:	f04f 0302 	mov.w	r3, #2
 8006f64:	f04f 0400 	mov.w	r4, #0
 8006f68:	e003      	b.n	8006f72 <UART_SetConfig+0x772>
 8006f6a:	f04f 0301 	mov.w	r3, #1
 8006f6e:	f04f 0400 	mov.w	r4, #0
 8006f72:	461a      	mov	r2, r3
 8006f74:	4623      	mov	r3, r4
 8006f76:	f7f9 f95b 	bl	8000230 <__aeabi_uldivmod>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	460c      	mov	r4, r1
 8006f7e:	4619      	mov	r1, r3
 8006f80:	4622      	mov	r2, r4
 8006f82:	f04f 0300 	mov.w	r3, #0
 8006f86:	f04f 0400 	mov.w	r4, #0
 8006f8a:	0214      	lsls	r4, r2, #8
 8006f8c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006f90:	020b      	lsls	r3, r1, #8
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	6852      	ldr	r2, [r2, #4]
 8006f96:	0852      	lsrs	r2, r2, #1
 8006f98:	4611      	mov	r1, r2
 8006f9a:	f04f 0200 	mov.w	r2, #0
 8006f9e:	eb13 0b01 	adds.w	fp, r3, r1
 8006fa2:	eb44 0c02 	adc.w	ip, r4, r2
 8006fa6:	4658      	mov	r0, fp
 8006fa8:	4661      	mov	r1, ip
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	f04f 0400 	mov.w	r4, #0
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	4623      	mov	r3, r4
 8006fb6:	f7f9 f93b 	bl	8000230 <__aeabi_uldivmod>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	460c      	mov	r4, r1
 8006fbe:	61fb      	str	r3, [r7, #28]
            break;
 8006fc0:	e1c7      	b.n	8007352 <UART_SetConfig+0xb52>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d05b      	beq.n	8007082 <UART_SetConfig+0x882>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d053      	beq.n	800707a <UART_SetConfig+0x87a>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d04b      	beq.n	8007072 <UART_SetConfig+0x872>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fde:	2b03      	cmp	r3, #3
 8006fe0:	d043      	beq.n	800706a <UART_SetConfig+0x86a>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe6:	2b04      	cmp	r3, #4
 8006fe8:	d03b      	beq.n	8007062 <UART_SetConfig+0x862>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fee:	2b05      	cmp	r3, #5
 8006ff0:	d033      	beq.n	800705a <UART_SetConfig+0x85a>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff6:	2b06      	cmp	r3, #6
 8006ff8:	d02b      	beq.n	8007052 <UART_SetConfig+0x852>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffe:	2b07      	cmp	r3, #7
 8007000:	d023      	beq.n	800704a <UART_SetConfig+0x84a>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007006:	2b08      	cmp	r3, #8
 8007008:	d01b      	beq.n	8007042 <UART_SetConfig+0x842>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700e:	2b09      	cmp	r3, #9
 8007010:	d013      	beq.n	800703a <UART_SetConfig+0x83a>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007016:	2b0a      	cmp	r3, #10
 8007018:	d00b      	beq.n	8007032 <UART_SetConfig+0x832>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701e:	2b0b      	cmp	r3, #11
 8007020:	d103      	bne.n	800702a <UART_SetConfig+0x82a>
 8007022:	4baf      	ldr	r3, [pc, #700]	; (80072e0 <UART_SetConfig+0xae0>)
 8007024:	f04f 0400 	mov.w	r4, #0
 8007028:	e02e      	b.n	8007088 <UART_SetConfig+0x888>
 800702a:	4bae      	ldr	r3, [pc, #696]	; (80072e4 <UART_SetConfig+0xae4>)
 800702c:	f04f 0400 	mov.w	r4, #0
 8007030:	e02a      	b.n	8007088 <UART_SetConfig+0x888>
 8007032:	4bad      	ldr	r3, [pc, #692]	; (80072e8 <UART_SetConfig+0xae8>)
 8007034:	f04f 0400 	mov.w	r4, #0
 8007038:	e026      	b.n	8007088 <UART_SetConfig+0x888>
 800703a:	4bac      	ldr	r3, [pc, #688]	; (80072ec <UART_SetConfig+0xaec>)
 800703c:	f04f 0400 	mov.w	r4, #0
 8007040:	e022      	b.n	8007088 <UART_SetConfig+0x888>
 8007042:	4bab      	ldr	r3, [pc, #684]	; (80072f0 <UART_SetConfig+0xaf0>)
 8007044:	f04f 0400 	mov.w	r4, #0
 8007048:	e01e      	b.n	8007088 <UART_SetConfig+0x888>
 800704a:	4baa      	ldr	r3, [pc, #680]	; (80072f4 <UART_SetConfig+0xaf4>)
 800704c:	f04f 0400 	mov.w	r4, #0
 8007050:	e01a      	b.n	8007088 <UART_SetConfig+0x888>
 8007052:	a49f      	add	r4, pc, #636	; (adr r4, 80072d0 <UART_SetConfig+0xad0>)
 8007054:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007058:	e016      	b.n	8007088 <UART_SetConfig+0x888>
 800705a:	4ba7      	ldr	r3, [pc, #668]	; (80072f8 <UART_SetConfig+0xaf8>)
 800705c:	f04f 0400 	mov.w	r4, #0
 8007060:	e012      	b.n	8007088 <UART_SetConfig+0x888>
 8007062:	4ba6      	ldr	r3, [pc, #664]	; (80072fc <UART_SetConfig+0xafc>)
 8007064:	f04f 0400 	mov.w	r4, #0
 8007068:	e00e      	b.n	8007088 <UART_SetConfig+0x888>
 800706a:	a49b      	add	r4, pc, #620	; (adr r4, 80072d8 <UART_SetConfig+0xad8>)
 800706c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007070:	e00a      	b.n	8007088 <UART_SetConfig+0x888>
 8007072:	4ba3      	ldr	r3, [pc, #652]	; (8007300 <UART_SetConfig+0xb00>)
 8007074:	f04f 0400 	mov.w	r4, #0
 8007078:	e006      	b.n	8007088 <UART_SetConfig+0x888>
 800707a:	4ba2      	ldr	r3, [pc, #648]	; (8007304 <UART_SetConfig+0xb04>)
 800707c:	f04f 0400 	mov.w	r4, #0
 8007080:	e002      	b.n	8007088 <UART_SetConfig+0x888>
 8007082:	4b98      	ldr	r3, [pc, #608]	; (80072e4 <UART_SetConfig+0xae4>)
 8007084:	f04f 0400 	mov.w	r4, #0
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	6852      	ldr	r2, [r2, #4]
 800708c:	0852      	lsrs	r2, r2, #1
 800708e:	4611      	mov	r1, r2
 8007090:	f04f 0200 	mov.w	r2, #0
 8007094:	eb13 0b01 	adds.w	fp, r3, r1
 8007098:	eb44 0c02 	adc.w	ip, r4, r2
 800709c:	4658      	mov	r0, fp
 800709e:	4661      	mov	r1, ip
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	f04f 0400 	mov.w	r4, #0
 80070a8:	461a      	mov	r2, r3
 80070aa:	4623      	mov	r3, r4
 80070ac:	f7f9 f8c0 	bl	8000230 <__aeabi_uldivmod>
 80070b0:	4603      	mov	r3, r0
 80070b2:	460c      	mov	r4, r1
 80070b4:	61fb      	str	r3, [r7, #28]
            break;
 80070b6:	e14c      	b.n	8007352 <UART_SetConfig+0xb52>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80070b8:	f7fe f99e 	bl	80053f8 <HAL_RCC_GetSysClockFreq>
 80070bc:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	4618      	mov	r0, r3
 80070c2:	f04f 0100 	mov.w	r1, #0
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d067      	beq.n	800719e <UART_SetConfig+0x99e>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d05e      	beq.n	8007194 <UART_SetConfig+0x994>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d055      	beq.n	800718a <UART_SetConfig+0x98a>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e2:	2b03      	cmp	r3, #3
 80070e4:	d04c      	beq.n	8007180 <UART_SetConfig+0x980>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ea:	2b04      	cmp	r3, #4
 80070ec:	d043      	beq.n	8007176 <UART_SetConfig+0x976>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f2:	2b05      	cmp	r3, #5
 80070f4:	d03a      	beq.n	800716c <UART_SetConfig+0x96c>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fa:	2b06      	cmp	r3, #6
 80070fc:	d031      	beq.n	8007162 <UART_SetConfig+0x962>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007102:	2b07      	cmp	r3, #7
 8007104:	d028      	beq.n	8007158 <UART_SetConfig+0x958>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710a:	2b08      	cmp	r3, #8
 800710c:	d01f      	beq.n	800714e <UART_SetConfig+0x94e>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007112:	2b09      	cmp	r3, #9
 8007114:	d016      	beq.n	8007144 <UART_SetConfig+0x944>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711a:	2b0a      	cmp	r3, #10
 800711c:	d00d      	beq.n	800713a <UART_SetConfig+0x93a>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007122:	2b0b      	cmp	r3, #11
 8007124:	d104      	bne.n	8007130 <UART_SetConfig+0x930>
 8007126:	f44f 7380 	mov.w	r3, #256	; 0x100
 800712a:	f04f 0400 	mov.w	r4, #0
 800712e:	e03a      	b.n	80071a6 <UART_SetConfig+0x9a6>
 8007130:	f04f 0301 	mov.w	r3, #1
 8007134:	f04f 0400 	mov.w	r4, #0
 8007138:	e035      	b.n	80071a6 <UART_SetConfig+0x9a6>
 800713a:	f04f 0380 	mov.w	r3, #128	; 0x80
 800713e:	f04f 0400 	mov.w	r4, #0
 8007142:	e030      	b.n	80071a6 <UART_SetConfig+0x9a6>
 8007144:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007148:	f04f 0400 	mov.w	r4, #0
 800714c:	e02b      	b.n	80071a6 <UART_SetConfig+0x9a6>
 800714e:	f04f 0320 	mov.w	r3, #32
 8007152:	f04f 0400 	mov.w	r4, #0
 8007156:	e026      	b.n	80071a6 <UART_SetConfig+0x9a6>
 8007158:	f04f 0310 	mov.w	r3, #16
 800715c:	f04f 0400 	mov.w	r4, #0
 8007160:	e021      	b.n	80071a6 <UART_SetConfig+0x9a6>
 8007162:	f04f 030c 	mov.w	r3, #12
 8007166:	f04f 0400 	mov.w	r4, #0
 800716a:	e01c      	b.n	80071a6 <UART_SetConfig+0x9a6>
 800716c:	f04f 030a 	mov.w	r3, #10
 8007170:	f04f 0400 	mov.w	r4, #0
 8007174:	e017      	b.n	80071a6 <UART_SetConfig+0x9a6>
 8007176:	f04f 0308 	mov.w	r3, #8
 800717a:	f04f 0400 	mov.w	r4, #0
 800717e:	e012      	b.n	80071a6 <UART_SetConfig+0x9a6>
 8007180:	f04f 0306 	mov.w	r3, #6
 8007184:	f04f 0400 	mov.w	r4, #0
 8007188:	e00d      	b.n	80071a6 <UART_SetConfig+0x9a6>
 800718a:	f04f 0304 	mov.w	r3, #4
 800718e:	f04f 0400 	mov.w	r4, #0
 8007192:	e008      	b.n	80071a6 <UART_SetConfig+0x9a6>
 8007194:	f04f 0302 	mov.w	r3, #2
 8007198:	f04f 0400 	mov.w	r4, #0
 800719c:	e003      	b.n	80071a6 <UART_SetConfig+0x9a6>
 800719e:	f04f 0301 	mov.w	r3, #1
 80071a2:	f04f 0400 	mov.w	r4, #0
 80071a6:	461a      	mov	r2, r3
 80071a8:	4623      	mov	r3, r4
 80071aa:	f7f9 f841 	bl	8000230 <__aeabi_uldivmod>
 80071ae:	4603      	mov	r3, r0
 80071b0:	460c      	mov	r4, r1
 80071b2:	4619      	mov	r1, r3
 80071b4:	4622      	mov	r2, r4
 80071b6:	f04f 0300 	mov.w	r3, #0
 80071ba:	f04f 0400 	mov.w	r4, #0
 80071be:	0214      	lsls	r4, r2, #8
 80071c0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80071c4:	020b      	lsls	r3, r1, #8
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	6852      	ldr	r2, [r2, #4]
 80071ca:	0852      	lsrs	r2, r2, #1
 80071cc:	4611      	mov	r1, r2
 80071ce:	f04f 0200 	mov.w	r2, #0
 80071d2:	eb13 0b01 	adds.w	fp, r3, r1
 80071d6:	eb44 0c02 	adc.w	ip, r4, r2
 80071da:	4658      	mov	r0, fp
 80071dc:	4661      	mov	r1, ip
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	f04f 0400 	mov.w	r4, #0
 80071e6:	461a      	mov	r2, r3
 80071e8:	4623      	mov	r3, r4
 80071ea:	f7f9 f821 	bl	8000230 <__aeabi_uldivmod>
 80071ee:	4603      	mov	r3, r0
 80071f0:	460c      	mov	r4, r1
 80071f2:	61fb      	str	r3, [r7, #28]
            break;
 80071f4:	e0ad      	b.n	8007352 <UART_SetConfig+0xb52>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f000 808a 	beq.w	8007314 <UART_SetConfig+0xb14>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007204:	2b01      	cmp	r3, #1
 8007206:	d05b      	beq.n	80072c0 <UART_SetConfig+0xac0>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720c:	2b02      	cmp	r3, #2
 800720e:	d052      	beq.n	80072b6 <UART_SetConfig+0xab6>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007214:	2b03      	cmp	r3, #3
 8007216:	d04a      	beq.n	80072ae <UART_SetConfig+0xaae>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721c:	2b04      	cmp	r3, #4
 800721e:	d041      	beq.n	80072a4 <UART_SetConfig+0xaa4>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007224:	2b05      	cmp	r3, #5
 8007226:	d039      	beq.n	800729c <UART_SetConfig+0xa9c>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722c:	2b06      	cmp	r3, #6
 800722e:	d031      	beq.n	8007294 <UART_SetConfig+0xa94>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007234:	2b07      	cmp	r3, #7
 8007236:	d028      	beq.n	800728a <UART_SetConfig+0xa8a>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723c:	2b08      	cmp	r3, #8
 800723e:	d01f      	beq.n	8007280 <UART_SetConfig+0xa80>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007244:	2b09      	cmp	r3, #9
 8007246:	d016      	beq.n	8007276 <UART_SetConfig+0xa76>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724c:	2b0a      	cmp	r3, #10
 800724e:	d00d      	beq.n	800726c <UART_SetConfig+0xa6c>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007254:	2b0b      	cmp	r3, #11
 8007256:	d104      	bne.n	8007262 <UART_SetConfig+0xa62>
 8007258:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800725c:	f04f 0400 	mov.w	r4, #0
 8007260:	e05c      	b.n	800731c <UART_SetConfig+0xb1c>
 8007262:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007266:	f04f 0400 	mov.w	r4, #0
 800726a:	e057      	b.n	800731c <UART_SetConfig+0xb1c>
 800726c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007270:	f04f 0400 	mov.w	r4, #0
 8007274:	e052      	b.n	800731c <UART_SetConfig+0xb1c>
 8007276:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800727a:	f04f 0400 	mov.w	r4, #0
 800727e:	e04d      	b.n	800731c <UART_SetConfig+0xb1c>
 8007280:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007284:	f04f 0400 	mov.w	r4, #0
 8007288:	e048      	b.n	800731c <UART_SetConfig+0xb1c>
 800728a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800728e:	f04f 0400 	mov.w	r4, #0
 8007292:	e043      	b.n	800731c <UART_SetConfig+0xb1c>
 8007294:	4b1c      	ldr	r3, [pc, #112]	; (8007308 <UART_SetConfig+0xb08>)
 8007296:	f04f 0400 	mov.w	r4, #0
 800729a:	e03f      	b.n	800731c <UART_SetConfig+0xb1c>
 800729c:	4b1b      	ldr	r3, [pc, #108]	; (800730c <UART_SetConfig+0xb0c>)
 800729e:	f04f 0400 	mov.w	r4, #0
 80072a2:	e03b      	b.n	800731c <UART_SetConfig+0xb1c>
 80072a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80072a8:	f04f 0400 	mov.w	r4, #0
 80072ac:	e036      	b.n	800731c <UART_SetConfig+0xb1c>
 80072ae:	4b18      	ldr	r3, [pc, #96]	; (8007310 <UART_SetConfig+0xb10>)
 80072b0:	f04f 0400 	mov.w	r4, #0
 80072b4:	e032      	b.n	800731c <UART_SetConfig+0xb1c>
 80072b6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80072ba:	f04f 0400 	mov.w	r4, #0
 80072be:	e02d      	b.n	800731c <UART_SetConfig+0xb1c>
 80072c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80072c4:	f04f 0400 	mov.w	r4, #0
 80072c8:	e028      	b.n	800731c <UART_SetConfig+0xb1c>
 80072ca:	bf00      	nop
 80072cc:	f3af 8000 	nop.w
 80072d0:	14585500 	.word	0x14585500
 80072d4:	00000000 	.word	0x00000000
 80072d8:	28b0aa00 	.word	0x28b0aa00
 80072dc:	00000000 	.word	0x00000000
 80072e0:	00f42400 	.word	0x00f42400
 80072e4:	f4240000 	.word	0xf4240000
 80072e8:	01e84800 	.word	0x01e84800
 80072ec:	03d09000 	.word	0x03d09000
 80072f0:	07a12000 	.word	0x07a12000
 80072f4:	0f424000 	.word	0x0f424000
 80072f8:	186a0000 	.word	0x186a0000
 80072fc:	1e848000 	.word	0x1e848000
 8007300:	3d090000 	.word	0x3d090000
 8007304:	7a120000 	.word	0x7a120000
 8007308:	000aaa00 	.word	0x000aaa00
 800730c:	000ccc00 	.word	0x000ccc00
 8007310:	00155500 	.word	0x00155500
 8007314:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007318:	f04f 0400 	mov.w	r4, #0
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	6852      	ldr	r2, [r2, #4]
 8007320:	0852      	lsrs	r2, r2, #1
 8007322:	4611      	mov	r1, r2
 8007324:	f04f 0200 	mov.w	r2, #0
 8007328:	eb13 0b01 	adds.w	fp, r3, r1
 800732c:	eb44 0c02 	adc.w	ip, r4, r2
 8007330:	4658      	mov	r0, fp
 8007332:	4661      	mov	r1, ip
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	f04f 0400 	mov.w	r4, #0
 800733c:	461a      	mov	r2, r3
 800733e:	4623      	mov	r3, r4
 8007340:	f7f8 ff76 	bl	8000230 <__aeabi_uldivmod>
 8007344:	4603      	mov	r3, r0
 8007346:	460c      	mov	r4, r1
 8007348:	61fb      	str	r3, [r7, #28]
            break;
 800734a:	e002      	b.n	8007352 <UART_SetConfig+0xb52>
          default:
            ret = HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	76fb      	strb	r3, [r7, #27]
            break;
 8007350:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007358:	d308      	bcc.n	800736c <UART_SetConfig+0xb6c>
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007360:	d204      	bcs.n	800736c <UART_SetConfig+0xb6c>
        {
          huart->Instance->BRR = usartdiv;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	69fa      	ldr	r2, [r7, #28]
 8007368:	60da      	str	r2, [r3, #12]
 800736a:	e35b      	b.n	8007a24 <UART_SetConfig+0x1224>
        }
        else
        {
          ret = HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	76fb      	strb	r3, [r7, #27]
 8007370:	e358      	b.n	8007a24 <UART_SetConfig+0x1224>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	69db      	ldr	r3, [r3, #28]
 8007376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800737a:	f040 81a6 	bne.w	80076ca <UART_SetConfig+0xeca>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800737e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007382:	3b01      	subs	r3, #1
 8007384:	2b07      	cmp	r3, #7
 8007386:	f200 8180 	bhi.w	800768a <UART_SetConfig+0xe8a>
 800738a:	a201      	add	r2, pc, #4	; (adr r2, 8007390 <UART_SetConfig+0xb90>)
 800738c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007390:	080073b1 	.word	0x080073b1
 8007394:	08007469 	.word	0x08007469
 8007398:	0800768b 	.word	0x0800768b
 800739c:	08007511 	.word	0x08007511
 80073a0:	0800768b 	.word	0x0800768b
 80073a4:	0800768b 	.word	0x0800768b
 80073a8:	0800768b 	.word	0x0800768b
 80073ac:	080075c9 	.word	0x080075c9
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073b0:	f7fe f8b6 	bl	8005520 <HAL_RCC_GetPCLK2Freq>
 80073b4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d044      	beq.n	8007448 <UART_SetConfig+0xc48>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d03e      	beq.n	8007444 <UART_SetConfig+0xc44>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d038      	beq.n	8007440 <UART_SetConfig+0xc40>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d2:	2b03      	cmp	r3, #3
 80073d4:	d032      	beq.n	800743c <UART_SetConfig+0xc3c>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073da:	2b04      	cmp	r3, #4
 80073dc:	d02c      	beq.n	8007438 <UART_SetConfig+0xc38>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e2:	2b05      	cmp	r3, #5
 80073e4:	d026      	beq.n	8007434 <UART_SetConfig+0xc34>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ea:	2b06      	cmp	r3, #6
 80073ec:	d020      	beq.n	8007430 <UART_SetConfig+0xc30>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f2:	2b07      	cmp	r3, #7
 80073f4:	d01a      	beq.n	800742c <UART_SetConfig+0xc2c>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fa:	2b08      	cmp	r3, #8
 80073fc:	d014      	beq.n	8007428 <UART_SetConfig+0xc28>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007402:	2b09      	cmp	r3, #9
 8007404:	d00e      	beq.n	8007424 <UART_SetConfig+0xc24>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740a:	2b0a      	cmp	r3, #10
 800740c:	d008      	beq.n	8007420 <UART_SetConfig+0xc20>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007412:	2b0b      	cmp	r3, #11
 8007414:	d102      	bne.n	800741c <UART_SetConfig+0xc1c>
 8007416:	f44f 7380 	mov.w	r3, #256	; 0x100
 800741a:	e016      	b.n	800744a <UART_SetConfig+0xc4a>
 800741c:	2301      	movs	r3, #1
 800741e:	e014      	b.n	800744a <UART_SetConfig+0xc4a>
 8007420:	2380      	movs	r3, #128	; 0x80
 8007422:	e012      	b.n	800744a <UART_SetConfig+0xc4a>
 8007424:	2340      	movs	r3, #64	; 0x40
 8007426:	e010      	b.n	800744a <UART_SetConfig+0xc4a>
 8007428:	2320      	movs	r3, #32
 800742a:	e00e      	b.n	800744a <UART_SetConfig+0xc4a>
 800742c:	2310      	movs	r3, #16
 800742e:	e00c      	b.n	800744a <UART_SetConfig+0xc4a>
 8007430:	230c      	movs	r3, #12
 8007432:	e00a      	b.n	800744a <UART_SetConfig+0xc4a>
 8007434:	230a      	movs	r3, #10
 8007436:	e008      	b.n	800744a <UART_SetConfig+0xc4a>
 8007438:	2308      	movs	r3, #8
 800743a:	e006      	b.n	800744a <UART_SetConfig+0xc4a>
 800743c:	2306      	movs	r3, #6
 800743e:	e004      	b.n	800744a <UART_SetConfig+0xc4a>
 8007440:	2304      	movs	r3, #4
 8007442:	e002      	b.n	800744a <UART_SetConfig+0xc4a>
 8007444:	2302      	movs	r3, #2
 8007446:	e000      	b.n	800744a <UART_SetConfig+0xc4a>
 8007448:	2301      	movs	r3, #1
 800744a:	693a      	ldr	r2, [r7, #16]
 800744c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007450:	005a      	lsls	r2, r3, #1
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	085b      	lsrs	r3, r3, #1
 8007458:	441a      	add	r2, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007462:	b29b      	uxth	r3, r3
 8007464:	61fb      	str	r3, [r7, #28]
        break;
 8007466:	e113      	b.n	8007690 <UART_SetConfig+0xe90>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746c:	2b00      	cmp	r3, #0
 800746e:	d043      	beq.n	80074f8 <UART_SetConfig+0xcf8>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007474:	2b01      	cmp	r3, #1
 8007476:	d03d      	beq.n	80074f4 <UART_SetConfig+0xcf4>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747c:	2b02      	cmp	r3, #2
 800747e:	d037      	beq.n	80074f0 <UART_SetConfig+0xcf0>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007484:	2b03      	cmp	r3, #3
 8007486:	d031      	beq.n	80074ec <UART_SetConfig+0xcec>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748c:	2b04      	cmp	r3, #4
 800748e:	d02b      	beq.n	80074e8 <UART_SetConfig+0xce8>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007494:	2b05      	cmp	r3, #5
 8007496:	d025      	beq.n	80074e4 <UART_SetConfig+0xce4>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749c:	2b06      	cmp	r3, #6
 800749e:	d01f      	beq.n	80074e0 <UART_SetConfig+0xce0>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a4:	2b07      	cmp	r3, #7
 80074a6:	d019      	beq.n	80074dc <UART_SetConfig+0xcdc>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ac:	2b08      	cmp	r3, #8
 80074ae:	d013      	beq.n	80074d8 <UART_SetConfig+0xcd8>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b4:	2b09      	cmp	r3, #9
 80074b6:	d00d      	beq.n	80074d4 <UART_SetConfig+0xcd4>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074bc:	2b0a      	cmp	r3, #10
 80074be:	d007      	beq.n	80074d0 <UART_SetConfig+0xcd0>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c4:	2b0b      	cmp	r3, #11
 80074c6:	d101      	bne.n	80074cc <UART_SetConfig+0xccc>
 80074c8:	4b8c      	ldr	r3, [pc, #560]	; (80076fc <UART_SetConfig+0xefc>)
 80074ca:	e016      	b.n	80074fa <UART_SetConfig+0xcfa>
 80074cc:	4b8c      	ldr	r3, [pc, #560]	; (8007700 <UART_SetConfig+0xf00>)
 80074ce:	e014      	b.n	80074fa <UART_SetConfig+0xcfa>
 80074d0:	4b8c      	ldr	r3, [pc, #560]	; (8007704 <UART_SetConfig+0xf04>)
 80074d2:	e012      	b.n	80074fa <UART_SetConfig+0xcfa>
 80074d4:	4b8c      	ldr	r3, [pc, #560]	; (8007708 <UART_SetConfig+0xf08>)
 80074d6:	e010      	b.n	80074fa <UART_SetConfig+0xcfa>
 80074d8:	4b8c      	ldr	r3, [pc, #560]	; (800770c <UART_SetConfig+0xf0c>)
 80074da:	e00e      	b.n	80074fa <UART_SetConfig+0xcfa>
 80074dc:	4b8c      	ldr	r3, [pc, #560]	; (8007710 <UART_SetConfig+0xf10>)
 80074de:	e00c      	b.n	80074fa <UART_SetConfig+0xcfa>
 80074e0:	4b8c      	ldr	r3, [pc, #560]	; (8007714 <UART_SetConfig+0xf14>)
 80074e2:	e00a      	b.n	80074fa <UART_SetConfig+0xcfa>
 80074e4:	4b8c      	ldr	r3, [pc, #560]	; (8007718 <UART_SetConfig+0xf18>)
 80074e6:	e008      	b.n	80074fa <UART_SetConfig+0xcfa>
 80074e8:	4b8c      	ldr	r3, [pc, #560]	; (800771c <UART_SetConfig+0xf1c>)
 80074ea:	e006      	b.n	80074fa <UART_SetConfig+0xcfa>
 80074ec:	4b8c      	ldr	r3, [pc, #560]	; (8007720 <UART_SetConfig+0xf20>)
 80074ee:	e004      	b.n	80074fa <UART_SetConfig+0xcfa>
 80074f0:	4b8c      	ldr	r3, [pc, #560]	; (8007724 <UART_SetConfig+0xf24>)
 80074f2:	e002      	b.n	80074fa <UART_SetConfig+0xcfa>
 80074f4:	4b8c      	ldr	r3, [pc, #560]	; (8007728 <UART_SetConfig+0xf28>)
 80074f6:	e000      	b.n	80074fa <UART_SetConfig+0xcfa>
 80074f8:	4b81      	ldr	r3, [pc, #516]	; (8007700 <UART_SetConfig+0xf00>)
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	6852      	ldr	r2, [r2, #4]
 80074fe:	0852      	lsrs	r2, r2, #1
 8007500:	441a      	add	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	fbb2 f3f3 	udiv	r3, r2, r3
 800750a:	b29b      	uxth	r3, r3
 800750c:	61fb      	str	r3, [r7, #28]
        break;
 800750e:	e0bf      	b.n	8007690 <UART_SetConfig+0xe90>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007510:	f7fd ff72 	bl	80053f8 <HAL_RCC_GetSysClockFreq>
 8007514:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751a:	2b00      	cmp	r3, #0
 800751c:	d044      	beq.n	80075a8 <UART_SetConfig+0xda8>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007522:	2b01      	cmp	r3, #1
 8007524:	d03e      	beq.n	80075a4 <UART_SetConfig+0xda4>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752a:	2b02      	cmp	r3, #2
 800752c:	d038      	beq.n	80075a0 <UART_SetConfig+0xda0>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007532:	2b03      	cmp	r3, #3
 8007534:	d032      	beq.n	800759c <UART_SetConfig+0xd9c>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753a:	2b04      	cmp	r3, #4
 800753c:	d02c      	beq.n	8007598 <UART_SetConfig+0xd98>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007542:	2b05      	cmp	r3, #5
 8007544:	d026      	beq.n	8007594 <UART_SetConfig+0xd94>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754a:	2b06      	cmp	r3, #6
 800754c:	d020      	beq.n	8007590 <UART_SetConfig+0xd90>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007552:	2b07      	cmp	r3, #7
 8007554:	d01a      	beq.n	800758c <UART_SetConfig+0xd8c>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755a:	2b08      	cmp	r3, #8
 800755c:	d014      	beq.n	8007588 <UART_SetConfig+0xd88>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007562:	2b09      	cmp	r3, #9
 8007564:	d00e      	beq.n	8007584 <UART_SetConfig+0xd84>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756a:	2b0a      	cmp	r3, #10
 800756c:	d008      	beq.n	8007580 <UART_SetConfig+0xd80>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007572:	2b0b      	cmp	r3, #11
 8007574:	d102      	bne.n	800757c <UART_SetConfig+0xd7c>
 8007576:	f44f 7380 	mov.w	r3, #256	; 0x100
 800757a:	e016      	b.n	80075aa <UART_SetConfig+0xdaa>
 800757c:	2301      	movs	r3, #1
 800757e:	e014      	b.n	80075aa <UART_SetConfig+0xdaa>
 8007580:	2380      	movs	r3, #128	; 0x80
 8007582:	e012      	b.n	80075aa <UART_SetConfig+0xdaa>
 8007584:	2340      	movs	r3, #64	; 0x40
 8007586:	e010      	b.n	80075aa <UART_SetConfig+0xdaa>
 8007588:	2320      	movs	r3, #32
 800758a:	e00e      	b.n	80075aa <UART_SetConfig+0xdaa>
 800758c:	2310      	movs	r3, #16
 800758e:	e00c      	b.n	80075aa <UART_SetConfig+0xdaa>
 8007590:	230c      	movs	r3, #12
 8007592:	e00a      	b.n	80075aa <UART_SetConfig+0xdaa>
 8007594:	230a      	movs	r3, #10
 8007596:	e008      	b.n	80075aa <UART_SetConfig+0xdaa>
 8007598:	2308      	movs	r3, #8
 800759a:	e006      	b.n	80075aa <UART_SetConfig+0xdaa>
 800759c:	2306      	movs	r3, #6
 800759e:	e004      	b.n	80075aa <UART_SetConfig+0xdaa>
 80075a0:	2304      	movs	r3, #4
 80075a2:	e002      	b.n	80075aa <UART_SetConfig+0xdaa>
 80075a4:	2302      	movs	r3, #2
 80075a6:	e000      	b.n	80075aa <UART_SetConfig+0xdaa>
 80075a8:	2301      	movs	r3, #1
 80075aa:	693a      	ldr	r2, [r7, #16]
 80075ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80075b0:	005a      	lsls	r2, r3, #1
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	085b      	lsrs	r3, r3, #1
 80075b8:	441a      	add	r2, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	fbb2 f3f3 	udiv	r3, r2, r3
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	61fb      	str	r3, [r7, #28]
        break;
 80075c6:	e063      	b.n	8007690 <UART_SetConfig+0xe90>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d04f      	beq.n	8007670 <UART_SetConfig+0xe70>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d048      	beq.n	800766a <UART_SetConfig+0xe6a>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075dc:	2b02      	cmp	r3, #2
 80075de:	d041      	beq.n	8007664 <UART_SetConfig+0xe64>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e4:	2b03      	cmp	r3, #3
 80075e6:	d03a      	beq.n	800765e <UART_SetConfig+0xe5e>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ec:	2b04      	cmp	r3, #4
 80075ee:	d033      	beq.n	8007658 <UART_SetConfig+0xe58>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f4:	2b05      	cmp	r3, #5
 80075f6:	d02c      	beq.n	8007652 <UART_SetConfig+0xe52>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fc:	2b06      	cmp	r3, #6
 80075fe:	d025      	beq.n	800764c <UART_SetConfig+0xe4c>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007604:	2b07      	cmp	r3, #7
 8007606:	d01e      	beq.n	8007646 <UART_SetConfig+0xe46>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760c:	2b08      	cmp	r3, #8
 800760e:	d017      	beq.n	8007640 <UART_SetConfig+0xe40>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007614:	2b09      	cmp	r3, #9
 8007616:	d010      	beq.n	800763a <UART_SetConfig+0xe3a>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761c:	2b0a      	cmp	r3, #10
 800761e:	d009      	beq.n	8007634 <UART_SetConfig+0xe34>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007624:	2b0b      	cmp	r3, #11
 8007626:	d102      	bne.n	800762e <UART_SetConfig+0xe2e>
 8007628:	f44f 7380 	mov.w	r3, #256	; 0x100
 800762c:	e022      	b.n	8007674 <UART_SetConfig+0xe74>
 800762e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007632:	e01f      	b.n	8007674 <UART_SetConfig+0xe74>
 8007634:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007638:	e01c      	b.n	8007674 <UART_SetConfig+0xe74>
 800763a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800763e:	e019      	b.n	8007674 <UART_SetConfig+0xe74>
 8007640:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007644:	e016      	b.n	8007674 <UART_SetConfig+0xe74>
 8007646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800764a:	e013      	b.n	8007674 <UART_SetConfig+0xe74>
 800764c:	f241 5354 	movw	r3, #5460	; 0x1554
 8007650:	e010      	b.n	8007674 <UART_SetConfig+0xe74>
 8007652:	f641 1398 	movw	r3, #6552	; 0x1998
 8007656:	e00d      	b.n	8007674 <UART_SetConfig+0xe74>
 8007658:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800765c:	e00a      	b.n	8007674 <UART_SetConfig+0xe74>
 800765e:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8007662:	e007      	b.n	8007674 <UART_SetConfig+0xe74>
 8007664:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007668:	e004      	b.n	8007674 <UART_SetConfig+0xe74>
 800766a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800766e:	e001      	b.n	8007674 <UART_SetConfig+0xe74>
 8007670:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	6852      	ldr	r2, [r2, #4]
 8007678:	0852      	lsrs	r2, r2, #1
 800767a:	441a      	add	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	fbb2 f3f3 	udiv	r3, r2, r3
 8007684:	b29b      	uxth	r3, r3
 8007686:	61fb      	str	r3, [r7, #28]
        break;
 8007688:	e002      	b.n	8007690 <UART_SetConfig+0xe90>
      default:
        ret = HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	76fb      	strb	r3, [r7, #27]
        break;
 800768e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	2b0f      	cmp	r3, #15
 8007694:	d916      	bls.n	80076c4 <UART_SetConfig+0xec4>
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800769c:	d212      	bcs.n	80076c4 <UART_SetConfig+0xec4>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	f023 030f 	bic.w	r3, r3, #15
 80076a6:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	085b      	lsrs	r3, r3, #1
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	f003 0307 	and.w	r3, r3, #7
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	89fb      	ldrh	r3, [r7, #14]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	89fa      	ldrh	r2, [r7, #14]
 80076c0:	60da      	str	r2, [r3, #12]
 80076c2:	e1af      	b.n	8007a24 <UART_SetConfig+0x1224>
    }
    else
    {
      ret = HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	76fb      	strb	r3, [r7, #27]
 80076c8:	e1ac      	b.n	8007a24 <UART_SetConfig+0x1224>
    }
  }
  else
  {
    switch (clocksource)
 80076ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076ce:	3b01      	subs	r3, #1
 80076d0:	2b07      	cmp	r3, #7
 80076d2:	f200 8196 	bhi.w	8007a02 <UART_SetConfig+0x1202>
 80076d6:	a201      	add	r2, pc, #4	; (adr r2, 80076dc <UART_SetConfig+0xedc>)
 80076d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076dc:	0800772d 	.word	0x0800772d
 80076e0:	080077e3 	.word	0x080077e3
 80076e4:	08007a03 	.word	0x08007a03
 80076e8:	0800788d 	.word	0x0800788d
 80076ec:	08007a03 	.word	0x08007a03
 80076f0:	08007a03 	.word	0x08007a03
 80076f4:	08007a03 	.word	0x08007a03
 80076f8:	08007943 	.word	0x08007943
 80076fc:	0001e848 	.word	0x0001e848
 8007700:	01e84800 	.word	0x01e84800
 8007704:	0003d090 	.word	0x0003d090
 8007708:	0007a120 	.word	0x0007a120
 800770c:	000f4240 	.word	0x000f4240
 8007710:	001e8480 	.word	0x001e8480
 8007714:	0028b0aa 	.word	0x0028b0aa
 8007718:	0030d400 	.word	0x0030d400
 800771c:	003d0900 	.word	0x003d0900
 8007720:	00516154 	.word	0x00516154
 8007724:	007a1200 	.word	0x007a1200
 8007728:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800772c:	f7fd fef8 	bl	8005520 <HAL_RCC_GetPCLK2Freq>
 8007730:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007736:	2b00      	cmp	r3, #0
 8007738:	d044      	beq.n	80077c4 <UART_SetConfig+0xfc4>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773e:	2b01      	cmp	r3, #1
 8007740:	d03e      	beq.n	80077c0 <UART_SetConfig+0xfc0>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007746:	2b02      	cmp	r3, #2
 8007748:	d038      	beq.n	80077bc <UART_SetConfig+0xfbc>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774e:	2b03      	cmp	r3, #3
 8007750:	d032      	beq.n	80077b8 <UART_SetConfig+0xfb8>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007756:	2b04      	cmp	r3, #4
 8007758:	d02c      	beq.n	80077b4 <UART_SetConfig+0xfb4>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775e:	2b05      	cmp	r3, #5
 8007760:	d026      	beq.n	80077b0 <UART_SetConfig+0xfb0>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007766:	2b06      	cmp	r3, #6
 8007768:	d020      	beq.n	80077ac <UART_SetConfig+0xfac>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776e:	2b07      	cmp	r3, #7
 8007770:	d01a      	beq.n	80077a8 <UART_SetConfig+0xfa8>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007776:	2b08      	cmp	r3, #8
 8007778:	d014      	beq.n	80077a4 <UART_SetConfig+0xfa4>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777e:	2b09      	cmp	r3, #9
 8007780:	d00e      	beq.n	80077a0 <UART_SetConfig+0xfa0>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007786:	2b0a      	cmp	r3, #10
 8007788:	d008      	beq.n	800779c <UART_SetConfig+0xf9c>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778e:	2b0b      	cmp	r3, #11
 8007790:	d102      	bne.n	8007798 <UART_SetConfig+0xf98>
 8007792:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007796:	e016      	b.n	80077c6 <UART_SetConfig+0xfc6>
 8007798:	2301      	movs	r3, #1
 800779a:	e014      	b.n	80077c6 <UART_SetConfig+0xfc6>
 800779c:	2380      	movs	r3, #128	; 0x80
 800779e:	e012      	b.n	80077c6 <UART_SetConfig+0xfc6>
 80077a0:	2340      	movs	r3, #64	; 0x40
 80077a2:	e010      	b.n	80077c6 <UART_SetConfig+0xfc6>
 80077a4:	2320      	movs	r3, #32
 80077a6:	e00e      	b.n	80077c6 <UART_SetConfig+0xfc6>
 80077a8:	2310      	movs	r3, #16
 80077aa:	e00c      	b.n	80077c6 <UART_SetConfig+0xfc6>
 80077ac:	230c      	movs	r3, #12
 80077ae:	e00a      	b.n	80077c6 <UART_SetConfig+0xfc6>
 80077b0:	230a      	movs	r3, #10
 80077b2:	e008      	b.n	80077c6 <UART_SetConfig+0xfc6>
 80077b4:	2308      	movs	r3, #8
 80077b6:	e006      	b.n	80077c6 <UART_SetConfig+0xfc6>
 80077b8:	2306      	movs	r3, #6
 80077ba:	e004      	b.n	80077c6 <UART_SetConfig+0xfc6>
 80077bc:	2304      	movs	r3, #4
 80077be:	e002      	b.n	80077c6 <UART_SetConfig+0xfc6>
 80077c0:	2302      	movs	r3, #2
 80077c2:	e000      	b.n	80077c6 <UART_SetConfig+0xfc6>
 80077c4:	2301      	movs	r3, #1
 80077c6:	693a      	ldr	r2, [r7, #16]
 80077c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	085b      	lsrs	r3, r3, #1
 80077d2:	441a      	add	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077dc:	b29b      	uxth	r3, r3
 80077de:	61fb      	str	r3, [r7, #28]
        break;
 80077e0:	e112      	b.n	8007a08 <UART_SetConfig+0x1208>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d044      	beq.n	8007874 <UART_SetConfig+0x1074>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d03e      	beq.n	8007870 <UART_SetConfig+0x1070>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d038      	beq.n	800786c <UART_SetConfig+0x106c>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fe:	2b03      	cmp	r3, #3
 8007800:	d032      	beq.n	8007868 <UART_SetConfig+0x1068>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007806:	2b04      	cmp	r3, #4
 8007808:	d02c      	beq.n	8007864 <UART_SetConfig+0x1064>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780e:	2b05      	cmp	r3, #5
 8007810:	d026      	beq.n	8007860 <UART_SetConfig+0x1060>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007816:	2b06      	cmp	r3, #6
 8007818:	d020      	beq.n	800785c <UART_SetConfig+0x105c>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781e:	2b07      	cmp	r3, #7
 8007820:	d01a      	beq.n	8007858 <UART_SetConfig+0x1058>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007826:	2b08      	cmp	r3, #8
 8007828:	d014      	beq.n	8007854 <UART_SetConfig+0x1054>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782e:	2b09      	cmp	r3, #9
 8007830:	d00e      	beq.n	8007850 <UART_SetConfig+0x1050>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007836:	2b0a      	cmp	r3, #10
 8007838:	d008      	beq.n	800784c <UART_SetConfig+0x104c>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783e:	2b0b      	cmp	r3, #11
 8007840:	d102      	bne.n	8007848 <UART_SetConfig+0x1048>
 8007842:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007846:	e016      	b.n	8007876 <UART_SetConfig+0x1076>
 8007848:	4b80      	ldr	r3, [pc, #512]	; (8007a4c <UART_SetConfig+0x124c>)
 800784a:	e014      	b.n	8007876 <UART_SetConfig+0x1076>
 800784c:	4b80      	ldr	r3, [pc, #512]	; (8007a50 <UART_SetConfig+0x1250>)
 800784e:	e012      	b.n	8007876 <UART_SetConfig+0x1076>
 8007850:	4b80      	ldr	r3, [pc, #512]	; (8007a54 <UART_SetConfig+0x1254>)
 8007852:	e010      	b.n	8007876 <UART_SetConfig+0x1076>
 8007854:	4b80      	ldr	r3, [pc, #512]	; (8007a58 <UART_SetConfig+0x1258>)
 8007856:	e00e      	b.n	8007876 <UART_SetConfig+0x1076>
 8007858:	4b80      	ldr	r3, [pc, #512]	; (8007a5c <UART_SetConfig+0x125c>)
 800785a:	e00c      	b.n	8007876 <UART_SetConfig+0x1076>
 800785c:	4b80      	ldr	r3, [pc, #512]	; (8007a60 <UART_SetConfig+0x1260>)
 800785e:	e00a      	b.n	8007876 <UART_SetConfig+0x1076>
 8007860:	4b80      	ldr	r3, [pc, #512]	; (8007a64 <UART_SetConfig+0x1264>)
 8007862:	e008      	b.n	8007876 <UART_SetConfig+0x1076>
 8007864:	4b80      	ldr	r3, [pc, #512]	; (8007a68 <UART_SetConfig+0x1268>)
 8007866:	e006      	b.n	8007876 <UART_SetConfig+0x1076>
 8007868:	4b80      	ldr	r3, [pc, #512]	; (8007a6c <UART_SetConfig+0x126c>)
 800786a:	e004      	b.n	8007876 <UART_SetConfig+0x1076>
 800786c:	4b80      	ldr	r3, [pc, #512]	; (8007a70 <UART_SetConfig+0x1270>)
 800786e:	e002      	b.n	8007876 <UART_SetConfig+0x1076>
 8007870:	4b80      	ldr	r3, [pc, #512]	; (8007a74 <UART_SetConfig+0x1274>)
 8007872:	e000      	b.n	8007876 <UART_SetConfig+0x1076>
 8007874:	4b75      	ldr	r3, [pc, #468]	; (8007a4c <UART_SetConfig+0x124c>)
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	6852      	ldr	r2, [r2, #4]
 800787a:	0852      	lsrs	r2, r2, #1
 800787c:	441a      	add	r2, r3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	fbb2 f3f3 	udiv	r3, r2, r3
 8007886:	b29b      	uxth	r3, r3
 8007888:	61fb      	str	r3, [r7, #28]
        break;
 800788a:	e0bd      	b.n	8007a08 <UART_SetConfig+0x1208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800788c:	f7fd fdb4 	bl	80053f8 <HAL_RCC_GetSysClockFreq>
 8007890:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007896:	2b00      	cmp	r3, #0
 8007898:	d044      	beq.n	8007924 <UART_SetConfig+0x1124>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d03e      	beq.n	8007920 <UART_SetConfig+0x1120>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	d038      	beq.n	800791c <UART_SetConfig+0x111c>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ae:	2b03      	cmp	r3, #3
 80078b0:	d032      	beq.n	8007918 <UART_SetConfig+0x1118>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b6:	2b04      	cmp	r3, #4
 80078b8:	d02c      	beq.n	8007914 <UART_SetConfig+0x1114>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078be:	2b05      	cmp	r3, #5
 80078c0:	d026      	beq.n	8007910 <UART_SetConfig+0x1110>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c6:	2b06      	cmp	r3, #6
 80078c8:	d020      	beq.n	800790c <UART_SetConfig+0x110c>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ce:	2b07      	cmp	r3, #7
 80078d0:	d01a      	beq.n	8007908 <UART_SetConfig+0x1108>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d6:	2b08      	cmp	r3, #8
 80078d8:	d014      	beq.n	8007904 <UART_SetConfig+0x1104>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078de:	2b09      	cmp	r3, #9
 80078e0:	d00e      	beq.n	8007900 <UART_SetConfig+0x1100>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e6:	2b0a      	cmp	r3, #10
 80078e8:	d008      	beq.n	80078fc <UART_SetConfig+0x10fc>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ee:	2b0b      	cmp	r3, #11
 80078f0:	d102      	bne.n	80078f8 <UART_SetConfig+0x10f8>
 80078f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078f6:	e016      	b.n	8007926 <UART_SetConfig+0x1126>
 80078f8:	2301      	movs	r3, #1
 80078fa:	e014      	b.n	8007926 <UART_SetConfig+0x1126>
 80078fc:	2380      	movs	r3, #128	; 0x80
 80078fe:	e012      	b.n	8007926 <UART_SetConfig+0x1126>
 8007900:	2340      	movs	r3, #64	; 0x40
 8007902:	e010      	b.n	8007926 <UART_SetConfig+0x1126>
 8007904:	2320      	movs	r3, #32
 8007906:	e00e      	b.n	8007926 <UART_SetConfig+0x1126>
 8007908:	2310      	movs	r3, #16
 800790a:	e00c      	b.n	8007926 <UART_SetConfig+0x1126>
 800790c:	230c      	movs	r3, #12
 800790e:	e00a      	b.n	8007926 <UART_SetConfig+0x1126>
 8007910:	230a      	movs	r3, #10
 8007912:	e008      	b.n	8007926 <UART_SetConfig+0x1126>
 8007914:	2308      	movs	r3, #8
 8007916:	e006      	b.n	8007926 <UART_SetConfig+0x1126>
 8007918:	2306      	movs	r3, #6
 800791a:	e004      	b.n	8007926 <UART_SetConfig+0x1126>
 800791c:	2304      	movs	r3, #4
 800791e:	e002      	b.n	8007926 <UART_SetConfig+0x1126>
 8007920:	2302      	movs	r3, #2
 8007922:	e000      	b.n	8007926 <UART_SetConfig+0x1126>
 8007924:	2301      	movs	r3, #1
 8007926:	693a      	ldr	r2, [r7, #16]
 8007928:	fbb2 f2f3 	udiv	r2, r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	085b      	lsrs	r3, r3, #1
 8007932:	441a      	add	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	fbb2 f3f3 	udiv	r3, r2, r3
 800793c:	b29b      	uxth	r3, r3
 800793e:	61fb      	str	r3, [r7, #28]
        break;
 8007940:	e062      	b.n	8007a08 <UART_SetConfig+0x1208>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007946:	2b00      	cmp	r3, #0
 8007948:	d04e      	beq.n	80079e8 <UART_SetConfig+0x11e8>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794e:	2b01      	cmp	r3, #1
 8007950:	d047      	beq.n	80079e2 <UART_SetConfig+0x11e2>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007956:	2b02      	cmp	r3, #2
 8007958:	d040      	beq.n	80079dc <UART_SetConfig+0x11dc>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795e:	2b03      	cmp	r3, #3
 8007960:	d039      	beq.n	80079d6 <UART_SetConfig+0x11d6>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007966:	2b04      	cmp	r3, #4
 8007968:	d032      	beq.n	80079d0 <UART_SetConfig+0x11d0>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796e:	2b05      	cmp	r3, #5
 8007970:	d02b      	beq.n	80079ca <UART_SetConfig+0x11ca>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007976:	2b06      	cmp	r3, #6
 8007978:	d024      	beq.n	80079c4 <UART_SetConfig+0x11c4>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797e:	2b07      	cmp	r3, #7
 8007980:	d01d      	beq.n	80079be <UART_SetConfig+0x11be>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007986:	2b08      	cmp	r3, #8
 8007988:	d016      	beq.n	80079b8 <UART_SetConfig+0x11b8>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798e:	2b09      	cmp	r3, #9
 8007990:	d00f      	beq.n	80079b2 <UART_SetConfig+0x11b2>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007996:	2b0a      	cmp	r3, #10
 8007998:	d008      	beq.n	80079ac <UART_SetConfig+0x11ac>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799e:	2b0b      	cmp	r3, #11
 80079a0:	d101      	bne.n	80079a6 <UART_SetConfig+0x11a6>
 80079a2:	2380      	movs	r3, #128	; 0x80
 80079a4:	e022      	b.n	80079ec <UART_SetConfig+0x11ec>
 80079a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079aa:	e01f      	b.n	80079ec <UART_SetConfig+0x11ec>
 80079ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079b0:	e01c      	b.n	80079ec <UART_SetConfig+0x11ec>
 80079b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079b6:	e019      	b.n	80079ec <UART_SetConfig+0x11ec>
 80079b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079bc:	e016      	b.n	80079ec <UART_SetConfig+0x11ec>
 80079be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80079c2:	e013      	b.n	80079ec <UART_SetConfig+0x11ec>
 80079c4:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80079c8:	e010      	b.n	80079ec <UART_SetConfig+0x11ec>
 80079ca:	f640 43cc 	movw	r3, #3276	; 0xccc
 80079ce:	e00d      	b.n	80079ec <UART_SetConfig+0x11ec>
 80079d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80079d4:	e00a      	b.n	80079ec <UART_SetConfig+0x11ec>
 80079d6:	f241 5355 	movw	r3, #5461	; 0x1555
 80079da:	e007      	b.n	80079ec <UART_SetConfig+0x11ec>
 80079dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80079e0:	e004      	b.n	80079ec <UART_SetConfig+0x11ec>
 80079e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80079e6:	e001      	b.n	80079ec <UART_SetConfig+0x11ec>
 80079e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	6852      	ldr	r2, [r2, #4]
 80079f0:	0852      	lsrs	r2, r2, #1
 80079f2:	441a      	add	r2, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	61fb      	str	r3, [r7, #28]
        break;
 8007a00:	e002      	b.n	8007a08 <UART_SetConfig+0x1208>
      default:
        ret = HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	76fb      	strb	r3, [r7, #27]
        break;
 8007a06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	2b0f      	cmp	r3, #15
 8007a0c:	d908      	bls.n	8007a20 <UART_SetConfig+0x1220>
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a14:	d204      	bcs.n	8007a20 <UART_SetConfig+0x1220>
    {
      huart->Instance->BRR = usartdiv;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	69fa      	ldr	r2, [r7, #28]
 8007a1c:	60da      	str	r2, [r3, #12]
 8007a1e:	e001      	b.n	8007a24 <UART_SetConfig+0x1224>
    }
    else
    {
      ret = HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8007a40:	7efb      	ldrb	r3, [r7, #27]
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3728      	adds	r7, #40	; 0x28
 8007a46:	46bd      	mov	sp, r7
 8007a48:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007a4c:	00f42400 	.word	0x00f42400
 8007a50:	0001e848 	.word	0x0001e848
 8007a54:	0003d090 	.word	0x0003d090
 8007a58:	0007a120 	.word	0x0007a120
 8007a5c:	000f4240 	.word	0x000f4240
 8007a60:	00145855 	.word	0x00145855
 8007a64:	00186a00 	.word	0x00186a00
 8007a68:	001e8480 	.word	0x001e8480
 8007a6c:	0028b0aa 	.word	0x0028b0aa
 8007a70:	003d0900 	.word	0x003d0900
 8007a74:	007a1200 	.word	0x007a1200

08007a78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a84:	2bff      	cmp	r3, #255	; 0xff
 8007a86:	d904      	bls.n	8007a92 <UART_AdvFeatureConfig+0x1a>
 8007a88:	f640 411f 	movw	r1, #3103	; 0xc1f
 8007a8c:	4898      	ldr	r0, [pc, #608]	; (8007cf0 <UART_AdvFeatureConfig+0x278>)
 8007a8e:	f7f9 ffb1 	bl	80019f4 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a96:	f003 0301 	and.w	r3, r3, #1
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d018      	beq.n	8007ad0 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d009      	beq.n	8007aba <UART_AdvFeatureConfig+0x42>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007aae:	d004      	beq.n	8007aba <UART_AdvFeatureConfig+0x42>
 8007ab0:	f640 4124 	movw	r1, #3108	; 0xc24
 8007ab4:	488e      	ldr	r0, [pc, #568]	; (8007cf0 <UART_AdvFeatureConfig+0x278>)
 8007ab6:	f7f9 ff9d 	bl	80019f4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	430a      	orrs	r2, r1
 8007ace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad4:	f003 0302 	and.w	r3, r3, #2
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d018      	beq.n	8007b0e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d009      	beq.n	8007af8 <UART_AdvFeatureConfig+0x80>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007aec:	d004      	beq.n	8007af8 <UART_AdvFeatureConfig+0x80>
 8007aee:	f640 412b 	movw	r1, #3115	; 0xc2b
 8007af2:	487f      	ldr	r0, [pc, #508]	; (8007cf0 <UART_AdvFeatureConfig+0x278>)
 8007af4:	f7f9 ff7e 	bl	80019f4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	430a      	orrs	r2, r1
 8007b0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b12:	f003 0304 	and.w	r3, r3, #4
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d018      	beq.n	8007b4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d009      	beq.n	8007b36 <UART_AdvFeatureConfig+0xbe>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007b2a:	d004      	beq.n	8007b36 <UART_AdvFeatureConfig+0xbe>
 8007b2c:	f640 4132 	movw	r1, #3122	; 0xc32
 8007b30:	486f      	ldr	r0, [pc, #444]	; (8007cf0 <UART_AdvFeatureConfig+0x278>)
 8007b32:	f7f9 ff5f 	bl	80019f4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	430a      	orrs	r2, r1
 8007b4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b50:	f003 0308 	and.w	r3, r3, #8
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d018      	beq.n	8007b8a <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d009      	beq.n	8007b74 <UART_AdvFeatureConfig+0xfc>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b68:	d004      	beq.n	8007b74 <UART_AdvFeatureConfig+0xfc>
 8007b6a:	f640 4139 	movw	r1, #3129	; 0xc39
 8007b6e:	4860      	ldr	r0, [pc, #384]	; (8007cf0 <UART_AdvFeatureConfig+0x278>)
 8007b70:	f7f9 ff40 	bl	80019f4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	430a      	orrs	r2, r1
 8007b88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b8e:	f003 0310 	and.w	r3, r3, #16
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d018      	beq.n	8007bc8 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d009      	beq.n	8007bb2 <UART_AdvFeatureConfig+0x13a>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ba6:	d004      	beq.n	8007bb2 <UART_AdvFeatureConfig+0x13a>
 8007ba8:	f44f 6144 	mov.w	r1, #3136	; 0xc40
 8007bac:	4850      	ldr	r0, [pc, #320]	; (8007cf0 <UART_AdvFeatureConfig+0x278>)
 8007bae:	f7f9 ff21 	bl	80019f4 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	430a      	orrs	r2, r1
 8007bc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bcc:	f003 0320 	and.w	r3, r3, #32
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d018      	beq.n	8007c06 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d009      	beq.n	8007bf0 <UART_AdvFeatureConfig+0x178>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007be4:	d004      	beq.n	8007bf0 <UART_AdvFeatureConfig+0x178>
 8007be6:	f640 4147 	movw	r1, #3143	; 0xc47
 8007bea:	4841      	ldr	r0, [pc, #260]	; (8007cf0 <UART_AdvFeatureConfig+0x278>)
 8007bec:	f7f9 ff02 	bl	80019f4 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	430a      	orrs	r2, r1
 8007c04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d04a      	beq.n	8007ca8 <UART_AdvFeatureConfig+0x230>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a37      	ldr	r2, [pc, #220]	; (8007cf4 <UART_AdvFeatureConfig+0x27c>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d004      	beq.n	8007c26 <UART_AdvFeatureConfig+0x1ae>
 8007c1c:	f640 414e 	movw	r1, #3150	; 0xc4e
 8007c20:	4833      	ldr	r0, [pc, #204]	; (8007cf0 <UART_AdvFeatureConfig+0x278>)
 8007c22:	f7f9 fee7 	bl	80019f4 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d009      	beq.n	8007c42 <UART_AdvFeatureConfig+0x1ca>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c36:	d004      	beq.n	8007c42 <UART_AdvFeatureConfig+0x1ca>
 8007c38:	f640 414f 	movw	r1, #3151	; 0xc4f
 8007c3c:	482c      	ldr	r0, [pc, #176]	; (8007cf0 <UART_AdvFeatureConfig+0x278>)
 8007c3e:	f7f9 fed9 	bl	80019f4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	430a      	orrs	r2, r1
 8007c56:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c60:	d122      	bne.n	8007ca8 <UART_AdvFeatureConfig+0x230>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d013      	beq.n	8007c92 <UART_AdvFeatureConfig+0x21a>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c72:	d00e      	beq.n	8007c92 <UART_AdvFeatureConfig+0x21a>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c7c:	d009      	beq.n	8007c92 <UART_AdvFeatureConfig+0x21a>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c82:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007c86:	d004      	beq.n	8007c92 <UART_AdvFeatureConfig+0x21a>
 8007c88:	f640 4154 	movw	r1, #3156	; 0xc54
 8007c8c:	4818      	ldr	r0, [pc, #96]	; (8007cf0 <UART_AdvFeatureConfig+0x278>)
 8007c8e:	f7f9 feb1 	bl	80019f4 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	430a      	orrs	r2, r1
 8007ca6:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d018      	beq.n	8007ce6 <UART_AdvFeatureConfig+0x26e>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d009      	beq.n	8007cd0 <UART_AdvFeatureConfig+0x258>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cc0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007cc4:	d004      	beq.n	8007cd0 <UART_AdvFeatureConfig+0x258>
 8007cc6:	f640 415c 	movw	r1, #3164	; 0xc5c
 8007cca:	4809      	ldr	r0, [pc, #36]	; (8007cf0 <UART_AdvFeatureConfig+0x278>)
 8007ccc:	f7f9 fe92 	bl	80019f4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	430a      	orrs	r2, r1
 8007ce4:	605a      	str	r2, [r3, #4]
  }
}
 8007ce6:	bf00      	nop
 8007ce8:	3708      	adds	r7, #8
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	0800ef18 	.word	0x0800ef18
 8007cf4:	40013800 	.word	0x40013800

08007cf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b086      	sub	sp, #24
 8007cfc:	af02      	add	r7, sp, #8
 8007cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007d08:	f7fa fc8e 	bl	8002628 <HAL_GetTick>
 8007d0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f003 0308 	and.w	r3, r3, #8
 8007d18:	2b08      	cmp	r3, #8
 8007d1a:	d10e      	bne.n	8007d3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d20:	9300      	str	r3, [sp, #0]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f82c 	bl	8007d88 <UART_WaitOnFlagUntilTimeout>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d001      	beq.n	8007d3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d36:	2303      	movs	r3, #3
 8007d38:	e022      	b.n	8007d80 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f003 0304 	and.w	r3, r3, #4
 8007d44:	2b04      	cmp	r3, #4
 8007d46:	d10e      	bne.n	8007d66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d4c:	9300      	str	r3, [sp, #0]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2200      	movs	r2, #0
 8007d52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 f816 	bl	8007d88 <UART_WaitOnFlagUntilTimeout>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d001      	beq.n	8007d66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e00c      	b.n	8007d80 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2220      	movs	r2, #32
 8007d6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2220      	movs	r2, #32
 8007d72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007d7e:	2300      	movs	r3, #0
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3710      	adds	r7, #16
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	603b      	str	r3, [r7, #0]
 8007d94:	4613      	mov	r3, r2
 8007d96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d98:	e062      	b.n	8007e60 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007da0:	d05e      	beq.n	8007e60 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007da2:	f7fa fc41 	bl	8002628 <HAL_GetTick>
 8007da6:	4602      	mov	r2, r0
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	1ad3      	subs	r3, r2, r3
 8007dac:	69ba      	ldr	r2, [r7, #24]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d302      	bcc.n	8007db8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d11d      	bne.n	8007df4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007dc6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	689a      	ldr	r2, [r3, #8]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f022 0201 	bic.w	r2, r2, #1
 8007dd6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2220      	movs	r2, #32
 8007ddc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2220      	movs	r2, #32
 8007de4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007df0:	2303      	movs	r3, #3
 8007df2:	e045      	b.n	8007e80 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 0304 	and.w	r3, r3, #4
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d02e      	beq.n	8007e60 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	69db      	ldr	r3, [r3, #28]
 8007e08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e10:	d126      	bne.n	8007e60 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e1a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007e2a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	689a      	ldr	r2, [r3, #8]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f022 0201 	bic.w	r2, r2, #1
 8007e3a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2220      	movs	r2, #32
 8007e40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2220      	movs	r2, #32
 8007e48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2220      	movs	r2, #32
 8007e50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	e00f      	b.n	8007e80 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	69da      	ldr	r2, [r3, #28]
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	4013      	ands	r3, r2
 8007e6a:	68ba      	ldr	r2, [r7, #8]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	bf0c      	ite	eq
 8007e70:	2301      	moveq	r3, #1
 8007e72:	2300      	movne	r3, #0
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	461a      	mov	r2, r3
 8007e78:	79fb      	ldrb	r3, [r7, #7]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d08d      	beq.n	8007d9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a1f      	ldr	r2, [pc, #124]	; (8007f14 <HAL_UARTEx_DisableFifoMode+0x8c>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d009      	beq.n	8007eae <HAL_UARTEx_DisableFifoMode+0x26>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a1e      	ldr	r2, [pc, #120]	; (8007f18 <HAL_UARTEx_DisableFifoMode+0x90>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d004      	beq.n	8007eae <HAL_UARTEx_DisableFifoMode+0x26>
 8007ea4:	f240 2111 	movw	r1, #529	; 0x211
 8007ea8:	481c      	ldr	r0, [pc, #112]	; (8007f1c <HAL_UARTEx_DisableFifoMode+0x94>)
 8007eaa:	f7f9 fda3 	bl	80019f4 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d101      	bne.n	8007ebc <HAL_UARTEx_DisableFifoMode+0x34>
 8007eb8:	2302      	movs	r3, #2
 8007eba:	e027      	b.n	8007f0c <HAL_UARTEx_DisableFifoMode+0x84>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2224      	movs	r2, #36	; 0x24
 8007ec8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f022 0201 	bic.w	r2, r2, #1
 8007ee2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007eea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68fa      	ldr	r2, [r7, #12]
 8007ef8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2220      	movs	r2, #32
 8007efe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	40013800 	.word	0x40013800
 8007f18:	40008000 	.word	0x40008000
 8007f1c:	0800ef54 	.word	0x0800ef54

08007f20 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a31      	ldr	r2, [pc, #196]	; (8007ff4 <HAL_UARTEx_SetTxFifoThreshold+0xd4>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d009      	beq.n	8007f48 <HAL_UARTEx_SetTxFifoThreshold+0x28>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a2f      	ldr	r2, [pc, #188]	; (8007ff8 <HAL_UARTEx_SetTxFifoThreshold+0xd8>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d004      	beq.n	8007f48 <HAL_UARTEx_SetTxFifoThreshold+0x28>
 8007f3e:	f240 213f 	movw	r1, #575	; 0x23f
 8007f42:	482e      	ldr	r0, [pc, #184]	; (8007ffc <HAL_UARTEx_SetTxFifoThreshold+0xdc>)
 8007f44:	f7f9 fd56 	bl	80019f4 <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d018      	beq.n	8007f80 <HAL_UARTEx_SetTxFifoThreshold+0x60>
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f54:	d014      	beq.n	8007f80 <HAL_UARTEx_SetTxFifoThreshold+0x60>
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f5c:	d010      	beq.n	8007f80 <HAL_UARTEx_SetTxFifoThreshold+0x60>
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007f64:	d00c      	beq.n	8007f80 <HAL_UARTEx_SetTxFifoThreshold+0x60>
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f6c:	d008      	beq.n	8007f80 <HAL_UARTEx_SetTxFifoThreshold+0x60>
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 8007f74:	d004      	beq.n	8007f80 <HAL_UARTEx_SetTxFifoThreshold+0x60>
 8007f76:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007f7a:	4820      	ldr	r0, [pc, #128]	; (8007ffc <HAL_UARTEx_SetTxFifoThreshold+0xdc>)
 8007f7c:	f7f9 fd3a 	bl	80019f4 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d101      	bne.n	8007f8e <HAL_UARTEx_SetTxFifoThreshold+0x6e>
 8007f8a:	2302      	movs	r3, #2
 8007f8c:	e02d      	b.n	8007fea <HAL_UARTEx_SetTxFifoThreshold+0xca>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2201      	movs	r2, #1
 8007f92:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2224      	movs	r2, #36	; 0x24
 8007f9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f022 0201 	bic.w	r2, r2, #1
 8007fb4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	683a      	ldr	r2, [r7, #0]
 8007fc6:	430a      	orrs	r2, r1
 8007fc8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 f888 	bl	80080e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2220      	movs	r2, #32
 8007fdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3710      	adds	r7, #16
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	40013800 	.word	0x40013800
 8007ff8:	40008000 	.word	0x40008000
 8007ffc:	0800ef54 	.word	0x0800ef54

08008000 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a31      	ldr	r2, [pc, #196]	; (80080d4 <HAL_UARTEx_SetRxFifoThreshold+0xd4>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d009      	beq.n	8008028 <HAL_UARTEx_SetRxFifoThreshold+0x28>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a2f      	ldr	r2, [pc, #188]	; (80080d8 <HAL_UARTEx_SetRxFifoThreshold+0xd8>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d004      	beq.n	8008028 <HAL_UARTEx_SetRxFifoThreshold+0x28>
 800801e:	f44f 711c 	mov.w	r1, #624	; 0x270
 8008022:	482e      	ldr	r0, [pc, #184]	; (80080dc <HAL_UARTEx_SetRxFifoThreshold+0xdc>)
 8008024:	f7f9 fce6 	bl	80019f4 <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d018      	beq.n	8008060 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008034:	d014      	beq.n	8008060 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800803c:	d010      	beq.n	8008060 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8008044:	d00c      	beq.n	8008060 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800804c:	d008      	beq.n	8008060 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8008054:	d004      	beq.n	8008060 <HAL_UARTEx_SetRxFifoThreshold+0x60>
 8008056:	f240 2171 	movw	r1, #625	; 0x271
 800805a:	4820      	ldr	r0, [pc, #128]	; (80080dc <HAL_UARTEx_SetRxFifoThreshold+0xdc>)
 800805c:	f7f9 fcca 	bl	80019f4 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008066:	2b01      	cmp	r3, #1
 8008068:	d101      	bne.n	800806e <HAL_UARTEx_SetRxFifoThreshold+0x6e>
 800806a:	2302      	movs	r3, #2
 800806c:	e02d      	b.n	80080ca <HAL_UARTEx_SetRxFifoThreshold+0xca>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2201      	movs	r2, #1
 8008072:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2224      	movs	r2, #36	; 0x24
 800807a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f022 0201 	bic.w	r2, r2, #1
 8008094:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	683a      	ldr	r2, [r7, #0]
 80080a6:	430a      	orrs	r2, r1
 80080a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 f818 	bl	80080e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2220      	movs	r2, #32
 80080bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	40013800 	.word	0x40013800
 80080d8:	40008000 	.word	0x40008000
 80080dc:	0800ef54 	.word	0x0800ef54

080080e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b089      	sub	sp, #36	; 0x24
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80080e8:	4a2f      	ldr	r2, [pc, #188]	; (80081a8 <UARTEx_SetNbDataToProcess+0xc8>)
 80080ea:	f107 0314 	add.w	r3, r7, #20
 80080ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80080f2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80080f6:	4a2d      	ldr	r2, [pc, #180]	; (80081ac <UARTEx_SetNbDataToProcess+0xcc>)
 80080f8:	f107 030c 	add.w	r3, r7, #12
 80080fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008100:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008108:	2b00      	cmp	r3, #0
 800810a:	d108      	bne.n	800811e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800811c:	e03d      	b.n	800819a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800811e:	2308      	movs	r3, #8
 8008120:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008122:	2308      	movs	r3, #8
 8008124:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	0e5b      	lsrs	r3, r3, #25
 800812e:	b2db      	uxtb	r3, r3
 8008130:	f003 0307 	and.w	r3, r3, #7
 8008134:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	0f5b      	lsrs	r3, r3, #29
 800813e:	b2db      	uxtb	r3, r3
 8008140:	f003 0307 	and.w	r3, r3, #7
 8008144:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008146:	7fbb      	ldrb	r3, [r7, #30]
 8008148:	7f3a      	ldrb	r2, [r7, #28]
 800814a:	f107 0120 	add.w	r1, r7, #32
 800814e:	440a      	add	r2, r1
 8008150:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008154:	fb02 f303 	mul.w	r3, r2, r3
 8008158:	7f3a      	ldrb	r2, [r7, #28]
 800815a:	f107 0120 	add.w	r1, r7, #32
 800815e:	440a      	add	r2, r1
 8008160:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008164:	fb93 f3f2 	sdiv	r3, r3, r2
 8008168:	b29a      	uxth	r2, r3
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008170:	7ffb      	ldrb	r3, [r7, #31]
 8008172:	7f7a      	ldrb	r2, [r7, #29]
 8008174:	f107 0120 	add.w	r1, r7, #32
 8008178:	440a      	add	r2, r1
 800817a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800817e:	fb02 f303 	mul.w	r3, r2, r3
 8008182:	7f7a      	ldrb	r2, [r7, #29]
 8008184:	f107 0120 	add.w	r1, r7, #32
 8008188:	440a      	add	r2, r1
 800818a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800818e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008192:	b29a      	uxth	r2, r3
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800819a:	bf00      	nop
 800819c:	3724      	adds	r7, #36	; 0x24
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop
 80081a8:	0800ef90 	.word	0x0800ef90
 80081ac:	0800ef98 	.word	0x0800ef98

080081b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b085      	sub	sp, #20
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80081b8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80081bc:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80081c4:	b29a      	uxth	r2, r3
 80081c6:	89fb      	ldrh	r3, [r7, #14]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	b29a      	uxth	r2, r3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3714      	adds	r7, #20
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b085      	sub	sp, #20
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80081e8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80081ec:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	b21a      	sxth	r2, r3
 80081f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80081fc:	43db      	mvns	r3, r3
 80081fe:	b21b      	sxth	r3, r3
 8008200:	4013      	ands	r3, r2
 8008202:	b21b      	sxth	r3, r3
 8008204:	b29a      	uxth	r2, r3
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3714      	adds	r7, #20
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr

0800821a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800821a:	b084      	sub	sp, #16
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	f107 0014 	add.w	r0, r7, #20
 8008228:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2201      	movs	r2, #1
 8008230:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f7ff ffaf 	bl	80081b0 <USB_EnableGlobalInt>

  return HAL_OK;
 8008252:	2300      	movs	r3, #0
}
 8008254:	4618      	mov	r0, r3
 8008256:	3708      	adds	r7, #8
 8008258:	46bd      	mov	sp, r7
 800825a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800825e:	b004      	add	sp, #16
 8008260:	4770      	bx	lr
	...

08008264 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008264:	b490      	push	{r4, r7}
 8008266:	b086      	sub	sp, #24
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800826e:	2300      	movs	r3, #0
 8008270:	75fb      	strb	r3, [r7, #23]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	4413      	add	r3, r2
 800827c:	881b      	ldrh	r3, [r3, #0]
 800827e:	b29b      	uxth	r3, r3
 8008280:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008288:	82bb      	strh	r3, [r7, #20]

  /* initialize Endpoint */
  switch (ep->type)
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	78db      	ldrb	r3, [r3, #3]
 800828e:	2b03      	cmp	r3, #3
 8008290:	d819      	bhi.n	80082c6 <USB_ActivateEndpoint+0x62>
 8008292:	a201      	add	r2, pc, #4	; (adr r2, 8008298 <USB_ActivateEndpoint+0x34>)
 8008294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008298:	080082a9 	.word	0x080082a9
 800829c:	080082bd 	.word	0x080082bd
 80082a0:	080082cd 	.word	0x080082cd
 80082a4:	080082b3 	.word	0x080082b3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80082a8:	8abb      	ldrh	r3, [r7, #20]
 80082aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80082ae:	82bb      	strh	r3, [r7, #20]
      break;
 80082b0:	e00d      	b.n	80082ce <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80082b2:	8abb      	ldrh	r3, [r7, #20]
 80082b4:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80082b8:	82bb      	strh	r3, [r7, #20]
      break;
 80082ba:	e008      	b.n	80082ce <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80082bc:	8abb      	ldrh	r3, [r7, #20]
 80082be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80082c2:	82bb      	strh	r3, [r7, #20]
      break;
 80082c4:	e003      	b.n	80082ce <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	75fb      	strb	r3, [r7, #23]
      break;
 80082ca:	e000      	b.n	80082ce <USB_ActivateEndpoint+0x6a>
      break;
 80082cc:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	009b      	lsls	r3, r3, #2
 80082d6:	441a      	add	r2, r3
 80082d8:	8abb      	ldrh	r3, [r7, #20]
 80082da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	4413      	add	r3, r2
 80082f8:	881b      	ldrh	r3, [r3, #0]
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	b21b      	sxth	r3, r3
 80082fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008306:	b21a      	sxth	r2, r3
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	b21b      	sxth	r3, r3
 800830e:	4313      	orrs	r3, r2
 8008310:	b21b      	sxth	r3, r3
 8008312:	b29c      	uxth	r4, r3
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	441a      	add	r2, r3
 800831e:	4b87      	ldr	r3, [pc, #540]	; (800853c <USB_ActivateEndpoint+0x2d8>)
 8008320:	4323      	orrs	r3, r4
 8008322:	b29b      	uxth	r3, r3
 8008324:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	7b1b      	ldrb	r3, [r3, #12]
 800832a:	2b00      	cmp	r3, #0
 800832c:	f040 810c 	bne.w	8008548 <USB_ActivateEndpoint+0x2e4>
  {
    if (ep->is_in != 0U)
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	785b      	ldrb	r3, [r3, #1]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d067      	beq.n	8008408 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008338:	687c      	ldr	r4, [r7, #4]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008340:	b29b      	uxth	r3, r3
 8008342:	441c      	add	r4, r3
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	00db      	lsls	r3, r3, #3
 800834a:	4423      	add	r3, r4
 800834c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008350:	461c      	mov	r4, r3
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	88db      	ldrh	r3, [r3, #6]
 8008356:	085b      	lsrs	r3, r3, #1
 8008358:	b29b      	uxth	r3, r3
 800835a:	005b      	lsls	r3, r3, #1
 800835c:	b29b      	uxth	r3, r3
 800835e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	4413      	add	r3, r2
 800836a:	881b      	ldrh	r3, [r3, #0]
 800836c:	b29c      	uxth	r4, r3
 800836e:	4623      	mov	r3, r4
 8008370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008374:	2b00      	cmp	r3, #0
 8008376:	d014      	beq.n	80083a2 <USB_ActivateEndpoint+0x13e>
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	4413      	add	r3, r2
 8008382:	881b      	ldrh	r3, [r3, #0]
 8008384:	b29b      	uxth	r3, r3
 8008386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800838a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800838e:	b29c      	uxth	r4, r3
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	441a      	add	r2, r3
 800839a:	4b69      	ldr	r3, [pc, #420]	; (8008540 <USB_ActivateEndpoint+0x2dc>)
 800839c:	4323      	orrs	r3, r4
 800839e:	b29b      	uxth	r3, r3
 80083a0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	78db      	ldrb	r3, [r3, #3]
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d018      	beq.n	80083dc <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	4413      	add	r3, r2
 80083b4:	881b      	ldrh	r3, [r3, #0]
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083c0:	b29c      	uxth	r4, r3
 80083c2:	f084 0320 	eor.w	r3, r4, #32
 80083c6:	b29c      	uxth	r4, r3
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	441a      	add	r2, r3
 80083d2:	4b5a      	ldr	r3, [pc, #360]	; (800853c <USB_ActivateEndpoint+0x2d8>)
 80083d4:	4323      	orrs	r3, r4
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	8013      	strh	r3, [r2, #0]
 80083da:	e225      	b.n	8008828 <USB_ActivateEndpoint+0x5c4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	4413      	add	r3, r2
 80083e6:	881b      	ldrh	r3, [r3, #0]
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083f2:	b29c      	uxth	r4, r3
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	441a      	add	r2, r3
 80083fe:	4b4f      	ldr	r3, [pc, #316]	; (800853c <USB_ActivateEndpoint+0x2d8>)
 8008400:	4323      	orrs	r3, r4
 8008402:	b29b      	uxth	r3, r3
 8008404:	8013      	strh	r3, [r2, #0]
 8008406:	e20f      	b.n	8008828 <USB_ActivateEndpoint+0x5c4>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008408:	687c      	ldr	r4, [r7, #4]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008410:	b29b      	uxth	r3, r3
 8008412:	441c      	add	r4, r3
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	00db      	lsls	r3, r3, #3
 800841a:	4423      	add	r3, r4
 800841c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008420:	461c      	mov	r4, r3
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	88db      	ldrh	r3, [r3, #6]
 8008426:	085b      	lsrs	r3, r3, #1
 8008428:	b29b      	uxth	r3, r3
 800842a:	005b      	lsls	r3, r3, #1
 800842c:	b29b      	uxth	r3, r3
 800842e:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008430:	687c      	ldr	r4, [r7, #4]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008438:	b29b      	uxth	r3, r3
 800843a:	441c      	add	r4, r3
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	00db      	lsls	r3, r3, #3
 8008442:	4423      	add	r3, r4
 8008444:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008448:	60fb      	str	r3, [r7, #12]
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	691b      	ldr	r3, [r3, #16]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d110      	bne.n	8008474 <USB_ActivateEndpoint+0x210>
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	881b      	ldrh	r3, [r3, #0]
 8008456:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800845a:	b29a      	uxth	r2, r3
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	801a      	strh	r2, [r3, #0]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	881b      	ldrh	r3, [r3, #0]
 8008464:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008468:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800846c:	b29a      	uxth	r2, r3
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	801a      	strh	r2, [r3, #0]
 8008472:	e026      	b.n	80084c2 <USB_ActivateEndpoint+0x25e>
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	691b      	ldr	r3, [r3, #16]
 8008478:	2b3d      	cmp	r3, #61	; 0x3d
 800847a:	d813      	bhi.n	80084a4 <USB_ActivateEndpoint+0x240>
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	085b      	lsrs	r3, r3, #1
 8008482:	613b      	str	r3, [r7, #16]
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	691b      	ldr	r3, [r3, #16]
 8008488:	f003 0301 	and.w	r3, r3, #1
 800848c:	2b00      	cmp	r3, #0
 800848e:	d002      	beq.n	8008496 <USB_ActivateEndpoint+0x232>
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	3301      	adds	r3, #1
 8008494:	613b      	str	r3, [r7, #16]
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	b29b      	uxth	r3, r3
 800849a:	029b      	lsls	r3, r3, #10
 800849c:	b29a      	uxth	r2, r3
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	801a      	strh	r2, [r3, #0]
 80084a2:	e00e      	b.n	80084c2 <USB_ActivateEndpoint+0x25e>
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	095b      	lsrs	r3, r3, #5
 80084aa:	613b      	str	r3, [r7, #16]
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	029b      	lsls	r3, r3, #10
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084bc:	b29a      	uxth	r2, r3
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	4413      	add	r3, r2
 80084cc:	881b      	ldrh	r3, [r3, #0]
 80084ce:	b29c      	uxth	r4, r3
 80084d0:	4623      	mov	r3, r4
 80084d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d014      	beq.n	8008504 <USB_ActivateEndpoint+0x2a0>
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	4413      	add	r3, r2
 80084e4:	881b      	ldrh	r3, [r3, #0]
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084f0:	b29c      	uxth	r4, r3
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	441a      	add	r2, r3
 80084fc:	4b11      	ldr	r3, [pc, #68]	; (8008544 <USB_ActivateEndpoint+0x2e0>)
 80084fe:	4323      	orrs	r3, r4
 8008500:	b29b      	uxth	r3, r3
 8008502:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	4413      	add	r3, r2
 800850e:	881b      	ldrh	r3, [r3, #0]
 8008510:	b29b      	uxth	r3, r3
 8008512:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800851a:	b29c      	uxth	r4, r3
 800851c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008520:	b29c      	uxth	r4, r3
 8008522:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8008526:	b29c      	uxth	r4, r3
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	441a      	add	r2, r3
 8008532:	4b02      	ldr	r3, [pc, #8]	; (800853c <USB_ActivateEndpoint+0x2d8>)
 8008534:	4323      	orrs	r3, r4
 8008536:	b29b      	uxth	r3, r3
 8008538:	8013      	strh	r3, [r2, #0]
 800853a:	e175      	b.n	8008828 <USB_ActivateEndpoint+0x5c4>
 800853c:	ffff8080 	.word	0xffff8080
 8008540:	ffff80c0 	.word	0xffff80c0
 8008544:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	4413      	add	r3, r2
 8008552:	881b      	ldrh	r3, [r3, #0]
 8008554:	b29b      	uxth	r3, r3
 8008556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800855a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800855e:	b29c      	uxth	r4, r3
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	441a      	add	r2, r3
 800856a:	4b96      	ldr	r3, [pc, #600]	; (80087c4 <USB_ActivateEndpoint+0x560>)
 800856c:	4323      	orrs	r3, r4
 800856e:	b29b      	uxth	r3, r3
 8008570:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008572:	687c      	ldr	r4, [r7, #4]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800857a:	b29b      	uxth	r3, r3
 800857c:	441c      	add	r4, r3
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	00db      	lsls	r3, r3, #3
 8008584:	4423      	add	r3, r4
 8008586:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800858a:	461c      	mov	r4, r3
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	891b      	ldrh	r3, [r3, #8]
 8008590:	085b      	lsrs	r3, r3, #1
 8008592:	b29b      	uxth	r3, r3
 8008594:	005b      	lsls	r3, r3, #1
 8008596:	b29b      	uxth	r3, r3
 8008598:	8023      	strh	r3, [r4, #0]
 800859a:	687c      	ldr	r4, [r7, #4]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	441c      	add	r4, r3
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	00db      	lsls	r3, r3, #3
 80085ac:	4423      	add	r3, r4
 80085ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80085b2:	461c      	mov	r4, r3
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	895b      	ldrh	r3, [r3, #10]
 80085b8:	085b      	lsrs	r3, r3, #1
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	005b      	lsls	r3, r3, #1
 80085be:	b29b      	uxth	r3, r3
 80085c0:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	785b      	ldrb	r3, [r3, #1]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	f040 8088 	bne.w	80086dc <USB_ActivateEndpoint+0x478>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	4413      	add	r3, r2
 80085d6:	881b      	ldrh	r3, [r3, #0]
 80085d8:	b29c      	uxth	r4, r3
 80085da:	4623      	mov	r3, r4
 80085dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d014      	beq.n	800860e <USB_ActivateEndpoint+0x3aa>
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	4413      	add	r3, r2
 80085ee:	881b      	ldrh	r3, [r3, #0]
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085fa:	b29c      	uxth	r4, r3
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	441a      	add	r2, r3
 8008606:	4b70      	ldr	r3, [pc, #448]	; (80087c8 <USB_ActivateEndpoint+0x564>)
 8008608:	4323      	orrs	r3, r4
 800860a:	b29b      	uxth	r3, r3
 800860c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	4413      	add	r3, r2
 8008618:	881b      	ldrh	r3, [r3, #0]
 800861a:	b29c      	uxth	r4, r3
 800861c:	4623      	mov	r3, r4
 800861e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008622:	2b00      	cmp	r3, #0
 8008624:	d014      	beq.n	8008650 <USB_ActivateEndpoint+0x3ec>
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	4413      	add	r3, r2
 8008630:	881b      	ldrh	r3, [r3, #0]
 8008632:	b29b      	uxth	r3, r3
 8008634:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800863c:	b29c      	uxth	r4, r3
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	441a      	add	r2, r3
 8008648:	4b60      	ldr	r3, [pc, #384]	; (80087cc <USB_ActivateEndpoint+0x568>)
 800864a:	4323      	orrs	r3, r4
 800864c:	b29b      	uxth	r3, r3
 800864e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	4413      	add	r3, r2
 800865a:	881b      	ldrh	r3, [r3, #0]
 800865c:	b29b      	uxth	r3, r3
 800865e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008666:	b29c      	uxth	r4, r3
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	441a      	add	r2, r3
 8008672:	4b56      	ldr	r3, [pc, #344]	; (80087cc <USB_ActivateEndpoint+0x568>)
 8008674:	4323      	orrs	r3, r4
 8008676:	b29b      	uxth	r3, r3
 8008678:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	4413      	add	r3, r2
 8008684:	881b      	ldrh	r3, [r3, #0]
 8008686:	b29b      	uxth	r3, r3
 8008688:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800868c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008690:	b29c      	uxth	r4, r3
 8008692:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008696:	b29c      	uxth	r4, r3
 8008698:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800869c:	b29c      	uxth	r4, r3
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	441a      	add	r2, r3
 80086a8:	4b49      	ldr	r3, [pc, #292]	; (80087d0 <USB_ActivateEndpoint+0x56c>)
 80086aa:	4323      	orrs	r3, r4
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	4413      	add	r3, r2
 80086ba:	881b      	ldrh	r3, [r3, #0]
 80086bc:	b29b      	uxth	r3, r3
 80086be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086c6:	b29c      	uxth	r4, r3
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	441a      	add	r2, r3
 80086d2:	4b3f      	ldr	r3, [pc, #252]	; (80087d0 <USB_ActivateEndpoint+0x56c>)
 80086d4:	4323      	orrs	r3, r4
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	8013      	strh	r3, [r2, #0]
 80086da:	e0a5      	b.n	8008828 <USB_ActivateEndpoint+0x5c4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	4413      	add	r3, r2
 80086e6:	881b      	ldrh	r3, [r3, #0]
 80086e8:	b29c      	uxth	r4, r3
 80086ea:	4623      	mov	r3, r4
 80086ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d014      	beq.n	800871e <USB_ActivateEndpoint+0x4ba>
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	4413      	add	r3, r2
 80086fe:	881b      	ldrh	r3, [r3, #0]
 8008700:	b29b      	uxth	r3, r3
 8008702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800870a:	b29c      	uxth	r4, r3
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	441a      	add	r2, r3
 8008716:	4b2c      	ldr	r3, [pc, #176]	; (80087c8 <USB_ActivateEndpoint+0x564>)
 8008718:	4323      	orrs	r3, r4
 800871a:	b29b      	uxth	r3, r3
 800871c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	4413      	add	r3, r2
 8008728:	881b      	ldrh	r3, [r3, #0]
 800872a:	b29c      	uxth	r4, r3
 800872c:	4623      	mov	r3, r4
 800872e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008732:	2b00      	cmp	r3, #0
 8008734:	d014      	beq.n	8008760 <USB_ActivateEndpoint+0x4fc>
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	4413      	add	r3, r2
 8008740:	881b      	ldrh	r3, [r3, #0]
 8008742:	b29b      	uxth	r3, r3
 8008744:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008748:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800874c:	b29c      	uxth	r4, r3
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	441a      	add	r2, r3
 8008758:	4b1c      	ldr	r3, [pc, #112]	; (80087cc <USB_ActivateEndpoint+0x568>)
 800875a:	4323      	orrs	r3, r4
 800875c:	b29b      	uxth	r3, r3
 800875e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	4413      	add	r3, r2
 800876a:	881b      	ldrh	r3, [r3, #0]
 800876c:	b29b      	uxth	r3, r3
 800876e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008776:	b29c      	uxth	r4, r3
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	441a      	add	r2, r3
 8008782:	4b11      	ldr	r3, [pc, #68]	; (80087c8 <USB_ActivateEndpoint+0x564>)
 8008784:	4323      	orrs	r3, r4
 8008786:	b29b      	uxth	r3, r3
 8008788:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	78db      	ldrb	r3, [r3, #3]
 800878e:	2b01      	cmp	r3, #1
 8008790:	d020      	beq.n	80087d4 <USB_ActivateEndpoint+0x570>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	4413      	add	r3, r2
 800879c:	881b      	ldrh	r3, [r3, #0]
 800879e:	b29b      	uxth	r3, r3
 80087a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087a8:	b29c      	uxth	r4, r3
 80087aa:	f084 0320 	eor.w	r3, r4, #32
 80087ae:	b29c      	uxth	r4, r3
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	441a      	add	r2, r3
 80087ba:	4b05      	ldr	r3, [pc, #20]	; (80087d0 <USB_ActivateEndpoint+0x56c>)
 80087bc:	4323      	orrs	r3, r4
 80087be:	b29b      	uxth	r3, r3
 80087c0:	8013      	strh	r3, [r2, #0]
 80087c2:	e01c      	b.n	80087fe <USB_ActivateEndpoint+0x59a>
 80087c4:	ffff8180 	.word	0xffff8180
 80087c8:	ffffc080 	.word	0xffffc080
 80087cc:	ffff80c0 	.word	0xffff80c0
 80087d0:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	4413      	add	r3, r2
 80087de:	881b      	ldrh	r3, [r3, #0]
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087ea:	b29c      	uxth	r4, r3
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	441a      	add	r2, r3
 80087f6:	4b0f      	ldr	r3, [pc, #60]	; (8008834 <USB_ActivateEndpoint+0x5d0>)
 80087f8:	4323      	orrs	r3, r4
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	4413      	add	r3, r2
 8008808:	881b      	ldrh	r3, [r3, #0]
 800880a:	b29b      	uxth	r3, r3
 800880c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008814:	b29c      	uxth	r4, r3
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	441a      	add	r2, r3
 8008820:	4b04      	ldr	r3, [pc, #16]	; (8008834 <USB_ActivateEndpoint+0x5d0>)
 8008822:	4323      	orrs	r3, r4
 8008824:	b29b      	uxth	r3, r3
 8008826:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8008828:	7dfb      	ldrb	r3, [r7, #23]
}
 800882a:	4618      	mov	r0, r3
 800882c:	3718      	adds	r7, #24
 800882e:	46bd      	mov	sp, r7
 8008830:	bc90      	pop	{r4, r7}
 8008832:	4770      	bx	lr
 8008834:	ffff8080 	.word	0xffff8080

08008838 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008838:	b490      	push	{r4, r7}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	7b1b      	ldrb	r3, [r3, #12]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d171      	bne.n	800892e <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	785b      	ldrb	r3, [r3, #1]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d036      	beq.n	80088c0 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	4413      	add	r3, r2
 800885c:	881b      	ldrh	r3, [r3, #0]
 800885e:	b29c      	uxth	r4, r3
 8008860:	4623      	mov	r3, r4
 8008862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008866:	2b00      	cmp	r3, #0
 8008868:	d014      	beq.n	8008894 <USB_DeactivateEndpoint+0x5c>
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	4413      	add	r3, r2
 8008874:	881b      	ldrh	r3, [r3, #0]
 8008876:	b29b      	uxth	r3, r3
 8008878:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800887c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008880:	b29c      	uxth	r4, r3
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	441a      	add	r2, r3
 800888c:	4b6b      	ldr	r3, [pc, #428]	; (8008a3c <USB_DeactivateEndpoint+0x204>)
 800888e:	4323      	orrs	r3, r4
 8008890:	b29b      	uxth	r3, r3
 8008892:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	4413      	add	r3, r2
 800889e:	881b      	ldrh	r3, [r3, #0]
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088aa:	b29c      	uxth	r4, r3
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	441a      	add	r2, r3
 80088b6:	4b62      	ldr	r3, [pc, #392]	; (8008a40 <USB_DeactivateEndpoint+0x208>)
 80088b8:	4323      	orrs	r3, r4
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	8013      	strh	r3, [r2, #0]
 80088be:	e144      	b.n	8008b4a <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	4413      	add	r3, r2
 80088ca:	881b      	ldrh	r3, [r3, #0]
 80088cc:	b29c      	uxth	r4, r3
 80088ce:	4623      	mov	r3, r4
 80088d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d014      	beq.n	8008902 <USB_DeactivateEndpoint+0xca>
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	4413      	add	r3, r2
 80088e2:	881b      	ldrh	r3, [r3, #0]
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088ee:	b29c      	uxth	r4, r3
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	441a      	add	r2, r3
 80088fa:	4b52      	ldr	r3, [pc, #328]	; (8008a44 <USB_DeactivateEndpoint+0x20c>)
 80088fc:	4323      	orrs	r3, r4
 80088fe:	b29b      	uxth	r3, r3
 8008900:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	4413      	add	r3, r2
 800890c:	881b      	ldrh	r3, [r3, #0]
 800890e:	b29b      	uxth	r3, r3
 8008910:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008918:	b29c      	uxth	r4, r3
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	441a      	add	r2, r3
 8008924:	4b46      	ldr	r3, [pc, #280]	; (8008a40 <USB_DeactivateEndpoint+0x208>)
 8008926:	4323      	orrs	r3, r4
 8008928:	b29b      	uxth	r3, r3
 800892a:	8013      	strh	r3, [r2, #0]
 800892c:	e10d      	b.n	8008b4a <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	785b      	ldrb	r3, [r3, #1]
 8008932:	2b00      	cmp	r3, #0
 8008934:	f040 8088 	bne.w	8008a48 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	4413      	add	r3, r2
 8008942:	881b      	ldrh	r3, [r3, #0]
 8008944:	b29c      	uxth	r4, r3
 8008946:	4623      	mov	r3, r4
 8008948:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800894c:	2b00      	cmp	r3, #0
 800894e:	d014      	beq.n	800897a <USB_DeactivateEndpoint+0x142>
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	4413      	add	r3, r2
 800895a:	881b      	ldrh	r3, [r3, #0]
 800895c:	b29b      	uxth	r3, r3
 800895e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008966:	b29c      	uxth	r4, r3
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	441a      	add	r2, r3
 8008972:	4b34      	ldr	r3, [pc, #208]	; (8008a44 <USB_DeactivateEndpoint+0x20c>)
 8008974:	4323      	orrs	r3, r4
 8008976:	b29b      	uxth	r3, r3
 8008978:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	4413      	add	r3, r2
 8008984:	881b      	ldrh	r3, [r3, #0]
 8008986:	b29c      	uxth	r4, r3
 8008988:	4623      	mov	r3, r4
 800898a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800898e:	2b00      	cmp	r3, #0
 8008990:	d014      	beq.n	80089bc <USB_DeactivateEndpoint+0x184>
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	4413      	add	r3, r2
 800899c:	881b      	ldrh	r3, [r3, #0]
 800899e:	b29b      	uxth	r3, r3
 80089a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089a8:	b29c      	uxth	r4, r3
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	441a      	add	r2, r3
 80089b4:	4b21      	ldr	r3, [pc, #132]	; (8008a3c <USB_DeactivateEndpoint+0x204>)
 80089b6:	4323      	orrs	r3, r4
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	4413      	add	r3, r2
 80089c6:	881b      	ldrh	r3, [r3, #0]
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089d2:	b29c      	uxth	r4, r3
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	441a      	add	r2, r3
 80089de:	4b17      	ldr	r3, [pc, #92]	; (8008a3c <USB_DeactivateEndpoint+0x204>)
 80089e0:	4323      	orrs	r3, r4
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	4413      	add	r3, r2
 80089f0:	881b      	ldrh	r3, [r3, #0]
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089fc:	b29c      	uxth	r4, r3
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	441a      	add	r2, r3
 8008a08:	4b0d      	ldr	r3, [pc, #52]	; (8008a40 <USB_DeactivateEndpoint+0x208>)
 8008a0a:	4323      	orrs	r3, r4
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	009b      	lsls	r3, r3, #2
 8008a18:	4413      	add	r3, r2
 8008a1a:	881b      	ldrh	r3, [r3, #0]
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a26:	b29c      	uxth	r4, r3
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	441a      	add	r2, r3
 8008a32:	4b03      	ldr	r3, [pc, #12]	; (8008a40 <USB_DeactivateEndpoint+0x208>)
 8008a34:	4323      	orrs	r3, r4
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	8013      	strh	r3, [r2, #0]
 8008a3a:	e086      	b.n	8008b4a <USB_DeactivateEndpoint+0x312>
 8008a3c:	ffff80c0 	.word	0xffff80c0
 8008a40:	ffff8080 	.word	0xffff8080
 8008a44:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	4413      	add	r3, r2
 8008a52:	881b      	ldrh	r3, [r3, #0]
 8008a54:	b29c      	uxth	r4, r3
 8008a56:	4623      	mov	r3, r4
 8008a58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d014      	beq.n	8008a8a <USB_DeactivateEndpoint+0x252>
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	4413      	add	r3, r2
 8008a6a:	881b      	ldrh	r3, [r3, #0]
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a76:	b29c      	uxth	r4, r3
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	441a      	add	r2, r3
 8008a82:	4b35      	ldr	r3, [pc, #212]	; (8008b58 <USB_DeactivateEndpoint+0x320>)
 8008a84:	4323      	orrs	r3, r4
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	4413      	add	r3, r2
 8008a94:	881b      	ldrh	r3, [r3, #0]
 8008a96:	b29c      	uxth	r4, r3
 8008a98:	4623      	mov	r3, r4
 8008a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d014      	beq.n	8008acc <USB_DeactivateEndpoint+0x294>
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	4413      	add	r3, r2
 8008aac:	881b      	ldrh	r3, [r3, #0]
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ab8:	b29c      	uxth	r4, r3
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	441a      	add	r2, r3
 8008ac4:	4b25      	ldr	r3, [pc, #148]	; (8008b5c <USB_DeactivateEndpoint+0x324>)
 8008ac6:	4323      	orrs	r3, r4
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	4413      	add	r3, r2
 8008ad6:	881b      	ldrh	r3, [r3, #0]
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ae2:	b29c      	uxth	r4, r3
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	441a      	add	r2, r3
 8008aee:	4b1a      	ldr	r3, [pc, #104]	; (8008b58 <USB_DeactivateEndpoint+0x320>)
 8008af0:	4323      	orrs	r3, r4
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	4413      	add	r3, r2
 8008b00:	881b      	ldrh	r3, [r3, #0]
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b0c:	b29c      	uxth	r4, r3
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	441a      	add	r2, r3
 8008b18:	4b11      	ldr	r3, [pc, #68]	; (8008b60 <USB_DeactivateEndpoint+0x328>)
 8008b1a:	4323      	orrs	r3, r4
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	4413      	add	r3, r2
 8008b2a:	881b      	ldrh	r3, [r3, #0]
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b36:	b29c      	uxth	r4, r3
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	441a      	add	r2, r3
 8008b42:	4b07      	ldr	r3, [pc, #28]	; (8008b60 <USB_DeactivateEndpoint+0x328>)
 8008b44:	4323      	orrs	r3, r4
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3708      	adds	r7, #8
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bc90      	pop	{r4, r7}
 8008b54:	4770      	bx	lr
 8008b56:	bf00      	nop
 8008b58:	ffffc080 	.word	0xffffc080
 8008b5c:	ffff80c0 	.word	0xffff80c0
 8008b60:	ffff8080 	.word	0xffff8080

08008b64 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b64:	b590      	push	{r4, r7, lr}
 8008b66:	b095      	sub	sp, #84	; 0x54
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	785b      	ldrb	r3, [r3, #1]
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	f040 815d 	bne.w	8008e32 <USB_EPStartXfer+0x2ce>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	699a      	ldr	r2, [r3, #24]
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	691b      	ldr	r3, [r3, #16]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d909      	bls.n	8008b98 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	691b      	ldr	r3, [r3, #16]
 8008b88:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	699a      	ldr	r2, [r3, #24]
 8008b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b90:	1ad2      	subs	r2, r2, r3
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	619a      	str	r2, [r3, #24]
 8008b96:	e005      	b.n	8008ba4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	699b      	ldr	r3, [r3, #24]
 8008b9c:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	7b1b      	ldrb	r3, [r3, #12]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d11a      	bne.n	8008be2 <USB_EPStartXfer+0x7e>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	6959      	ldr	r1, [r3, #20]
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	88da      	ldrh	r2, [r3, #6]
 8008bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 fb9c 	bl	80092f6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008bbe:	687c      	ldr	r4, [r7, #4]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	441c      	add	r4, r3
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	00db      	lsls	r3, r3, #3
 8008bd0:	4423      	add	r3, r4
 8008bd2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008bd6:	60fb      	str	r3, [r7, #12]
 8008bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	801a      	strh	r2, [r3, #0]
 8008be0:	e10b      	b.n	8008dfa <USB_EPStartXfer+0x296>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4413      	add	r3, r2
 8008bec:	881b      	ldrh	r3, [r3, #0]
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d062      	beq.n	8008cbe <USB_EPStartXfer+0x15a>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008bf8:	687c      	ldr	r4, [r7, #4]
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	785b      	ldrb	r3, [r3, #1]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d144      	bne.n	8008c8c <USB_EPStartXfer+0x128>
 8008c02:	687c      	ldr	r4, [r7, #4]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	441c      	add	r4, r3
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	00db      	lsls	r3, r3, #3
 8008c14:	4423      	add	r3, r4
 8008c16:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008c1a:	613b      	str	r3, [r7, #16]
 8008c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d110      	bne.n	8008c44 <USB_EPStartXfer+0xe0>
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	881b      	ldrh	r3, [r3, #0]
 8008c26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c2a:	b29a      	uxth	r2, r3
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	801a      	strh	r2, [r3, #0]
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	881b      	ldrh	r3, [r3, #0]
 8008c34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c3c:	b29a      	uxth	r2, r3
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	801a      	strh	r2, [r3, #0]
 8008c42:	e037      	b.n	8008cb4 <USB_EPStartXfer+0x150>
 8008c44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c46:	2b3d      	cmp	r3, #61	; 0x3d
 8008c48:	d811      	bhi.n	8008c6e <USB_EPStartXfer+0x10a>
 8008c4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c4c:	085b      	lsrs	r3, r3, #1
 8008c4e:	647b      	str	r3, [r7, #68]	; 0x44
 8008c50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c52:	f003 0301 	and.w	r3, r3, #1
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d002      	beq.n	8008c60 <USB_EPStartXfer+0xfc>
 8008c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	647b      	str	r3, [r7, #68]	; 0x44
 8008c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	029b      	lsls	r3, r3, #10
 8008c66:	b29a      	uxth	r2, r3
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	801a      	strh	r2, [r3, #0]
 8008c6c:	e022      	b.n	8008cb4 <USB_EPStartXfer+0x150>
 8008c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c70:	095b      	lsrs	r3, r3, #5
 8008c72:	647b      	str	r3, [r7, #68]	; 0x44
 8008c74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	029b      	lsls	r3, r3, #10
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c84:	b29a      	uxth	r2, r3
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	801a      	strh	r2, [r3, #0]
 8008c8a:	e013      	b.n	8008cb4 <USB_EPStartXfer+0x150>
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	785b      	ldrb	r3, [r3, #1]
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d10f      	bne.n	8008cb4 <USB_EPStartXfer+0x150>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	441c      	add	r4, r3
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	00db      	lsls	r3, r3, #3
 8008ca4:	4423      	add	r3, r4
 8008ca6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008caa:	617b      	str	r3, [r7, #20]
 8008cac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cae:	b29a      	uxth	r2, r3
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	895b      	ldrh	r3, [r3, #10]
 8008cb8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008cbc:	e061      	b.n	8008d82 <USB_EPStartXfer+0x21e>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	785b      	ldrb	r3, [r3, #1]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d144      	bne.n	8008d50 <USB_EPStartXfer+0x1ec>
 8008cc6:	687c      	ldr	r4, [r7, #4]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	441c      	add	r4, r3
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	00db      	lsls	r3, r3, #3
 8008cd8:	4423      	add	r3, r4
 8008cda:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008cde:	61bb      	str	r3, [r7, #24]
 8008ce0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d110      	bne.n	8008d08 <USB_EPStartXfer+0x1a4>
 8008ce6:	69bb      	ldr	r3, [r7, #24]
 8008ce8:	881b      	ldrh	r3, [r3, #0]
 8008cea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008cee:	b29a      	uxth	r2, r3
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	801a      	strh	r2, [r3, #0]
 8008cf4:	69bb      	ldr	r3, [r7, #24]
 8008cf6:	881b      	ldrh	r3, [r3, #0]
 8008cf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d00:	b29a      	uxth	r2, r3
 8008d02:	69bb      	ldr	r3, [r7, #24]
 8008d04:	801a      	strh	r2, [r3, #0]
 8008d06:	e038      	b.n	8008d7a <USB_EPStartXfer+0x216>
 8008d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d0a:	2b3d      	cmp	r3, #61	; 0x3d
 8008d0c:	d811      	bhi.n	8008d32 <USB_EPStartXfer+0x1ce>
 8008d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d10:	085b      	lsrs	r3, r3, #1
 8008d12:	643b      	str	r3, [r7, #64]	; 0x40
 8008d14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d16:	f003 0301 	and.w	r3, r3, #1
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d002      	beq.n	8008d24 <USB_EPStartXfer+0x1c0>
 8008d1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d20:	3301      	adds	r3, #1
 8008d22:	643b      	str	r3, [r7, #64]	; 0x40
 8008d24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	029b      	lsls	r3, r3, #10
 8008d2a:	b29a      	uxth	r2, r3
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	801a      	strh	r2, [r3, #0]
 8008d30:	e023      	b.n	8008d7a <USB_EPStartXfer+0x216>
 8008d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d34:	095b      	lsrs	r3, r3, #5
 8008d36:	643b      	str	r3, [r7, #64]	; 0x40
 8008d38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	029b      	lsls	r3, r3, #10
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d48:	b29a      	uxth	r2, r3
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	801a      	strh	r2, [r3, #0]
 8008d4e:	e014      	b.n	8008d7a <USB_EPStartXfer+0x216>
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	785b      	ldrb	r3, [r3, #1]
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d110      	bne.n	8008d7a <USB_EPStartXfer+0x216>
 8008d58:	687c      	ldr	r4, [r7, #4]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	441c      	add	r4, r3
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	00db      	lsls	r3, r3, #3
 8008d6a:	4423      	add	r3, r4
 8008d6c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008d70:	61fb      	str	r3, [r7, #28]
 8008d72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d74:	b29a      	uxth	r2, r3
 8008d76:	69fb      	ldr	r3, [r7, #28]
 8008d78:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	891b      	ldrh	r3, [r3, #8]
 8008d7e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	6959      	ldr	r1, [r3, #20]
 8008d86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 fab1 	bl	80092f6 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	785b      	ldrb	r3, [r3, #1]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d115      	bne.n	8008dc8 <USB_EPStartXfer+0x264>
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	4413      	add	r3, r2
 8008da6:	881b      	ldrh	r3, [r3, #0]
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008db2:	b29c      	uxth	r4, r3
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	441a      	add	r2, r3
 8008dbe:	4b99      	ldr	r3, [pc, #612]	; (8009024 <USB_EPStartXfer+0x4c0>)
 8008dc0:	4323      	orrs	r3, r4
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	8013      	strh	r3, [r2, #0]
 8008dc6:	e018      	b.n	8008dfa <USB_EPStartXfer+0x296>
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	785b      	ldrb	r3, [r3, #1]
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d114      	bne.n	8008dfa <USB_EPStartXfer+0x296>
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	4413      	add	r3, r2
 8008dda:	881b      	ldrh	r3, [r3, #0]
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008de6:	b29c      	uxth	r4, r3
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	441a      	add	r2, r3
 8008df2:	4b8d      	ldr	r3, [pc, #564]	; (8009028 <USB_EPStartXfer+0x4c4>)
 8008df4:	4323      	orrs	r3, r4
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	4413      	add	r3, r2
 8008e04:	881b      	ldrh	r3, [r3, #0]
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e10:	b29c      	uxth	r4, r3
 8008e12:	f084 0310 	eor.w	r3, r4, #16
 8008e16:	b29c      	uxth	r4, r3
 8008e18:	f084 0320 	eor.w	r3, r4, #32
 8008e1c:	b29c      	uxth	r4, r3
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	441a      	add	r2, r3
 8008e28:	4b80      	ldr	r3, [pc, #512]	; (800902c <USB_EPStartXfer+0x4c8>)
 8008e2a:	4323      	orrs	r3, r4
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	8013      	strh	r3, [r2, #0]
 8008e30:	e13c      	b.n	80090ac <USB_EPStartXfer+0x548>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	699a      	ldr	r2, [r3, #24]
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d909      	bls.n	8008e52 <USB_EPStartXfer+0x2ee>
    {
      len = ep->maxpacket;
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	691b      	ldr	r3, [r3, #16]
 8008e42:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	699a      	ldr	r2, [r3, #24]
 8008e48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e4a:	1ad2      	subs	r2, r2, r3
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	619a      	str	r2, [r3, #24]
 8008e50:	e005      	b.n	8008e5e <USB_EPStartXfer+0x2fa>
    }
    else
    {
      len = ep->xfer_len;
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	699b      	ldr	r3, [r3, #24]
 8008e56:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	7b1b      	ldrb	r3, [r3, #12]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d144      	bne.n	8008ef0 <USB_EPStartXfer+0x38c>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008e66:	687c      	ldr	r4, [r7, #4]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	441c      	add	r4, r3
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	00db      	lsls	r3, r3, #3
 8008e78:	4423      	add	r3, r4
 8008e7a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008e7e:	623b      	str	r3, [r7, #32]
 8008e80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d110      	bne.n	8008ea8 <USB_EPStartXfer+0x344>
 8008e86:	6a3b      	ldr	r3, [r7, #32]
 8008e88:	881b      	ldrh	r3, [r3, #0]
 8008e8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008e8e:	b29a      	uxth	r2, r3
 8008e90:	6a3b      	ldr	r3, [r7, #32]
 8008e92:	801a      	strh	r2, [r3, #0]
 8008e94:	6a3b      	ldr	r3, [r7, #32]
 8008e96:	881b      	ldrh	r3, [r3, #0]
 8008e98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ea0:	b29a      	uxth	r2, r3
 8008ea2:	6a3b      	ldr	r3, [r7, #32]
 8008ea4:	801a      	strh	r2, [r3, #0]
 8008ea6:	e0e6      	b.n	8009076 <USB_EPStartXfer+0x512>
 8008ea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008eaa:	2b3d      	cmp	r3, #61	; 0x3d
 8008eac:	d811      	bhi.n	8008ed2 <USB_EPStartXfer+0x36e>
 8008eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008eb0:	085b      	lsrs	r3, r3, #1
 8008eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008eb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008eb6:	f003 0301 	and.w	r3, r3, #1
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d002      	beq.n	8008ec4 <USB_EPStartXfer+0x360>
 8008ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	029b      	lsls	r3, r3, #10
 8008eca:	b29a      	uxth	r2, r3
 8008ecc:	6a3b      	ldr	r3, [r7, #32]
 8008ece:	801a      	strh	r2, [r3, #0]
 8008ed0:	e0d1      	b.n	8009076 <USB_EPStartXfer+0x512>
 8008ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ed4:	095b      	lsrs	r3, r3, #5
 8008ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	029b      	lsls	r3, r3, #10
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ee4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ee8:	b29a      	uxth	r2, r3
 8008eea:	6a3b      	ldr	r3, [r7, #32]
 8008eec:	801a      	strh	r2, [r3, #0]
 8008eee:	e0c2      	b.n	8009076 <USB_EPStartXfer+0x512>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	785b      	ldrb	r3, [r3, #1]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d144      	bne.n	8008f82 <USB_EPStartXfer+0x41e>
 8008ef8:	687c      	ldr	r4, [r7, #4]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	441c      	add	r4, r3
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	00db      	lsls	r3, r3, #3
 8008f0a:	4423      	add	r3, r4
 8008f0c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008f10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d110      	bne.n	8008f3a <USB_EPStartXfer+0x3d6>
 8008f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1a:	881b      	ldrh	r3, [r3, #0]
 8008f1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008f20:	b29a      	uxth	r2, r3
 8008f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f24:	801a      	strh	r2, [r3, #0]
 8008f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f28:	881b      	ldrh	r3, [r3, #0]
 8008f2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f32:	b29a      	uxth	r2, r3
 8008f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f36:	801a      	strh	r2, [r3, #0]
 8008f38:	e038      	b.n	8008fac <USB_EPStartXfer+0x448>
 8008f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f3c:	2b3d      	cmp	r3, #61	; 0x3d
 8008f3e:	d811      	bhi.n	8008f64 <USB_EPStartXfer+0x400>
 8008f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f42:	085b      	lsrs	r3, r3, #1
 8008f44:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f48:	f003 0301 	and.w	r3, r3, #1
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d002      	beq.n	8008f56 <USB_EPStartXfer+0x3f2>
 8008f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f52:	3301      	adds	r3, #1
 8008f54:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	029b      	lsls	r3, r3, #10
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f60:	801a      	strh	r2, [r3, #0]
 8008f62:	e023      	b.n	8008fac <USB_EPStartXfer+0x448>
 8008f64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f66:	095b      	lsrs	r3, r3, #5
 8008f68:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	029b      	lsls	r3, r3, #10
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f7a:	b29a      	uxth	r2, r3
 8008f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f7e:	801a      	strh	r2, [r3, #0]
 8008f80:	e014      	b.n	8008fac <USB_EPStartXfer+0x448>
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	785b      	ldrb	r3, [r3, #1]
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d110      	bne.n	8008fac <USB_EPStartXfer+0x448>
 8008f8a:	687c      	ldr	r4, [r7, #4]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	441c      	add	r4, r3
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	00db      	lsls	r3, r3, #3
 8008f9c:	4423      	add	r3, r4
 8008f9e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008fa2:	633b      	str	r3, [r7, #48]	; 0x30
 8008fa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fa6:	b29a      	uxth	r2, r3
 8008fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008faa:	801a      	strh	r2, [r3, #0]
 8008fac:	687c      	ldr	r4, [r7, #4]
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	785b      	ldrb	r3, [r3, #1]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d14b      	bne.n	800904e <USB_EPStartXfer+0x4ea>
 8008fb6:	687c      	ldr	r4, [r7, #4]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	441c      	add	r4, r3
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	00db      	lsls	r3, r3, #3
 8008fc8:	4423      	add	r3, r4
 8008fca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008fce:	627b      	str	r3, [r7, #36]	; 0x24
 8008fd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d110      	bne.n	8008ff8 <USB_EPStartXfer+0x494>
 8008fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd8:	881b      	ldrh	r3, [r3, #0]
 8008fda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008fde:	b29a      	uxth	r2, r3
 8008fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe2:	801a      	strh	r2, [r3, #0]
 8008fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe6:	881b      	ldrh	r3, [r3, #0]
 8008fe8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ff0:	b29a      	uxth	r2, r3
 8008ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff4:	801a      	strh	r2, [r3, #0]
 8008ff6:	e03e      	b.n	8009076 <USB_EPStartXfer+0x512>
 8008ff8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ffa:	2b3d      	cmp	r3, #61	; 0x3d
 8008ffc:	d818      	bhi.n	8009030 <USB_EPStartXfer+0x4cc>
 8008ffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009000:	085b      	lsrs	r3, r3, #1
 8009002:	637b      	str	r3, [r7, #52]	; 0x34
 8009004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009006:	f003 0301 	and.w	r3, r3, #1
 800900a:	2b00      	cmp	r3, #0
 800900c:	d002      	beq.n	8009014 <USB_EPStartXfer+0x4b0>
 800900e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009010:	3301      	adds	r3, #1
 8009012:	637b      	str	r3, [r7, #52]	; 0x34
 8009014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009016:	b29b      	uxth	r3, r3
 8009018:	029b      	lsls	r3, r3, #10
 800901a:	b29a      	uxth	r2, r3
 800901c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901e:	801a      	strh	r2, [r3, #0]
 8009020:	e029      	b.n	8009076 <USB_EPStartXfer+0x512>
 8009022:	bf00      	nop
 8009024:	ffff80c0 	.word	0xffff80c0
 8009028:	ffffc080 	.word	0xffffc080
 800902c:	ffff8080 	.word	0xffff8080
 8009030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009032:	095b      	lsrs	r3, r3, #5
 8009034:	637b      	str	r3, [r7, #52]	; 0x34
 8009036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009038:	b29b      	uxth	r3, r3
 800903a:	029b      	lsls	r3, r3, #10
 800903c:	b29b      	uxth	r3, r3
 800903e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009046:	b29a      	uxth	r2, r3
 8009048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904a:	801a      	strh	r2, [r3, #0]
 800904c:	e013      	b.n	8009076 <USB_EPStartXfer+0x512>
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	785b      	ldrb	r3, [r3, #1]
 8009052:	2b01      	cmp	r3, #1
 8009054:	d10f      	bne.n	8009076 <USB_EPStartXfer+0x512>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800905c:	b29b      	uxth	r3, r3
 800905e:	441c      	add	r4, r3
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	00db      	lsls	r3, r3, #3
 8009066:	4423      	add	r3, r4
 8009068:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800906c:	62bb      	str	r3, [r7, #40]	; 0x28
 800906e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009070:	b29a      	uxth	r2, r3
 8009072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009074:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	4413      	add	r3, r2
 8009080:	881b      	ldrh	r3, [r3, #0]
 8009082:	b29b      	uxth	r3, r3
 8009084:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800908c:	b29c      	uxth	r4, r3
 800908e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8009092:	b29c      	uxth	r4, r3
 8009094:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8009098:	b29c      	uxth	r4, r3
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	441a      	add	r2, r3
 80090a4:	4b04      	ldr	r3, [pc, #16]	; (80090b8 <USB_EPStartXfer+0x554>)
 80090a6:	4323      	orrs	r3, r4
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3754      	adds	r7, #84	; 0x54
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd90      	pop	{r4, r7, pc}
 80090b6:	bf00      	nop
 80090b8:	ffff8080 	.word	0xffff8080

080090bc <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80090bc:	b490      	push	{r4, r7}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	785b      	ldrb	r3, [r3, #1]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d018      	beq.n	8009100 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	4413      	add	r3, r2
 80090d8:	881b      	ldrh	r3, [r3, #0]
 80090da:	b29b      	uxth	r3, r3
 80090dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090e4:	b29c      	uxth	r4, r3
 80090e6:	f084 0310 	eor.w	r3, r4, #16
 80090ea:	b29c      	uxth	r4, r3
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	441a      	add	r2, r3
 80090f6:	4b11      	ldr	r3, [pc, #68]	; (800913c <USB_EPSetStall+0x80>)
 80090f8:	4323      	orrs	r3, r4
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	8013      	strh	r3, [r2, #0]
 80090fe:	e017      	b.n	8009130 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	4413      	add	r3, r2
 800910a:	881b      	ldrh	r3, [r3, #0]
 800910c:	b29b      	uxth	r3, r3
 800910e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009116:	b29c      	uxth	r4, r3
 8009118:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800911c:	b29c      	uxth	r4, r3
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	441a      	add	r2, r3
 8009128:	4b04      	ldr	r3, [pc, #16]	; (800913c <USB_EPSetStall+0x80>)
 800912a:	4323      	orrs	r3, r4
 800912c:	b29b      	uxth	r3, r3
 800912e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009130:	2300      	movs	r3, #0
}
 8009132:	4618      	mov	r0, r3
 8009134:	3708      	adds	r7, #8
 8009136:	46bd      	mov	sp, r7
 8009138:	bc90      	pop	{r4, r7}
 800913a:	4770      	bx	lr
 800913c:	ffff8080 	.word	0xffff8080

08009140 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009140:	b490      	push	{r4, r7}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	7b1b      	ldrb	r3, [r3, #12]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d17d      	bne.n	800924e <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	785b      	ldrb	r3, [r3, #1]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d03d      	beq.n	80091d6 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	4413      	add	r3, r2
 8009164:	881b      	ldrh	r3, [r3, #0]
 8009166:	b29c      	uxth	r4, r3
 8009168:	4623      	mov	r3, r4
 800916a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800916e:	2b00      	cmp	r3, #0
 8009170:	d014      	beq.n	800919c <USB_EPClearStall+0x5c>
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	009b      	lsls	r3, r3, #2
 800917a:	4413      	add	r3, r2
 800917c:	881b      	ldrh	r3, [r3, #0]
 800917e:	b29b      	uxth	r3, r3
 8009180:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009188:	b29c      	uxth	r4, r3
 800918a:	687a      	ldr	r2, [r7, #4]
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	441a      	add	r2, r3
 8009194:	4b31      	ldr	r3, [pc, #196]	; (800925c <USB_EPClearStall+0x11c>)
 8009196:	4323      	orrs	r3, r4
 8009198:	b29b      	uxth	r3, r3
 800919a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	78db      	ldrb	r3, [r3, #3]
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d054      	beq.n	800924e <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	4413      	add	r3, r2
 80091ae:	881b      	ldrh	r3, [r3, #0]
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091ba:	b29c      	uxth	r4, r3
 80091bc:	f084 0320 	eor.w	r3, r4, #32
 80091c0:	b29c      	uxth	r4, r3
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	009b      	lsls	r3, r3, #2
 80091ca:	441a      	add	r2, r3
 80091cc:	4b24      	ldr	r3, [pc, #144]	; (8009260 <USB_EPClearStall+0x120>)
 80091ce:	4323      	orrs	r3, r4
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	8013      	strh	r3, [r2, #0]
 80091d4:	e03b      	b.n	800924e <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	4413      	add	r3, r2
 80091e0:	881b      	ldrh	r3, [r3, #0]
 80091e2:	b29c      	uxth	r4, r3
 80091e4:	4623      	mov	r3, r4
 80091e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d014      	beq.n	8009218 <USB_EPClearStall+0xd8>
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	4413      	add	r3, r2
 80091f8:	881b      	ldrh	r3, [r3, #0]
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009204:	b29c      	uxth	r4, r3
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	441a      	add	r2, r3
 8009210:	4b14      	ldr	r3, [pc, #80]	; (8009264 <USB_EPClearStall+0x124>)
 8009212:	4323      	orrs	r3, r4
 8009214:	b29b      	uxth	r3, r3
 8009216:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	4413      	add	r3, r2
 8009222:	881b      	ldrh	r3, [r3, #0]
 8009224:	b29b      	uxth	r3, r3
 8009226:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800922a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800922e:	b29c      	uxth	r4, r3
 8009230:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8009234:	b29c      	uxth	r4, r3
 8009236:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800923a:	b29c      	uxth	r4, r3
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	441a      	add	r2, r3
 8009246:	4b06      	ldr	r3, [pc, #24]	; (8009260 <USB_EPClearStall+0x120>)
 8009248:	4323      	orrs	r3, r4
 800924a:	b29b      	uxth	r3, r3
 800924c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800924e:	2300      	movs	r3, #0
}
 8009250:	4618      	mov	r0, r3
 8009252:	3708      	adds	r7, #8
 8009254:	46bd      	mov	sp, r7
 8009256:	bc90      	pop	{r4, r7}
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	ffff80c0 	.word	0xffff80c0
 8009260:	ffff8080 	.word	0xffff8080
 8009264:	ffffc080 	.word	0xffffc080

08009268 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	460b      	mov	r3, r1
 8009272:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009274:	78fb      	ldrb	r3, [r7, #3]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d103      	bne.n	8009282 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2280      	movs	r2, #128	; 0x80
 800927e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009282:	2300      	movs	r3, #0
}
 8009284:	4618      	mov	r0, r3
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800929e:	b29b      	uxth	r3, r3
 80092a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092a8:	b29a      	uxth	r2, r3
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80092b0:	2300      	movs	r3, #0
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	370c      	adds	r7, #12
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr

080092be <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80092be:	b480      	push	{r7}
 80092c0:	b085      	sub	sp, #20
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80092d0:	68fb      	ldr	r3, [r7, #12]
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3714      	adds	r7, #20
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr

080092de <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80092de:	b480      	push	{r7}
 80092e0:	b083      	sub	sp, #12
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
 80092e6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80092e8:	2300      	movs	r3, #0
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	370c      	adds	r7, #12
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr

080092f6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80092f6:	b480      	push	{r7}
 80092f8:	b08d      	sub	sp, #52	; 0x34
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	60f8      	str	r0, [r7, #12]
 80092fe:	60b9      	str	r1, [r7, #8]
 8009300:	4611      	mov	r1, r2
 8009302:	461a      	mov	r2, r3
 8009304:	460b      	mov	r3, r1
 8009306:	80fb      	strh	r3, [r7, #6]
 8009308:	4613      	mov	r3, r2
 800930a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800930c:	88bb      	ldrh	r3, [r7, #4]
 800930e:	3301      	adds	r3, #1
 8009310:	085b      	lsrs	r3, r3, #1
 8009312:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800931c:	88fa      	ldrh	r2, [r7, #6]
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	4413      	add	r3, r2
 8009322:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009326:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009328:	6a3b      	ldr	r3, [r7, #32]
 800932a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800932c:	e01b      	b.n	8009366 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800932e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009336:	3301      	adds	r3, #1
 8009338:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800933a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	b29b      	uxth	r3, r3
 8009340:	021b      	lsls	r3, r3, #8
 8009342:	b29b      	uxth	r3, r3
 8009344:	461a      	mov	r2, r3
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	4313      	orrs	r3, r2
 800934a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	b29a      	uxth	r2, r3
 8009350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009352:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009356:	3302      	adds	r3, #2
 8009358:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800935a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935c:	3301      	adds	r3, #1
 800935e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009362:	3b01      	subs	r3, #1
 8009364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009368:	2b00      	cmp	r3, #0
 800936a:	d1e0      	bne.n	800932e <USB_WritePMA+0x38>
  }
}
 800936c:	bf00      	nop
 800936e:	3734      	adds	r7, #52	; 0x34
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr

08009378 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009378:	b480      	push	{r7}
 800937a:	b08b      	sub	sp, #44	; 0x2c
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	4611      	mov	r1, r2
 8009384:	461a      	mov	r2, r3
 8009386:	460b      	mov	r3, r1
 8009388:	80fb      	strh	r3, [r7, #6]
 800938a:	4613      	mov	r3, r2
 800938c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800938e:	88bb      	ldrh	r3, [r7, #4]
 8009390:	085b      	lsrs	r3, r3, #1
 8009392:	b29b      	uxth	r3, r3
 8009394:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800939e:	88fa      	ldrh	r2, [r7, #6]
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	4413      	add	r3, r2
 80093a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093a8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	627b      	str	r3, [r7, #36]	; 0x24
 80093ae:	e018      	b.n	80093e2 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80093b0:	6a3b      	ldr	r3, [r7, #32]
 80093b2:	881b      	ldrh	r3, [r3, #0]
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80093b8:	6a3b      	ldr	r3, [r7, #32]
 80093ba:	3302      	adds	r3, #2
 80093bc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	b2da      	uxtb	r2, r3
 80093c2:	69fb      	ldr	r3, [r7, #28]
 80093c4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80093c6:	69fb      	ldr	r3, [r7, #28]
 80093c8:	3301      	adds	r3, #1
 80093ca:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	0a1b      	lsrs	r3, r3, #8
 80093d0:	b2da      	uxtb	r2, r3
 80093d2:	69fb      	ldr	r3, [r7, #28]
 80093d4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	3301      	adds	r3, #1
 80093da:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80093dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093de:	3b01      	subs	r3, #1
 80093e0:	627b      	str	r3, [r7, #36]	; 0x24
 80093e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d1e3      	bne.n	80093b0 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80093e8:	88bb      	ldrh	r3, [r7, #4]
 80093ea:	f003 0301 	and.w	r3, r3, #1
 80093ee:	b29b      	uxth	r3, r3
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d007      	beq.n	8009404 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80093f4:	6a3b      	ldr	r3, [r7, #32]
 80093f6:	881b      	ldrh	r3, [r3, #0]
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	b2da      	uxtb	r2, r3
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	701a      	strb	r2, [r3, #0]
  }
}
 8009404:	bf00      	nop
 8009406:	372c      	adds	r7, #44	; 0x2c
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	460b      	mov	r3, r1
 800941a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800941c:	2300      	movs	r3, #0
 800941e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	7c1b      	ldrb	r3, [r3, #16]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d115      	bne.n	8009454 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009428:	f44f 7300 	mov.w	r3, #512	; 0x200
 800942c:	2202      	movs	r2, #2
 800942e:	2181      	movs	r1, #129	; 0x81
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f004 feb2 	bl	800e19a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2201      	movs	r2, #1
 800943a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800943c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009440:	2202      	movs	r2, #2
 8009442:	2101      	movs	r1, #1
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f004 fea8 	bl	800e19a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2201      	movs	r2, #1
 800944e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009452:	e012      	b.n	800947a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009454:	2340      	movs	r3, #64	; 0x40
 8009456:	2202      	movs	r2, #2
 8009458:	2181      	movs	r1, #129	; 0x81
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f004 fe9d 	bl	800e19a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2201      	movs	r2, #1
 8009464:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009466:	2340      	movs	r3, #64	; 0x40
 8009468:	2202      	movs	r2, #2
 800946a:	2101      	movs	r1, #1
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f004 fe94 	bl	800e19a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2201      	movs	r2, #1
 8009476:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800947a:	2308      	movs	r3, #8
 800947c:	2203      	movs	r2, #3
 800947e:	2182      	movs	r1, #130	; 0x82
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f004 fe8a 	bl	800e19a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2201      	movs	r2, #1
 800948a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800948c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009490:	f004 ffda 	bl	800e448 <USBD_static_malloc>
 8009494:	4602      	mov	r2, r0
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d102      	bne.n	80094ac <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80094a6:	2301      	movs	r3, #1
 80094a8:	73fb      	strb	r3, [r7, #15]
 80094aa:	e026      	b.n	80094fa <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094b2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	2200      	movs	r2, #0
 80094c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	2200      	movs	r2, #0
 80094ca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	7c1b      	ldrb	r3, [r3, #16]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d109      	bne.n	80094ea <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80094dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80094e0:	2101      	movs	r1, #1
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f004 ff44 	bl	800e370 <USBD_LL_PrepareReceive>
 80094e8:	e007      	b.n	80094fa <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80094f0:	2340      	movs	r3, #64	; 0x40
 80094f2:	2101      	movs	r1, #1
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f004 ff3b 	bl	800e370 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80094fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3710      	adds	r7, #16
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	460b      	mov	r3, r1
 800950e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009510:	2300      	movs	r3, #0
 8009512:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009514:	2181      	movs	r1, #129	; 0x81
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f004 fe65 	bl	800e1e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009522:	2101      	movs	r1, #1
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f004 fe5e 	bl	800e1e6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009532:	2182      	movs	r1, #130	; 0x82
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f004 fe56 	bl	800e1e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009546:	2b00      	cmp	r3, #0
 8009548:	d00e      	beq.n	8009568 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800955a:	4618      	mov	r0, r3
 800955c:	f004 ff82 	bl	800e464 <USBD_static_free>
    pdev->pClassData = NULL;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009568:	7bfb      	ldrb	r3, [r7, #15]
}
 800956a:	4618      	mov	r0, r3
 800956c:	3710      	adds	r7, #16
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}

08009572 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b086      	sub	sp, #24
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
 800957a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009582:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009584:	2300      	movs	r3, #0
 8009586:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009588:	2300      	movs	r3, #0
 800958a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800958c:	2300      	movs	r3, #0
 800958e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009598:	2b00      	cmp	r3, #0
 800959a:	d039      	beq.n	8009610 <USBD_CDC_Setup+0x9e>
 800959c:	2b20      	cmp	r3, #32
 800959e:	d17c      	bne.n	800969a <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	88db      	ldrh	r3, [r3, #6]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d029      	beq.n	80095fc <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	b25b      	sxtb	r3, r3
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	da11      	bge.n	80095d6 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	683a      	ldr	r2, [r7, #0]
 80095bc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80095be:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80095c0:	683a      	ldr	r2, [r7, #0]
 80095c2:	88d2      	ldrh	r2, [r2, #6]
 80095c4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80095c6:	6939      	ldr	r1, [r7, #16]
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	88db      	ldrh	r3, [r3, #6]
 80095cc:	461a      	mov	r2, r3
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f001 fa2a 	bl	800aa28 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80095d4:	e068      	b.n	80096a8 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	785a      	ldrb	r2, [r3, #1]
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	88db      	ldrh	r3, [r3, #6]
 80095e4:	b2da      	uxtb	r2, r3
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80095ec:	6939      	ldr	r1, [r7, #16]
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	88db      	ldrh	r3, [r3, #6]
 80095f2:	461a      	mov	r2, r3
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f001 fa45 	bl	800aa84 <USBD_CtlPrepareRx>
      break;
 80095fa:	e055      	b.n	80096a8 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	683a      	ldr	r2, [r7, #0]
 8009606:	7850      	ldrb	r0, [r2, #1]
 8009608:	2200      	movs	r2, #0
 800960a:	6839      	ldr	r1, [r7, #0]
 800960c:	4798      	blx	r3
      break;
 800960e:	e04b      	b.n	80096a8 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	785b      	ldrb	r3, [r3, #1]
 8009614:	2b0a      	cmp	r3, #10
 8009616:	d017      	beq.n	8009648 <USBD_CDC_Setup+0xd6>
 8009618:	2b0b      	cmp	r3, #11
 800961a:	d029      	beq.n	8009670 <USBD_CDC_Setup+0xfe>
 800961c:	2b00      	cmp	r3, #0
 800961e:	d133      	bne.n	8009688 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009626:	2b03      	cmp	r3, #3
 8009628:	d107      	bne.n	800963a <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800962a:	f107 030c 	add.w	r3, r7, #12
 800962e:	2202      	movs	r2, #2
 8009630:	4619      	mov	r1, r3
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f001 f9f8 	bl	800aa28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009638:	e02e      	b.n	8009698 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800963a:	6839      	ldr	r1, [r7, #0]
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f001 f988 	bl	800a952 <USBD_CtlError>
            ret = USBD_FAIL;
 8009642:	2302      	movs	r3, #2
 8009644:	75fb      	strb	r3, [r7, #23]
          break;
 8009646:	e027      	b.n	8009698 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800964e:	2b03      	cmp	r3, #3
 8009650:	d107      	bne.n	8009662 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009652:	f107 030f 	add.w	r3, r7, #15
 8009656:	2201      	movs	r2, #1
 8009658:	4619      	mov	r1, r3
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f001 f9e4 	bl	800aa28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009660:	e01a      	b.n	8009698 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8009662:	6839      	ldr	r1, [r7, #0]
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f001 f974 	bl	800a952 <USBD_CtlError>
            ret = USBD_FAIL;
 800966a:	2302      	movs	r3, #2
 800966c:	75fb      	strb	r3, [r7, #23]
          break;
 800966e:	e013      	b.n	8009698 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009676:	2b03      	cmp	r3, #3
 8009678:	d00d      	beq.n	8009696 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 800967a:	6839      	ldr	r1, [r7, #0]
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f001 f968 	bl	800a952 <USBD_CtlError>
            ret = USBD_FAIL;
 8009682:	2302      	movs	r3, #2
 8009684:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009686:	e006      	b.n	8009696 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8009688:	6839      	ldr	r1, [r7, #0]
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f001 f961 	bl	800a952 <USBD_CtlError>
          ret = USBD_FAIL;
 8009690:	2302      	movs	r3, #2
 8009692:	75fb      	strb	r3, [r7, #23]
          break;
 8009694:	e000      	b.n	8009698 <USBD_CDC_Setup+0x126>
          break;
 8009696:	bf00      	nop
      }
      break;
 8009698:	e006      	b.n	80096a8 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800969a:	6839      	ldr	r1, [r7, #0]
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f001 f958 	bl	800a952 <USBD_CtlError>
      ret = USBD_FAIL;
 80096a2:	2302      	movs	r3, #2
 80096a4:	75fb      	strb	r3, [r7, #23]
      break;
 80096a6:	bf00      	nop
  }

  return ret;
 80096a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3718      	adds	r7, #24
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}

080096b2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80096b2:	b580      	push	{r7, lr}
 80096b4:	b084      	sub	sp, #16
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
 80096ba:	460b      	mov	r3, r1
 80096bc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096c4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096cc:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d037      	beq.n	8009748 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80096d8:	78fa      	ldrb	r2, [r7, #3]
 80096da:	6879      	ldr	r1, [r7, #4]
 80096dc:	4613      	mov	r3, r2
 80096de:	009b      	lsls	r3, r3, #2
 80096e0:	4413      	add	r3, r2
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	440b      	add	r3, r1
 80096e6:	331c      	adds	r3, #28
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d026      	beq.n	800973c <USBD_CDC_DataIn+0x8a>
 80096ee:	78fa      	ldrb	r2, [r7, #3]
 80096f0:	6879      	ldr	r1, [r7, #4]
 80096f2:	4613      	mov	r3, r2
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	4413      	add	r3, r2
 80096f8:	009b      	lsls	r3, r3, #2
 80096fa:	440b      	add	r3, r1
 80096fc:	331c      	adds	r3, #28
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	78fa      	ldrb	r2, [r7, #3]
 8009702:	68b9      	ldr	r1, [r7, #8]
 8009704:	0152      	lsls	r2, r2, #5
 8009706:	440a      	add	r2, r1
 8009708:	3238      	adds	r2, #56	; 0x38
 800970a:	6812      	ldr	r2, [r2, #0]
 800970c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009710:	fb02 f201 	mul.w	r2, r2, r1
 8009714:	1a9b      	subs	r3, r3, r2
 8009716:	2b00      	cmp	r3, #0
 8009718:	d110      	bne.n	800973c <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800971a:	78fa      	ldrb	r2, [r7, #3]
 800971c:	6879      	ldr	r1, [r7, #4]
 800971e:	4613      	mov	r3, r2
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	4413      	add	r3, r2
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	440b      	add	r3, r1
 8009728:	331c      	adds	r3, #28
 800972a:	2200      	movs	r2, #0
 800972c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800972e:	78f9      	ldrb	r1, [r7, #3]
 8009730:	2300      	movs	r3, #0
 8009732:	2200      	movs	r2, #0
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f004 fdf8 	bl	800e32a <USBD_LL_Transmit>
 800973a:	e003      	b.n	8009744 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2200      	movs	r2, #0
 8009740:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009744:	2300      	movs	r3, #0
 8009746:	e000      	b.n	800974a <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8009748:	2302      	movs	r3, #2
  }
}
 800974a:	4618      	mov	r0, r3
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}

08009752 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009752:	b580      	push	{r7, lr}
 8009754:	b084      	sub	sp, #16
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
 800975a:	460b      	mov	r3, r1
 800975c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009764:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009766:	78fb      	ldrb	r3, [r7, #3]
 8009768:	4619      	mov	r1, r3
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f004 fe23 	bl	800e3b6 <USBD_LL_GetRxDataSize>
 8009770:	4602      	mov	r2, r0
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800977e:	2b00      	cmp	r3, #0
 8009780:	d00d      	beq.n	800979e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	68fa      	ldr	r2, [r7, #12]
 800978c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009790:	68fa      	ldr	r2, [r7, #12]
 8009792:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009796:	4611      	mov	r1, r2
 8009798:	4798      	blx	r3

    return USBD_OK;
 800979a:	2300      	movs	r3, #0
 800979c:	e000      	b.n	80097a0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800979e:	2302      	movs	r3, #2
  }
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3710      	adds	r7, #16
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097b6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d015      	beq.n	80097ee <USBD_CDC_EP0_RxReady+0x46>
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80097c8:	2bff      	cmp	r3, #255	; 0xff
 80097ca:	d010      	beq.n	80097ee <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097d2:	689b      	ldr	r3, [r3, #8]
 80097d4:	68fa      	ldr	r2, [r7, #12]
 80097d6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80097da:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80097dc:	68fa      	ldr	r2, [r7, #12]
 80097de:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80097e2:	b292      	uxth	r2, r2
 80097e4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	22ff      	movs	r2, #255	; 0xff
 80097ea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80097ee:	2300      	movs	r3, #0
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3710      	adds	r7, #16
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b083      	sub	sp, #12
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2243      	movs	r2, #67	; 0x43
 8009804:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009806:	4b03      	ldr	r3, [pc, #12]	; (8009814 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009808:	4618      	mov	r0, r3
 800980a:	370c      	adds	r7, #12
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr
 8009814:	200000a0 	.word	0x200000a0

08009818 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2243      	movs	r2, #67	; 0x43
 8009824:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009826:	4b03      	ldr	r3, [pc, #12]	; (8009834 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009828:	4618      	mov	r0, r3
 800982a:	370c      	adds	r7, #12
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr
 8009834:	2000005c 	.word	0x2000005c

08009838 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2243      	movs	r2, #67	; 0x43
 8009844:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009846:	4b03      	ldr	r3, [pc, #12]	; (8009854 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009848:	4618      	mov	r0, r3
 800984a:	370c      	adds	r7, #12
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr
 8009854:	200000e4 	.word	0x200000e4

08009858 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	220a      	movs	r2, #10
 8009864:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009866:	4b03      	ldr	r3, [pc, #12]	; (8009874 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009868:	4618      	mov	r0, r3
 800986a:	370c      	adds	r7, #12
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr
 8009874:	20000018 	.word	0x20000018

08009878 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009878:	b480      	push	{r7}
 800987a:	b085      	sub	sp, #20
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009882:	2302      	movs	r3, #2
 8009884:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d005      	beq.n	8009898 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	683a      	ldr	r2, [r7, #0]
 8009890:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009894:	2300      	movs	r3, #0
 8009896:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009898:	7bfb      	ldrb	r3, [r7, #15]
}
 800989a:	4618      	mov	r0, r3
 800989c:	3714      	adds	r7, #20
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr

080098a6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80098a6:	b480      	push	{r7}
 80098a8:	b087      	sub	sp, #28
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	60f8      	str	r0, [r7, #12]
 80098ae:	60b9      	str	r1, [r7, #8]
 80098b0:	4613      	mov	r3, r2
 80098b2:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098ba:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	68ba      	ldr	r2, [r7, #8]
 80098c0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80098c4:	88fa      	ldrh	r2, [r7, #6]
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80098cc:	2300      	movs	r3, #0
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	371c      	adds	r7, #28
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr

080098da <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80098da:	b480      	push	{r7}
 80098dc:	b085      	sub	sp, #20
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
 80098e2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098ea:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	683a      	ldr	r2, [r7, #0]
 80098f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80098f4:	2300      	movs	r3, #0
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3714      	adds	r7, #20
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr

08009902 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009902:	b580      	push	{r7, lr}
 8009904:	b084      	sub	sp, #16
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009910:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009918:	2b00      	cmp	r3, #0
 800991a:	d01c      	beq.n	8009956 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009922:	2b00      	cmp	r3, #0
 8009924:	d115      	bne.n	8009952 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2201      	movs	r2, #1
 800992a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009944:	b29b      	uxth	r3, r3
 8009946:	2181      	movs	r1, #129	; 0x81
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f004 fcee 	bl	800e32a <USBD_LL_Transmit>

      return USBD_OK;
 800994e:	2300      	movs	r3, #0
 8009950:	e002      	b.n	8009958 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009952:	2301      	movs	r3, #1
 8009954:	e000      	b.n	8009958 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009956:	2302      	movs	r3, #2
  }
}
 8009958:	4618      	mov	r0, r3
 800995a:	3710      	adds	r7, #16
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b084      	sub	sp, #16
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800996e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009976:	2b00      	cmp	r3, #0
 8009978:	d017      	beq.n	80099aa <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	7c1b      	ldrb	r3, [r3, #16]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d109      	bne.n	8009996 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009988:	f44f 7300 	mov.w	r3, #512	; 0x200
 800998c:	2101      	movs	r1, #1
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f004 fcee 	bl	800e370 <USBD_LL_PrepareReceive>
 8009994:	e007      	b.n	80099a6 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800999c:	2340      	movs	r3, #64	; 0x40
 800999e:	2101      	movs	r1, #1
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f004 fce5 	bl	800e370 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80099a6:	2300      	movs	r3, #0
 80099a8:	e000      	b.n	80099ac <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80099aa:	2302      	movs	r3, #2
  }
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3710      	adds	r7, #16
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	60b9      	str	r1, [r7, #8]
 80099be:	4613      	mov	r3, r2
 80099c0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d101      	bne.n	80099cc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80099c8:	2302      	movs	r3, #2
 80099ca:	e01a      	b.n	8009a02 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d003      	beq.n	80099de <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2200      	movs	r2, #0
 80099da:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d003      	beq.n	80099ec <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	68ba      	ldr	r2, [r7, #8]
 80099e8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2201      	movs	r2, #1
 80099f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	79fa      	ldrb	r2, [r7, #7]
 80099f8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80099fa:	68f8      	ldr	r0, [r7, #12]
 80099fc:	f004 fb50 	bl	800e0a0 <USBD_LL_Init>

  return USBD_OK;
 8009a00:	2300      	movs	r3, #0
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3710      	adds	r7, #16
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009a0a:	b480      	push	{r7}
 8009a0c:	b085      	sub	sp, #20
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
 8009a12:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009a14:	2300      	movs	r3, #0
 8009a16:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d006      	beq.n	8009a2c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	683a      	ldr	r2, [r7, #0]
 8009a22:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009a26:	2300      	movs	r3, #0
 8009a28:	73fb      	strb	r3, [r7, #15]
 8009a2a:	e001      	b.n	8009a30 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009a2c:	2302      	movs	r3, #2
 8009a2e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3714      	adds	r7, #20
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr

08009a3e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b082      	sub	sp, #8
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f004 fb8c 	bl	800e164 <USBD_LL_Start>

  return USBD_OK;
 8009a4c:	2300      	movs	r3, #0
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3708      	adds	r7, #8
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009a56:	b480      	push	{r7}
 8009a58:	b083      	sub	sp, #12
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009a5e:	2300      	movs	r3, #0
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	370c      	adds	r7, #12
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr

08009a6c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	460b      	mov	r3, r1
 8009a76:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009a78:	2302      	movs	r3, #2
 8009a7a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d00c      	beq.n	8009aa0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	78fa      	ldrb	r2, [r7, #3]
 8009a90:	4611      	mov	r1, r2
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	4798      	blx	r3
 8009a96:	4603      	mov	r3, r0
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d101      	bne.n	8009aa0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}

08009aaa <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b082      	sub	sp, #8
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	78fa      	ldrb	r2, [r7, #3]
 8009ac0:	4611      	mov	r1, r2
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	4798      	blx	r3

  return USBD_OK;
 8009ac6:	2300      	movs	r3, #0
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3708      	adds	r7, #8
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b082      	sub	sp, #8
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009ae0:	6839      	ldr	r1, [r7, #0]
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f000 fef8 	bl	800a8d8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2201      	movs	r2, #1
 8009aec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009af6:	461a      	mov	r2, r3
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009b04:	f003 031f 	and.w	r3, r3, #31
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d00c      	beq.n	8009b26 <USBD_LL_SetupStage+0x56>
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d302      	bcc.n	8009b16 <USBD_LL_SetupStage+0x46>
 8009b10:	2b02      	cmp	r3, #2
 8009b12:	d010      	beq.n	8009b36 <USBD_LL_SetupStage+0x66>
 8009b14:	e017      	b.n	8009b46 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 f9ce 	bl	8009ec0 <USBD_StdDevReq>
      break;
 8009b24:	e01a      	b.n	8009b5c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 fa30 	bl	8009f94 <USBD_StdItfReq>
      break;
 8009b34:	e012      	b.n	8009b5c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 fa6e 	bl	800a020 <USBD_StdEPReq>
      break;
 8009b44:	e00a      	b.n	8009b5c <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009b4c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	4619      	mov	r1, r3
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f004 fb65 	bl	800e224 <USBD_LL_StallEP>
      break;
 8009b5a:	bf00      	nop
  }

  return USBD_OK;
 8009b5c:	2300      	movs	r3, #0
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3708      	adds	r7, #8
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}

08009b66 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009b66:	b580      	push	{r7, lr}
 8009b68:	b086      	sub	sp, #24
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	60f8      	str	r0, [r7, #12]
 8009b6e:	460b      	mov	r3, r1
 8009b70:	607a      	str	r2, [r7, #4]
 8009b72:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009b74:	7afb      	ldrb	r3, [r7, #11]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d14b      	bne.n	8009c12 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009b80:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009b88:	2b03      	cmp	r3, #3
 8009b8a:	d134      	bne.n	8009bf6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	68da      	ldr	r2, [r3, #12]
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	691b      	ldr	r3, [r3, #16]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d919      	bls.n	8009bcc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	68da      	ldr	r2, [r3, #12]
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	691b      	ldr	r3, [r3, #16]
 8009ba0:	1ad2      	subs	r2, r2, r3
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	68da      	ldr	r2, [r3, #12]
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d203      	bcs.n	8009bba <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	e002      	b.n	8009bc0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	461a      	mov	r2, r3
 8009bc2:	6879      	ldr	r1, [r7, #4]
 8009bc4:	68f8      	ldr	r0, [r7, #12]
 8009bc6:	f000 ff7b 	bl	800aac0 <USBD_CtlContinueRx>
 8009bca:	e038      	b.n	8009c3e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bd2:	691b      	ldr	r3, [r3, #16]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d00a      	beq.n	8009bee <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009bde:	2b03      	cmp	r3, #3
 8009be0:	d105      	bne.n	8009bee <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009be8:	691b      	ldr	r3, [r3, #16]
 8009bea:	68f8      	ldr	r0, [r7, #12]
 8009bec:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009bee:	68f8      	ldr	r0, [r7, #12]
 8009bf0:	f000 ff78 	bl	800aae4 <USBD_CtlSendStatus>
 8009bf4:	e023      	b.n	8009c3e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009bfc:	2b05      	cmp	r3, #5
 8009bfe:	d11e      	bne.n	8009c3e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2200      	movs	r2, #0
 8009c04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009c08:	2100      	movs	r1, #0
 8009c0a:	68f8      	ldr	r0, [r7, #12]
 8009c0c:	f004 fb0a 	bl	800e224 <USBD_LL_StallEP>
 8009c10:	e015      	b.n	8009c3e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c18:	699b      	ldr	r3, [r3, #24]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d00d      	beq.n	8009c3a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009c24:	2b03      	cmp	r3, #3
 8009c26:	d108      	bne.n	8009c3a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c2e:	699b      	ldr	r3, [r3, #24]
 8009c30:	7afa      	ldrb	r2, [r7, #11]
 8009c32:	4611      	mov	r1, r2
 8009c34:	68f8      	ldr	r0, [r7, #12]
 8009c36:	4798      	blx	r3
 8009c38:	e001      	b.n	8009c3e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009c3a:	2302      	movs	r3, #2
 8009c3c:	e000      	b.n	8009c40 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009c3e:	2300      	movs	r3, #0
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3718      	adds	r7, #24
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b086      	sub	sp, #24
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	60f8      	str	r0, [r7, #12]
 8009c50:	460b      	mov	r3, r1
 8009c52:	607a      	str	r2, [r7, #4]
 8009c54:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009c56:	7afb      	ldrb	r3, [r7, #11]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d17f      	bne.n	8009d5c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	3314      	adds	r3, #20
 8009c60:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009c68:	2b02      	cmp	r3, #2
 8009c6a:	d15c      	bne.n	8009d26 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	68da      	ldr	r2, [r3, #12]
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	691b      	ldr	r3, [r3, #16]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d915      	bls.n	8009ca4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	68da      	ldr	r2, [r3, #12]
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	691b      	ldr	r3, [r3, #16]
 8009c80:	1ad2      	subs	r2, r2, r3
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	6879      	ldr	r1, [r7, #4]
 8009c90:	68f8      	ldr	r0, [r7, #12]
 8009c92:	f000 fee5 	bl	800aa60 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c96:	2300      	movs	r3, #0
 8009c98:	2200      	movs	r2, #0
 8009c9a:	2100      	movs	r1, #0
 8009c9c:	68f8      	ldr	r0, [r7, #12]
 8009c9e:	f004 fb67 	bl	800e370 <USBD_LL_PrepareReceive>
 8009ca2:	e04e      	b.n	8009d42 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	697a      	ldr	r2, [r7, #20]
 8009caa:	6912      	ldr	r2, [r2, #16]
 8009cac:	fbb3 f1f2 	udiv	r1, r3, r2
 8009cb0:	fb02 f201 	mul.w	r2, r2, r1
 8009cb4:	1a9b      	subs	r3, r3, r2
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d11c      	bne.n	8009cf4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	689a      	ldr	r2, [r3, #8]
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d316      	bcc.n	8009cf4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	689a      	ldr	r2, [r3, #8]
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d20f      	bcs.n	8009cf4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	2100      	movs	r1, #0
 8009cd8:	68f8      	ldr	r0, [r7, #12]
 8009cda:	f000 fec1 	bl	800aa60 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	2200      	movs	r2, #0
 8009cea:	2100      	movs	r1, #0
 8009cec:	68f8      	ldr	r0, [r7, #12]
 8009cee:	f004 fb3f 	bl	800e370 <USBD_LL_PrepareReceive>
 8009cf2:	e026      	b.n	8009d42 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cfa:	68db      	ldr	r3, [r3, #12]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d00a      	beq.n	8009d16 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009d06:	2b03      	cmp	r3, #3
 8009d08:	d105      	bne.n	8009d16 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	68f8      	ldr	r0, [r7, #12]
 8009d14:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009d16:	2180      	movs	r1, #128	; 0x80
 8009d18:	68f8      	ldr	r0, [r7, #12]
 8009d1a:	f004 fa83 	bl	800e224 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009d1e:	68f8      	ldr	r0, [r7, #12]
 8009d20:	f000 fef3 	bl	800ab0a <USBD_CtlReceiveStatus>
 8009d24:	e00d      	b.n	8009d42 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009d2c:	2b04      	cmp	r3, #4
 8009d2e:	d004      	beq.n	8009d3a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d103      	bne.n	8009d42 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009d3a:	2180      	movs	r1, #128	; 0x80
 8009d3c:	68f8      	ldr	r0, [r7, #12]
 8009d3e:	f004 fa71 	bl	800e224 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d11d      	bne.n	8009d88 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	f7ff fe82 	bl	8009a56 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	2200      	movs	r2, #0
 8009d56:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009d5a:	e015      	b.n	8009d88 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d62:	695b      	ldr	r3, [r3, #20]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d00d      	beq.n	8009d84 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009d6e:	2b03      	cmp	r3, #3
 8009d70:	d108      	bne.n	8009d84 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d78:	695b      	ldr	r3, [r3, #20]
 8009d7a:	7afa      	ldrb	r2, [r7, #11]
 8009d7c:	4611      	mov	r1, r2
 8009d7e:	68f8      	ldr	r0, [r7, #12]
 8009d80:	4798      	blx	r3
 8009d82:	e001      	b.n	8009d88 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009d84:	2302      	movs	r3, #2
 8009d86:	e000      	b.n	8009d8a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009d88:	2300      	movs	r3, #0
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3718      	adds	r7, #24
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}

08009d92 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009d92:	b580      	push	{r7, lr}
 8009d94:	b082      	sub	sp, #8
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009d9a:	2340      	movs	r3, #64	; 0x40
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	2100      	movs	r1, #0
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f004 f9fa 	bl	800e19a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2201      	movs	r2, #1
 8009daa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2240      	movs	r2, #64	; 0x40
 8009db2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009db6:	2340      	movs	r3, #64	; 0x40
 8009db8:	2200      	movs	r2, #0
 8009dba:	2180      	movs	r1, #128	; 0x80
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f004 f9ec 	bl	800e19a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2240      	movs	r2, #64	; 0x40
 8009dcc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2200      	movs	r2, #0
 8009de8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d009      	beq.n	8009e0a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	6852      	ldr	r2, [r2, #4]
 8009e02:	b2d2      	uxtb	r2, r2
 8009e04:	4611      	mov	r1, r2
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	4798      	blx	r3
  }

  return USBD_OK;
 8009e0a:	2300      	movs	r3, #0
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3708      	adds	r7, #8
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	78fa      	ldrb	r2, [r7, #3]
 8009e24:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009e26:	2300      	movs	r3, #0
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	370c      	adds	r7, #12
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr

08009e34 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b083      	sub	sp, #12
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2204      	movs	r2, #4
 8009e4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009e50:	2300      	movs	r3, #0
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	370c      	adds	r7, #12
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr

08009e5e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009e5e:	b480      	push	{r7}
 8009e60:	b083      	sub	sp, #12
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e6c:	2b04      	cmp	r3, #4
 8009e6e:	d105      	bne.n	8009e7c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009e7c:	2300      	movs	r3, #0
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	370c      	adds	r7, #12
 8009e82:	46bd      	mov	sp, r7
 8009e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e88:	4770      	bx	lr

08009e8a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009e8a:	b580      	push	{r7, lr}
 8009e8c:	b082      	sub	sp, #8
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e98:	2b03      	cmp	r3, #3
 8009e9a:	d10b      	bne.n	8009eb4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ea2:	69db      	ldr	r3, [r3, #28]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d005      	beq.n	8009eb4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009eae:	69db      	ldr	r3, [r3, #28]
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009eb4:	2300      	movs	r3, #0
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3708      	adds	r7, #8
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
	...

08009ec0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	781b      	ldrb	r3, [r3, #0]
 8009ed2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ed6:	2b20      	cmp	r3, #32
 8009ed8:	d004      	beq.n	8009ee4 <USBD_StdDevReq+0x24>
 8009eda:	2b40      	cmp	r3, #64	; 0x40
 8009edc:	d002      	beq.n	8009ee4 <USBD_StdDevReq+0x24>
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d008      	beq.n	8009ef4 <USBD_StdDevReq+0x34>
 8009ee2:	e04c      	b.n	8009f7e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	6839      	ldr	r1, [r7, #0]
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	4798      	blx	r3
      break;
 8009ef2:	e049      	b.n	8009f88 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	785b      	ldrb	r3, [r3, #1]
 8009ef8:	2b09      	cmp	r3, #9
 8009efa:	d83a      	bhi.n	8009f72 <USBD_StdDevReq+0xb2>
 8009efc:	a201      	add	r2, pc, #4	; (adr r2, 8009f04 <USBD_StdDevReq+0x44>)
 8009efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f02:	bf00      	nop
 8009f04:	08009f55 	.word	0x08009f55
 8009f08:	08009f69 	.word	0x08009f69
 8009f0c:	08009f73 	.word	0x08009f73
 8009f10:	08009f5f 	.word	0x08009f5f
 8009f14:	08009f73 	.word	0x08009f73
 8009f18:	08009f37 	.word	0x08009f37
 8009f1c:	08009f2d 	.word	0x08009f2d
 8009f20:	08009f73 	.word	0x08009f73
 8009f24:	08009f4b 	.word	0x08009f4b
 8009f28:	08009f41 	.word	0x08009f41
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009f2c:	6839      	ldr	r1, [r7, #0]
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 f9d4 	bl	800a2dc <USBD_GetDescriptor>
          break;
 8009f34:	e022      	b.n	8009f7c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009f36:	6839      	ldr	r1, [r7, #0]
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 fb61 	bl	800a600 <USBD_SetAddress>
          break;
 8009f3e:	e01d      	b.n	8009f7c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009f40:	6839      	ldr	r1, [r7, #0]
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 fb9e 	bl	800a684 <USBD_SetConfig>
          break;
 8009f48:	e018      	b.n	8009f7c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009f4a:	6839      	ldr	r1, [r7, #0]
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 fc27 	bl	800a7a0 <USBD_GetConfig>
          break;
 8009f52:	e013      	b.n	8009f7c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009f54:	6839      	ldr	r1, [r7, #0]
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 fc56 	bl	800a808 <USBD_GetStatus>
          break;
 8009f5c:	e00e      	b.n	8009f7c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009f5e:	6839      	ldr	r1, [r7, #0]
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f000 fc84 	bl	800a86e <USBD_SetFeature>
          break;
 8009f66:	e009      	b.n	8009f7c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009f68:	6839      	ldr	r1, [r7, #0]
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 fc93 	bl	800a896 <USBD_ClrFeature>
          break;
 8009f70:	e004      	b.n	8009f7c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009f72:	6839      	ldr	r1, [r7, #0]
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f000 fcec 	bl	800a952 <USBD_CtlError>
          break;
 8009f7a:	bf00      	nop
      }
      break;
 8009f7c:	e004      	b.n	8009f88 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009f7e:	6839      	ldr	r1, [r7, #0]
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f000 fce6 	bl	800a952 <USBD_CtlError>
      break;
 8009f86:	bf00      	nop
  }

  return ret;
 8009f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3710      	adds	r7, #16
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
 8009f92:	bf00      	nop

08009f94 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009faa:	2b20      	cmp	r3, #32
 8009fac:	d003      	beq.n	8009fb6 <USBD_StdItfReq+0x22>
 8009fae:	2b40      	cmp	r3, #64	; 0x40
 8009fb0:	d001      	beq.n	8009fb6 <USBD_StdItfReq+0x22>
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d12a      	bne.n	800a00c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fbc:	3b01      	subs	r3, #1
 8009fbe:	2b02      	cmp	r3, #2
 8009fc0:	d81d      	bhi.n	8009ffe <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	889b      	ldrh	r3, [r3, #4]
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d813      	bhi.n	8009ff4 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fd2:	689b      	ldr	r3, [r3, #8]
 8009fd4:	6839      	ldr	r1, [r7, #0]
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	4798      	blx	r3
 8009fda:	4603      	mov	r3, r0
 8009fdc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	88db      	ldrh	r3, [r3, #6]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d110      	bne.n	800a008 <USBD_StdItfReq+0x74>
 8009fe6:	7bfb      	ldrb	r3, [r7, #15]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d10d      	bne.n	800a008 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 fd79 	bl	800aae4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009ff2:	e009      	b.n	800a008 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8009ff4:	6839      	ldr	r1, [r7, #0]
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 fcab 	bl	800a952 <USBD_CtlError>
          break;
 8009ffc:	e004      	b.n	800a008 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8009ffe:	6839      	ldr	r1, [r7, #0]
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 fca6 	bl	800a952 <USBD_CtlError>
          break;
 800a006:	e000      	b.n	800a00a <USBD_StdItfReq+0x76>
          break;
 800a008:	bf00      	nop
      }
      break;
 800a00a:	e004      	b.n	800a016 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800a00c:	6839      	ldr	r1, [r7, #0]
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 fc9f 	bl	800a952 <USBD_CtlError>
      break;
 800a014:	bf00      	nop
  }

  return USBD_OK;
 800a016:	2300      	movs	r3, #0
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3710      	adds	r7, #16
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a02a:	2300      	movs	r3, #0
 800a02c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	889b      	ldrh	r3, [r3, #4]
 800a032:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a03c:	2b20      	cmp	r3, #32
 800a03e:	d004      	beq.n	800a04a <USBD_StdEPReq+0x2a>
 800a040:	2b40      	cmp	r3, #64	; 0x40
 800a042:	d002      	beq.n	800a04a <USBD_StdEPReq+0x2a>
 800a044:	2b00      	cmp	r3, #0
 800a046:	d008      	beq.n	800a05a <USBD_StdEPReq+0x3a>
 800a048:	e13d      	b.n	800a2c6 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a050:	689b      	ldr	r3, [r3, #8]
 800a052:	6839      	ldr	r1, [r7, #0]
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	4798      	blx	r3
      break;
 800a058:	e13a      	b.n	800a2d0 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a062:	2b20      	cmp	r3, #32
 800a064:	d10a      	bne.n	800a07c <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a06c:	689b      	ldr	r3, [r3, #8]
 800a06e:	6839      	ldr	r1, [r7, #0]
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	4798      	blx	r3
 800a074:	4603      	mov	r3, r0
 800a076:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a078:	7bfb      	ldrb	r3, [r7, #15]
 800a07a:	e12a      	b.n	800a2d2 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	785b      	ldrb	r3, [r3, #1]
 800a080:	2b01      	cmp	r3, #1
 800a082:	d03e      	beq.n	800a102 <USBD_StdEPReq+0xe2>
 800a084:	2b03      	cmp	r3, #3
 800a086:	d002      	beq.n	800a08e <USBD_StdEPReq+0x6e>
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d070      	beq.n	800a16e <USBD_StdEPReq+0x14e>
 800a08c:	e115      	b.n	800a2ba <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a094:	2b02      	cmp	r3, #2
 800a096:	d002      	beq.n	800a09e <USBD_StdEPReq+0x7e>
 800a098:	2b03      	cmp	r3, #3
 800a09a:	d015      	beq.n	800a0c8 <USBD_StdEPReq+0xa8>
 800a09c:	e02b      	b.n	800a0f6 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a09e:	7bbb      	ldrb	r3, [r7, #14]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d00c      	beq.n	800a0be <USBD_StdEPReq+0x9e>
 800a0a4:	7bbb      	ldrb	r3, [r7, #14]
 800a0a6:	2b80      	cmp	r3, #128	; 0x80
 800a0a8:	d009      	beq.n	800a0be <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a0aa:	7bbb      	ldrb	r3, [r7, #14]
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f004 f8b8 	bl	800e224 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a0b4:	2180      	movs	r1, #128	; 0x80
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f004 f8b4 	bl	800e224 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a0bc:	e020      	b.n	800a100 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800a0be:	6839      	ldr	r1, [r7, #0]
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 fc46 	bl	800a952 <USBD_CtlError>
              break;
 800a0c6:	e01b      	b.n	800a100 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	885b      	ldrh	r3, [r3, #2]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d10e      	bne.n	800a0ee <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800a0d0:	7bbb      	ldrb	r3, [r7, #14]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d00b      	beq.n	800a0ee <USBD_StdEPReq+0xce>
 800a0d6:	7bbb      	ldrb	r3, [r7, #14]
 800a0d8:	2b80      	cmp	r3, #128	; 0x80
 800a0da:	d008      	beq.n	800a0ee <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	88db      	ldrh	r3, [r3, #6]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d104      	bne.n	800a0ee <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a0e4:	7bbb      	ldrb	r3, [r7, #14]
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f004 f89b 	bl	800e224 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 fcf8 	bl	800aae4 <USBD_CtlSendStatus>

              break;
 800a0f4:	e004      	b.n	800a100 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800a0f6:	6839      	ldr	r1, [r7, #0]
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f000 fc2a 	bl	800a952 <USBD_CtlError>
              break;
 800a0fe:	bf00      	nop
          }
          break;
 800a100:	e0e0      	b.n	800a2c4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a108:	2b02      	cmp	r3, #2
 800a10a:	d002      	beq.n	800a112 <USBD_StdEPReq+0xf2>
 800a10c:	2b03      	cmp	r3, #3
 800a10e:	d015      	beq.n	800a13c <USBD_StdEPReq+0x11c>
 800a110:	e026      	b.n	800a160 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a112:	7bbb      	ldrb	r3, [r7, #14]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d00c      	beq.n	800a132 <USBD_StdEPReq+0x112>
 800a118:	7bbb      	ldrb	r3, [r7, #14]
 800a11a:	2b80      	cmp	r3, #128	; 0x80
 800a11c:	d009      	beq.n	800a132 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a11e:	7bbb      	ldrb	r3, [r7, #14]
 800a120:	4619      	mov	r1, r3
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f004 f87e 	bl	800e224 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a128:	2180      	movs	r1, #128	; 0x80
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f004 f87a 	bl	800e224 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a130:	e01c      	b.n	800a16c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800a132:	6839      	ldr	r1, [r7, #0]
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f000 fc0c 	bl	800a952 <USBD_CtlError>
              break;
 800a13a:	e017      	b.n	800a16c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	885b      	ldrh	r3, [r3, #2]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d112      	bne.n	800a16a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a144:	7bbb      	ldrb	r3, [r7, #14]
 800a146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d004      	beq.n	800a158 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a14e:	7bbb      	ldrb	r3, [r7, #14]
 800a150:	4619      	mov	r1, r3
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f004 f885 	bl	800e262 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 fcc3 	bl	800aae4 <USBD_CtlSendStatus>
              }
              break;
 800a15e:	e004      	b.n	800a16a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800a160:	6839      	ldr	r1, [r7, #0]
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 fbf5 	bl	800a952 <USBD_CtlError>
              break;
 800a168:	e000      	b.n	800a16c <USBD_StdEPReq+0x14c>
              break;
 800a16a:	bf00      	nop
          }
          break;
 800a16c:	e0aa      	b.n	800a2c4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a174:	2b02      	cmp	r3, #2
 800a176:	d002      	beq.n	800a17e <USBD_StdEPReq+0x15e>
 800a178:	2b03      	cmp	r3, #3
 800a17a:	d032      	beq.n	800a1e2 <USBD_StdEPReq+0x1c2>
 800a17c:	e097      	b.n	800a2ae <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a17e:	7bbb      	ldrb	r3, [r7, #14]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d007      	beq.n	800a194 <USBD_StdEPReq+0x174>
 800a184:	7bbb      	ldrb	r3, [r7, #14]
 800a186:	2b80      	cmp	r3, #128	; 0x80
 800a188:	d004      	beq.n	800a194 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800a18a:	6839      	ldr	r1, [r7, #0]
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f000 fbe0 	bl	800a952 <USBD_CtlError>
                break;
 800a192:	e091      	b.n	800a2b8 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a194:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	da0b      	bge.n	800a1b4 <USBD_StdEPReq+0x194>
 800a19c:	7bbb      	ldrb	r3, [r7, #14]
 800a19e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a1a2:	4613      	mov	r3, r2
 800a1a4:	009b      	lsls	r3, r3, #2
 800a1a6:	4413      	add	r3, r2
 800a1a8:	009b      	lsls	r3, r3, #2
 800a1aa:	3310      	adds	r3, #16
 800a1ac:	687a      	ldr	r2, [r7, #4]
 800a1ae:	4413      	add	r3, r2
 800a1b0:	3304      	adds	r3, #4
 800a1b2:	e00b      	b.n	800a1cc <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a1b4:	7bbb      	ldrb	r3, [r7, #14]
 800a1b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	4413      	add	r3, r2
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a1c6:	687a      	ldr	r2, [r7, #4]
 800a1c8:	4413      	add	r3, r2
 800a1ca:	3304      	adds	r3, #4
 800a1cc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	2202      	movs	r2, #2
 800a1d8:	4619      	mov	r1, r3
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f000 fc24 	bl	800aa28 <USBD_CtlSendData>
              break;
 800a1e0:	e06a      	b.n	800a2b8 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a1e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	da11      	bge.n	800a20e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a1ea:	7bbb      	ldrb	r3, [r7, #14]
 800a1ec:	f003 020f 	and.w	r2, r3, #15
 800a1f0:	6879      	ldr	r1, [r7, #4]
 800a1f2:	4613      	mov	r3, r2
 800a1f4:	009b      	lsls	r3, r3, #2
 800a1f6:	4413      	add	r3, r2
 800a1f8:	009b      	lsls	r3, r3, #2
 800a1fa:	440b      	add	r3, r1
 800a1fc:	3318      	adds	r3, #24
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d117      	bne.n	800a234 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800a204:	6839      	ldr	r1, [r7, #0]
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 fba3 	bl	800a952 <USBD_CtlError>
                  break;
 800a20c:	e054      	b.n	800a2b8 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a20e:	7bbb      	ldrb	r3, [r7, #14]
 800a210:	f003 020f 	and.w	r2, r3, #15
 800a214:	6879      	ldr	r1, [r7, #4]
 800a216:	4613      	mov	r3, r2
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	4413      	add	r3, r2
 800a21c:	009b      	lsls	r3, r3, #2
 800a21e:	440b      	add	r3, r1
 800a220:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d104      	bne.n	800a234 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800a22a:	6839      	ldr	r1, [r7, #0]
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 fb90 	bl	800a952 <USBD_CtlError>
                  break;
 800a232:	e041      	b.n	800a2b8 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a234:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	da0b      	bge.n	800a254 <USBD_StdEPReq+0x234>
 800a23c:	7bbb      	ldrb	r3, [r7, #14]
 800a23e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a242:	4613      	mov	r3, r2
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	4413      	add	r3, r2
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	3310      	adds	r3, #16
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	4413      	add	r3, r2
 800a250:	3304      	adds	r3, #4
 800a252:	e00b      	b.n	800a26c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a254:	7bbb      	ldrb	r3, [r7, #14]
 800a256:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a25a:	4613      	mov	r3, r2
 800a25c:	009b      	lsls	r3, r3, #2
 800a25e:	4413      	add	r3, r2
 800a260:	009b      	lsls	r3, r3, #2
 800a262:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	4413      	add	r3, r2
 800a26a:	3304      	adds	r3, #4
 800a26c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a26e:	7bbb      	ldrb	r3, [r7, #14]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d002      	beq.n	800a27a <USBD_StdEPReq+0x25a>
 800a274:	7bbb      	ldrb	r3, [r7, #14]
 800a276:	2b80      	cmp	r3, #128	; 0x80
 800a278:	d103      	bne.n	800a282 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	2200      	movs	r2, #0
 800a27e:	601a      	str	r2, [r3, #0]
 800a280:	e00e      	b.n	800a2a0 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a282:	7bbb      	ldrb	r3, [r7, #14]
 800a284:	4619      	mov	r1, r3
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f004 f80a 	bl	800e2a0 <USBD_LL_IsStallEP>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d003      	beq.n	800a29a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	2201      	movs	r2, #1
 800a296:	601a      	str	r2, [r3, #0]
 800a298:	e002      	b.n	800a2a0 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	2200      	movs	r2, #0
 800a29e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	2202      	movs	r2, #2
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 fbbe 	bl	800aa28 <USBD_CtlSendData>
              break;
 800a2ac:	e004      	b.n	800a2b8 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800a2ae:	6839      	ldr	r1, [r7, #0]
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 fb4e 	bl	800a952 <USBD_CtlError>
              break;
 800a2b6:	bf00      	nop
          }
          break;
 800a2b8:	e004      	b.n	800a2c4 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800a2ba:	6839      	ldr	r1, [r7, #0]
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 fb48 	bl	800a952 <USBD_CtlError>
          break;
 800a2c2:	bf00      	nop
      }
      break;
 800a2c4:	e004      	b.n	800a2d0 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800a2c6:	6839      	ldr	r1, [r7, #0]
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 fb42 	bl	800a952 <USBD_CtlError>
      break;
 800a2ce:	bf00      	nop
  }

  return ret;
 800a2d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3710      	adds	r7, #16
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
	...

0800a2dc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	885b      	ldrh	r3, [r3, #2]
 800a2f6:	0a1b      	lsrs	r3, r3, #8
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	3b01      	subs	r3, #1
 800a2fc:	2b0e      	cmp	r3, #14
 800a2fe:	f200 8152 	bhi.w	800a5a6 <USBD_GetDescriptor+0x2ca>
 800a302:	a201      	add	r2, pc, #4	; (adr r2, 800a308 <USBD_GetDescriptor+0x2c>)
 800a304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a308:	0800a379 	.word	0x0800a379
 800a30c:	0800a391 	.word	0x0800a391
 800a310:	0800a3d1 	.word	0x0800a3d1
 800a314:	0800a5a7 	.word	0x0800a5a7
 800a318:	0800a5a7 	.word	0x0800a5a7
 800a31c:	0800a547 	.word	0x0800a547
 800a320:	0800a573 	.word	0x0800a573
 800a324:	0800a5a7 	.word	0x0800a5a7
 800a328:	0800a5a7 	.word	0x0800a5a7
 800a32c:	0800a5a7 	.word	0x0800a5a7
 800a330:	0800a5a7 	.word	0x0800a5a7
 800a334:	0800a5a7 	.word	0x0800a5a7
 800a338:	0800a5a7 	.word	0x0800a5a7
 800a33c:	0800a5a7 	.word	0x0800a5a7
 800a340:	0800a345 	.word	0x0800a345
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a34a:	69db      	ldr	r3, [r3, #28]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d00b      	beq.n	800a368 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a356:	69db      	ldr	r3, [r3, #28]
 800a358:	687a      	ldr	r2, [r7, #4]
 800a35a:	7c12      	ldrb	r2, [r2, #16]
 800a35c:	f107 0108 	add.w	r1, r7, #8
 800a360:	4610      	mov	r0, r2
 800a362:	4798      	blx	r3
 800a364:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a366:	e126      	b.n	800a5b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a368:	6839      	ldr	r1, [r7, #0]
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 faf1 	bl	800a952 <USBD_CtlError>
        err++;
 800a370:	7afb      	ldrb	r3, [r7, #11]
 800a372:	3301      	adds	r3, #1
 800a374:	72fb      	strb	r3, [r7, #11]
      break;
 800a376:	e11e      	b.n	800a5b6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	687a      	ldr	r2, [r7, #4]
 800a382:	7c12      	ldrb	r2, [r2, #16]
 800a384:	f107 0108 	add.w	r1, r7, #8
 800a388:	4610      	mov	r0, r2
 800a38a:	4798      	blx	r3
 800a38c:	60f8      	str	r0, [r7, #12]
      break;
 800a38e:	e112      	b.n	800a5b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	7c1b      	ldrb	r3, [r3, #16]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d10d      	bne.n	800a3b4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a39e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3a0:	f107 0208 	add.w	r2, r7, #8
 800a3a4:	4610      	mov	r0, r2
 800a3a6:	4798      	blx	r3
 800a3a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	2202      	movs	r2, #2
 800a3b0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a3b2:	e100      	b.n	800a5b6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3bc:	f107 0208 	add.w	r2, r7, #8
 800a3c0:	4610      	mov	r0, r2
 800a3c2:	4798      	blx	r3
 800a3c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	3301      	adds	r3, #1
 800a3ca:	2202      	movs	r2, #2
 800a3cc:	701a      	strb	r2, [r3, #0]
      break;
 800a3ce:	e0f2      	b.n	800a5b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	885b      	ldrh	r3, [r3, #2]
 800a3d4:	b2db      	uxtb	r3, r3
 800a3d6:	2b05      	cmp	r3, #5
 800a3d8:	f200 80ac 	bhi.w	800a534 <USBD_GetDescriptor+0x258>
 800a3dc:	a201      	add	r2, pc, #4	; (adr r2, 800a3e4 <USBD_GetDescriptor+0x108>)
 800a3de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3e2:	bf00      	nop
 800a3e4:	0800a3fd 	.word	0x0800a3fd
 800a3e8:	0800a431 	.word	0x0800a431
 800a3ec:	0800a465 	.word	0x0800a465
 800a3f0:	0800a499 	.word	0x0800a499
 800a3f4:	0800a4cd 	.word	0x0800a4cd
 800a3f8:	0800a501 	.word	0x0800a501
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d00b      	beq.n	800a420 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	7c12      	ldrb	r2, [r2, #16]
 800a414:	f107 0108 	add.w	r1, r7, #8
 800a418:	4610      	mov	r0, r2
 800a41a:	4798      	blx	r3
 800a41c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a41e:	e091      	b.n	800a544 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a420:	6839      	ldr	r1, [r7, #0]
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 fa95 	bl	800a952 <USBD_CtlError>
            err++;
 800a428:	7afb      	ldrb	r3, [r7, #11]
 800a42a:	3301      	adds	r3, #1
 800a42c:	72fb      	strb	r3, [r7, #11]
          break;
 800a42e:	e089      	b.n	800a544 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a436:	689b      	ldr	r3, [r3, #8]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d00b      	beq.n	800a454 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a442:	689b      	ldr	r3, [r3, #8]
 800a444:	687a      	ldr	r2, [r7, #4]
 800a446:	7c12      	ldrb	r2, [r2, #16]
 800a448:	f107 0108 	add.w	r1, r7, #8
 800a44c:	4610      	mov	r0, r2
 800a44e:	4798      	blx	r3
 800a450:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a452:	e077      	b.n	800a544 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a454:	6839      	ldr	r1, [r7, #0]
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f000 fa7b 	bl	800a952 <USBD_CtlError>
            err++;
 800a45c:	7afb      	ldrb	r3, [r7, #11]
 800a45e:	3301      	adds	r3, #1
 800a460:	72fb      	strb	r3, [r7, #11]
          break;
 800a462:	e06f      	b.n	800a544 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a46a:	68db      	ldr	r3, [r3, #12]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d00b      	beq.n	800a488 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a476:	68db      	ldr	r3, [r3, #12]
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	7c12      	ldrb	r2, [r2, #16]
 800a47c:	f107 0108 	add.w	r1, r7, #8
 800a480:	4610      	mov	r0, r2
 800a482:	4798      	blx	r3
 800a484:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a486:	e05d      	b.n	800a544 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a488:	6839      	ldr	r1, [r7, #0]
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 fa61 	bl	800a952 <USBD_CtlError>
            err++;
 800a490:	7afb      	ldrb	r3, [r7, #11]
 800a492:	3301      	adds	r3, #1
 800a494:	72fb      	strb	r3, [r7, #11]
          break;
 800a496:	e055      	b.n	800a544 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a49e:	691b      	ldr	r3, [r3, #16]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d00b      	beq.n	800a4bc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a4aa:	691b      	ldr	r3, [r3, #16]
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	7c12      	ldrb	r2, [r2, #16]
 800a4b0:	f107 0108 	add.w	r1, r7, #8
 800a4b4:	4610      	mov	r0, r2
 800a4b6:	4798      	blx	r3
 800a4b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4ba:	e043      	b.n	800a544 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a4bc:	6839      	ldr	r1, [r7, #0]
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 fa47 	bl	800a952 <USBD_CtlError>
            err++;
 800a4c4:	7afb      	ldrb	r3, [r7, #11]
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	72fb      	strb	r3, [r7, #11]
          break;
 800a4ca:	e03b      	b.n	800a544 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a4d2:	695b      	ldr	r3, [r3, #20]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d00b      	beq.n	800a4f0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a4de:	695b      	ldr	r3, [r3, #20]
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	7c12      	ldrb	r2, [r2, #16]
 800a4e4:	f107 0108 	add.w	r1, r7, #8
 800a4e8:	4610      	mov	r0, r2
 800a4ea:	4798      	blx	r3
 800a4ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4ee:	e029      	b.n	800a544 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a4f0:	6839      	ldr	r1, [r7, #0]
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 fa2d 	bl	800a952 <USBD_CtlError>
            err++;
 800a4f8:	7afb      	ldrb	r3, [r7, #11]
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	72fb      	strb	r3, [r7, #11]
          break;
 800a4fe:	e021      	b.n	800a544 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a506:	699b      	ldr	r3, [r3, #24]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d00b      	beq.n	800a524 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a512:	699b      	ldr	r3, [r3, #24]
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	7c12      	ldrb	r2, [r2, #16]
 800a518:	f107 0108 	add.w	r1, r7, #8
 800a51c:	4610      	mov	r0, r2
 800a51e:	4798      	blx	r3
 800a520:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a522:	e00f      	b.n	800a544 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a524:	6839      	ldr	r1, [r7, #0]
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 fa13 	bl	800a952 <USBD_CtlError>
            err++;
 800a52c:	7afb      	ldrb	r3, [r7, #11]
 800a52e:	3301      	adds	r3, #1
 800a530:	72fb      	strb	r3, [r7, #11]
          break;
 800a532:	e007      	b.n	800a544 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a534:	6839      	ldr	r1, [r7, #0]
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 fa0b 	bl	800a952 <USBD_CtlError>
          err++;
 800a53c:	7afb      	ldrb	r3, [r7, #11]
 800a53e:	3301      	adds	r3, #1
 800a540:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a542:	e038      	b.n	800a5b6 <USBD_GetDescriptor+0x2da>
 800a544:	e037      	b.n	800a5b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	7c1b      	ldrb	r3, [r3, #16]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d109      	bne.n	800a562 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a556:	f107 0208 	add.w	r2, r7, #8
 800a55a:	4610      	mov	r0, r2
 800a55c:	4798      	blx	r3
 800a55e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a560:	e029      	b.n	800a5b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a562:	6839      	ldr	r1, [r7, #0]
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f000 f9f4 	bl	800a952 <USBD_CtlError>
        err++;
 800a56a:	7afb      	ldrb	r3, [r7, #11]
 800a56c:	3301      	adds	r3, #1
 800a56e:	72fb      	strb	r3, [r7, #11]
      break;
 800a570:	e021      	b.n	800a5b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	7c1b      	ldrb	r3, [r3, #16]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d10d      	bne.n	800a596 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a582:	f107 0208 	add.w	r2, r7, #8
 800a586:	4610      	mov	r0, r2
 800a588:	4798      	blx	r3
 800a58a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	3301      	adds	r3, #1
 800a590:	2207      	movs	r2, #7
 800a592:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a594:	e00f      	b.n	800a5b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a596:	6839      	ldr	r1, [r7, #0]
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 f9da 	bl	800a952 <USBD_CtlError>
        err++;
 800a59e:	7afb      	ldrb	r3, [r7, #11]
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	72fb      	strb	r3, [r7, #11]
      break;
 800a5a4:	e007      	b.n	800a5b6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a5a6:	6839      	ldr	r1, [r7, #0]
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 f9d2 	bl	800a952 <USBD_CtlError>
      err++;
 800a5ae:	7afb      	ldrb	r3, [r7, #11]
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	72fb      	strb	r3, [r7, #11]
      break;
 800a5b4:	bf00      	nop
  }

  if (err != 0U)
 800a5b6:	7afb      	ldrb	r3, [r7, #11]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d11c      	bne.n	800a5f6 <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a5bc:	893b      	ldrh	r3, [r7, #8]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d011      	beq.n	800a5e6 <USBD_GetDescriptor+0x30a>
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	88db      	ldrh	r3, [r3, #6]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00d      	beq.n	800a5e6 <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	88da      	ldrh	r2, [r3, #6]
 800a5ce:	893b      	ldrh	r3, [r7, #8]
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	bf28      	it	cs
 800a5d4:	4613      	movcs	r3, r2
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a5da:	893b      	ldrh	r3, [r7, #8]
 800a5dc:	461a      	mov	r2, r3
 800a5de:	68f9      	ldr	r1, [r7, #12]
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f000 fa21 	bl	800aa28 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	88db      	ldrh	r3, [r3, #6]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d104      	bne.n	800a5f8 <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 fa78 	bl	800aae4 <USBD_CtlSendStatus>
 800a5f4:	e000      	b.n	800a5f8 <USBD_GetDescriptor+0x31c>
    return;
 800a5f6:	bf00      	nop
    }
  }
}
 800a5f8:	3710      	adds	r7, #16
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}
 800a5fe:	bf00      	nop

0800a600 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b084      	sub	sp, #16
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	889b      	ldrh	r3, [r3, #4]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d130      	bne.n	800a674 <USBD_SetAddress+0x74>
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	88db      	ldrh	r3, [r3, #6]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d12c      	bne.n	800a674 <USBD_SetAddress+0x74>
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	885b      	ldrh	r3, [r3, #2]
 800a61e:	2b7f      	cmp	r3, #127	; 0x7f
 800a620:	d828      	bhi.n	800a674 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	885b      	ldrh	r3, [r3, #2]
 800a626:	b2db      	uxtb	r3, r3
 800a628:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a62c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a634:	2b03      	cmp	r3, #3
 800a636:	d104      	bne.n	800a642 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a638:	6839      	ldr	r1, [r7, #0]
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f000 f989 	bl	800a952 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a640:	e01c      	b.n	800a67c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	7bfa      	ldrb	r2, [r7, #15]
 800a646:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a64a:	7bfb      	ldrb	r3, [r7, #15]
 800a64c:	4619      	mov	r1, r3
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f003 fe4c 	bl	800e2ec <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f000 fa45 	bl	800aae4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a65a:	7bfb      	ldrb	r3, [r7, #15]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d004      	beq.n	800a66a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2202      	movs	r2, #2
 800a664:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a668:	e008      	b.n	800a67c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2201      	movs	r2, #1
 800a66e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a672:	e003      	b.n	800a67c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a674:	6839      	ldr	r1, [r7, #0]
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 f96b 	bl	800a952 <USBD_CtlError>
  }
}
 800a67c:	bf00      	nop
 800a67e:	3710      	adds	r7, #16
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}

0800a684 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b082      	sub	sp, #8
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	885b      	ldrh	r3, [r3, #2]
 800a692:	b2da      	uxtb	r2, r3
 800a694:	4b41      	ldr	r3, [pc, #260]	; (800a79c <USBD_SetConfig+0x118>)
 800a696:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a698:	4b40      	ldr	r3, [pc, #256]	; (800a79c <USBD_SetConfig+0x118>)
 800a69a:	781b      	ldrb	r3, [r3, #0]
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d904      	bls.n	800a6aa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a6a0:	6839      	ldr	r1, [r7, #0]
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 f955 	bl	800a952 <USBD_CtlError>
 800a6a8:	e075      	b.n	800a796 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6b0:	2b02      	cmp	r3, #2
 800a6b2:	d002      	beq.n	800a6ba <USBD_SetConfig+0x36>
 800a6b4:	2b03      	cmp	r3, #3
 800a6b6:	d023      	beq.n	800a700 <USBD_SetConfig+0x7c>
 800a6b8:	e062      	b.n	800a780 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a6ba:	4b38      	ldr	r3, [pc, #224]	; (800a79c <USBD_SetConfig+0x118>)
 800a6bc:	781b      	ldrb	r3, [r3, #0]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d01a      	beq.n	800a6f8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a6c2:	4b36      	ldr	r3, [pc, #216]	; (800a79c <USBD_SetConfig+0x118>)
 800a6c4:	781b      	ldrb	r3, [r3, #0]
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2203      	movs	r2, #3
 800a6d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a6d4:	4b31      	ldr	r3, [pc, #196]	; (800a79c <USBD_SetConfig+0x118>)
 800a6d6:	781b      	ldrb	r3, [r3, #0]
 800a6d8:	4619      	mov	r1, r3
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f7ff f9c6 	bl	8009a6c <USBD_SetClassConfig>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	2b02      	cmp	r3, #2
 800a6e4:	d104      	bne.n	800a6f0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a6e6:	6839      	ldr	r1, [r7, #0]
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 f932 	bl	800a952 <USBD_CtlError>
            return;
 800a6ee:	e052      	b.n	800a796 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f000 f9f7 	bl	800aae4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a6f6:	e04e      	b.n	800a796 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 f9f3 	bl	800aae4 <USBD_CtlSendStatus>
        break;
 800a6fe:	e04a      	b.n	800a796 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a700:	4b26      	ldr	r3, [pc, #152]	; (800a79c <USBD_SetConfig+0x118>)
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d112      	bne.n	800a72e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2202      	movs	r2, #2
 800a70c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a710:	4b22      	ldr	r3, [pc, #136]	; (800a79c <USBD_SetConfig+0x118>)
 800a712:	781b      	ldrb	r3, [r3, #0]
 800a714:	461a      	mov	r2, r3
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a71a:	4b20      	ldr	r3, [pc, #128]	; (800a79c <USBD_SetConfig+0x118>)
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	4619      	mov	r1, r3
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f7ff f9c2 	bl	8009aaa <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f000 f9dc 	bl	800aae4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a72c:	e033      	b.n	800a796 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a72e:	4b1b      	ldr	r3, [pc, #108]	; (800a79c <USBD_SetConfig+0x118>)
 800a730:	781b      	ldrb	r3, [r3, #0]
 800a732:	461a      	mov	r2, r3
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	429a      	cmp	r2, r3
 800a73a:	d01d      	beq.n	800a778 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	b2db      	uxtb	r3, r3
 800a742:	4619      	mov	r1, r3
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f7ff f9b0 	bl	8009aaa <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a74a:	4b14      	ldr	r3, [pc, #80]	; (800a79c <USBD_SetConfig+0x118>)
 800a74c:	781b      	ldrb	r3, [r3, #0]
 800a74e:	461a      	mov	r2, r3
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a754:	4b11      	ldr	r3, [pc, #68]	; (800a79c <USBD_SetConfig+0x118>)
 800a756:	781b      	ldrb	r3, [r3, #0]
 800a758:	4619      	mov	r1, r3
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f7ff f986 	bl	8009a6c <USBD_SetClassConfig>
 800a760:	4603      	mov	r3, r0
 800a762:	2b02      	cmp	r3, #2
 800a764:	d104      	bne.n	800a770 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a766:	6839      	ldr	r1, [r7, #0]
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f000 f8f2 	bl	800a952 <USBD_CtlError>
            return;
 800a76e:	e012      	b.n	800a796 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f000 f9b7 	bl	800aae4 <USBD_CtlSendStatus>
        break;
 800a776:	e00e      	b.n	800a796 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f000 f9b3 	bl	800aae4 <USBD_CtlSendStatus>
        break;
 800a77e:	e00a      	b.n	800a796 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a780:	6839      	ldr	r1, [r7, #0]
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 f8e5 	bl	800a952 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a788:	4b04      	ldr	r3, [pc, #16]	; (800a79c <USBD_SetConfig+0x118>)
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	4619      	mov	r1, r3
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f7ff f98b 	bl	8009aaa <USBD_ClrClassConfig>
        break;
 800a794:	bf00      	nop
    }
  }
}
 800a796:	3708      	adds	r7, #8
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}
 800a79c:	20000454 	.word	0x20000454

0800a7a0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b082      	sub	sp, #8
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	88db      	ldrh	r3, [r3, #6]
 800a7ae:	2b01      	cmp	r3, #1
 800a7b0:	d004      	beq.n	800a7bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a7b2:	6839      	ldr	r1, [r7, #0]
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f000 f8cc 	bl	800a952 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a7ba:	e021      	b.n	800a800 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7c2:	2b01      	cmp	r3, #1
 800a7c4:	db17      	blt.n	800a7f6 <USBD_GetConfig+0x56>
 800a7c6:	2b02      	cmp	r3, #2
 800a7c8:	dd02      	ble.n	800a7d0 <USBD_GetConfig+0x30>
 800a7ca:	2b03      	cmp	r3, #3
 800a7cc:	d00b      	beq.n	800a7e6 <USBD_GetConfig+0x46>
 800a7ce:	e012      	b.n	800a7f6 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	3308      	adds	r3, #8
 800a7da:	2201      	movs	r2, #1
 800a7dc:	4619      	mov	r1, r3
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f000 f922 	bl	800aa28 <USBD_CtlSendData>
        break;
 800a7e4:	e00c      	b.n	800a800 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	3304      	adds	r3, #4
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	4619      	mov	r1, r3
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f000 f91a 	bl	800aa28 <USBD_CtlSendData>
        break;
 800a7f4:	e004      	b.n	800a800 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800a7f6:	6839      	ldr	r1, [r7, #0]
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f000 f8aa 	bl	800a952 <USBD_CtlError>
        break;
 800a7fe:	bf00      	nop
}
 800a800:	bf00      	nop
 800a802:	3708      	adds	r7, #8
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b082      	sub	sp, #8
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
 800a810:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a818:	3b01      	subs	r3, #1
 800a81a:	2b02      	cmp	r3, #2
 800a81c:	d81e      	bhi.n	800a85c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	88db      	ldrh	r3, [r3, #6]
 800a822:	2b02      	cmp	r3, #2
 800a824:	d004      	beq.n	800a830 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a826:	6839      	ldr	r1, [r7, #0]
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f000 f892 	bl	800a952 <USBD_CtlError>
        break;
 800a82e:	e01a      	b.n	800a866 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2201      	movs	r2, #1
 800a834:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d005      	beq.n	800a84c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	68db      	ldr	r3, [r3, #12]
 800a844:	f043 0202 	orr.w	r2, r3, #2
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	330c      	adds	r3, #12
 800a850:	2202      	movs	r2, #2
 800a852:	4619      	mov	r1, r3
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f000 f8e7 	bl	800aa28 <USBD_CtlSendData>
      break;
 800a85a:	e004      	b.n	800a866 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a85c:	6839      	ldr	r1, [r7, #0]
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f000 f877 	bl	800a952 <USBD_CtlError>
      break;
 800a864:	bf00      	nop
  }
}
 800a866:	bf00      	nop
 800a868:	3708      	adds	r7, #8
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}

0800a86e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a86e:	b580      	push	{r7, lr}
 800a870:	b082      	sub	sp, #8
 800a872:	af00      	add	r7, sp, #0
 800a874:	6078      	str	r0, [r7, #4]
 800a876:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	885b      	ldrh	r3, [r3, #2]
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d106      	bne.n	800a88e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2201      	movs	r2, #1
 800a884:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f000 f92b 	bl	800aae4 <USBD_CtlSendStatus>
  }
}
 800a88e:	bf00      	nop
 800a890:	3708      	adds	r7, #8
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}

0800a896 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a896:	b580      	push	{r7, lr}
 800a898:	b082      	sub	sp, #8
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
 800a89e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8a6:	3b01      	subs	r3, #1
 800a8a8:	2b02      	cmp	r3, #2
 800a8aa:	d80b      	bhi.n	800a8c4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	885b      	ldrh	r3, [r3, #2]
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d10c      	bne.n	800a8ce <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f000 f911 	bl	800aae4 <USBD_CtlSendStatus>
      }
      break;
 800a8c2:	e004      	b.n	800a8ce <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a8c4:	6839      	ldr	r1, [r7, #0]
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f000 f843 	bl	800a952 <USBD_CtlError>
      break;
 800a8cc:	e000      	b.n	800a8d0 <USBD_ClrFeature+0x3a>
      break;
 800a8ce:	bf00      	nop
  }
}
 800a8d0:	bf00      	nop
 800a8d2:	3708      	adds	r7, #8
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b083      	sub	sp, #12
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	781a      	ldrb	r2, [r3, #0]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	785a      	ldrb	r2, [r3, #1]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	3302      	adds	r3, #2
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	b29a      	uxth	r2, r3
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	3303      	adds	r3, #3
 800a8fe:	781b      	ldrb	r3, [r3, #0]
 800a900:	b29b      	uxth	r3, r3
 800a902:	021b      	lsls	r3, r3, #8
 800a904:	b29b      	uxth	r3, r3
 800a906:	4413      	add	r3, r2
 800a908:	b29a      	uxth	r2, r3
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	3304      	adds	r3, #4
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	b29a      	uxth	r2, r3
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	3305      	adds	r3, #5
 800a91a:	781b      	ldrb	r3, [r3, #0]
 800a91c:	b29b      	uxth	r3, r3
 800a91e:	021b      	lsls	r3, r3, #8
 800a920:	b29b      	uxth	r3, r3
 800a922:	4413      	add	r3, r2
 800a924:	b29a      	uxth	r2, r3
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	3306      	adds	r3, #6
 800a92e:	781b      	ldrb	r3, [r3, #0]
 800a930:	b29a      	uxth	r2, r3
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	3307      	adds	r3, #7
 800a936:	781b      	ldrb	r3, [r3, #0]
 800a938:	b29b      	uxth	r3, r3
 800a93a:	021b      	lsls	r3, r3, #8
 800a93c:	b29b      	uxth	r3, r3
 800a93e:	4413      	add	r3, r2
 800a940:	b29a      	uxth	r2, r3
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	80da      	strh	r2, [r3, #6]

}
 800a946:	bf00      	nop
 800a948:	370c      	adds	r7, #12
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr

0800a952 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a952:	b580      	push	{r7, lr}
 800a954:	b082      	sub	sp, #8
 800a956:	af00      	add	r7, sp, #0
 800a958:	6078      	str	r0, [r7, #4]
 800a95a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a95c:	2180      	movs	r1, #128	; 0x80
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f003 fc60 	bl	800e224 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a964:	2100      	movs	r1, #0
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f003 fc5c 	bl	800e224 <USBD_LL_StallEP>
}
 800a96c:	bf00      	nop
 800a96e:	3708      	adds	r7, #8
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}

0800a974 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b086      	sub	sp, #24
 800a978:	af00      	add	r7, sp, #0
 800a97a:	60f8      	str	r0, [r7, #12]
 800a97c:	60b9      	str	r1, [r7, #8]
 800a97e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a980:	2300      	movs	r3, #0
 800a982:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d032      	beq.n	800a9f0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a98a:	68f8      	ldr	r0, [r7, #12]
 800a98c:	f000 f834 	bl	800a9f8 <USBD_GetLen>
 800a990:	4603      	mov	r3, r0
 800a992:	3301      	adds	r3, #1
 800a994:	b29b      	uxth	r3, r3
 800a996:	005b      	lsls	r3, r3, #1
 800a998:	b29a      	uxth	r2, r3
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a99e:	7dfb      	ldrb	r3, [r7, #23]
 800a9a0:	1c5a      	adds	r2, r3, #1
 800a9a2:	75fa      	strb	r2, [r7, #23]
 800a9a4:	461a      	mov	r2, r3
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	4413      	add	r3, r2
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	7812      	ldrb	r2, [r2, #0]
 800a9ae:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a9b0:	7dfb      	ldrb	r3, [r7, #23]
 800a9b2:	1c5a      	adds	r2, r3, #1
 800a9b4:	75fa      	strb	r2, [r7, #23]
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	4413      	add	r3, r2
 800a9bc:	2203      	movs	r2, #3
 800a9be:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a9c0:	e012      	b.n	800a9e8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	1c5a      	adds	r2, r3, #1
 800a9c6:	60fa      	str	r2, [r7, #12]
 800a9c8:	7dfa      	ldrb	r2, [r7, #23]
 800a9ca:	1c51      	adds	r1, r2, #1
 800a9cc:	75f9      	strb	r1, [r7, #23]
 800a9ce:	4611      	mov	r1, r2
 800a9d0:	68ba      	ldr	r2, [r7, #8]
 800a9d2:	440a      	add	r2, r1
 800a9d4:	781b      	ldrb	r3, [r3, #0]
 800a9d6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a9d8:	7dfb      	ldrb	r3, [r7, #23]
 800a9da:	1c5a      	adds	r2, r3, #1
 800a9dc:	75fa      	strb	r2, [r7, #23]
 800a9de:	461a      	mov	r2, r3
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	4413      	add	r3, r2
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	781b      	ldrb	r3, [r3, #0]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d1e8      	bne.n	800a9c2 <USBD_GetString+0x4e>
    }
  }
}
 800a9f0:	bf00      	nop
 800a9f2:	3718      	adds	r7, #24
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b085      	sub	sp, #20
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800aa00:	2300      	movs	r3, #0
 800aa02:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800aa04:	e005      	b.n	800aa12 <USBD_GetLen+0x1a>
  {
    len++;
 800aa06:	7bfb      	ldrb	r3, [r7, #15]
 800aa08:	3301      	adds	r3, #1
 800aa0a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	3301      	adds	r3, #1
 800aa10:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	781b      	ldrb	r3, [r3, #0]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d1f5      	bne.n	800aa06 <USBD_GetLen+0xe>
  }

  return len;
 800aa1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3714      	adds	r7, #20
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr

0800aa28 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b084      	sub	sp, #16
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	60f8      	str	r0, [r7, #12]
 800aa30:	60b9      	str	r1, [r7, #8]
 800aa32:	4613      	mov	r3, r2
 800aa34:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	2202      	movs	r2, #2
 800aa3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800aa3e:	88fa      	ldrh	r2, [r7, #6]
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800aa44:	88fa      	ldrh	r2, [r7, #6]
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aa4a:	88fb      	ldrh	r3, [r7, #6]
 800aa4c:	68ba      	ldr	r2, [r7, #8]
 800aa4e:	2100      	movs	r1, #0
 800aa50:	68f8      	ldr	r0, [r7, #12]
 800aa52:	f003 fc6a 	bl	800e32a <USBD_LL_Transmit>

  return USBD_OK;
 800aa56:	2300      	movs	r3, #0
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3710      	adds	r7, #16
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b084      	sub	sp, #16
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	4613      	mov	r3, r2
 800aa6c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aa6e:	88fb      	ldrh	r3, [r7, #6]
 800aa70:	68ba      	ldr	r2, [r7, #8]
 800aa72:	2100      	movs	r1, #0
 800aa74:	68f8      	ldr	r0, [r7, #12]
 800aa76:	f003 fc58 	bl	800e32a <USBD_LL_Transmit>

  return USBD_OK;
 800aa7a:	2300      	movs	r3, #0
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3710      	adds	r7, #16
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b084      	sub	sp, #16
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	60f8      	str	r0, [r7, #12]
 800aa8c:	60b9      	str	r1, [r7, #8]
 800aa8e:	4613      	mov	r3, r2
 800aa90:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2203      	movs	r2, #3
 800aa96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800aa9a:	88fa      	ldrh	r2, [r7, #6]
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800aaa2:	88fa      	ldrh	r2, [r7, #6]
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aaaa:	88fb      	ldrh	r3, [r7, #6]
 800aaac:	68ba      	ldr	r2, [r7, #8]
 800aaae:	2100      	movs	r1, #0
 800aab0:	68f8      	ldr	r0, [r7, #12]
 800aab2:	f003 fc5d 	bl	800e370 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aab6:	2300      	movs	r3, #0
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3710      	adds	r7, #16
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b084      	sub	sp, #16
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	60b9      	str	r1, [r7, #8]
 800aaca:	4613      	mov	r3, r2
 800aacc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aace:	88fb      	ldrh	r3, [r7, #6]
 800aad0:	68ba      	ldr	r2, [r7, #8]
 800aad2:	2100      	movs	r1, #0
 800aad4:	68f8      	ldr	r0, [r7, #12]
 800aad6:	f003 fc4b 	bl	800e370 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aada:	2300      	movs	r3, #0
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3710      	adds	r7, #16
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2204      	movs	r2, #4
 800aaf0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	2100      	movs	r1, #0
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f003 fc15 	bl	800e32a <USBD_LL_Transmit>

  return USBD_OK;
 800ab00:	2300      	movs	r3, #0
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3708      	adds	r7, #8
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}

0800ab0a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ab0a:	b580      	push	{r7, lr}
 800ab0c:	b082      	sub	sp, #8
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2205      	movs	r2, #5
 800ab16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	2100      	movs	r1, #0
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f003 fc25 	bl	800e370 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ab26:	2300      	movs	r3, #0
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3708      	adds	r7, #8
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <aci_gap_set_io_capability>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b0cc      	sub	sp, #304	; 0x130
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	4602      	mov	r2, r0
 800ab38:	1dfb      	adds	r3, r7, #7
 800ab3a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800ab3c:	f107 0310 	add.w	r3, r7, #16
 800ab40:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ab44:	f107 030f 	add.w	r3, r7, #15
 800ab48:	2200      	movs	r2, #0
 800ab4a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = htob(IO_Capability, 1);
 800ab52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab56:	1dfa      	adds	r2, r7, #7
 800ab58:	7812      	ldrb	r2, [r2, #0]
 800ab5a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ab5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab60:	3301      	adds	r3, #1
 800ab62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800ab66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ab6a:	2218      	movs	r2, #24
 800ab6c:	2100      	movs	r1, #0
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f000 ff61 	bl	800ba36 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ab74:	233f      	movs	r3, #63	; 0x3f
 800ab76:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800ab7a:	2385      	movs	r3, #133	; 0x85
 800ab7c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ab80:	f107 0310 	add.w	r3, r7, #16
 800ab84:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ab88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab8c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ab90:	f107 030f 	add.w	r3, r7, #15
 800ab94:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ab98:	2301      	movs	r3, #1
 800ab9a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800ab9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800aba2:	2100      	movs	r1, #0
 800aba4:	4618      	mov	r0, r3
 800aba6:	f001 f901 	bl	800bdac <hci_send_req>
 800abaa:	4603      	mov	r3, r0
 800abac:	2b00      	cmp	r3, #0
 800abae:	da01      	bge.n	800abb4 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 800abb0:	23ff      	movs	r3, #255	; 0xff
 800abb2:	e009      	b.n	800abc8 <aci_gap_set_io_capability+0x98>
  if (status) 
 800abb4:	f107 030f 	add.w	r3, r7, #15
 800abb8:	781b      	ldrb	r3, [r3, #0]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d003      	beq.n	800abc6 <aci_gap_set_io_capability+0x96>
  {
    return status;
 800abbe:	f107 030f 	add.w	r3, r7, #15
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	e000      	b.n	800abc8 <aci_gap_set_io_capability+0x98>
  }
  return BLE_STATUS_SUCCESS;
 800abc6:	2300      	movs	r3, #0
}
 800abc8:	4618      	mov	r0, r3
 800abca:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}

0800abd2 <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 800abd2:	b5b0      	push	{r4, r5, r7, lr}
 800abd4:	b0cc      	sub	sp, #304	; 0x130
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	4605      	mov	r5, r0
 800abda:	460c      	mov	r4, r1
 800abdc:	4610      	mov	r0, r2
 800abde:	4619      	mov	r1, r3
 800abe0:	1dfb      	adds	r3, r7, #7
 800abe2:	462a      	mov	r2, r5
 800abe4:	701a      	strb	r2, [r3, #0]
 800abe6:	1dbb      	adds	r3, r7, #6
 800abe8:	4622      	mov	r2, r4
 800abea:	701a      	strb	r2, [r3, #0]
 800abec:	1d7b      	adds	r3, r7, #5
 800abee:	4602      	mov	r2, r0
 800abf0:	701a      	strb	r2, [r3, #0]
 800abf2:	1d3b      	adds	r3, r7, #4
 800abf4:	460a      	mov	r2, r1
 800abf6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800abf8:	f107 0310 	add.w	r3, r7, #16
 800abfc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ac00:	f107 030f 	add.w	r3, r7, #15
 800ac04:	2200      	movs	r2, #0
 800ac06:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 800ac0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac12:	1dfa      	adds	r2, r7, #7
 800ac14:	7812      	ldrb	r2, [r2, #0]
 800ac16:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ac18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac1c:	3301      	adds	r3, #1
 800ac1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 800ac22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac26:	1dba      	adds	r2, r7, #6
 800ac28:	7812      	ldrb	r2, [r2, #0]
 800ac2a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ac2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac30:	3301      	adds	r3, #1
 800ac32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = htob(SC_Support, 1);
 800ac36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac3a:	1d7a      	adds	r2, r7, #5
 800ac3c:	7812      	ldrb	r2, [r2, #0]
 800ac3e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ac40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac44:	3301      	adds	r3, #1
 800ac46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 800ac4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac4e:	1d3a      	adds	r2, r7, #4
 800ac50:	7812      	ldrb	r2, [r2, #0]
 800ac52:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800ac54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac58:	3301      	adds	r3, #1
 800ac5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 800ac5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac62:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800ac66:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800ac68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac6c:	3301      	adds	r3, #1
 800ac6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 800ac72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac76:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800ac7a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800ac7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac80:	3301      	adds	r3, #1
 800ac82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 800ac86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac8a:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800ac8e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800ac90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac94:	3301      	adds	r3, #1
 800ac96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 800ac9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac9e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800aca2:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800aca6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800acaa:	3304      	adds	r3, #4
 800acac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 800acb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800acb4:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800acb8:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800acba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800acbe:	3301      	adds	r3, #1
 800acc0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800acc4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800acc8:	2218      	movs	r2, #24
 800acca:	2100      	movs	r1, #0
 800accc:	4618      	mov	r0, r3
 800acce:	f000 feb2 	bl	800ba36 <Osal_MemSet>
  rq.ogf = 0x3f;
 800acd2:	233f      	movs	r3, #63	; 0x3f
 800acd4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800acd8:	2386      	movs	r3, #134	; 0x86
 800acda:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800acde:	f107 0310 	add.w	r3, r7, #16
 800ace2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ace6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800acea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800acee:	f107 030f 	add.w	r3, r7, #15
 800acf2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800acf6:	2301      	movs	r3, #1
 800acf8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800acfc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ad00:	2100      	movs	r1, #0
 800ad02:	4618      	mov	r0, r3
 800ad04:	f001 f852 	bl	800bdac <hci_send_req>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	da01      	bge.n	800ad12 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 800ad0e:	23ff      	movs	r3, #255	; 0xff
 800ad10:	e009      	b.n	800ad26 <aci_gap_set_authentication_requirement+0x154>
  if (status) 
 800ad12:	f107 030f 	add.w	r3, r7, #15
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d003      	beq.n	800ad24 <aci_gap_set_authentication_requirement+0x152>
  {
    return status;
 800ad1c:	f107 030f 	add.w	r3, r7, #15
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	e000      	b.n	800ad26 <aci_gap_set_authentication_requirement+0x154>
  }
  return BLE_STATUS_SUCCESS;
 800ad24:	2300      	movs	r3, #0
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bdb0      	pop	{r4, r5, r7, pc}

0800ad30 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 800ad30:	b590      	push	{r4, r7, lr}
 800ad32:	b0cd      	sub	sp, #308	; 0x134
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	4604      	mov	r4, r0
 800ad38:	4608      	mov	r0, r1
 800ad3a:	4611      	mov	r1, r2
 800ad3c:	463a      	mov	r2, r7
 800ad3e:	6013      	str	r3, [r2, #0]
 800ad40:	1dfb      	adds	r3, r7, #7
 800ad42:	4622      	mov	r2, r4
 800ad44:	701a      	strb	r2, [r3, #0]
 800ad46:	1dbb      	adds	r3, r7, #6
 800ad48:	4602      	mov	r2, r0
 800ad4a:	701a      	strb	r2, [r3, #0]
 800ad4c:	1d7b      	adds	r3, r7, #5
 800ad4e:	460a      	mov	r2, r1
 800ad50:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800ad52:	f107 0310 	add.w	r3, r7, #16
 800ad56:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800ad5a:	f107 0308 	add.w	r3, r7, #8
 800ad5e:	2207      	movs	r2, #7
 800ad60:	2100      	movs	r1, #0
 800ad62:	4618      	mov	r0, r3
 800ad64:	f000 fe67 	bl	800ba36 <Osal_MemSet>
  int index_input = 0;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = htob(Role, 1);
 800ad6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad72:	1dfa      	adds	r2, r7, #7
 800ad74:	7812      	ldrb	r2, [r2, #0]
 800ad76:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ad78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 800ad82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad86:	1dba      	adds	r2, r7, #6
 800ad88:	7812      	ldrb	r2, [r2, #0]
 800ad8a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ad8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ad90:	3301      	adds	r3, #1
 800ad92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 800ad96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad9a:	1d7a      	adds	r2, r7, #5
 800ad9c:	7812      	ldrb	r2, [r2, #0]
 800ad9e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ada0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ada4:	3301      	adds	r3, #1
 800ada6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800adaa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800adae:	2218      	movs	r2, #24
 800adb0:	2100      	movs	r1, #0
 800adb2:	4618      	mov	r0, r3
 800adb4:	f000 fe3f 	bl	800ba36 <Osal_MemSet>
  rq.ogf = 0x3f;
 800adb8:	233f      	movs	r3, #63	; 0x3f
 800adba:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800adbe:	238a      	movs	r3, #138	; 0x8a
 800adc0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800adc4:	f107 0310 	add.w	r3, r7, #16
 800adc8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800adcc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800add0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800add4:	f107 0308 	add.w	r3, r7, #8
 800add8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800addc:	2307      	movs	r3, #7
 800adde:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800ade2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ade6:	2100      	movs	r1, #0
 800ade8:	4618      	mov	r0, r3
 800adea:	f000 ffdf 	bl	800bdac <hci_send_req>
 800adee:	4603      	mov	r3, r0
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	da01      	bge.n	800adf8 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 800adf4:	23ff      	movs	r3, #255	; 0xff
 800adf6:	e021      	b.n	800ae3c <aci_gap_init+0x10c>
  if (resp.Status) 
 800adf8:	f107 0308 	add.w	r3, r7, #8
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d003      	beq.n	800ae0a <aci_gap_init+0xda>
  {
    return resp.Status;
 800ae02:	f107 0308 	add.w	r3, r7, #8
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	e018      	b.n	800ae3c <aci_gap_init+0x10c>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800ae0a:	f107 0308 	add.w	r3, r7, #8
 800ae0e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ae12:	b29a      	uxth	r2, r3
 800ae14:	463b      	mov	r3, r7
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 800ae1a:	f107 0308 	add.w	r3, r7, #8
 800ae1e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800ae22:	b29a      	uxth	r2, r3
 800ae24:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800ae28:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 800ae2a:	f107 0308 	add.w	r3, r7, #8
 800ae2e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800ae32:	b29a      	uxth	r2, r3
 800ae34:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800ae38:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800ae3a:	2300      	movs	r3, #0
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd90      	pop	{r4, r7, pc}

0800ae46 <aci_gap_configure_whitelist>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_configure_whitelist(void)
{
 800ae46:	b580      	push	{r7, lr}
 800ae48:	b088      	sub	sp, #32
 800ae4a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800ae50:	f107 0308 	add.w	r3, r7, #8
 800ae54:	2218      	movs	r2, #24
 800ae56:	2100      	movs	r1, #0
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f000 fdec 	bl	800ba36 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ae5e:	233f      	movs	r3, #63	; 0x3f
 800ae60:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800ae62:	2392      	movs	r3, #146	; 0x92
 800ae64:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ae66:	1dfb      	adds	r3, r7, #7
 800ae68:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800ae6e:	f107 0308 	add.w	r3, r7, #8
 800ae72:	2100      	movs	r1, #0
 800ae74:	4618      	mov	r0, r3
 800ae76:	f000 ff99 	bl	800bdac <hci_send_req>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	da01      	bge.n	800ae84 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800ae80:	23ff      	movs	r3, #255	; 0xff
 800ae82:	e005      	b.n	800ae90 <aci_gap_configure_whitelist+0x4a>
  if (status) 
 800ae84:	79fb      	ldrb	r3, [r7, #7]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d001      	beq.n	800ae8e <aci_gap_configure_whitelist+0x48>
  {
    return status;
 800ae8a:	79fb      	ldrb	r3, [r7, #7]
 800ae8c:	e000      	b.n	800ae90 <aci_gap_configure_whitelist+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800ae8e:	2300      	movs	r3, #0
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3720      	adds	r7, #32
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <aci_gap_start_general_discovery_proc>:

tBleStatus aci_gap_start_general_discovery_proc(uint16_t LE_Scan_Interval,
                                                uint16_t LE_Scan_Window,
                                                uint8_t Own_Address_Type,
                                                uint8_t Filter_Duplicates)
{
 800ae98:	b5b0      	push	{r4, r5, r7, lr}
 800ae9a:	b0cc      	sub	sp, #304	; 0x130
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	4605      	mov	r5, r0
 800aea0:	460c      	mov	r4, r1
 800aea2:	4610      	mov	r0, r2
 800aea4:	4619      	mov	r1, r3
 800aea6:	1dbb      	adds	r3, r7, #6
 800aea8:	462a      	mov	r2, r5
 800aeaa:	801a      	strh	r2, [r3, #0]
 800aeac:	1d3b      	adds	r3, r7, #4
 800aeae:	4622      	mov	r2, r4
 800aeb0:	801a      	strh	r2, [r3, #0]
 800aeb2:	1cfb      	adds	r3, r7, #3
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	701a      	strb	r2, [r3, #0]
 800aeb8:	1cbb      	adds	r3, r7, #2
 800aeba:	460a      	mov	r2, r1
 800aebc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_start_general_discovery_proc_cp0 *cp0 = (aci_gap_start_general_discovery_proc_cp0*)(cmd_buffer);
 800aebe:	f107 0310 	add.w	r3, r7, #16
 800aec2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800aec6:	f107 030f 	add.w	r3, r7, #15
 800aeca:	2200      	movs	r2, #0
 800aecc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800aece:	2300      	movs	r3, #0
 800aed0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Interval = htob(LE_Scan_Interval, 2);
 800aed4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aed8:	1dba      	adds	r2, r7, #6
 800aeda:	8812      	ldrh	r2, [r2, #0]
 800aedc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800aede:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aee2:	3302      	adds	r3, #2
 800aee4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Window = htob(LE_Scan_Window, 2);
 800aee8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aeec:	1d3a      	adds	r2, r7, #4
 800aeee:	8812      	ldrh	r2, [r2, #0]
 800aef0:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800aef2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aef6:	3302      	adds	r3, #2
 800aef8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800aefc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af00:	1cfa      	adds	r2, r7, #3
 800af02:	7812      	ldrb	r2, [r2, #0]
 800af04:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800af06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af0a:	3301      	adds	r3, #1
 800af0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Filter_Duplicates = htob(Filter_Duplicates, 1);
 800af10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af14:	1cba      	adds	r2, r7, #2
 800af16:	7812      	ldrb	r2, [r2, #0]
 800af18:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800af1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af1e:	3301      	adds	r3, #1
 800af20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800af24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800af28:	2218      	movs	r2, #24
 800af2a:	2100      	movs	r1, #0
 800af2c:	4618      	mov	r0, r3
 800af2e:	f000 fd82 	bl	800ba36 <Osal_MemSet>
  rq.ogf = 0x3f;
 800af32:	233f      	movs	r3, #63	; 0x3f
 800af34:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x097;
 800af38:	2397      	movs	r3, #151	; 0x97
 800af3a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800af3e:	230f      	movs	r3, #15
 800af40:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800af44:	f107 0310 	add.w	r3, r7, #16
 800af48:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800af4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af50:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800af54:	f107 030f 	add.w	r3, r7, #15
 800af58:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800af5c:	2301      	movs	r3, #1
 800af5e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800af62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800af66:	2100      	movs	r1, #0
 800af68:	4618      	mov	r0, r3
 800af6a:	f000 ff1f 	bl	800bdac <hci_send_req>
 800af6e:	4603      	mov	r3, r0
 800af70:	2b00      	cmp	r3, #0
 800af72:	da01      	bge.n	800af78 <aci_gap_start_general_discovery_proc+0xe0>
    return BLE_STATUS_TIMEOUT;
 800af74:	23ff      	movs	r3, #255	; 0xff
 800af76:	e009      	b.n	800af8c <aci_gap_start_general_discovery_proc+0xf4>
  if (status) 
 800af78:	f107 030f 	add.w	r3, r7, #15
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d003      	beq.n	800af8a <aci_gap_start_general_discovery_proc+0xf2>
  {
    return status;
 800af82:	f107 030f 	add.w	r3, r7, #15
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	e000      	b.n	800af8c <aci_gap_start_general_discovery_proc+0xf4>
  }
  return BLE_STATUS_SUCCESS;
 800af8a:	2300      	movs	r3, #0
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800af92:	46bd      	mov	sp, r7
 800af94:	bdb0      	pop	{r4, r5, r7, pc}

0800af96 <aci_gap_create_connection>:
                                     uint16_t Conn_Interval_Max,
                                     uint16_t Conn_Latency,
                                     uint16_t Supervision_Timeout,
                                     uint16_t Minimum_CE_Length,
                                     uint16_t Maximum_CE_Length)
{
 800af96:	b590      	push	{r4, r7, lr}
 800af98:	b0cf      	sub	sp, #316	; 0x13c
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	4604      	mov	r4, r0
 800af9e:	4608      	mov	r0, r1
 800afa0:	4611      	mov	r1, r2
 800afa2:	1d3a      	adds	r2, r7, #4
 800afa4:	6013      	str	r3, [r2, #0]
 800afa6:	f107 030e 	add.w	r3, r7, #14
 800afaa:	4622      	mov	r2, r4
 800afac:	801a      	strh	r2, [r3, #0]
 800afae:	f107 030c 	add.w	r3, r7, #12
 800afb2:	4602      	mov	r2, r0
 800afb4:	801a      	strh	r2, [r3, #0]
 800afb6:	f107 030b 	add.w	r3, r7, #11
 800afba:	460a      	mov	r2, r1
 800afbc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_create_connection_cp0 *cp0 = (aci_gap_create_connection_cp0*)(cmd_buffer);
 800afbe:	f107 0318 	add.w	r3, r7, #24
 800afc2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 800afc6:	f107 0317 	add.w	r3, r7, #23
 800afca:	2200      	movs	r2, #0
 800afcc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800afce:	2300      	movs	r3, #0
 800afd0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->LE_Scan_Interval = htob(LE_Scan_Interval, 2);
 800afd4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800afd8:	f107 020e 	add.w	r2, r7, #14
 800afdc:	8812      	ldrh	r2, [r2, #0]
 800afde:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800afe0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800afe4:	3302      	adds	r3, #2
 800afe6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->LE_Scan_Window = htob(LE_Scan_Window, 2);
 800afea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800afee:	f107 020c 	add.w	r2, r7, #12
 800aff2:	8812      	ldrh	r2, [r2, #0]
 800aff4:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800aff6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800affa:	3302      	adds	r3, #2
 800affc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Peer_Address_Type = htob(Peer_Address_Type, 1);
 800b000:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b004:	f107 020b 	add.w	r2, r7, #11
 800b008:	7812      	ldrb	r2, [r2, #0]
 800b00a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800b00c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b010:	3301      	adds	r3, #1
 800b012:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy((void *) &cp0->Peer_Address, (const void *) Peer_Address, 6);
 800b016:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b01a:	1d58      	adds	r0, r3, #5
 800b01c:	1d3b      	adds	r3, r7, #4
 800b01e:	2206      	movs	r2, #6
 800b020:	6819      	ldr	r1, [r3, #0]
 800b022:	f000 fcf8 	bl	800ba16 <Osal_MemCpy>
  index_input += 6;
 800b026:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b02a:	3306      	adds	r3, #6
 800b02c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800b030:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b034:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800b038:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800b03a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b03e:	3301      	adds	r3, #1
 800b040:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Interval_Min = htob(Conn_Interval_Min, 2);
 800b044:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b048:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 800b04c:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 800b04e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b052:	3302      	adds	r3, #2
 800b054:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Interval_Max = htob(Conn_Interval_Max, 2);
 800b058:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b05c:	f8b7 2150 	ldrh.w	r2, [r7, #336]	; 0x150
 800b060:	81da      	strh	r2, [r3, #14]
  index_input += 2;
 800b062:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b066:	3302      	adds	r3, #2
 800b068:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Latency = htob(Conn_Latency, 2);
 800b06c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b070:	f8b7 2154 	ldrh.w	r2, [r7, #340]	; 0x154
 800b074:	821a      	strh	r2, [r3, #16]
  index_input += 2;
 800b076:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b07a:	3302      	adds	r3, #2
 800b07c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Supervision_Timeout = htob(Supervision_Timeout, 2);
 800b080:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b084:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 800b088:	825a      	strh	r2, [r3, #18]
  index_input += 2;
 800b08a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b08e:	3302      	adds	r3, #2
 800b090:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Minimum_CE_Length = htob(Minimum_CE_Length, 2);
 800b094:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b098:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800b09c:	829a      	strh	r2, [r3, #20]
  index_input += 2;
 800b09e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b0a2:	3302      	adds	r3, #2
 800b0a4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Maximum_CE_Length = htob(Maximum_CE_Length, 2);
 800b0a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b0ac:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800b0b0:	82da      	strh	r2, [r3, #22]
  index_input += 2;
 800b0b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b0b6:	3302      	adds	r3, #2
 800b0b8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b0bc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b0c0:	2218      	movs	r2, #24
 800b0c2:	2100      	movs	r1, #0
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f000 fcb6 	bl	800ba36 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b0ca:	233f      	movs	r3, #63	; 0x3f
 800b0cc:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x09c;
 800b0d0:	239c      	movs	r3, #156	; 0x9c
 800b0d2:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 800b0d6:	230f      	movs	r3, #15
 800b0d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 800b0dc:	f107 0318 	add.w	r3, r7, #24
 800b0e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800b0e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b0e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 800b0ec:	f107 0317 	add.w	r3, r7, #23
 800b0f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800b0fa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b0fe:	2100      	movs	r1, #0
 800b100:	4618      	mov	r0, r3
 800b102:	f000 fe53 	bl	800bdac <hci_send_req>
 800b106:	4603      	mov	r3, r0
 800b108:	2b00      	cmp	r3, #0
 800b10a:	da01      	bge.n	800b110 <aci_gap_create_connection+0x17a>
    return BLE_STATUS_TIMEOUT;
 800b10c:	23ff      	movs	r3, #255	; 0xff
 800b10e:	e009      	b.n	800b124 <aci_gap_create_connection+0x18e>
  if (status) 
 800b110:	f107 0317 	add.w	r3, r7, #23
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d003      	beq.n	800b122 <aci_gap_create_connection+0x18c>
  {
    return status;
 800b11a:	f107 0317 	add.w	r3, r7, #23
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	e000      	b.n	800b124 <aci_gap_create_connection+0x18e>
  }
  return BLE_STATUS_SUCCESS;
 800b122:	2300      	movs	r3, #0
}
 800b124:	4618      	mov	r0, r3
 800b126:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd90      	pop	{r4, r7, pc}

0800b12e <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init(void)
{
 800b12e:	b580      	push	{r7, lr}
 800b130:	b088      	sub	sp, #32
 800b132:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b134:	2300      	movs	r3, #0
 800b136:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b138:	f107 0308 	add.w	r3, r7, #8
 800b13c:	2218      	movs	r2, #24
 800b13e:	2100      	movs	r1, #0
 800b140:	4618      	mov	r0, r3
 800b142:	f000 fc78 	bl	800ba36 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b146:	233f      	movs	r3, #63	; 0x3f
 800b148:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800b14a:	f240 1301 	movw	r3, #257	; 0x101
 800b14e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b150:	1dfb      	adds	r3, r7, #7
 800b152:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b154:	2301      	movs	r3, #1
 800b156:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800b158:	f107 0308 	add.w	r3, r7, #8
 800b15c:	2100      	movs	r1, #0
 800b15e:	4618      	mov	r0, r3
 800b160:	f000 fe24 	bl	800bdac <hci_send_req>
 800b164:	4603      	mov	r3, r0
 800b166:	2b00      	cmp	r3, #0
 800b168:	da01      	bge.n	800b16e <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800b16a:	23ff      	movs	r3, #255	; 0xff
 800b16c:	e005      	b.n	800b17a <aci_gatt_init+0x4c>
  if (status) 
 800b16e:	79fb      	ldrb	r3, [r7, #7]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d001      	beq.n	800b178 <aci_gatt_init+0x4a>
  {
    return status;
 800b174:	79fb      	ldrb	r3, [r7, #7]
 800b176:	e000      	b.n	800b17a <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 800b178:	2300      	movs	r3, #0
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3720      	adds	r7, #32
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}

0800b182 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 800b182:	b5b0      	push	{r4, r5, r7, lr}
 800b184:	b0cc      	sub	sp, #304	; 0x130
 800b186:	af00      	add	r7, sp, #0
 800b188:	4605      	mov	r5, r0
 800b18a:	460c      	mov	r4, r1
 800b18c:	4610      	mov	r0, r2
 800b18e:	4619      	mov	r1, r3
 800b190:	1dbb      	adds	r3, r7, #6
 800b192:	462a      	mov	r2, r5
 800b194:	801a      	strh	r2, [r3, #0]
 800b196:	1d3b      	adds	r3, r7, #4
 800b198:	4622      	mov	r2, r4
 800b19a:	801a      	strh	r2, [r3, #0]
 800b19c:	1cfb      	adds	r3, r7, #3
 800b19e:	4602      	mov	r2, r0
 800b1a0:	701a      	strb	r2, [r3, #0]
 800b1a2:	1cbb      	adds	r3, r7, #2
 800b1a4:	460a      	mov	r2, r1
 800b1a6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800b1a8:	f107 0310 	add.w	r3, r7, #16
 800b1ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b1b0:	f107 030f 	add.w	r3, r7, #15
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = htob(Service_Handle, 2);
 800b1be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b1c2:	1dba      	adds	r2, r7, #6
 800b1c4:	8812      	ldrh	r2, [r2, #0]
 800b1c6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b1c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b1cc:	3302      	adds	r3, #2
 800b1ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = htob(Char_Handle, 2);
 800b1d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b1d6:	1d3a      	adds	r2, r7, #4
 800b1d8:	8812      	ldrh	r2, [r2, #0]
 800b1da:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800b1dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b1e0:	3302      	adds	r3, #2
 800b1e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = htob(Val_Offset, 1);
 800b1e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b1ea:	1cfa      	adds	r2, r7, #3
 800b1ec:	7812      	ldrb	r2, [r2, #0]
 800b1ee:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800b1f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b1f4:	3301      	adds	r3, #1
 800b1f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 800b1fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b1fe:	1cba      	adds	r2, r7, #2
 800b200:	7812      	ldrb	r2, [r2, #0]
 800b202:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800b204:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b208:	3301      	adds	r3, #1
 800b20a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 800b20e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b212:	1d98      	adds	r0, r3, #6
 800b214:	1cbb      	adds	r3, r7, #2
 800b216:	781b      	ldrb	r3, [r3, #0]
 800b218:	461a      	mov	r2, r3
 800b21a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800b21e:	f000 fbfa 	bl	800ba16 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800b222:	1cbb      	adds	r3, r7, #2
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b22a:	4413      	add	r3, r2
 800b22c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b230:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b234:	2218      	movs	r2, #24
 800b236:	2100      	movs	r1, #0
 800b238:	4618      	mov	r0, r3
 800b23a:	f000 fbfc 	bl	800ba36 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b23e:	233f      	movs	r3, #63	; 0x3f
 800b240:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800b244:	f44f 7383 	mov.w	r3, #262	; 0x106
 800b248:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b24c:	f107 0310 	add.w	r3, r7, #16
 800b250:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b254:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b258:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b25c:	f107 030f 	add.w	r3, r7, #15
 800b260:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b264:	2301      	movs	r3, #1
 800b266:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b26a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b26e:	2100      	movs	r1, #0
 800b270:	4618      	mov	r0, r3
 800b272:	f000 fd9b 	bl	800bdac <hci_send_req>
 800b276:	4603      	mov	r3, r0
 800b278:	2b00      	cmp	r3, #0
 800b27a:	da01      	bge.n	800b280 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 800b27c:	23ff      	movs	r3, #255	; 0xff
 800b27e:	e009      	b.n	800b294 <aci_gatt_update_char_value+0x112>
  if (status) 
 800b280:	f107 030f 	add.w	r3, r7, #15
 800b284:	781b      	ldrb	r3, [r3, #0]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d003      	beq.n	800b292 <aci_gatt_update_char_value+0x110>
  {
    return status;
 800b28a:	f107 030f 	add.w	r3, r7, #15
 800b28e:	781b      	ldrb	r3, [r3, #0]
 800b290:	e000      	b.n	800b294 <aci_gatt_update_char_value+0x112>
  }
  return BLE_STATUS_SUCCESS;
 800b292:	2300      	movs	r3, #0
}
 800b294:	4618      	mov	r0, r3
 800b296:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bdb0      	pop	{r4, r5, r7, pc}

0800b29e <aci_gatt_disc_all_primary_services>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gatt_disc_all_primary_services(uint16_t Connection_Handle)
{
 800b29e:	b580      	push	{r7, lr}
 800b2a0:	b0cc      	sub	sp, #304	; 0x130
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	4602      	mov	r2, r0
 800b2a6:	1dbb      	adds	r3, r7, #6
 800b2a8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_primary_services_cp0 *cp0 = (aci_gatt_disc_all_primary_services_cp0*)(cmd_buffer);
 800b2aa:	f107 0310 	add.w	r3, r7, #16
 800b2ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b2b2:	f107 030f 	add.w	r3, r7, #15
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800b2c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2c4:	1dba      	adds	r2, r7, #6
 800b2c6:	8812      	ldrh	r2, [r2, #0]
 800b2c8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b2ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b2ce:	3302      	adds	r3, #2
 800b2d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b2d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b2d8:	2218      	movs	r2, #24
 800b2da:	2100      	movs	r1, #0
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f000 fbaa 	bl	800ba36 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b2e2:	233f      	movs	r3, #63	; 0x3f
 800b2e4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x112;
 800b2e8:	f44f 7389 	mov.w	r3, #274	; 0x112
 800b2ec:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800b2f0:	230f      	movs	r3, #15
 800b2f2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800b2f6:	f107 0310 	add.w	r3, r7, #16
 800b2fa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b2fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b302:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b306:	f107 030f 	add.w	r3, r7, #15
 800b30a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b30e:	2301      	movs	r3, #1
 800b310:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b314:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b318:	2100      	movs	r1, #0
 800b31a:	4618      	mov	r0, r3
 800b31c:	f000 fd46 	bl	800bdac <hci_send_req>
 800b320:	4603      	mov	r3, r0
 800b322:	2b00      	cmp	r3, #0
 800b324:	da01      	bge.n	800b32a <aci_gatt_disc_all_primary_services+0x8c>
    return BLE_STATUS_TIMEOUT;
 800b326:	23ff      	movs	r3, #255	; 0xff
 800b328:	e009      	b.n	800b33e <aci_gatt_disc_all_primary_services+0xa0>
  if (status) 
 800b32a:	f107 030f 	add.w	r3, r7, #15
 800b32e:	781b      	ldrb	r3, [r3, #0]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d003      	beq.n	800b33c <aci_gatt_disc_all_primary_services+0x9e>
  {
    return status;
 800b334:	f107 030f 	add.w	r3, r7, #15
 800b338:	781b      	ldrb	r3, [r3, #0]
 800b33a:	e000      	b.n	800b33e <aci_gatt_disc_all_primary_services+0xa0>
  }
  return BLE_STATUS_SUCCESS;
 800b33c:	2300      	movs	r3, #0
}
 800b33e:	4618      	mov	r0, r3
 800b340:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <aci_gatt_disc_all_char_of_service>:
}

tBleStatus aci_gatt_disc_all_char_of_service(uint16_t Connection_Handle,
                                             uint16_t Start_Handle,
                                             uint16_t End_Handle)
{
 800b348:	b590      	push	{r4, r7, lr}
 800b34a:	b0cd      	sub	sp, #308	; 0x134
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	4604      	mov	r4, r0
 800b350:	4608      	mov	r0, r1
 800b352:	4611      	mov	r1, r2
 800b354:	1dbb      	adds	r3, r7, #6
 800b356:	4622      	mov	r2, r4
 800b358:	801a      	strh	r2, [r3, #0]
 800b35a:	1d3b      	adds	r3, r7, #4
 800b35c:	4602      	mov	r2, r0
 800b35e:	801a      	strh	r2, [r3, #0]
 800b360:	1cbb      	adds	r3, r7, #2
 800b362:	460a      	mov	r2, r1
 800b364:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_of_service_cp0 *cp0 = (aci_gatt_disc_all_char_of_service_cp0*)(cmd_buffer);
 800b366:	f107 0310 	add.w	r3, r7, #16
 800b36a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b36e:	f107 030f 	add.w	r3, r7, #15
 800b372:	2200      	movs	r2, #0
 800b374:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b376:	2300      	movs	r3, #0
 800b378:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800b37c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b380:	1dba      	adds	r2, r7, #6
 800b382:	8812      	ldrh	r2, [r2, #0]
 800b384:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b386:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b38a:	3302      	adds	r3, #2
 800b38c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Start_Handle = htob(Start_Handle, 2);
 800b390:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b394:	1d3a      	adds	r2, r7, #4
 800b396:	8812      	ldrh	r2, [r2, #0]
 800b398:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800b39a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b39e:	3302      	adds	r3, #2
 800b3a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = htob(End_Handle, 2);
 800b3a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b3a8:	1cba      	adds	r2, r7, #2
 800b3aa:	8812      	ldrh	r2, [r2, #0]
 800b3ac:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800b3ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b3b2:	3302      	adds	r3, #2
 800b3b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b3b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b3bc:	2218      	movs	r2, #24
 800b3be:	2100      	movs	r1, #0
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f000 fb38 	bl	800ba36 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b3c6:	233f      	movs	r3, #63	; 0x3f
 800b3c8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x115;
 800b3cc:	f240 1315 	movw	r3, #277	; 0x115
 800b3d0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800b3d4:	230f      	movs	r3, #15
 800b3d6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800b3da:	f107 0310 	add.w	r3, r7, #16
 800b3de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b3e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b3e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b3ea:	f107 030f 	add.w	r3, r7, #15
 800b3ee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b3f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b3fc:	2100      	movs	r1, #0
 800b3fe:	4618      	mov	r0, r3
 800b400:	f000 fcd4 	bl	800bdac <hci_send_req>
 800b404:	4603      	mov	r3, r0
 800b406:	2b00      	cmp	r3, #0
 800b408:	da01      	bge.n	800b40e <aci_gatt_disc_all_char_of_service+0xc6>
    return BLE_STATUS_TIMEOUT;
 800b40a:	23ff      	movs	r3, #255	; 0xff
 800b40c:	e009      	b.n	800b422 <aci_gatt_disc_all_char_of_service+0xda>
  if (status) 
 800b40e:	f107 030f 	add.w	r3, r7, #15
 800b412:	781b      	ldrb	r3, [r3, #0]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d003      	beq.n	800b420 <aci_gatt_disc_all_char_of_service+0xd8>
  {
    return status;
 800b418:	f107 030f 	add.w	r3, r7, #15
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	e000      	b.n	800b422 <aci_gatt_disc_all_char_of_service+0xda>
  }
  return BLE_STATUS_SUCCESS;
 800b420:	2300      	movs	r3, #0
}
 800b422:	4618      	mov	r0, r3
 800b424:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd90      	pop	{r4, r7, pc}

0800b42c <aci_gatt_disc_all_char_desc>:
}

tBleStatus aci_gatt_disc_all_char_desc(uint16_t Connection_Handle,
                                       uint16_t Char_Handle,
                                       uint16_t End_Handle)
{
 800b42c:	b590      	push	{r4, r7, lr}
 800b42e:	b0cd      	sub	sp, #308	; 0x134
 800b430:	af00      	add	r7, sp, #0
 800b432:	4604      	mov	r4, r0
 800b434:	4608      	mov	r0, r1
 800b436:	4611      	mov	r1, r2
 800b438:	1dbb      	adds	r3, r7, #6
 800b43a:	4622      	mov	r2, r4
 800b43c:	801a      	strh	r2, [r3, #0]
 800b43e:	1d3b      	adds	r3, r7, #4
 800b440:	4602      	mov	r2, r0
 800b442:	801a      	strh	r2, [r3, #0]
 800b444:	1cbb      	adds	r3, r7, #2
 800b446:	460a      	mov	r2, r1
 800b448:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_desc_cp0 *cp0 = (aci_gatt_disc_all_char_desc_cp0*)(cmd_buffer);
 800b44a:	f107 0310 	add.w	r3, r7, #16
 800b44e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b452:	f107 030f 	add.w	r3, r7, #15
 800b456:	2200      	movs	r2, #0
 800b458:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b45a:	2300      	movs	r3, #0
 800b45c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800b460:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b464:	1dba      	adds	r2, r7, #6
 800b466:	8812      	ldrh	r2, [r2, #0]
 800b468:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b46a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b46e:	3302      	adds	r3, #2
 800b470:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = htob(Char_Handle, 2);
 800b474:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b478:	1d3a      	adds	r2, r7, #4
 800b47a:	8812      	ldrh	r2, [r2, #0]
 800b47c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800b47e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b482:	3302      	adds	r3, #2
 800b484:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = htob(End_Handle, 2);
 800b488:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b48c:	1cba      	adds	r2, r7, #2
 800b48e:	8812      	ldrh	r2, [r2, #0]
 800b490:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800b492:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b496:	3302      	adds	r3, #2
 800b498:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b49c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b4a0:	2218      	movs	r2, #24
 800b4a2:	2100      	movs	r1, #0
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f000 fac6 	bl	800ba36 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b4aa:	233f      	movs	r3, #63	; 0x3f
 800b4ac:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x117;
 800b4b0:	f240 1317 	movw	r3, #279	; 0x117
 800b4b4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800b4b8:	230f      	movs	r3, #15
 800b4ba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800b4be:	f107 0310 	add.w	r3, r7, #16
 800b4c2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b4c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b4ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b4ce:	f107 030f 	add.w	r3, r7, #15
 800b4d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b4dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b4e0:	2100      	movs	r1, #0
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f000 fc62 	bl	800bdac <hci_send_req>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	da01      	bge.n	800b4f2 <aci_gatt_disc_all_char_desc+0xc6>
    return BLE_STATUS_TIMEOUT;
 800b4ee:	23ff      	movs	r3, #255	; 0xff
 800b4f0:	e009      	b.n	800b506 <aci_gatt_disc_all_char_desc+0xda>
  if (status) 
 800b4f2:	f107 030f 	add.w	r3, r7, #15
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d003      	beq.n	800b504 <aci_gatt_disc_all_char_desc+0xd8>
  {
    return status;
 800b4fc:	f107 030f 	add.w	r3, r7, #15
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	e000      	b.n	800b506 <aci_gatt_disc_all_char_desc+0xda>
  }
  return BLE_STATUS_SUCCESS;
 800b504:	2300      	movs	r3, #0
}
 800b506:	4618      	mov	r0, r3
 800b508:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd90      	pop	{r4, r7, pc}

0800b510 <aci_gatt_write_char_desc>:

tBleStatus aci_gatt_write_char_desc(uint16_t Connection_Handle,
                                    uint16_t Attr_Handle,
                                    uint8_t Attribute_Val_Length,
                                    uint8_t Attribute_Val[])
{
 800b510:	b590      	push	{r4, r7, lr}
 800b512:	b0cf      	sub	sp, #316	; 0x13c
 800b514:	af00      	add	r7, sp, #0
 800b516:	4604      	mov	r4, r0
 800b518:	4608      	mov	r0, r1
 800b51a:	4611      	mov	r1, r2
 800b51c:	1d3a      	adds	r2, r7, #4
 800b51e:	6013      	str	r3, [r2, #0]
 800b520:	f107 030e 	add.w	r3, r7, #14
 800b524:	4622      	mov	r2, r4
 800b526:	801a      	strh	r2, [r3, #0]
 800b528:	f107 030c 	add.w	r3, r7, #12
 800b52c:	4602      	mov	r2, r0
 800b52e:	801a      	strh	r2, [r3, #0]
 800b530:	f107 030b 	add.w	r3, r7, #11
 800b534:	460a      	mov	r2, r1
 800b536:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_char_desc_cp0 *cp0 = (aci_gatt_write_char_desc_cp0*)(cmd_buffer);
 800b538:	f107 0318 	add.w	r3, r7, #24
 800b53c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 800b540:	f107 0317 	add.w	r3, r7, #23
 800b544:	2200      	movs	r2, #0
 800b546:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b548:	2300      	movs	r3, #0
 800b54a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800b54e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b552:	f107 020e 	add.w	r2, r7, #14
 800b556:	8812      	ldrh	r2, [r2, #0]
 800b558:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b55a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b55e:	3302      	adds	r3, #2
 800b560:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attr_Handle = htob(Attr_Handle, 2);
 800b564:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b568:	f107 020c 	add.w	r2, r7, #12
 800b56c:	8812      	ldrh	r2, [r2, #0]
 800b56e:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800b570:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b574:	3302      	adds	r3, #2
 800b576:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attribute_Val_Length = htob(Attribute_Val_Length, 1);
 800b57a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b57e:	f107 020b 	add.w	r2, r7, #11
 800b582:	7812      	ldrb	r2, [r2, #0]
 800b584:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800b586:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b58a:	3301      	adds	r3, #1
 800b58c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy((void *) &cp0->Attribute_Val, (const void *) Attribute_Val, Attribute_Val_Length);
 800b590:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b594:	1d58      	adds	r0, r3, #5
 800b596:	f107 030b 	add.w	r3, r7, #11
 800b59a:	781a      	ldrb	r2, [r3, #0]
 800b59c:	1d3b      	adds	r3, r7, #4
 800b59e:	6819      	ldr	r1, [r3, #0]
 800b5a0:	f000 fa39 	bl	800ba16 <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 800b5a4:	f107 030b 	add.w	r3, r7, #11
 800b5a8:	781b      	ldrb	r3, [r3, #0]
 800b5aa:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800b5ae:	4413      	add	r3, r2
 800b5b0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b5b4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b5b8:	2218      	movs	r2, #24
 800b5ba:	2100      	movs	r1, #0
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f000 fa3a 	bl	800ba36 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b5c2:	233f      	movs	r3, #63	; 0x3f
 800b5c4:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x121;
 800b5c8:	f240 1321 	movw	r3, #289	; 0x121
 800b5cc:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 800b5d0:	230f      	movs	r3, #15
 800b5d2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 800b5d6:	f107 0318 	add.w	r3, r7, #24
 800b5da:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800b5de:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b5e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 800b5e6:	f107 0317 	add.w	r3, r7, #23
 800b5ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800b5f4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b5f8:	2100      	movs	r1, #0
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f000 fbd6 	bl	800bdac <hci_send_req>
 800b600:	4603      	mov	r3, r0
 800b602:	2b00      	cmp	r3, #0
 800b604:	da01      	bge.n	800b60a <aci_gatt_write_char_desc+0xfa>
    return BLE_STATUS_TIMEOUT;
 800b606:	23ff      	movs	r3, #255	; 0xff
 800b608:	e009      	b.n	800b61e <aci_gatt_write_char_desc+0x10e>
  if (status) 
 800b60a:	f107 0317 	add.w	r3, r7, #23
 800b60e:	781b      	ldrb	r3, [r3, #0]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d003      	beq.n	800b61c <aci_gatt_write_char_desc+0x10c>
  {
    return status;
 800b614:	f107 0317 	add.w	r3, r7, #23
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	e000      	b.n	800b61e <aci_gatt_write_char_desc+0x10e>
  }
  return BLE_STATUS_SUCCESS;
 800b61c:	2300      	movs	r3, #0
}
 800b61e:	4618      	mov	r0, r3
 800b620:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800b624:	46bd      	mov	sp, r7
 800b626:	bd90      	pop	{r4, r7, pc}

0800b628 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b0cc      	sub	sp, #304	; 0x130
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	463b      	mov	r3, r7
 800b630:	601a      	str	r2, [r3, #0]
 800b632:	1dfb      	adds	r3, r7, #7
 800b634:	4602      	mov	r2, r0
 800b636:	701a      	strb	r2, [r3, #0]
 800b638:	1dbb      	adds	r3, r7, #6
 800b63a:	460a      	mov	r2, r1
 800b63c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800b63e:	f107 0310 	add.w	r3, r7, #16
 800b642:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b646:	f107 030f 	add.w	r3, r7, #15
 800b64a:	2200      	movs	r2, #0
 800b64c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b64e:	2300      	movs	r3, #0
 800b650:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = htob(Offset, 1);
 800b654:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b658:	1dfa      	adds	r2, r7, #7
 800b65a:	7812      	ldrb	r2, [r2, #0]
 800b65c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b65e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b662:	3301      	adds	r3, #1
 800b664:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = htob(Length, 1);
 800b668:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b66c:	1dba      	adds	r2, r7, #6
 800b66e:	7812      	ldrb	r2, [r2, #0]
 800b670:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b672:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b676:	3301      	adds	r3, #1
 800b678:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->Value, (const void *) Value, Length);
 800b67c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b680:	1c98      	adds	r0, r3, #2
 800b682:	1dbb      	adds	r3, r7, #6
 800b684:	781a      	ldrb	r2, [r3, #0]
 800b686:	463b      	mov	r3, r7
 800b688:	6819      	ldr	r1, [r3, #0]
 800b68a:	f000 f9c4 	bl	800ba16 <Osal_MemCpy>
  index_input += Length;
 800b68e:	1dbb      	adds	r3, r7, #6
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b696:	4413      	add	r3, r2
 800b698:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b69c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b6a0:	2218      	movs	r2, #24
 800b6a2:	2100      	movs	r1, #0
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f000 f9c6 	bl	800ba36 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b6aa:	233f      	movs	r3, #63	; 0x3f
 800b6ac:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800b6b0:	230c      	movs	r3, #12
 800b6b2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b6b6:	f107 0310 	add.w	r3, r7, #16
 800b6ba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b6be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b6c2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b6c6:	f107 030f 	add.w	r3, r7, #15
 800b6ca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b6d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b6d8:	2100      	movs	r1, #0
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f000 fb66 	bl	800bdac <hci_send_req>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	da01      	bge.n	800b6ea <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 800b6e6:	23ff      	movs	r3, #255	; 0xff
 800b6e8:	e009      	b.n	800b6fe <aci_hal_write_config_data+0xd6>
  if (status) 
 800b6ea:	f107 030f 	add.w	r3, r7, #15
 800b6ee:	781b      	ldrb	r3, [r3, #0]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d003      	beq.n	800b6fc <aci_hal_write_config_data+0xd4>
  {
    return status;
 800b6f4:	f107 030f 	add.w	r3, r7, #15
 800b6f8:	781b      	ldrb	r3, [r3, #0]
 800b6fa:	e000      	b.n	800b6fe <aci_hal_write_config_data+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 800b6fc:	2300      	movs	r3, #0
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b0cc      	sub	sp, #304	; 0x130
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	4602      	mov	r2, r0
 800b710:	1dfb      	adds	r3, r7, #7
 800b712:	701a      	strb	r2, [r3, #0]
 800b714:	1dbb      	adds	r3, r7, #6
 800b716:	460a      	mov	r2, r1
 800b718:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800b71a:	f107 0310 	add.w	r3, r7, #16
 800b71e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b722:	f107 030f 	add.w	r3, r7, #15
 800b726:	2200      	movs	r2, #0
 800b728:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b72a:	2300      	movs	r3, #0
 800b72c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = htob(En_High_Power, 1);
 800b730:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b734:	1dfa      	adds	r2, r7, #7
 800b736:	7812      	ldrb	r2, [r2, #0]
 800b738:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b73a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b73e:	3301      	adds	r3, #1
 800b740:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = htob(PA_Level, 1);
 800b744:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b748:	1dba      	adds	r2, r7, #6
 800b74a:	7812      	ldrb	r2, [r2, #0]
 800b74c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b74e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b752:	3301      	adds	r3, #1
 800b754:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b758:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b75c:	2218      	movs	r2, #24
 800b75e:	2100      	movs	r1, #0
 800b760:	4618      	mov	r0, r3
 800b762:	f000 f968 	bl	800ba36 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b766:	233f      	movs	r3, #63	; 0x3f
 800b768:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800b76c:	230f      	movs	r3, #15
 800b76e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b772:	f107 0310 	add.w	r3, r7, #16
 800b776:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b77a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b77e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b782:	f107 030f 	add.w	r3, r7, #15
 800b786:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b78a:	2301      	movs	r3, #1
 800b78c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b790:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b794:	2100      	movs	r1, #0
 800b796:	4618      	mov	r0, r3
 800b798:	f000 fb08 	bl	800bdac <hci_send_req>
 800b79c:	4603      	mov	r3, r0
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	da01      	bge.n	800b7a6 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 800b7a2:	23ff      	movs	r3, #255	; 0xff
 800b7a4:	e009      	b.n	800b7ba <aci_hal_set_tx_power_level+0xb2>
  if (status) 
 800b7a6:	f107 030f 	add.w	r3, r7, #15
 800b7aa:	781b      	ldrb	r3, [r3, #0]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d003      	beq.n	800b7b8 <aci_hal_set_tx_power_level+0xb0>
  {
    return status;
 800b7b0:	f107 030f 	add.w	r3, r7, #15
 800b7b4:	781b      	ldrb	r3, [r3, #0]
 800b7b6:	e000      	b.n	800b7ba <aci_hal_set_tx_power_level+0xb2>
  }
  return BLE_STATUS_SUCCESS;
 800b7b8:	2300      	movs	r3, #0
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}

0800b7c4 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy((void *) Link_Connection_Handle, (const void *) resp.Link_Connection_Handle, 16);
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask(uint16_t Radio_Activity_Mask)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b0cc      	sub	sp, #304	; 0x130
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	4602      	mov	r2, r0
 800b7cc:	1dbb      	adds	r3, r7, #6
 800b7ce:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800b7d0:	f107 0310 	add.w	r3, r7, #16
 800b7d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b7d8:	f107 030f 	add.w	r3, r7, #15
 800b7dc:	2200      	movs	r2, #0
 800b7de:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = htob(Radio_Activity_Mask, 2);
 800b7e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b7ea:	1dba      	adds	r2, r7, #6
 800b7ec:	8812      	ldrh	r2, [r2, #0]
 800b7ee:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b7f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b7f4:	3302      	adds	r3, #2
 800b7f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b7fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b7fe:	2218      	movs	r2, #24
 800b800:	2100      	movs	r1, #0
 800b802:	4618      	mov	r0, r3
 800b804:	f000 f917 	bl	800ba36 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b808:	233f      	movs	r3, #63	; 0x3f
 800b80a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800b80e:	2318      	movs	r3, #24
 800b810:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b814:	f107 0310 	add.w	r3, r7, #16
 800b818:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b81c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b820:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b824:	f107 030f 	add.w	r3, r7, #15
 800b828:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b82c:	2301      	movs	r3, #1
 800b82e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b832:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b836:	2100      	movs	r1, #0
 800b838:	4618      	mov	r0, r3
 800b83a:	f000 fab7 	bl	800bdac <hci_send_req>
 800b83e:	4603      	mov	r3, r0
 800b840:	2b00      	cmp	r3, #0
 800b842:	da01      	bge.n	800b848 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 800b844:	23ff      	movs	r3, #255	; 0xff
 800b846:	e009      	b.n	800b85c <aci_hal_set_radio_activity_mask+0x98>
  if (status) 
 800b848:	f107 030f 	add.w	r3, r7, #15
 800b84c:	781b      	ldrb	r3, [r3, #0]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d003      	beq.n	800b85a <aci_hal_set_radio_activity_mask+0x96>
  {
    return status;
 800b852:	f107 030f 	add.w	r3, r7, #15
 800b856:	781b      	ldrb	r3, [r3, #0]
 800b858:	e000      	b.n	800b85c <aci_hal_set_radio_activity_mask+0x98>
  }
  return BLE_STATUS_SUCCESS;
 800b85a:	2300      	movs	r3, #0
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}

0800b866 <hci_reset>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_reset(void)
{
 800b866:	b580      	push	{r7, lr}
 800b868:	b088      	sub	sp, #32
 800b86a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b86c:	2300      	movs	r3, #0
 800b86e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b870:	f107 0308 	add.w	r3, r7, #8
 800b874:	2218      	movs	r2, #24
 800b876:	2100      	movs	r1, #0
 800b878:	4618      	mov	r0, r3
 800b87a:	f000 f8dc 	bl	800ba36 <Osal_MemSet>
  rq.ogf = 0x03;
 800b87e:	2303      	movs	r3, #3
 800b880:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800b882:	2303      	movs	r3, #3
 800b884:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b886:	1dfb      	adds	r3, r7, #7
 800b888:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b88a:	2301      	movs	r3, #1
 800b88c:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800b88e:	f107 0308 	add.w	r3, r7, #8
 800b892:	2100      	movs	r1, #0
 800b894:	4618      	mov	r0, r3
 800b896:	f000 fa89 	bl	800bdac <hci_send_req>
 800b89a:	4603      	mov	r3, r0
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	da01      	bge.n	800b8a4 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800b8a0:	23ff      	movs	r3, #255	; 0xff
 800b8a2:	e005      	b.n	800b8b0 <hci_reset+0x4a>
  if (status) 
 800b8a4:	79fb      	ldrb	r3, [r7, #7]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d001      	beq.n	800b8ae <hci_reset+0x48>
  {
    return status;
 800b8aa:	79fb      	ldrb	r3, [r7, #7]
 800b8ac:	e000      	b.n	800b8b0 <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800b8ae:	2300      	movs	r3, #0
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3720      	adds	r7, #32
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}

0800b8b8 <aci_l2cap_connection_parameter_update_resp>:
                                                      uint16_t Timeout_Multiplier,
                                                      uint16_t Minimum_CE_Length,
                                                      uint16_t Maximum_CE_Length,
                                                      uint8_t Identifier,
                                                      uint8_t Accept)
{
 800b8b8:	b5b0      	push	{r4, r5, r7, lr}
 800b8ba:	b0cc      	sub	sp, #304	; 0x130
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	4605      	mov	r5, r0
 800b8c0:	460c      	mov	r4, r1
 800b8c2:	4610      	mov	r0, r2
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	1dbb      	adds	r3, r7, #6
 800b8c8:	462a      	mov	r2, r5
 800b8ca:	801a      	strh	r2, [r3, #0]
 800b8cc:	1d3b      	adds	r3, r7, #4
 800b8ce:	4622      	mov	r2, r4
 800b8d0:	801a      	strh	r2, [r3, #0]
 800b8d2:	1cbb      	adds	r3, r7, #2
 800b8d4:	4602      	mov	r2, r0
 800b8d6:	801a      	strh	r2, [r3, #0]
 800b8d8:	463b      	mov	r3, r7
 800b8da:	460a      	mov	r2, r1
 800b8dc:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_resp_cp0 *cp0 = (aci_l2cap_connection_parameter_update_resp_cp0*)(cmd_buffer);
 800b8de:	f107 0310 	add.w	r3, r7, #16
 800b8e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b8e6:	f107 030f 	add.w	r3, r7, #15
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800b8f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b8f8:	1dba      	adds	r2, r7, #6
 800b8fa:	8812      	ldrh	r2, [r2, #0]
 800b8fc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b8fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b902:	3302      	adds	r3, #2
 800b904:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = htob(Conn_Interval_Min, 2);
 800b908:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b90c:	1d3a      	adds	r2, r7, #4
 800b90e:	8812      	ldrh	r2, [r2, #0]
 800b910:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800b912:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b916:	3302      	adds	r3, #2
 800b918:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = htob(Conn_Interval_Max, 2);
 800b91c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b920:	1cba      	adds	r2, r7, #2
 800b922:	8812      	ldrh	r2, [r2, #0]
 800b924:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800b926:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b92a:	3302      	adds	r3, #2
 800b92c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Slave_latency = htob(Slave_latency, 2);
 800b930:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b934:	463a      	mov	r2, r7
 800b936:	8812      	ldrh	r2, [r2, #0]
 800b938:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 800b93a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b93e:	3302      	adds	r3, #2
 800b940:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = htob(Timeout_Multiplier, 2);
 800b944:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b948:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 800b94c:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 800b94e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b952:	3302      	adds	r3, #2
 800b954:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Minimum_CE_Length = htob(Minimum_CE_Length, 2);
 800b958:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b95c:	f8b7 2144 	ldrh.w	r2, [r7, #324]	; 0x144
 800b960:	815a      	strh	r2, [r3, #10]
  index_input += 2;
 800b962:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b966:	3302      	adds	r3, #2
 800b968:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Maximum_CE_Length = htob(Maximum_CE_Length, 2);
 800b96c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b970:	f8b7 2148 	ldrh.w	r2, [r7, #328]	; 0x148
 800b974:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 800b976:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b97a:	3302      	adds	r3, #2
 800b97c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identifier = htob(Identifier, 1);
 800b980:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b984:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800b988:	739a      	strb	r2, [r3, #14]
  index_input += 1;
 800b98a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b98e:	3301      	adds	r3, #1
 800b990:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Accept = htob(Accept, 1);
 800b994:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b998:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800b99c:	73da      	strb	r2, [r3, #15]
  index_input += 1;
 800b99e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b9a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b9ac:	2218      	movs	r2, #24
 800b9ae:	2100      	movs	r1, #0
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f000 f840 	bl	800ba36 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b9b6:	233f      	movs	r3, #63	; 0x3f
 800b9b8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x182;
 800b9bc:	f44f 73c1 	mov.w	r3, #386	; 0x182
 800b9c0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b9c4:	f107 0310 	add.w	r3, r7, #16
 800b9c8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b9cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b9d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b9d4:	f107 030f 	add.w	r3, r7, #15
 800b9d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b9dc:	2301      	movs	r3, #1
 800b9de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b9e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b9e6:	2100      	movs	r1, #0
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f000 f9df 	bl	800bdac <hci_send_req>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	da01      	bge.n	800b9f8 <aci_l2cap_connection_parameter_update_resp+0x140>
    return BLE_STATUS_TIMEOUT;
 800b9f4:	23ff      	movs	r3, #255	; 0xff
 800b9f6:	e009      	b.n	800ba0c <aci_l2cap_connection_parameter_update_resp+0x154>
  if (status) 
 800b9f8:	f107 030f 	add.w	r3, r7, #15
 800b9fc:	781b      	ldrb	r3, [r3, #0]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d003      	beq.n	800ba0a <aci_l2cap_connection_parameter_update_resp+0x152>
  {
    return status;
 800ba02:	f107 030f 	add.w	r3, r7, #15
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	e000      	b.n	800ba0c <aci_l2cap_connection_parameter_update_resp+0x154>
  }
  return BLE_STATUS_SUCCESS;
 800ba0a:	2300      	movs	r3, #0
}
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bdb0      	pop	{r4, r5, r7, pc}

0800ba16 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800ba16:	b580      	push	{r7, lr}
 800ba18:	b084      	sub	sp, #16
 800ba1a:	af00      	add	r7, sp, #0
 800ba1c:	60f8      	str	r0, [r7, #12]
 800ba1e:	60b9      	str	r1, [r7, #8]
 800ba20:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800ba22:	687a      	ldr	r2, [r7, #4]
 800ba24:	68b9      	ldr	r1, [r7, #8]
 800ba26:	68f8      	ldr	r0, [r7, #12]
 800ba28:	f002 fd82 	bl	800e530 <memcpy>
 800ba2c:	4603      	mov	r3, r0
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3710      	adds	r7, #16
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}

0800ba36 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800ba36:	b580      	push	{r7, lr}
 800ba38:	b084      	sub	sp, #16
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	60f8      	str	r0, [r7, #12]
 800ba3e:	60b9      	str	r1, [r7, #8]
 800ba40:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800ba42:	687a      	ldr	r2, [r7, #4]
 800ba44:	68b9      	ldr	r1, [r7, #8]
 800ba46:	68f8      	ldr	r0, [r7, #12]
 800ba48:	f002 fd7d 	bl	800e546 <memset>
 800ba4c:	4603      	mov	r3, r0
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3710      	adds	r7, #16
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}

0800ba56 <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 800ba56:	b480      	push	{r7}
 800ba58:	af00      	add	r7, sp, #0
  return;
 800ba5a:	bf00      	nop
}
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba62:	4770      	bx	lr

0800ba64 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 800ba64:	b480      	push	{r7}
 800ba66:	af00      	add	r7, sp, #0
  return;
 800ba68:	bf00      	nop
}
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba70:	4770      	bx	lr

0800ba72 <DIS_Init>:
__weak void DIS_Init( void )
{
 800ba72:	b480      	push	{r7}
 800ba74:	af00      	add	r7, sp, #0
  return;
 800ba76:	bf00      	nop
}
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7e:	4770      	bx	lr

0800ba80 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 800ba80:	b480      	push	{r7}
 800ba82:	af00      	add	r7, sp, #0
  return;
 800ba84:	bf00      	nop
}
 800ba86:	46bd      	mov	sp, r7
 800ba88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8c:	4770      	bx	lr

0800ba8e <HIDS_Init>:
__weak void HIDS_Init( void )
{
 800ba8e:	b480      	push	{r7}
 800ba90:	af00      	add	r7, sp, #0
  return;
 800ba92:	bf00      	nop
}
 800ba94:	46bd      	mov	sp, r7
 800ba96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9a:	4770      	bx	lr

0800ba9c <HRS_Init>:
__weak void HRS_Init( void )
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	af00      	add	r7, sp, #0
  return;
 800baa0:	bf00      	nop
}
 800baa2:	46bd      	mov	sp, r7
 800baa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa8:	4770      	bx	lr

0800baaa <HTS_Init>:
__weak void HTS_Init( void )
{
 800baaa:	b480      	push	{r7}
 800baac:	af00      	add	r7, sp, #0
  return;
 800baae:	bf00      	nop
}
 800bab0:	46bd      	mov	sp, r7
 800bab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab6:	4770      	bx	lr

0800bab8 <IAS_Init>:
__weak void IAS_Init( void )
{
 800bab8:	b480      	push	{r7}
 800baba:	af00      	add	r7, sp, #0
  return;
 800babc:	bf00      	nop
}
 800babe:	46bd      	mov	sp, r7
 800bac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac4:	4770      	bx	lr

0800bac6 <LLS_Init>:
__weak void LLS_Init( void )
{
 800bac6:	b480      	push	{r7}
 800bac8:	af00      	add	r7, sp, #0
  return;
 800baca:	bf00      	nop
}
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr

0800bad4 <TPS_Init>:
__weak void TPS_Init( void )
{
 800bad4:	b480      	push	{r7}
 800bad6:	af00      	add	r7, sp, #0
  return;
 800bad8:	bf00      	nop
}
 800bada:	46bd      	mov	sp, r7
 800badc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae0:	4770      	bx	lr

0800bae2 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 800bae2:	b480      	push	{r7}
 800bae4:	af00      	add	r7, sp, #0
  return;
 800bae6:	bf00      	nop
}
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr

0800baf0 <P2PS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
 800baf0:	b480      	push	{r7}
 800baf2:	af00      	add	r7, sp, #0
  return;
 800baf4:	bf00      	nop
}
 800baf6:	46bd      	mov	sp, r7
 800baf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafc:	4770      	bx	lr

0800bafe <OTAS_STM_Init>:
__weak void OTAS_STM_Init( void )
{
 800bafe:	b480      	push	{r7}
 800bb00:	af00      	add	r7, sp, #0
  return;
 800bb02:	bf00      	nop
}
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr

0800bb0c <MESH_Init>:
__weak void MESH_Init( void )
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	af00      	add	r7, sp, #0
  return;
 800bb10:	bf00      	nop
}
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr

0800bb1a <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 800bb1a:	b480      	push	{r7}
 800bb1c:	af00      	add	r7, sp, #0
  return;
 800bb1e:	bf00      	nop
}
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr

0800bb28 <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 800bb28:	b480      	push	{r7}
 800bb2a:	af00      	add	r7, sp, #0
  return;
 800bb2c:	bf00      	nop
}
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb34:	4770      	bx	lr
	...

0800bb38 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800bb3c:	4b04      	ldr	r3, [pc, #16]	; (800bb50 <SVCCTL_Init+0x18>)
 800bb3e:	2200      	movs	r2, #0
 800bb40:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800bb42:	4b04      	ldr	r3, [pc, #16]	; (800bb54 <SVCCTL_Init+0x1c>)
 800bb44:	2200      	movs	r2, #0
 800bb46:	711a      	strb	r2, [r3, #4]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800bb48:	f000 f806 	bl	800bb58 <SVCCTL_SvcInit>

  return;
 800bb4c:	bf00      	nop
}
 800bb4e:	bd80      	pop	{r7, pc}
 800bb50:	2000028c 	.word	0x2000028c
 800bb54:	200002ac 	.word	0x200002ac

0800bb58 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	af00      	add	r7, sp, #0
  BLS_Init();
 800bb5c:	f7ff ff7b 	bl	800ba56 <BLS_Init>

  CRS_STM_Init();
 800bb60:	f7ff ff80 	bl	800ba64 <CRS_STM_Init>

  DIS_Init();
 800bb64:	f7ff ff85 	bl	800ba72 <DIS_Init>

  EDS_STM_Init();
 800bb68:	f7ff ff8a 	bl	800ba80 <EDS_STM_Init>

  HIDS_Init();
 800bb6c:	f7ff ff8f 	bl	800ba8e <HIDS_Init>

  HRS_Init();
 800bb70:	f7ff ff94 	bl	800ba9c <HRS_Init>

  HTS_Init();
 800bb74:	f7ff ff99 	bl	800baaa <HTS_Init>

  IAS_Init();
 800bb78:	f7ff ff9e 	bl	800bab8 <IAS_Init>

  LLS_Init();
 800bb7c:	f7ff ffa3 	bl	800bac6 <LLS_Init>

  TPS_Init();
 800bb80:	f7ff ffa8 	bl	800bad4 <TPS_Init>

  MOTENV_STM_Init();
 800bb84:	f7ff ffad 	bl	800bae2 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800bb88:	f7ff ffb2 	bl	800baf0 <P2PS_STM_Init>

  OTAS_STM_Init();
 800bb8c:	f7ff ffb7 	bl	800bafe <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800bb90:	f7ff ffc3 	bl	800bb1a <BVOPUS_STM_Init>

  MESH_Init();
 800bb94:	f7ff ffba 	bl	800bb0c <MESH_Init>

  SVCCTL_InitCustomSvc();
 800bb98:	f7ff ffc6 	bl	800bb28 <SVCCTL_InitCustomSvc>
  
  return;
 800bb9c:	bf00      	nop
}
 800bb9e:	bd80      	pop	{r7, pc}

0800bba0 <SVCCTL_RegisterCltHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterCltHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Client_Event_Handler )
{
 800bba0:	b480      	push	{r7}
 800bba2:	b083      	sub	sp, #12
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
  SVCCTL_CltHandler.SVCCTL_CltHandlerTable[SVCCTL_CltHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Client_Event_Handler;
 800bba8:	4b09      	ldr	r3, [pc, #36]	; (800bbd0 <SVCCTL_RegisterCltHandler+0x30>)
 800bbaa:	791b      	ldrb	r3, [r3, #4]
 800bbac:	4619      	mov	r1, r3
 800bbae:	4a08      	ldr	r2, [pc, #32]	; (800bbd0 <SVCCTL_RegisterCltHandler+0x30>)
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif
  SVCCTL_CltHandler.NbreOfRegisteredHandler++;
 800bbb6:	4b06      	ldr	r3, [pc, #24]	; (800bbd0 <SVCCTL_RegisterCltHandler+0x30>)
 800bbb8:	791b      	ldrb	r3, [r3, #4]
 800bbba:	3301      	adds	r3, #1
 800bbbc:	b2da      	uxtb	r2, r3
 800bbbe:	4b04      	ldr	r3, [pc, #16]	; (800bbd0 <SVCCTL_RegisterCltHandler+0x30>)
 800bbc0:	711a      	strb	r2, [r3, #4]

  return;
 800bbc2:	bf00      	nop
}
 800bbc4:	370c      	adds	r7, #12
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbcc:	4770      	bx	lr
 800bbce:	bf00      	nop
 800bbd0:	200002ac 	.word	0x200002ac

0800bbd4 <SVCCTL_UserEvtRx>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b086      	sub	sp, #24
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	3301      	adds	r3, #1
 800bbe0:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	781b      	ldrb	r3, [r3, #0]
 800bbea:	2bff      	cmp	r3, #255	; 0xff
 800bbec:	d000      	beq.n	800bbf0 <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800bbee:	e03f      	b.n	800bc70 <SVCCTL_UserEvtRx+0x9c>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	3302      	adds	r3, #2
 800bbf4:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	881b      	ldrh	r3, [r3, #0]
 800bbfa:	b29b      	uxth	r3, r3
 800bbfc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bc00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bc04:	d000      	beq.n	800bc08 <SVCCTL_UserEvtRx+0x34>
          break;
 800bc06:	e032      	b.n	800bc6e <SVCCTL_UserEvtRx+0x9a>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800bc08:	2300      	movs	r3, #0
 800bc0a:	757b      	strb	r3, [r7, #21]
 800bc0c:	e00d      	b.n	800bc2a <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800bc0e:	7d7b      	ldrb	r3, [r7, #21]
 800bc10:	4a25      	ldr	r2, [pc, #148]	; (800bca8 <SVCCTL_UserEvtRx+0xd4>)
 800bc12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	4798      	blx	r3
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 800bc1e:	7dfb      	ldrb	r3, [r7, #23]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d108      	bne.n	800bc36 <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800bc24:	7d7b      	ldrb	r3, [r7, #21]
 800bc26:	3301      	adds	r3, #1
 800bc28:	757b      	strb	r3, [r7, #21]
 800bc2a:	4b1f      	ldr	r3, [pc, #124]	; (800bca8 <SVCCTL_UserEvtRx+0xd4>)
 800bc2c:	7f1b      	ldrb	r3, [r3, #28]
 800bc2e:	7d7a      	ldrb	r2, [r7, #21]
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d3ec      	bcc.n	800bc0e <SVCCTL_UserEvtRx+0x3a>
 800bc34:	e000      	b.n	800bc38 <SVCCTL_UserEvtRx+0x64>
              break;
 800bc36:	bf00      	nop
          event_notification_status = SVCCTL_EvtNotAck;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	75fb      	strb	r3, [r7, #23]
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	757b      	strb	r3, [r7, #21]
 800bc40:	e00d      	b.n	800bc5e <SVCCTL_UserEvtRx+0x8a>
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 800bc42:	7d7b      	ldrb	r3, [r7, #21]
 800bc44:	4a19      	ldr	r2, [pc, #100]	; (800bcac <SVCCTL_UserEvtRx+0xd8>)
 800bc46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	4798      	blx	r3
 800bc4e:	4603      	mov	r3, r0
 800bc50:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 800bc52:	7dfb      	ldrb	r3, [r7, #23]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d108      	bne.n	800bc6a <SVCCTL_UserEvtRx+0x96>
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 800bc58:	7d7b      	ldrb	r3, [r7, #21]
 800bc5a:	3301      	adds	r3, #1
 800bc5c:	757b      	strb	r3, [r7, #21]
 800bc5e:	4b13      	ldr	r3, [pc, #76]	; (800bcac <SVCCTL_UserEvtRx+0xd8>)
 800bc60:	791b      	ldrb	r3, [r3, #4]
 800bc62:	7d7a      	ldrb	r2, [r7, #21]
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d3ec      	bcc.n	800bc42 <SVCCTL_UserEvtRx+0x6e>
          break;
 800bc68:	e000      	b.n	800bc6c <SVCCTL_UserEvtRx+0x98>
              break;
 800bc6a:	bf00      	nop
          break;
 800bc6c:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 800bc6e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800bc70:	7dfb      	ldrb	r3, [r7, #23]
 800bc72:	2b01      	cmp	r3, #1
 800bc74:	d009      	beq.n	800bc8a <SVCCTL_UserEvtRx+0xb6>
 800bc76:	2b02      	cmp	r3, #2
 800bc78:	d00a      	beq.n	800bc90 <SVCCTL_UserEvtRx+0xbc>
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d10b      	bne.n	800bc96 <SVCCTL_UserEvtRx+0xc2>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f000 fdfa 	bl	800c878 <SVCCTL_App_Notification>
 800bc84:	4603      	mov	r3, r0
 800bc86:	75bb      	strb	r3, [r7, #22]
      break;
 800bc88:	e008      	b.n	800bc9c <SVCCTL_UserEvtRx+0xc8>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	75bb      	strb	r3, [r7, #22]
      break;
 800bc8e:	e005      	b.n	800bc9c <SVCCTL_UserEvtRx+0xc8>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800bc90:	2300      	movs	r3, #0
 800bc92:	75bb      	strb	r3, [r7, #22]
      break;
 800bc94:	e002      	b.n	800bc9c <SVCCTL_UserEvtRx+0xc8>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800bc96:	2301      	movs	r3, #1
 800bc98:	75bb      	strb	r3, [r7, #22]
      break;
 800bc9a:	bf00      	nop
  }

  return (return_status);
 800bc9c:	7dbb      	ldrb	r3, [r7, #22]
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3718      	adds	r7, #24
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
 800bca6:	bf00      	nop
 800bca8:	2000028c 	.word	0x2000028c
 800bcac:	200002ac 	.word	0x200002ac

0800bcb0 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b088      	sub	sp, #32
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800bcb8:	f107 030c 	add.w	r3, r7, #12
 800bcbc:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800bcc4:	69fb      	ldr	r3, [r7, #28]
 800bcc6:	2121      	movs	r1, #33	; 0x21
 800bcc8:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800bccc:	f000 fa00 	bl	800c0d0 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800bcd0:	69fb      	ldr	r3, [r7, #28]
 800bcd2:	330b      	adds	r3, #11
 800bcd4:	78db      	ldrb	r3, [r3, #3]
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3720      	adds	r7, #32
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
	...

0800bce0 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b082      	sub	sp, #8
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
 800bce8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	685b      	ldr	r3, [r3, #4]
 800bcee:	4a08      	ldr	r2, [pc, #32]	; (800bd10 <hci_init+0x30>)
 800bcf0:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800bcf2:	4a08      	ldr	r2, [pc, #32]	; (800bd14 <hci_init+0x34>)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800bcf8:	4806      	ldr	r0, [pc, #24]	; (800bd14 <hci_init+0x34>)
 800bcfa:	f000 f96f 	bl	800bfdc <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	4618      	mov	r0, r3
 800bd04:	f000 f8d0 	bl	800bea8 <TlInit>

  return;
 800bd08:	bf00      	nop
}
 800bd0a:	3708      	adds	r7, #8
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}
 800bd10:	20000480 	.word	0x20000480
 800bd14:	20000458 	.word	0x20000458

0800bd18 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b084      	sub	sp, #16
 800bd1c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800bd1e:	4820      	ldr	r0, [pc, #128]	; (800bda0 <hci_user_evt_proc+0x88>)
 800bd20:	f000 fc92 	bl	800c648 <LST_is_empty>
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d128      	bne.n	800bd7c <hci_user_evt_proc+0x64>
 800bd2a:	4b1e      	ldr	r3, [pc, #120]	; (800bda4 <hci_user_evt_proc+0x8c>)
 800bd2c:	781b      	ldrb	r3, [r3, #0]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d024      	beq.n	800bd7c <hci_user_evt_proc+0x64>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800bd32:	f107 030c 	add.w	r3, r7, #12
 800bd36:	4619      	mov	r1, r3
 800bd38:	4819      	ldr	r0, [pc, #100]	; (800bda0 <hci_user_evt_proc+0x88>)
 800bd3a:	f000 fd0c 	bl	800c756 <LST_remove_head>

    UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800bd3e:	4b19      	ldr	r3, [pc, #100]	; (800bda4 <hci_user_evt_proc+0x8c>)
 800bd40:	2201      	movs	r2, #1
 800bd42:	701a      	strb	r2, [r3, #0]

    if (hciContext.UserEvtRx != NULL)
 800bd44:	4b18      	ldr	r3, [pc, #96]	; (800bda8 <hci_user_evt_proc+0x90>)
 800bd46:	69db      	ldr	r3, [r3, #28]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d009      	beq.n	800bd60 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	60bb      	str	r3, [r7, #8]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800bd50:	4b15      	ldr	r3, [pc, #84]	; (800bda8 <hci_user_evt_proc+0x90>)
 800bd52:	69db      	ldr	r3, [r3, #28]
 800bd54:	1d3a      	adds	r2, r7, #4
 800bd56:	4610      	mov	r0, r2
 800bd58:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800bd5a:	793a      	ldrb	r2, [r7, #4]
 800bd5c:	4b11      	ldr	r3, [pc, #68]	; (800bda4 <hci_user_evt_proc+0x8c>)
 800bd5e:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800bd60:	4b10      	ldr	r3, [pc, #64]	; (800bda4 <hci_user_evt_proc+0x8c>)
 800bd62:	781b      	ldrb	r3, [r3, #0]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d004      	beq.n	800bd72 <hci_user_evt_proc+0x5a>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f000 fbca 	bl	800c504 <TL_MM_EvtDone>
 800bd70:	e004      	b.n	800bd7c <hci_user_evt_proc+0x64>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	4619      	mov	r1, r3
 800bd76:	480a      	ldr	r0, [pc, #40]	; (800bda0 <hci_user_evt_proc+0x88>)
 800bd78:	f000 fc86 	bl	800c688 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800bd7c:	4808      	ldr	r0, [pc, #32]	; (800bda0 <hci_user_evt_proc+0x88>)
 800bd7e:	f000 fc63 	bl	800c648 <LST_is_empty>
 800bd82:	4603      	mov	r3, r0
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d107      	bne.n	800bd98 <hci_user_evt_proc+0x80>
 800bd88:	4b06      	ldr	r3, [pc, #24]	; (800bda4 <hci_user_evt_proc+0x8c>)
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d003      	beq.n	800bd98 <hci_user_evt_proc+0x80>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800bd90:	4803      	ldr	r0, [pc, #12]	; (800bda0 <hci_user_evt_proc+0x88>)
 800bd92:	f001 f85b 	bl	800ce4c <hci_notify_asynch_evt>
  }


  return;
 800bd96:	bf00      	nop
 800bd98:	bf00      	nop
}
 800bd9a:	3710      	adds	r7, #16
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}
 800bda0:	200002b8 	.word	0x200002b8
 800bda4:	200002c4 	.word	0x200002c4
 800bda8:	20000458 	.word	0x20000458

0800bdac <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b088      	sub	sp, #32
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
 800bdb4:	460b      	mov	r3, r1
 800bdb6:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800bdb8:	2000      	movs	r0, #0
 800bdba:	f000 f8cb 	bl	800bf54 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	885b      	ldrh	r3, [r3, #2]
 800bdc6:	b21b      	sxth	r3, r3
 800bdc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bdcc:	b21a      	sxth	r2, r3
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	881b      	ldrh	r3, [r3, #0]
 800bdd2:	029b      	lsls	r3, r3, #10
 800bdd4:	b21b      	sxth	r3, r3
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	b21b      	sxth	r3, r3
 800bdda:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	68db      	ldr	r3, [r3, #12]
 800bde0:	b2d9      	uxtb	r1, r3
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	689a      	ldr	r2, [r3, #8]
 800bde6:	8bbb      	ldrh	r3, [r7, #28]
 800bde8:	4618      	mov	r0, r3
 800bdea:	f000 f88d 	bl	800bf08 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800bdee:	e04e      	b.n	800be8e <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800bdf0:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800bdf4:	f001 f841 	bl	800ce7a <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800bdf8:	e043      	b.n	800be82 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800bdfa:	f107 030c 	add.w	r3, r7, #12
 800bdfe:	4619      	mov	r1, r3
 800be00:	4828      	ldr	r0, [pc, #160]	; (800bea4 <hci_send_req+0xf8>)
 800be02:	f000 fca8 	bl	800c756 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	7a5b      	ldrb	r3, [r3, #9]
 800be0a:	2b0f      	cmp	r3, #15
 800be0c:	d114      	bne.n	800be38 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	330b      	adds	r3, #11
 800be12:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	885b      	ldrh	r3, [r3, #2]
 800be18:	b29b      	uxth	r3, r3
 800be1a:	8bba      	ldrh	r2, [r7, #28]
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d104      	bne.n	800be2a <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	691b      	ldr	r3, [r3, #16]
 800be24:	693a      	ldr	r2, [r7, #16]
 800be26:	7812      	ldrb	r2, [r2, #0]
 800be28:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	785b      	ldrb	r3, [r3, #1]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d027      	beq.n	800be82 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800be32:	2301      	movs	r3, #1
 800be34:	77fb      	strb	r3, [r7, #31]
 800be36:	e024      	b.n	800be82 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	330b      	adds	r3, #11
 800be3c:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800be3e:	69bb      	ldr	r3, [r7, #24]
 800be40:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800be44:	b29b      	uxth	r3, r3
 800be46:	8bba      	ldrh	r2, [r7, #28]
 800be48:	429a      	cmp	r2, r3
 800be4a:	d114      	bne.n	800be76 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	7a9b      	ldrb	r3, [r3, #10]
 800be50:	3b03      	subs	r3, #3
 800be52:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	695a      	ldr	r2, [r3, #20]
 800be58:	7dfb      	ldrb	r3, [r7, #23]
 800be5a:	429a      	cmp	r2, r3
 800be5c:	bfa8      	it	ge
 800be5e:	461a      	movge	r2, r3
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6918      	ldr	r0, [r3, #16]
 800be68:	69bb      	ldr	r3, [r7, #24]
 800be6a:	1cd9      	adds	r1, r3, #3
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	695b      	ldr	r3, [r3, #20]
 800be70:	461a      	mov	r2, r3
 800be72:	f002 fb5d 	bl	800e530 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	781b      	ldrb	r3, [r3, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d001      	beq.n	800be82 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800be7e:	2301      	movs	r3, #1
 800be80:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800be82:	4808      	ldr	r0, [pc, #32]	; (800bea4 <hci_send_req+0xf8>)
 800be84:	f000 fbe0 	bl	800c648 <LST_is_empty>
 800be88:	4603      	mov	r3, r0
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d0b5      	beq.n	800bdfa <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800be8e:	7ffb      	ldrb	r3, [r7, #31]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d0ad      	beq.n	800bdf0 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800be94:	2001      	movs	r0, #1
 800be96:	f000 f85d 	bl	800bf54 <NotifyCmdStatus>

  return 0;
 800be9a:	2300      	movs	r3, #0
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3720      	adds	r7, #32
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}
 800bea4:	20000478 	.word	0x20000478

0800bea8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b086      	sub	sp, #24
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800beb0:	480f      	ldr	r0, [pc, #60]	; (800bef0 <TlInit+0x48>)
 800beb2:	f000 fbb9 	bl	800c628 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800beb6:	4a0f      	ldr	r2, [pc, #60]	; (800bef4 <TlInit+0x4c>)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800bebc:	480e      	ldr	r0, [pc, #56]	; (800bef8 <TlInit+0x50>)
 800bebe:	f000 fbb3 	bl	800c628 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800bec2:	4b0e      	ldr	r3, [pc, #56]	; (800befc <TlInit+0x54>)
 800bec4:	2201      	movs	r2, #1
 800bec6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800bec8:	4b0d      	ldr	r3, [pc, #52]	; (800bf00 <TlInit+0x58>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d00a      	beq.n	800bee6 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800bed4:	4b0b      	ldr	r3, [pc, #44]	; (800bf04 <TlInit+0x5c>)
 800bed6:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800bed8:	4b09      	ldr	r3, [pc, #36]	; (800bf00 <TlInit+0x58>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f107 0208 	add.w	r2, r7, #8
 800bee0:	4610      	mov	r0, r2
 800bee2:	4798      	blx	r3
  }

  return;
 800bee4:	bf00      	nop
 800bee6:	bf00      	nop
}
 800bee8:	3718      	adds	r7, #24
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
 800beee:	bf00      	nop
 800bef0:	20000478 	.word	0x20000478
 800bef4:	200002c0 	.word	0x200002c0
 800bef8:	200002b8 	.word	0x200002b8
 800befc:	200002c4 	.word	0x200002c4
 800bf00:	20000458 	.word	0x20000458
 800bf04:	0800bf95 	.word	0x0800bf95

0800bf08 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b082      	sub	sp, #8
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	4603      	mov	r3, r0
 800bf10:	603a      	str	r2, [r7, #0]
 800bf12:	80fb      	strh	r3, [r7, #6]
 800bf14:	460b      	mov	r3, r1
 800bf16:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800bf18:	4b0c      	ldr	r3, [pc, #48]	; (800bf4c <SendCmd+0x44>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	88fa      	ldrh	r2, [r7, #6]
 800bf1e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800bf22:	4b0a      	ldr	r3, [pc, #40]	; (800bf4c <SendCmd+0x44>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	797a      	ldrb	r2, [r7, #5]
 800bf28:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800bf2a:	4b08      	ldr	r3, [pc, #32]	; (800bf4c <SendCmd+0x44>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	330c      	adds	r3, #12
 800bf30:	797a      	ldrb	r2, [r7, #5]
 800bf32:	6839      	ldr	r1, [r7, #0]
 800bf34:	4618      	mov	r0, r3
 800bf36:	f002 fafb 	bl	800e530 <memcpy>

  hciContext.io.Send(0,0);
 800bf3a:	4b05      	ldr	r3, [pc, #20]	; (800bf50 <SendCmd+0x48>)
 800bf3c:	691b      	ldr	r3, [r3, #16]
 800bf3e:	2100      	movs	r1, #0
 800bf40:	2000      	movs	r0, #0
 800bf42:	4798      	blx	r3

  return;
 800bf44:	bf00      	nop
}
 800bf46:	3708      	adds	r7, #8
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}
 800bf4c:	200002c0 	.word	0x200002c0
 800bf50:	20000458 	.word	0x20000458

0800bf54 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b082      	sub	sp, #8
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800bf5e:	79fb      	ldrb	r3, [r7, #7]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d108      	bne.n	800bf76 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800bf64:	4b0a      	ldr	r3, [pc, #40]	; (800bf90 <NotifyCmdStatus+0x3c>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d00d      	beq.n	800bf88 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800bf6c:	4b08      	ldr	r3, [pc, #32]	; (800bf90 <NotifyCmdStatus+0x3c>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	2000      	movs	r0, #0
 800bf72:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800bf74:	e008      	b.n	800bf88 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800bf76:	4b06      	ldr	r3, [pc, #24]	; (800bf90 <NotifyCmdStatus+0x3c>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d004      	beq.n	800bf88 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800bf7e:	4b04      	ldr	r3, [pc, #16]	; (800bf90 <NotifyCmdStatus+0x3c>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	2001      	movs	r0, #1
 800bf84:	4798      	blx	r3
  return;
 800bf86:	bf00      	nop
 800bf88:	bf00      	nop
}
 800bf8a:	3708      	adds	r7, #8
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}
 800bf90:	20000480 	.word	0x20000480

0800bf94 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b082      	sub	sp, #8
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	7a5b      	ldrb	r3, [r3, #9]
 800bfa0:	2b0f      	cmp	r3, #15
 800bfa2:	d003      	beq.n	800bfac <TlEvtReceived+0x18>
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	7a5b      	ldrb	r3, [r3, #9]
 800bfa8:	2b0e      	cmp	r3, #14
 800bfaa:	d107      	bne.n	800bfbc <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800bfac:	6879      	ldr	r1, [r7, #4]
 800bfae:	4809      	ldr	r0, [pc, #36]	; (800bfd4 <TlEvtReceived+0x40>)
 800bfb0:	f000 fb8e 	bl	800c6d0 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800bfb4:	2000      	movs	r0, #0
 800bfb6:	f000 ff55 	bl	800ce64 <hci_cmd_resp_release>
 800bfba:	e006      	b.n	800bfca <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800bfbc:	6879      	ldr	r1, [r7, #4]
 800bfbe:	4806      	ldr	r0, [pc, #24]	; (800bfd8 <TlEvtReceived+0x44>)
 800bfc0:	f000 fb86 	bl	800c6d0 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800bfc4:	4804      	ldr	r0, [pc, #16]	; (800bfd8 <TlEvtReceived+0x44>)
 800bfc6:	f000 ff41 	bl	800ce4c <hci_notify_asynch_evt>
  }

  return;
 800bfca:	bf00      	nop
}
 800bfcc:	3708      	adds	r7, #8
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}
 800bfd2:	bf00      	nop
 800bfd4:	20000478 	.word	0x20000478
 800bfd8:	200002b8 	.word	0x200002b8

0800bfdc <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b083      	sub	sp, #12
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	4a05      	ldr	r2, [pc, #20]	; (800bffc <hci_register_io_bus+0x20>)
 800bfe8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	4a04      	ldr	r2, [pc, #16]	; (800c000 <hci_register_io_bus+0x24>)
 800bfee:	611a      	str	r2, [r3, #16]

  return;
 800bff0:	bf00      	nop
}
 800bff2:	370c      	adds	r7, #12
 800bff4:	46bd      	mov	sp, r7
 800bff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffa:	4770      	bx	lr
 800bffc:	0800c2dd 	.word	0x0800c2dd
 800c000:	0800c345 	.word	0x0800c345

0800c004 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b082      	sub	sp, #8
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
 800c00c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	685b      	ldr	r3, [r3, #4]
 800c012:	4a08      	ldr	r2, [pc, #32]	; (800c034 <shci_init+0x30>)
 800c014:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800c016:	4a08      	ldr	r2, [pc, #32]	; (800c038 <shci_init+0x34>)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800c01c:	4806      	ldr	r0, [pc, #24]	; (800c038 <shci_init+0x34>)
 800c01e:	f000 f90d 	bl	800c23c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	4618      	mov	r0, r3
 800c028:	f000 f890 	bl	800c14c <TlInit>

  return;
 800c02c:	bf00      	nop
}
 800c02e:	3708      	adds	r7, #8
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}
 800c034:	200004a4 	.word	0x200004a4
 800c038:	20000484 	.word	0x20000484

0800c03c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b084      	sub	sp, #16
 800c040:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800c042:	4820      	ldr	r0, [pc, #128]	; (800c0c4 <shci_user_evt_proc+0x88>)
 800c044:	f000 fb00 	bl	800c648 <LST_is_empty>
 800c048:	4603      	mov	r3, r0
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d128      	bne.n	800c0a0 <shci_user_evt_proc+0x64>
 800c04e:	4b1e      	ldr	r3, [pc, #120]	; (800c0c8 <shci_user_evt_proc+0x8c>)
 800c050:	781b      	ldrb	r3, [r3, #0]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d024      	beq.n	800c0a0 <shci_user_evt_proc+0x64>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800c056:	f107 030c 	add.w	r3, r7, #12
 800c05a:	4619      	mov	r1, r3
 800c05c:	4819      	ldr	r0, [pc, #100]	; (800c0c4 <shci_user_evt_proc+0x88>)
 800c05e:	f000 fb7a 	bl	800c756 <LST_remove_head>

    SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c062:	4b19      	ldr	r3, [pc, #100]	; (800c0c8 <shci_user_evt_proc+0x8c>)
 800c064:	2201      	movs	r2, #1
 800c066:	701a      	strb	r2, [r3, #0]

    if (shciContext.UserEvtRx != NULL)
 800c068:	4b18      	ldr	r3, [pc, #96]	; (800c0cc <shci_user_evt_proc+0x90>)
 800c06a:	69db      	ldr	r3, [r3, #28]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d009      	beq.n	800c084 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	60bb      	str	r3, [r7, #8]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800c074:	4b15      	ldr	r3, [pc, #84]	; (800c0cc <shci_user_evt_proc+0x90>)
 800c076:	69db      	ldr	r3, [r3, #28]
 800c078:	1d3a      	adds	r2, r7, #4
 800c07a:	4610      	mov	r0, r2
 800c07c:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800c07e:	793a      	ldrb	r2, [r7, #4]
 800c080:	4b11      	ldr	r3, [pc, #68]	; (800c0c8 <shci_user_evt_proc+0x8c>)
 800c082:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800c084:	4b10      	ldr	r3, [pc, #64]	; (800c0c8 <shci_user_evt_proc+0x8c>)
 800c086:	781b      	ldrb	r3, [r3, #0]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d004      	beq.n	800c096 <shci_user_evt_proc+0x5a>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	4618      	mov	r0, r3
 800c090:	f000 fa38 	bl	800c504 <TL_MM_EvtDone>
 800c094:	e004      	b.n	800c0a0 <shci_user_evt_proc+0x64>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	4619      	mov	r1, r3
 800c09a:	480a      	ldr	r0, [pc, #40]	; (800c0c4 <shci_user_evt_proc+0x88>)
 800c09c:	f000 faf4 	bl	800c688 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800c0a0:	4808      	ldr	r0, [pc, #32]	; (800c0c4 <shci_user_evt_proc+0x88>)
 800c0a2:	f000 fad1 	bl	800c648 <LST_is_empty>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d107      	bne.n	800c0bc <shci_user_evt_proc+0x80>
 800c0ac:	4b06      	ldr	r3, [pc, #24]	; (800c0c8 <shci_user_evt_proc+0x8c>)
 800c0ae:	781b      	ldrb	r3, [r3, #0]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d003      	beq.n	800c0bc <shci_user_evt_proc+0x80>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800c0b4:	4803      	ldr	r0, [pc, #12]	; (800c0c4 <shci_user_evt_proc+0x88>)
 800c0b6:	f7f4 facf 	bl	8000658 <shci_notify_asynch_evt>
  }


  return;
 800c0ba:	bf00      	nop
 800c0bc:	bf00      	nop
}
 800c0be:	3710      	adds	r7, #16
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}
 800c0c4:	200002c8 	.word	0x200002c8
 800c0c8:	200002d8 	.word	0x200002d8
 800c0cc:	20000484 	.word	0x20000484

0800c0d0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b084      	sub	sp, #16
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	60ba      	str	r2, [r7, #8]
 800c0d8:	607b      	str	r3, [r7, #4]
 800c0da:	4603      	mov	r3, r0
 800c0dc:	81fb      	strh	r3, [r7, #14]
 800c0de:	460b      	mov	r3, r1
 800c0e0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800c0e2:	2000      	movs	r0, #0
 800c0e4:	f000 f864 	bl	800c1b0 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800c0e8:	4b16      	ldr	r3, [pc, #88]	; (800c144 <shci_send+0x74>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	89fa      	ldrh	r2, [r7, #14]
 800c0ee:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800c0f2:	4b14      	ldr	r3, [pc, #80]	; (800c144 <shci_send+0x74>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	7b7a      	ldrb	r2, [r7, #13]
 800c0f8:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800c0fa:	4b12      	ldr	r3, [pc, #72]	; (800c144 <shci_send+0x74>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	330c      	adds	r3, #12
 800c100:	7b7a      	ldrb	r2, [r7, #13]
 800c102:	68b9      	ldr	r1, [r7, #8]
 800c104:	4618      	mov	r0, r3
 800c106:	f002 fa13 	bl	800e530 <memcpy>

  shciContext.io.Send(0,0);
 800c10a:	4b0f      	ldr	r3, [pc, #60]	; (800c148 <shci_send+0x78>)
 800c10c:	691b      	ldr	r3, [r3, #16]
 800c10e:	2100      	movs	r1, #0
 800c110:	2000      	movs	r0, #0
 800c112:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800c114:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800c118:	f7f4 fab5 	bl	8000686 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f103 0008 	add.w	r0, r3, #8
 800c122:	4b08      	ldr	r3, [pc, #32]	; (800c144 <shci_send+0x74>)
 800c124:	6819      	ldr	r1, [r3, #0]
 800c126:	4b07      	ldr	r3, [pc, #28]	; (800c144 <shci_send+0x74>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	789b      	ldrb	r3, [r3, #2]
 800c12c:	3303      	adds	r3, #3
 800c12e:	461a      	mov	r2, r3
 800c130:	f002 f9fe 	bl	800e530 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c134:	2001      	movs	r0, #1
 800c136:	f000 f83b 	bl	800c1b0 <Cmd_SetStatus>

  return;
 800c13a:	bf00      	nop
}
 800c13c:	3710      	adds	r7, #16
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}
 800c142:	bf00      	nop
 800c144:	200002d4 	.word	0x200002d4
 800c148:	20000484 	.word	0x20000484

0800c14c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b086      	sub	sp, #24
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800c154:	4a10      	ldr	r2, [pc, #64]	; (800c198 <TlInit+0x4c>)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800c15a:	4810      	ldr	r0, [pc, #64]	; (800c19c <TlInit+0x50>)
 800c15c:	f000 fa64 	bl	800c628 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c160:	2001      	movs	r0, #1
 800c162:	f000 f825 	bl	800c1b0 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c166:	4b0e      	ldr	r3, [pc, #56]	; (800c1a0 <TlInit+0x54>)
 800c168:	2201      	movs	r2, #1
 800c16a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800c16c:	4b0d      	ldr	r3, [pc, #52]	; (800c1a4 <TlInit+0x58>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d00c      	beq.n	800c18e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800c178:	4b0b      	ldr	r3, [pc, #44]	; (800c1a8 <TlInit+0x5c>)
 800c17a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800c17c:	4b0b      	ldr	r3, [pc, #44]	; (800c1ac <TlInit+0x60>)
 800c17e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800c180:	4b08      	ldr	r3, [pc, #32]	; (800c1a4 <TlInit+0x58>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f107 020c 	add.w	r2, r7, #12
 800c188:	4610      	mov	r0, r2
 800c18a:	4798      	blx	r3
  }

  return;
 800c18c:	bf00      	nop
 800c18e:	bf00      	nop
}
 800c190:	3718      	adds	r7, #24
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	200002d4 	.word	0x200002d4
 800c19c:	200002c8 	.word	0x200002c8
 800c1a0:	200002d8 	.word	0x200002d8
 800c1a4:	20000484 	.word	0x20000484
 800c1a8:	0800c201 	.word	0x0800c201
 800c1ac:	0800c219 	.word	0x0800c219

0800c1b0 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b082      	sub	sp, #8
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800c1ba:	79fb      	ldrb	r3, [r7, #7]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d10b      	bne.n	800c1d8 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800c1c0:	4b0d      	ldr	r3, [pc, #52]	; (800c1f8 <Cmd_SetStatus+0x48>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d003      	beq.n	800c1d0 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800c1c8:	4b0b      	ldr	r3, [pc, #44]	; (800c1f8 <Cmd_SetStatus+0x48>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	2000      	movs	r0, #0
 800c1ce:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800c1d0:	4b0a      	ldr	r3, [pc, #40]	; (800c1fc <Cmd_SetStatus+0x4c>)
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800c1d6:	e00b      	b.n	800c1f0 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800c1d8:	4b08      	ldr	r3, [pc, #32]	; (800c1fc <Cmd_SetStatus+0x4c>)
 800c1da:	2201      	movs	r2, #1
 800c1dc:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800c1de:	4b06      	ldr	r3, [pc, #24]	; (800c1f8 <Cmd_SetStatus+0x48>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d004      	beq.n	800c1f0 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800c1e6:	4b04      	ldr	r3, [pc, #16]	; (800c1f8 <Cmd_SetStatus+0x48>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	2001      	movs	r0, #1
 800c1ec:	4798      	blx	r3
  return;
 800c1ee:	bf00      	nop
 800c1f0:	bf00      	nop
}
 800c1f2:	3708      	adds	r7, #8
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}
 800c1f8:	200004a4 	.word	0x200004a4
 800c1fc:	200002d0 	.word	0x200002d0

0800c200 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b082      	sub	sp, #8
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800c208:	2000      	movs	r0, #0
 800c20a:	f7f4 fa31 	bl	8000670 <shci_cmd_resp_release>

  return;
 800c20e:	bf00      	nop
}
 800c210:	3708      	adds	r7, #8
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
	...

0800c218 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b082      	sub	sp, #8
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800c220:	6879      	ldr	r1, [r7, #4]
 800c222:	4805      	ldr	r0, [pc, #20]	; (800c238 <TlUserEvtReceived+0x20>)
 800c224:	f000 fa54 	bl	800c6d0 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800c228:	4803      	ldr	r0, [pc, #12]	; (800c238 <TlUserEvtReceived+0x20>)
 800c22a:	f7f4 fa15 	bl	8000658 <shci_notify_asynch_evt>

  return;
 800c22e:	bf00      	nop
}
 800c230:	3708      	adds	r7, #8
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}
 800c236:	bf00      	nop
 800c238:	200002c8 	.word	0x200002c8

0800c23c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800c23c:	b480      	push	{r7}
 800c23e:	b083      	sub	sp, #12
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	4a05      	ldr	r2, [pc, #20]	; (800c25c <shci_register_io_bus+0x20>)
 800c248:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	4a04      	ldr	r2, [pc, #16]	; (800c260 <shci_register_io_bus+0x24>)
 800c24e:	611a      	str	r2, [r3, #16]

  return;
 800c250:	bf00      	nop
}
 800c252:	370c      	adds	r7, #12
 800c254:	46bd      	mov	sp, r7
 800c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25a:	4770      	bx	lr
 800c25c:	0800c3b9 	.word	0x0800c3b9
 800c260:	0800c40d 	.word	0x0800c40d

0800c264 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800c264:	b580      	push	{r7, lr}
 800c266:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800c268:	f001 fb48 	bl	800d8fc <HW_IPCC_Enable>

  return;
 800c26c:	bf00      	nop
}
 800c26e:	bd80      	pop	{r7, pc}

0800c270 <TL_Init>:


void TL_Init( void )
{
 800c270:	b580      	push	{r7, lr}
 800c272:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800c274:	4b0f      	ldr	r3, [pc, #60]	; (800c2b4 <TL_Init+0x44>)
 800c276:	4a10      	ldr	r2, [pc, #64]	; (800c2b8 <TL_Init+0x48>)
 800c278:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800c27a:	4b0e      	ldr	r3, [pc, #56]	; (800c2b4 <TL_Init+0x44>)
 800c27c:	4a0f      	ldr	r2, [pc, #60]	; (800c2bc <TL_Init+0x4c>)
 800c27e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800c280:	4b0c      	ldr	r3, [pc, #48]	; (800c2b4 <TL_Init+0x44>)
 800c282:	4a0f      	ldr	r2, [pc, #60]	; (800c2c0 <TL_Init+0x50>)
 800c284:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800c286:	4b0b      	ldr	r3, [pc, #44]	; (800c2b4 <TL_Init+0x44>)
 800c288:	4a0e      	ldr	r2, [pc, #56]	; (800c2c4 <TL_Init+0x54>)
 800c28a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_sys_table = &TL_SysTable;
 800c28c:	4b09      	ldr	r3, [pc, #36]	; (800c2b4 <TL_Init+0x44>)
 800c28e:	4a0e      	ldr	r2, [pc, #56]	; (800c2c8 <TL_Init+0x58>)
 800c290:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800c292:	4b08      	ldr	r3, [pc, #32]	; (800c2b4 <TL_Init+0x44>)
 800c294:	4a0d      	ldr	r2, [pc, #52]	; (800c2cc <TL_Init+0x5c>)
 800c296:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800c298:	4b06      	ldr	r3, [pc, #24]	; (800c2b4 <TL_Init+0x44>)
 800c29a:	4a0d      	ldr	r2, [pc, #52]	; (800c2d0 <TL_Init+0x60>)
 800c29c:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800c29e:	4b05      	ldr	r3, [pc, #20]	; (800c2b4 <TL_Init+0x44>)
 800c2a0:	4a0c      	ldr	r2, [pc, #48]	; (800c2d4 <TL_Init+0x64>)
 800c2a2:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800c2a4:	4b03      	ldr	r3, [pc, #12]	; (800c2b4 <TL_Init+0x44>)
 800c2a6:	4a0c      	ldr	r2, [pc, #48]	; (800c2d8 <TL_Init+0x68>)
 800c2a8:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800c2aa:	f001 fb2f 	bl	800d90c <HW_IPCC_Init>

  return;
 800c2ae:	bf00      	nop
}
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop
 800c2b4:	20030000 	.word	0x20030000
 800c2b8:	20030024 	.word	0x20030024
 800c2bc:	20030044 	.word	0x20030044
 800c2c0:	20030054 	.word	0x20030054
 800c2c4:	20030060 	.word	0x20030060
 800c2c8:	20030068 	.word	0x20030068
 800c2cc:	20030070 	.word	0x20030070
 800c2d0:	2003008c 	.word	0x2003008c
 800c2d4:	20030090 	.word	0x20030090
 800c2d8:	2003009c 	.word	0x2003009c

0800c2dc <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b084      	sub	sp, #16
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800c2e8:	4811      	ldr	r0, [pc, #68]	; (800c330 <TL_BLE_Init+0x54>)
 800c2ea:	f000 f99d 	bl	800c628 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800c2ee:	4b11      	ldr	r3, [pc, #68]	; (800c334 <TL_BLE_Init+0x58>)
 800c2f0:	685b      	ldr	r3, [r3, #4]
 800c2f2:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	689a      	ldr	r2, [r3, #8]
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	68da      	ldr	r2, [r3, #12]
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	4a0c      	ldr	r2, [pc, #48]	; (800c338 <TL_BLE_Init+0x5c>)
 800c308:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	4a08      	ldr	r2, [pc, #32]	; (800c330 <TL_BLE_Init+0x54>)
 800c30e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800c310:	f001 fb12 	bl	800d938 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	4a08      	ldr	r2, [pc, #32]	; (800c33c <TL_BLE_Init+0x60>)
 800c31a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	685b      	ldr	r3, [r3, #4]
 800c320:	4a07      	ldr	r2, [pc, #28]	; (800c340 <TL_BLE_Init+0x64>)
 800c322:	6013      	str	r3, [r2, #0]

  return 0;
 800c324:	2300      	movs	r3, #0
}
 800c326:	4618      	mov	r0, r3
 800c328:	3710      	adds	r7, #16
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}
 800c32e:	bf00      	nop
 800c330:	20030a34 	.word	0x20030a34
 800c334:	20030000 	.word	0x20030000
 800c338:	20030a24 	.word	0x20030a24
 800c33c:	200004b0 	.word	0x200004b0
 800c340:	200004b4 	.word	0x200004b4

0800c344 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b082      	sub	sp, #8
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
 800c34c:	460b      	mov	r3, r1
 800c34e:	807b      	strh	r3, [r7, #2]
  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800c350:	4b05      	ldr	r3, [pc, #20]	; (800c368 <TL_BLE_SendCmd+0x24>)
 800c352:	685b      	ldr	r3, [r3, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	2201      	movs	r2, #1
 800c358:	721a      	strb	r2, [r3, #8]

  HW_IPCC_BLE_SendCmd();
 800c35a:	f001 faf7 	bl	800d94c <HW_IPCC_BLE_SendCmd>

  return 0;
 800c35e:	2300      	movs	r3, #0
}
 800c360:	4618      	mov	r0, r3
 800c362:	3708      	adds	r7, #8
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}
 800c368:	20030000 	.word	0x20030000

0800c36c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b082      	sub	sp, #8
 800c370:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800c372:	e009      	b.n	800c388 <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800c374:	1d3b      	adds	r3, r7, #4
 800c376:	4619      	mov	r1, r3
 800c378:	4808      	ldr	r0, [pc, #32]	; (800c39c <HW_IPCC_BLE_RxEvtNot+0x30>)
 800c37a:	f000 f9ec 	bl	800c756 <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 800c37e:	4b08      	ldr	r3, [pc, #32]	; (800c3a0 <HW_IPCC_BLE_RxEvtNot+0x34>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	687a      	ldr	r2, [r7, #4]
 800c384:	4610      	mov	r0, r2
 800c386:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800c388:	4804      	ldr	r0, [pc, #16]	; (800c39c <HW_IPCC_BLE_RxEvtNot+0x30>)
 800c38a:	f000 f95d 	bl	800c648 <LST_is_empty>
 800c38e:	4603      	mov	r3, r0
 800c390:	2b00      	cmp	r3, #0
 800c392:	d0ef      	beq.n	800c374 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800c394:	bf00      	nop
}
 800c396:	3708      	adds	r7, #8
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}
 800c39c:	20030a34 	.word	0x20030a34
 800c3a0:	200004b0 	.word	0x200004b0

0800c3a4 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800c3a8:	4b02      	ldr	r3, [pc, #8]	; (800c3b4 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	4798      	blx	r3

  return;
 800c3ae:	bf00      	nop
}
 800c3b0:	bd80      	pop	{r7, pc}
 800c3b2:	bf00      	nop
 800c3b4:	200004b4 	.word	0x200004b4

0800c3b8 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b084      	sub	sp, #16
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800c3c4:	480d      	ldr	r0, [pc, #52]	; (800c3fc <TL_SYS_Init+0x44>)
 800c3c6:	f000 f92f 	bl	800c628 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800c3ca:	4b0d      	ldr	r3, [pc, #52]	; (800c400 <TL_SYS_Init+0x48>)
 800c3cc:	68db      	ldr	r3, [r3, #12]
 800c3ce:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	689a      	ldr	r2, [r3, #8]
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	4a08      	ldr	r2, [pc, #32]	; (800c3fc <TL_SYS_Init+0x44>)
 800c3dc:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800c3de:	f001 fad7 	bl	800d990 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	4a07      	ldr	r2, [pc, #28]	; (800c404 <TL_SYS_Init+0x4c>)
 800c3e8:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	685b      	ldr	r3, [r3, #4]
 800c3ee:	4a06      	ldr	r2, [pc, #24]	; (800c408 <TL_SYS_Init+0x50>)
 800c3f0:	6013      	str	r3, [r2, #0]

  return 0;
 800c3f2:	2300      	movs	r3, #0
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	3710      	adds	r7, #16
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}
 800c3fc:	20030a3c 	.word	0x20030a3c
 800c400:	20030000 	.word	0x20030000
 800c404:	200004b8 	.word	0x200004b8
 800c408:	200004bc 	.word	0x200004bc

0800c40c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b082      	sub	sp, #8
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
 800c414:	460b      	mov	r3, r1
 800c416:	807b      	strh	r3, [r7, #2]
  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800c418:	4b05      	ldr	r3, [pc, #20]	; (800c430 <TL_SYS_SendCmd+0x24>)
 800c41a:	68db      	ldr	r3, [r3, #12]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	2210      	movs	r2, #16
 800c420:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 800c422:	f001 fabf 	bl	800d9a4 <HW_IPCC_SYS_SendCmd>

  return 0;
 800c426:	2300      	movs	r3, #0
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3708      	adds	r7, #8
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}
 800c430:	20030000 	.word	0x20030000

0800c434 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c438:	4b04      	ldr	r3, [pc, #16]	; (800c44c <HW_IPCC_SYS_CmdEvtNot+0x18>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	4a04      	ldr	r2, [pc, #16]	; (800c450 <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 800c43e:	68d2      	ldr	r2, [r2, #12]
 800c440:	6812      	ldr	r2, [r2, #0]
 800c442:	4610      	mov	r0, r2
 800c444:	4798      	blx	r3

  return;
 800c446:	bf00      	nop
}
 800c448:	bd80      	pop	{r7, pc}
 800c44a:	bf00      	nop
 800c44c:	200004b8 	.word	0x200004b8
 800c450:	20030000 	.word	0x20030000

0800c454 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b082      	sub	sp, #8
 800c458:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c45a:	e009      	b.n	800c470 <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800c45c:	1d3b      	adds	r3, r7, #4
 800c45e:	4619      	mov	r1, r3
 800c460:	4808      	ldr	r0, [pc, #32]	; (800c484 <HW_IPCC_SYS_EvtNot+0x30>)
 800c462:	f000 f978 	bl	800c756 <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 800c466:	4b08      	ldr	r3, [pc, #32]	; (800c488 <HW_IPCC_SYS_EvtNot+0x34>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	687a      	ldr	r2, [r7, #4]
 800c46c:	4610      	mov	r0, r2
 800c46e:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c470:	4804      	ldr	r0, [pc, #16]	; (800c484 <HW_IPCC_SYS_EvtNot+0x30>)
 800c472:	f000 f8e9 	bl	800c648 <LST_is_empty>
 800c476:	4603      	mov	r3, r0
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d0ef      	beq.n	800c45c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800c47c:	bf00      	nop
}
 800c47e:	3708      	adds	r7, #8
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}
 800c484:	20030a3c 	.word	0x20030a3c
 800c488:	200004bc 	.word	0x200004bc

0800c48c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b082      	sub	sp, #8
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800c494:	4817      	ldr	r0, [pc, #92]	; (800c4f4 <TL_MM_Init+0x68>)
 800c496:	f000 f8c7 	bl	800c628 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800c49a:	4817      	ldr	r0, [pc, #92]	; (800c4f8 <TL_MM_Init+0x6c>)
 800c49c:	f000 f8c4 	bl	800c628 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800c4a0:	4b16      	ldr	r3, [pc, #88]	; (800c4fc <TL_MM_Init+0x70>)
 800c4a2:	691b      	ldr	r3, [r3, #16]
 800c4a4:	4a16      	ldr	r2, [pc, #88]	; (800c500 <TL_MM_Init+0x74>)
 800c4a6:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800c4a8:	4b15      	ldr	r3, [pc, #84]	; (800c500 <TL_MM_Init+0x74>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	687a      	ldr	r2, [r7, #4]
 800c4ae:	6892      	ldr	r2, [r2, #8]
 800c4b0:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800c4b2:	4b13      	ldr	r3, [pc, #76]	; (800c500 <TL_MM_Init+0x74>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	687a      	ldr	r2, [r7, #4]
 800c4b8:	68d2      	ldr	r2, [r2, #12]
 800c4ba:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800c4bc:	4b10      	ldr	r3, [pc, #64]	; (800c500 <TL_MM_Init+0x74>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	4a0c      	ldr	r2, [pc, #48]	; (800c4f4 <TL_MM_Init+0x68>)
 800c4c2:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800c4c4:	4b0e      	ldr	r3, [pc, #56]	; (800c500 <TL_MM_Init+0x74>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	687a      	ldr	r2, [r7, #4]
 800c4ca:	6812      	ldr	r2, [r2, #0]
 800c4cc:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800c4ce:	4b0c      	ldr	r3, [pc, #48]	; (800c500 <TL_MM_Init+0x74>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	687a      	ldr	r2, [r7, #4]
 800c4d4:	6852      	ldr	r2, [r2, #4]
 800c4d6:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800c4d8:	4b09      	ldr	r3, [pc, #36]	; (800c500 <TL_MM_Init+0x74>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	687a      	ldr	r2, [r7, #4]
 800c4de:	6912      	ldr	r2, [r2, #16]
 800c4e0:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800c4e2:	4b07      	ldr	r3, [pc, #28]	; (800c500 <TL_MM_Init+0x74>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	687a      	ldr	r2, [r7, #4]
 800c4e8:	6952      	ldr	r2, [r2, #20]
 800c4ea:	619a      	str	r2, [r3, #24]

  return;
 800c4ec:	bf00      	nop
}
 800c4ee:	3708      	adds	r7, #8
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}
 800c4f4:	200300a8 	.word	0x200300a8
 800c4f8:	200004a8 	.word	0x200004a8
 800c4fc:	20030000 	.word	0x20030000
 800c500:	200004c0 	.word	0x200004c0

0800c504 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b082      	sub	sp, #8
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800c50c:	6879      	ldr	r1, [r7, #4]
 800c50e:	4805      	ldr	r0, [pc, #20]	; (800c524 <TL_MM_EvtDone+0x20>)
 800c510:	f000 f8de 	bl	800c6d0 <LST_insert_tail>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800c514:	4804      	ldr	r0, [pc, #16]	; (800c528 <TL_MM_EvtDone+0x24>)
 800c516:	f001 fa6b 	bl	800d9f0 <HW_IPCC_MM_SendFreeBuf>

  return;
 800c51a:	bf00      	nop
}
 800c51c:	3708      	adds	r7, #8
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}
 800c522:	bf00      	nop
 800c524:	200004a8 	.word	0x200004a8
 800c528:	0800c52d 	.word	0x0800c52d

0800c52c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b082      	sub	sp, #8
 800c530:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c532:	e00c      	b.n	800c54e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800c534:	1d3b      	adds	r3, r7, #4
 800c536:	4619      	mov	r1, r3
 800c538:	480a      	ldr	r0, [pc, #40]	; (800c564 <SendFreeBuf+0x38>)
 800c53a:	f000 f90c 	bl	800c756 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800c53e:	4b0a      	ldr	r3, [pc, #40]	; (800c568 <SendFreeBuf+0x3c>)
 800c540:	691b      	ldr	r3, [r3, #16]
 800c542:	691b      	ldr	r3, [r3, #16]
 800c544:	687a      	ldr	r2, [r7, #4]
 800c546:	4611      	mov	r1, r2
 800c548:	4618      	mov	r0, r3
 800c54a:	f000 f8c1 	bl	800c6d0 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c54e:	4805      	ldr	r0, [pc, #20]	; (800c564 <SendFreeBuf+0x38>)
 800c550:	f000 f87a 	bl	800c648 <LST_is_empty>
 800c554:	4603      	mov	r3, r0
 800c556:	2b00      	cmp	r3, #0
 800c558:	d0ec      	beq.n	800c534 <SendFreeBuf+0x8>
  }

  return;
 800c55a:	bf00      	nop
}
 800c55c:	3708      	adds	r7, #8
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}
 800c562:	bf00      	nop
 800c564:	200004a8 	.word	0x200004a8
 800c568:	20030000 	.word	0x20030000

0800c56c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800c570:	4805      	ldr	r0, [pc, #20]	; (800c588 <TL_TRACES_Init+0x1c>)
 800c572:	f000 f859 	bl	800c628 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800c576:	4b05      	ldr	r3, [pc, #20]	; (800c58c <TL_TRACES_Init+0x20>)
 800c578:	695b      	ldr	r3, [r3, #20]
 800c57a:	4a03      	ldr	r2, [pc, #12]	; (800c588 <TL_TRACES_Init+0x1c>)
 800c57c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800c57e:	f001 fa6d 	bl	800da5c <HW_IPCC_TRACES_Init>

  return;
 800c582:	bf00      	nop
}
 800c584:	bd80      	pop	{r7, pc}
 800c586:	bf00      	nop
 800c588:	200300b0 	.word	0x200300b0
 800c58c:	20030000 	.word	0x20030000

0800c590 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b082      	sub	sp, #8
 800c594:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c596:	e008      	b.n	800c5aa <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800c598:	1d3b      	adds	r3, r7, #4
 800c59a:	4619      	mov	r1, r3
 800c59c:	4808      	ldr	r0, [pc, #32]	; (800c5c0 <HW_IPCC_TRACES_EvtNot+0x30>)
 800c59e:	f000 f8da 	bl	800c756 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	f000 f80d 	bl	800c5c4 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c5aa:	4805      	ldr	r0, [pc, #20]	; (800c5c0 <HW_IPCC_TRACES_EvtNot+0x30>)
 800c5ac:	f000 f84c 	bl	800c648 <LST_is_empty>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d0f0      	beq.n	800c598 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800c5b6:	bf00      	nop
}
 800c5b8:	3708      	adds	r7, #8
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}
 800c5be:	bf00      	nop
 800c5c0:	200300b0 	.word	0x200300b0

0800c5c4 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt ){};
 800c5c4:	b480      	push	{r7}
 800c5c6:	b083      	sub	sp, #12
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
 800c5cc:	bf00      	nop
 800c5ce:	370c      	adds	r7, #12
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d6:	4770      	bx	lr

0800c5d8 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b085      	sub	sp, #20
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	4603      	mov	r3, r0
 800c5e0:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800c5e2:	4b0f      	ldr	r3, [pc, #60]	; (800c620 <OTP_Read+0x48>)
 800c5e4:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800c5e6:	e002      	b.n	800c5ee <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	3b08      	subs	r3, #8
 800c5ec:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	3307      	adds	r3, #7
 800c5f2:	781b      	ldrb	r3, [r3, #0]
 800c5f4:	79fa      	ldrb	r2, [r7, #7]
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d003      	beq.n	800c602 <OTP_Read+0x2a>
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	4a09      	ldr	r2, [pc, #36]	; (800c624 <OTP_Read+0x4c>)
 800c5fe:	4293      	cmp	r3, r2
 800c600:	d1f2      	bne.n	800c5e8 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	3307      	adds	r3, #7
 800c606:	781b      	ldrb	r3, [r3, #0]
 800c608:	79fa      	ldrb	r2, [r7, #7]
 800c60a:	429a      	cmp	r2, r3
 800c60c:	d001      	beq.n	800c612 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800c60e:	2300      	movs	r3, #0
 800c610:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800c612:	68fb      	ldr	r3, [r7, #12]
}
 800c614:	4618      	mov	r0, r3
 800c616:	3714      	adds	r7, #20
 800c618:	46bd      	mov	sp, r7
 800c61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61e:	4770      	bx	lr
 800c620:	1fff73f8 	.word	0x1fff73f8
 800c624:	1fff7000 	.word	0x1fff7000

0800c628 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800c628:	b480      	push	{r7}
 800c62a:	b083      	sub	sp, #12
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	687a      	ldr	r2, [r7, #4]
 800c634:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	687a      	ldr	r2, [r7, #4]
 800c63a:	605a      	str	r2, [r3, #4]
}
 800c63c:	bf00      	nop
 800c63e:	370c      	adds	r7, #12
 800c640:	46bd      	mov	sp, r7
 800c642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c646:	4770      	bx	lr

0800c648 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800c648:	b480      	push	{r7}
 800c64a:	b087      	sub	sp, #28
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c650:	f3ef 8310 	mrs	r3, PRIMASK
 800c654:	60fb      	str	r3, [r7, #12]
  return(result);
 800c656:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c658:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c65a:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	687a      	ldr	r2, [r7, #4]
 800c662:	429a      	cmp	r2, r3
 800c664:	d102      	bne.n	800c66c <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800c666:	2301      	movs	r3, #1
 800c668:	75fb      	strb	r3, [r7, #23]
 800c66a:	e001      	b.n	800c670 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800c66c:	2300      	movs	r3, #0
 800c66e:	75fb      	strb	r3, [r7, #23]
 800c670:	693b      	ldr	r3, [r7, #16]
 800c672:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800c67a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	371c      	adds	r7, #28
 800c680:	46bd      	mov	sp, r7
 800c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c686:	4770      	bx	lr

0800c688 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800c688:	b480      	push	{r7}
 800c68a:	b087      	sub	sp, #28
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
 800c690:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c692:	f3ef 8310 	mrs	r3, PRIMASK
 800c696:	60fb      	str	r3, [r7, #12]
  return(result);
 800c698:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c69a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c69c:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681a      	ldr	r2, [r3, #0]
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	687a      	ldr	r2, [r7, #4]
 800c6aa:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	683a      	ldr	r2, [r7, #0]
 800c6b0:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	683a      	ldr	r2, [r7, #0]
 800c6b8:	605a      	str	r2, [r3, #4]
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c6c4:	bf00      	nop
 800c6c6:	371c      	adds	r7, #28
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ce:	4770      	bx	lr

0800c6d0 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800c6d0:	b480      	push	{r7}
 800c6d2:	b087      	sub	sp, #28
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
 800c6d8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c6da:	f3ef 8310 	mrs	r3, PRIMASK
 800c6de:	60fb      	str	r3, [r7, #12]
  return(result);
 800c6e0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c6e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c6e4:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	687a      	ldr	r2, [r7, #4]
 800c6ea:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	685a      	ldr	r2, [r3, #4]
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	683a      	ldr	r2, [r7, #0]
 800c6f8:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	685b      	ldr	r3, [r3, #4]
 800c6fe:	683a      	ldr	r2, [r7, #0]
 800c700:	601a      	str	r2, [r3, #0]
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c706:	693b      	ldr	r3, [r7, #16]
 800c708:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c70c:	bf00      	nop
 800c70e:	371c      	adds	r7, #28
 800c710:	46bd      	mov	sp, r7
 800c712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c716:	4770      	bx	lr

0800c718 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800c718:	b480      	push	{r7}
 800c71a:	b087      	sub	sp, #28
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c720:	f3ef 8310 	mrs	r3, PRIMASK
 800c724:	60fb      	str	r3, [r7, #12]
  return(result);
 800c726:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c728:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c72a:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	685b      	ldr	r3, [r3, #4]
 800c730:	687a      	ldr	r2, [r7, #4]
 800c732:	6812      	ldr	r2, [r2, #0]
 800c734:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	687a      	ldr	r2, [r7, #4]
 800c73c:	6852      	ldr	r2, [r2, #4]
 800c73e:	605a      	str	r2, [r3, #4]
 800c740:	697b      	ldr	r3, [r7, #20]
 800c742:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c74a:	bf00      	nop
 800c74c:	371c      	adds	r7, #28
 800c74e:	46bd      	mov	sp, r7
 800c750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c754:	4770      	bx	lr

0800c756 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800c756:	b580      	push	{r7, lr}
 800c758:	b086      	sub	sp, #24
 800c75a:	af00      	add	r7, sp, #0
 800c75c:	6078      	str	r0, [r7, #4]
 800c75e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c760:	f3ef 8310 	mrs	r3, PRIMASK
 800c764:	60fb      	str	r3, [r7, #12]
  return(result);
 800c766:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c768:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c76a:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681a      	ldr	r2, [r3, #0]
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	4618      	mov	r0, r3
 800c77a:	f7ff ffcd 	bl	800c718 <LST_remove_node>
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c782:	693b      	ldr	r3, [r7, #16]
 800c784:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c788:	bf00      	nop
 800c78a:	3718      	adds	r7, #24
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}

0800c790 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800c790:	b480      	push	{r7}
 800c792:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800c794:	4b03      	ldr	r3, [pc, #12]	; (800c7a4 <LL_FLASH_GetUDN+0x14>)
 800c796:	681b      	ldr	r3, [r3, #0]
}
 800c798:	4618      	mov	r0, r3
 800c79a:	46bd      	mov	sp, r7
 800c79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a0:	4770      	bx	lr
 800c7a2:	bf00      	nop
 800c7a4:	1fff7580 	.word	0x1fff7580

0800c7a8 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800c7a8:	b480      	push	{r7}
 800c7aa:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800c7ac:	4b03      	ldr	r3, [pc, #12]	; (800c7bc <LL_FLASH_GetDeviceID+0x14>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	b2db      	uxtb	r3, r3
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ba:	4770      	bx	lr
 800c7bc:	1fff7584 	.word	0x1fff7584

0800c7c0 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800c7c4:	4b03      	ldr	r3, [pc, #12]	; (800c7d4 <LL_FLASH_GetSTCompanyID+0x14>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	0a1b      	lsrs	r3, r3, #8
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d2:	4770      	bx	lr
 800c7d4:	1fff7584 	.word	0x1fff7584

0800c7d8 <APP_BLE_Init>:

/* USER CODE END 0 */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 800c7d8:	b5b0      	push	{r4, r5, r7, lr}
 800c7da:	b08c      	sub	sp, #48	; 0x30
 800c7dc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */
	//messege_ble(0);
/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800c7de:	4b1f      	ldr	r3, [pc, #124]	; (800c85c <APP_BLE_Init+0x84>)
 800c7e0:	463c      	mov	r4, r7
 800c7e2:	461d      	mov	r5, r3
 800c7e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c7e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c7e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c7ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c7ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c7f0:	c407      	stmia	r4!, {r0, r1, r2}
 800c7f2:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 800c7f4:	f000 f9b4 	bl	800cb60 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800c7f8:	2101      	movs	r1, #1
 800c7fa:	2002      	movs	r0, #2
 800c7fc:	f7f5 f960 	bl	8001ac0 <UTIL_LPM_SetOffMode>

/**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800c800:	4a17      	ldr	r2, [pc, #92]	; (800c860 <APP_BLE_Init+0x88>)
 800c802:	2100      	movs	r1, #0
 800c804:	2020      	movs	r0, #32
 800c806:	f7f5 fac3 	bl	8001d90 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 800c80a:	463b      	mov	r3, r7
 800c80c:	4618      	mov	r0, r3
 800c80e:	f7ff fa4f 	bl	800bcb0 <SHCI_C2_BLE_Init>

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800c812:	f000 f9bb 	bl	800cb8c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800c816:	f7ff f98f 	bl	800bb38 <SVCCTL_Init>

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_START_SCAN_ID, UTIL_SEQ_RFU, Scan_Request);
 800c81a:	4a12      	ldr	r2, [pc, #72]	; (800c864 <APP_BLE_Init+0x8c>)
 800c81c:	2100      	movs	r1, #0
 800c81e:	2001      	movs	r0, #1
 800c820:	f7f5 fab6 	bl	8001d90 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_DEV_1_ID, UTIL_SEQ_RFU, Connect_Request);
 800c824:	4a10      	ldr	r2, [pc, #64]	; (800c868 <APP_BLE_Init+0x90>)
 800c826:	2100      	movs	r1, #0
 800c828:	2002      	movs	r0, #2
 800c82a:	f7f5 fab1 	bl	8001d90 <UTIL_SEQ_RegTask>

  /**
   * Initialization of the BLE App Context
   */

      BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c82e:	4b0f      	ldr	r3, [pc, #60]	; (800c86c <APP_BLE_Init+0x94>)
 800c830:	2200      	movs	r2, #0
 800c832:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    /*Radio mask Activity*/
#if (OOB_DEMO != 0)  
  aci_hal_set_radio_activity_mask(0x0020);
 800c836:	2020      	movs	r0, #32
 800c838:	f7fe ffc4 	bl	800b7c4 <aci_hal_set_radio_activity_mask>
#endif 
  /**
   * Initialize P2P Client Application
   */
  P2PC_APP_Init();
 800c83c:	f000 fb60 	bl	800cf00 <P2PC_APP_Init>

#if (OOB_DEMO != 0)
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800c840:	4b0b      	ldr	r3, [pc, #44]	; (800c870 <APP_BLE_Init+0x98>)
 800c842:	2200      	movs	r2, #0
 800c844:	490b      	ldr	r1, [pc, #44]	; (800c874 <APP_BLE_Init+0x9c>)
 800c846:	2000      	movs	r0, #0
 800c848:	f7f4 fcf2 	bl	8001230 <HW_TS_Create>
  /**
   * Start scanning
   */
  UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0);
#endif 
  UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0);
 800c84c:	2100      	movs	r1, #0
 800c84e:	2001      	movs	r0, #1
 800c850:	f7f5 fabe 	bl	8001dd0 <UTIL_SEQ_SetTask>
  
  return;
 800c854:	bf00      	nop
}
 800c856:	3730      	adds	r7, #48	; 0x30
 800c858:	46bd      	mov	sp, r7
 800c85a:	bdb0      	pop	{r4, r5, r7, pc}
 800c85c:	0800efa0 	.word	0x0800efa0
 800c860:	0800bd19 	.word	0x0800bd19
 800c864:	0800cd01 	.word	0x0800cd01
 800c868:	0800cd49 	.word	0x0800cd49
 800c86c:	200002dc 	.word	0x200002dc
 800c870:	0800cdb5 	.word	0x0800cdb5
 800c874:	2000036d 	.word	0x2000036d

0800c878 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 800c878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c87a:	b097      	sub	sp, #92	; 0x5c
 800c87c:	af06      	add	r7, sp, #24
 800c87e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  hci_le_connection_complete_event_rp0 * connection_complete_event;
  evt_blue_aci *blue_evt;
  hci_le_advertising_report_event_rp0 * le_advertising_event;
  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	3301      	adds	r3, #1
 800c884:	63bb      	str	r3, [r7, #56]	; 0x38
  hci_disconnection_complete_event_rp0 *cc = (void *) event_pckt->data;
 800c886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c888:	3302      	adds	r3, #2
 800c88a:	637b      	str	r3, [r7, #52]	; 0x34
  uint8_t result;
  uint8_t event_type, event_data_size;
  int k = 0;
 800c88c:	2300      	movs	r3, #0
 800c88e:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint8_t adtype, adlength;
  uint8_t *adv_report_data;

  switch (event_pckt->evt)
 800c890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	2b3e      	cmp	r3, #62	; 0x3e
 800c896:	f000 809f 	beq.w	800c9d8 <SVCCTL_App_Notification+0x160>
 800c89a:	2bff      	cmp	r3, #255	; 0xff
 800c89c:	d002      	beq.n	800c8a4 <SVCCTL_App_Notification+0x2c>
 800c89e:	2b05      	cmp	r3, #5
 800c8a0:	d07a      	beq.n	800c998 <SVCCTL_App_Notification+0x120>

      default:
        /* USER CODE BEGIN evt_default */

        /* USER CODE END evt_default */
        break;
 800c8a2:	e135      	b.n	800cb10 <SVCCTL_App_Notification+0x298>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800c8a4:	4b9d      	ldr	r3, [pc, #628]	; (800cb1c <SVCCTL_App_Notification+0x2a4>)
 800c8a6:	2201      	movs	r2, #1
 800c8a8:	701a      	strb	r2, [r3, #0]
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800c8aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ac:	3302      	adds	r3, #2
 800c8ae:	633b      	str	r3, [r7, #48]	; 0x30
      switch (blue_evt->ecode)
 800c8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8b2:	881b      	ldrh	r3, [r3, #0]
 800c8b4:	b29b      	uxth	r3, r3
 800c8b6:	f240 4207 	movw	r2, #1031	; 0x407
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	d006      	beq.n	800c8cc <SVCCTL_App_Notification+0x54>
 800c8be:	f640 0202 	movw	r2, #2050	; 0x802
 800c8c2:	4293      	cmp	r3, r2
 800c8c4:	d01c      	beq.n	800c900 <SVCCTL_App_Notification+0x88>
 800c8c6:	2b04      	cmp	r3, #4
 800c8c8:	d062      	beq.n	800c990 <SVCCTL_App_Notification+0x118>
          break;
 800c8ca:	e064      	b.n	800c996 <SVCCTL_App_Notification+0x11e>
          aci_gap_proc_complete_event_rp0 *gap_evt_proc_complete = (void*) blue_evt->data;
 800c8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ce:	3302      	adds	r3, #2
 800c8d0:	627b      	str	r3, [r7, #36]	; 0x24
          if (gap_evt_proc_complete->Procedure_Code == GAP_GENERAL_DISCOVERY_PROC
 800c8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8d4:	781b      	ldrb	r3, [r3, #0]
 800c8d6:	2b02      	cmp	r3, #2
 800c8d8:	d15c      	bne.n	800c994 <SVCCTL_App_Notification+0x11c>
              && gap_evt_proc_complete->Status == 0x00)
 800c8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8dc:	785b      	ldrb	r3, [r3, #1]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d158      	bne.n	800c994 <SVCCTL_App_Notification+0x11c>
            if (BleApplicationContext.DeviceServerFound == 0x01 && BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 800c8e2:	4b8f      	ldr	r3, [pc, #572]	; (800cb20 <SVCCTL_App_Notification+0x2a8>)
 800c8e4:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800c8e8:	2b01      	cmp	r3, #1
 800c8ea:	d153      	bne.n	800c994 <SVCCTL_App_Notification+0x11c>
 800c8ec:	4b8c      	ldr	r3, [pc, #560]	; (800cb20 <SVCCTL_App_Notification+0x2a8>)
 800c8ee:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800c8f2:	2b06      	cmp	r3, #6
 800c8f4:	d04e      	beq.n	800c994 <SVCCTL_App_Notification+0x11c>
              UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_1_ID, CFG_SCH_PRIO_0);
 800c8f6:	2100      	movs	r1, #0
 800c8f8:	2002      	movs	r0, #2
 800c8fa:	f7f5 fa69 	bl	8001dd0 <UTIL_SEQ_SetTask>
        break;
 800c8fe:	e049      	b.n	800c994 <SVCCTL_App_Notification+0x11c>
          aci_l2cap_connection_update_req_event_rp0 *pr = (aci_l2cap_connection_update_req_event_rp0 *) blue_evt->data;
 800c900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c902:	3302      	adds	r3, #2
 800c904:	62fb      	str	r3, [r7, #44]	; 0x2c
          aci_hal_set_radio_activity_mask(0x0000);
 800c906:	2000      	movs	r0, #0
 800c908:	f7fe ff5c 	bl	800b7c4 <aci_hal_set_radio_activity_mask>
          APP_BLE_p2p_Conn_Update_req.Identifier = pr->Identifier;
 800c90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c90e:	789a      	ldrb	r2, [r3, #2]
 800c910:	4b84      	ldr	r3, [pc, #528]	; (800cb24 <SVCCTL_App_Notification+0x2ac>)
 800c912:	701a      	strb	r2, [r3, #0]
          APP_BLE_p2p_Conn_Update_req.L2CAP_Length = pr->L2CAP_Length;
 800c914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c916:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800c91a:	b29a      	uxth	r2, r3
 800c91c:	4b81      	ldr	r3, [pc, #516]	; (800cb24 <SVCCTL_App_Notification+0x2ac>)
 800c91e:	805a      	strh	r2, [r3, #2]
          APP_BLE_p2p_Conn_Update_req.Interval_Min = pr->Interval_Min;
 800c920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c922:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800c926:	b29a      	uxth	r2, r3
 800c928:	4b7e      	ldr	r3, [pc, #504]	; (800cb24 <SVCCTL_App_Notification+0x2ac>)
 800c92a:	809a      	strh	r2, [r3, #4]
          APP_BLE_p2p_Conn_Update_req.Interval_Max = pr->Interval_Max;
 800c92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c92e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800c932:	b29a      	uxth	r2, r3
 800c934:	4b7b      	ldr	r3, [pc, #492]	; (800cb24 <SVCCTL_App_Notification+0x2ac>)
 800c936:	80da      	strh	r2, [r3, #6]
          APP_BLE_p2p_Conn_Update_req.Slave_Latency = pr->Slave_Latency;
 800c938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c93a:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800c93e:	b29a      	uxth	r2, r3
 800c940:	4b78      	ldr	r3, [pc, #480]	; (800cb24 <SVCCTL_App_Notification+0x2ac>)
 800c942:	811a      	strh	r2, [r3, #8]
          APP_BLE_p2p_Conn_Update_req.Timeout_Multiplier = pr->Timeout_Multiplier;
 800c944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c946:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800c94a:	b29a      	uxth	r2, r3
 800c94c:	4b75      	ldr	r3, [pc, #468]	; (800cb24 <SVCCTL_App_Notification+0x2ac>)
 800c94e:	815a      	strh	r2, [r3, #10]
          result = aci_l2cap_connection_parameter_update_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 800c950:	4b73      	ldr	r3, [pc, #460]	; (800cb20 <SVCCTL_App_Notification+0x2a8>)
 800c952:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
 800c954:	4b73      	ldr	r3, [pc, #460]	; (800cb24 <SVCCTL_App_Notification+0x2ac>)
 800c956:	889c      	ldrh	r4, [r3, #4]
 800c958:	4b72      	ldr	r3, [pc, #456]	; (800cb24 <SVCCTL_App_Notification+0x2ac>)
 800c95a:	88dd      	ldrh	r5, [r3, #6]
 800c95c:	4b71      	ldr	r3, [pc, #452]	; (800cb24 <SVCCTL_App_Notification+0x2ac>)
 800c95e:	891e      	ldrh	r6, [r3, #8]
 800c960:	4b70      	ldr	r3, [pc, #448]	; (800cb24 <SVCCTL_App_Notification+0x2ac>)
 800c962:	895b      	ldrh	r3, [r3, #10]
 800c964:	4a6f      	ldr	r2, [pc, #444]	; (800cb24 <SVCCTL_App_Notification+0x2ac>)
 800c966:	7812      	ldrb	r2, [r2, #0]
 800c968:	2101      	movs	r1, #1
 800c96a:	9104      	str	r1, [sp, #16]
 800c96c:	9203      	str	r2, [sp, #12]
 800c96e:	2210      	movs	r2, #16
 800c970:	9202      	str	r2, [sp, #8]
 800c972:	2210      	movs	r2, #16
 800c974:	9201      	str	r2, [sp, #4]
 800c976:	9300      	str	r3, [sp, #0]
 800c978:	4633      	mov	r3, r6
 800c97a:	462a      	mov	r2, r5
 800c97c:	4621      	mov	r1, r4
 800c97e:	f7fe ff9b 	bl	800b8b8 <aci_l2cap_connection_parameter_update_resp>
 800c982:	4603      	mov	r3, r0
 800c984:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
          aci_hal_set_radio_activity_mask(0x0020);
 800c988:	2020      	movs	r0, #32
 800c98a:	f7fe ff1b 	bl	800b7c4 <aci_hal_set_radio_activity_mask>
        break;
 800c98e:	e002      	b.n	800c996 <SVCCTL_App_Notification+0x11e>
        break; 
 800c990:	bf00      	nop
 800c992:	e0bd      	b.n	800cb10 <SVCCTL_App_Notification+0x298>
        break;
 800c994:	bf00      	nop
    break; 
 800c996:	e0bb      	b.n	800cb10 <SVCCTL_App_Notification+0x298>
      if (cc->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800c998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c99a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c99e:	b29a      	uxth	r2, r3
 800c9a0:	4b5f      	ldr	r3, [pc, #380]	; (800cb20 <SVCCTL_App_Notification+0x2a8>)
 800c9a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	f040 80b2 	bne.w	800cb0e <SVCCTL_App_Notification+0x296>
            BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800c9aa:	4b5d      	ldr	r3, [pc, #372]	; (800cb20 <SVCCTL_App_Notification+0x2a8>)
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	84da      	strh	r2, [r3, #38]	; 0x26
            BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c9b0:	4b5b      	ldr	r3, [pc, #364]	; (800cb20 <SVCCTL_App_Notification+0x2a8>)
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
            HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	2101      	movs	r1, #1
 800c9bc:	485a      	ldr	r0, [pc, #360]	; (800cb28 <SVCCTL_App_Notification+0x2b0>)
 800c9be:	f7f6 fa91 	bl	8002ee4 <HAL_GPIO_WritePin>
            handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800c9c2:	4b56      	ldr	r3, [pc, #344]	; (800cb1c <SVCCTL_App_Notification+0x2a4>)
 800c9c4:	2201      	movs	r2, #1
 800c9c6:	701a      	strb	r2, [r3, #0]
            handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800c9c8:	4b55      	ldr	r3, [pc, #340]	; (800cb20 <SVCCTL_App_Notification+0x2a8>)
 800c9ca:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800c9cc:	4b53      	ldr	r3, [pc, #332]	; (800cb1c <SVCCTL_App_Notification+0x2a4>)
 800c9ce:	805a      	strh	r2, [r3, #2]
            P2PC_APP_Notification(&handleNotification);
 800c9d0:	4852      	ldr	r0, [pc, #328]	; (800cb1c <SVCCTL_App_Notification+0x2a4>)
 800c9d2:	f000 fabb 	bl	800cf4c <P2PC_APP_Notification>
      break; /* EVT_DISCONN_COMPLETE */
 800c9d6:	e09a      	b.n	800cb0e <SVCCTL_App_Notification+0x296>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 800c9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9da:	3302      	adds	r3, #2
 800c9dc:	623b      	str	r3, [r7, #32]
      switch (meta_evt->subevent)
 800c9de:	6a3b      	ldr	r3, [r7, #32]
 800c9e0:	781b      	ldrb	r3, [r3, #0]
 800c9e2:	2b01      	cmp	r3, #1
 800c9e4:	d002      	beq.n	800c9ec <SVCCTL_App_Notification+0x174>
 800c9e6:	2b02      	cmp	r3, #2
 800c9e8:	d025      	beq.n	800ca36 <SVCCTL_App_Notification+0x1be>
          break;
 800c9ea:	e08f      	b.n	800cb0c <SVCCTL_App_Notification+0x294>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 800c9ec:	6a3b      	ldr	r3, [r7, #32]
 800c9ee:	3301      	adds	r3, #1
 800c9f0:	60fb      	str	r3, [r7, #12]
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c9f8:	b29a      	uxth	r2, r3
 800c9fa:	4b49      	ldr	r3, [pc, #292]	; (800cb20 <SVCCTL_App_Notification+0x2a8>)
 800c9fc:	84da      	strh	r2, [r3, #38]	; 0x26
          BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800c9fe:	4b48      	ldr	r3, [pc, #288]	; (800cb20 <SVCCTL_App_Notification+0x2a8>)
 800ca00:	2206      	movs	r2, #6
 800ca02:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
          HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800ca06:	2201      	movs	r2, #1
 800ca08:	2101      	movs	r1, #1
 800ca0a:	4847      	ldr	r0, [pc, #284]	; (800cb28 <SVCCTL_App_Notification+0x2b0>)
 800ca0c:	f7f6 fa6a 	bl	8002ee4 <HAL_GPIO_WritePin>
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800ca10:	4b42      	ldr	r3, [pc, #264]	; (800cb1c <SVCCTL_App_Notification+0x2a4>)
 800ca12:	2200      	movs	r2, #0
 800ca14:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800ca16:	4b42      	ldr	r3, [pc, #264]	; (800cb20 <SVCCTL_App_Notification+0x2a8>)
 800ca18:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800ca1a:	4b40      	ldr	r3, [pc, #256]	; (800cb1c <SVCCTL_App_Notification+0x2a4>)
 800ca1c:	805a      	strh	r2, [r3, #2]
          P2PC_APP_Notification(&handleNotification);
 800ca1e:	483f      	ldr	r0, [pc, #252]	; (800cb1c <SVCCTL_App_Notification+0x2a4>)
 800ca20:	f000 fa94 	bl	800cf4c <P2PC_APP_Notification>
          result = aci_gatt_disc_all_primary_services(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800ca24:	4b3e      	ldr	r3, [pc, #248]	; (800cb20 <SVCCTL_App_Notification+0x2a8>)
 800ca26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f7fe fc38 	bl	800b29e <aci_gatt_disc_all_primary_services>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
          break; /* HCI_EVT_LE_CONN_COMPLETE */
 800ca34:	e06a      	b.n	800cb0c <SVCCTL_App_Notification+0x294>
          le_advertising_event = (hci_le_advertising_report_event_rp0 *) meta_evt->data;
 800ca36:	6a3b      	ldr	r3, [r7, #32]
 800ca38:	3301      	adds	r3, #1
 800ca3a:	61fb      	str	r3, [r7, #28]
          event_type = le_advertising_event->Advertising_Report[0].Event_Type;
 800ca3c:	69fb      	ldr	r3, [r7, #28]
 800ca3e:	785b      	ldrb	r3, [r3, #1]
 800ca40:	76fb      	strb	r3, [r7, #27]
          event_data_size = le_advertising_event->Advertising_Report[0].Length_Data;
 800ca42:	69fb      	ldr	r3, [r7, #28]
 800ca44:	7a5b      	ldrb	r3, [r3, #9]
 800ca46:	76bb      	strb	r3, [r7, #26]
          adv_report_data = (uint8_t*)(&le_advertising_event->Advertising_Report[0].Length_Data) + 1;
 800ca48:	69fb      	ldr	r3, [r7, #28]
 800ca4a:	3309      	adds	r3, #9
 800ca4c:	3301      	adds	r3, #1
 800ca4e:	617b      	str	r3, [r7, #20]
          k = 0;
 800ca50:	2300      	movs	r3, #0
 800ca52:	63fb      	str	r3, [r7, #60]	; 0x3c
          if (event_type == ADV_IND)
 800ca54:	7efb      	ldrb	r3, [r7, #27]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d157      	bne.n	800cb0a <SVCCTL_App_Notification+0x292>
            while(k < event_data_size)
 800ca5a:	e052      	b.n	800cb02 <SVCCTL_App_Notification+0x28a>
              adlength = adv_report_data[k];
 800ca5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca5e:	697a      	ldr	r2, [r7, #20]
 800ca60:	4413      	add	r3, r2
 800ca62:	781b      	ldrb	r3, [r3, #0]
 800ca64:	74fb      	strb	r3, [r7, #19]
              adtype = adv_report_data[k + 1];
 800ca66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca68:	3301      	adds	r3, #1
 800ca6a:	697a      	ldr	r2, [r7, #20]
 800ca6c:	4413      	add	r3, r2
 800ca6e:	781b      	ldrb	r3, [r3, #0]
 800ca70:	74bb      	strb	r3, [r7, #18]
              switch (adtype)
 800ca72:	7cbb      	ldrb	r3, [r7, #18]
 800ca74:	2b0a      	cmp	r3, #10
 800ca76:	d03a      	beq.n	800caee <SVCCTL_App_Notification+0x276>
 800ca78:	2b0a      	cmp	r3, #10
 800ca7a:	dc02      	bgt.n	800ca82 <SVCCTL_App_Notification+0x20a>
 800ca7c:	2b01      	cmp	r3, #1
 800ca7e:	d038      	beq.n	800caf2 <SVCCTL_App_Notification+0x27a>
                  break;
 800ca80:	e03a      	b.n	800caf8 <SVCCTL_App_Notification+0x280>
              switch (adtype)
 800ca82:	2b16      	cmp	r3, #22
 800ca84:	d037      	beq.n	800caf6 <SVCCTL_App_Notification+0x27e>
 800ca86:	2bff      	cmp	r3, #255	; 0xff
 800ca88:	d000      	beq.n	800ca8c <SVCCTL_App_Notification+0x214>
                  break;
 800ca8a:	e035      	b.n	800caf8 <SVCCTL_App_Notification+0x280>
                  if (adlength >= 7 && adv_report_data[k + 2] == 0x01)
 800ca8c:	7cfb      	ldrb	r3, [r7, #19]
 800ca8e:	2b06      	cmp	r3, #6
 800ca90:	d92b      	bls.n	800caea <SVCCTL_App_Notification+0x272>
 800ca92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca94:	3302      	adds	r3, #2
 800ca96:	697a      	ldr	r2, [r7, #20]
 800ca98:	4413      	add	r3, r2
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	2b01      	cmp	r3, #1
 800ca9e:	d124      	bne.n	800caea <SVCCTL_App_Notification+0x272>
                    switch (adv_report_data[k + 3])
 800caa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800caa2:	3303      	adds	r3, #3
 800caa4:	697a      	ldr	r2, [r7, #20]
 800caa6:	4413      	add	r3, r2
 800caa8:	781b      	ldrb	r3, [r3, #0]
 800caaa:	2b83      	cmp	r3, #131	; 0x83
 800caac:	d000      	beq.n	800cab0 <SVCCTL_App_Notification+0x238>
                        break;
 800caae:	e01d      	b.n	800caec <SVCCTL_App_Notification+0x274>
                        BleApplicationContext.DeviceServerFound = 0x01;
 800cab0:	4b1b      	ldr	r3, [pc, #108]	; (800cb20 <SVCCTL_App_Notification+0x2a8>)
 800cab2:	2201      	movs	r2, #1
 800cab4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                        SERVER_REMOTE_BDADDR[0] = le_advertising_event->Advertising_Report[0].Address[0];
 800cab8:	69fb      	ldr	r3, [r7, #28]
 800caba:	78da      	ldrb	r2, [r3, #3]
 800cabc:	4b1b      	ldr	r3, [pc, #108]	; (800cb2c <SVCCTL_App_Notification+0x2b4>)
 800cabe:	701a      	strb	r2, [r3, #0]
                        SERVER_REMOTE_BDADDR[1] = le_advertising_event->Advertising_Report[0].Address[1];
 800cac0:	69fb      	ldr	r3, [r7, #28]
 800cac2:	791a      	ldrb	r2, [r3, #4]
 800cac4:	4b19      	ldr	r3, [pc, #100]	; (800cb2c <SVCCTL_App_Notification+0x2b4>)
 800cac6:	705a      	strb	r2, [r3, #1]
                        SERVER_REMOTE_BDADDR[2] = le_advertising_event->Advertising_Report[0].Address[2];
 800cac8:	69fb      	ldr	r3, [r7, #28]
 800caca:	795a      	ldrb	r2, [r3, #5]
 800cacc:	4b17      	ldr	r3, [pc, #92]	; (800cb2c <SVCCTL_App_Notification+0x2b4>)
 800cace:	709a      	strb	r2, [r3, #2]
                        SERVER_REMOTE_BDADDR[3] = le_advertising_event->Advertising_Report[0].Address[3];
 800cad0:	69fb      	ldr	r3, [r7, #28]
 800cad2:	799a      	ldrb	r2, [r3, #6]
 800cad4:	4b15      	ldr	r3, [pc, #84]	; (800cb2c <SVCCTL_App_Notification+0x2b4>)
 800cad6:	70da      	strb	r2, [r3, #3]
                        SERVER_REMOTE_BDADDR[4] = le_advertising_event->Advertising_Report[0].Address[4];
 800cad8:	69fb      	ldr	r3, [r7, #28]
 800cada:	79da      	ldrb	r2, [r3, #7]
 800cadc:	4b13      	ldr	r3, [pc, #76]	; (800cb2c <SVCCTL_App_Notification+0x2b4>)
 800cade:	711a      	strb	r2, [r3, #4]
                        SERVER_REMOTE_BDADDR[5] = le_advertising_event->Advertising_Report[0].Address[5];
 800cae0:	69fb      	ldr	r3, [r7, #28]
 800cae2:	7a1a      	ldrb	r2, [r3, #8]
 800cae4:	4b11      	ldr	r3, [pc, #68]	; (800cb2c <SVCCTL_App_Notification+0x2b4>)
 800cae6:	715a      	strb	r2, [r3, #5]
                        break;
 800cae8:	e000      	b.n	800caec <SVCCTL_App_Notification+0x274>
                  }
 800caea:	bf00      	nop
                  break;
 800caec:	e004      	b.n	800caf8 <SVCCTL_App_Notification+0x280>
                break;
 800caee:	bf00      	nop
 800caf0:	e002      	b.n	800caf8 <SVCCTL_App_Notification+0x280>
                  break;
 800caf2:	bf00      	nop
 800caf4:	e000      	b.n	800caf8 <SVCCTL_App_Notification+0x280>
                  break;
 800caf6:	bf00      	nop
              k += adlength + 1;
 800caf8:	7cfb      	ldrb	r3, [r7, #19]
 800cafa:	3301      	adds	r3, #1
 800cafc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cafe:	4413      	add	r3, r2
 800cb00:	63fb      	str	r3, [r7, #60]	; 0x3c
            while(k < event_data_size)
 800cb02:	7ebb      	ldrb	r3, [r7, #26]
 800cb04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cb06:	429a      	cmp	r2, r3
 800cb08:	dba8      	blt.n	800ca5c <SVCCTL_App_Notification+0x1e4>
          break;
 800cb0a:	bf00      	nop
      break; /* HCI_EVT_LE_META_EVENT */
 800cb0c:	e000      	b.n	800cb10 <SVCCTL_App_Notification+0x298>
      break; /* EVT_DISCONN_COMPLETE */
 800cb0e:	bf00      	nop
   }
  return (SVCCTL_UserEvtFlowEnable);
 800cb10:	2301      	movs	r3, #1
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3744      	adds	r7, #68	; 0x44
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb1a:	bf00      	nop
 800cb1c:	200007b0 	.word	0x200007b0
 800cb20:	200002dc 	.word	0x200002dc
 800cb24:	200007bc 	.word	0x200007bc
 800cb28:	48000400 	.word	0x48000400
 800cb2c:	200007b4 	.word	0x200007b4

0800cb30 <APP_BLE_Get_Client_Connection_Status>:

APP_BLE_ConnStatus_t APP_BLE_Get_Client_Connection_Status( uint16_t Connection_Handle )
{
 800cb30:	b480      	push	{r7}
 800cb32:	b083      	sub	sp, #12
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	4603      	mov	r3, r0
 800cb38:	80fb      	strh	r3, [r7, #6]

  if (BleApplicationContext.BleApplicationContext_legacy.connectionHandle == Connection_Handle)
 800cb3a:	4b08      	ldr	r3, [pc, #32]	; (800cb5c <APP_BLE_Get_Client_Connection_Status+0x2c>)
 800cb3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cb3e:	88fa      	ldrh	r2, [r7, #6]
 800cb40:	429a      	cmp	r2, r3
 800cb42:	d103      	bne.n	800cb4c <APP_BLE_Get_Client_Connection_Status+0x1c>
  {
    return BleApplicationContext.Device_Connection_Status;
 800cb44:	4b05      	ldr	r3, [pc, #20]	; (800cb5c <APP_BLE_Get_Client_Connection_Status+0x2c>)
 800cb46:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800cb4a:	e000      	b.n	800cb4e <APP_BLE_Get_Client_Connection_Status+0x1e>
  }
  return APP_BLE_IDLE;
 800cb4c:	2300      	movs	r3, #0
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	370c      	adds	r7, #12
 800cb52:	46bd      	mov	sp, r7
 800cb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb58:	4770      	bx	lr
 800cb5a:	bf00      	nop
 800cb5c:	200002dc 	.word	0x200002dc

0800cb60 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b082      	sub	sp, #8
 800cb64:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800cb66:	4b06      	ldr	r3, [pc, #24]	; (800cb80 <Ble_Tl_Init+0x20>)
 800cb68:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800cb6a:	4b06      	ldr	r3, [pc, #24]	; (800cb84 <Ble_Tl_Init+0x24>)
 800cb6c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800cb6e:	463b      	mov	r3, r7
 800cb70:	4619      	mov	r1, r3
 800cb72:	4805      	ldr	r0, [pc, #20]	; (800cb88 <Ble_Tl_Init+0x28>)
 800cb74:	f7ff f8b4 	bl	800bce0 <hci_init>

  return;
 800cb78:	bf00      	nop
}
 800cb7a:	3708      	adds	r7, #8
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}
 800cb80:	200300b8 	.word	0x200300b8
 800cb84:	0800cec9 	.word	0x0800cec9
 800cb88:	0800ce91 	.word	0x0800ce91

0800cb8c <Ble_Hci_Gap_Gatt_Init>:

 static void Ble_Hci_Gap_Gatt_Init(void){
 800cb8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb8e:	b091      	sub	sp, #68	; 0x44
 800cb90:	af06      	add	r7, sp, #24
  uint8_t role;
  uint8_t index;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE }; 
 800cb92:	2300      	movs	r3, #0
 800cb94:	80bb      	strh	r3, [r7, #4]
  
  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
   hci_reset();
 800cb96:	f7fe fe66 	bl	800b866 <hci_reset>
  
   /**
   * Write the BD Address
   */
 
  bd_addr = BleGetBdAddress();
 800cb9a:	f000 f913 	bl	800cdc4 <BleGetBdAddress>
 800cb9e:	6238      	str	r0, [r7, #32]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800cba0:	6a3a      	ldr	r2, [r7, #32]
 800cba2:	2106      	movs	r1, #6
 800cba4:	2000      	movs	r0, #0
 800cba6:	f7fe fd3f 	bl	800b628 <aci_hal_write_config_data>
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 800cbaa:	f64e 536e 	movw	r3, #60782	; 0xed6e
 800cbae:	60fb      	str	r3, [r7, #12]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 800cbb0:	f7ff fdee 	bl	800c790 <LL_FLASH_GetUDN>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	60bb      	str	r3, [r7, #8]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 800cbb8:	f107 0308 	add.w	r3, r7, #8
 800cbbc:	461a      	mov	r2, r3
 800cbbe:	2106      	movs	r1, #6
 800cbc0:	202e      	movs	r0, #46	; 0x2e
 800cbc2:	f7fe fd31 	bl	800b628 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK 
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800cbc6:	4a49      	ldr	r2, [pc, #292]	; (800ccec <Ble_Hci_Gap_Gatt_Init+0x160>)
 800cbc8:	2110      	movs	r1, #16
 800cbca:	2018      	movs	r0, #24
 800cbcc:	f7fe fd2c 	bl	800b628 <aci_hal_write_config_data>
    
   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 800cbd0:	4a47      	ldr	r2, [pc, #284]	; (800ccf0 <Ble_Hci_Gap_Gatt_Init+0x164>)
 800cbd2:	2110      	movs	r1, #16
 800cbd4:	2008      	movs	r0, #8
 800cbd6:	f7fe fd27 	bl	800b628 <aci_hal_write_config_data>
  
  /**
     * Set TX Power to 0dBm.
     */
    aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800cbda:	2118      	movs	r1, #24
 800cbdc:	2001      	movs	r0, #1
 800cbde:	f7fe fd93 	bl	800b708 <aci_hal_set_tx_power_level>
  
/**
   * Initialize GATT interface
   */
  aci_gatt_init();
 800cbe2:	f7fe faa4 	bl	800b12e <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	77fb      	strb	r3, [r7, #31]
#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
#endif

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
 800cbea:	7ffb      	ldrb	r3, [r7, #31]
 800cbec:	f043 0304 	orr.w	r3, r3, #4
 800cbf0:	77fb      	strb	r3, [r7, #31]
#endif

  if (role > 0)
 800cbf2:	7ffb      	ldrb	r3, [r7, #31]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d01e      	beq.n	800cc36 <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    const char *name = "STM32WB";
 800cbf8:	4b3e      	ldr	r3, [pc, #248]	; (800ccf4 <Ble_Hci_Gap_Gatt_Init+0x168>)
 800cbfa:	61bb      	str	r3, [r7, #24]

    aci_gap_init(role, 0,
 800cbfc:	f107 0216 	add.w	r2, r7, #22
 800cc00:	7ff8      	ldrb	r0, [r7, #31]
 800cc02:	f107 0312 	add.w	r3, r7, #18
 800cc06:	9301      	str	r3, [sp, #4]
 800cc08:	f107 0314 	add.w	r3, r7, #20
 800cc0c:	9300      	str	r3, [sp, #0]
 800cc0e:	4613      	mov	r3, r2
 800cc10:	2207      	movs	r2, #7
 800cc12:	2100      	movs	r1, #0
 800cc14:	f7fe f88c 	bl	800ad30 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800cc18:	8afc      	ldrh	r4, [r7, #22]
 800cc1a:	8abd      	ldrh	r5, [r7, #20]
 800cc1c:	69b8      	ldr	r0, [r7, #24]
 800cc1e:	f7f3 faaf 	bl	8000180 <strlen>
 800cc22:	4603      	mov	r3, r0
 800cc24:	b2da      	uxtb	r2, r3
 800cc26:	69bb      	ldr	r3, [r7, #24]
 800cc28:	9300      	str	r3, [sp, #0]
 800cc2a:	4613      	mov	r3, r2
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	4629      	mov	r1, r5
 800cc30:	4620      	mov	r0, r4
 800cc32:	f7fe faa6 	bl	800b182 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

    if(aci_gatt_update_char_value(gap_service_handle,
 800cc36:	8af8      	ldrh	r0, [r7, #22]
 800cc38:	8a79      	ldrh	r1, [r7, #18]
 800cc3a:	1d3b      	adds	r3, r7, #4
 800cc3c:	9300      	str	r3, [sp, #0]
 800cc3e:	2302      	movs	r3, #2
 800cc40:	2200      	movs	r2, #0
 800cc42:	f7fe fa9e 	bl	800b182 <aci_gatt_update_char_value>
    }

    /**
     * Initialize IO capability
     */
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800cc46:	4b2c      	ldr	r3, [pc, #176]	; (800ccf8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800cc48:	2201      	movs	r2, #1
 800cc4a:	701a      	strb	r2, [r3, #0]
    aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800cc4c:	4b2a      	ldr	r3, [pc, #168]	; (800ccf8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	4618      	mov	r0, r3
 800cc52:	f7fd ff6d 	bl	800ab30 <aci_gap_set_io_capability>

    /**
     * Initialize authentication
     */
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800cc56:	4b28      	ldr	r3, [pc, #160]	; (800ccf8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800cc58:	2201      	movs	r2, #1
 800cc5a:	705a      	strb	r2, [r3, #1]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 800cc5c:	4b26      	ldr	r3, [pc, #152]	; (800ccf8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800cc5e:	2200      	movs	r2, #0
 800cc60:	70da      	strb	r2, [r3, #3]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = 8;
 800cc62:	4b25      	ldr	r3, [pc, #148]	; (800ccf8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800cc64:	2208      	movs	r2, #8
 800cc66:	755a      	strb	r2, [r3, #21]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
 800cc68:	4b23      	ldr	r3, [pc, #140]	; (800ccf8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800cc6a:	2210      	movs	r2, #16
 800cc6c:	759a      	strb	r2, [r3, #22]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = 1;
 800cc6e:	4b22      	ldr	r3, [pc, #136]	; (800ccf8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800cc70:	2201      	movs	r2, #1
 800cc72:	751a      	strb	r2, [r3, #20]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
 800cc74:	4b20      	ldr	r3, [pc, #128]	; (800ccf8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800cc76:	4a21      	ldr	r2, [pc, #132]	; (800ccfc <Ble_Hci_Gap_Gatt_Init+0x170>)
 800cc78:	619a      	str	r2, [r3, #24]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = 1;
 800cc7a:	4b1f      	ldr	r3, [pc, #124]	; (800ccf8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800cc7c:	2201      	movs	r2, #1
 800cc7e:	709a      	strb	r2, [r3, #2]
    for (index = 0; index < 16; index++)
 800cc80:	2300      	movs	r3, #0
 800cc82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cc86:	e00b      	b.n	800cca0 <Ble_Hci_Gap_Gatt_Init+0x114>
    {
      BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 800cc88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc8c:	4a1a      	ldr	r2, [pc, #104]	; (800ccf8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800cc8e:	4413      	add	r3, r2
 800cc90:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cc94:	711a      	strb	r2, [r3, #4]
    for (index = 0; index < 16; index++)
 800cc96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc9a:	3301      	adds	r3, #1
 800cc9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cca0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cca4:	2b0f      	cmp	r3, #15
 800cca6:	d9ef      	bls.n	800cc88 <Ble_Hci_Gap_Gatt_Init+0xfc>
    }

    aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800cca8:	4b13      	ldr	r3, [pc, #76]	; (800ccf8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800ccaa:	789d      	ldrb	r5, [r3, #2]
 800ccac:	4b12      	ldr	r3, [pc, #72]	; (800ccf8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800ccae:	785e      	ldrb	r6, [r3, #1]
 800ccb0:	4b11      	ldr	r3, [pc, #68]	; (800ccf8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800ccb2:	7d5b      	ldrb	r3, [r3, #21]
 800ccb4:	4a10      	ldr	r2, [pc, #64]	; (800ccf8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800ccb6:	7d92      	ldrb	r2, [r2, #22]
 800ccb8:	490f      	ldr	r1, [pc, #60]	; (800ccf8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800ccba:	7d09      	ldrb	r1, [r1, #20]
 800ccbc:	480e      	ldr	r0, [pc, #56]	; (800ccf8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800ccbe:	6980      	ldr	r0, [r0, #24]
 800ccc0:	2400      	movs	r4, #0
 800ccc2:	9404      	str	r4, [sp, #16]
 800ccc4:	9003      	str	r0, [sp, #12]
 800ccc6:	9102      	str	r1, [sp, #8]
 800ccc8:	9201      	str	r2, [sp, #4]
 800ccca:	9300      	str	r3, [sp, #0]
 800cccc:	2300      	movs	r3, #0
 800ccce:	2200      	movs	r2, #0
 800ccd0:	4631      	mov	r1, r6
 800ccd2:	4628      	mov	r0, r5
 800ccd4:	f7fd ff7d 	bl	800abd2 <aci_gap_set_authentication_requirement>
                                           );

    /**
     * Initialize whitelist
     */
    if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800ccd8:	4b07      	ldr	r3, [pc, #28]	; (800ccf8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800ccda:	789b      	ldrb	r3, [r3, #2]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d001      	beq.n	800cce4 <Ble_Hci_Gap_Gatt_Init+0x158>
    {
      aci_gap_configure_whitelist();
 800cce0:	f7fe f8b1 	bl	800ae46 <aci_gap_configure_whitelist>
    }
  
}
 800cce4:	bf00      	nop
 800cce6:	372c      	adds	r7, #44	; 0x2c
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccec:	0800f0f0 	.word	0x0800f0f0
 800ccf0:	0800f100 	.word	0x0800f100
 800ccf4:	0800efd0 	.word	0x0800efd0
 800ccf8:	200002dc 	.word	0x200002dc
 800ccfc:	0001b207 	.word	0x0001b207

0800cd00 <Scan_Request>:

static void Scan_Request( void )
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b082      	sub	sp, #8
 800cd04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Scan_Request_1 */

  /* USER CODE END Scan_Request_1 */
  tBleStatus result;
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 800cd06:	4b0e      	ldr	r3, [pc, #56]	; (800cd40 <Scan_Request+0x40>)
 800cd08:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800cd0c:	2b06      	cmp	r3, #6
 800cd0e:	d012      	beq.n	800cd36 <Scan_Request+0x36>
  {
    /* USER CODE BEGIN APP_BLE_CONNECTED_CLIENT */

    /* USER CODE END APP_BLE_CONNECTED_CLIENT */
    result = aci_gap_start_general_discovery_proc(SCAN_P, SCAN_L, PUBLIC_ADDR, 1);
 800cd10:	2301      	movs	r3, #1
 800cd12:	2200      	movs	r2, #0
 800cd14:	f44f 7148 	mov.w	r1, #800	; 0x320
 800cd18:	f44f 7048 	mov.w	r0, #800	; 0x320
 800cd1c:	f7fe f8bc 	bl	800ae98 <aci_gap_start_general_discovery_proc>
 800cd20:	4603      	mov	r3, r0
 800cd22:	71fb      	strb	r3, [r7, #7]
    if (result == BLE_STATUS_SUCCESS)
 800cd24:	79fb      	ldrb	r3, [r7, #7]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d105      	bne.n	800cd36 <Scan_Request+0x36>
    {
    /* USER CODE BEGIN BLE_SCAN_SUCCESS */
    	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 800cd2a:	2201      	movs	r2, #1
 800cd2c:	2120      	movs	r1, #32
 800cd2e:	4805      	ldr	r0, [pc, #20]	; (800cd44 <Scan_Request+0x44>)
 800cd30:	f7f6 f8d8 	bl	8002ee4 <HAL_GPIO_WritePin>
    }
  }
  /* USER CODE BEGIN Scan_Request_2 */

  /* USER CODE END Scan_Request_2 */
  return;
 800cd34:	bf00      	nop
 800cd36:	bf00      	nop
}
 800cd38:	3708      	adds	r7, #8
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}
 800cd3e:	bf00      	nop
 800cd40:	200002dc 	.word	0x200002dc
 800cd44:	48000400 	.word	0x48000400

0800cd48 <Connect_Request>:

static void Connect_Request( void )
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b08a      	sub	sp, #40	; 0x28
 800cd4c:	af08      	add	r7, sp, #32

  /* USER CODE END Connect_Request_1 */
  tBleStatus result;
  APP_DBG_MSG("\r\n\r** CREATE CONNECTION TO SERVER **  \r\n\r");

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 800cd4e:	4b17      	ldr	r3, [pc, #92]	; (800cdac <Connect_Request+0x64>)
 800cd50:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800cd54:	2b06      	cmp	r3, #6
 800cd56:	d025      	beq.n	800cda4 <Connect_Request+0x5c>
  {
    result = aci_gap_create_connection(SCAN_P,
 800cd58:	2310      	movs	r3, #16
 800cd5a:	9306      	str	r3, [sp, #24]
 800cd5c:	2310      	movs	r3, #16
 800cd5e:	9305      	str	r3, [sp, #20]
 800cd60:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800cd64:	9304      	str	r3, [sp, #16]
 800cd66:	2300      	movs	r3, #0
 800cd68:	9303      	str	r3, [sp, #12]
 800cd6a:	2350      	movs	r3, #80	; 0x50
 800cd6c:	9302      	str	r3, [sp, #8]
 800cd6e:	2328      	movs	r3, #40	; 0x28
 800cd70:	9301      	str	r3, [sp, #4]
 800cd72:	2300      	movs	r3, #0
 800cd74:	9300      	str	r3, [sp, #0]
 800cd76:	4b0e      	ldr	r3, [pc, #56]	; (800cdb0 <Connect_Request+0x68>)
 800cd78:	2200      	movs	r2, #0
 800cd7a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800cd7e:	f44f 7048 	mov.w	r0, #800	; 0x320
 800cd82:	f7fe f908 	bl	800af96 <aci_gap_create_connection>
 800cd86:	4603      	mov	r3, r0
 800cd88:	71fb      	strb	r3, [r7, #7]
                                       0,
                                       SUPERV_TIMEOUT,
                                       CONN_L1,
                                       CONN_L2);

    if (result == BLE_STATUS_SUCCESS)
 800cd8a:	79fb      	ldrb	r3, [r7, #7]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d104      	bne.n	800cd9a <Connect_Request+0x52>
    {
    /* USER CODE BEGIN BLE_CONNECT_SUCCESS */

    /* USER CODE END BLE_CONNECT_SUCCESS */
    BleApplicationContext.Device_Connection_Status = APP_BLE_LP_CONNECTING;
 800cd90:	4b06      	ldr	r3, [pc, #24]	; (800cdac <Connect_Request+0x64>)
 800cd92:	2204      	movs	r2, #4
 800cd94:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
    }
  }
  /* USER CODE BEGIN Connect_Request_2 */

  /* USER CODE END Connect_Request_2 */
  return;
 800cd98:	e004      	b.n	800cda4 <Connect_Request+0x5c>
      BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800cd9a:	4b04      	ldr	r3, [pc, #16]	; (800cdac <Connect_Request+0x64>)
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  return;
 800cda2:	bf00      	nop
 800cda4:	bf00      	nop
}
 800cda6:	3708      	adds	r7, #8
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}
 800cdac:	200002dc 	.word	0x200002dc
 800cdb0:	200007b4 	.word	0x200007b4

0800cdb4 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 800cdb4:	b480      	push	{r7}
 800cdb6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */
	//BSP_LED_Off(LED_GREEN);
	//HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
/* USER CODE END Switch_OFF_GPIO */
}
 800cdb8:	bf00      	nop
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc0:	4770      	bx	lr
	...

0800cdc4 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b086      	sub	sp, #24
 800cdc8:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800cdca:	f7ff fce1 	bl	800c790 <LL_FLASH_GetUDN>
 800cdce:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 800cdd0:	693b      	ldr	r3, [r7, #16]
 800cdd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cdd6:	d023      	beq.n	800ce20 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800cdd8:	f7ff fcf2 	bl	800c7c0 <LL_FLASH_GetSTCompanyID>
 800cddc:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800cdde:	f7ff fce3 	bl	800c7a8 <LL_FLASH_GetDeviceID>
 800cde2:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	b2da      	uxtb	r2, r3
 800cde8:	4b16      	ldr	r3, [pc, #88]	; (800ce44 <BleGetBdAddress+0x80>)
 800cdea:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 800cdec:	693b      	ldr	r3, [r7, #16]
 800cdee:	0a1b      	lsrs	r3, r3, #8
 800cdf0:	b2da      	uxtb	r2, r3
 800cdf2:	4b14      	ldr	r3, [pc, #80]	; (800ce44 <BleGetBdAddress+0x80>)
 800cdf4:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 800cdf6:	693b      	ldr	r3, [r7, #16]
 800cdf8:	0c1b      	lsrs	r3, r3, #16
 800cdfa:	b2da      	uxtb	r2, r3
 800cdfc:	4b11      	ldr	r3, [pc, #68]	; (800ce44 <BleGetBdAddress+0x80>)
 800cdfe:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	b2da      	uxtb	r2, r3
 800ce04:	4b0f      	ldr	r3, [pc, #60]	; (800ce44 <BleGetBdAddress+0x80>)
 800ce06:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	b2da      	uxtb	r2, r3
 800ce0c:	4b0d      	ldr	r3, [pc, #52]	; (800ce44 <BleGetBdAddress+0x80>)
 800ce0e:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	0a1b      	lsrs	r3, r3, #8
 800ce14:	b2da      	uxtb	r2, r3
 800ce16:	4b0b      	ldr	r3, [pc, #44]	; (800ce44 <BleGetBdAddress+0x80>)
 800ce18:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 800ce1a:	4b0a      	ldr	r3, [pc, #40]	; (800ce44 <BleGetBdAddress+0x80>)
 800ce1c:	617b      	str	r3, [r7, #20]
 800ce1e:	e00b      	b.n	800ce38 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800ce20:	2000      	movs	r0, #0
 800ce22:	f7ff fbd9 	bl	800c5d8 <OTP_Read>
 800ce26:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d002      	beq.n	800ce34 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	617b      	str	r3, [r7, #20]
 800ce32:	e001      	b.n	800ce38 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 800ce34:	4b04      	ldr	r3, [pc, #16]	; (800ce48 <BleGetBdAddress+0x84>)
 800ce36:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 800ce38:	697b      	ldr	r3, [r7, #20]
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	3718      	adds	r7, #24
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd80      	pop	{r7, pc}
 800ce42:	bf00      	nop
 800ce44:	200004c4 	.word	0x200004c4
 800ce48:	0800f0e8 	.word	0x0800f0e8

0800ce4c <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b082      	sub	sp, #8
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800ce54:	2100      	movs	r1, #0
 800ce56:	2020      	movs	r0, #32
 800ce58:	f7f4 ffba 	bl	8001dd0 <UTIL_SEQ_SetTask>
  return;
 800ce5c:	bf00      	nop
}
 800ce5e:	3708      	adds	r7, #8
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}

0800ce64 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b082      	sub	sp, #8
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800ce6c:	2001      	movs	r0, #1
 800ce6e:	f7f5 f815 	bl	8001e9c <UTIL_SEQ_SetEvt>
  return;
 800ce72:	bf00      	nop
}
 800ce74:	3708      	adds	r7, #8
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}

0800ce7a <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800ce7a:	b580      	push	{r7, lr}
 800ce7c:	b082      	sub	sp, #8
 800ce7e:	af00      	add	r7, sp, #0
 800ce80:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800ce82:	2001      	movs	r0, #1
 800ce84:	f7f5 f828 	bl	8001ed8 <UTIL_SEQ_WaitEvt>
  return;
 800ce88:	bf00      	nop
}
 800ce8a:	3708      	adds	r7, #8
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}

0800ce90 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b084      	sub	sp, #16
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload; 
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	60fb      	str	r3, [r7, #12]
  
  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	685b      	ldr	r3, [r3, #4]
 800cea0:	3308      	adds	r3, #8
 800cea2:	4618      	mov	r0, r3
 800cea4:	f7fe fe96 	bl	800bbd4 <SVCCTL_UserEvtRx>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800ceac:	7afb      	ldrb	r3, [r7, #11]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d003      	beq.n	800ceba <BLE_UserEvtRx+0x2a>
{
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	2201      	movs	r2, #1
 800ceb6:	701a      	strb	r2, [r3, #0]
}
  else
{
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 800ceb8:	e002      	b.n	800cec0 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	2200      	movs	r2, #0
 800cebe:	701a      	strb	r2, [r3, #0]
}
 800cec0:	bf00      	nop
 800cec2:	3710      	adds	r7, #16
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}

0800cec8 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b084      	sub	sp, #16
 800cecc:	af00      	add	r7, sp, #0
 800cece:	4603      	mov	r3, r0
 800ced0:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 800ced2:	79fb      	ldrb	r3, [r7, #7]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d002      	beq.n	800cede <BLE_StatusNot+0x16>
 800ced8:	2b01      	cmp	r3, #1
 800ceda:	d006      	beq.n	800ceea <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 800cedc:	e00b      	b.n	800cef6 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800cede:	233f      	movs	r3, #63	; 0x3f
 800cee0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800cee2:	68f8      	ldr	r0, [r7, #12]
 800cee4:	f7f4 ff9e 	bl	8001e24 <UTIL_SEQ_PauseTask>
      break;
 800cee8:	e005      	b.n	800cef6 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800ceea:	233f      	movs	r3, #63	; 0x3f
 800ceec:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800ceee:	68f8      	ldr	r0, [r7, #12]
 800cef0:	f7f4 ffb6 	bl	8001e60 <UTIL_SEQ_ResumeTask>
      break;
 800cef4:	bf00      	nop
  }
  return;
 800cef6:	bf00      	nop
}
 800cef8:	3710      	adds	r7, #16
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}
	...

0800cf00 <P2PC_APP_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PC_APP_Init(void)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b082      	sub	sp, #8
 800cf04:	af00      	add	r7, sp, #0
  uint8_t index =0;
 800cf06:	2300      	movs	r3, #0
 800cf08:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN P2PC_APP_Init_1 */

  UTIL_SEQ_RegTask( 1<< CFG_TASK_SEARCH_SERVICE_ID, UTIL_SEQ_RFU, Update_Service );
 800cf0a:	4a0d      	ldr	r2, [pc, #52]	; (800cf40 <P2PC_APP_Init+0x40>)
 800cf0c:	2100      	movs	r1, #0
 800cf0e:	2004      	movs	r0, #4
 800cf10:	f7f4 ff3e 	bl	8001d90 <UTIL_SEQ_RegTask>

  /**
   * Initialize LedButton Service
   */

  for(index = 0; index < BLE_CFG_CLT_MAX_NBR_CB; index++)
 800cf14:	2300      	movs	r3, #0
 800cf16:	71fb      	strb	r3, [r7, #7]
 800cf18:	e008      	b.n	800cf2c <P2PC_APP_Init+0x2c>
  {
    aP2PClientContext[index].state= APP_BLE_IDLE;
 800cf1a:	79fb      	ldrb	r3, [r7, #7]
 800cf1c:	4a09      	ldr	r2, [pc, #36]	; (800cf44 <P2PC_APP_Init+0x44>)
 800cf1e:	011b      	lsls	r3, r3, #4
 800cf20:	4413      	add	r3, r2
 800cf22:	2200      	movs	r2, #0
 800cf24:	701a      	strb	r2, [r3, #0]
  for(index = 0; index < BLE_CFG_CLT_MAX_NBR_CB; index++)
 800cf26:	79fb      	ldrb	r3, [r7, #7]
 800cf28:	3301      	adds	r3, #1
 800cf2a:	71fb      	strb	r3, [r7, #7]
 800cf2c:	79fb      	ldrb	r3, [r7, #7]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d0f3      	beq.n	800cf1a <P2PC_APP_Init+0x1a>
  }

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterCltHandler(Event_Handler);
 800cf32:	4805      	ldr	r0, [pc, #20]	; (800cf48 <P2PC_APP_Init+0x48>)
 800cf34:	f7fe fe34 	bl	800bba0 <SVCCTL_RegisterCltHandler>
#endif

/* USER CODE BEGIN P2PC_APP_Init_2 */

/* USER CODE END P2PC_APP_Init_2 */
  return;
 800cf38:	bf00      	nop
}
 800cf3a:	3708      	adds	r7, #8
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd80      	pop	{r7, pc}
 800cf40:	0800d505 	.word	0x0800d505
 800cf44:	20000370 	.word	0x20000370
 800cf48:	0800cfa9 	.word	0x0800cfa9

0800cf4c <P2PC_APP_Notification>:

void P2PC_APP_Notification(P2PC_APP_ConnHandle_Not_evt_t *pNotification)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b084      	sub	sp, #16
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PC_APP_Notification_1 */

/* USER CODE END P2PC_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	781b      	ldrb	r3, [r3, #0]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d01b      	beq.n	800cf94 <P2PC_APP_Notification+0x48>
 800cf5c:	2b01      	cmp	r3, #1
 800cf5e:	d000      	beq.n	800cf62 <P2PC_APP_Notification+0x16>

    default:
/* USER CODE BEGIN P2P_Evt_Opcode_Default */

/* USER CODE END P2P_Evt_Opcode_Default */
      break;
 800cf60:	e019      	b.n	800cf96 <P2PC_APP_Notification+0x4a>
      uint8_t index = 0;
 800cf62:	2300      	movs	r3, #0
 800cf64:	73fb      	strb	r3, [r7, #15]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800cf66:	e005      	b.n	800cf74 <P2PC_APP_Notification+0x28>
        aP2PClientContext[index].state = APP_BLE_IDLE;
 800cf68:	7bfb      	ldrb	r3, [r7, #15]
 800cf6a:	4a0d      	ldr	r2, [pc, #52]	; (800cfa0 <P2PC_APP_Notification+0x54>)
 800cf6c:	011b      	lsls	r3, r3, #4
 800cf6e:	4413      	add	r3, r2
 800cf70:	2200      	movs	r2, #0
 800cf72:	701a      	strb	r2, [r3, #0]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800cf74:	7bfb      	ldrb	r3, [r7, #15]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d106      	bne.n	800cf88 <P2PC_APP_Notification+0x3c>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
 800cf7a:	7bfb      	ldrb	r3, [r7, #15]
 800cf7c:	4a08      	ldr	r2, [pc, #32]	; (800cfa0 <P2PC_APP_Notification+0x54>)
 800cf7e:	011b      	lsls	r3, r3, #4
 800cf80:	4413      	add	r3, r2
 800cf82:	781b      	ldrb	r3, [r3, #0]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d1ef      	bne.n	800cf68 <P2PC_APP_Notification+0x1c>
      HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800cf88:	2200      	movs	r2, #0
 800cf8a:	2120      	movs	r1, #32
 800cf8c:	4805      	ldr	r0, [pc, #20]	; (800cfa4 <P2PC_APP_Notification+0x58>)
 800cf8e:	f7f5 ffa9 	bl	8002ee4 <HAL_GPIO_WritePin>
      break;
 800cf92:	e000      	b.n	800cf96 <P2PC_APP_Notification+0x4a>
      break;
 800cf94:	bf00      	nop
/* USER CODE BEGIN P2PC_APP_Notification_2 */

/* USER CODE END P2PC_APP_Notification_2 */
  return;
  }
}
 800cf96:	bf00      	nop
 800cf98:	3710      	adds	r7, #16
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}
 800cf9e:	bf00      	nop
 800cfa0:	20000370 	.word	0x20000370
 800cfa4:	48000400 	.word	0x48000400

0800cfa8 <Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Event_Handler(void *Event)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b094      	sub	sp, #80	; 0x50
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;

  P2P_Client_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	3301      	adds	r3, #1
 800cfba:	643b      	str	r3, [r7, #64]	; 0x40

  switch(event_pckt->evt)
 800cfbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfbe:	781b      	ldrb	r3, [r3, #0]
 800cfc0:	2bff      	cmp	r3, #255	; 0xff
 800cfc2:	d000      	beq.n	800cfc6 <Event_Handler+0x1e>
    }

    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800cfc4:	e27b      	b.n	800d4be <Event_Handler+0x516>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 800cfc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfc8:	3302      	adds	r3, #2
 800cfca:	63fb      	str	r3, [r7, #60]	; 0x3c
      switch(blue_evt->ecode)
 800cfcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfce:	881b      	ldrh	r3, [r3, #0]
 800cfd0:	b29b      	uxth	r3, r3
 800cfd2:	f6a3 4304 	subw	r3, r3, #3076	; 0xc04
 800cfd6:	2b0c      	cmp	r3, #12
 800cfd8:	f200 8265 	bhi.w	800d4a6 <Event_Handler+0x4fe>
 800cfdc:	a201      	add	r2, pc, #4	; (adr r2, 800cfe4 <Event_Handler+0x3c>)
 800cfde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfe2:	bf00      	nop
 800cfe4:	0800d2d7 	.word	0x0800d2d7
 800cfe8:	0800d4a7 	.word	0x0800d4a7
 800cfec:	0800d1b9 	.word	0x0800d1b9
 800cff0:	0800d4a7 	.word	0x0800d4a7
 800cff4:	0800d4a7 	.word	0x0800d4a7
 800cff8:	0800d4a7 	.word	0x0800d4a7
 800cffc:	0800d019 	.word	0x0800d019
 800d000:	0800d4a7 	.word	0x0800d4a7
 800d004:	0800d4a7 	.word	0x0800d4a7
 800d008:	0800d4a7 	.word	0x0800d4a7
 800d00c:	0800d4a7 	.word	0x0800d4a7
 800d010:	0800d3e1 	.word	0x0800d3e1
 800d014:	0800d45d 	.word	0x0800d45d
          aci_att_read_by_group_type_resp_event_rp0 *pr = (void*)blue_evt->data;
 800d018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d01a:	3302      	adds	r3, #2
 800d01c:	633b      	str	r3, [r7, #48]	; 0x30
          handle = pr->Connection_Handle;
 800d01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d020:	781a      	ldrb	r2, [r3, #0]
 800d022:	785b      	ldrb	r3, [r3, #1]
 800d024:	021b      	lsls	r3, r3, #8
 800d026:	4313      	orrs	r3, r2
 800d028:	85fb      	strh	r3, [r7, #46]	; 0x2e
          index = 0;
 800d02a:	2300      	movs	r3, #0
 800d02c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d030:	e02e      	b.n	800d090 <Event_Handler+0xe8>
            status = APP_BLE_Get_Client_Connection_Status(aP2PClientContext[index].connHandle);
 800d032:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800d036:	4aab      	ldr	r2, [pc, #684]	; (800d2e4 <Event_Handler+0x33c>)
 800d038:	011b      	lsls	r3, r3, #4
 800d03a:	4413      	add	r3, r2
 800d03c:	3302      	adds	r3, #2
 800d03e:	881b      	ldrh	r3, [r3, #0]
 800d040:	4618      	mov	r0, r3
 800d042:	f7ff fd75 	bl	800cb30 <APP_BLE_Get_Client_Connection_Status>
 800d046:	4603      	mov	r3, r0
 800d048:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            if((aP2PClientContext[index].state == APP_BLE_CONNECTED_CLIENT)&&
 800d04c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800d050:	4aa4      	ldr	r2, [pc, #656]	; (800d2e4 <Event_Handler+0x33c>)
 800d052:	011b      	lsls	r3, r3, #4
 800d054:	4413      	add	r3, r2
 800d056:	781b      	ldrb	r3, [r3, #0]
 800d058:	2b06      	cmp	r3, #6
 800d05a:	d114      	bne.n	800d086 <Event_Handler+0xde>
 800d05c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d060:	2b00      	cmp	r3, #0
 800d062:	d110      	bne.n	800d086 <Event_Handler+0xde>
              aP2PClientContext[index].state = APP_BLE_IDLE;
 800d064:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800d068:	4a9e      	ldr	r2, [pc, #632]	; (800d2e4 <Event_Handler+0x33c>)
 800d06a:	011b      	lsls	r3, r3, #4
 800d06c:	4413      	add	r3, r2
 800d06e:	2200      	movs	r2, #0
 800d070:	701a      	strb	r2, [r3, #0]
              aP2PClientContext[index].connHandle = 0xFFFF;
 800d072:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800d076:	4a9b      	ldr	r2, [pc, #620]	; (800d2e4 <Event_Handler+0x33c>)
 800d078:	011b      	lsls	r3, r3, #4
 800d07a:	4413      	add	r3, r2
 800d07c:	3302      	adds	r3, #2
 800d07e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d082:	801a      	strh	r2, [r3, #0]
              break;
 800d084:	e010      	b.n	800d0a8 <Event_Handler+0x100>
            index++;
 800d086:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800d08a:	3301      	adds	r3, #1
 800d08c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d090:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800d094:	2b00      	cmp	r3, #0
 800d096:	d107      	bne.n	800d0a8 <Event_Handler+0x100>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
 800d098:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800d09c:	4a91      	ldr	r2, [pc, #580]	; (800d2e4 <Event_Handler+0x33c>)
 800d09e:	011b      	lsls	r3, r3, #4
 800d0a0:	4413      	add	r3, r2
 800d0a2:	781b      	ldrb	r3, [r3, #0]
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d1c4      	bne.n	800d032 <Event_Handler+0x8a>
          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800d0a8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	f040 81fc 	bne.w	800d4aa <Event_Handler+0x502>
            aP2PClientContext[index].connHandle= handle;
 800d0b2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800d0b6:	4a8b      	ldr	r2, [pc, #556]	; (800d2e4 <Event_Handler+0x33c>)
 800d0b8:	011b      	lsls	r3, r3, #4
 800d0ba:	4413      	add	r3, r2
 800d0bc:	3302      	adds	r3, #2
 800d0be:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d0c0:	801a      	strh	r2, [r3, #0]
            numServ = (pr->Data_Length) / pr->Attribute_Data_Length;
 800d0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c4:	78da      	ldrb	r2, [r3, #3]
 800d0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c8:	789b      	ldrb	r3, [r3, #2]
 800d0ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0ce:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
          if (pr->Attribute_Data_Length == 20)
 800d0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d4:	789b      	ldrb	r3, [r3, #2]
 800d0d6:	2b14      	cmp	r3, #20
 800d0d8:	f040 81e7 	bne.w	800d4aa <Event_Handler+0x502>
            idx = 16;
 800d0dc:	2310      	movs	r3, #16
 800d0de:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
              for (i=0; i<numServ; i++)
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800d0e8:	e05f      	b.n	800d1aa <Event_Handler+0x202>
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx]);
 800d0ea:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800d0ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0f0:	4413      	add	r3, r2
 800d0f2:	791b      	ldrb	r3, [r3, #4]
 800d0f4:	b29a      	uxth	r2, r3
 800d0f6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800d0fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d0fc:	440b      	add	r3, r1
 800d0fe:	3304      	adds	r3, #4
 800d100:	3301      	adds	r3, #1
 800d102:	781b      	ldrb	r3, [r3, #0]
 800d104:	b29b      	uxth	r3, r3
 800d106:	021b      	lsls	r3, r3, #8
 800d108:	b29b      	uxth	r3, r3
 800d10a:	4313      	orrs	r3, r2
 800d10c:	857b      	strh	r3, [r7, #42]	; 0x2a
                if(uuid == P2P_SERVICE_UUID)
 800d10e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d110:	f64f 6240 	movw	r2, #65088	; 0xfe40
 800d114:	4293      	cmp	r3, r2
 800d116:	d13e      	bne.n	800d196 <Event_Handler+0x1ee>
                aP2PClientContext[index].P2PServiceHandle = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-16]);
 800d118:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800d11c:	3b10      	subs	r3, #16
 800d11e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d120:	4413      	add	r3, r2
 800d122:	791b      	ldrb	r3, [r3, #4]
 800d124:	b299      	uxth	r1, r3
 800d126:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800d12a:	3b10      	subs	r3, #16
 800d12c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d12e:	4413      	add	r3, r2
 800d130:	3304      	adds	r3, #4
 800d132:	3301      	adds	r3, #1
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	b29b      	uxth	r3, r3
 800d138:	021b      	lsls	r3, r3, #8
 800d13a:	b29a      	uxth	r2, r3
 800d13c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800d140:	430a      	orrs	r2, r1
 800d142:	b291      	uxth	r1, r2
 800d144:	4a67      	ldr	r2, [pc, #412]	; (800d2e4 <Event_Handler+0x33c>)
 800d146:	011b      	lsls	r3, r3, #4
 800d148:	4413      	add	r3, r2
 800d14a:	3304      	adds	r3, #4
 800d14c:	460a      	mov	r2, r1
 800d14e:	801a      	strh	r2, [r3, #0]
                aP2PClientContext[index].P2PServiceEndHandle = UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-14]);
 800d150:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800d154:	3b0e      	subs	r3, #14
 800d156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d158:	4413      	add	r3, r2
 800d15a:	791b      	ldrb	r3, [r3, #4]
 800d15c:	b299      	uxth	r1, r3
 800d15e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800d162:	3b0e      	subs	r3, #14
 800d164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d166:	4413      	add	r3, r2
 800d168:	3304      	adds	r3, #4
 800d16a:	3301      	adds	r3, #1
 800d16c:	781b      	ldrb	r3, [r3, #0]
 800d16e:	b29b      	uxth	r3, r3
 800d170:	021b      	lsls	r3, r3, #8
 800d172:	b29a      	uxth	r2, r3
 800d174:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800d178:	430a      	orrs	r2, r1
 800d17a:	b291      	uxth	r1, r2
 800d17c:	4a59      	ldr	r2, [pc, #356]	; (800d2e4 <Event_Handler+0x33c>)
 800d17e:	011b      	lsls	r3, r3, #4
 800d180:	4413      	add	r3, r2
 800d182:	3306      	adds	r3, #6
 800d184:	460a      	mov	r2, r1
 800d186:	801a      	strh	r2, [r3, #0]
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_CHARACS ;
 800d188:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800d18c:	4a55      	ldr	r2, [pc, #340]	; (800d2e4 <Event_Handler+0x33c>)
 800d18e:	011b      	lsls	r3, r3, #4
 800d190:	4413      	add	r3, r2
 800d192:	2208      	movs	r2, #8
 800d194:	701a      	strb	r2, [r3, #0]
                idx += 6;
 800d196:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800d19a:	3306      	adds	r3, #6
 800d19c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
              for (i=0; i<numServ; i++)
 800d1a0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d1a4:	3301      	adds	r3, #1
 800d1a6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800d1aa:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800d1ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d399      	bcc.n	800d0ea <Event_Handler+0x142>
        break;
 800d1b6:	e178      	b.n	800d4aa <Event_Handler+0x502>
          aci_att_read_by_type_resp_event_rp0 *pr = (void*)blue_evt->data;
 800d1b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1ba:	3302      	adds	r3, #2
 800d1bc:	627b      	str	r3, [r7, #36]	; 0x24
          index = 0;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d1c4:	e004      	b.n	800d1d0 <Event_Handler+0x228>
            index++;
 800d1c6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800d1ca:	3301      	adds	r3, #1
 800d1cc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d1d0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d10b      	bne.n	800d1f0 <Event_Handler+0x248>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800d1d8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800d1dc:	4a41      	ldr	r2, [pc, #260]	; (800d2e4 <Event_Handler+0x33c>)
 800d1de:	011b      	lsls	r3, r3, #4
 800d1e0:	4413      	add	r3, r2
 800d1e2:	3302      	adds	r3, #2
 800d1e4:	881a      	ldrh	r2, [r3, #0]
 800d1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e8:	881b      	ldrh	r3, [r3, #0]
 800d1ea:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d1ec:	429a      	cmp	r2, r3
 800d1ee:	d1ea      	bne.n	800d1c6 <Event_Handler+0x21e>
          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800d1f0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	f040 815a 	bne.w	800d4ae <Event_Handler+0x506>
            idx = 17;
 800d1fa:	2311      	movs	r3, #17
 800d1fc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
            if (pr->Handle_Value_Pair_Length == 21)
 800d200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d202:	789b      	ldrb	r3, [r3, #2]
 800d204:	2b15      	cmp	r3, #21
 800d206:	f040 8152 	bne.w	800d4ae <Event_Handler+0x506>
              pr->Data_Length -= 1;
 800d20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d20c:	78db      	ldrb	r3, [r3, #3]
 800d20e:	3b01      	subs	r3, #1
 800d210:	b2da      	uxtb	r2, r3
 800d212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d214:	70da      	strb	r2, [r3, #3]
              while(pr->Data_Length > 0)
 800d216:	e059      	b.n	800d2cc <Event_Handler+0x324>
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx]);
 800d218:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800d21c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d21e:	4413      	add	r3, r2
 800d220:	791b      	ldrb	r3, [r3, #4]
 800d222:	b29a      	uxth	r2, r3
 800d224:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800d228:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d22a:	440b      	add	r3, r1
 800d22c:	3304      	adds	r3, #4
 800d22e:	3301      	adds	r3, #1
 800d230:	781b      	ldrb	r3, [r3, #0]
 800d232:	b29b      	uxth	r3, r3
 800d234:	021b      	lsls	r3, r3, #8
 800d236:	b29b      	uxth	r3, r3
 800d238:	4313      	orrs	r3, r2
 800d23a:	847b      	strh	r3, [r7, #34]	; 0x22
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-14]);
 800d23c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800d240:	3b0e      	subs	r3, #14
 800d242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d244:	4413      	add	r3, r2
 800d246:	791b      	ldrb	r3, [r3, #4]
 800d248:	b29a      	uxth	r2, r3
 800d24a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800d24e:	3b0e      	subs	r3, #14
 800d250:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d252:	440b      	add	r3, r1
 800d254:	3304      	adds	r3, #4
 800d256:	3301      	adds	r3, #1
 800d258:	781b      	ldrb	r3, [r3, #0]
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	021b      	lsls	r3, r3, #8
 800d25e:	b29b      	uxth	r3, r3
 800d260:	4313      	orrs	r3, r2
 800d262:	843b      	strh	r3, [r7, #32]
                if(uuid == P2P_WRITE_CHAR_UUID)
 800d264:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d266:	f64f 6241 	movw	r2, #65089	; 0xfe41
 800d26a:	4293      	cmp	r3, r2
 800d26c:	d10f      	bne.n	800d28e <Event_Handler+0x2e6>
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_WRITE_DESC;
 800d26e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800d272:	4a1c      	ldr	r2, [pc, #112]	; (800d2e4 <Event_Handler+0x33c>)
 800d274:	011b      	lsls	r3, r3, #4
 800d276:	4413      	add	r3, r2
 800d278:	2209      	movs	r2, #9
 800d27a:	701a      	strb	r2, [r3, #0]
                  aP2PClientContext[index].P2PWriteToServerCharHdle = handle;
 800d27c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800d280:	4a18      	ldr	r2, [pc, #96]	; (800d2e4 <Event_Handler+0x33c>)
 800d282:	011b      	lsls	r3, r3, #4
 800d284:	4413      	add	r3, r2
 800d286:	3308      	adds	r3, #8
 800d288:	8c3a      	ldrh	r2, [r7, #32]
 800d28a:	801a      	strh	r2, [r3, #0]
 800d28c:	e013      	b.n	800d2b6 <Event_Handler+0x30e>
                else if(uuid == P2P_NOTIFY_CHAR_UUID)
 800d28e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d290:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800d294:	4293      	cmp	r3, r2
 800d296:	d10e      	bne.n	800d2b6 <Event_Handler+0x30e>
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC;
 800d298:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800d29c:	4a11      	ldr	r2, [pc, #68]	; (800d2e4 <Event_Handler+0x33c>)
 800d29e:	011b      	lsls	r3, r3, #4
 800d2a0:	4413      	add	r3, r2
 800d2a2:	220a      	movs	r2, #10
 800d2a4:	701a      	strb	r2, [r3, #0]
                  aP2PClientContext[index].P2PNotificationCharHdle = handle;
 800d2a6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800d2aa:	4a0e      	ldr	r2, [pc, #56]	; (800d2e4 <Event_Handler+0x33c>)
 800d2ac:	011b      	lsls	r3, r3, #4
 800d2ae:	4413      	add	r3, r2
 800d2b0:	330c      	adds	r3, #12
 800d2b2:	8c3a      	ldrh	r2, [r7, #32]
 800d2b4:	801a      	strh	r2, [r3, #0]
                pr->Data_Length -= 21;
 800d2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b8:	78db      	ldrb	r3, [r3, #3]
 800d2ba:	3b15      	subs	r3, #21
 800d2bc:	b2da      	uxtb	r2, r3
 800d2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c0:	70da      	strb	r2, [r3, #3]
                idx += 21;
 800d2c2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800d2c6:	3315      	adds	r3, #21
 800d2c8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
              while(pr->Data_Length > 0)
 800d2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ce:	78db      	ldrb	r3, [r3, #3]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d1a1      	bne.n	800d218 <Event_Handler+0x270>
        break;
 800d2d4:	e0eb      	b.n	800d4ae <Event_Handler+0x506>
          aci_att_find_info_resp_event_rp0 *pr = (void*)blue_evt->data;
 800d2d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2d8:	3302      	adds	r3, #2
 800d2da:	61fb      	str	r3, [r7, #28]
          index = 0;
 800d2dc:	2300      	movs	r3, #0
 800d2de:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d2e2:	e006      	b.n	800d2f2 <Event_Handler+0x34a>
 800d2e4:	20000370 	.word	0x20000370
            index++;
 800d2e8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d2ec:	3301      	adds	r3, #1
 800d2ee:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d2f2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d10b      	bne.n	800d312 <Event_Handler+0x36a>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800d2fa:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d2fe:	4a73      	ldr	r2, [pc, #460]	; (800d4cc <Event_Handler+0x524>)
 800d300:	011b      	lsls	r3, r3, #4
 800d302:	4413      	add	r3, r2
 800d304:	3302      	adds	r3, #2
 800d306:	881a      	ldrh	r2, [r3, #0]
 800d308:	69fb      	ldr	r3, [r7, #28]
 800d30a:	881b      	ldrh	r3, [r3, #0]
 800d30c:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d30e:	429a      	cmp	r2, r3
 800d310:	d1ea      	bne.n	800d2e8 <Event_Handler+0x340>
          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800d312:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d316:	2b00      	cmp	r3, #0
 800d318:	f040 80cb 	bne.w	800d4b2 <Event_Handler+0x50a>
            numDesc = (pr->Event_Data_Length) / 4;
 800d31c:	69fb      	ldr	r3, [r7, #28]
 800d31e:	78db      	ldrb	r3, [r3, #3]
 800d320:	089b      	lsrs	r3, r3, #2
 800d322:	76fb      	strb	r3, [r7, #27]
            idx = 0;
 800d324:	2300      	movs	r3, #0
 800d326:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            if (pr->Format == UUID_TYPE_16)
 800d32a:	69fb      	ldr	r3, [r7, #28]
 800d32c:	789b      	ldrb	r3, [r3, #2]
 800d32e:	2b01      	cmp	r3, #1
 800d330:	f040 80bf 	bne.w	800d4b2 <Event_Handler+0x50a>
              for (i=0; i<numDesc; i++)
 800d334:	2300      	movs	r3, #0
 800d336:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800d33a:	e04b      	b.n	800d3d4 <Event_Handler+0x42c>
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx]);
 800d33c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800d340:	69fa      	ldr	r2, [r7, #28]
 800d342:	4413      	add	r3, r2
 800d344:	791b      	ldrb	r3, [r3, #4]
 800d346:	b29a      	uxth	r2, r3
 800d348:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800d34c:	69f9      	ldr	r1, [r7, #28]
 800d34e:	440b      	add	r3, r1
 800d350:	3304      	adds	r3, #4
 800d352:	3301      	adds	r3, #1
 800d354:	781b      	ldrb	r3, [r3, #0]
 800d356:	b29b      	uxth	r3, r3
 800d358:	021b      	lsls	r3, r3, #8
 800d35a:	b29b      	uxth	r3, r3
 800d35c:	4313      	orrs	r3, r2
 800d35e:	833b      	strh	r3, [r7, #24]
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx+2]);
 800d360:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800d364:	3302      	adds	r3, #2
 800d366:	69fa      	ldr	r2, [r7, #28]
 800d368:	4413      	add	r3, r2
 800d36a:	791b      	ldrb	r3, [r3, #4]
 800d36c:	b29a      	uxth	r2, r3
 800d36e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800d372:	3302      	adds	r3, #2
 800d374:	69f9      	ldr	r1, [r7, #28]
 800d376:	440b      	add	r3, r1
 800d378:	3304      	adds	r3, #4
 800d37a:	3301      	adds	r3, #1
 800d37c:	781b      	ldrb	r3, [r3, #0]
 800d37e:	b29b      	uxth	r3, r3
 800d380:	021b      	lsls	r3, r3, #8
 800d382:	b29b      	uxth	r3, r3
 800d384:	4313      	orrs	r3, r2
 800d386:	82fb      	strh	r3, [r7, #22]
                if(uuid == CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID)
 800d388:	8afb      	ldrh	r3, [r7, #22]
 800d38a:	f642 1202 	movw	r2, #10498	; 0x2902
 800d38e:	4293      	cmp	r3, r2
 800d390:	d116      	bne.n	800d3c0 <Event_Handler+0x418>
                  if( aP2PClientContext[index].state == APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC)
 800d392:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d396:	4a4d      	ldr	r2, [pc, #308]	; (800d4cc <Event_Handler+0x524>)
 800d398:	011b      	lsls	r3, r3, #4
 800d39a:	4413      	add	r3, r2
 800d39c:	781b      	ldrb	r3, [r3, #0]
 800d39e:	2b0a      	cmp	r3, #10
 800d3a0:	d10e      	bne.n	800d3c0 <Event_Handler+0x418>
                    aP2PClientContext[index].P2PNotificationDescHandle = handle;
 800d3a2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d3a6:	4a49      	ldr	r2, [pc, #292]	; (800d4cc <Event_Handler+0x524>)
 800d3a8:	011b      	lsls	r3, r3, #4
 800d3aa:	4413      	add	r3, r2
 800d3ac:	330e      	adds	r3, #14
 800d3ae:	8b3a      	ldrh	r2, [r7, #24]
 800d3b0:	801a      	strh	r2, [r3, #0]
                    aP2PClientContext[index].state = APP_BLE_ENABLE_NOTIFICATION_DESC;
 800d3b2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d3b6:	4a45      	ldr	r2, [pc, #276]	; (800d4cc <Event_Handler+0x524>)
 800d3b8:	011b      	lsls	r3, r3, #4
 800d3ba:	4413      	add	r3, r2
 800d3bc:	220b      	movs	r2, #11
 800d3be:	701a      	strb	r2, [r3, #0]
                idx += 4;
 800d3c0:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800d3c4:	3304      	adds	r3, #4
 800d3c6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
              for (i=0; i<numDesc; i++)
 800d3ca:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800d3ce:	3301      	adds	r3, #1
 800d3d0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800d3d4:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800d3d8:	7efb      	ldrb	r3, [r7, #27]
 800d3da:	429a      	cmp	r2, r3
 800d3dc:	d3ae      	bcc.n	800d33c <Event_Handler+0x394>
        break; /*EVT_BLUE_ATT_FIND_INFORMATION_RESP*/
 800d3de:	e068      	b.n	800d4b2 <Event_Handler+0x50a>
          aci_gatt_notification_event_rp0 *pr = (void*)blue_evt->data;
 800d3e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3e2:	3302      	adds	r3, #2
 800d3e4:	637b      	str	r3, [r7, #52]	; 0x34
          index = 0;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d3ec:	e004      	b.n	800d3f8 <Event_Handler+0x450>
            index++;
 800d3ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d3f2:	3301      	adds	r3, #1
 800d3f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d3f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d10b      	bne.n	800d418 <Event_Handler+0x470>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800d400:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d404:	4a31      	ldr	r2, [pc, #196]	; (800d4cc <Event_Handler+0x524>)
 800d406:	011b      	lsls	r3, r3, #4
 800d408:	4413      	add	r3, r2
 800d40a:	3302      	adds	r3, #2
 800d40c:	881a      	ldrh	r2, [r3, #0]
 800d40e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d410:	881b      	ldrh	r3, [r3, #0]
 800d412:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d414:	429a      	cmp	r2, r3
 800d416:	d1ea      	bne.n	800d3ee <Event_Handler+0x446>
          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800d418:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d14a      	bne.n	800d4b6 <Event_Handler+0x50e>
            if ( (pr->Attribute_Handle == aP2PClientContext[index].P2PNotificationCharHdle) &&
 800d420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d422:	885b      	ldrh	r3, [r3, #2]
 800d424:	b29a      	uxth	r2, r3
 800d426:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d42a:	4928      	ldr	r1, [pc, #160]	; (800d4cc <Event_Handler+0x524>)
 800d42c:	011b      	lsls	r3, r3, #4
 800d42e:	440b      	add	r3, r1
 800d430:	330c      	adds	r3, #12
 800d432:	881b      	ldrh	r3, [r3, #0]
 800d434:	429a      	cmp	r2, r3
 800d436:	d13e      	bne.n	800d4b6 <Event_Handler+0x50e>
                    (pr->Attribute_Value_Length == (PAYLOAD_LENGTH)) )
 800d438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d43a:	791b      	ldrb	r3, [r3, #4]
            if ( (pr->Attribute_Handle == aP2PClientContext[index].P2PNotificationCharHdle) &&
 800d43c:	2bcd      	cmp	r3, #205	; 0xcd
 800d43e:	d13a      	bne.n	800d4b6 <Event_Handler+0x50e>
              Notification.P2P_Client_Evt_Opcode = P2P_NOTIFICATION_INFO_RECEIVED_EVT;
 800d440:	2302      	movs	r3, #2
 800d442:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length = pr->Attribute_Value_Length;
 800d444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d446:	791b      	ldrb	r3, [r3, #4]
 800d448:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload = &pr->Attribute_Value[0];
 800d44a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d44c:	3305      	adds	r3, #5
 800d44e:	60fb      	str	r3, [r7, #12]
              Gatt_Notification(&Notification);
 800d450:	f107 0308 	add.w	r3, r7, #8
 800d454:	4618      	mov	r0, r3
 800d456:	f000 f83b 	bl	800d4d0 <Gatt_Notification>
        break;/* end EVT_BLUE_GATT_NOTIFICATION */
 800d45a:	e02c      	b.n	800d4b6 <Event_Handler+0x50e>
          aci_gatt_proc_complete_event_rp0 *pr = (void*)blue_evt->data;
 800d45c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d45e:	3302      	adds	r3, #2
 800d460:	63bb      	str	r3, [r7, #56]	; 0x38
          index = 0;
 800d462:	2300      	movs	r3, #0
 800d464:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d468:	e004      	b.n	800d474 <Event_Handler+0x4cc>
            index++;
 800d46a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d46e:	3301      	adds	r3, #1
 800d470:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d474:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d10b      	bne.n	800d494 <Event_Handler+0x4ec>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800d47c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d480:	4a12      	ldr	r2, [pc, #72]	; (800d4cc <Event_Handler+0x524>)
 800d482:	011b      	lsls	r3, r3, #4
 800d484:	4413      	add	r3, r2
 800d486:	3302      	adds	r3, #2
 800d488:	881a      	ldrh	r2, [r3, #0]
 800d48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d48c:	881b      	ldrh	r3, [r3, #0]
 800d48e:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d490:	429a      	cmp	r2, r3
 800d492:	d1ea      	bne.n	800d46a <Event_Handler+0x4c2>
          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800d494:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d10e      	bne.n	800d4ba <Event_Handler+0x512>
            UTIL_SEQ_SetTask( 1<<CFG_TASK_SEARCH_SERVICE_ID, CFG_SCH_PRIO_0);
 800d49c:	2100      	movs	r1, #0
 800d49e:	2004      	movs	r0, #4
 800d4a0:	f7f4 fc96 	bl	8001dd0 <UTIL_SEQ_SetTask>
        break; /*EVT_BLUE_GATT_PROCEDURE_COMPLETE*/
 800d4a4:	e009      	b.n	800d4ba <Event_Handler+0x512>
          break;
 800d4a6:	bf00      	nop
 800d4a8:	e008      	b.n	800d4bc <Event_Handler+0x514>
        break;
 800d4aa:	bf00      	nop
 800d4ac:	e006      	b.n	800d4bc <Event_Handler+0x514>
        break;
 800d4ae:	bf00      	nop
 800d4b0:	e004      	b.n	800d4bc <Event_Handler+0x514>
        break; /*EVT_BLUE_ATT_FIND_INFORMATION_RESP*/
 800d4b2:	bf00      	nop
 800d4b4:	e002      	b.n	800d4bc <Event_Handler+0x514>
        break;/* end EVT_BLUE_GATT_NOTIFICATION */
 800d4b6:	bf00      	nop
 800d4b8:	e000      	b.n	800d4bc <Event_Handler+0x514>
        break; /*EVT_BLUE_GATT_PROCEDURE_COMPLETE*/
 800d4ba:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 800d4bc:	bf00      	nop
  }

  return(return_value);
 800d4be:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
}/* end BLE_CTRL_Event_Acknowledged_Status_t */
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	3750      	adds	r7, #80	; 0x50
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}
 800d4ca:	bf00      	nop
 800d4cc:	20000370 	.word	0x20000370

0800d4d0 <Gatt_Notification>:

void Gatt_Notification(P2P_Client_App_Notification_evt_t *pNotification)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b082      	sub	sp, #8
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Gatt_Notification_1*/

/* USER CODE END Gatt_Notification_1 */
  switch(pNotification->P2P_Client_Evt_Opcode)
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	781b      	ldrb	r3, [r3, #0]
 800d4dc:	2b02      	cmp	r3, #2
 800d4de:	d000      	beq.n	800d4e2 <Gatt_Notification+0x12>

    default:
/* USER CODE BEGIN P2P_Client_Evt_Opcode_Default */

/* USER CODE END P2P_Client_Evt_Opcode_Default */
      break;
 800d4e0:	e00a      	b.n	800d4f8 <Gatt_Notification+0x28>
		transmit_CDC_messege(pNotification->DataTransfered.pPayload, PAYLOAD_LENGTH);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	685b      	ldr	r3, [r3, #4]
 800d4e6:	21cd      	movs	r1, #205	; 0xcd
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f7f4 f8fb 	bl	80016e4 <transmit_CDC_messege>
    	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800d4ee:	2102      	movs	r1, #2
 800d4f0:	4803      	ldr	r0, [pc, #12]	; (800d500 <Gatt_Notification+0x30>)
 800d4f2:	f7f5 fd27 	bl	8002f44 <HAL_GPIO_TogglePin>
    break;
 800d4f6:	bf00      	nop
  }
/* USER CODE BEGIN Gatt_Notification_2*/
}
 800d4f8:	bf00      	nop
 800d4fa:	3708      	adds	r7, #8
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}
 800d500:	48000400 	.word	0x48000400

0800d504 <Update_Service>:
//
//  return;
//}

void Update_Service()
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b082      	sub	sp, #8
 800d508:	af00      	add	r7, sp, #0
  uint16_t enable = 0x0001;
 800d50a:	2301      	movs	r3, #1
 800d50c:	80bb      	strh	r3, [r7, #4]


  uint8_t index;

  index = 0;
 800d50e:	2300      	movs	r3, #0
 800d510:	71fb      	strb	r3, [r7, #7]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d512:	e094      	b.n	800d63e <Update_Service+0x13a>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
  {


    switch(aP2PClientContext[index].state)
 800d514:	79fb      	ldrb	r3, [r7, #7]
 800d516:	4a52      	ldr	r2, [pc, #328]	; (800d660 <Update_Service+0x15c>)
 800d518:	011b      	lsls	r3, r3, #4
 800d51a:	4413      	add	r3, r2
 800d51c:	781b      	ldrb	r3, [r3, #0]
 800d51e:	3b07      	subs	r3, #7
 800d520:	2b05      	cmp	r3, #5
 800d522:	f200 8088 	bhi.w	800d636 <Update_Service+0x132>
 800d526:	a201      	add	r2, pc, #4	; (adr r2, 800d52c <Update_Service+0x28>)
 800d528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d52c:	0800d637 	.word	0x0800d637
 800d530:	0800d545 	.word	0x0800d545
 800d534:	0800d571 	.word	0x0800d571
 800d538:	0800d5a1 	.word	0x0800d5a1
 800d53c:	0800d5d1 	.word	0x0800d5d1
 800d540:	0800d609 	.word	0x0800d609
      case APP_BLE_DISCOVER_SERVICES:
        //APP_DBG_MSG("P2P_DISCOVER_SERVICES\n");
        break;
      case APP_BLE_DISCOVER_CHARACS:
        //APP_DBG_MSG("* GATT : Discover P2P Characteristics\n");
        aci_gatt_disc_all_char_of_service(aP2PClientContext[index].connHandle,
 800d544:	79fb      	ldrb	r3, [r7, #7]
 800d546:	4a46      	ldr	r2, [pc, #280]	; (800d660 <Update_Service+0x15c>)
 800d548:	011b      	lsls	r3, r3, #4
 800d54a:	4413      	add	r3, r2
 800d54c:	3302      	adds	r3, #2
 800d54e:	8818      	ldrh	r0, [r3, #0]
 800d550:	79fb      	ldrb	r3, [r7, #7]
 800d552:	4a43      	ldr	r2, [pc, #268]	; (800d660 <Update_Service+0x15c>)
 800d554:	011b      	lsls	r3, r3, #4
 800d556:	4413      	add	r3, r2
 800d558:	3304      	adds	r3, #4
 800d55a:	8819      	ldrh	r1, [r3, #0]
 800d55c:	79fb      	ldrb	r3, [r7, #7]
 800d55e:	4a40      	ldr	r2, [pc, #256]	; (800d660 <Update_Service+0x15c>)
 800d560:	011b      	lsls	r3, r3, #4
 800d562:	4413      	add	r3, r2
 800d564:	3306      	adds	r3, #6
 800d566:	881b      	ldrh	r3, [r3, #0]
 800d568:	461a      	mov	r2, r3
 800d56a:	f7fd feed 	bl	800b348 <aci_gatt_disc_all_char_of_service>
                                          aP2PClientContext[index].P2PServiceHandle,
                                         aP2PClientContext[index].P2PServiceEndHandle);

        break;
 800d56e:	e063      	b.n	800d638 <Update_Service+0x134>
      case APP_BLE_DISCOVER_WRITE_DESC: /* Not Used - No decriptor */
        //APP_DBG_MSG("* GATT : Discover Descriptor of TX - Write Characteritic\n");
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800d570:	79fb      	ldrb	r3, [r7, #7]
 800d572:	4a3b      	ldr	r2, [pc, #236]	; (800d660 <Update_Service+0x15c>)
 800d574:	011b      	lsls	r3, r3, #4
 800d576:	4413      	add	r3, r2
 800d578:	3302      	adds	r3, #2
 800d57a:	8818      	ldrh	r0, [r3, #0]
 800d57c:	79fb      	ldrb	r3, [r7, #7]
 800d57e:	4a38      	ldr	r2, [pc, #224]	; (800d660 <Update_Service+0x15c>)
 800d580:	011b      	lsls	r3, r3, #4
 800d582:	4413      	add	r3, r2
 800d584:	3308      	adds	r3, #8
 800d586:	8819      	ldrh	r1, [r3, #0]
                                    aP2PClientContext[index].P2PWriteToServerCharHdle,
                                    aP2PClientContext[index].P2PWriteToServerCharHdle+2);
 800d588:	79fb      	ldrb	r3, [r7, #7]
 800d58a:	4a35      	ldr	r2, [pc, #212]	; (800d660 <Update_Service+0x15c>)
 800d58c:	011b      	lsls	r3, r3, #4
 800d58e:	4413      	add	r3, r2
 800d590:	3308      	adds	r3, #8
 800d592:	881b      	ldrh	r3, [r3, #0]
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800d594:	3302      	adds	r3, #2
 800d596:	b29b      	uxth	r3, r3
 800d598:	461a      	mov	r2, r3
 800d59a:	f7fd ff47 	bl	800b42c <aci_gatt_disc_all_char_desc>

        break;
 800d59e:	e04b      	b.n	800d638 <Update_Service+0x134>
      case APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC:
        //APP_DBG_MSG("* GATT : Discover Descriptor of Rx - Notification Characteritic\n");
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800d5a0:	79fb      	ldrb	r3, [r7, #7]
 800d5a2:	4a2f      	ldr	r2, [pc, #188]	; (800d660 <Update_Service+0x15c>)
 800d5a4:	011b      	lsls	r3, r3, #4
 800d5a6:	4413      	add	r3, r2
 800d5a8:	3302      	adds	r3, #2
 800d5aa:	8818      	ldrh	r0, [r3, #0]
 800d5ac:	79fb      	ldrb	r3, [r7, #7]
 800d5ae:	4a2c      	ldr	r2, [pc, #176]	; (800d660 <Update_Service+0x15c>)
 800d5b0:	011b      	lsls	r3, r3, #4
 800d5b2:	4413      	add	r3, r2
 800d5b4:	330c      	adds	r3, #12
 800d5b6:	8819      	ldrh	r1, [r3, #0]
                                    aP2PClientContext[index].P2PNotificationCharHdle,
                                    aP2PClientContext[index].P2PNotificationCharHdle+2);
 800d5b8:	79fb      	ldrb	r3, [r7, #7]
 800d5ba:	4a29      	ldr	r2, [pc, #164]	; (800d660 <Update_Service+0x15c>)
 800d5bc:	011b      	lsls	r3, r3, #4
 800d5be:	4413      	add	r3, r2
 800d5c0:	330c      	adds	r3, #12
 800d5c2:	881b      	ldrh	r3, [r3, #0]
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800d5c4:	3302      	adds	r3, #2
 800d5c6:	b29b      	uxth	r3, r3
 800d5c8:	461a      	mov	r2, r3
 800d5ca:	f7fd ff2f 	bl	800b42c <aci_gatt_disc_all_char_desc>

        break;
 800d5ce:	e033      	b.n	800d638 <Update_Service+0x134>
      case APP_BLE_ENABLE_NOTIFICATION_DESC:
        //APP_DBG_MSG("* GATT : Enable Server Notification\n");
        aci_gatt_write_char_desc(aP2PClientContext[index].connHandle,
 800d5d0:	79fb      	ldrb	r3, [r7, #7]
 800d5d2:	4a23      	ldr	r2, [pc, #140]	; (800d660 <Update_Service+0x15c>)
 800d5d4:	011b      	lsls	r3, r3, #4
 800d5d6:	4413      	add	r3, r2
 800d5d8:	3302      	adds	r3, #2
 800d5da:	8818      	ldrh	r0, [r3, #0]
 800d5dc:	79fb      	ldrb	r3, [r7, #7]
 800d5de:	4a20      	ldr	r2, [pc, #128]	; (800d660 <Update_Service+0x15c>)
 800d5e0:	011b      	lsls	r3, r3, #4
 800d5e2:	4413      	add	r3, r2
 800d5e4:	330e      	adds	r3, #14
 800d5e6:	8819      	ldrh	r1, [r3, #0]
 800d5e8:	1d3b      	adds	r3, r7, #4
 800d5ea:	2202      	movs	r2, #2
 800d5ec:	f7fd ff90 	bl	800b510 <aci_gatt_write_char_desc>
                                 aP2PClientContext[index].P2PNotificationDescHandle,
                                 2,
                                 (uint8_t *)&enable);

        aP2PClientContext[index].state = APP_BLE_CONNECTED_CLIENT;
 800d5f0:	79fb      	ldrb	r3, [r7, #7]
 800d5f2:	4a1b      	ldr	r2, [pc, #108]	; (800d660 <Update_Service+0x15c>)
 800d5f4:	011b      	lsls	r3, r3, #4
 800d5f6:	4413      	add	r3, r2
 800d5f8:	2206      	movs	r2, #6
 800d5fa:	701a      	strb	r2, [r3, #0]
        //BSP_LED_Off(LED_RED);
        HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	2102      	movs	r1, #2
 800d600:	4818      	ldr	r0, [pc, #96]	; (800d664 <Update_Service+0x160>)
 800d602:	f7f5 fc6f 	bl	8002ee4 <HAL_GPIO_WritePin>

        break;
 800d606:	e017      	b.n	800d638 <Update_Service+0x134>
      case APP_BLE_DISABLE_NOTIFICATION_DESC :
        //APP_DBG_MSG("* GATT : Disable Server Notification\n");
        aci_gatt_write_char_desc(aP2PClientContext[index].connHandle,
 800d608:	79fb      	ldrb	r3, [r7, #7]
 800d60a:	4a15      	ldr	r2, [pc, #84]	; (800d660 <Update_Service+0x15c>)
 800d60c:	011b      	lsls	r3, r3, #4
 800d60e:	4413      	add	r3, r2
 800d610:	3302      	adds	r3, #2
 800d612:	8818      	ldrh	r0, [r3, #0]
 800d614:	79fb      	ldrb	r3, [r7, #7]
 800d616:	4a12      	ldr	r2, [pc, #72]	; (800d660 <Update_Service+0x15c>)
 800d618:	011b      	lsls	r3, r3, #4
 800d61a:	4413      	add	r3, r2
 800d61c:	330e      	adds	r3, #14
 800d61e:	8819      	ldrh	r1, [r3, #0]
 800d620:	1d3b      	adds	r3, r7, #4
 800d622:	2202      	movs	r2, #2
 800d624:	f7fd ff74 	bl	800b510 <aci_gatt_write_char_desc>
                                 aP2PClientContext[index].P2PNotificationDescHandle,
                                 2,
                                 (uint8_t *)&enable);

        aP2PClientContext[index].state = APP_BLE_CONNECTED_CLIENT;
 800d628:	79fb      	ldrb	r3, [r7, #7]
 800d62a:	4a0d      	ldr	r2, [pc, #52]	; (800d660 <Update_Service+0x15c>)
 800d62c:	011b      	lsls	r3, r3, #4
 800d62e:	4413      	add	r3, r2
 800d630:	2206      	movs	r2, #6
 800d632:	701a      	strb	r2, [r3, #0]

        break;
 800d634:	e000      	b.n	800d638 <Update_Service+0x134>
      default:
        break;
 800d636:	bf00      	nop
    }
    index++;
 800d638:	79fb      	ldrb	r3, [r7, #7]
 800d63a:	3301      	adds	r3, #1
 800d63c:	71fb      	strb	r3, [r7, #7]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d63e:	79fb      	ldrb	r3, [r7, #7]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d108      	bne.n	800d656 <Update_Service+0x152>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
 800d644:	79fb      	ldrb	r3, [r7, #7]
 800d646:	4a06      	ldr	r2, [pc, #24]	; (800d660 <Update_Service+0x15c>)
 800d648:	011b      	lsls	r3, r3, #4
 800d64a:	4413      	add	r3, r2
 800d64c:	781b      	ldrb	r3, [r3, #0]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800d64e:	2b00      	cmp	r3, #0
 800d650:	f47f af60 	bne.w	800d514 <Update_Service+0x10>
  }
  return;
 800d654:	bf00      	nop
 800d656:	bf00      	nop
}
 800d658:	3708      	adds	r7, #8
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}
 800d65e:	bf00      	nop
 800d660:	20000370 	.word	0x20000370
 800d664:	48000400 	.word	0x48000400

0800d668 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 800d668:	b480      	push	{r7}
 800d66a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800d66c:	4b05      	ldr	r3, [pc, #20]	; (800d684 <LL_PWR_EnableBootC2+0x1c>)
 800d66e:	68db      	ldr	r3, [r3, #12]
 800d670:	4a04      	ldr	r2, [pc, #16]	; (800d684 <LL_PWR_EnableBootC2+0x1c>)
 800d672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d676:	60d3      	str	r3, [r2, #12]
}
 800d678:	bf00      	nop
 800d67a:	46bd      	mov	sp, r7
 800d67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d680:	4770      	bx	lr
 800d682:	bf00      	nop
 800d684:	58000400 	.word	0x58000400

0800d688 <LL_AHB3_GRP1_EnableClock>:
{
 800d688:	b480      	push	{r7}
 800d68a:	b085      	sub	sp, #20
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800d690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d694:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d696:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	4313      	orrs	r3, r2
 800d69e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800d6a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d6a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	4013      	ands	r3, r2
 800d6aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
}
 800d6ae:	bf00      	nop
 800d6b0:	3714      	adds	r7, #20
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b8:	4770      	bx	lr

0800d6ba <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800d6ba:	b480      	push	{r7}
 800d6bc:	b083      	sub	sp, #12
 800d6be:	af00      	add	r7, sp, #0
 800d6c0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	601a      	str	r2, [r3, #0]
}
 800d6ce:	bf00      	nop
 800d6d0:	370c      	adds	r7, #12
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d8:	4770      	bx	lr

0800d6da <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800d6da:	b480      	push	{r7}
 800d6dc:	b083      	sub	sp, #12
 800d6de:	af00      	add	r7, sp, #0
 800d6e0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	f043 0201 	orr.w	r2, r3, #1
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	601a      	str	r2, [r3, #0]
}
 800d6ee:	bf00      	nop
 800d6f0:	370c      	adds	r7, #12
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f8:	4770      	bx	lr

0800d6fa <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d6fa:	b480      	push	{r7}
 800d6fc:	b083      	sub	sp, #12
 800d6fe:	af00      	add	r7, sp, #0
 800d700:	6078      	str	r0, [r7, #4]
 800d702:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	685a      	ldr	r2, [r3, #4]
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	041b      	lsls	r3, r3, #16
 800d70c:	43db      	mvns	r3, r3
 800d70e:	401a      	ands	r2, r3
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	605a      	str	r2, [r3, #4]
}
 800d714:	bf00      	nop
 800d716:	370c      	adds	r7, #12
 800d718:	46bd      	mov	sp, r7
 800d71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71e:	4770      	bx	lr

0800d720 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d720:	b480      	push	{r7}
 800d722:	b083      	sub	sp, #12
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
 800d728:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	685a      	ldr	r2, [r3, #4]
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	041b      	lsls	r3, r3, #16
 800d732:	431a      	orrs	r2, r3
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	605a      	str	r2, [r3, #4]
}
 800d738:	bf00      	nop
 800d73a:	370c      	adds	r7, #12
 800d73c:	46bd      	mov	sp, r7
 800d73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d742:	4770      	bx	lr

0800d744 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d744:	b480      	push	{r7}
 800d746:	b083      	sub	sp, #12
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
 800d74c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	685a      	ldr	r2, [r3, #4]
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	43db      	mvns	r3, r3
 800d756:	401a      	ands	r2, r3
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	605a      	str	r2, [r3, #4]
}
 800d75c:	bf00      	nop
 800d75e:	370c      	adds	r7, #12
 800d760:	46bd      	mov	sp, r7
 800d762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d766:	4770      	bx	lr

0800d768 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d768:	b480      	push	{r7}
 800d76a:	b083      	sub	sp, #12
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
 800d770:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	683a      	ldr	r2, [r7, #0]
 800d776:	609a      	str	r2, [r3, #8]
}
 800d778:	bf00      	nop
 800d77a:	370c      	adds	r7, #12
 800d77c:	46bd      	mov	sp, r7
 800d77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d782:	4770      	bx	lr

0800d784 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d784:	b480      	push	{r7}
 800d786:	b083      	sub	sp, #12
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
 800d78c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	041a      	lsls	r2, r3, #16
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	609a      	str	r2, [r3, #8]
}
 800d796:	bf00      	nop
 800d798:	370c      	adds	r7, #12
 800d79a:	46bd      	mov	sp, r7
 800d79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a0:	4770      	bx	lr

0800d7a2 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d7a2:	b480      	push	{r7}
 800d7a4:	b083      	sub	sp, #12
 800d7a6:	af00      	add	r7, sp, #0
 800d7a8:	6078      	str	r0, [r7, #4]
 800d7aa:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	68da      	ldr	r2, [r3, #12]
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	4013      	ands	r3, r2
 800d7b4:	683a      	ldr	r2, [r7, #0]
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d101      	bne.n	800d7be <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800d7ba:	2301      	movs	r3, #1
 800d7bc:	e000      	b.n	800d7c0 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800d7be:	2300      	movs	r3, #0
}
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	370c      	adds	r7, #12
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ca:	4770      	bx	lr

0800d7cc <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b083      	sub	sp, #12
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
 800d7d4:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	69da      	ldr	r2, [r3, #28]
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	4013      	ands	r3, r2
 800d7de:	683a      	ldr	r2, [r7, #0]
 800d7e0:	429a      	cmp	r2, r3
 800d7e2:	d101      	bne.n	800d7e8 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	e000      	b.n	800d7ea <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800d7e8:	2300      	movs	r3, #0
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	370c      	adds	r7, #12
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f4:	4770      	bx	lr
	...

0800d7f8 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800d7fc:	2102      	movs	r1, #2
 800d7fe:	4819      	ldr	r0, [pc, #100]	; (800d864 <HW_IPCC_Rx_Handler+0x6c>)
 800d800:	f7ff ffe4 	bl	800d7cc <LL_C2_IPCC_IsActiveFlag_CHx>
 800d804:	4603      	mov	r3, r0
 800d806:	2b00      	cmp	r3, #0
 800d808:	d009      	beq.n	800d81e <HW_IPCC_Rx_Handler+0x26>
 800d80a:	4b16      	ldr	r3, [pc, #88]	; (800d864 <HW_IPCC_Rx_Handler+0x6c>)
 800d80c:	685b      	ldr	r3, [r3, #4]
 800d80e:	43db      	mvns	r3, r3
 800d810:	f003 0302 	and.w	r3, r3, #2
 800d814:	2b00      	cmp	r3, #0
 800d816:	d002      	beq.n	800d81e <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800d818:	f000 f8de 	bl	800d9d8 <HW_IPCC_SYS_EvtHandler>
 800d81c:	e01f      	b.n	800d85e <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CliNotifEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800d81e:	2101      	movs	r1, #1
 800d820:	4810      	ldr	r0, [pc, #64]	; (800d864 <HW_IPCC_Rx_Handler+0x6c>)
 800d822:	f7ff ffd3 	bl	800d7cc <LL_C2_IPCC_IsActiveFlag_CHx>
 800d826:	4603      	mov	r3, r0
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d008      	beq.n	800d83e <HW_IPCC_Rx_Handler+0x46>
 800d82c:	4b0d      	ldr	r3, [pc, #52]	; (800d864 <HW_IPCC_Rx_Handler+0x6c>)
 800d82e:	685b      	ldr	r3, [r3, #4]
 800d830:	f003 0301 	and.w	r3, r3, #1
 800d834:	2b00      	cmp	r3, #0
 800d836:	d102      	bne.n	800d83e <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800d838:	f000 f892 	bl	800d960 <HW_IPCC_BLE_EvtHandler>
 800d83c:	e00f      	b.n	800d85e <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800d83e:	2108      	movs	r1, #8
 800d840:	4808      	ldr	r0, [pc, #32]	; (800d864 <HW_IPCC_Rx_Handler+0x6c>)
 800d842:	f7ff ffc3 	bl	800d7cc <LL_C2_IPCC_IsActiveFlag_CHx>
 800d846:	4603      	mov	r3, r0
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d009      	beq.n	800d860 <HW_IPCC_Rx_Handler+0x68>
 800d84c:	4b05      	ldr	r3, [pc, #20]	; (800d864 <HW_IPCC_Rx_Handler+0x6c>)
 800d84e:	685b      	ldr	r3, [r3, #4]
 800d850:	43db      	mvns	r3, r3
 800d852:	f003 0308 	and.w	r3, r3, #8
 800d856:	2b00      	cmp	r3, #0
 800d858:	d002      	beq.n	800d860 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800d85a:	f000 f909 	bl	800da70 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800d85e:	bf00      	nop
 800d860:	bf00      	nop
}
 800d862:	bd80      	pop	{r7, pc}
 800d864:	58000c00 	.word	0x58000c00

0800d868 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800d86c:	2102      	movs	r1, #2
 800d86e:	4822      	ldr	r0, [pc, #136]	; (800d8f8 <HW_IPCC_Tx_Handler+0x90>)
 800d870:	f7ff ff97 	bl	800d7a2 <LL_C1_IPCC_IsActiveFlag_CHx>
 800d874:	4603      	mov	r3, r0
 800d876:	2b00      	cmp	r3, #0
 800d878:	d109      	bne.n	800d88e <HW_IPCC_Tx_Handler+0x26>
 800d87a:	4b1f      	ldr	r3, [pc, #124]	; (800d8f8 <HW_IPCC_Tx_Handler+0x90>)
 800d87c:	685b      	ldr	r3, [r3, #4]
 800d87e:	43db      	mvns	r3, r3
 800d880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d884:	2b00      	cmp	r3, #0
 800d886:	d002      	beq.n	800d88e <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800d888:	f000 f89a 	bl	800d9c0 <HW_IPCC_SYS_CmdEvtHandler>
 800d88c:	e031      	b.n	800d8f2 <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800d88e:	2102      	movs	r1, #2
 800d890:	4819      	ldr	r0, [pc, #100]	; (800d8f8 <HW_IPCC_Tx_Handler+0x90>)
 800d892:	f7ff ff86 	bl	800d7a2 <LL_C1_IPCC_IsActiveFlag_CHx>
 800d896:	4603      	mov	r3, r0
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d109      	bne.n	800d8b0 <HW_IPCC_Tx_Handler+0x48>
 800d89c:	4b16      	ldr	r3, [pc, #88]	; (800d8f8 <HW_IPCC_Tx_Handler+0x90>)
 800d89e:	685b      	ldr	r3, [r3, #4]
 800d8a0:	43db      	mvns	r3, r3
 800d8a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d002      	beq.n	800d8b0 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800d8aa:	f000 f889 	bl	800d9c0 <HW_IPCC_SYS_CmdEvtHandler>
 800d8ae:	e020      	b.n	800d8f2 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800d8b0:	2108      	movs	r1, #8
 800d8b2:	4811      	ldr	r0, [pc, #68]	; (800d8f8 <HW_IPCC_Tx_Handler+0x90>)
 800d8b4:	f7ff ff75 	bl	800d7a2 <LL_C1_IPCC_IsActiveFlag_CHx>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d109      	bne.n	800d8d2 <HW_IPCC_Tx_Handler+0x6a>
 800d8be:	4b0e      	ldr	r3, [pc, #56]	; (800d8f8 <HW_IPCC_Tx_Handler+0x90>)
 800d8c0:	685b      	ldr	r3, [r3, #4]
 800d8c2:	43db      	mvns	r3, r3
 800d8c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d002      	beq.n	800d8d2 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 800d8cc:	f000 f8b2 	bl	800da34 <HW_IPCC_MM_FreeBufHandler>
 800d8d0:	e00f      	b.n	800d8f2 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800d8d2:	2120      	movs	r1, #32
 800d8d4:	4808      	ldr	r0, [pc, #32]	; (800d8f8 <HW_IPCC_Tx_Handler+0x90>)
 800d8d6:	f7ff ff64 	bl	800d7a2 <LL_C1_IPCC_IsActiveFlag_CHx>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d109      	bne.n	800d8f4 <HW_IPCC_Tx_Handler+0x8c>
 800d8e0:	4b05      	ldr	r3, [pc, #20]	; (800d8f8 <HW_IPCC_Tx_Handler+0x90>)
 800d8e2:	685b      	ldr	r3, [r3, #4]
 800d8e4:	43db      	mvns	r3, r3
 800d8e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d002      	beq.n	800d8f4 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800d8ee:	f000 f843 	bl	800d978 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800d8f2:	bf00      	nop
 800d8f4:	bf00      	nop
}
 800d8f6:	bd80      	pop	{r7, pc}
 800d8f8:	58000c00 	.word	0x58000c00

0800d8fc <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	af00      	add	r7, sp, #0
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800d900:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800d902:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800d904:	f7ff feb0 	bl	800d668 <LL_PWR_EnableBootC2>

  return;
 800d908:	bf00      	nop
}
 800d90a:	bd80      	pop	{r7, pc}

0800d90c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800d910:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800d914:	f7ff feb8 	bl	800d688 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800d918:	4806      	ldr	r0, [pc, #24]	; (800d934 <HW_IPCC_Init+0x28>)
 800d91a:	f7ff fede 	bl	800d6da <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800d91e:	4805      	ldr	r0, [pc, #20]	; (800d934 <HW_IPCC_Init+0x28>)
 800d920:	f7ff fecb 	bl	800d6ba <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800d924:	202c      	movs	r0, #44	; 0x2c
 800d926:	f7f5 f831 	bl	800298c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800d92a:	202d      	movs	r0, #45	; 0x2d
 800d92c:	f7f5 f82e 	bl	800298c <HAL_NVIC_EnableIRQ>

  return;
 800d930:	bf00      	nop
}
 800d932:	bd80      	pop	{r7, pc}
 800d934:	58000c00 	.word	0x58000c00

0800d938 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800d93c:	2101      	movs	r1, #1
 800d93e:	4802      	ldr	r0, [pc, #8]	; (800d948 <HW_IPCC_BLE_Init+0x10>)
 800d940:	f7ff ff00 	bl	800d744 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d944:	bf00      	nop
}
 800d946:	bd80      	pop	{r7, pc}
 800d948:	58000c00 	.word	0x58000c00

0800d94c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800d950:	2101      	movs	r1, #1
 800d952:	4802      	ldr	r0, [pc, #8]	; (800d95c <HW_IPCC_BLE_SendCmd+0x10>)
 800d954:	f7ff ff16 	bl	800d784 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800d958:	bf00      	nop
}
 800d95a:	bd80      	pop	{r7, pc}
 800d95c:	58000c00 	.word	0x58000c00

0800d960 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800d960:	b580      	push	{r7, lr}
 800d962:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800d964:	f7fe fd02 	bl	800c36c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800d968:	2101      	movs	r1, #1
 800d96a:	4802      	ldr	r0, [pc, #8]	; (800d974 <HW_IPCC_BLE_EvtHandler+0x14>)
 800d96c:	f7ff fefc 	bl	800d768 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d970:	bf00      	nop
}
 800d972:	bd80      	pop	{r7, pc}
 800d974:	58000c00 	.word	0x58000c00

0800d978 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800d97c:	2120      	movs	r1, #32
 800d97e:	4803      	ldr	r0, [pc, #12]	; (800d98c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800d980:	f7ff fece 	bl	800d720 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800d984:	f7fe fd0e 	bl	800c3a4 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800d988:	bf00      	nop
}
 800d98a:	bd80      	pop	{r7, pc}
 800d98c:	58000c00 	.word	0x58000c00

0800d990 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800d990:	b580      	push	{r7, lr}
 800d992:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800d994:	2102      	movs	r1, #2
 800d996:	4802      	ldr	r0, [pc, #8]	; (800d9a0 <HW_IPCC_SYS_Init+0x10>)
 800d998:	f7ff fed4 	bl	800d744 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d99c:	bf00      	nop
}
 800d99e:	bd80      	pop	{r7, pc}
 800d9a0:	58000c00 	.word	0x58000c00

0800d9a4 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d9a8:	2102      	movs	r1, #2
 800d9aa:	4804      	ldr	r0, [pc, #16]	; (800d9bc <HW_IPCC_SYS_SendCmd+0x18>)
 800d9ac:	f7ff feea 	bl	800d784 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d9b0:	2102      	movs	r1, #2
 800d9b2:	4802      	ldr	r0, [pc, #8]	; (800d9bc <HW_IPCC_SYS_SendCmd+0x18>)
 800d9b4:	f7ff fea1 	bl	800d6fa <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800d9b8:	bf00      	nop
}
 800d9ba:	bd80      	pop	{r7, pc}
 800d9bc:	58000c00 	.word	0x58000c00

0800d9c0 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d9c4:	2102      	movs	r1, #2
 800d9c6:	4803      	ldr	r0, [pc, #12]	; (800d9d4 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800d9c8:	f7ff feaa 	bl	800d720 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800d9cc:	f7fe fd32 	bl	800c434 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800d9d0:	bf00      	nop
}
 800d9d2:	bd80      	pop	{r7, pc}
 800d9d4:	58000c00 	.word	0x58000c00

0800d9d8 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800d9dc:	f7fe fd3a 	bl	800c454 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800d9e0:	2102      	movs	r1, #2
 800d9e2:	4802      	ldr	r0, [pc, #8]	; (800d9ec <HW_IPCC_SYS_EvtHandler+0x14>)
 800d9e4:	f7ff fec0 	bl	800d768 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d9e8:	bf00      	nop
}
 800d9ea:	bd80      	pop	{r7, pc}
 800d9ec:	58000c00 	.word	0x58000c00

0800d9f0 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b082      	sub	sp, #8
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800d9f8:	2108      	movs	r1, #8
 800d9fa:	480c      	ldr	r0, [pc, #48]	; (800da2c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d9fc:	f7ff fed1 	bl	800d7a2 <LL_C1_IPCC_IsActiveFlag_CHx>
 800da00:	4603      	mov	r3, r0
 800da02:	2b00      	cmp	r3, #0
 800da04:	d007      	beq.n	800da16 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800da06:	4a0a      	ldr	r2, [pc, #40]	; (800da30 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800da0c:	2108      	movs	r1, #8
 800da0e:	4807      	ldr	r0, [pc, #28]	; (800da2c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800da10:	f7ff fe73 	bl	800d6fa <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800da14:	e006      	b.n	800da24 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800da1a:	2108      	movs	r1, #8
 800da1c:	4803      	ldr	r0, [pc, #12]	; (800da2c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800da1e:	f7ff feb1 	bl	800d784 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800da22:	bf00      	nop
}
 800da24:	3708      	adds	r7, #8
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}
 800da2a:	bf00      	nop
 800da2c:	58000c00 	.word	0x58000c00
 800da30:	200004cc 	.word	0x200004cc

0800da34 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800da34:	b580      	push	{r7, lr}
 800da36:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800da38:	2108      	movs	r1, #8
 800da3a:	4806      	ldr	r0, [pc, #24]	; (800da54 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800da3c:	f7ff fe70 	bl	800d720 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800da40:	4b05      	ldr	r3, [pc, #20]	; (800da58 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800da46:	2108      	movs	r1, #8
 800da48:	4802      	ldr	r0, [pc, #8]	; (800da54 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800da4a:	f7ff fe9b 	bl	800d784 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800da4e:	bf00      	nop
}
 800da50:	bd80      	pop	{r7, pc}
 800da52:	bf00      	nop
 800da54:	58000c00 	.word	0x58000c00
 800da58:	200004cc 	.word	0x200004cc

0800da5c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800da60:	2108      	movs	r1, #8
 800da62:	4802      	ldr	r0, [pc, #8]	; (800da6c <HW_IPCC_TRACES_Init+0x10>)
 800da64:	f7ff fe6e 	bl	800d744 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800da68:	bf00      	nop
}
 800da6a:	bd80      	pop	{r7, pc}
 800da6c:	58000c00 	.word	0x58000c00

0800da70 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800da70:	b580      	push	{r7, lr}
 800da72:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800da74:	f7fe fd8c 	bl	800c590 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800da78:	2108      	movs	r1, #8
 800da7a:	4802      	ldr	r0, [pc, #8]	; (800da84 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800da7c:	f7ff fe74 	bl	800d768 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800da80:	bf00      	nop
}
 800da82:	bd80      	pop	{r7, pc}
 800da84:	58000c00 	.word	0x58000c00

0800da88 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  
  /* USER CODE END USB_Device_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800da8c:	2200      	movs	r2, #0
 800da8e:	4912      	ldr	r1, [pc, #72]	; (800dad8 <MX_USB_Device_Init+0x50>)
 800da90:	4812      	ldr	r0, [pc, #72]	; (800dadc <MX_USB_Device_Init+0x54>)
 800da92:	f7fb ff8f 	bl	80099b4 <USBD_Init>
 800da96:	4603      	mov	r3, r0
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d001      	beq.n	800daa0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800da9c:	f7f3 ff9e 	bl	80019dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800daa0:	490f      	ldr	r1, [pc, #60]	; (800dae0 <MX_USB_Device_Init+0x58>)
 800daa2:	480e      	ldr	r0, [pc, #56]	; (800dadc <MX_USB_Device_Init+0x54>)
 800daa4:	f7fb ffb1 	bl	8009a0a <USBD_RegisterClass>
 800daa8:	4603      	mov	r3, r0
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d001      	beq.n	800dab2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800daae:	f7f3 ff95 	bl	80019dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800dab2:	490c      	ldr	r1, [pc, #48]	; (800dae4 <MX_USB_Device_Init+0x5c>)
 800dab4:	4809      	ldr	r0, [pc, #36]	; (800dadc <MX_USB_Device_Init+0x54>)
 800dab6:	f7fb fedf 	bl	8009878 <USBD_CDC_RegisterInterface>
 800daba:	4603      	mov	r3, r0
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d001      	beq.n	800dac4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800dac0:	f7f3 ff8c 	bl	80019dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800dac4:	4805      	ldr	r0, [pc, #20]	; (800dadc <MX_USB_Device_Init+0x54>)
 800dac6:	f7fb ffba 	bl	8009a3e <USBD_Start>
 800daca:	4603      	mov	r3, r0
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d001      	beq.n	800dad4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800dad0:	f7f3 ff84 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */
  
  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800dad4:	bf00      	nop
 800dad6:	bd80      	pop	{r7, pc}
 800dad8:	20000138 	.word	0x20000138
 800dadc:	200007c8 	.word	0x200007c8
 800dae0:	20000024 	.word	0x20000024
 800dae4:	20000128 	.word	0x20000128

0800dae8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800daec:	2200      	movs	r2, #0
 800daee:	4907      	ldr	r1, [pc, #28]	; (800db0c <CDC_Init_FS+0x24>)
 800daf0:	4807      	ldr	r0, [pc, #28]	; (800db10 <CDC_Init_FS+0x28>)
 800daf2:	f7fb fed8 	bl	80098a6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800daf6:	4907      	ldr	r1, [pc, #28]	; (800db14 <CDC_Init_FS+0x2c>)
 800daf8:	4805      	ldr	r0, [pc, #20]	; (800db10 <CDC_Init_FS+0x28>)
 800dafa:	f7fb feee 	bl	80098da <USBD_CDC_SetRxBuffer>
  VCPInitialized=1;
 800dafe:	4b06      	ldr	r3, [pc, #24]	; (800db18 <CDC_Init_FS+0x30>)
 800db00:	2201      	movs	r2, #1
 800db02:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800db04:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800db06:	4618      	mov	r0, r3
 800db08:	bd80      	pop	{r7, pc}
 800db0a:	bf00      	nop
 800db0c:	20000a9c 	.word	0x20000a9c
 800db10:	200007c8 	.word	0x200007c8
 800db14:	20000a8c 	.word	0x20000a8c
 800db18:	200004d0 	.word	0x200004d0

0800db1c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800db1c:	b480      	push	{r7}
 800db1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  VCPInitialized=0;
 800db20:	4b04      	ldr	r3, [pc, #16]	; (800db34 <CDC_DeInit_FS+0x18>)
 800db22:	2200      	movs	r2, #0
 800db24:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800db26:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800db28:	4618      	mov	r0, r3
 800db2a:	46bd      	mov	sp, r7
 800db2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db30:	4770      	bx	lr
 800db32:	bf00      	nop
 800db34:	200004d0 	.word	0x200004d0

0800db38 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800db38:	b480      	push	{r7}
 800db3a:	b083      	sub	sp, #12
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	4603      	mov	r3, r0
 800db40:	6039      	str	r1, [r7, #0]
 800db42:	71fb      	strb	r3, [r7, #7]
 800db44:	4613      	mov	r3, r2
 800db46:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800db48:	79fb      	ldrb	r3, [r7, #7]
 800db4a:	2b23      	cmp	r3, #35	; 0x23
 800db4c:	d84a      	bhi.n	800dbe4 <CDC_Control_FS+0xac>
 800db4e:	a201      	add	r2, pc, #4	; (adr r2, 800db54 <CDC_Control_FS+0x1c>)
 800db50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db54:	0800dbe5 	.word	0x0800dbe5
 800db58:	0800dbe5 	.word	0x0800dbe5
 800db5c:	0800dbe5 	.word	0x0800dbe5
 800db60:	0800dbe5 	.word	0x0800dbe5
 800db64:	0800dbe5 	.word	0x0800dbe5
 800db68:	0800dbe5 	.word	0x0800dbe5
 800db6c:	0800dbe5 	.word	0x0800dbe5
 800db70:	0800dbe5 	.word	0x0800dbe5
 800db74:	0800dbe5 	.word	0x0800dbe5
 800db78:	0800dbe5 	.word	0x0800dbe5
 800db7c:	0800dbe5 	.word	0x0800dbe5
 800db80:	0800dbe5 	.word	0x0800dbe5
 800db84:	0800dbe5 	.word	0x0800dbe5
 800db88:	0800dbe5 	.word	0x0800dbe5
 800db8c:	0800dbe5 	.word	0x0800dbe5
 800db90:	0800dbe5 	.word	0x0800dbe5
 800db94:	0800dbe5 	.word	0x0800dbe5
 800db98:	0800dbe5 	.word	0x0800dbe5
 800db9c:	0800dbe5 	.word	0x0800dbe5
 800dba0:	0800dbe5 	.word	0x0800dbe5
 800dba4:	0800dbe5 	.word	0x0800dbe5
 800dba8:	0800dbe5 	.word	0x0800dbe5
 800dbac:	0800dbe5 	.word	0x0800dbe5
 800dbb0:	0800dbe5 	.word	0x0800dbe5
 800dbb4:	0800dbe5 	.word	0x0800dbe5
 800dbb8:	0800dbe5 	.word	0x0800dbe5
 800dbbc:	0800dbe5 	.word	0x0800dbe5
 800dbc0:	0800dbe5 	.word	0x0800dbe5
 800dbc4:	0800dbe5 	.word	0x0800dbe5
 800dbc8:	0800dbe5 	.word	0x0800dbe5
 800dbcc:	0800dbe5 	.word	0x0800dbe5
 800dbd0:	0800dbe5 	.word	0x0800dbe5
 800dbd4:	0800dbe5 	.word	0x0800dbe5
 800dbd8:	0800dbe5 	.word	0x0800dbe5
 800dbdc:	0800dbe5 	.word	0x0800dbe5
 800dbe0:	0800dbe5 	.word	0x0800dbe5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dbe4:	bf00      	nop
  }

  return (USBD_OK);
 800dbe6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	370c      	adds	r7, #12
 800dbec:	46bd      	mov	sp, r7
 800dbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf2:	4770      	bx	lr

0800dbf4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b082      	sub	sp, #8
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
 800dbfc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800dbfe:	6879      	ldr	r1, [r7, #4]
 800dc00:	4805      	ldr	r0, [pc, #20]	; (800dc18 <CDC_Receive_FS+0x24>)
 800dc02:	f7fb fe6a 	bl	80098da <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800dc06:	4804      	ldr	r0, [pc, #16]	; (800dc18 <CDC_Receive_FS+0x24>)
 800dc08:	f7fb feaa 	bl	8009960 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800dc0c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3708      	adds	r7, #8
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}
 800dc16:	bf00      	nop
 800dc18:	200007c8 	.word	0x200007c8

0800dc1c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b084      	sub	sp, #16
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
 800dc24:	460b      	mov	r3, r1
 800dc26:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dc28:	2300      	movs	r3, #0
 800dc2a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dc2c:	4b0d      	ldr	r3, [pc, #52]	; (800dc64 <CDC_Transmit_FS+0x48>)
 800dc2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc32:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d001      	beq.n	800dc42 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800dc3e:	2301      	movs	r3, #1
 800dc40:	e00b      	b.n	800dc5a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800dc42:	887b      	ldrh	r3, [r7, #2]
 800dc44:	461a      	mov	r2, r3
 800dc46:	6879      	ldr	r1, [r7, #4]
 800dc48:	4806      	ldr	r0, [pc, #24]	; (800dc64 <CDC_Transmit_FS+0x48>)
 800dc4a:	f7fb fe2c 	bl	80098a6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800dc4e:	4805      	ldr	r0, [pc, #20]	; (800dc64 <CDC_Transmit_FS+0x48>)
 800dc50:	f7fb fe57 	bl	8009902 <USBD_CDC_TransmitPacket>
 800dc54:	4603      	mov	r3, r0
 800dc56:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800dc58:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	3710      	adds	r7, #16
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}
 800dc62:	bf00      	nop
 800dc64:	200007c8 	.word	0x200007c8

0800dc68 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc68:	b480      	push	{r7}
 800dc6a:	b083      	sub	sp, #12
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	4603      	mov	r3, r0
 800dc70:	6039      	str	r1, [r7, #0]
 800dc72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	2212      	movs	r2, #18
 800dc78:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800dc7a:	4b03      	ldr	r3, [pc, #12]	; (800dc88 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	370c      	adds	r7, #12
 800dc80:	46bd      	mov	sp, r7
 800dc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc86:	4770      	bx	lr
 800dc88:	20000158 	.word	0x20000158

0800dc8c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc8c:	b480      	push	{r7}
 800dc8e:	b083      	sub	sp, #12
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	4603      	mov	r3, r0
 800dc94:	6039      	str	r1, [r7, #0]
 800dc96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dc98:	683b      	ldr	r3, [r7, #0]
 800dc9a:	2204      	movs	r2, #4
 800dc9c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dc9e:	4b03      	ldr	r3, [pc, #12]	; (800dcac <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	370c      	adds	r7, #12
 800dca4:	46bd      	mov	sp, r7
 800dca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcaa:	4770      	bx	lr
 800dcac:	2000016c 	.word	0x2000016c

0800dcb0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b082      	sub	sp, #8
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	6039      	str	r1, [r7, #0]
 800dcba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dcbc:	79fb      	ldrb	r3, [r7, #7]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d105      	bne.n	800dcce <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800dcc2:	683a      	ldr	r2, [r7, #0]
 800dcc4:	4907      	ldr	r1, [pc, #28]	; (800dce4 <USBD_CDC_ProductStrDescriptor+0x34>)
 800dcc6:	4808      	ldr	r0, [pc, #32]	; (800dce8 <USBD_CDC_ProductStrDescriptor+0x38>)
 800dcc8:	f7fc fe54 	bl	800a974 <USBD_GetString>
 800dccc:	e004      	b.n	800dcd8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800dcce:	683a      	ldr	r2, [r7, #0]
 800dcd0:	4904      	ldr	r1, [pc, #16]	; (800dce4 <USBD_CDC_ProductStrDescriptor+0x34>)
 800dcd2:	4805      	ldr	r0, [pc, #20]	; (800dce8 <USBD_CDC_ProductStrDescriptor+0x38>)
 800dcd4:	f7fc fe4e 	bl	800a974 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dcd8:	4b02      	ldr	r3, [pc, #8]	; (800dce4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	3708      	adds	r7, #8
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}
 800dce2:	bf00      	nop
 800dce4:	20000aac 	.word	0x20000aac
 800dce8:	0800efd8 	.word	0x0800efd8

0800dcec <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b082      	sub	sp, #8
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	6039      	str	r1, [r7, #0]
 800dcf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dcf8:	683a      	ldr	r2, [r7, #0]
 800dcfa:	4904      	ldr	r1, [pc, #16]	; (800dd0c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800dcfc:	4804      	ldr	r0, [pc, #16]	; (800dd10 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800dcfe:	f7fc fe39 	bl	800a974 <USBD_GetString>
  return USBD_StrDesc;
 800dd02:	4b02      	ldr	r3, [pc, #8]	; (800dd0c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3708      	adds	r7, #8
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}
 800dd0c:	20000aac 	.word	0x20000aac
 800dd10:	0800eff0 	.word	0x0800eff0

0800dd14 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b082      	sub	sp, #8
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	6039      	str	r1, [r7, #0]
 800dd1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	221a      	movs	r2, #26
 800dd24:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dd26:	f000 f843 	bl	800ddb0 <Get_SerialNum>
  
  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */
  
  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800dd2a:	4b02      	ldr	r3, [pc, #8]	; (800dd34 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	3708      	adds	r7, #8
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd80      	pop	{r7, pc}
 800dd34:	20000170 	.word	0x20000170

0800dd38 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b082      	sub	sp, #8
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	4603      	mov	r3, r0
 800dd40:	6039      	str	r1, [r7, #0]
 800dd42:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dd44:	79fb      	ldrb	r3, [r7, #7]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d105      	bne.n	800dd56 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800dd4a:	683a      	ldr	r2, [r7, #0]
 800dd4c:	4907      	ldr	r1, [pc, #28]	; (800dd6c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800dd4e:	4808      	ldr	r0, [pc, #32]	; (800dd70 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800dd50:	f7fc fe10 	bl	800a974 <USBD_GetString>
 800dd54:	e004      	b.n	800dd60 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800dd56:	683a      	ldr	r2, [r7, #0]
 800dd58:	4904      	ldr	r1, [pc, #16]	; (800dd6c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800dd5a:	4805      	ldr	r0, [pc, #20]	; (800dd70 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800dd5c:	f7fc fe0a 	bl	800a974 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dd60:	4b02      	ldr	r3, [pc, #8]	; (800dd6c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	3708      	adds	r7, #8
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}
 800dd6a:	bf00      	nop
 800dd6c:	20000aac 	.word	0x20000aac
 800dd70:	0800f004 	.word	0x0800f004

0800dd74 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b082      	sub	sp, #8
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	6039      	str	r1, [r7, #0]
 800dd7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dd80:	79fb      	ldrb	r3, [r7, #7]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d105      	bne.n	800dd92 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800dd86:	683a      	ldr	r2, [r7, #0]
 800dd88:	4907      	ldr	r1, [pc, #28]	; (800dda8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800dd8a:	4808      	ldr	r0, [pc, #32]	; (800ddac <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800dd8c:	f7fc fdf2 	bl	800a974 <USBD_GetString>
 800dd90:	e004      	b.n	800dd9c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800dd92:	683a      	ldr	r2, [r7, #0]
 800dd94:	4904      	ldr	r1, [pc, #16]	; (800dda8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800dd96:	4805      	ldr	r0, [pc, #20]	; (800ddac <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800dd98:	f7fc fdec 	bl	800a974 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dd9c:	4b02      	ldr	r3, [pc, #8]	; (800dda8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	3708      	adds	r7, #8
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}
 800dda6:	bf00      	nop
 800dda8:	20000aac 	.word	0x20000aac
 800ddac:	0800f010 	.word	0x0800f010

0800ddb0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b084      	sub	sp, #16
 800ddb4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ddb6:	4b0f      	ldr	r3, [pc, #60]	; (800ddf4 <Get_SerialNum+0x44>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ddbc:	4b0e      	ldr	r3, [pc, #56]	; (800ddf8 <Get_SerialNum+0x48>)
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ddc2:	4b0e      	ldr	r3, [pc, #56]	; (800ddfc <Get_SerialNum+0x4c>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ddc8:	68fa      	ldr	r2, [r7, #12]
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	4413      	add	r3, r2
 800ddce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d009      	beq.n	800ddea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ddd6:	2208      	movs	r2, #8
 800ddd8:	4909      	ldr	r1, [pc, #36]	; (800de00 <Get_SerialNum+0x50>)
 800ddda:	68f8      	ldr	r0, [r7, #12]
 800dddc:	f000 f814 	bl	800de08 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800dde0:	2204      	movs	r2, #4
 800dde2:	4908      	ldr	r1, [pc, #32]	; (800de04 <Get_SerialNum+0x54>)
 800dde4:	68b8      	ldr	r0, [r7, #8]
 800dde6:	f000 f80f 	bl	800de08 <IntToUnicode>
  }
}
 800ddea:	bf00      	nop
 800ddec:	3710      	adds	r7, #16
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bd80      	pop	{r7, pc}
 800ddf2:	bf00      	nop
 800ddf4:	1fff7590 	.word	0x1fff7590
 800ddf8:	1fff7594 	.word	0x1fff7594
 800ddfc:	1fff7598 	.word	0x1fff7598
 800de00:	20000172 	.word	0x20000172
 800de04:	20000182 	.word	0x20000182

0800de08 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800de08:	b480      	push	{r7}
 800de0a:	b087      	sub	sp, #28
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	60f8      	str	r0, [r7, #12]
 800de10:	60b9      	str	r1, [r7, #8]
 800de12:	4613      	mov	r3, r2
 800de14:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800de16:	2300      	movs	r3, #0
 800de18:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800de1a:	2300      	movs	r3, #0
 800de1c:	75fb      	strb	r3, [r7, #23]
 800de1e:	e027      	b.n	800de70 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	0f1b      	lsrs	r3, r3, #28
 800de24:	2b09      	cmp	r3, #9
 800de26:	d80b      	bhi.n	800de40 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	0f1b      	lsrs	r3, r3, #28
 800de2c:	b2da      	uxtb	r2, r3
 800de2e:	7dfb      	ldrb	r3, [r7, #23]
 800de30:	005b      	lsls	r3, r3, #1
 800de32:	4619      	mov	r1, r3
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	440b      	add	r3, r1
 800de38:	3230      	adds	r2, #48	; 0x30
 800de3a:	b2d2      	uxtb	r2, r2
 800de3c:	701a      	strb	r2, [r3, #0]
 800de3e:	e00a      	b.n	800de56 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	0f1b      	lsrs	r3, r3, #28
 800de44:	b2da      	uxtb	r2, r3
 800de46:	7dfb      	ldrb	r3, [r7, #23]
 800de48:	005b      	lsls	r3, r3, #1
 800de4a:	4619      	mov	r1, r3
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	440b      	add	r3, r1
 800de50:	3237      	adds	r2, #55	; 0x37
 800de52:	b2d2      	uxtb	r2, r2
 800de54:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	011b      	lsls	r3, r3, #4
 800de5a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800de5c:	7dfb      	ldrb	r3, [r7, #23]
 800de5e:	005b      	lsls	r3, r3, #1
 800de60:	3301      	adds	r3, #1
 800de62:	68ba      	ldr	r2, [r7, #8]
 800de64:	4413      	add	r3, r2
 800de66:	2200      	movs	r2, #0
 800de68:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800de6a:	7dfb      	ldrb	r3, [r7, #23]
 800de6c:	3301      	adds	r3, #1
 800de6e:	75fb      	strb	r3, [r7, #23]
 800de70:	7dfa      	ldrb	r2, [r7, #23]
 800de72:	79fb      	ldrb	r3, [r7, #7]
 800de74:	429a      	cmp	r2, r3
 800de76:	d3d3      	bcc.n	800de20 <IntToUnicode+0x18>
  }
}
 800de78:	bf00      	nop
 800de7a:	371c      	adds	r7, #28
 800de7c:	46bd      	mov	sp, r7
 800de7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de82:	4770      	bx	lr

0800de84 <LL_AHB2_GRP1_EnableClock>:
{
 800de84:	b480      	push	{r7}
 800de86:	b085      	sub	sp, #20
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800de8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800de90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800de92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	4313      	orrs	r3, r2
 800de9a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800de9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dea0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	4013      	ands	r3, r2
 800dea6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800dea8:	68fb      	ldr	r3, [r7, #12]
}
 800deaa:	bf00      	nop
 800deac:	3714      	adds	r7, #20
 800deae:	46bd      	mov	sp, r7
 800deb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb4:	4770      	bx	lr

0800deb6 <LL_APB1_GRP1_EnableClock>:
{
 800deb6:	b480      	push	{r7}
 800deb8:	b085      	sub	sp, #20
 800deba:	af00      	add	r7, sp, #0
 800debc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800debe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dec2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dec4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	4313      	orrs	r3, r2
 800decc:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800dece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ded2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	4013      	ands	r3, r2
 800ded8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800deda:	68fb      	ldr	r3, [r7, #12]
}
 800dedc:	bf00      	nop
 800dede:	3714      	adds	r7, #20
 800dee0:	46bd      	mov	sp, r7
 800dee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee6:	4770      	bx	lr

0800dee8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b088      	sub	sp, #32
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800def0:	f107 030c 	add.w	r3, r7, #12
 800def4:	2200      	movs	r2, #0
 800def6:	601a      	str	r2, [r3, #0]
 800def8:	605a      	str	r2, [r3, #4]
 800defa:	609a      	str	r2, [r3, #8]
 800defc:	60da      	str	r2, [r3, #12]
 800defe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	4a13      	ldr	r2, [pc, #76]	; (800df54 <HAL_PCD_MspInit+0x6c>)
 800df06:	4293      	cmp	r3, r2
 800df08:	d120      	bne.n	800df4c <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800df0a:	2001      	movs	r0, #1
 800df0c:	f7ff ffba 	bl	800de84 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800df10:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800df14:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df16:	2302      	movs	r3, #2
 800df18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df1a:	2300      	movs	r3, #0
 800df1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800df1e:	2302      	movs	r3, #2
 800df20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800df22:	230a      	movs	r3, #10
 800df24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800df26:	f107 030c 	add.w	r3, r7, #12
 800df2a:	4619      	mov	r1, r3
 800df2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800df30:	f7f4 fd9c 	bl	8002a6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800df34:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800df38:	f7ff ffbd 	bl	800deb6 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800df3c:	2200      	movs	r2, #0
 800df3e:	2100      	movs	r1, #0
 800df40:	2014      	movs	r0, #20
 800df42:	f7f4 fcf9 	bl	8002938 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800df46:	2014      	movs	r0, #20
 800df48:	f7f4 fd20 	bl	800298c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800df4c:	bf00      	nop
 800df4e:	3720      	adds	r7, #32
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}
 800df54:	40006800 	.word	0x40006800

0800df58 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b082      	sub	sp, #8
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);  
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800df6c:	4619      	mov	r1, r3
 800df6e:	4610      	mov	r0, r2
 800df70:	f7fb fdae 	bl	8009ad0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800df74:	bf00      	nop
 800df76:	3708      	adds	r7, #8
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd80      	pop	{r7, pc}

0800df7c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b082      	sub	sp, #8
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
 800df84:	460b      	mov	r3, r1
 800df86:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);  
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800df8e:	78fb      	ldrb	r3, [r7, #3]
 800df90:	687a      	ldr	r2, [r7, #4]
 800df92:	015b      	lsls	r3, r3, #5
 800df94:	4413      	add	r3, r2
 800df96:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800df9a:	681a      	ldr	r2, [r3, #0]
 800df9c:	78fb      	ldrb	r3, [r7, #3]
 800df9e:	4619      	mov	r1, r3
 800dfa0:	f7fb fde1 	bl	8009b66 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800dfa4:	bf00      	nop
 800dfa6:	3708      	adds	r7, #8
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}

0800dfac <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b082      	sub	sp, #8
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
 800dfb4:	460b      	mov	r3, r1
 800dfb6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */  
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);  
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800dfbe:	78fb      	ldrb	r3, [r7, #3]
 800dfc0:	687a      	ldr	r2, [r7, #4]
 800dfc2:	015b      	lsls	r3, r3, #5
 800dfc4:	4413      	add	r3, r2
 800dfc6:	333c      	adds	r3, #60	; 0x3c
 800dfc8:	681a      	ldr	r2, [r3, #0]
 800dfca:	78fb      	ldrb	r3, [r7, #3]
 800dfcc:	4619      	mov	r1, r3
 800dfce:	f7fb fe3b 	bl	8009c48 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800dfd2:	bf00      	nop
 800dfd4:	3708      	adds	r7, #8
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}

0800dfda <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfda:	b580      	push	{r7, lr}
 800dfdc:	b082      	sub	sp, #8
 800dfde:	af00      	add	r7, sp, #0
 800dfe0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */  
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);  
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800dfe8:	4618      	mov	r0, r3
 800dfea:	f7fb ff4e 	bl	8009e8a <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800dfee:	bf00      	nop
 800dff0:	3708      	adds	r7, #8
 800dff2:	46bd      	mov	sp, r7
 800dff4:	bd80      	pop	{r7, pc}

0800dff6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800dff6:	b580      	push	{r7, lr}
 800dff8:	b084      	sub	sp, #16
 800dffa:	af00      	add	r7, sp, #0
 800dffc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dffe:	2301      	movs	r3, #1
 800e000:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	689b      	ldr	r3, [r3, #8]
 800e006:	2b02      	cmp	r3, #2
 800e008:	d001      	beq.n	800e00e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e00a:	f7f3 fce7 	bl	80019dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e014:	7bfa      	ldrb	r2, [r7, #15]
 800e016:	4611      	mov	r1, r2
 800e018:	4618      	mov	r0, r3
 800e01a:	f7fb fefb 	bl	8009e14 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e024:	4618      	mov	r0, r3
 800e026:	f7fb feb4 	bl	8009d92 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800e02a:	bf00      	nop
 800e02c:	3710      	adds	r7, #16
 800e02e:	46bd      	mov	sp, r7
 800e030:	bd80      	pop	{r7, pc}
	...

0800e034 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b082      	sub	sp, #8
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e042:	4618      	mov	r0, r3
 800e044:	f7fb fef6 	bl	8009e34 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	699b      	ldr	r3, [r3, #24]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d005      	beq.n	800e05c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e050:	4b04      	ldr	r3, [pc, #16]	; (800e064 <HAL_PCD_SuspendCallback+0x30>)
 800e052:	691b      	ldr	r3, [r3, #16]
 800e054:	4a03      	ldr	r2, [pc, #12]	; (800e064 <HAL_PCD_SuspendCallback+0x30>)
 800e056:	f043 0306 	orr.w	r3, r3, #6
 800e05a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800e05c:	bf00      	nop
 800e05e:	3708      	adds	r7, #8
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}
 800e064:	e000ed00 	.word	0xe000ed00

0800e068 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b082      	sub	sp, #8
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	699b      	ldr	r3, [r3, #24]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d007      	beq.n	800e088 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e078:	4b08      	ldr	r3, [pc, #32]	; (800e09c <HAL_PCD_ResumeCallback+0x34>)
 800e07a:	691b      	ldr	r3, [r3, #16]
 800e07c:	4a07      	ldr	r2, [pc, #28]	; (800e09c <HAL_PCD_ResumeCallback+0x34>)
 800e07e:	f023 0306 	bic.w	r3, r3, #6
 800e082:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800e084:	f000 f9f8 	bl	800e478 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
 
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e08e:	4618      	mov	r0, r3
 800e090:	f7fb fee5 	bl	8009e5e <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800e094:	bf00      	nop
 800e096:	3708      	adds	r7, #8
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}
 800e09c:	e000ed00 	.word	0xe000ed00

0800e0a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b082      	sub	sp, #8
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800e0a8:	4a2c      	ldr	r2, [pc, #176]	; (800e15c <USBD_LL_Init+0xbc>)
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	4a2a      	ldr	r2, [pc, #168]	; (800e15c <USBD_LL_Init+0xbc>)
 800e0b4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800e0b8:	f7f5 feca 	bl	8003e50 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800e0bc:	4b27      	ldr	r3, [pc, #156]	; (800e15c <USBD_LL_Init+0xbc>)
 800e0be:	4a28      	ldr	r2, [pc, #160]	; (800e160 <USBD_LL_Init+0xc0>)
 800e0c0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e0c2:	4b26      	ldr	r3, [pc, #152]	; (800e15c <USBD_LL_Init+0xbc>)
 800e0c4:	2208      	movs	r2, #8
 800e0c6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e0c8:	4b24      	ldr	r3, [pc, #144]	; (800e15c <USBD_LL_Init+0xbc>)
 800e0ca:	2202      	movs	r2, #2
 800e0cc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e0ce:	4b23      	ldr	r3, [pc, #140]	; (800e15c <USBD_LL_Init+0xbc>)
 800e0d0:	2202      	movs	r2, #2
 800e0d2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800e0d4:	4b21      	ldr	r3, [pc, #132]	; (800e15c <USBD_LL_Init+0xbc>)
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e0da:	4b20      	ldr	r3, [pc, #128]	; (800e15c <USBD_LL_Init+0xbc>)
 800e0dc:	2200      	movs	r2, #0
 800e0de:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800e0e0:	4b1e      	ldr	r3, [pc, #120]	; (800e15c <USBD_LL_Init+0xbc>)
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e0e6:	4b1d      	ldr	r3, [pc, #116]	; (800e15c <USBD_LL_Init+0xbc>)
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e0ec:	481b      	ldr	r0, [pc, #108]	; (800e15c <USBD_LL_Init+0xbc>)
 800e0ee:	f7f4 ff67 	bl	8002fc0 <HAL_PCD_Init>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d001      	beq.n	800e0fc <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800e0f8:	f7f3 fc70 	bl	80019dc <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */
  
  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e102:	2318      	movs	r3, #24
 800e104:	2200      	movs	r2, #0
 800e106:	2100      	movs	r1, #0
 800e108:	f7f5 fe1c 	bl	8003d44 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e112:	2358      	movs	r3, #88	; 0x58
 800e114:	2200      	movs	r2, #0
 800e116:	2180      	movs	r1, #128	; 0x80
 800e118:	f7f5 fe14 	bl	8003d44 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e122:	23c0      	movs	r3, #192	; 0xc0
 800e124:	2200      	movs	r2, #0
 800e126:	2181      	movs	r1, #129	; 0x81
 800e128:	f7f5 fe0c 	bl	8003d44 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e132:	f44f 7388 	mov.w	r3, #272	; 0x110
 800e136:	2200      	movs	r2, #0
 800e138:	2101      	movs	r1, #1
 800e13a:	f7f5 fe03 	bl	8003d44 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e144:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e148:	2200      	movs	r2, #0
 800e14a:	2182      	movs	r1, #130	; 0x82
 800e14c:	f7f5 fdfa 	bl	8003d44 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800e150:	2300      	movs	r3, #0
}
 800e152:	4618      	mov	r0, r3
 800e154:	3708      	adds	r7, #8
 800e156:	46bd      	mov	sp, r7
 800e158:	bd80      	pop	{r7, pc}
 800e15a:	bf00      	nop
 800e15c:	20000cac 	.word	0x20000cac
 800e160:	40006800 	.word	0x40006800

0800e164 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b084      	sub	sp, #16
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e16c:	2300      	movs	r3, #0
 800e16e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e170:	2300      	movs	r3, #0
 800e172:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e17a:	4618      	mov	r0, r3
 800e17c:	f7f4 ffe8 	bl	8003150 <HAL_PCD_Start>
 800e180:	4603      	mov	r3, r0
 800e182:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e184:	7bfb      	ldrb	r3, [r7, #15]
 800e186:	4618      	mov	r0, r3
 800e188:	f000 f97c 	bl	800e484 <USBD_Get_USB_Status>
 800e18c:	4603      	mov	r3, r0
 800e18e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800e190:	7bbb      	ldrb	r3, [r7, #14]
}
 800e192:	4618      	mov	r0, r3
 800e194:	3710      	adds	r7, #16
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}

0800e19a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e19a:	b580      	push	{r7, lr}
 800e19c:	b084      	sub	sp, #16
 800e19e:	af00      	add	r7, sp, #0
 800e1a0:	6078      	str	r0, [r7, #4]
 800e1a2:	4608      	mov	r0, r1
 800e1a4:	4611      	mov	r1, r2
 800e1a6:	461a      	mov	r2, r3
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	70fb      	strb	r3, [r7, #3]
 800e1ac:	460b      	mov	r3, r1
 800e1ae:	70bb      	strb	r3, [r7, #2]
 800e1b0:	4613      	mov	r3, r2
 800e1b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e1c2:	78bb      	ldrb	r3, [r7, #2]
 800e1c4:	883a      	ldrh	r2, [r7, #0]
 800e1c6:	78f9      	ldrb	r1, [r7, #3]
 800e1c8:	f7f5 f962 	bl	8003490 <HAL_PCD_EP_Open>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1d0:	7bfb      	ldrb	r3, [r7, #15]
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f000 f956 	bl	800e484 <USBD_Get_USB_Status>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800e1dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	3710      	adds	r7, #16
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}

0800e1e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1e6:	b580      	push	{r7, lr}
 800e1e8:	b084      	sub	sp, #16
 800e1ea:	af00      	add	r7, sp, #0
 800e1ec:	6078      	str	r0, [r7, #4]
 800e1ee:	460b      	mov	r3, r1
 800e1f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e200:	78fa      	ldrb	r2, [r7, #3]
 800e202:	4611      	mov	r1, r2
 800e204:	4618      	mov	r0, r3
 800e206:	f7f5 f9a3 	bl	8003550 <HAL_PCD_EP_Close>
 800e20a:	4603      	mov	r3, r0
 800e20c:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e20e:	7bfb      	ldrb	r3, [r7, #15]
 800e210:	4618      	mov	r0, r3
 800e212:	f000 f937 	bl	800e484 <USBD_Get_USB_Status>
 800e216:	4603      	mov	r3, r0
 800e218:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800e21a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e21c:	4618      	mov	r0, r3
 800e21e:	3710      	adds	r7, #16
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}

0800e224 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b084      	sub	sp, #16
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
 800e22c:	460b      	mov	r3, r1
 800e22e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e230:	2300      	movs	r3, #0
 800e232:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e234:	2300      	movs	r3, #0
 800e236:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e23e:	78fa      	ldrb	r2, [r7, #3]
 800e240:	4611      	mov	r1, r2
 800e242:	4618      	mov	r0, r3
 800e244:	f7f5 fa4e 	bl	80036e4 <HAL_PCD_EP_SetStall>
 800e248:	4603      	mov	r3, r0
 800e24a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e24c:	7bfb      	ldrb	r3, [r7, #15]
 800e24e:	4618      	mov	r0, r3
 800e250:	f000 f918 	bl	800e484 <USBD_Get_USB_Status>
 800e254:	4603      	mov	r3, r0
 800e256:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800e258:	7bbb      	ldrb	r3, [r7, #14]
}
 800e25a:	4618      	mov	r0, r3
 800e25c:	3710      	adds	r7, #16
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd80      	pop	{r7, pc}

0800e262 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e262:	b580      	push	{r7, lr}
 800e264:	b084      	sub	sp, #16
 800e266:	af00      	add	r7, sp, #0
 800e268:	6078      	str	r0, [r7, #4]
 800e26a:	460b      	mov	r3, r1
 800e26c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e26e:	2300      	movs	r3, #0
 800e270:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e272:	2300      	movs	r3, #0
 800e274:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e27c:	78fa      	ldrb	r2, [r7, #3]
 800e27e:	4611      	mov	r1, r2
 800e280:	4618      	mov	r0, r3
 800e282:	f7f5 fa89 	bl	8003798 <HAL_PCD_EP_ClrStall>
 800e286:	4603      	mov	r3, r0
 800e288:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e28a:	7bfb      	ldrb	r3, [r7, #15]
 800e28c:	4618      	mov	r0, r3
 800e28e:	f000 f8f9 	bl	800e484 <USBD_Get_USB_Status>
 800e292:	4603      	mov	r3, r0
 800e294:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 800e296:	7bbb      	ldrb	r3, [r7, #14]
}
 800e298:	4618      	mov	r0, r3
 800e29a:	3710      	adds	r7, #16
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}

0800e2a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e2a0:	b480      	push	{r7}
 800e2a2:	b085      	sub	sp, #20
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
 800e2a8:	460b      	mov	r3, r1
 800e2aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e2b2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800e2b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	da08      	bge.n	800e2ce <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800e2bc:	78fb      	ldrb	r3, [r7, #3]
 800e2be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e2c2:	68fa      	ldr	r2, [r7, #12]
 800e2c4:	015b      	lsls	r3, r3, #5
 800e2c6:	4413      	add	r3, r2
 800e2c8:	332a      	adds	r3, #42	; 0x2a
 800e2ca:	781b      	ldrb	r3, [r3, #0]
 800e2cc:	e008      	b.n	800e2e0 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800e2ce:	78fb      	ldrb	r3, [r7, #3]
 800e2d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e2d4:	68fa      	ldr	r2, [r7, #12]
 800e2d6:	015b      	lsls	r3, r3, #5
 800e2d8:	4413      	add	r3, r2
 800e2da:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800e2de:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3714      	adds	r7, #20
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ea:	4770      	bx	lr

0800e2ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b084      	sub	sp, #16
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
 800e2f4:	460b      	mov	r3, r1
 800e2f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e306:	78fa      	ldrb	r2, [r7, #3]
 800e308:	4611      	mov	r1, r2
 800e30a:	4618      	mov	r0, r3
 800e30c:	f7f5 f89b 	bl	8003446 <HAL_PCD_SetAddress>
 800e310:	4603      	mov	r3, r0
 800e312:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e314:	7bfb      	ldrb	r3, [r7, #15]
 800e316:	4618      	mov	r0, r3
 800e318:	f000 f8b4 	bl	800e484 <USBD_Get_USB_Status>
 800e31c:	4603      	mov	r3, r0
 800e31e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800e320:	7bbb      	ldrb	r3, [r7, #14]
}
 800e322:	4618      	mov	r0, r3
 800e324:	3710      	adds	r7, #16
 800e326:	46bd      	mov	sp, r7
 800e328:	bd80      	pop	{r7, pc}

0800e32a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e32a:	b580      	push	{r7, lr}
 800e32c:	b086      	sub	sp, #24
 800e32e:	af00      	add	r7, sp, #0
 800e330:	60f8      	str	r0, [r7, #12]
 800e332:	607a      	str	r2, [r7, #4]
 800e334:	461a      	mov	r2, r3
 800e336:	460b      	mov	r3, r1
 800e338:	72fb      	strb	r3, [r7, #11]
 800e33a:	4613      	mov	r3, r2
 800e33c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e33e:	2300      	movs	r3, #0
 800e340:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e342:	2300      	movs	r3, #0
 800e344:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e34c:	893b      	ldrh	r3, [r7, #8]
 800e34e:	7af9      	ldrb	r1, [r7, #11]
 800e350:	687a      	ldr	r2, [r7, #4]
 800e352:	f7f5 f98e 	bl	8003672 <HAL_PCD_EP_Transmit>
 800e356:	4603      	mov	r3, r0
 800e358:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e35a:	7dfb      	ldrb	r3, [r7, #23]
 800e35c:	4618      	mov	r0, r3
 800e35e:	f000 f891 	bl	800e484 <USBD_Get_USB_Status>
 800e362:	4603      	mov	r3, r0
 800e364:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800e366:	7dbb      	ldrb	r3, [r7, #22]
}
 800e368:	4618      	mov	r0, r3
 800e36a:	3718      	adds	r7, #24
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bd80      	pop	{r7, pc}

0800e370 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b086      	sub	sp, #24
 800e374:	af00      	add	r7, sp, #0
 800e376:	60f8      	str	r0, [r7, #12]
 800e378:	607a      	str	r2, [r7, #4]
 800e37a:	461a      	mov	r2, r3
 800e37c:	460b      	mov	r3, r1
 800e37e:	72fb      	strb	r3, [r7, #11]
 800e380:	4613      	mov	r3, r2
 800e382:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e384:	2300      	movs	r3, #0
 800e386:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e388:	2300      	movs	r3, #0
 800e38a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e392:	893b      	ldrh	r3, [r7, #8]
 800e394:	7af9      	ldrb	r1, [r7, #11]
 800e396:	687a      	ldr	r2, [r7, #4]
 800e398:	f7f5 f91c 	bl	80035d4 <HAL_PCD_EP_Receive>
 800e39c:	4603      	mov	r3, r0
 800e39e:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3a0:	7dfb      	ldrb	r3, [r7, #23]
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f000 f86e 	bl	800e484 <USBD_Get_USB_Status>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 800e3ac:	7dbb      	ldrb	r3, [r7, #22]
}
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	3718      	adds	r7, #24
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}

0800e3b6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3b6:	b580      	push	{r7, lr}
 800e3b8:	b082      	sub	sp, #8
 800e3ba:	af00      	add	r7, sp, #0
 800e3bc:	6078      	str	r0, [r7, #4]
 800e3be:	460b      	mov	r3, r1
 800e3c0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e3c8:	78fa      	ldrb	r2, [r7, #3]
 800e3ca:	4611      	mov	r1, r2
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	f7f5 f93b 	bl	8003648 <HAL_PCD_EP_GetRxCount>
 800e3d2:	4603      	mov	r3, r0
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3708      	adds	r7, #8
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}

0800e3dc <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b082      	sub	sp, #8
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
 800e3e4:	460b      	mov	r3, r1
 800e3e6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800e3e8:	78fb      	ldrb	r3, [r7, #3]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d002      	beq.n	800e3f4 <HAL_PCDEx_LPM_Callback+0x18>
 800e3ee:	2b01      	cmp	r3, #1
 800e3f0:	d013      	beq.n	800e41a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
  /* USER CODE END LPM_Callback */
}
 800e3f2:	e023      	b.n	800e43c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	699b      	ldr	r3, [r3, #24]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d007      	beq.n	800e40c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e3fc:	f000 f83c 	bl	800e478 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e400:	4b10      	ldr	r3, [pc, #64]	; (800e444 <HAL_PCDEx_LPM_Callback+0x68>)
 800e402:	691b      	ldr	r3, [r3, #16]
 800e404:	4a0f      	ldr	r2, [pc, #60]	; (800e444 <HAL_PCDEx_LPM_Callback+0x68>)
 800e406:	f023 0306 	bic.w	r3, r3, #6
 800e40a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e412:	4618      	mov	r0, r3
 800e414:	f7fb fd23 	bl	8009e5e <USBD_LL_Resume>
    break;
 800e418:	e010      	b.n	800e43c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e420:	4618      	mov	r0, r3
 800e422:	f7fb fd07 	bl	8009e34 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	699b      	ldr	r3, [r3, #24]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d005      	beq.n	800e43a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e42e:	4b05      	ldr	r3, [pc, #20]	; (800e444 <HAL_PCDEx_LPM_Callback+0x68>)
 800e430:	691b      	ldr	r3, [r3, #16]
 800e432:	4a04      	ldr	r2, [pc, #16]	; (800e444 <HAL_PCDEx_LPM_Callback+0x68>)
 800e434:	f043 0306 	orr.w	r3, r3, #6
 800e438:	6113      	str	r3, [r2, #16]
    break;   
 800e43a:	bf00      	nop
}
 800e43c:	bf00      	nop
 800e43e:	3708      	adds	r7, #8
 800e440:	46bd      	mov	sp, r7
 800e442:	bd80      	pop	{r7, pc}
 800e444:	e000ed00 	.word	0xe000ed00

0800e448 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e448:	b480      	push	{r7}
 800e44a:	b083      	sub	sp, #12
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e450:	4b03      	ldr	r3, [pc, #12]	; (800e460 <USBD_static_malloc+0x18>)
}
 800e452:	4618      	mov	r0, r3
 800e454:	370c      	adds	r7, #12
 800e456:	46bd      	mov	sp, r7
 800e458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45c:	4770      	bx	lr
 800e45e:	bf00      	nop
 800e460:	200004d4 	.word	0x200004d4

0800e464 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e464:	b480      	push	{r7}
 800e466:	b083      	sub	sp, #12
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]

}
 800e46c:	bf00      	nop
 800e46e:	370c      	adds	r7, #12
 800e470:	46bd      	mov	sp, r7
 800e472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e476:	4770      	bx	lr

0800e478 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e47c:	f7f3 f8b0 	bl	80015e0 <SystemClock_Config>
}
 800e480:	bf00      	nop
 800e482:	bd80      	pop	{r7, pc}

0800e484 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e484:	b480      	push	{r7}
 800e486:	b085      	sub	sp, #20
 800e488:	af00      	add	r7, sp, #0
 800e48a:	4603      	mov	r3, r0
 800e48c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e48e:	2300      	movs	r3, #0
 800e490:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e492:	79fb      	ldrb	r3, [r7, #7]
 800e494:	2b03      	cmp	r3, #3
 800e496:	d817      	bhi.n	800e4c8 <USBD_Get_USB_Status+0x44>
 800e498:	a201      	add	r2, pc, #4	; (adr r2, 800e4a0 <USBD_Get_USB_Status+0x1c>)
 800e49a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e49e:	bf00      	nop
 800e4a0:	0800e4b1 	.word	0x0800e4b1
 800e4a4:	0800e4b7 	.word	0x0800e4b7
 800e4a8:	0800e4bd 	.word	0x0800e4bd
 800e4ac:	0800e4c3 	.word	0x0800e4c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	73fb      	strb	r3, [r7, #15]
    break;
 800e4b4:	e00b      	b.n	800e4ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e4b6:	2302      	movs	r3, #2
 800e4b8:	73fb      	strb	r3, [r7, #15]
    break;
 800e4ba:	e008      	b.n	800e4ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e4bc:	2301      	movs	r3, #1
 800e4be:	73fb      	strb	r3, [r7, #15]
    break;
 800e4c0:	e005      	b.n	800e4ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e4c2:	2302      	movs	r3, #2
 800e4c4:	73fb      	strb	r3, [r7, #15]
    break;
 800e4c6:	e002      	b.n	800e4ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e4c8:	2302      	movs	r3, #2
 800e4ca:	73fb      	strb	r3, [r7, #15]
    break;
 800e4cc:	bf00      	nop
  }
  return usb_status;
 800e4ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	3714      	adds	r7, #20
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4da:	4770      	bx	lr

0800e4dc <__errno>:
 800e4dc:	4b01      	ldr	r3, [pc, #4]	; (800e4e4 <__errno+0x8>)
 800e4de:	6818      	ldr	r0, [r3, #0]
 800e4e0:	4770      	bx	lr
 800e4e2:	bf00      	nop
 800e4e4:	2000018c 	.word	0x2000018c

0800e4e8 <__libc_init_array>:
 800e4e8:	b570      	push	{r4, r5, r6, lr}
 800e4ea:	4e0d      	ldr	r6, [pc, #52]	; (800e520 <__libc_init_array+0x38>)
 800e4ec:	4c0d      	ldr	r4, [pc, #52]	; (800e524 <__libc_init_array+0x3c>)
 800e4ee:	1ba4      	subs	r4, r4, r6
 800e4f0:	10a4      	asrs	r4, r4, #2
 800e4f2:	2500      	movs	r5, #0
 800e4f4:	42a5      	cmp	r5, r4
 800e4f6:	d109      	bne.n	800e50c <__libc_init_array+0x24>
 800e4f8:	4e0b      	ldr	r6, [pc, #44]	; (800e528 <__libc_init_array+0x40>)
 800e4fa:	4c0c      	ldr	r4, [pc, #48]	; (800e52c <__libc_init_array+0x44>)
 800e4fc:	f000 fc38 	bl	800ed70 <_init>
 800e500:	1ba4      	subs	r4, r4, r6
 800e502:	10a4      	asrs	r4, r4, #2
 800e504:	2500      	movs	r5, #0
 800e506:	42a5      	cmp	r5, r4
 800e508:	d105      	bne.n	800e516 <__libc_init_array+0x2e>
 800e50a:	bd70      	pop	{r4, r5, r6, pc}
 800e50c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e510:	4798      	blx	r3
 800e512:	3501      	adds	r5, #1
 800e514:	e7ee      	b.n	800e4f4 <__libc_init_array+0xc>
 800e516:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e51a:	4798      	blx	r3
 800e51c:	3501      	adds	r5, #1
 800e51e:	e7f2      	b.n	800e506 <__libc_init_array+0x1e>
 800e520:	0800f1ac 	.word	0x0800f1ac
 800e524:	0800f1ac 	.word	0x0800f1ac
 800e528:	0800f1ac 	.word	0x0800f1ac
 800e52c:	0800f1b0 	.word	0x0800f1b0

0800e530 <memcpy>:
 800e530:	b510      	push	{r4, lr}
 800e532:	1e43      	subs	r3, r0, #1
 800e534:	440a      	add	r2, r1
 800e536:	4291      	cmp	r1, r2
 800e538:	d100      	bne.n	800e53c <memcpy+0xc>
 800e53a:	bd10      	pop	{r4, pc}
 800e53c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e540:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e544:	e7f7      	b.n	800e536 <memcpy+0x6>

0800e546 <memset>:
 800e546:	4402      	add	r2, r0
 800e548:	4603      	mov	r3, r0
 800e54a:	4293      	cmp	r3, r2
 800e54c:	d100      	bne.n	800e550 <memset+0xa>
 800e54e:	4770      	bx	lr
 800e550:	f803 1b01 	strb.w	r1, [r3], #1
 800e554:	e7f9      	b.n	800e54a <memset+0x4>
	...

0800e558 <siprintf>:
 800e558:	b40e      	push	{r1, r2, r3}
 800e55a:	b500      	push	{lr}
 800e55c:	b09c      	sub	sp, #112	; 0x70
 800e55e:	ab1d      	add	r3, sp, #116	; 0x74
 800e560:	9002      	str	r0, [sp, #8]
 800e562:	9006      	str	r0, [sp, #24]
 800e564:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e568:	4809      	ldr	r0, [pc, #36]	; (800e590 <siprintf+0x38>)
 800e56a:	9107      	str	r1, [sp, #28]
 800e56c:	9104      	str	r1, [sp, #16]
 800e56e:	4909      	ldr	r1, [pc, #36]	; (800e594 <siprintf+0x3c>)
 800e570:	f853 2b04 	ldr.w	r2, [r3], #4
 800e574:	9105      	str	r1, [sp, #20]
 800e576:	6800      	ldr	r0, [r0, #0]
 800e578:	9301      	str	r3, [sp, #4]
 800e57a:	a902      	add	r1, sp, #8
 800e57c:	f000 f8d0 	bl	800e720 <_svfiprintf_r>
 800e580:	9b02      	ldr	r3, [sp, #8]
 800e582:	2200      	movs	r2, #0
 800e584:	701a      	strb	r2, [r3, #0]
 800e586:	b01c      	add	sp, #112	; 0x70
 800e588:	f85d eb04 	ldr.w	lr, [sp], #4
 800e58c:	b003      	add	sp, #12
 800e58e:	4770      	bx	lr
 800e590:	2000018c 	.word	0x2000018c
 800e594:	ffff0208 	.word	0xffff0208

0800e598 <strcat>:
 800e598:	b510      	push	{r4, lr}
 800e59a:	4603      	mov	r3, r0
 800e59c:	781a      	ldrb	r2, [r3, #0]
 800e59e:	1c5c      	adds	r4, r3, #1
 800e5a0:	b93a      	cbnz	r2, 800e5b2 <strcat+0x1a>
 800e5a2:	3b01      	subs	r3, #1
 800e5a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e5a8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e5ac:	2a00      	cmp	r2, #0
 800e5ae:	d1f9      	bne.n	800e5a4 <strcat+0xc>
 800e5b0:	bd10      	pop	{r4, pc}
 800e5b2:	4623      	mov	r3, r4
 800e5b4:	e7f2      	b.n	800e59c <strcat+0x4>
	...

0800e5b8 <_malloc_r>:
 800e5b8:	b570      	push	{r4, r5, r6, lr}
 800e5ba:	1ccd      	adds	r5, r1, #3
 800e5bc:	f025 0503 	bic.w	r5, r5, #3
 800e5c0:	3508      	adds	r5, #8
 800e5c2:	2d0c      	cmp	r5, #12
 800e5c4:	bf38      	it	cc
 800e5c6:	250c      	movcc	r5, #12
 800e5c8:	2d00      	cmp	r5, #0
 800e5ca:	4606      	mov	r6, r0
 800e5cc:	db01      	blt.n	800e5d2 <_malloc_r+0x1a>
 800e5ce:	42a9      	cmp	r1, r5
 800e5d0:	d903      	bls.n	800e5da <_malloc_r+0x22>
 800e5d2:	230c      	movs	r3, #12
 800e5d4:	6033      	str	r3, [r6, #0]
 800e5d6:	2000      	movs	r0, #0
 800e5d8:	bd70      	pop	{r4, r5, r6, pc}
 800e5da:	f000 fb4a 	bl	800ec72 <__malloc_lock>
 800e5de:	4a21      	ldr	r2, [pc, #132]	; (800e664 <_malloc_r+0xac>)
 800e5e0:	6814      	ldr	r4, [r2, #0]
 800e5e2:	4621      	mov	r1, r4
 800e5e4:	b991      	cbnz	r1, 800e60c <_malloc_r+0x54>
 800e5e6:	4c20      	ldr	r4, [pc, #128]	; (800e668 <_malloc_r+0xb0>)
 800e5e8:	6823      	ldr	r3, [r4, #0]
 800e5ea:	b91b      	cbnz	r3, 800e5f4 <_malloc_r+0x3c>
 800e5ec:	4630      	mov	r0, r6
 800e5ee:	f000 fb17 	bl	800ec20 <_sbrk_r>
 800e5f2:	6020      	str	r0, [r4, #0]
 800e5f4:	4629      	mov	r1, r5
 800e5f6:	4630      	mov	r0, r6
 800e5f8:	f000 fb12 	bl	800ec20 <_sbrk_r>
 800e5fc:	1c43      	adds	r3, r0, #1
 800e5fe:	d124      	bne.n	800e64a <_malloc_r+0x92>
 800e600:	230c      	movs	r3, #12
 800e602:	6033      	str	r3, [r6, #0]
 800e604:	4630      	mov	r0, r6
 800e606:	f000 fb35 	bl	800ec74 <__malloc_unlock>
 800e60a:	e7e4      	b.n	800e5d6 <_malloc_r+0x1e>
 800e60c:	680b      	ldr	r3, [r1, #0]
 800e60e:	1b5b      	subs	r3, r3, r5
 800e610:	d418      	bmi.n	800e644 <_malloc_r+0x8c>
 800e612:	2b0b      	cmp	r3, #11
 800e614:	d90f      	bls.n	800e636 <_malloc_r+0x7e>
 800e616:	600b      	str	r3, [r1, #0]
 800e618:	50cd      	str	r5, [r1, r3]
 800e61a:	18cc      	adds	r4, r1, r3
 800e61c:	4630      	mov	r0, r6
 800e61e:	f000 fb29 	bl	800ec74 <__malloc_unlock>
 800e622:	f104 000b 	add.w	r0, r4, #11
 800e626:	1d23      	adds	r3, r4, #4
 800e628:	f020 0007 	bic.w	r0, r0, #7
 800e62c:	1ac3      	subs	r3, r0, r3
 800e62e:	d0d3      	beq.n	800e5d8 <_malloc_r+0x20>
 800e630:	425a      	negs	r2, r3
 800e632:	50e2      	str	r2, [r4, r3]
 800e634:	e7d0      	b.n	800e5d8 <_malloc_r+0x20>
 800e636:	428c      	cmp	r4, r1
 800e638:	684b      	ldr	r3, [r1, #4]
 800e63a:	bf16      	itet	ne
 800e63c:	6063      	strne	r3, [r4, #4]
 800e63e:	6013      	streq	r3, [r2, #0]
 800e640:	460c      	movne	r4, r1
 800e642:	e7eb      	b.n	800e61c <_malloc_r+0x64>
 800e644:	460c      	mov	r4, r1
 800e646:	6849      	ldr	r1, [r1, #4]
 800e648:	e7cc      	b.n	800e5e4 <_malloc_r+0x2c>
 800e64a:	1cc4      	adds	r4, r0, #3
 800e64c:	f024 0403 	bic.w	r4, r4, #3
 800e650:	42a0      	cmp	r0, r4
 800e652:	d005      	beq.n	800e660 <_malloc_r+0xa8>
 800e654:	1a21      	subs	r1, r4, r0
 800e656:	4630      	mov	r0, r6
 800e658:	f000 fae2 	bl	800ec20 <_sbrk_r>
 800e65c:	3001      	adds	r0, #1
 800e65e:	d0cf      	beq.n	800e600 <_malloc_r+0x48>
 800e660:	6025      	str	r5, [r4, #0]
 800e662:	e7db      	b.n	800e61c <_malloc_r+0x64>
 800e664:	200006f4 	.word	0x200006f4
 800e668:	200006f8 	.word	0x200006f8

0800e66c <__ssputs_r>:
 800e66c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e670:	688e      	ldr	r6, [r1, #8]
 800e672:	429e      	cmp	r6, r3
 800e674:	4682      	mov	sl, r0
 800e676:	460c      	mov	r4, r1
 800e678:	4690      	mov	r8, r2
 800e67a:	4699      	mov	r9, r3
 800e67c:	d837      	bhi.n	800e6ee <__ssputs_r+0x82>
 800e67e:	898a      	ldrh	r2, [r1, #12]
 800e680:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e684:	d031      	beq.n	800e6ea <__ssputs_r+0x7e>
 800e686:	6825      	ldr	r5, [r4, #0]
 800e688:	6909      	ldr	r1, [r1, #16]
 800e68a:	1a6f      	subs	r7, r5, r1
 800e68c:	6965      	ldr	r5, [r4, #20]
 800e68e:	2302      	movs	r3, #2
 800e690:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e694:	fb95 f5f3 	sdiv	r5, r5, r3
 800e698:	f109 0301 	add.w	r3, r9, #1
 800e69c:	443b      	add	r3, r7
 800e69e:	429d      	cmp	r5, r3
 800e6a0:	bf38      	it	cc
 800e6a2:	461d      	movcc	r5, r3
 800e6a4:	0553      	lsls	r3, r2, #21
 800e6a6:	d530      	bpl.n	800e70a <__ssputs_r+0x9e>
 800e6a8:	4629      	mov	r1, r5
 800e6aa:	f7ff ff85 	bl	800e5b8 <_malloc_r>
 800e6ae:	4606      	mov	r6, r0
 800e6b0:	b950      	cbnz	r0, 800e6c8 <__ssputs_r+0x5c>
 800e6b2:	230c      	movs	r3, #12
 800e6b4:	f8ca 3000 	str.w	r3, [sl]
 800e6b8:	89a3      	ldrh	r3, [r4, #12]
 800e6ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6be:	81a3      	strh	r3, [r4, #12]
 800e6c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e6c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6c8:	463a      	mov	r2, r7
 800e6ca:	6921      	ldr	r1, [r4, #16]
 800e6cc:	f7ff ff30 	bl	800e530 <memcpy>
 800e6d0:	89a3      	ldrh	r3, [r4, #12]
 800e6d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e6d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e6da:	81a3      	strh	r3, [r4, #12]
 800e6dc:	6126      	str	r6, [r4, #16]
 800e6de:	6165      	str	r5, [r4, #20]
 800e6e0:	443e      	add	r6, r7
 800e6e2:	1bed      	subs	r5, r5, r7
 800e6e4:	6026      	str	r6, [r4, #0]
 800e6e6:	60a5      	str	r5, [r4, #8]
 800e6e8:	464e      	mov	r6, r9
 800e6ea:	454e      	cmp	r6, r9
 800e6ec:	d900      	bls.n	800e6f0 <__ssputs_r+0x84>
 800e6ee:	464e      	mov	r6, r9
 800e6f0:	4632      	mov	r2, r6
 800e6f2:	4641      	mov	r1, r8
 800e6f4:	6820      	ldr	r0, [r4, #0]
 800e6f6:	f000 faa3 	bl	800ec40 <memmove>
 800e6fa:	68a3      	ldr	r3, [r4, #8]
 800e6fc:	1b9b      	subs	r3, r3, r6
 800e6fe:	60a3      	str	r3, [r4, #8]
 800e700:	6823      	ldr	r3, [r4, #0]
 800e702:	441e      	add	r6, r3
 800e704:	6026      	str	r6, [r4, #0]
 800e706:	2000      	movs	r0, #0
 800e708:	e7dc      	b.n	800e6c4 <__ssputs_r+0x58>
 800e70a:	462a      	mov	r2, r5
 800e70c:	f000 fb02 	bl	800ed14 <_realloc_r>
 800e710:	4606      	mov	r6, r0
 800e712:	2800      	cmp	r0, #0
 800e714:	d1e2      	bne.n	800e6dc <__ssputs_r+0x70>
 800e716:	6921      	ldr	r1, [r4, #16]
 800e718:	4650      	mov	r0, sl
 800e71a:	f000 faad 	bl	800ec78 <_free_r>
 800e71e:	e7c8      	b.n	800e6b2 <__ssputs_r+0x46>

0800e720 <_svfiprintf_r>:
 800e720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e724:	461d      	mov	r5, r3
 800e726:	898b      	ldrh	r3, [r1, #12]
 800e728:	061f      	lsls	r7, r3, #24
 800e72a:	b09d      	sub	sp, #116	; 0x74
 800e72c:	4680      	mov	r8, r0
 800e72e:	460c      	mov	r4, r1
 800e730:	4616      	mov	r6, r2
 800e732:	d50f      	bpl.n	800e754 <_svfiprintf_r+0x34>
 800e734:	690b      	ldr	r3, [r1, #16]
 800e736:	b96b      	cbnz	r3, 800e754 <_svfiprintf_r+0x34>
 800e738:	2140      	movs	r1, #64	; 0x40
 800e73a:	f7ff ff3d 	bl	800e5b8 <_malloc_r>
 800e73e:	6020      	str	r0, [r4, #0]
 800e740:	6120      	str	r0, [r4, #16]
 800e742:	b928      	cbnz	r0, 800e750 <_svfiprintf_r+0x30>
 800e744:	230c      	movs	r3, #12
 800e746:	f8c8 3000 	str.w	r3, [r8]
 800e74a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e74e:	e0c8      	b.n	800e8e2 <_svfiprintf_r+0x1c2>
 800e750:	2340      	movs	r3, #64	; 0x40
 800e752:	6163      	str	r3, [r4, #20]
 800e754:	2300      	movs	r3, #0
 800e756:	9309      	str	r3, [sp, #36]	; 0x24
 800e758:	2320      	movs	r3, #32
 800e75a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e75e:	2330      	movs	r3, #48	; 0x30
 800e760:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e764:	9503      	str	r5, [sp, #12]
 800e766:	f04f 0b01 	mov.w	fp, #1
 800e76a:	4637      	mov	r7, r6
 800e76c:	463d      	mov	r5, r7
 800e76e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e772:	b10b      	cbz	r3, 800e778 <_svfiprintf_r+0x58>
 800e774:	2b25      	cmp	r3, #37	; 0x25
 800e776:	d13e      	bne.n	800e7f6 <_svfiprintf_r+0xd6>
 800e778:	ebb7 0a06 	subs.w	sl, r7, r6
 800e77c:	d00b      	beq.n	800e796 <_svfiprintf_r+0x76>
 800e77e:	4653      	mov	r3, sl
 800e780:	4632      	mov	r2, r6
 800e782:	4621      	mov	r1, r4
 800e784:	4640      	mov	r0, r8
 800e786:	f7ff ff71 	bl	800e66c <__ssputs_r>
 800e78a:	3001      	adds	r0, #1
 800e78c:	f000 80a4 	beq.w	800e8d8 <_svfiprintf_r+0x1b8>
 800e790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e792:	4453      	add	r3, sl
 800e794:	9309      	str	r3, [sp, #36]	; 0x24
 800e796:	783b      	ldrb	r3, [r7, #0]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	f000 809d 	beq.w	800e8d8 <_svfiprintf_r+0x1b8>
 800e79e:	2300      	movs	r3, #0
 800e7a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e7a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e7a8:	9304      	str	r3, [sp, #16]
 800e7aa:	9307      	str	r3, [sp, #28]
 800e7ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e7b0:	931a      	str	r3, [sp, #104]	; 0x68
 800e7b2:	462f      	mov	r7, r5
 800e7b4:	2205      	movs	r2, #5
 800e7b6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e7ba:	4850      	ldr	r0, [pc, #320]	; (800e8fc <_svfiprintf_r+0x1dc>)
 800e7bc:	f7f1 fce8 	bl	8000190 <memchr>
 800e7c0:	9b04      	ldr	r3, [sp, #16]
 800e7c2:	b9d0      	cbnz	r0, 800e7fa <_svfiprintf_r+0xda>
 800e7c4:	06d9      	lsls	r1, r3, #27
 800e7c6:	bf44      	itt	mi
 800e7c8:	2220      	movmi	r2, #32
 800e7ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e7ce:	071a      	lsls	r2, r3, #28
 800e7d0:	bf44      	itt	mi
 800e7d2:	222b      	movmi	r2, #43	; 0x2b
 800e7d4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e7d8:	782a      	ldrb	r2, [r5, #0]
 800e7da:	2a2a      	cmp	r2, #42	; 0x2a
 800e7dc:	d015      	beq.n	800e80a <_svfiprintf_r+0xea>
 800e7de:	9a07      	ldr	r2, [sp, #28]
 800e7e0:	462f      	mov	r7, r5
 800e7e2:	2000      	movs	r0, #0
 800e7e4:	250a      	movs	r5, #10
 800e7e6:	4639      	mov	r1, r7
 800e7e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e7ec:	3b30      	subs	r3, #48	; 0x30
 800e7ee:	2b09      	cmp	r3, #9
 800e7f0:	d94d      	bls.n	800e88e <_svfiprintf_r+0x16e>
 800e7f2:	b1b8      	cbz	r0, 800e824 <_svfiprintf_r+0x104>
 800e7f4:	e00f      	b.n	800e816 <_svfiprintf_r+0xf6>
 800e7f6:	462f      	mov	r7, r5
 800e7f8:	e7b8      	b.n	800e76c <_svfiprintf_r+0x4c>
 800e7fa:	4a40      	ldr	r2, [pc, #256]	; (800e8fc <_svfiprintf_r+0x1dc>)
 800e7fc:	1a80      	subs	r0, r0, r2
 800e7fe:	fa0b f000 	lsl.w	r0, fp, r0
 800e802:	4318      	orrs	r0, r3
 800e804:	9004      	str	r0, [sp, #16]
 800e806:	463d      	mov	r5, r7
 800e808:	e7d3      	b.n	800e7b2 <_svfiprintf_r+0x92>
 800e80a:	9a03      	ldr	r2, [sp, #12]
 800e80c:	1d11      	adds	r1, r2, #4
 800e80e:	6812      	ldr	r2, [r2, #0]
 800e810:	9103      	str	r1, [sp, #12]
 800e812:	2a00      	cmp	r2, #0
 800e814:	db01      	blt.n	800e81a <_svfiprintf_r+0xfa>
 800e816:	9207      	str	r2, [sp, #28]
 800e818:	e004      	b.n	800e824 <_svfiprintf_r+0x104>
 800e81a:	4252      	negs	r2, r2
 800e81c:	f043 0302 	orr.w	r3, r3, #2
 800e820:	9207      	str	r2, [sp, #28]
 800e822:	9304      	str	r3, [sp, #16]
 800e824:	783b      	ldrb	r3, [r7, #0]
 800e826:	2b2e      	cmp	r3, #46	; 0x2e
 800e828:	d10c      	bne.n	800e844 <_svfiprintf_r+0x124>
 800e82a:	787b      	ldrb	r3, [r7, #1]
 800e82c:	2b2a      	cmp	r3, #42	; 0x2a
 800e82e:	d133      	bne.n	800e898 <_svfiprintf_r+0x178>
 800e830:	9b03      	ldr	r3, [sp, #12]
 800e832:	1d1a      	adds	r2, r3, #4
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	9203      	str	r2, [sp, #12]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	bfb8      	it	lt
 800e83c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e840:	3702      	adds	r7, #2
 800e842:	9305      	str	r3, [sp, #20]
 800e844:	4d2e      	ldr	r5, [pc, #184]	; (800e900 <_svfiprintf_r+0x1e0>)
 800e846:	7839      	ldrb	r1, [r7, #0]
 800e848:	2203      	movs	r2, #3
 800e84a:	4628      	mov	r0, r5
 800e84c:	f7f1 fca0 	bl	8000190 <memchr>
 800e850:	b138      	cbz	r0, 800e862 <_svfiprintf_r+0x142>
 800e852:	2340      	movs	r3, #64	; 0x40
 800e854:	1b40      	subs	r0, r0, r5
 800e856:	fa03 f000 	lsl.w	r0, r3, r0
 800e85a:	9b04      	ldr	r3, [sp, #16]
 800e85c:	4303      	orrs	r3, r0
 800e85e:	3701      	adds	r7, #1
 800e860:	9304      	str	r3, [sp, #16]
 800e862:	7839      	ldrb	r1, [r7, #0]
 800e864:	4827      	ldr	r0, [pc, #156]	; (800e904 <_svfiprintf_r+0x1e4>)
 800e866:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e86a:	2206      	movs	r2, #6
 800e86c:	1c7e      	adds	r6, r7, #1
 800e86e:	f7f1 fc8f 	bl	8000190 <memchr>
 800e872:	2800      	cmp	r0, #0
 800e874:	d038      	beq.n	800e8e8 <_svfiprintf_r+0x1c8>
 800e876:	4b24      	ldr	r3, [pc, #144]	; (800e908 <_svfiprintf_r+0x1e8>)
 800e878:	bb13      	cbnz	r3, 800e8c0 <_svfiprintf_r+0x1a0>
 800e87a:	9b03      	ldr	r3, [sp, #12]
 800e87c:	3307      	adds	r3, #7
 800e87e:	f023 0307 	bic.w	r3, r3, #7
 800e882:	3308      	adds	r3, #8
 800e884:	9303      	str	r3, [sp, #12]
 800e886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e888:	444b      	add	r3, r9
 800e88a:	9309      	str	r3, [sp, #36]	; 0x24
 800e88c:	e76d      	b.n	800e76a <_svfiprintf_r+0x4a>
 800e88e:	fb05 3202 	mla	r2, r5, r2, r3
 800e892:	2001      	movs	r0, #1
 800e894:	460f      	mov	r7, r1
 800e896:	e7a6      	b.n	800e7e6 <_svfiprintf_r+0xc6>
 800e898:	2300      	movs	r3, #0
 800e89a:	3701      	adds	r7, #1
 800e89c:	9305      	str	r3, [sp, #20]
 800e89e:	4619      	mov	r1, r3
 800e8a0:	250a      	movs	r5, #10
 800e8a2:	4638      	mov	r0, r7
 800e8a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e8a8:	3a30      	subs	r2, #48	; 0x30
 800e8aa:	2a09      	cmp	r2, #9
 800e8ac:	d903      	bls.n	800e8b6 <_svfiprintf_r+0x196>
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d0c8      	beq.n	800e844 <_svfiprintf_r+0x124>
 800e8b2:	9105      	str	r1, [sp, #20]
 800e8b4:	e7c6      	b.n	800e844 <_svfiprintf_r+0x124>
 800e8b6:	fb05 2101 	mla	r1, r5, r1, r2
 800e8ba:	2301      	movs	r3, #1
 800e8bc:	4607      	mov	r7, r0
 800e8be:	e7f0      	b.n	800e8a2 <_svfiprintf_r+0x182>
 800e8c0:	ab03      	add	r3, sp, #12
 800e8c2:	9300      	str	r3, [sp, #0]
 800e8c4:	4622      	mov	r2, r4
 800e8c6:	4b11      	ldr	r3, [pc, #68]	; (800e90c <_svfiprintf_r+0x1ec>)
 800e8c8:	a904      	add	r1, sp, #16
 800e8ca:	4640      	mov	r0, r8
 800e8cc:	f3af 8000 	nop.w
 800e8d0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800e8d4:	4681      	mov	r9, r0
 800e8d6:	d1d6      	bne.n	800e886 <_svfiprintf_r+0x166>
 800e8d8:	89a3      	ldrh	r3, [r4, #12]
 800e8da:	065b      	lsls	r3, r3, #25
 800e8dc:	f53f af35 	bmi.w	800e74a <_svfiprintf_r+0x2a>
 800e8e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e8e2:	b01d      	add	sp, #116	; 0x74
 800e8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8e8:	ab03      	add	r3, sp, #12
 800e8ea:	9300      	str	r3, [sp, #0]
 800e8ec:	4622      	mov	r2, r4
 800e8ee:	4b07      	ldr	r3, [pc, #28]	; (800e90c <_svfiprintf_r+0x1ec>)
 800e8f0:	a904      	add	r1, sp, #16
 800e8f2:	4640      	mov	r0, r8
 800e8f4:	f000 f882 	bl	800e9fc <_printf_i>
 800e8f8:	e7ea      	b.n	800e8d0 <_svfiprintf_r+0x1b0>
 800e8fa:	bf00      	nop
 800e8fc:	0800f170 	.word	0x0800f170
 800e900:	0800f176 	.word	0x0800f176
 800e904:	0800f17a 	.word	0x0800f17a
 800e908:	00000000 	.word	0x00000000
 800e90c:	0800e66d 	.word	0x0800e66d

0800e910 <_printf_common>:
 800e910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e914:	4691      	mov	r9, r2
 800e916:	461f      	mov	r7, r3
 800e918:	688a      	ldr	r2, [r1, #8]
 800e91a:	690b      	ldr	r3, [r1, #16]
 800e91c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e920:	4293      	cmp	r3, r2
 800e922:	bfb8      	it	lt
 800e924:	4613      	movlt	r3, r2
 800e926:	f8c9 3000 	str.w	r3, [r9]
 800e92a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e92e:	4606      	mov	r6, r0
 800e930:	460c      	mov	r4, r1
 800e932:	b112      	cbz	r2, 800e93a <_printf_common+0x2a>
 800e934:	3301      	adds	r3, #1
 800e936:	f8c9 3000 	str.w	r3, [r9]
 800e93a:	6823      	ldr	r3, [r4, #0]
 800e93c:	0699      	lsls	r1, r3, #26
 800e93e:	bf42      	ittt	mi
 800e940:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e944:	3302      	addmi	r3, #2
 800e946:	f8c9 3000 	strmi.w	r3, [r9]
 800e94a:	6825      	ldr	r5, [r4, #0]
 800e94c:	f015 0506 	ands.w	r5, r5, #6
 800e950:	d107      	bne.n	800e962 <_printf_common+0x52>
 800e952:	f104 0a19 	add.w	sl, r4, #25
 800e956:	68e3      	ldr	r3, [r4, #12]
 800e958:	f8d9 2000 	ldr.w	r2, [r9]
 800e95c:	1a9b      	subs	r3, r3, r2
 800e95e:	42ab      	cmp	r3, r5
 800e960:	dc28      	bgt.n	800e9b4 <_printf_common+0xa4>
 800e962:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e966:	6822      	ldr	r2, [r4, #0]
 800e968:	3300      	adds	r3, #0
 800e96a:	bf18      	it	ne
 800e96c:	2301      	movne	r3, #1
 800e96e:	0692      	lsls	r2, r2, #26
 800e970:	d42d      	bmi.n	800e9ce <_printf_common+0xbe>
 800e972:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e976:	4639      	mov	r1, r7
 800e978:	4630      	mov	r0, r6
 800e97a:	47c0      	blx	r8
 800e97c:	3001      	adds	r0, #1
 800e97e:	d020      	beq.n	800e9c2 <_printf_common+0xb2>
 800e980:	6823      	ldr	r3, [r4, #0]
 800e982:	68e5      	ldr	r5, [r4, #12]
 800e984:	f8d9 2000 	ldr.w	r2, [r9]
 800e988:	f003 0306 	and.w	r3, r3, #6
 800e98c:	2b04      	cmp	r3, #4
 800e98e:	bf08      	it	eq
 800e990:	1aad      	subeq	r5, r5, r2
 800e992:	68a3      	ldr	r3, [r4, #8]
 800e994:	6922      	ldr	r2, [r4, #16]
 800e996:	bf0c      	ite	eq
 800e998:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e99c:	2500      	movne	r5, #0
 800e99e:	4293      	cmp	r3, r2
 800e9a0:	bfc4      	itt	gt
 800e9a2:	1a9b      	subgt	r3, r3, r2
 800e9a4:	18ed      	addgt	r5, r5, r3
 800e9a6:	f04f 0900 	mov.w	r9, #0
 800e9aa:	341a      	adds	r4, #26
 800e9ac:	454d      	cmp	r5, r9
 800e9ae:	d11a      	bne.n	800e9e6 <_printf_common+0xd6>
 800e9b0:	2000      	movs	r0, #0
 800e9b2:	e008      	b.n	800e9c6 <_printf_common+0xb6>
 800e9b4:	2301      	movs	r3, #1
 800e9b6:	4652      	mov	r2, sl
 800e9b8:	4639      	mov	r1, r7
 800e9ba:	4630      	mov	r0, r6
 800e9bc:	47c0      	blx	r8
 800e9be:	3001      	adds	r0, #1
 800e9c0:	d103      	bne.n	800e9ca <_printf_common+0xba>
 800e9c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e9c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9ca:	3501      	adds	r5, #1
 800e9cc:	e7c3      	b.n	800e956 <_printf_common+0x46>
 800e9ce:	18e1      	adds	r1, r4, r3
 800e9d0:	1c5a      	adds	r2, r3, #1
 800e9d2:	2030      	movs	r0, #48	; 0x30
 800e9d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e9d8:	4422      	add	r2, r4
 800e9da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e9de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e9e2:	3302      	adds	r3, #2
 800e9e4:	e7c5      	b.n	800e972 <_printf_common+0x62>
 800e9e6:	2301      	movs	r3, #1
 800e9e8:	4622      	mov	r2, r4
 800e9ea:	4639      	mov	r1, r7
 800e9ec:	4630      	mov	r0, r6
 800e9ee:	47c0      	blx	r8
 800e9f0:	3001      	adds	r0, #1
 800e9f2:	d0e6      	beq.n	800e9c2 <_printf_common+0xb2>
 800e9f4:	f109 0901 	add.w	r9, r9, #1
 800e9f8:	e7d8      	b.n	800e9ac <_printf_common+0x9c>
	...

0800e9fc <_printf_i>:
 800e9fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ea00:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ea04:	460c      	mov	r4, r1
 800ea06:	7e09      	ldrb	r1, [r1, #24]
 800ea08:	b085      	sub	sp, #20
 800ea0a:	296e      	cmp	r1, #110	; 0x6e
 800ea0c:	4617      	mov	r7, r2
 800ea0e:	4606      	mov	r6, r0
 800ea10:	4698      	mov	r8, r3
 800ea12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ea14:	f000 80b3 	beq.w	800eb7e <_printf_i+0x182>
 800ea18:	d822      	bhi.n	800ea60 <_printf_i+0x64>
 800ea1a:	2963      	cmp	r1, #99	; 0x63
 800ea1c:	d036      	beq.n	800ea8c <_printf_i+0x90>
 800ea1e:	d80a      	bhi.n	800ea36 <_printf_i+0x3a>
 800ea20:	2900      	cmp	r1, #0
 800ea22:	f000 80b9 	beq.w	800eb98 <_printf_i+0x19c>
 800ea26:	2958      	cmp	r1, #88	; 0x58
 800ea28:	f000 8083 	beq.w	800eb32 <_printf_i+0x136>
 800ea2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ea30:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ea34:	e032      	b.n	800ea9c <_printf_i+0xa0>
 800ea36:	2964      	cmp	r1, #100	; 0x64
 800ea38:	d001      	beq.n	800ea3e <_printf_i+0x42>
 800ea3a:	2969      	cmp	r1, #105	; 0x69
 800ea3c:	d1f6      	bne.n	800ea2c <_printf_i+0x30>
 800ea3e:	6820      	ldr	r0, [r4, #0]
 800ea40:	6813      	ldr	r3, [r2, #0]
 800ea42:	0605      	lsls	r5, r0, #24
 800ea44:	f103 0104 	add.w	r1, r3, #4
 800ea48:	d52a      	bpl.n	800eaa0 <_printf_i+0xa4>
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	6011      	str	r1, [r2, #0]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	da03      	bge.n	800ea5a <_printf_i+0x5e>
 800ea52:	222d      	movs	r2, #45	; 0x2d
 800ea54:	425b      	negs	r3, r3
 800ea56:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ea5a:	486f      	ldr	r0, [pc, #444]	; (800ec18 <_printf_i+0x21c>)
 800ea5c:	220a      	movs	r2, #10
 800ea5e:	e039      	b.n	800ead4 <_printf_i+0xd8>
 800ea60:	2973      	cmp	r1, #115	; 0x73
 800ea62:	f000 809d 	beq.w	800eba0 <_printf_i+0x1a4>
 800ea66:	d808      	bhi.n	800ea7a <_printf_i+0x7e>
 800ea68:	296f      	cmp	r1, #111	; 0x6f
 800ea6a:	d020      	beq.n	800eaae <_printf_i+0xb2>
 800ea6c:	2970      	cmp	r1, #112	; 0x70
 800ea6e:	d1dd      	bne.n	800ea2c <_printf_i+0x30>
 800ea70:	6823      	ldr	r3, [r4, #0]
 800ea72:	f043 0320 	orr.w	r3, r3, #32
 800ea76:	6023      	str	r3, [r4, #0]
 800ea78:	e003      	b.n	800ea82 <_printf_i+0x86>
 800ea7a:	2975      	cmp	r1, #117	; 0x75
 800ea7c:	d017      	beq.n	800eaae <_printf_i+0xb2>
 800ea7e:	2978      	cmp	r1, #120	; 0x78
 800ea80:	d1d4      	bne.n	800ea2c <_printf_i+0x30>
 800ea82:	2378      	movs	r3, #120	; 0x78
 800ea84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ea88:	4864      	ldr	r0, [pc, #400]	; (800ec1c <_printf_i+0x220>)
 800ea8a:	e055      	b.n	800eb38 <_printf_i+0x13c>
 800ea8c:	6813      	ldr	r3, [r2, #0]
 800ea8e:	1d19      	adds	r1, r3, #4
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	6011      	str	r1, [r2, #0]
 800ea94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ea98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ea9c:	2301      	movs	r3, #1
 800ea9e:	e08c      	b.n	800ebba <_printf_i+0x1be>
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	6011      	str	r1, [r2, #0]
 800eaa4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800eaa8:	bf18      	it	ne
 800eaaa:	b21b      	sxthne	r3, r3
 800eaac:	e7cf      	b.n	800ea4e <_printf_i+0x52>
 800eaae:	6813      	ldr	r3, [r2, #0]
 800eab0:	6825      	ldr	r5, [r4, #0]
 800eab2:	1d18      	adds	r0, r3, #4
 800eab4:	6010      	str	r0, [r2, #0]
 800eab6:	0628      	lsls	r0, r5, #24
 800eab8:	d501      	bpl.n	800eabe <_printf_i+0xc2>
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	e002      	b.n	800eac4 <_printf_i+0xc8>
 800eabe:	0668      	lsls	r0, r5, #25
 800eac0:	d5fb      	bpl.n	800eaba <_printf_i+0xbe>
 800eac2:	881b      	ldrh	r3, [r3, #0]
 800eac4:	4854      	ldr	r0, [pc, #336]	; (800ec18 <_printf_i+0x21c>)
 800eac6:	296f      	cmp	r1, #111	; 0x6f
 800eac8:	bf14      	ite	ne
 800eaca:	220a      	movne	r2, #10
 800eacc:	2208      	moveq	r2, #8
 800eace:	2100      	movs	r1, #0
 800ead0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ead4:	6865      	ldr	r5, [r4, #4]
 800ead6:	60a5      	str	r5, [r4, #8]
 800ead8:	2d00      	cmp	r5, #0
 800eada:	f2c0 8095 	blt.w	800ec08 <_printf_i+0x20c>
 800eade:	6821      	ldr	r1, [r4, #0]
 800eae0:	f021 0104 	bic.w	r1, r1, #4
 800eae4:	6021      	str	r1, [r4, #0]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d13d      	bne.n	800eb66 <_printf_i+0x16a>
 800eaea:	2d00      	cmp	r5, #0
 800eaec:	f040 808e 	bne.w	800ec0c <_printf_i+0x210>
 800eaf0:	4665      	mov	r5, ip
 800eaf2:	2a08      	cmp	r2, #8
 800eaf4:	d10b      	bne.n	800eb0e <_printf_i+0x112>
 800eaf6:	6823      	ldr	r3, [r4, #0]
 800eaf8:	07db      	lsls	r3, r3, #31
 800eafa:	d508      	bpl.n	800eb0e <_printf_i+0x112>
 800eafc:	6923      	ldr	r3, [r4, #16]
 800eafe:	6862      	ldr	r2, [r4, #4]
 800eb00:	429a      	cmp	r2, r3
 800eb02:	bfde      	ittt	le
 800eb04:	2330      	movle	r3, #48	; 0x30
 800eb06:	f805 3c01 	strble.w	r3, [r5, #-1]
 800eb0a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800eb0e:	ebac 0305 	sub.w	r3, ip, r5
 800eb12:	6123      	str	r3, [r4, #16]
 800eb14:	f8cd 8000 	str.w	r8, [sp]
 800eb18:	463b      	mov	r3, r7
 800eb1a:	aa03      	add	r2, sp, #12
 800eb1c:	4621      	mov	r1, r4
 800eb1e:	4630      	mov	r0, r6
 800eb20:	f7ff fef6 	bl	800e910 <_printf_common>
 800eb24:	3001      	adds	r0, #1
 800eb26:	d14d      	bne.n	800ebc4 <_printf_i+0x1c8>
 800eb28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eb2c:	b005      	add	sp, #20
 800eb2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb32:	4839      	ldr	r0, [pc, #228]	; (800ec18 <_printf_i+0x21c>)
 800eb34:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800eb38:	6813      	ldr	r3, [r2, #0]
 800eb3a:	6821      	ldr	r1, [r4, #0]
 800eb3c:	1d1d      	adds	r5, r3, #4
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	6015      	str	r5, [r2, #0]
 800eb42:	060a      	lsls	r2, r1, #24
 800eb44:	d50b      	bpl.n	800eb5e <_printf_i+0x162>
 800eb46:	07ca      	lsls	r2, r1, #31
 800eb48:	bf44      	itt	mi
 800eb4a:	f041 0120 	orrmi.w	r1, r1, #32
 800eb4e:	6021      	strmi	r1, [r4, #0]
 800eb50:	b91b      	cbnz	r3, 800eb5a <_printf_i+0x15e>
 800eb52:	6822      	ldr	r2, [r4, #0]
 800eb54:	f022 0220 	bic.w	r2, r2, #32
 800eb58:	6022      	str	r2, [r4, #0]
 800eb5a:	2210      	movs	r2, #16
 800eb5c:	e7b7      	b.n	800eace <_printf_i+0xd2>
 800eb5e:	064d      	lsls	r5, r1, #25
 800eb60:	bf48      	it	mi
 800eb62:	b29b      	uxthmi	r3, r3
 800eb64:	e7ef      	b.n	800eb46 <_printf_i+0x14a>
 800eb66:	4665      	mov	r5, ip
 800eb68:	fbb3 f1f2 	udiv	r1, r3, r2
 800eb6c:	fb02 3311 	mls	r3, r2, r1, r3
 800eb70:	5cc3      	ldrb	r3, [r0, r3]
 800eb72:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800eb76:	460b      	mov	r3, r1
 800eb78:	2900      	cmp	r1, #0
 800eb7a:	d1f5      	bne.n	800eb68 <_printf_i+0x16c>
 800eb7c:	e7b9      	b.n	800eaf2 <_printf_i+0xf6>
 800eb7e:	6813      	ldr	r3, [r2, #0]
 800eb80:	6825      	ldr	r5, [r4, #0]
 800eb82:	6961      	ldr	r1, [r4, #20]
 800eb84:	1d18      	adds	r0, r3, #4
 800eb86:	6010      	str	r0, [r2, #0]
 800eb88:	0628      	lsls	r0, r5, #24
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	d501      	bpl.n	800eb92 <_printf_i+0x196>
 800eb8e:	6019      	str	r1, [r3, #0]
 800eb90:	e002      	b.n	800eb98 <_printf_i+0x19c>
 800eb92:	066a      	lsls	r2, r5, #25
 800eb94:	d5fb      	bpl.n	800eb8e <_printf_i+0x192>
 800eb96:	8019      	strh	r1, [r3, #0]
 800eb98:	2300      	movs	r3, #0
 800eb9a:	6123      	str	r3, [r4, #16]
 800eb9c:	4665      	mov	r5, ip
 800eb9e:	e7b9      	b.n	800eb14 <_printf_i+0x118>
 800eba0:	6813      	ldr	r3, [r2, #0]
 800eba2:	1d19      	adds	r1, r3, #4
 800eba4:	6011      	str	r1, [r2, #0]
 800eba6:	681d      	ldr	r5, [r3, #0]
 800eba8:	6862      	ldr	r2, [r4, #4]
 800ebaa:	2100      	movs	r1, #0
 800ebac:	4628      	mov	r0, r5
 800ebae:	f7f1 faef 	bl	8000190 <memchr>
 800ebb2:	b108      	cbz	r0, 800ebb8 <_printf_i+0x1bc>
 800ebb4:	1b40      	subs	r0, r0, r5
 800ebb6:	6060      	str	r0, [r4, #4]
 800ebb8:	6863      	ldr	r3, [r4, #4]
 800ebba:	6123      	str	r3, [r4, #16]
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ebc2:	e7a7      	b.n	800eb14 <_printf_i+0x118>
 800ebc4:	6923      	ldr	r3, [r4, #16]
 800ebc6:	462a      	mov	r2, r5
 800ebc8:	4639      	mov	r1, r7
 800ebca:	4630      	mov	r0, r6
 800ebcc:	47c0      	blx	r8
 800ebce:	3001      	adds	r0, #1
 800ebd0:	d0aa      	beq.n	800eb28 <_printf_i+0x12c>
 800ebd2:	6823      	ldr	r3, [r4, #0]
 800ebd4:	079b      	lsls	r3, r3, #30
 800ebd6:	d413      	bmi.n	800ec00 <_printf_i+0x204>
 800ebd8:	68e0      	ldr	r0, [r4, #12]
 800ebda:	9b03      	ldr	r3, [sp, #12]
 800ebdc:	4298      	cmp	r0, r3
 800ebde:	bfb8      	it	lt
 800ebe0:	4618      	movlt	r0, r3
 800ebe2:	e7a3      	b.n	800eb2c <_printf_i+0x130>
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	464a      	mov	r2, r9
 800ebe8:	4639      	mov	r1, r7
 800ebea:	4630      	mov	r0, r6
 800ebec:	47c0      	blx	r8
 800ebee:	3001      	adds	r0, #1
 800ebf0:	d09a      	beq.n	800eb28 <_printf_i+0x12c>
 800ebf2:	3501      	adds	r5, #1
 800ebf4:	68e3      	ldr	r3, [r4, #12]
 800ebf6:	9a03      	ldr	r2, [sp, #12]
 800ebf8:	1a9b      	subs	r3, r3, r2
 800ebfa:	42ab      	cmp	r3, r5
 800ebfc:	dcf2      	bgt.n	800ebe4 <_printf_i+0x1e8>
 800ebfe:	e7eb      	b.n	800ebd8 <_printf_i+0x1dc>
 800ec00:	2500      	movs	r5, #0
 800ec02:	f104 0919 	add.w	r9, r4, #25
 800ec06:	e7f5      	b.n	800ebf4 <_printf_i+0x1f8>
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d1ac      	bne.n	800eb66 <_printf_i+0x16a>
 800ec0c:	7803      	ldrb	r3, [r0, #0]
 800ec0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ec12:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ec16:	e76c      	b.n	800eaf2 <_printf_i+0xf6>
 800ec18:	0800f181 	.word	0x0800f181
 800ec1c:	0800f192 	.word	0x0800f192

0800ec20 <_sbrk_r>:
 800ec20:	b538      	push	{r3, r4, r5, lr}
 800ec22:	4c06      	ldr	r4, [pc, #24]	; (800ec3c <_sbrk_r+0x1c>)
 800ec24:	2300      	movs	r3, #0
 800ec26:	4605      	mov	r5, r0
 800ec28:	4608      	mov	r0, r1
 800ec2a:	6023      	str	r3, [r4, #0]
 800ec2c:	f7f3 fa86 	bl	800213c <_sbrk>
 800ec30:	1c43      	adds	r3, r0, #1
 800ec32:	d102      	bne.n	800ec3a <_sbrk_r+0x1a>
 800ec34:	6823      	ldr	r3, [r4, #0]
 800ec36:	b103      	cbz	r3, 800ec3a <_sbrk_r+0x1a>
 800ec38:	602b      	str	r3, [r5, #0]
 800ec3a:	bd38      	pop	{r3, r4, r5, pc}
 800ec3c:	20000f20 	.word	0x20000f20

0800ec40 <memmove>:
 800ec40:	4288      	cmp	r0, r1
 800ec42:	b510      	push	{r4, lr}
 800ec44:	eb01 0302 	add.w	r3, r1, r2
 800ec48:	d807      	bhi.n	800ec5a <memmove+0x1a>
 800ec4a:	1e42      	subs	r2, r0, #1
 800ec4c:	4299      	cmp	r1, r3
 800ec4e:	d00a      	beq.n	800ec66 <memmove+0x26>
 800ec50:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec54:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ec58:	e7f8      	b.n	800ec4c <memmove+0xc>
 800ec5a:	4283      	cmp	r3, r0
 800ec5c:	d9f5      	bls.n	800ec4a <memmove+0xa>
 800ec5e:	1881      	adds	r1, r0, r2
 800ec60:	1ad2      	subs	r2, r2, r3
 800ec62:	42d3      	cmn	r3, r2
 800ec64:	d100      	bne.n	800ec68 <memmove+0x28>
 800ec66:	bd10      	pop	{r4, pc}
 800ec68:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ec6c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ec70:	e7f7      	b.n	800ec62 <memmove+0x22>

0800ec72 <__malloc_lock>:
 800ec72:	4770      	bx	lr

0800ec74 <__malloc_unlock>:
 800ec74:	4770      	bx	lr
	...

0800ec78 <_free_r>:
 800ec78:	b538      	push	{r3, r4, r5, lr}
 800ec7a:	4605      	mov	r5, r0
 800ec7c:	2900      	cmp	r1, #0
 800ec7e:	d045      	beq.n	800ed0c <_free_r+0x94>
 800ec80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec84:	1f0c      	subs	r4, r1, #4
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	bfb8      	it	lt
 800ec8a:	18e4      	addlt	r4, r4, r3
 800ec8c:	f7ff fff1 	bl	800ec72 <__malloc_lock>
 800ec90:	4a1f      	ldr	r2, [pc, #124]	; (800ed10 <_free_r+0x98>)
 800ec92:	6813      	ldr	r3, [r2, #0]
 800ec94:	4610      	mov	r0, r2
 800ec96:	b933      	cbnz	r3, 800eca6 <_free_r+0x2e>
 800ec98:	6063      	str	r3, [r4, #4]
 800ec9a:	6014      	str	r4, [r2, #0]
 800ec9c:	4628      	mov	r0, r5
 800ec9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eca2:	f7ff bfe7 	b.w	800ec74 <__malloc_unlock>
 800eca6:	42a3      	cmp	r3, r4
 800eca8:	d90c      	bls.n	800ecc4 <_free_r+0x4c>
 800ecaa:	6821      	ldr	r1, [r4, #0]
 800ecac:	1862      	adds	r2, r4, r1
 800ecae:	4293      	cmp	r3, r2
 800ecb0:	bf04      	itt	eq
 800ecb2:	681a      	ldreq	r2, [r3, #0]
 800ecb4:	685b      	ldreq	r3, [r3, #4]
 800ecb6:	6063      	str	r3, [r4, #4]
 800ecb8:	bf04      	itt	eq
 800ecba:	1852      	addeq	r2, r2, r1
 800ecbc:	6022      	streq	r2, [r4, #0]
 800ecbe:	6004      	str	r4, [r0, #0]
 800ecc0:	e7ec      	b.n	800ec9c <_free_r+0x24>
 800ecc2:	4613      	mov	r3, r2
 800ecc4:	685a      	ldr	r2, [r3, #4]
 800ecc6:	b10a      	cbz	r2, 800eccc <_free_r+0x54>
 800ecc8:	42a2      	cmp	r2, r4
 800ecca:	d9fa      	bls.n	800ecc2 <_free_r+0x4a>
 800eccc:	6819      	ldr	r1, [r3, #0]
 800ecce:	1858      	adds	r0, r3, r1
 800ecd0:	42a0      	cmp	r0, r4
 800ecd2:	d10b      	bne.n	800ecec <_free_r+0x74>
 800ecd4:	6820      	ldr	r0, [r4, #0]
 800ecd6:	4401      	add	r1, r0
 800ecd8:	1858      	adds	r0, r3, r1
 800ecda:	4282      	cmp	r2, r0
 800ecdc:	6019      	str	r1, [r3, #0]
 800ecde:	d1dd      	bne.n	800ec9c <_free_r+0x24>
 800ece0:	6810      	ldr	r0, [r2, #0]
 800ece2:	6852      	ldr	r2, [r2, #4]
 800ece4:	605a      	str	r2, [r3, #4]
 800ece6:	4401      	add	r1, r0
 800ece8:	6019      	str	r1, [r3, #0]
 800ecea:	e7d7      	b.n	800ec9c <_free_r+0x24>
 800ecec:	d902      	bls.n	800ecf4 <_free_r+0x7c>
 800ecee:	230c      	movs	r3, #12
 800ecf0:	602b      	str	r3, [r5, #0]
 800ecf2:	e7d3      	b.n	800ec9c <_free_r+0x24>
 800ecf4:	6820      	ldr	r0, [r4, #0]
 800ecf6:	1821      	adds	r1, r4, r0
 800ecf8:	428a      	cmp	r2, r1
 800ecfa:	bf04      	itt	eq
 800ecfc:	6811      	ldreq	r1, [r2, #0]
 800ecfe:	6852      	ldreq	r2, [r2, #4]
 800ed00:	6062      	str	r2, [r4, #4]
 800ed02:	bf04      	itt	eq
 800ed04:	1809      	addeq	r1, r1, r0
 800ed06:	6021      	streq	r1, [r4, #0]
 800ed08:	605c      	str	r4, [r3, #4]
 800ed0a:	e7c7      	b.n	800ec9c <_free_r+0x24>
 800ed0c:	bd38      	pop	{r3, r4, r5, pc}
 800ed0e:	bf00      	nop
 800ed10:	200006f4 	.word	0x200006f4

0800ed14 <_realloc_r>:
 800ed14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed16:	4607      	mov	r7, r0
 800ed18:	4614      	mov	r4, r2
 800ed1a:	460e      	mov	r6, r1
 800ed1c:	b921      	cbnz	r1, 800ed28 <_realloc_r+0x14>
 800ed1e:	4611      	mov	r1, r2
 800ed20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ed24:	f7ff bc48 	b.w	800e5b8 <_malloc_r>
 800ed28:	b922      	cbnz	r2, 800ed34 <_realloc_r+0x20>
 800ed2a:	f7ff ffa5 	bl	800ec78 <_free_r>
 800ed2e:	4625      	mov	r5, r4
 800ed30:	4628      	mov	r0, r5
 800ed32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed34:	f000 f814 	bl	800ed60 <_malloc_usable_size_r>
 800ed38:	42a0      	cmp	r0, r4
 800ed3a:	d20f      	bcs.n	800ed5c <_realloc_r+0x48>
 800ed3c:	4621      	mov	r1, r4
 800ed3e:	4638      	mov	r0, r7
 800ed40:	f7ff fc3a 	bl	800e5b8 <_malloc_r>
 800ed44:	4605      	mov	r5, r0
 800ed46:	2800      	cmp	r0, #0
 800ed48:	d0f2      	beq.n	800ed30 <_realloc_r+0x1c>
 800ed4a:	4631      	mov	r1, r6
 800ed4c:	4622      	mov	r2, r4
 800ed4e:	f7ff fbef 	bl	800e530 <memcpy>
 800ed52:	4631      	mov	r1, r6
 800ed54:	4638      	mov	r0, r7
 800ed56:	f7ff ff8f 	bl	800ec78 <_free_r>
 800ed5a:	e7e9      	b.n	800ed30 <_realloc_r+0x1c>
 800ed5c:	4635      	mov	r5, r6
 800ed5e:	e7e7      	b.n	800ed30 <_realloc_r+0x1c>

0800ed60 <_malloc_usable_size_r>:
 800ed60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed64:	1f18      	subs	r0, r3, #4
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	bfbc      	itt	lt
 800ed6a:	580b      	ldrlt	r3, [r1, r0]
 800ed6c:	18c0      	addlt	r0, r0, r3
 800ed6e:	4770      	bx	lr

0800ed70 <_init>:
 800ed70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed72:	bf00      	nop
 800ed74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed76:	bc08      	pop	{r3}
 800ed78:	469e      	mov	lr, r3
 800ed7a:	4770      	bx	lr

0800ed7c <_fini>:
 800ed7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed7e:	bf00      	nop
 800ed80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed82:	bc08      	pop	{r3}
 800ed84:	469e      	mov	lr, r3
 800ed86:	4770      	bx	lr
