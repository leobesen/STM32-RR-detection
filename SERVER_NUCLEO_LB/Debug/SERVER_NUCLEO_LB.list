
SERVER_NUCLEO_LB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6cc  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  0800b80c  0800b80c  0001b80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b978  0800b978  0001b978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b980  0800b980  0001b980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b984  0800b984  0001b984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000028  20000004  0800b988  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  2000002c  0800b9b0  0002002c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000003d  200000c8  0800ba49  000200c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000108  0800ba86  00020108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 000000a8  2000011c  0800ba97  0002011c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000788  200001c4  0800bb3f  000201c4  2**2
                  ALLOC
 12 ._user_heap_stack 00000c04  2000094c  0800bb3f  0002094c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000024  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       0000019f  20030024  20030024  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000880  200301c4  200301c4  00030000  2**2
                  ALLOC
 17 .debug_info   0004425e  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 00007c74  00000000  00000000  00064452  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 00003188  00000000  00000000  0006c0c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 00002df0  00000000  00000000  0006f250  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_macro  0000e7fa  00000000  00000000  00072040  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   00032ba8  00000000  00000000  0008083a  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    0010355b  00000000  00000000  000b33e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  001b693d  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000ceb0  00000000  00000000  001b69b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001c4 	.word	0x200001c4
 800015c:	00000000 	.word	0x00000000
 8000160:	0800b7f4 	.word	0x0800b7f4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001c8 	.word	0x200001c8
 800017c:	0800b7f4 	.word	0x0800b7f4

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_uldivmod>:
 8000190:	b953      	cbnz	r3, 80001a8 <__aeabi_uldivmod+0x18>
 8000192:	b94a      	cbnz	r2, 80001a8 <__aeabi_uldivmod+0x18>
 8000194:	2900      	cmp	r1, #0
 8000196:	bf08      	it	eq
 8000198:	2800      	cmpeq	r0, #0
 800019a:	bf1c      	itt	ne
 800019c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001a4:	f000 b972 	b.w	800048c <__aeabi_idiv0>
 80001a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b0:	f000 f806 	bl	80001c0 <__udivmoddi4>
 80001b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001bc:	b004      	add	sp, #16
 80001be:	4770      	bx	lr

080001c0 <__udivmoddi4>:
 80001c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c4:	9e08      	ldr	r6, [sp, #32]
 80001c6:	4604      	mov	r4, r0
 80001c8:	4688      	mov	r8, r1
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d14b      	bne.n	8000266 <__udivmoddi4+0xa6>
 80001ce:	428a      	cmp	r2, r1
 80001d0:	4615      	mov	r5, r2
 80001d2:	d967      	bls.n	80002a4 <__udivmoddi4+0xe4>
 80001d4:	fab2 f282 	clz	r2, r2
 80001d8:	b14a      	cbz	r2, 80001ee <__udivmoddi4+0x2e>
 80001da:	f1c2 0720 	rsb	r7, r2, #32
 80001de:	fa01 f302 	lsl.w	r3, r1, r2
 80001e2:	fa20 f707 	lsr.w	r7, r0, r7
 80001e6:	4095      	lsls	r5, r2
 80001e8:	ea47 0803 	orr.w	r8, r7, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80001f8:	fa1f fc85 	uxth.w	ip, r5
 80001fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000200:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000204:	fb07 f10c 	mul.w	r1, r7, ip
 8000208:	4299      	cmp	r1, r3
 800020a:	d909      	bls.n	8000220 <__udivmoddi4+0x60>
 800020c:	18eb      	adds	r3, r5, r3
 800020e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000212:	f080 811b 	bcs.w	800044c <__udivmoddi4+0x28c>
 8000216:	4299      	cmp	r1, r3
 8000218:	f240 8118 	bls.w	800044c <__udivmoddi4+0x28c>
 800021c:	3f02      	subs	r7, #2
 800021e:	442b      	add	r3, r5
 8000220:	1a5b      	subs	r3, r3, r1
 8000222:	b2a4      	uxth	r4, r4
 8000224:	fbb3 f0fe 	udiv	r0, r3, lr
 8000228:	fb0e 3310 	mls	r3, lr, r0, r3
 800022c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000230:	fb00 fc0c 	mul.w	ip, r0, ip
 8000234:	45a4      	cmp	ip, r4
 8000236:	d909      	bls.n	800024c <__udivmoddi4+0x8c>
 8000238:	192c      	adds	r4, r5, r4
 800023a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800023e:	f080 8107 	bcs.w	8000450 <__udivmoddi4+0x290>
 8000242:	45a4      	cmp	ip, r4
 8000244:	f240 8104 	bls.w	8000450 <__udivmoddi4+0x290>
 8000248:	3802      	subs	r0, #2
 800024a:	442c      	add	r4, r5
 800024c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000250:	eba4 040c 	sub.w	r4, r4, ip
 8000254:	2700      	movs	r7, #0
 8000256:	b11e      	cbz	r6, 8000260 <__udivmoddi4+0xa0>
 8000258:	40d4      	lsrs	r4, r2
 800025a:	2300      	movs	r3, #0
 800025c:	e9c6 4300 	strd	r4, r3, [r6]
 8000260:	4639      	mov	r1, r7
 8000262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000266:	428b      	cmp	r3, r1
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0xbe>
 800026a:	2e00      	cmp	r6, #0
 800026c:	f000 80eb 	beq.w	8000446 <__udivmoddi4+0x286>
 8000270:	2700      	movs	r7, #0
 8000272:	e9c6 0100 	strd	r0, r1, [r6]
 8000276:	4638      	mov	r0, r7
 8000278:	4639      	mov	r1, r7
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f783 	clz	r7, r3
 8000282:	2f00      	cmp	r7, #0
 8000284:	d147      	bne.n	8000316 <__udivmoddi4+0x156>
 8000286:	428b      	cmp	r3, r1
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd0>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fa 	bhi.w	8000484 <__udivmoddi4+0x2c4>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb61 0303 	sbc.w	r3, r1, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e0      	beq.n	8000260 <__udivmoddi4+0xa0>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7dd      	b.n	8000260 <__udivmoddi4+0xa0>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xe8>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 808f 	bne.w	80003d0 <__udivmoddi4+0x210>
 80002b2:	1b49      	subs	r1, r1, r5
 80002b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002b8:	fa1f f885 	uxth.w	r8, r5
 80002bc:	2701      	movs	r7, #1
 80002be:	fbb1 fcfe 	udiv	ip, r1, lr
 80002c2:	0c23      	lsrs	r3, r4, #16
 80002c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80002c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002cc:	fb08 f10c 	mul.w	r1, r8, ip
 80002d0:	4299      	cmp	r1, r3
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0x124>
 80002d4:	18eb      	adds	r3, r5, r3
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0x122>
 80002dc:	4299      	cmp	r1, r3
 80002de:	f200 80cd 	bhi.w	800047c <__udivmoddi4+0x2bc>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1a59      	subs	r1, r3, r1
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80002f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x14c>
 80002fc:	192c      	adds	r4, r5, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x14a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80b6 	bhi.w	8000476 <__udivmoddi4+0x2b6>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e79f      	b.n	8000256 <__udivmoddi4+0x96>
 8000316:	f1c7 0c20 	rsb	ip, r7, #32
 800031a:	40bb      	lsls	r3, r7
 800031c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000320:	ea4e 0e03 	orr.w	lr, lr, r3
 8000324:	fa01 f407 	lsl.w	r4, r1, r7
 8000328:	fa20 f50c 	lsr.w	r5, r0, ip
 800032c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000330:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000334:	4325      	orrs	r5, r4
 8000336:	fbb3 f9f8 	udiv	r9, r3, r8
 800033a:	0c2c      	lsrs	r4, r5, #16
 800033c:	fb08 3319 	mls	r3, r8, r9, r3
 8000340:	fa1f fa8e 	uxth.w	sl, lr
 8000344:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000348:	fb09 f40a 	mul.w	r4, r9, sl
 800034c:	429c      	cmp	r4, r3
 800034e:	fa02 f207 	lsl.w	r2, r2, r7
 8000352:	fa00 f107 	lsl.w	r1, r0, r7
 8000356:	d90b      	bls.n	8000370 <__udivmoddi4+0x1b0>
 8000358:	eb1e 0303 	adds.w	r3, lr, r3
 800035c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000360:	f080 8087 	bcs.w	8000472 <__udivmoddi4+0x2b2>
 8000364:	429c      	cmp	r4, r3
 8000366:	f240 8084 	bls.w	8000472 <__udivmoddi4+0x2b2>
 800036a:	f1a9 0902 	sub.w	r9, r9, #2
 800036e:	4473      	add	r3, lr
 8000370:	1b1b      	subs	r3, r3, r4
 8000372:	b2ad      	uxth	r5, r5
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000380:	fb00 fa0a 	mul.w	sl, r0, sl
 8000384:	45a2      	cmp	sl, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x1da>
 8000388:	eb1e 0404 	adds.w	r4, lr, r4
 800038c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000390:	d26b      	bcs.n	800046a <__udivmoddi4+0x2aa>
 8000392:	45a2      	cmp	sl, r4
 8000394:	d969      	bls.n	800046a <__udivmoddi4+0x2aa>
 8000396:	3802      	subs	r0, #2
 8000398:	4474      	add	r4, lr
 800039a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800039e:	fba0 8902 	umull	r8, r9, r0, r2
 80003a2:	eba4 040a 	sub.w	r4, r4, sl
 80003a6:	454c      	cmp	r4, r9
 80003a8:	46c2      	mov	sl, r8
 80003aa:	464b      	mov	r3, r9
 80003ac:	d354      	bcc.n	8000458 <__udivmoddi4+0x298>
 80003ae:	d051      	beq.n	8000454 <__udivmoddi4+0x294>
 80003b0:	2e00      	cmp	r6, #0
 80003b2:	d069      	beq.n	8000488 <__udivmoddi4+0x2c8>
 80003b4:	ebb1 050a 	subs.w	r5, r1, sl
 80003b8:	eb64 0403 	sbc.w	r4, r4, r3
 80003bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003c0:	40fd      	lsrs	r5, r7
 80003c2:	40fc      	lsrs	r4, r7
 80003c4:	ea4c 0505 	orr.w	r5, ip, r5
 80003c8:	e9c6 5400 	strd	r5, r4, [r6]
 80003cc:	2700      	movs	r7, #0
 80003ce:	e747      	b.n	8000260 <__udivmoddi4+0xa0>
 80003d0:	f1c2 0320 	rsb	r3, r2, #32
 80003d4:	fa20 f703 	lsr.w	r7, r0, r3
 80003d8:	4095      	lsls	r5, r2
 80003da:	fa01 f002 	lsl.w	r0, r1, r2
 80003de:	fa21 f303 	lsr.w	r3, r1, r3
 80003e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e6:	4338      	orrs	r0, r7
 80003e8:	0c01      	lsrs	r1, r0, #16
 80003ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80003ee:	fa1f f885 	uxth.w	r8, r5
 80003f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80003f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fa:	fb07 f308 	mul.w	r3, r7, r8
 80003fe:	428b      	cmp	r3, r1
 8000400:	fa04 f402 	lsl.w	r4, r4, r2
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x256>
 8000406:	1869      	adds	r1, r5, r1
 8000408:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800040c:	d22f      	bcs.n	800046e <__udivmoddi4+0x2ae>
 800040e:	428b      	cmp	r3, r1
 8000410:	d92d      	bls.n	800046e <__udivmoddi4+0x2ae>
 8000412:	3f02      	subs	r7, #2
 8000414:	4429      	add	r1, r5
 8000416:	1acb      	subs	r3, r1, r3
 8000418:	b281      	uxth	r1, r0
 800041a:	fbb3 f0fe 	udiv	r0, r3, lr
 800041e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000422:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000426:	fb00 f308 	mul.w	r3, r0, r8
 800042a:	428b      	cmp	r3, r1
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x27e>
 800042e:	1869      	adds	r1, r5, r1
 8000430:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000434:	d217      	bcs.n	8000466 <__udivmoddi4+0x2a6>
 8000436:	428b      	cmp	r3, r1
 8000438:	d915      	bls.n	8000466 <__udivmoddi4+0x2a6>
 800043a:	3802      	subs	r0, #2
 800043c:	4429      	add	r1, r5
 800043e:	1ac9      	subs	r1, r1, r3
 8000440:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000444:	e73b      	b.n	80002be <__udivmoddi4+0xfe>
 8000446:	4637      	mov	r7, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e709      	b.n	8000260 <__udivmoddi4+0xa0>
 800044c:	4607      	mov	r7, r0
 800044e:	e6e7      	b.n	8000220 <__udivmoddi4+0x60>
 8000450:	4618      	mov	r0, r3
 8000452:	e6fb      	b.n	800024c <__udivmoddi4+0x8c>
 8000454:	4541      	cmp	r1, r8
 8000456:	d2ab      	bcs.n	80003b0 <__udivmoddi4+0x1f0>
 8000458:	ebb8 0a02 	subs.w	sl, r8, r2
 800045c:	eb69 020e 	sbc.w	r2, r9, lr
 8000460:	3801      	subs	r0, #1
 8000462:	4613      	mov	r3, r2
 8000464:	e7a4      	b.n	80003b0 <__udivmoddi4+0x1f0>
 8000466:	4660      	mov	r0, ip
 8000468:	e7e9      	b.n	800043e <__udivmoddi4+0x27e>
 800046a:	4618      	mov	r0, r3
 800046c:	e795      	b.n	800039a <__udivmoddi4+0x1da>
 800046e:	4667      	mov	r7, ip
 8000470:	e7d1      	b.n	8000416 <__udivmoddi4+0x256>
 8000472:	4681      	mov	r9, r0
 8000474:	e77c      	b.n	8000370 <__udivmoddi4+0x1b0>
 8000476:	3802      	subs	r0, #2
 8000478:	442c      	add	r4, r5
 800047a:	e747      	b.n	800030c <__udivmoddi4+0x14c>
 800047c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000480:	442b      	add	r3, r5
 8000482:	e72f      	b.n	80002e4 <__udivmoddi4+0x124>
 8000484:	4638      	mov	r0, r7
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xda>
 8000488:	4637      	mov	r7, r6
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0xa0>

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop

08000490 <begin>:
#include <stdlib.h>     /* abs */

float temperature;
//uint16_t IR, RED;

void begin(void){
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0

	  uint8_t temp = 0;
 8000496:	2300      	movs	r3, #0
 8000498:	717b      	strb	r3, [r7, #5]
	  uint8_t mode = 0x03; // [0,7]
 800049a:	2303      	movs	r3, #3
 800049c:	73fb      	strb	r3, [r7, #15]
	  bool temperature = false;
 800049e:	2300      	movs	r3, #0
 80004a0:	73bb      	strb	r3, [r7, #14]
	  bool spo2_hs = true;
 80004a2:	2301      	movs	r3, #1
 80004a4:	737b      	strb	r3, [r7, #13]
	  uint8_t spo2_sr = 1; // [0,7]
 80004a6:	2301      	movs	r3, #1
 80004a8:	733b      	strb	r3, [r7, #12]
	  uint8_t pulse_width = 0; // [0,3]
 80004aa:	2300      	movs	r3, #0
 80004ac:	72fb      	strb	r3, [r7, #11]
	  uint8_t red_level = 0x0A; // 0b00001111; // [0,15]
 80004ae:	230a      	movs	r3, #10
 80004b0:	72bb      	strb	r3, [r7, #10]
	  uint8_t ir_level = 0x0A; // [0,15]
 80004b2:	230a      	movs	r3, #10
 80004b4:	727b      	strb	r3, [r7, #9]
	  uint8_t hr_ready_int = false;
 80004b6:	2300      	movs	r3, #0
 80004b8:	723b      	strb	r3, [r7, #8]
	  uint8_t spo2_ready_int = false;
 80004ba:	2300      	movs	r3, #0
 80004bc:	71fb      	strb	r3, [r7, #7]
	  uint8_t temp_ready_int = false;
 80004be:	2300      	movs	r3, #0
 80004c0:	71bb      	strb	r3, [r7, #6]


	  //Reset
	  read_byte( MAX30100_MODE_CONFIG, &temp );
 80004c2:	1d7b      	adds	r3, r7, #5
 80004c4:	4619      	mov	r1, r3
 80004c6:	2006      	movs	r0, #6
 80004c8:	f000 f976 	bl	80007b8 <read_byte>

	  temp |= (1<<6);
 80004cc:	797b      	ldrb	r3, [r7, #5]
 80004ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	717b      	strb	r3, [r7, #5]
	  write_byte(MAX30100_MODE_CONFIG, temp);
 80004d6:	797b      	ldrb	r3, [r7, #5]
 80004d8:	4619      	mov	r1, r3
 80004da:	2006      	movs	r0, #6
 80004dc:	f000 f950 	bl	8000780 <write_byte>

	  //Wait for the end of reset state/process
	  do
	  {
		read_byte(MAX30100_MODE_CONFIG, &temp);
 80004e0:	1d7b      	adds	r3, r7, #5
 80004e2:	4619      	mov	r1, r3
 80004e4:	2006      	movs	r0, #6
 80004e6:	f000 f967 	bl	80007b8 <read_byte>
	    temp &= (1<<6);
 80004ea:	797b      	ldrb	r3, [r7, #5]
 80004ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	717b      	strb	r3, [r7, #5]
	  }
	  while (temp != 0);
 80004f4:	797b      	ldrb	r3, [r7, #5]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d1f2      	bne.n	80004e0 <begin+0x50>

	  //Mode Configuration
	  read_byte( MAX30100_MODE_CONFIG, &temp );
 80004fa:	1d7b      	adds	r3, r7, #5
 80004fc:	4619      	mov	r1, r3
 80004fe:	2006      	movs	r0, #6
 8000500:	f000 f95a 	bl	80007b8 <read_byte>

	  temp |= mode;
 8000504:	797a      	ldrb	r2, [r7, #5]
 8000506:	7bfb      	ldrb	r3, [r7, #15]
 8000508:	4313      	orrs	r3, r2
 800050a:	b2db      	uxtb	r3, r3
 800050c:	717b      	strb	r3, [r7, #5]
	  write_byte(MAX30100_MODE_CONFIG, temp);
 800050e:	797b      	ldrb	r3, [r7, #5]
 8000510:	4619      	mov	r1, r3
 8000512:	2006      	movs	r0, #6
 8000514:	f000 f934 	bl	8000780 <write_byte>
	  temp = 0;
 8000518:	2300      	movs	r3, #0
 800051a:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_MODE_CONFIG, &temp ); //check
 800051c:	1d7b      	adds	r3, r7, #5
 800051e:	4619      	mov	r1, r3
 8000520:	2006      	movs	r0, #6
 8000522:	f000 f949 	bl	80007b8 <read_byte>

	  //Temperature sensor activation
	  read_byte( MAX30100_MODE_CONFIG, &temp );
 8000526:	1d7b      	adds	r3, r7, #5
 8000528:	4619      	mov	r1, r3
 800052a:	2006      	movs	r0, #6
 800052c:	f000 f944 	bl	80007b8 <read_byte>

	  if ( temperature == true )
 8000530:	7bbb      	ldrb	r3, [r7, #14]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d005      	beq.n	8000542 <begin+0xb2>
	    temp |= (1<<3);
 8000536:	797b      	ldrb	r3, [r7, #5]
 8000538:	f043 0308 	orr.w	r3, r3, #8
 800053c:	b2db      	uxtb	r3, r3
 800053e:	717b      	strb	r3, [r7, #5]
 8000540:	e004      	b.n	800054c <begin+0xbc>
	  else
	    temp &= ~(1<<3);
 8000542:	797b      	ldrb	r3, [r7, #5]
 8000544:	f023 0308 	bic.w	r3, r3, #8
 8000548:	b2db      	uxtb	r3, r3
 800054a:	717b      	strb	r3, [r7, #5]

	  write_byte(MAX30100_MODE_CONFIG, temp);
 800054c:	797b      	ldrb	r3, [r7, #5]
 800054e:	4619      	mov	r1, r3
 8000550:	2006      	movs	r0, #6
 8000552:	f000 f915 	bl	8000780 <write_byte>
	  temp = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_MODE_CONFIG, &temp ); //check
 800055a:	1d7b      	adds	r3, r7, #5
 800055c:	4619      	mov	r1, r3
 800055e:	2006      	movs	r0, #6
 8000560:	f000 f92a 	bl	80007b8 <read_byte>

	  //SPO2 high resolution activation
	  read_byte( MAX30100_SPO2_CONFIG, &temp );
 8000564:	1d7b      	adds	r3, r7, #5
 8000566:	4619      	mov	r1, r3
 8000568:	2007      	movs	r0, #7
 800056a:	f000 f925 	bl	80007b8 <read_byte>

	  if (spo2_hs == true)
 800056e:	7b7b      	ldrb	r3, [r7, #13]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d005      	beq.n	8000580 <begin+0xf0>
	    temp |= (1<<6);
 8000574:	797b      	ldrb	r3, [r7, #5]
 8000576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800057a:	b2db      	uxtb	r3, r3
 800057c:	717b      	strb	r3, [r7, #5]
 800057e:	e004      	b.n	800058a <begin+0xfa>

	  else
	    temp &= ~(1<<6);
 8000580:	797b      	ldrb	r3, [r7, #5]
 8000582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000586:	b2db      	uxtb	r3, r3
 8000588:	717b      	strb	r3, [r7, #5]
	  write_byte(MAX30100_SPO2_CONFIG, temp);
 800058a:	797b      	ldrb	r3, [r7, #5]
 800058c:	4619      	mov	r1, r3
 800058e:	2007      	movs	r0, #7
 8000590:	f000 f8f6 	bl	8000780 <write_byte>

	  //SPO2 sample rate configuration
	  read_byte( MAX30100_SPO2_CONFIG, &temp );
 8000594:	1d7b      	adds	r3, r7, #5
 8000596:	4619      	mov	r1, r3
 8000598:	2007      	movs	r0, #7
 800059a:	f000 f90d 	bl	80007b8 <read_byte>
	  temp |= (spo2_sr << 2);
 800059e:	7b3b      	ldrb	r3, [r7, #12]
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	b25a      	sxtb	r2, r3
 80005a4:	797b      	ldrb	r3, [r7, #5]
 80005a6:	b25b      	sxtb	r3, r3
 80005a8:	4313      	orrs	r3, r2
 80005aa:	b25b      	sxtb	r3, r3
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	717b      	strb	r3, [r7, #5]

	  write_byte( MAX30100_SPO2_CONFIG, temp );
 80005b0:	797b      	ldrb	r3, [r7, #5]
 80005b2:	4619      	mov	r1, r3
 80005b4:	2007      	movs	r0, #7
 80005b6:	f000 f8e3 	bl	8000780 <write_byte>
	  temp = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_SPO2_CONFIG, &temp ); //check
 80005be:	1d7b      	adds	r3, r7, #5
 80005c0:	4619      	mov	r1, r3
 80005c2:	2007      	movs	r0, #7
 80005c4:	f000 f8f8 	bl	80007b8 <read_byte>

	  //LED pulse width configuration
	  read_byte( MAX30100_SPO2_CONFIG, &temp );
 80005c8:	1d7b      	adds	r3, r7, #5
 80005ca:	4619      	mov	r1, r3
 80005cc:	2007      	movs	r0, #7
 80005ce:	f000 f8f3 	bl	80007b8 <read_byte>

	  temp |= pulse_width;
 80005d2:	797a      	ldrb	r2, [r7, #5]
 80005d4:	7afb      	ldrb	r3, [r7, #11]
 80005d6:	4313      	orrs	r3, r2
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	717b      	strb	r3, [r7, #5]
	  write_byte(MAX30100_SPO2_CONFIG, temp);
 80005dc:	797b      	ldrb	r3, [r7, #5]
 80005de:	4619      	mov	r1, r3
 80005e0:	2007      	movs	r0, #7
 80005e2:	f000 f8cd 	bl	8000780 <write_byte>
	  temp = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_SPO2_CONFIG, &temp ); //check
 80005ea:	1d7b      	adds	r3, r7, #5
 80005ec:	4619      	mov	r1, r3
 80005ee:	2007      	movs	r0, #7
 80005f0:	f000 f8e2 	bl	80007b8 <read_byte>

	  //LED red current level
	  read_byte( MAX30100_LED_CONFIG, &temp );
 80005f4:	1d7b      	adds	r3, r7, #5
 80005f6:	4619      	mov	r1, r3
 80005f8:	2009      	movs	r0, #9
 80005fa:	f000 f8dd 	bl	80007b8 <read_byte>

	  temp |= (red_level << 4);
 80005fe:	7abb      	ldrb	r3, [r7, #10]
 8000600:	011b      	lsls	r3, r3, #4
 8000602:	b25a      	sxtb	r2, r3
 8000604:	797b      	ldrb	r3, [r7, #5]
 8000606:	b25b      	sxtb	r3, r3
 8000608:	4313      	orrs	r3, r2
 800060a:	b25b      	sxtb	r3, r3
 800060c:	b2db      	uxtb	r3, r3
 800060e:	717b      	strb	r3, [r7, #5]
	  write_byte(MAX30100_LED_CONFIG, temp);
 8000610:	797b      	ldrb	r3, [r7, #5]
 8000612:	4619      	mov	r1, r3
 8000614:	2009      	movs	r0, #9
 8000616:	f000 f8b3 	bl	8000780 <write_byte>
	  temp = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_LED_CONFIG, &temp ); //check
 800061e:	1d7b      	adds	r3, r7, #5
 8000620:	4619      	mov	r1, r3
 8000622:	2009      	movs	r0, #9
 8000624:	f000 f8c8 	bl	80007b8 <read_byte>

	  //LED ir current level
	  read_byte( MAX30100_LED_CONFIG, &temp );
 8000628:	1d7b      	adds	r3, r7, #5
 800062a:	4619      	mov	r1, r3
 800062c:	2009      	movs	r0, #9
 800062e:	f000 f8c3 	bl	80007b8 <read_byte>

	  temp |= ir_level;
 8000632:	797a      	ldrb	r2, [r7, #5]
 8000634:	7a7b      	ldrb	r3, [r7, #9]
 8000636:	4313      	orrs	r3, r2
 8000638:	b2db      	uxtb	r3, r3
 800063a:	717b      	strb	r3, [r7, #5]
	  write_byte(MAX30100_LED_CONFIG, temp);
 800063c:	797b      	ldrb	r3, [r7, #5]
 800063e:	4619      	mov	r1, r3
 8000640:	2009      	movs	r0, #9
 8000642:	f000 f89d 	bl	8000780 <write_byte>
	  temp = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_LED_CONFIG, &temp ); //check
 800064a:	1d7b      	adds	r3, r7, #5
 800064c:	4619      	mov	r1, r3
 800064e:	2009      	movs	r0, #9
 8000650:	f000 f8b2 	bl	80007b8 <read_byte>

	  //Heart rate data ready interruption
	  read_byte( MAX30100_INT_ENABLE, &temp );
 8000654:	1d7b      	adds	r3, r7, #5
 8000656:	4619      	mov	r1, r3
 8000658:	2001      	movs	r0, #1
 800065a:	f000 f8ad 	bl	80007b8 <read_byte>
	  if (hr_ready_int == true)
 800065e:	7a3b      	ldrb	r3, [r7, #8]
 8000660:	2b01      	cmp	r3, #1
 8000662:	d105      	bne.n	8000670 <begin+0x1e0>
	    temp |= (1<<5);
 8000664:	797b      	ldrb	r3, [r7, #5]
 8000666:	f043 0320 	orr.w	r3, r3, #32
 800066a:	b2db      	uxtb	r3, r3
 800066c:	717b      	strb	r3, [r7, #5]
 800066e:	e004      	b.n	800067a <begin+0x1ea>
	  else
	    temp &= ~(1<<5);
 8000670:	797b      	ldrb	r3, [r7, #5]
 8000672:	f023 0320 	bic.w	r3, r3, #32
 8000676:	b2db      	uxtb	r3, r3
 8000678:	717b      	strb	r3, [r7, #5]

	  write_byte(MAX30100_INT_ENABLE, temp);
 800067a:	797b      	ldrb	r3, [r7, #5]
 800067c:	4619      	mov	r1, r3
 800067e:	2001      	movs	r0, #1
 8000680:	f000 f87e 	bl	8000780 <write_byte>
	  temp = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_INT_ENABLE, &temp ); //check
 8000688:	1d7b      	adds	r3, r7, #5
 800068a:	4619      	mov	r1, r3
 800068c:	2001      	movs	r0, #1
 800068e:	f000 f893 	bl	80007b8 <read_byte>

	  //SPO2 data ready interruption
	  read_byte( MAX30100_INT_ENABLE, &temp );
 8000692:	1d7b      	adds	r3, r7, #5
 8000694:	4619      	mov	r1, r3
 8000696:	2001      	movs	r0, #1
 8000698:	f000 f88e 	bl	80007b8 <read_byte>
	  if (spo2_ready_int == true)
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d105      	bne.n	80006ae <begin+0x21e>
	    temp |= (1<<4);
 80006a2:	797b      	ldrb	r3, [r7, #5]
 80006a4:	f043 0310 	orr.w	r3, r3, #16
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	717b      	strb	r3, [r7, #5]
 80006ac:	e004      	b.n	80006b8 <begin+0x228>
	  else
	    temp &= ~(1<<4);
 80006ae:	797b      	ldrb	r3, [r7, #5]
 80006b0:	f023 0310 	bic.w	r3, r3, #16
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	717b      	strb	r3, [r7, #5]

	  write_byte(MAX30100_INT_ENABLE, temp);
 80006b8:	797b      	ldrb	r3, [r7, #5]
 80006ba:	4619      	mov	r1, r3
 80006bc:	2001      	movs	r0, #1
 80006be:	f000 f85f 	bl	8000780 <write_byte>
	  temp = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_INT_ENABLE, &temp ); //check
 80006c6:	1d7b      	adds	r3, r7, #5
 80006c8:	4619      	mov	r1, r3
 80006ca:	2001      	movs	r0, #1
 80006cc:	f000 f874 	bl	80007b8 <read_byte>

	  //Temperature data ready interruption
	  read_byte(MAX30100_INT_ENABLE, &temp );
 80006d0:	1d7b      	adds	r3, r7, #5
 80006d2:	4619      	mov	r1, r3
 80006d4:	2001      	movs	r0, #1
 80006d6:	f000 f86f 	bl	80007b8 <read_byte>
	  if (temp_ready_int == true)
 80006da:	79bb      	ldrb	r3, [r7, #6]
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d105      	bne.n	80006ec <begin+0x25c>
	    temp |= (1<<6);
 80006e0:	797b      	ldrb	r3, [r7, #5]
 80006e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	717b      	strb	r3, [r7, #5]
 80006ea:	e004      	b.n	80006f6 <begin+0x266>
	  else
	    temp &= ~(1<<6);
 80006ec:	797b      	ldrb	r3, [r7, #5]
 80006ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	717b      	strb	r3, [r7, #5]

	  write_byte(MAX30100_INT_ENABLE, temp);
 80006f6:	797b      	ldrb	r3, [r7, #5]
 80006f8:	4619      	mov	r1, r3
 80006fa:	2001      	movs	r0, #1
 80006fc:	f000 f840 	bl	8000780 <write_byte>
	  temp = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_INT_ENABLE, &temp ); //check
 8000704:	1d7b      	adds	r3, r7, #5
 8000706:	4619      	mov	r1, r3
 8000708:	2001      	movs	r0, #1
 800070a:	f000 f855 	bl	80007b8 <read_byte>
}
 800070e:	bf00      	nop
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <readFIFO>:


void readFIFO(uint16_t* RED, uint16_t* IR){
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af02      	add	r7, sp, #8
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6039      	str	r1, [r7, #0]
   /* Burst read four bytes from the FIFO
    * to obtain 16-bit ADC values for IR
    * and RED reflectance.
    */
	uint8_t data[4];
   data[0] = MAX30100_FIFO_DATA;
 8000722:	2305      	movs	r3, #5
 8000724:	733b      	strb	r3, [r7, #12]
   HAL_I2C_Master_Transmit(&hi2c3, MAX30100_ADDR, data, 1, 100);
 8000726:	f107 020c 	add.w	r2, r7, #12
 800072a:	2364      	movs	r3, #100	; 0x64
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	2301      	movs	r3, #1
 8000730:	21ae      	movs	r1, #174	; 0xae
 8000732:	4812      	ldr	r0, [pc, #72]	; (800077c <readFIFO+0x64>)
 8000734:	f003 f940 	bl	80039b8 <HAL_I2C_Master_Transmit>
   HAL_I2C_Master_Receive(&hi2c3, MAX30100_ADDR, data, 4, 1000); // Read four times from the FIFO
 8000738:	f107 020c 	add.w	r2, r7, #12
 800073c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	2304      	movs	r3, #4
 8000744:	21ae      	movs	r1, #174	; 0xae
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <readFIFO+0x64>)
 8000748:	f003 fa2a 	bl	8003ba0 <HAL_I2C_Master_Receive>

   // Combine bytes to get the actual number
   IR[0] = (data[0]<<8) | data[1];
 800074c:	7b3b      	ldrb	r3, [r7, #12]
 800074e:	021b      	lsls	r3, r3, #8
 8000750:	b21a      	sxth	r2, r3
 8000752:	7b7b      	ldrb	r3, [r7, #13]
 8000754:	b21b      	sxth	r3, r3
 8000756:	4313      	orrs	r3, r2
 8000758:	b21b      	sxth	r3, r3
 800075a:	b29a      	uxth	r2, r3
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	801a      	strh	r2, [r3, #0]
   RED[0] = (data[2]<<8) | data[3];
 8000760:	7bbb      	ldrb	r3, [r7, #14]
 8000762:	021b      	lsls	r3, r3, #8
 8000764:	b21a      	sxth	r2, r3
 8000766:	7bfb      	ldrb	r3, [r7, #15]
 8000768:	b21b      	sxth	r3, r3
 800076a:	4313      	orrs	r3, r2
 800076c:	b21b      	sxth	r3, r3
 800076e:	b29a      	uxth	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	801a      	strh	r2, [r3, #0]
}
 8000774:	bf00      	nop
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	2000047c 	.word	0x2000047c

08000780 <write_byte>:
   HAL_I2C_Master_Receive(&hi2c3, MAX30100_ADDR, &tempFrac, 1, 100);

   temperature  = (float) tempFrac * 0.0625 + (int8_t) tempInt;
}

void write_byte(uint8_t reg, uint8_t data){
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af02      	add	r7, sp, #8
 8000786:	4603      	mov	r3, r0
 8000788:	460a      	mov	r2, r1
 800078a:	71fb      	strb	r3, [r7, #7]
 800078c:	4613      	mov	r3, r2
 800078e:	71bb      	strb	r3, [r7, #6]
   /*  Write to the register of a device. Note the char
    *  type must be used due to the MBED i2c functions
    */
   uint8_t transfer[2] = {reg, data};
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	733b      	strb	r3, [r7, #12]
 8000794:	79bb      	ldrb	r3, [r7, #6]
 8000796:	737b      	strb	r3, [r7, #13]
   HAL_I2C_Master_Transmit(&hi2c3, MAX30100_ADDR, transfer, 2, 100);
 8000798:	f107 020c 	add.w	r2, r7, #12
 800079c:	2364      	movs	r3, #100	; 0x64
 800079e:	9300      	str	r3, [sp, #0]
 80007a0:	2302      	movs	r3, #2
 80007a2:	21ae      	movs	r1, #174	; 0xae
 80007a4:	4803      	ldr	r0, [pc, #12]	; (80007b4 <write_byte+0x34>)
 80007a6:	f003 f907 	bl	80039b8 <HAL_I2C_Master_Transmit>
}
 80007aa:	bf00      	nop
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	2000047c 	.word	0x2000047c

080007b8 <read_byte>:

void read_byte(uint8_t reg, uint8_t* data){
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af02      	add	r7, sp, #8
 80007be:	4603      	mov	r3, r0
 80007c0:	6039      	str	r1, [r7, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]

	   HAL_I2C_Master_Transmit(&hi2c3, MAX30100_ADDR, &reg, 1, 100);
 80007c4:	1dfa      	adds	r2, r7, #7
 80007c6:	2364      	movs	r3, #100	; 0x64
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	2301      	movs	r3, #1
 80007cc:	21ae      	movs	r1, #174	; 0xae
 80007ce:	4807      	ldr	r0, [pc, #28]	; (80007ec <read_byte+0x34>)
 80007d0:	f003 f8f2 	bl	80039b8 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c3, MAX30100_ADDR, data, 1, 100);
 80007d4:	2364      	movs	r3, #100	; 0x64
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	2301      	movs	r3, #1
 80007da:	683a      	ldr	r2, [r7, #0]
 80007dc:	21ae      	movs	r1, #174	; 0xae
 80007de:	4803      	ldr	r0, [pc, #12]	; (80007ec <read_byte+0x34>)
 80007e0:	f003 f9de 	bl	8003ba0 <HAL_I2C_Master_Receive>
}
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	2000047c 	.word	0x2000047c

080007f0 <writeByte>:
float q[4] = {1.0f, 0.0f, 0.0f, 0.0f};           // vector to hold quaternion
float eInt[3] = {0.0f, 0.0f, 0.0f};              // vector to hold integral error for Mahony method


void writeByte(uint8_t reg, uint8_t data)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	460a      	mov	r2, r1
 80007fa:	71fb      	strb	r3, [r7, #7]
 80007fc:	4613      	mov	r3, r2
 80007fe:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	73fb      	strb	r3, [r7, #15]
	//Enable CS
	_MPU9050_CS_ENBALE;
 8000804:	2200      	movs	r2, #0
 8000806:	2110      	movs	r1, #16
 8000808:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080c:	f002 ffee 	bl	80037ec <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&hspi1, &spiReg, 1, 100);
 8000810:	f107 010f 	add.w	r1, r7, #15
 8000814:	2364      	movs	r3, #100	; 0x64
 8000816:	2201      	movs	r2, #1
 8000818:	4809      	ldr	r0, [pc, #36]	; (8000840 <writeByte+0x50>)
 800081a:	f005 fe0c 	bl	8006436 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 800081e:	1db9      	adds	r1, r7, #6
 8000820:	2364      	movs	r3, #100	; 0x64
 8000822:	2201      	movs	r2, #1
 8000824:	4806      	ldr	r0, [pc, #24]	; (8000840 <writeByte+0x50>)
 8000826:	f005 fe06 	bl	8006436 <HAL_SPI_Transmit>
	//Disable CS
	_MPU9050_CS_DISABLE;
 800082a:	2201      	movs	r2, #1
 800082c:	2110      	movs	r1, #16
 800082e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000832:	f002 ffdb 	bl	80037ec <HAL_GPIO_WritePin>
}
 8000836:	bf00      	nop
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200005a0 	.word	0x200005a0

08000844 <readByte>:

void readByte(uint8_t reg, uint8_t *dataR, uint8_t size)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	6039      	str	r1, [r7, #0]
 800084e:	71fb      	strb	r3, [r7, #7]
 8000850:	4613      	mov	r3, r2
 8000852:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800085a:	b2db      	uxtb	r3, r3
 800085c:	733b      	strb	r3, [r7, #12]
	//Enable CS
	_MPU9050_CS_ENBALE;
 800085e:	2200      	movs	r2, #0
 8000860:	2110      	movs	r1, #16
 8000862:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000866:	f002 ffc1 	bl	80037ec <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&hspi1, spiBuf, 1, 100);
 800086a:	f107 010c 	add.w	r1, r7, #12
 800086e:	2364      	movs	r3, #100	; 0x64
 8000870:	2201      	movs	r2, #1
 8000872:	480a      	ldr	r0, [pc, #40]	; (800089c <readByte+0x58>)
 8000874:	f005 fddf 	bl	8006436 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Receive(&hspi1, dataR, size, 10000);
 8000878:	79bb      	ldrb	r3, [r7, #6]
 800087a:	b29a      	uxth	r2, r3
 800087c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000880:	6839      	ldr	r1, [r7, #0]
 8000882:	4806      	ldr	r0, [pc, #24]	; (800089c <readByte+0x58>)
 8000884:	f005 ff3d 	bl	8006702 <HAL_SPI_Receive>
	//Disable CS
	_MPU9050_CS_DISABLE;
 8000888:	2201      	movs	r2, #1
 800088a:	2110      	movs	r1, #16
 800088c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000890:	f002 ffac 	bl	80037ec <HAL_GPIO_WritePin>

}
 8000894:	bf00      	nop
 8000896:	3710      	adds	r7, #16
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	200005a0 	.word	0x200005a0

080008a0 <readAccelData>:
  }
}


void readAccelData(int16_t * destination)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  uint8_t rawData[6];  // x/y/z accel register data stored here

  readByte(ACCEL_XOUT_H, &rawData[0], 6);  // Read the six raw data registers into data array
 80008a8:	f107 0308 	add.w	r3, r7, #8
 80008ac:	2206      	movs	r2, #6
 80008ae:	4619      	mov	r1, r3
 80008b0:	203b      	movs	r0, #59	; 0x3b
 80008b2:	f7ff ffc7 	bl	8000844 <readByte>
  destination[0] = (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80008b6:	7a3b      	ldrb	r3, [r7, #8]
 80008b8:	021b      	lsls	r3, r3, #8
 80008ba:	b21a      	sxth	r2, r3
 80008bc:	7a7b      	ldrb	r3, [r7, #9]
 80008be:	b21b      	sxth	r3, r3
 80008c0:	4313      	orrs	r3, r2
 80008c2:	b21a      	sxth	r2, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	801a      	strh	r2, [r3, #0]
  destination[1] = (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
 80008c8:	7abb      	ldrb	r3, [r7, #10]
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	b219      	sxth	r1, r3
 80008ce:	7afb      	ldrb	r3, [r7, #11]
 80008d0:	b21a      	sxth	r2, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	3302      	adds	r3, #2
 80008d6:	430a      	orrs	r2, r1
 80008d8:	b212      	sxth	r2, r2
 80008da:	801a      	strh	r2, [r3, #0]
  destination[2] = (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
 80008dc:	7b3b      	ldrb	r3, [r7, #12]
 80008de:	021b      	lsls	r3, r3, #8
 80008e0:	b219      	sxth	r1, r3
 80008e2:	7b7b      	ldrb	r3, [r7, #13]
 80008e4:	b21a      	sxth	r2, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	3304      	adds	r3, #4
 80008ea:	430a      	orrs	r2, r1
 80008ec:	b212      	sxth	r2, r2
 80008ee:	801a      	strh	r2, [r3, #0]
}
 80008f0:	bf00      	nop
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <initMPU9250>:
	writeByte( I2C_SLV0_CTRL, 0x81);
}


void initMPU9250()
{  
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
	uint8_t c;

	// Initialize MPU9250 device
  // wake up device
  writeByte(PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 80008fe:	2100      	movs	r1, #0
 8000900:	206b      	movs	r0, #107	; 0x6b
 8000902:	f7ff ff75 	bl	80007f0 <writeByte>
  readByte(PWR_MGMT_1, &c, 1);
 8000906:	1dfb      	adds	r3, r7, #7
 8000908:	2201      	movs	r2, #1
 800090a:	4619      	mov	r1, r3
 800090c:	206b      	movs	r0, #107	; 0x6b
 800090e:	f7ff ff99 	bl	8000844 <readByte>
  HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 8000912:	2064      	movs	r0, #100	; 0x64
 8000914:	f002 fc40 	bl	8003198 <HAL_Delay>

  // get stable time source
  writeByte(PWR_MGMT_1, 0x01);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8000918:	2101      	movs	r1, #1
 800091a:	206b      	movs	r0, #107	; 0x6b
 800091c:	f7ff ff68 	bl	80007f0 <writeByte>
  readByte(PWR_MGMT_1, &c, 1);
 8000920:	1dfb      	adds	r3, r7, #7
 8000922:	2201      	movs	r2, #1
 8000924:	4619      	mov	r1, r3
 8000926:	206b      	movs	r0, #107	; 0x6b
 8000928:	f7ff ff8c 	bl	8000844 <readByte>
  // Configure Gyro and Accelerometer
  // Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively; 
  // DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
  // Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
  writeByte(CONFIG, 0x03);
 800092c:	2103      	movs	r1, #3
 800092e:	201a      	movs	r0, #26
 8000930:	f7ff ff5e 	bl	80007f0 <writeByte>
  readByte(CONFIG, &c, 1);
 8000934:	1dfb      	adds	r3, r7, #7
 8000936:	2201      	movs	r2, #1
 8000938:	4619      	mov	r1, r3
 800093a:	201a      	movs	r0, #26
 800093c:	f7ff ff82 	bl	8000844 <readByte>
  // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
  writeByte(SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
 8000940:	2104      	movs	r1, #4
 8000942:	2019      	movs	r0, #25
 8000944:	f7ff ff54 	bl	80007f0 <writeByte>
  readByte(SMPLRT_DIV, &c, 1);
 8000948:	1dfb      	adds	r3, r7, #7
 800094a:	2201      	movs	r2, #1
 800094c:	4619      	mov	r1, r3
 800094e:	2019      	movs	r0, #25
 8000950:	f7ff ff78 	bl	8000844 <readByte>
  //writeByte(GYRO_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
  //writeByte(GYRO_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
  //writeByte(GYRO_CONFIG, c | Gscale << 3); // Set full scale range for the gyro

  // Set accelerometer configuration
  readByte(ACCEL_CONFIG, &c, 1);
 8000954:	1dfb      	adds	r3, r7, #7
 8000956:	2201      	movs	r2, #1
 8000958:	4619      	mov	r1, r3
 800095a:	201c      	movs	r0, #28
 800095c:	f7ff ff72 	bl	8000844 <readByte>
  writeByte(ACCEL_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	f003 031f 	and.w	r3, r3, #31
 8000966:	b2db      	uxtb	r3, r3
 8000968:	4619      	mov	r1, r3
 800096a:	201c      	movs	r0, #28
 800096c:	f7ff ff40 	bl	80007f0 <writeByte>
  writeByte(ACCEL_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	f023 0318 	bic.w	r3, r3, #24
 8000976:	b2db      	uxtb	r3, r3
 8000978:	4619      	mov	r1, r3
 800097a:	201c      	movs	r0, #28
 800097c:	f7ff ff38 	bl	80007f0 <writeByte>
  writeByte(ACCEL_CONFIG, c | Ascale << 3); // Set full scale range for the accelerometer
 8000980:	4b2f      	ldr	r3, [pc, #188]	; (8000a40 <initMPU9250+0x148>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	00db      	lsls	r3, r3, #3
 8000986:	b25a      	sxtb	r2, r3
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	b25b      	sxtb	r3, r3
 800098c:	4313      	orrs	r3, r2
 800098e:	b25b      	sxtb	r3, r3
 8000990:	b2db      	uxtb	r3, r3
 8000992:	4619      	mov	r1, r3
 8000994:	201c      	movs	r0, #28
 8000996:	f7ff ff2b 	bl	80007f0 <writeByte>
  readByte(ACCEL_CONFIG, &c, 1);
 800099a:	1dfb      	adds	r3, r7, #7
 800099c:	2201      	movs	r2, #1
 800099e:	4619      	mov	r1, r3
 80009a0:	201c      	movs	r0, #28
 80009a2:	f7ff ff4f 	bl	8000844 <readByte>
  // Set accelerometer sample rate configuration
  // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
  // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
  readByte(ACCEL_CONFIG2, &c, 1);
 80009a6:	1dfb      	adds	r3, r7, #7
 80009a8:	2201      	movs	r2, #1
 80009aa:	4619      	mov	r1, r3
 80009ac:	201d      	movs	r0, #29
 80009ae:	f7ff ff49 	bl	8000844 <readByte>
  writeByte(ACCEL_CONFIG2, c & ~0x0F); // Clear accel_fchoice_b (bit 3) and A_DLPFG (b	its [2:0])
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	f023 030f 	bic.w	r3, r3, #15
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	4619      	mov	r1, r3
 80009bc:	201d      	movs	r0, #29
 80009be:	f7ff ff17 	bl	80007f0 <writeByte>
  writeByte(ACCEL_CONFIG2, c | 0x06); // Set accelerometer rate to 1 kHz and bandwidth to 21 Hz
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	f043 0306 	orr.w	r3, r3, #6
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	4619      	mov	r1, r3
 80009cc:	201d      	movs	r0, #29
 80009ce:	f7ff ff0f 	bl	80007f0 <writeByte>
  readByte(ACCEL_CONFIG2, &c, 1);
 80009d2:	1dfb      	adds	r3, r7, #7
 80009d4:	2201      	movs	r2, #1
 80009d6:	4619      	mov	r1, r3
 80009d8:	201d      	movs	r0, #29
 80009da:	f7ff ff33 	bl	8000844 <readByte>
  // but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

  // Configure Interrupts and Bypass Enable
  // Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips 
  // can join the I2C bus and all can be controlled by the Arduino as master
  writeByte(INT_PIN_CFG, 0x22);
 80009de:	2122      	movs	r1, #34	; 0x22
 80009e0:	2037      	movs	r0, #55	; 0x37
 80009e2:	f7ff ff05 	bl	80007f0 <writeByte>
  writeByte(INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 80009e6:	2101      	movs	r1, #1
 80009e8:	2038      	movs	r0, #56	; 0x38
 80009ea:	f7ff ff01 	bl	80007f0 <writeByte>

  // Power off gyro
  readByte(PWR_MGMT_2, &c, 1);
 80009ee:	1dfb      	adds	r3, r7, #7
 80009f0:	2201      	movs	r2, #1
 80009f2:	4619      	mov	r1, r3
 80009f4:	206c      	movs	r0, #108	; 0x6c
 80009f6:	f7ff ff25 	bl	8000844 <readByte>
  c |= 0x07;
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	f043 0307 	orr.w	r3, r3, #7
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	71fb      	strb	r3, [r7, #7]
  c &= 0xC7;
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	71fb      	strb	r3, [r7, #7]
  writeByte(PWR_MGMT_2, c); // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	4619      	mov	r1, r3
 8000a12:	206c      	movs	r0, #108	; 0x6c
 8000a14:	f7ff feec 	bl	80007f0 <writeByte>

  //Power off temperature
  readByte(PWR_MGMT_1, &c, 1);
 8000a18:	1dfb      	adds	r3, r7, #7
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	206b      	movs	r0, #107	; 0x6b
 8000a20:	f7ff ff10 	bl	8000844 <readByte>
  c |= 0x08;
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	f043 0308 	orr.w	r3, r3, #8
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	71fb      	strb	r3, [r7, #7]
  writeByte(PWR_MGMT_1, c); // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	4619      	mov	r1, r3
 8000a32:	206b      	movs	r0, #107	; 0x6b
 8000a34:	f7ff fedc 	bl	80007f0 <writeByte>

}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	200001e0 	.word	0x200001e0

08000a44 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000a56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	608b      	str	r3, [r1, #8]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000a70:	f000 f80a 	bl	8000a88 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000a74:	4903      	ldr	r1, [pc, #12]	; (8000a84 <APPE_Init+0x18>)
 8000a76:	2000      	movs	r0, #0
 8000a78:	f000 fd4a 	bl	8001510 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000a7c:	f000 f80e 	bl	8000a9c <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000a80:	bf00      	nop
}
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000518 	.word	0x20000518

08000a88 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000a8c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000a90:	f7ff ffd8 	bl	8000a44 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 8000a94:	f001 fcee 	bl	8002474 <UTIL_LPM_Init>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8000a98:	bf00      	nop
}
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000aa2:	f009 fea5 	bl	800a7f0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 8000aa6:	4a11      	ldr	r2, [pc, #68]	; (8000aec <appe_Tl_Init+0x50>)
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000aae:	f001 fe5b 	bl	8002768 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <appe_Tl_Init+0x54>)
 8000ab4:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <appe_Tl_Init+0x58>)
 8000ab8:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000aba:	463b      	mov	r3, r7
 8000abc:	4619      	mov	r1, r3
 8000abe:	480e      	ldr	r0, [pc, #56]	; (8000af8 <appe_Tl_Init+0x5c>)
 8000ac0:	f009 fba2 	bl	800a208 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000ac4:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <appe_Tl_Init+0x60>)
 8000ac6:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000ac8:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <appe_Tl_Init+0x64>)
 8000aca:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000acc:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <appe_Tl_Init+0x68>)
 8000ace:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000ad0:	f240 533c 	movw	r3, #1340	; 0x53c
 8000ad4:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000ad6:	f107 0308 	add.w	r3, r7, #8
 8000ada:	4618      	mov	r0, r3
 8000adc:	f009 ff96 	bl	800aa0c <TL_MM_Init>

  TL_Enable();
 8000ae0:	f009 fe80 	bl	800a7e4 <TL_Enable>

  return;
 8000ae4:	bf00      	nop
}
 8000ae6:	3720      	adds	r7, #32
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	0800a241 	.word	0x0800a241
 8000af0:	20030700 	.word	0x20030700
 8000af4:	08000b09 	.word	0x08000b09
 8000af8:	08000b1f 	.word	0x08000b1f
 8000afc:	20030918 	.word	0x20030918
 8000b00:	2003080c 	.word	0x2003080c
 8000b04:	200301c4 	.word	0x200301c4

08000b08 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000b12:	bf00      	nop
}
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <APPE_SysUserEvtRx>:

static void APPE_SysUserEvtRx( void * pPayload )
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b082      	sub	sp, #8
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8000b26:	f009 ffe1 	bl	800aaec <TL_TRACES_Init>

  APP_BLE_Init( );
 8000b2a:	f00a f839 	bl	800aba0 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2001      	movs	r0, #1
 8000b32:	f001 fcb1 	bl	8002498 <UTIL_LPM_SetOffMode>
  return;
 8000b36:	bf00      	nop
}
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
 8000b42:	f001 fcd7 	bl	80024f4 <UTIL_LPM_EnterLowPower>
#endif
  return;
 8000b46:	bf00      	nop
}
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
 8000b52:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b58:	f001 fd2a 	bl	80025b0 <UTIL_SEQ_Run>
}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000b72:	f001 fe19 	bl	80027a8 <UTIL_SEQ_SetTask>
  return;
 8000b76:	bf00      	nop
}
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000b86:	2002      	movs	r0, #2
 8000b88:	f001 fe74 	bl	8002874 <UTIL_SEQ_SetEvt>
  return;
 8000b8c:	bf00      	nop
}
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000b9c:	2002      	movs	r0, #2
 8000b9e:	f001 fe87 	bl	80028b0 <UTIL_SEQ_WaitEvt>
  return;
 8000ba2:	bf00      	nop
}
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000baa:	b480      	push	{r7}
 8000bac:	b085      	sub	sp, #20
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bce:	68fb      	ldr	r3, [r7, #12]
}
 8000bd0:	bf00      	nop
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf0:	2004      	movs	r0, #4
 8000bf2:	f7ff ffda 	bl	8000baa <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	2002      	movs	r0, #2
 8000bf8:	f7ff ffd7 	bl	8000baa <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f7ff ffd4 	bl	8000baa <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c02:	2008      	movs	r0, #8
 8000c04:	f7ff ffd1 	bl	8000baa <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LIS3DH_CS_GPIO_Port, LIS3DH_CS_Pin, GPIO_PIN_SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2104      	movs	r1, #4
 8000c0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c10:	f002 fdec 	bl	80037ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_1_Pin|SPI1_CS_2_Pin, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1e:	f002 fde5 	bl	80037ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|SPI2_CS_1_Pin|SPI2_CS_2_Pin 
 8000c22:	2200      	movs	r2, #0
 8000c24:	f241 0133 	movw	r1, #4147	; 0x1033
 8000c28:	4823      	ldr	r0, [pc, #140]	; (8000cb8 <MX_GPIO_Init+0xdc>)
 8000c2a:	f002 fddf 	bl	80037ec <HAL_GPIO_WritePin>
                          |LED_BLUE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LIS3DH_CS_Pin;
 8000c2e:	2304      	movs	r3, #4
 8000c30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LIS3DH_CS_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	4619      	mov	r1, r3
 8000c42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c46:	f002 fc61 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_CS_1_Pin|SPI1_CS_2_Pin;
 8000c4a:	f44f 7304 	mov.w	r3, #528	; 0x210
 8000c4e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	4619      	mov	r1, r3
 8000c60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c64:	f002 fc52 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c68:	2310      	movs	r3, #16
 8000c6a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	4619      	mov	r1, r3
 8000c78:	4810      	ldr	r0, [pc, #64]	; (8000cbc <MX_GPIO_Init+0xe0>)
 8000c7a:	f002 fc47 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|SPI2_CS_1_Pin|SPI2_CS_2_Pin 
 8000c7e:	f241 0333 	movw	r3, #4147	; 0x1033
 8000c82:	607b      	str	r3, [r7, #4]
                          |LED_BLUE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c84:	2301      	movs	r3, #1
 8000c86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	4619      	mov	r1, r3
 8000c94:	4808      	ldr	r0, [pc, #32]	; (8000cb8 <MX_GPIO_Init+0xdc>)
 8000c96:	f002 fc39 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_GPIO_Init+0xe4>)
 8000cac:	f002 fc2e 	bl	800350c <HAL_GPIO_Init>

}
 8000cb0:	bf00      	nop
 8000cb2:	3718      	adds	r7, #24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	48000400 	.word	0x48000400
 8000cbc:	48000800 	.word	0x48000800
 8000cc0:	48000c00 	.word	0x48000c00

08000cc4 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <LL_EXTI_EnableIT_0_31+0x24>)
 8000cce:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000cd2:	4905      	ldr	r1, [pc, #20]	; (8000ce8 <LL_EXTI_EnableIT_0_31+0x24>)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	58000800 	.word	0x58000800

08000cec <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4904      	ldr	r1, [pc, #16]	; (8000d0c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	600b      	str	r3, [r1, #0]

}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	58000800 	.word	0x58000800

08000d10 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000d16:	4b0d      	ldr	r3, [pc, #52]	; (8000d4c <ReadRtcSsrValue+0x3c>)
 8000d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <ReadRtcSsrValue+0x3c>)
 8000d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000d26:	e005      	b.n	8000d34 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000d2c:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <ReadRtcSsrValue+0x3c>)
 8000d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d1f5      	bne.n	8000d28 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000d3c:	683b      	ldr	r3, [r7, #0]
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	40002800 	.word	0x40002800

08000d50 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	460a      	mov	r2, r1
 8000d5a:	71fb      	strb	r3, [r7, #7]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000d60:	79ba      	ldrb	r2, [r7, #6]
 8000d62:	491d      	ldr	r1, [pc, #116]	; (8000dd8 <LinkTimerAfter+0x88>)
 8000d64:	4613      	mov	r3, r2
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	4413      	add	r3, r2
 8000d6a:	00db      	lsls	r3, r3, #3
 8000d6c:	440b      	add	r3, r1
 8000d6e:	3315      	adds	r3, #21
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d74:	7bfb      	ldrb	r3, [r7, #15]
 8000d76:	2b06      	cmp	r3, #6
 8000d78:	d009      	beq.n	8000d8e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000d7a:	7bfa      	ldrb	r2, [r7, #15]
 8000d7c:	4916      	ldr	r1, [pc, #88]	; (8000dd8 <LinkTimerAfter+0x88>)
 8000d7e:	4613      	mov	r3, r2
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	4413      	add	r3, r2
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	440b      	add	r3, r1
 8000d88:	3314      	adds	r3, #20
 8000d8a:	79fa      	ldrb	r2, [r7, #7]
 8000d8c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000d8e:	79fa      	ldrb	r2, [r7, #7]
 8000d90:	4911      	ldr	r1, [pc, #68]	; (8000dd8 <LinkTimerAfter+0x88>)
 8000d92:	4613      	mov	r3, r2
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	4413      	add	r3, r2
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	440b      	add	r3, r1
 8000d9c:	3315      	adds	r3, #21
 8000d9e:	7bfa      	ldrb	r2, [r7, #15]
 8000da0:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000da2:	79fa      	ldrb	r2, [r7, #7]
 8000da4:	490c      	ldr	r1, [pc, #48]	; (8000dd8 <LinkTimerAfter+0x88>)
 8000da6:	4613      	mov	r3, r2
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	4413      	add	r3, r2
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	440b      	add	r3, r1
 8000db0:	3314      	adds	r3, #20
 8000db2:	79ba      	ldrb	r2, [r7, #6]
 8000db4:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000db6:	79ba      	ldrb	r2, [r7, #6]
 8000db8:	4907      	ldr	r1, [pc, #28]	; (8000dd8 <LinkTimerAfter+0x88>)
 8000dba:	4613      	mov	r3, r2
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	4413      	add	r3, r2
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	440b      	add	r3, r1
 8000dc4:	3315      	adds	r3, #21
 8000dc6:	79fa      	ldrb	r2, [r7, #7]
 8000dc8:	701a      	strb	r2, [r3, #0]

  return;
 8000dca:	bf00      	nop
}
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	2000002c 	.word	0x2000002c

08000ddc <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	460a      	mov	r2, r1
 8000de6:	71fb      	strb	r3, [r7, #7]
 8000de8:	4613      	mov	r3, r2
 8000dea:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000dec:	4b29      	ldr	r3, [pc, #164]	; (8000e94 <LinkTimerBefore+0xb8>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	79ba      	ldrb	r2, [r7, #6]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d032      	beq.n	8000e5e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000df8:	79ba      	ldrb	r2, [r7, #6]
 8000dfa:	4927      	ldr	r1, [pc, #156]	; (8000e98 <LinkTimerBefore+0xbc>)
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	4413      	add	r3, r2
 8000e02:	00db      	lsls	r3, r3, #3
 8000e04:	440b      	add	r3, r1
 8000e06:	3314      	adds	r3, #20
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000e0c:	7bfa      	ldrb	r2, [r7, #15]
 8000e0e:	4922      	ldr	r1, [pc, #136]	; (8000e98 <LinkTimerBefore+0xbc>)
 8000e10:	4613      	mov	r3, r2
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	4413      	add	r3, r2
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	440b      	add	r3, r1
 8000e1a:	3315      	adds	r3, #21
 8000e1c:	79fa      	ldrb	r2, [r7, #7]
 8000e1e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000e20:	79fa      	ldrb	r2, [r7, #7]
 8000e22:	491d      	ldr	r1, [pc, #116]	; (8000e98 <LinkTimerBefore+0xbc>)
 8000e24:	4613      	mov	r3, r2
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	4413      	add	r3, r2
 8000e2a:	00db      	lsls	r3, r3, #3
 8000e2c:	440b      	add	r3, r1
 8000e2e:	3315      	adds	r3, #21
 8000e30:	79ba      	ldrb	r2, [r7, #6]
 8000e32:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000e34:	79fa      	ldrb	r2, [r7, #7]
 8000e36:	4918      	ldr	r1, [pc, #96]	; (8000e98 <LinkTimerBefore+0xbc>)
 8000e38:	4613      	mov	r3, r2
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	4413      	add	r3, r2
 8000e3e:	00db      	lsls	r3, r3, #3
 8000e40:	440b      	add	r3, r1
 8000e42:	3314      	adds	r3, #20
 8000e44:	7bfa      	ldrb	r2, [r7, #15]
 8000e46:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000e48:	79ba      	ldrb	r2, [r7, #6]
 8000e4a:	4913      	ldr	r1, [pc, #76]	; (8000e98 <LinkTimerBefore+0xbc>)
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	4413      	add	r3, r2
 8000e52:	00db      	lsls	r3, r3, #3
 8000e54:	440b      	add	r3, r1
 8000e56:	3314      	adds	r3, #20
 8000e58:	79fa      	ldrb	r2, [r7, #7]
 8000e5a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000e5c:	e014      	b.n	8000e88 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000e5e:	79fa      	ldrb	r2, [r7, #7]
 8000e60:	490d      	ldr	r1, [pc, #52]	; (8000e98 <LinkTimerBefore+0xbc>)
 8000e62:	4613      	mov	r3, r2
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	4413      	add	r3, r2
 8000e68:	00db      	lsls	r3, r3, #3
 8000e6a:	440b      	add	r3, r1
 8000e6c:	3315      	adds	r3, #21
 8000e6e:	79ba      	ldrb	r2, [r7, #6]
 8000e70:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000e72:	79ba      	ldrb	r2, [r7, #6]
 8000e74:	4908      	ldr	r1, [pc, #32]	; (8000e98 <LinkTimerBefore+0xbc>)
 8000e76:	4613      	mov	r3, r2
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	4413      	add	r3, r2
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	440b      	add	r3, r1
 8000e80:	3314      	adds	r3, #20
 8000e82:	79fa      	ldrb	r2, [r7, #7]
 8000e84:	701a      	strb	r2, [r3, #0]
  return;
 8000e86:	bf00      	nop
}
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	200000bc 	.word	0x200000bc
 8000e98:	2000002c 	.word	0x2000002c

08000e9c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ea6:	4b4e      	ldr	r3, [pc, #312]	; (8000fe0 <linkTimer+0x144>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	2b06      	cmp	r3, #6
 8000eae:	d118      	bne.n	8000ee2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000eb0:	4b4b      	ldr	r3, [pc, #300]	; (8000fe0 <linkTimer+0x144>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	4b4b      	ldr	r3, [pc, #300]	; (8000fe4 <linkTimer+0x148>)
 8000eb8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000eba:	4a49      	ldr	r2, [pc, #292]	; (8000fe0 <linkTimer+0x144>)
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000ec0:	79fa      	ldrb	r2, [r7, #7]
 8000ec2:	4949      	ldr	r1, [pc, #292]	; (8000fe8 <linkTimer+0x14c>)
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	4413      	add	r3, r2
 8000eca:	00db      	lsls	r3, r3, #3
 8000ecc:	440b      	add	r3, r1
 8000ece:	3315      	adds	r3, #21
 8000ed0:	2206      	movs	r2, #6
 8000ed2:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000ed4:	4b45      	ldr	r3, [pc, #276]	; (8000fec <linkTimer+0x150>)
 8000ed6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000eda:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	81fb      	strh	r3, [r7, #14]
 8000ee0:	e078      	b.n	8000fd4 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000ee2:	f000 f909 	bl	80010f8 <ReturnTimeElapsed>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000eea:	79fa      	ldrb	r2, [r7, #7]
 8000eec:	493e      	ldr	r1, [pc, #248]	; (8000fe8 <linkTimer+0x14c>)
 8000eee:	4613      	mov	r3, r2
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	4413      	add	r3, r2
 8000ef4:	00db      	lsls	r3, r3, #3
 8000ef6:	440b      	add	r3, r1
 8000ef8:	3308      	adds	r3, #8
 8000efa:	6819      	ldr	r1, [r3, #0]
 8000efc:	89fb      	ldrh	r3, [r7, #14]
 8000efe:	79fa      	ldrb	r2, [r7, #7]
 8000f00:	4419      	add	r1, r3
 8000f02:	4839      	ldr	r0, [pc, #228]	; (8000fe8 <linkTimer+0x14c>)
 8000f04:	4613      	mov	r3, r2
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	4413      	add	r3, r2
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	4403      	add	r3, r0
 8000f0e:	3308      	adds	r3, #8
 8000f10:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000f12:	79fa      	ldrb	r2, [r7, #7]
 8000f14:	4934      	ldr	r1, [pc, #208]	; (8000fe8 <linkTimer+0x14c>)
 8000f16:	4613      	mov	r3, r2
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	4413      	add	r3, r2
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	440b      	add	r3, r1
 8000f20:	3308      	adds	r3, #8
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000f26:	4b2e      	ldr	r3, [pc, #184]	; (8000fe0 <linkTimer+0x144>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4a2e      	ldr	r2, [pc, #184]	; (8000fe8 <linkTimer+0x14c>)
 8000f30:	460b      	mov	r3, r1
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	440b      	add	r3, r1
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	4413      	add	r3, r2
 8000f3a:	3308      	adds	r3, #8
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	68ba      	ldr	r2, [r7, #8]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d337      	bcc.n	8000fb4 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000f44:	4b26      	ldr	r3, [pc, #152]	; (8000fe0 <linkTimer+0x144>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000f4a:	7b7a      	ldrb	r2, [r7, #13]
 8000f4c:	4926      	ldr	r1, [pc, #152]	; (8000fe8 <linkTimer+0x14c>)
 8000f4e:	4613      	mov	r3, r2
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	4413      	add	r3, r2
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	440b      	add	r3, r1
 8000f58:	3315      	adds	r3, #21
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000f5e:	e013      	b.n	8000f88 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000f60:	7b7a      	ldrb	r2, [r7, #13]
 8000f62:	4921      	ldr	r1, [pc, #132]	; (8000fe8 <linkTimer+0x14c>)
 8000f64:	4613      	mov	r3, r2
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	4413      	add	r3, r2
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	440b      	add	r3, r1
 8000f6e:	3315      	adds	r3, #21
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000f74:	7b7a      	ldrb	r2, [r7, #13]
 8000f76:	491c      	ldr	r1, [pc, #112]	; (8000fe8 <linkTimer+0x14c>)
 8000f78:	4613      	mov	r3, r2
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	4413      	add	r3, r2
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	440b      	add	r3, r1
 8000f82:	3315      	adds	r3, #21
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000f88:	7b3b      	ldrb	r3, [r7, #12]
 8000f8a:	2b06      	cmp	r3, #6
 8000f8c:	d00b      	beq.n	8000fa6 <linkTimer+0x10a>
 8000f8e:	7b3a      	ldrb	r2, [r7, #12]
 8000f90:	4915      	ldr	r1, [pc, #84]	; (8000fe8 <linkTimer+0x14c>)
 8000f92:	4613      	mov	r3, r2
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	4413      	add	r3, r2
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	440b      	add	r3, r1
 8000f9c:	3308      	adds	r3, #8
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	68ba      	ldr	r2, [r7, #8]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d2dc      	bcs.n	8000f60 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000fa6:	7b7a      	ldrb	r2, [r7, #13]
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	4611      	mov	r1, r2
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff fecf 	bl	8000d50 <LinkTimerAfter>
 8000fb2:	e00f      	b.n	8000fd4 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <linkTimer+0x144>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	4611      	mov	r1, r2
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff ff0c 	bl	8000ddc <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <linkTimer+0x144>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <linkTimer+0x148>)
 8000fcc:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000fce:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <linkTimer+0x144>)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000fd4:	89fb      	ldrh	r3, [r7, #14]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200000bc 	.word	0x200000bc
 8000fe4:	200000bd 	.word	0x200000bd
 8000fe8:	2000002c 	.word	0x2000002c
 8000fec:	200000c0 	.word	0x200000c0

08000ff0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	460a      	mov	r2, r1
 8000ffa:	71fb      	strb	r3, [r7, #7]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001000:	4b39      	ldr	r3, [pc, #228]	; (80010e8 <UnlinkTimer+0xf8>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	79fa      	ldrb	r2, [r7, #7]
 8001008:	429a      	cmp	r2, r3
 800100a:	d111      	bne.n	8001030 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 800100c:	4b36      	ldr	r3, [pc, #216]	; (80010e8 <UnlinkTimer+0xf8>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4b36      	ldr	r3, [pc, #216]	; (80010ec <UnlinkTimer+0xfc>)
 8001014:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001016:	79fa      	ldrb	r2, [r7, #7]
 8001018:	4935      	ldr	r1, [pc, #212]	; (80010f0 <UnlinkTimer+0x100>)
 800101a:	4613      	mov	r3, r2
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	4413      	add	r3, r2
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	440b      	add	r3, r1
 8001024:	3315      	adds	r3, #21
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4b2f      	ldr	r3, [pc, #188]	; (80010e8 <UnlinkTimer+0xf8>)
 800102c:	701a      	strb	r2, [r3, #0]
 800102e:	e03e      	b.n	80010ae <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001030:	79fa      	ldrb	r2, [r7, #7]
 8001032:	492f      	ldr	r1, [pc, #188]	; (80010f0 <UnlinkTimer+0x100>)
 8001034:	4613      	mov	r3, r2
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4413      	add	r3, r2
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	440b      	add	r3, r1
 800103e:	3314      	adds	r3, #20
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001044:	79fa      	ldrb	r2, [r7, #7]
 8001046:	492a      	ldr	r1, [pc, #168]	; (80010f0 <UnlinkTimer+0x100>)
 8001048:	4613      	mov	r3, r2
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	4413      	add	r3, r2
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	440b      	add	r3, r1
 8001052:	3315      	adds	r3, #21
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001058:	79f9      	ldrb	r1, [r7, #7]
 800105a:	7bfa      	ldrb	r2, [r7, #15]
 800105c:	4824      	ldr	r0, [pc, #144]	; (80010f0 <UnlinkTimer+0x100>)
 800105e:	460b      	mov	r3, r1
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	440b      	add	r3, r1
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	4403      	add	r3, r0
 8001068:	3315      	adds	r3, #21
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	b2d8      	uxtb	r0, r3
 800106e:	4920      	ldr	r1, [pc, #128]	; (80010f0 <UnlinkTimer+0x100>)
 8001070:	4613      	mov	r3, r2
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	4413      	add	r3, r2
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	440b      	add	r3, r1
 800107a:	3315      	adds	r3, #21
 800107c:	4602      	mov	r2, r0
 800107e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001080:	7bbb      	ldrb	r3, [r7, #14]
 8001082:	2b06      	cmp	r3, #6
 8001084:	d013      	beq.n	80010ae <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001086:	79f9      	ldrb	r1, [r7, #7]
 8001088:	7bba      	ldrb	r2, [r7, #14]
 800108a:	4819      	ldr	r0, [pc, #100]	; (80010f0 <UnlinkTimer+0x100>)
 800108c:	460b      	mov	r3, r1
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	440b      	add	r3, r1
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	4403      	add	r3, r0
 8001096:	3314      	adds	r3, #20
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	4914      	ldr	r1, [pc, #80]	; (80010f0 <UnlinkTimer+0x100>)
 800109e:	4613      	mov	r3, r2
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	4413      	add	r3, r2
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	440b      	add	r3, r1
 80010a8:	3314      	adds	r3, #20
 80010aa:	4602      	mov	r2, r0
 80010ac:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80010ae:	79fa      	ldrb	r2, [r7, #7]
 80010b0:	490f      	ldr	r1, [pc, #60]	; (80010f0 <UnlinkTimer+0x100>)
 80010b2:	4613      	mov	r3, r2
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	4413      	add	r3, r2
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	440b      	add	r3, r1
 80010bc:	330c      	adds	r3, #12
 80010be:	2201      	movs	r2, #1
 80010c0:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <UnlinkTimer+0xf8>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b06      	cmp	r3, #6
 80010ca:	d107      	bne.n	80010dc <UnlinkTimer+0xec>
 80010cc:	79bb      	ldrb	r3, [r7, #6]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d104      	bne.n	80010dc <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80010d2:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <UnlinkTimer+0x104>)
 80010d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010d8:	601a      	str	r2, [r3, #0]
  }

  return;
 80010da:	bf00      	nop
 80010dc:	bf00      	nop
}
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	200000bc 	.word	0x200000bc
 80010ec:	200000bd 	.word	0x200000bd
 80010f0:	2000002c 	.word	0x2000002c
 80010f4:	200000c0 	.word	0x200000c0

080010f8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80010fe:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <ReturnTimeElapsed+0x70>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001106:	d026      	beq.n	8001156 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001108:	f7ff fe02 	bl	8000d10 <ReadRtcSsrValue>
 800110c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800110e:	4b16      	ldr	r3, [pc, #88]	; (8001168 <ReturnTimeElapsed+0x70>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	429a      	cmp	r2, r3
 8001116:	d805      	bhi.n	8001124 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001118:	4b13      	ldr	r3, [pc, #76]	; (8001168 <ReturnTimeElapsed+0x70>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	e00a      	b.n	800113a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001124:	4b11      	ldr	r3, [pc, #68]	; (800116c <ReturnTimeElapsed+0x74>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001130:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <ReturnTimeElapsed+0x70>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	683a      	ldr	r2, [r7, #0]
 8001136:	4413      	add	r3, r2
 8001138:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800113a:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <ReturnTimeElapsed+0x78>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	461a      	mov	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	fb02 f303 	mul.w	r3, r2, r3
 8001146:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001148:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <ReturnTimeElapsed+0x7c>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	40d3      	lsrs	r3, r2
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	e001      	b.n	800115a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	b29b      	uxth	r3, r3
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200000c0 	.word	0x200000c0
 800116c:	200001ea 	.word	0x200001ea
 8001170:	200001e9 	.word	0x200001e9
 8001174:	200001e8 	.word	0x200001e8

08001178 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d108      	bne.n	800119a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001188:	f7ff fdc2 	bl	8000d10 <ReadRtcSsrValue>
 800118c:	4602      	mov	r2, r0
 800118e:	4b24      	ldr	r3, [pc, #144]	; (8001220 <RestartWakeupCounter+0xa8>)
 8001190:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001192:	2003      	movs	r0, #3
 8001194:	f002 f99d 	bl	80034d2 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001198:	e03e      	b.n	8001218 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800119a:	88fb      	ldrh	r3, [r7, #6]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d803      	bhi.n	80011a8 <RestartWakeupCounter+0x30>
 80011a0:	4b20      	ldr	r3, [pc, #128]	; (8001224 <RestartWakeupCounter+0xac>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d002      	beq.n	80011ae <RestartWakeupCounter+0x36>
      Value -= 1;
 80011a8:	88fb      	ldrh	r3, [r7, #6]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80011ae:	bf00      	nop
 80011b0:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <RestartWakeupCounter+0xb0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d0f7      	beq.n	80011b0 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80011c0:	4b19      	ldr	r3, [pc, #100]	; (8001228 <RestartWakeupCounter+0xb0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	4b17      	ldr	r3, [pc, #92]	; (8001228 <RestartWakeupCounter+0xb0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80011d4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <RestartWakeupCounter+0xb4>)
 80011d8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011dc:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80011de:	2003      	movs	r0, #3
 80011e0:	f002 f985 	bl	80034ee <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <RestartWakeupCounter+0xb8>)
 80011e6:	695b      	ldr	r3, [r3, #20]
 80011e8:	0c1b      	lsrs	r3, r3, #16
 80011ea:	041b      	lsls	r3, r3, #16
 80011ec:	88fa      	ldrh	r2, [r7, #6]
 80011ee:	4910      	ldr	r1, [pc, #64]	; (8001230 <RestartWakeupCounter+0xb8>)
 80011f0:	4313      	orrs	r3, r2
 80011f2:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80011f4:	f7ff fd8c 	bl	8000d10 <ReadRtcSsrValue>
 80011f8:	4602      	mov	r2, r0
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <RestartWakeupCounter+0xa8>)
 80011fc:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 80011fe:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <RestartWakeupCounter+0xb0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	689a      	ldr	r2, [r3, #8]
 8001206:	4b08      	ldr	r3, [pc, #32]	; (8001228 <RestartWakeupCounter+0xb0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001210:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001212:	f3af 8000 	nop.w
  return ;
 8001216:	bf00      	nop
}
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200000c0 	.word	0x200000c0
 8001224:	200001e8 	.word	0x200001e8
 8001228:	200001e4 	.word	0x200001e4
 800122c:	58000800 	.word	0x58000800
 8001230:	40002800 	.word	0x40002800

08001234 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800123a:	4b47      	ldr	r3, [pc, #284]	; (8001358 <RescheduleTimerList+0x124>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001246:	d108      	bne.n	800125a <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001248:	bf00      	nop
 800124a:	4b44      	ldr	r3, [pc, #272]	; (800135c <RescheduleTimerList+0x128>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	f003 0304 	and.w	r3, r3, #4
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1f7      	bne.n	800124a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800125a:	4b40      	ldr	r3, [pc, #256]	; (800135c <RescheduleTimerList+0x128>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	689a      	ldr	r2, [r3, #8]
 8001262:	4b3e      	ldr	r3, [pc, #248]	; (800135c <RescheduleTimerList+0x128>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800126c:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800126e:	4b3c      	ldr	r3, [pc, #240]	; (8001360 <RescheduleTimerList+0x12c>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001274:	7bfa      	ldrb	r2, [r7, #15]
 8001276:	493b      	ldr	r1, [pc, #236]	; (8001364 <RescheduleTimerList+0x130>)
 8001278:	4613      	mov	r3, r2
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	4413      	add	r3, r2
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	440b      	add	r3, r1
 8001282:	3308      	adds	r3, #8
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001288:	f7ff ff36 	bl	80010f8 <ReturnTimeElapsed>
 800128c:	4603      	mov	r3, r0
 800128e:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	429a      	cmp	r2, r3
 8001296:	d205      	bcs.n	80012a4 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800129c:	4b32      	ldr	r3, [pc, #200]	; (8001368 <RescheduleTimerList+0x134>)
 800129e:	2201      	movs	r2, #1
 80012a0:	701a      	strb	r2, [r3, #0]
 80012a2:	e04d      	b.n	8001340 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80012a4:	88fb      	ldrh	r3, [r7, #6]
 80012a6:	4a31      	ldr	r2, [pc, #196]	; (800136c <RescheduleTimerList+0x138>)
 80012a8:	8812      	ldrh	r2, [r2, #0]
 80012aa:	b292      	uxth	r2, r2
 80012ac:	4413      	add	r3, r2
 80012ae:	461a      	mov	r2, r3
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d906      	bls.n	80012c4 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80012b6:	4b2d      	ldr	r3, [pc, #180]	; (800136c <RescheduleTimerList+0x138>)
 80012b8:	881b      	ldrh	r3, [r3, #0]
 80012ba:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80012bc:	4b2a      	ldr	r3, [pc, #168]	; (8001368 <RescheduleTimerList+0x134>)
 80012be:	2200      	movs	r2, #0
 80012c0:	701a      	strb	r2, [r3, #0]
 80012c2:	e03d      	b.n	8001340 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	88fb      	ldrh	r3, [r7, #6]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80012ce:	4b26      	ldr	r3, [pc, #152]	; (8001368 <RescheduleTimerList+0x134>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80012d4:	e034      	b.n	8001340 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80012d6:	7bfa      	ldrb	r2, [r7, #15]
 80012d8:	4922      	ldr	r1, [pc, #136]	; (8001364 <RescheduleTimerList+0x130>)
 80012da:	4613      	mov	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	4413      	add	r3, r2
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	440b      	add	r3, r1
 80012e4:	3308      	adds	r3, #8
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	88fb      	ldrh	r3, [r7, #6]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d20a      	bcs.n	8001304 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80012ee:	7bfa      	ldrb	r2, [r7, #15]
 80012f0:	491c      	ldr	r1, [pc, #112]	; (8001364 <RescheduleTimerList+0x130>)
 80012f2:	4613      	mov	r3, r2
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	4413      	add	r3, r2
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	440b      	add	r3, r1
 80012fc:	3308      	adds	r3, #8
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	e013      	b.n	800132c <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001304:	7bfa      	ldrb	r2, [r7, #15]
 8001306:	4917      	ldr	r1, [pc, #92]	; (8001364 <RescheduleTimerList+0x130>)
 8001308:	4613      	mov	r3, r2
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	4413      	add	r3, r2
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	440b      	add	r3, r1
 8001312:	3308      	adds	r3, #8
 8001314:	6819      	ldr	r1, [r3, #0]
 8001316:	88fb      	ldrh	r3, [r7, #6]
 8001318:	7bfa      	ldrb	r2, [r7, #15]
 800131a:	1ac9      	subs	r1, r1, r3
 800131c:	4811      	ldr	r0, [pc, #68]	; (8001364 <RescheduleTimerList+0x130>)
 800131e:	4613      	mov	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	4413      	add	r3, r2
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	4403      	add	r3, r0
 8001328:	3308      	adds	r3, #8
 800132a:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800132c:	7bfa      	ldrb	r2, [r7, #15]
 800132e:	490d      	ldr	r1, [pc, #52]	; (8001364 <RescheduleTimerList+0x130>)
 8001330:	4613      	mov	r3, r2
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	4413      	add	r3, r2
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	440b      	add	r3, r1
 800133a:	3315      	adds	r3, #21
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	2b06      	cmp	r3, #6
 8001344:	d1c7      	bne.n	80012d6 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001346:	89bb      	ldrh	r3, [r7, #12]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff15 	bl	8001178 <RestartWakeupCounter>

  return ;
 800134e:	bf00      	nop
}
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40002800 	.word	0x40002800
 800135c:	200001e4 	.word	0x200001e4
 8001360:	200000bc 	.word	0x200000bc
 8001364:	2000002c 	.word	0x2000002c
 8001368:	200000c4 	.word	0x200000c4
 800136c:	200001ec 	.word	0x200001ec

08001370 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	; 0x28
 8001374:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001376:	f3ef 8310 	mrs	r3, PRIMASK
 800137a:	617b      	str	r3, [r7, #20]
  return(result);
 800137c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001380:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001382:	4b5e      	ldr	r3, [pc, #376]	; (80014fc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	22ca      	movs	r2, #202	; 0xca
 800138a:	625a      	str	r2, [r3, #36]	; 0x24
 800138c:	4b5b      	ldr	r3, [pc, #364]	; (80014fc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2253      	movs	r2, #83	; 0x53
 8001394:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8001396:	4b59      	ldr	r3, [pc, #356]	; (80014fc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	4b57      	ldr	r3, [pc, #348]	; (80014fc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013a8:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80013aa:	4b55      	ldr	r3, [pc, #340]	; (8001500 <HW_TS_RTC_Wakeup_Handler+0x190>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80013b2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80013b6:	4953      	ldr	r1, [pc, #332]	; (8001504 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80013b8:	4613      	mov	r3, r2
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	4413      	add	r3, r2
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	440b      	add	r3, r1
 80013c2:	330c      	adds	r3, #12
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d170      	bne.n	80014ae <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80013cc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80013d0:	494c      	ldr	r1, [pc, #304]	; (8001504 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80013d2:	4613      	mov	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	4413      	add	r3, r2
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	440b      	add	r3, r1
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80013e0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80013e4:	4947      	ldr	r1, [pc, #284]	; (8001504 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80013e6:	4613      	mov	r3, r2
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	4413      	add	r3, r2
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	440b      	add	r3, r1
 80013f0:	3310      	adds	r3, #16
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80013f6:	4b44      	ldr	r3, [pc, #272]	; (8001508 <HW_TS_RTC_Wakeup_Handler+0x198>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d04e      	beq.n	800149e <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001400:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001404:	493f      	ldr	r1, [pc, #252]	; (8001504 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001406:	4613      	mov	r3, r2
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4413      	add	r3, r2
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	440b      	add	r3, r1
 8001410:	330d      	adds	r3, #13
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b01      	cmp	r3, #1
 8001418:	d125      	bne.n	8001466 <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 800141a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800141e:	2101      	movs	r1, #1
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff fde5 	bl	8000ff0 <UnlinkTimer>
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001430:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001434:	4933      	ldr	r1, [pc, #204]	; (8001504 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001436:	4613      	mov	r3, r2
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	4413      	add	r3, r2
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	440b      	add	r3, r1
 8001440:	3304      	adds	r3, #4
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001448:	4611      	mov	r1, r2
 800144a:	4618      	mov	r0, r3
 800144c:	f000 fa40 	bl	80018d0 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001450:	4b2a      	ldr	r3, [pc, #168]	; (80014fc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	22ca      	movs	r2, #202	; 0xca
 8001458:	625a      	str	r2, [r3, #36]	; 0x24
 800145a:	4b28      	ldr	r3, [pc, #160]	; (80014fc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2253      	movs	r2, #83	; 0x53
 8001462:	625a      	str	r2, [r3, #36]	; 0x24
 8001464:	e013      	b.n	800148e <HW_TS_RTC_Wakeup_Handler+0x11e>
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001470:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001474:	4618      	mov	r0, r3
 8001476:	f000 f9a1 	bl	80017bc <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800147a:	4b20      	ldr	r3, [pc, #128]	; (80014fc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	22ca      	movs	r2, #202	; 0xca
 8001482:	625a      	str	r2, [r3, #36]	; 0x24
 8001484:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2253      	movs	r2, #83	; 0x53
 800148c:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 800148e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001492:	69fa      	ldr	r2, [r7, #28]
 8001494:	4619      	mov	r1, r3
 8001496:	69b8      	ldr	r0, [r7, #24]
 8001498:	f000 faa0 	bl	80019dc <HW_TS_RTC_Int_AppNot>
 800149c:	e024      	b.n	80014e8 <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 800149e:	f7ff fec9 	bl	8001234 <RescheduleTimerList>
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	f383 8810 	msr	PRIMASK, r3
 80014ac:	e01c      	b.n	80014e8 <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80014ae:	bf00      	nop
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d0f7      	beq.n	80014b0 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80014c0:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80014d4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80014d6:	4b0d      	ldr	r3, [pc, #52]	; (800150c <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80014d8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80014e8:	4b04      	ldr	r3, [pc, #16]	; (80014fc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	22ff      	movs	r2, #255	; 0xff
 80014f0:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 80014f2:	bf00      	nop
}
 80014f4:	3728      	adds	r7, #40	; 0x28
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200001e4 	.word	0x200001e4
 8001500:	200000bc 	.word	0x200000bc
 8001504:	2000002c 	.word	0x2000002c
 8001508:	200000c4 	.word	0x200000c4
 800150c:	58000800 	.word	0x58000800

08001510 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	6039      	str	r1, [r7, #0]
 800151a:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 800151c:	4a61      	ldr	r2, [pc, #388]	; (80016a4 <HW_TS_Init+0x194>)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001522:	4b60      	ldr	r3, [pc, #384]	; (80016a4 <HW_TS_Init+0x194>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	22ca      	movs	r2, #202	; 0xca
 800152a:	625a      	str	r2, [r3, #36]	; 0x24
 800152c:	4b5d      	ldr	r3, [pc, #372]	; (80016a4 <HW_TS_Init+0x194>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2253      	movs	r2, #83	; 0x53
 8001534:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001536:	4b5c      	ldr	r3, [pc, #368]	; (80016a8 <HW_TS_Init+0x198>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	4a5b      	ldr	r2, [pc, #364]	; (80016a8 <HW_TS_Init+0x198>)
 800153c:	f043 0320 	orr.w	r3, r3, #32
 8001540:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001542:	4b59      	ldr	r3, [pc, #356]	; (80016a8 <HW_TS_Init+0x198>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	b2db      	uxtb	r3, r3
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	b2db      	uxtb	r3, r3
 800154e:	f1c3 0304 	rsb	r3, r3, #4
 8001552:	b2da      	uxtb	r2, r3
 8001554:	4b55      	ldr	r3, [pc, #340]	; (80016ac <HW_TS_Init+0x19c>)
 8001556:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001558:	4b53      	ldr	r3, [pc, #332]	; (80016a8 <HW_TS_Init+0x198>)
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001560:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001564:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	fa92 f2a2 	rbit	r2, r2
 800156c:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	fab2 f282 	clz	r2, r2
 8001574:	b2d2      	uxtb	r2, r2
 8001576:	40d3      	lsrs	r3, r2
 8001578:	b2db      	uxtb	r3, r3
 800157a:	3301      	adds	r3, #1
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4b4c      	ldr	r3, [pc, #304]	; (80016b0 <HW_TS_Init+0x1a0>)
 8001580:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001582:	4b49      	ldr	r3, [pc, #292]	; (80016a8 <HW_TS_Init+0x198>)
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	b29b      	uxth	r3, r3
 8001588:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800158c:	b29b      	uxth	r3, r3
 800158e:	3301      	adds	r3, #1
 8001590:	b29a      	uxth	r2, r3
 8001592:	4b48      	ldr	r3, [pc, #288]	; (80016b4 <HW_TS_Init+0x1a4>)
 8001594:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001596:	4b47      	ldr	r3, [pc, #284]	; (80016b4 <HW_TS_Init+0x1a4>)
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	3b01      	subs	r3, #1
 800159c:	4a44      	ldr	r2, [pc, #272]	; (80016b0 <HW_TS_Init+0x1a0>)
 800159e:	7812      	ldrb	r2, [r2, #0]
 80015a0:	fb02 f303 	mul.w	r3, r2, r3
 80015a4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80015a8:	4a40      	ldr	r2, [pc, #256]	; (80016ac <HW_TS_Init+0x19c>)
 80015aa:	7812      	ldrb	r2, [r2, #0]
 80015ac:	40d3      	lsrs	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d904      	bls.n	80015c4 <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80015ba:	4b3f      	ldr	r3, [pc, #252]	; (80016b8 <HW_TS_Init+0x1a8>)
 80015bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015c0:	801a      	strh	r2, [r3, #0]
 80015c2:	e003      	b.n	80015cc <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	4b3b      	ldr	r3, [pc, #236]	; (80016b8 <HW_TS_Init+0x1a8>)
 80015ca:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80015cc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80015d0:	f7ff fb8c 	bl	8000cec <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80015d4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80015d8:	f7ff fb74 	bl	8000cc4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d143      	bne.n	800166a <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80015e2:	4b36      	ldr	r3, [pc, #216]	; (80016bc <HW_TS_Init+0x1ac>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80015e8:	4b35      	ldr	r3, [pc, #212]	; (80016c0 <HW_TS_Init+0x1b0>)
 80015ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015ee:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80015f0:	2300      	movs	r3, #0
 80015f2:	75fb      	strb	r3, [r7, #23]
 80015f4:	e00c      	b.n	8001610 <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80015f6:	7dfa      	ldrb	r2, [r7, #23]
 80015f8:	4932      	ldr	r1, [pc, #200]	; (80016c4 <HW_TS_Init+0x1b4>)
 80015fa:	4613      	mov	r3, r2
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	4413      	add	r3, r2
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	440b      	add	r3, r1
 8001604:	330c      	adds	r3, #12
 8001606:	2200      	movs	r2, #0
 8001608:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800160a:	7dfb      	ldrb	r3, [r7, #23]
 800160c:	3301      	adds	r3, #1
 800160e:	75fb      	strb	r3, [r7, #23]
 8001610:	7dfb      	ldrb	r3, [r7, #23]
 8001612:	2b05      	cmp	r3, #5
 8001614:	d9ef      	bls.n	80015f6 <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001616:	4b2c      	ldr	r3, [pc, #176]	; (80016c8 <HW_TS_Init+0x1b8>)
 8001618:	2206      	movs	r2, #6
 800161a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 800161c:	4b21      	ldr	r3, [pc, #132]	; (80016a4 <HW_TS_Init+0x194>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <HW_TS_Init+0x194>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800162e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001630:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <HW_TS_Init+0x194>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	b2da      	uxtb	r2, r3
 800163a:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <HW_TS_Init+0x194>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001644:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001646:	4b21      	ldr	r3, [pc, #132]	; (80016cc <HW_TS_Init+0x1bc>)
 8001648:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800164c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800164e:	2003      	movs	r0, #3
 8001650:	f001 ff4d 	bl	80034ee <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001654:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <HW_TS_Init+0x194>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <HW_TS_Init+0x194>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	e00a      	b.n	8001680 <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <HW_TS_Init+0x194>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001676:	2b00      	cmp	r3, #0
 8001678:	d002      	beq.n	8001680 <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800167a:	2003      	movs	r0, #3
 800167c:	f001 ff29 	bl	80034d2 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <HW_TS_Init+0x194>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	22ff      	movs	r2, #255	; 0xff
 8001688:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800168a:	2200      	movs	r2, #0
 800168c:	2103      	movs	r1, #3
 800168e:	2003      	movs	r0, #3
 8001690:	f001 fedd 	bl	800344e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001694:	2003      	movs	r0, #3
 8001696:	f001 fef4 	bl	8003482 <HAL_NVIC_EnableIRQ>

  return;
 800169a:	bf00      	nop
}
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200001e4 	.word	0x200001e4
 80016a8:	40002800 	.word	0x40002800
 80016ac:	200001e8 	.word	0x200001e8
 80016b0:	200001e9 	.word	0x200001e9
 80016b4:	200001ea 	.word	0x200001ea
 80016b8:	200001ec 	.word	0x200001ec
 80016bc:	200000c4 	.word	0x200000c4
 80016c0:	200000c0 	.word	0x200000c0
 80016c4:	2000002c 	.word	0x2000002c
 80016c8:	200000bc 	.word	0x200000bc
 80016cc:	58000800 	.word	0x58000800

080016d0 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b08b      	sub	sp, #44	; 0x2c
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	4613      	mov	r3, r2
 80016de:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016e6:	f3ef 8310 	mrs	r3, PRIMASK
 80016ea:	61fb      	str	r3, [r7, #28]
  return(result);
 80016ec:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80016ee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80016f0:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80016f2:	e004      	b.n	80016fe <HW_TS_Create+0x2e>
  {
    loop++;
 80016f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016f8:	3301      	adds	r3, #1
 80016fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80016fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001702:	2b05      	cmp	r3, #5
 8001704:	d80c      	bhi.n	8001720 <HW_TS_Create+0x50>
 8001706:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800170a:	492b      	ldr	r1, [pc, #172]	; (80017b8 <HW_TS_Create+0xe8>)
 800170c:	4613      	mov	r3, r2
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	4413      	add	r3, r2
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	440b      	add	r3, r1
 8001716:	330c      	adds	r3, #12
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	b2db      	uxtb	r3, r3
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1e9      	bne.n	80016f4 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001720:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001724:	2b06      	cmp	r3, #6
 8001726:	d037      	beq.n	8001798 <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001728:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800172c:	4922      	ldr	r1, [pc, #136]	; (80017b8 <HW_TS_Create+0xe8>)
 800172e:	4613      	mov	r3, r2
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4413      	add	r3, r2
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	440b      	add	r3, r1
 8001738:	330c      	adds	r3, #12
 800173a:	2201      	movs	r2, #1
 800173c:	701a      	strb	r2, [r3, #0]
 800173e:	6a3b      	ldr	r3, [r7, #32]
 8001740:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001748:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800174c:	491a      	ldr	r1, [pc, #104]	; (80017b8 <HW_TS_Create+0xe8>)
 800174e:	4613      	mov	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4413      	add	r3, r2
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	440b      	add	r3, r1
 8001758:	3310      	adds	r3, #16
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800175e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001762:	4915      	ldr	r1, [pc, #84]	; (80017b8 <HW_TS_Create+0xe8>)
 8001764:	4613      	mov	r3, r2
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	4413      	add	r3, r2
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	440b      	add	r3, r1
 800176e:	330d      	adds	r3, #13
 8001770:	79fa      	ldrb	r2, [r7, #7]
 8001772:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001774:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001778:	490f      	ldr	r1, [pc, #60]	; (80017b8 <HW_TS_Create+0xe8>)
 800177a:	4613      	mov	r3, r2
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4413      	add	r3, r2
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	440b      	add	r3, r1
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800178e:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001790:	2300      	movs	r3, #0
 8001792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001796:	e007      	b.n	80017a8 <HW_TS_Create+0xd8>
 8001798:	6a3b      	ldr	r3, [r7, #32]
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80017a2:	2301      	movs	r3, #1
 80017a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80017a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	372c      	adds	r7, #44	; 0x2c
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	2000002c 	.word	0x2000002c

080017bc <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017c6:	f3ef 8310 	mrs	r3, PRIMASK
 80017ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80017cc:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80017ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80017d0:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80017d2:	2003      	movs	r0, #3
 80017d4:	f001 fe63 	bl	800349e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80017d8:	4b37      	ldr	r3, [pc, #220]	; (80018b8 <HW_TS_Stop+0xfc>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	22ca      	movs	r2, #202	; 0xca
 80017e0:	625a      	str	r2, [r3, #36]	; 0x24
 80017e2:	4b35      	ldr	r3, [pc, #212]	; (80018b8 <HW_TS_Stop+0xfc>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2253      	movs	r2, #83	; 0x53
 80017ea:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80017ec:	79fa      	ldrb	r2, [r7, #7]
 80017ee:	4933      	ldr	r1, [pc, #204]	; (80018bc <HW_TS_Stop+0x100>)
 80017f0:	4613      	mov	r3, r2
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	4413      	add	r3, r2
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	440b      	add	r3, r1
 80017fa:	330c      	adds	r3, #12
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d148      	bne.n	8001896 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	2100      	movs	r1, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fbf1 	bl	8000ff0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800180e:	4b2c      	ldr	r3, [pc, #176]	; (80018c0 <HW_TS_Stop+0x104>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001814:	7cfb      	ldrb	r3, [r7, #19]
 8001816:	2b06      	cmp	r3, #6
 8001818:	d135      	bne.n	8001886 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800181a:	4b2a      	ldr	r3, [pc, #168]	; (80018c4 <HW_TS_Stop+0x108>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001826:	d108      	bne.n	800183a <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001828:	bf00      	nop
 800182a:	4b23      	ldr	r3, [pc, #140]	; (80018b8 <HW_TS_Stop+0xfc>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	f003 0304 	and.w	r3, r3, #4
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f7      	bne.n	800182a <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800183a:	4b1f      	ldr	r3, [pc, #124]	; (80018b8 <HW_TS_Stop+0xfc>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	689a      	ldr	r2, [r3, #8]
 8001842:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <HW_TS_Stop+0xfc>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800184c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800184e:	bf00      	nop
 8001850:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <HW_TS_Stop+0xfc>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0f7      	beq.n	8001850 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001860:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <HW_TS_Stop+0xfc>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	b2da      	uxtb	r2, r3
 800186a:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <HW_TS_Stop+0xfc>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001874:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001876:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <HW_TS_Stop+0x10c>)
 8001878:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800187c:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800187e:	2003      	movs	r0, #3
 8001880:	f001 fe35 	bl	80034ee <HAL_NVIC_ClearPendingIRQ>
 8001884:	e007      	b.n	8001896 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001886:	4b11      	ldr	r3, [pc, #68]	; (80018cc <HW_TS_Stop+0x110>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	b2db      	uxtb	r3, r3
 800188c:	7cfa      	ldrb	r2, [r7, #19]
 800188e:	429a      	cmp	r2, r3
 8001890:	d001      	beq.n	8001896 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 8001892:	f7ff fccf 	bl	8001234 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001896:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <HW_TS_Stop+0xfc>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	22ff      	movs	r2, #255	; 0xff
 800189e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80018a0:	2003      	movs	r0, #3
 80018a2:	f001 fdee 	bl	8003482 <HAL_NVIC_EnableIRQ>
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80018b0:	bf00      	nop
}
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	200001e4 	.word	0x200001e4
 80018bc:	2000002c 	.word	0x2000002c
 80018c0:	200000bc 	.word	0x200000bc
 80018c4:	40002800 	.word	0x40002800
 80018c8:	58000800 	.word	0x58000800
 80018cc:	200000bd 	.word	0x200000bd

080018d0 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	6039      	str	r1, [r7, #0]
 80018da:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80018dc:	79fa      	ldrb	r2, [r7, #7]
 80018de:	493b      	ldr	r1, [pc, #236]	; (80019cc <HW_TS_Start+0xfc>)
 80018e0:	4613      	mov	r3, r2
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	4413      	add	r3, r2
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	440b      	add	r3, r1
 80018ea:	330c      	adds	r3, #12
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d103      	bne.n	80018fc <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff ff60 	bl	80017bc <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018fc:	f3ef 8310 	mrs	r3, PRIMASK
 8001900:	60fb      	str	r3, [r7, #12]
  return(result);
 8001902:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001904:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001906:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001908:	2003      	movs	r0, #3
 800190a:	f001 fdc8 	bl	800349e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800190e:	4b30      	ldr	r3, [pc, #192]	; (80019d0 <HW_TS_Start+0x100>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	22ca      	movs	r2, #202	; 0xca
 8001916:	625a      	str	r2, [r3, #36]	; 0x24
 8001918:	4b2d      	ldr	r3, [pc, #180]	; (80019d0 <HW_TS_Start+0x100>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2253      	movs	r2, #83	; 0x53
 8001920:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001922:	79fa      	ldrb	r2, [r7, #7]
 8001924:	4929      	ldr	r1, [pc, #164]	; (80019cc <HW_TS_Start+0xfc>)
 8001926:	4613      	mov	r3, r2
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	4413      	add	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	440b      	add	r3, r1
 8001930:	330c      	adds	r3, #12
 8001932:	2202      	movs	r2, #2
 8001934:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001936:	79fa      	ldrb	r2, [r7, #7]
 8001938:	4924      	ldr	r1, [pc, #144]	; (80019cc <HW_TS_Start+0xfc>)
 800193a:	4613      	mov	r3, r2
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	4413      	add	r3, r2
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	440b      	add	r3, r1
 8001944:	3308      	adds	r3, #8
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800194a:	79fa      	ldrb	r2, [r7, #7]
 800194c:	491f      	ldr	r1, [pc, #124]	; (80019cc <HW_TS_Start+0xfc>)
 800194e:	4613      	mov	r3, r2
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	4413      	add	r3, r2
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	440b      	add	r3, r1
 8001958:	3304      	adds	r3, #4
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fa9b 	bl	8000e9c <linkTimer>
 8001966:	4603      	mov	r3, r0
 8001968:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800196a:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <HW_TS_Start+0x104>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001970:	4b19      	ldr	r3, [pc, #100]	; (80019d8 <HW_TS_Start+0x108>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	b2db      	uxtb	r3, r3
 8001976:	7c7a      	ldrb	r2, [r7, #17]
 8001978:	429a      	cmp	r2, r3
 800197a:	d002      	beq.n	8001982 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 800197c:	f7ff fc5a 	bl	8001234 <RescheduleTimerList>
 8001980:	e013      	b.n	80019aa <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001982:	79fa      	ldrb	r2, [r7, #7]
 8001984:	4911      	ldr	r1, [pc, #68]	; (80019cc <HW_TS_Start+0xfc>)
 8001986:	4613      	mov	r3, r2
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	4413      	add	r3, r2
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	440b      	add	r3, r1
 8001990:	3308      	adds	r3, #8
 8001992:	6819      	ldr	r1, [r3, #0]
 8001994:	8a7b      	ldrh	r3, [r7, #18]
 8001996:	79fa      	ldrb	r2, [r7, #7]
 8001998:	1ac9      	subs	r1, r1, r3
 800199a:	480c      	ldr	r0, [pc, #48]	; (80019cc <HW_TS_Start+0xfc>)
 800199c:	4613      	mov	r3, r2
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	4413      	add	r3, r2
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	4403      	add	r3, r0
 80019a6:	3308      	adds	r3, #8
 80019a8:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <HW_TS_Start+0x100>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	22ff      	movs	r2, #255	; 0xff
 80019b2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80019b4:	2003      	movs	r0, #3
 80019b6:	f001 fd64 	bl	8003482 <HAL_NVIC_EnableIRQ>
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80019c4:	bf00      	nop
}
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	2000002c 	.word	0x2000002c
 80019d0:	200001e4 	.word	0x200001e4
 80019d4:	200000bc 	.word	0x200000bc
 80019d8:	200000bd 	.word	0x200000bd

080019dc <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	460b      	mov	r3, r1
 80019e6:	607a      	str	r2, [r7, #4]
 80019e8:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4798      	blx	r3

  return;
 80019ee:	bf00      	nop
}
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <LL_AHB2_GRP1_EnableClock>:
{
 80019f6:	b480      	push	{r7}
 80019f8:	b085      	sub	sp, #20
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80019fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4013      	ands	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
}
 8001a1c:	bf00      	nop
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
}
 8001a4e:	bf00      	nop
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001a60:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <MX_I2C1_Init+0x74>)
 8001a62:	4a1c      	ldr	r2, [pc, #112]	; (8001ad4 <MX_I2C1_Init+0x78>)
 8001a64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 8001a66:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <MX_I2C1_Init+0x74>)
 8001a68:	4a1b      	ldr	r2, [pc, #108]	; (8001ad8 <MX_I2C1_Init+0x7c>)
 8001a6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a6c:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <MX_I2C1_Init+0x74>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a72:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <MX_I2C1_Init+0x74>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a78:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <MX_I2C1_Init+0x74>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a7e:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <MX_I2C1_Init+0x74>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <MX_I2C1_Init+0x74>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a8a:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <MX_I2C1_Init+0x74>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a90:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <MX_I2C1_Init+0x74>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a96:	480e      	ldr	r0, [pc, #56]	; (8001ad0 <MX_I2C1_Init+0x74>)
 8001a98:	f001 fefe 	bl	8003898 <HAL_I2C_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001aa2:	f000 fb73 	bl	800218c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4809      	ldr	r0, [pc, #36]	; (8001ad0 <MX_I2C1_Init+0x74>)
 8001aaa:	f002 fb4f 	bl	800414c <HAL_I2CEx_ConfigAnalogFilter>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001ab4:	f000 fb6a 	bl	800218c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ab8:	2100      	movs	r1, #0
 8001aba:	4805      	ldr	r0, [pc, #20]	; (8001ad0 <MX_I2C1_Init+0x74>)
 8001abc:	f002 fb91 	bl	80041e2 <HAL_I2CEx_ConfigDigitalFilter>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001ac6:	f000 fb61 	bl	800218c <Error_Handler>
  }

}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200004c8 	.word	0x200004c8
 8001ad4:	40005400 	.word	0x40005400
 8001ad8:	00300f38 	.word	0x00300f38

08001adc <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8001ae0:	4b1b      	ldr	r3, [pc, #108]	; (8001b50 <MX_I2C3_Init+0x74>)
 8001ae2:	4a1c      	ldr	r2, [pc, #112]	; (8001b54 <MX_I2C3_Init+0x78>)
 8001ae4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00300F38;
 8001ae6:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <MX_I2C3_Init+0x74>)
 8001ae8:	4a1b      	ldr	r2, [pc, #108]	; (8001b58 <MX_I2C3_Init+0x7c>)
 8001aea:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001aec:	4b18      	ldr	r3, [pc, #96]	; (8001b50 <MX_I2C3_Init+0x74>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001af2:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <MX_I2C3_Init+0x74>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001af8:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <MX_I2C3_Init+0x74>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001afe:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <MX_I2C3_Init+0x74>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b04:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <MX_I2C3_Init+0x74>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b0a:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <MX_I2C3_Init+0x74>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b10:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <MX_I2C3_Init+0x74>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001b16:	480e      	ldr	r0, [pc, #56]	; (8001b50 <MX_I2C3_Init+0x74>)
 8001b18:	f001 febe 	bl	8003898 <HAL_I2C_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001b22:	f000 fb33 	bl	800218c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b26:	2100      	movs	r1, #0
 8001b28:	4809      	ldr	r0, [pc, #36]	; (8001b50 <MX_I2C3_Init+0x74>)
 8001b2a:	f002 fb0f 	bl	800414c <HAL_I2CEx_ConfigAnalogFilter>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001b34:	f000 fb2a 	bl	800218c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4805      	ldr	r0, [pc, #20]	; (8001b50 <MX_I2C3_Init+0x74>)
 8001b3c:	f002 fb51 	bl	80041e2 <HAL_I2CEx_ConfigDigitalFilter>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001b46:	f000 fb21 	bl	800218c <Error_Handler>
  }

}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	2000047c 	.word	0x2000047c
 8001b54:	40005c00 	.word	0x40005c00
 8001b58:	00300f38 	.word	0x00300f38

08001b5c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b088      	sub	sp, #32
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 030c 	add.w	r3, r7, #12
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a1d      	ldr	r2, [pc, #116]	; (8001bf0 <HAL_I2C_MspInit+0x94>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d118      	bne.n	8001bb0 <HAL_I2C_MspInit+0x54>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7e:	2002      	movs	r0, #2
 8001b80:	f7ff ff39 	bl	80019f6 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b84:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b88:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b8a:	2312      	movs	r3, #18
 8001b8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b96:	2304      	movs	r3, #4
 8001b98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9a:	f107 030c 	add.w	r3, r7, #12
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4814      	ldr	r0, [pc, #80]	; (8001bf4 <HAL_I2C_MspInit+0x98>)
 8001ba2:	f001 fcb3 	bl	800350c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ba6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001baa:	f7ff ff3d 	bl	8001a28 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001bae:	e01b      	b.n	8001be8 <HAL_I2C_MspInit+0x8c>
  else if(i2cHandle->Instance==I2C3)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a10      	ldr	r2, [pc, #64]	; (8001bf8 <HAL_I2C_MspInit+0x9c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d116      	bne.n	8001be8 <HAL_I2C_MspInit+0x8c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bba:	2004      	movs	r0, #4
 8001bbc:	f7ff ff1b 	bl	80019f6 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bc4:	2312      	movs	r3, #18
 8001bc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001bd0:	2304      	movs	r3, #4
 8001bd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd4:	f107 030c 	add.w	r3, r7, #12
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4808      	ldr	r0, [pc, #32]	; (8001bfc <HAL_I2C_MspInit+0xa0>)
 8001bdc:	f001 fc96 	bl	800350c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001be0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001be4:	f7ff ff20 	bl	8001a28 <LL_APB1_GRP1_EnableClock>
}
 8001be8:	bf00      	nop
 8001bea:	3720      	adds	r7, #32
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40005400 	.word	0x40005400
 8001bf4:	48000400 	.word	0x48000400
 8001bf8:	40005c00 	.word	0x40005c00
 8001bfc:	48000800 	.word	0x48000800

08001c00 <LL_RCC_LSE_SetDriveCapability>:
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c10:	f023 0218 	bic.w	r2, r3, #24
 8001c14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c30:	f001 fa2e 	bl	8003090 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c34:	f000 f846 	bl	8001cc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c38:	f7fe ffd0 	bl	8000bdc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001c3c:	f001 f8ea 	bl	8002e14 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8001c40:	f001 f996 	bl	8002f70 <MX_USB_PCD_Init>
  MX_RF_Init();
 8001c44:	f000 faa9 	bl	800219a <MX_RF_Init>
  MX_RTC_Init();
 8001c48:	f000 fac0 	bl	80021cc <MX_RTC_Init>
  MX_I2C3_Init();
 8001c4c:	f7ff ff46 	bl	8001adc <MX_I2C3_Init>
  MX_SPI1_Init();
 8001c50:	f000 fb42 	bl	80022d8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001c54:	f000 fb7e 	bl	8002354 <MX_SPI2_Init>
  MX_TIM16_Init();
 8001c58:	f001 f866 	bl	8002d28 <MX_TIM16_Init>
  MX_I2C1_Init();
 8001c5c:	f7ff fefe 	bl	8001a5c <MX_I2C1_Init>

  /*
   * MPU9250
   * */

   readByte(WHO_AM_I_MPU9250, &WAI_MPU9250, 1);
 8001c60:	2201      	movs	r2, #1
 8001c62:	4912      	ldr	r1, [pc, #72]	; (8001cac <main+0x80>)
 8001c64:	2075      	movs	r0, #117	; 0x75
 8001c66:	f7fe fded 	bl	8000844 <readByte>

   initMPU9250();
 8001c6a:	f7fe fe45 	bl	80008f8 <initMPU9250>

  /*
   * MAX30100
   * */

   read_byte(reg, &ID_MAX30100);
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <main+0x84>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	4910      	ldr	r1, [pc, #64]	; (8001cb4 <main+0x88>)
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7fe fd9f 	bl	80007b8 <read_byte>

   begin();
 8001c7a:	f7fe fc09 	bl	8000490 <begin>

   UTIL_SEQ_RegTask( 1<< READ_ACC_TASK, UTIL_SEQ_RFU, read_acc );
 8001c7e:	4a0e      	ldr	r2, [pc, #56]	; (8001cb8 <main+0x8c>)
 8001c80:	2100      	movs	r1, #0
 8001c82:	2010      	movs	r0, #16
 8001c84:	f000 fd70 	bl	8002768 <UTIL_SEQ_RegTask>
   UTIL_SEQ_RegTask( 1<< READ_FSR_TASK, UTIL_SEQ_RFU, read_fsr );
 8001c88:	4a0c      	ldr	r2, [pc, #48]	; (8001cbc <main+0x90>)
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	2020      	movs	r0, #32
 8001c8e:	f000 fd6b 	bl	8002768 <UTIL_SEQ_RegTask>
   UTIL_SEQ_RegTask( 1<< READ_PPG_TASK, UTIL_SEQ_RFU, read_ppg );
 8001c92:	4a0b      	ldr	r2, [pc, #44]	; (8001cc0 <main+0x94>)
 8001c94:	2100      	movs	r1, #0
 8001c96:	2040      	movs	r0, #64	; 0x40
 8001c98:	f000 fd66 	bl	8002768 <UTIL_SEQ_RegTask>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */  
  APPE_Init();
 8001c9c:	f7fe fee6 	bl	8000a6c <APPE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001ca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ca4:	f000 fc84 	bl	80025b0 <UTIL_SEQ_Run>
 8001ca8:	e7fa      	b.n	8001ca0 <main+0x74>
 8001caa:	bf00      	nop
 8001cac:	200001ee 	.word	0x200001ee
 8001cb0:	20000004 	.word	0x20000004
 8001cb4:	200001ef 	.word	0x200001ef
 8001cb8:	08001ed9 	.word	0x08001ed9
 8001cbc:	08001e25 	.word	0x08001e25
 8001cc0:	08001f99 	.word	0x08001f99

08001cc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b0ae      	sub	sp, #184	; 0xb8
 8001cc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001cce:	2248      	movs	r2, #72	; 0x48
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f009 fd85 	bl	800b7e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cd8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]
 8001ce8:	615a      	str	r2, [r3, #20]
 8001cea:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cec:	1d3b      	adds	r3, r7, #4
 8001cee:	2250      	movs	r2, #80	; 0x50
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f009 fd75 	bl	800b7e2 <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8001cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d06:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8001d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	f023 0303 	bic.w	r3, r3, #3
 8001d12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	f7ff ff6f 	bl	8001c00 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d22:	4b3f      	ldr	r3, [pc, #252]	; (8001e20 <SystemClock_Config+0x15c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d2a:	4a3d      	ldr	r2, [pc, #244]	; (8001e20 <SystemClock_Config+0x15c>)
 8001d2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d30:	6013      	str	r3, [r2, #0]
 8001d32:	4b3b      	ldr	r3, [pc, #236]	; (8001e20 <SystemClock_Config+0x15c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d3a:	603b      	str	r3, [r7, #0]
 8001d3c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001d3e:	2327      	movs	r3, #39	; 0x27
 8001d40:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d46:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d50:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001d52:	2301      	movs	r3, #1
 8001d54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d58:	2340      	movs	r3, #64	; 0x40
 8001d5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001d64:	2360      	movs	r3, #96	; 0x60
 8001d66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d70:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d74:	4618      	mov	r0, r3
 8001d76:	f002 ff17 	bl	8004ba8 <HAL_RCC_OscConfig>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001d80:	f000 fa04 	bl	800218c <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001d84:	236f      	movs	r3, #111	; 0x6f
 8001d86:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d90:	2300      	movs	r3, #0
 8001d92:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d94:	2300      	movs	r3, #0
 8001d96:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001da0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001da4:	2101      	movs	r1, #1
 8001da6:	4618      	mov	r0, r3
 8001da8:	f003 fa5c 	bl	8005264 <HAL_RCC_ClockConfig>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001db2:	f000 f9eb 	bl	800218c <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8001db6:	f643 130d 	movw	r3, #14605	; 0x390d
 8001dba:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8001dbc:	2318      	movs	r3, #24
 8001dbe:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001dc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dc4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001dc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dca:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001dcc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001dd0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8001dd2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dd6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ddc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001de2:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8001de6:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001de8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001dec:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001dee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001df2:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001df4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001df8:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	4618      	mov	r0, r3
 8001e06:	f003 fe77 	bl	8005af8 <HAL_RCCEx_PeriphCLKConfig>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <SystemClock_Config+0x150>
  {
    Error_Handler();
 8001e10:	f000 f9bc 	bl	800218c <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001e14:	f003 ffe5 	bl	8005de2 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001e18:	bf00      	nop
 8001e1a:	37b8      	adds	r7, #184	; 0xb8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	58000400 	.word	0x58000400

08001e24 <read_fsr>:

/* USER CODE BEGIN 4 */
void read_fsr(void){
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af02      	add	r7, sp, #8
	/*
	 * ADS1115
	 * */
	if(flag_fsr_buff_full == 0x00){
 8001e2a:	4b26      	ldr	r3, [pc, #152]	; (8001ec4 <read_fsr+0xa0>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d145      	bne.n	8001ebe <read_fsr+0x9a>
		ADSwrite[0] = 0x01;
 8001e32:	4b25      	ldr	r3, [pc, #148]	; (8001ec8 <read_fsr+0xa4>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	701a      	strb	r2, [r3, #0]
		ADSwrite[1] = 0xC1;// 11000001
 8001e38:	4b23      	ldr	r3, [pc, #140]	; (8001ec8 <read_fsr+0xa4>)
 8001e3a:	22c1      	movs	r2, #193	; 0xc1
 8001e3c:	705a      	strb	r2, [r3, #1]
		ADSwrite[2] = 0x83; // 10000011
 8001e3e:	4b22      	ldr	r3, [pc, #136]	; (8001ec8 <read_fsr+0xa4>)
 8001e40:	2283      	movs	r2, #131	; 0x83
 8001e42:	709a      	strb	r2, [r3, #2]
		HAL_I2C_Master_Transmit(&hi2c3, ADS1115_ADDRESS<<1,ADSwrite,3,100);
 8001e44:	2364      	movs	r3, #100	; 0x64
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	2303      	movs	r3, #3
 8001e4a:	4a1f      	ldr	r2, [pc, #124]	; (8001ec8 <read_fsr+0xa4>)
 8001e4c:	2190      	movs	r1, #144	; 0x90
 8001e4e:	481f      	ldr	r0, [pc, #124]	; (8001ecc <read_fsr+0xa8>)
 8001e50:	f001 fdb2 	bl	80039b8 <HAL_I2C_Master_Transmit>
		ADSwrite[0] = 0x00;
 8001e54:	4b1c      	ldr	r3, [pc, #112]	; (8001ec8 <read_fsr+0xa4>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(&hi2c3, ADS1115_ADDRESS<<1,ADSwrite,1,100);
 8001e5a:	2364      	movs	r3, #100	; 0x64
 8001e5c:	9300      	str	r3, [sp, #0]
 8001e5e:	2301      	movs	r3, #1
 8001e60:	4a19      	ldr	r2, [pc, #100]	; (8001ec8 <read_fsr+0xa4>)
 8001e62:	2190      	movs	r1, #144	; 0x90
 8001e64:	4819      	ldr	r0, [pc, #100]	; (8001ecc <read_fsr+0xa8>)
 8001e66:	f001 fda7 	bl	80039b8 <HAL_I2C_Master_Transmit>
		HAL_Delay(1);
 8001e6a:	2001      	movs	r0, #1
 8001e6c:	f001 f994 	bl	8003198 <HAL_Delay>
		HAL_I2C_Master_Receive(&hi2c3, ADS1115_ADDRESS<<1,ADSwrite,2,100);
 8001e70:	2364      	movs	r3, #100	; 0x64
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	2302      	movs	r3, #2
 8001e76:	4a14      	ldr	r2, [pc, #80]	; (8001ec8 <read_fsr+0xa4>)
 8001e78:	2190      	movs	r1, #144	; 0x90
 8001e7a:	4814      	ldr	r0, [pc, #80]	; (8001ecc <read_fsr+0xa8>)
 8001e7c:	f001 fe90 	bl	8003ba0 <HAL_I2C_Master_Receive>

		ble_buff_ACC_FSR[0+counter_fsr] = ADSwrite[1];
 8001e80:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <read_fsr+0xac>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	461a      	mov	r2, r3
 8001e86:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <read_fsr+0xa4>)
 8001e88:	7859      	ldrb	r1, [r3, #1]
 8001e8a:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <read_fsr+0xb0>)
 8001e8c:	5499      	strb	r1, [r3, r2]
		ble_buff_ACC_FSR[1+counter_fsr] = ADSwrite[0];
 8001e8e:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <read_fsr+0xac>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	3301      	adds	r3, #1
 8001e94:	4a0c      	ldr	r2, [pc, #48]	; (8001ec8 <read_fsr+0xa4>)
 8001e96:	7811      	ldrb	r1, [r2, #0]
 8001e98:	4a0e      	ldr	r2, [pc, #56]	; (8001ed4 <read_fsr+0xb0>)
 8001e9a:	54d1      	strb	r1, [r2, r3]

		if(counter_fsr == 18){
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <read_fsr+0xac>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b12      	cmp	r3, #18
 8001ea2:	d106      	bne.n	8001eb2 <read_fsr+0x8e>
			counter_fsr=0;
 8001ea4:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <read_fsr+0xac>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	701a      	strb	r2, [r3, #0]
			flag_fsr_buff_full = 0x01;
 8001eaa:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <read_fsr+0xa0>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	701a      	strb	r2, [r3, #0]
	}
	/*
	 * BUFFER --> [0:19]
	 * */
	//HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
}
 8001eb0:	e005      	b.n	8001ebe <read_fsr+0x9a>
			counter_fsr+=2;
 8001eb2:	4b07      	ldr	r3, [pc, #28]	; (8001ed0 <read_fsr+0xac>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	3302      	adds	r3, #2
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <read_fsr+0xac>)
 8001ebc:	701a      	strb	r2, [r3, #0]
}
 8001ebe:	bf00      	nop
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20000358 	.word	0x20000358
 8001ec8:	20000514 	.word	0x20000514
 8001ecc:	2000047c 	.word	0x2000047c
 8001ed0:	20000355 	.word	0x20000355
 8001ed4:	200002c4 	.word	0x200002c4

08001ed8 <read_acc>:

void read_acc(void){
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
	/*
	 * MPU9250
	 * */
	if(flag_acc_buff_full == 0x00){
 8001edc:	4b2a      	ldr	r3, [pc, #168]	; (8001f88 <read_acc+0xb0>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d14f      	bne.n	8001f84 <read_acc+0xac>
		readAccelData(rawData_MPU9250);
 8001ee4:	4829      	ldr	r0, [pc, #164]	; (8001f8c <read_acc+0xb4>)
 8001ee6:	f7fe fcdb 	bl	80008a0 <readAccelData>
		//X
		ble_buff_ACC_FSR[20+counter_acc] = (rawData_MPU9250[0] & 0x00FF);
 8001eea:	4b28      	ldr	r3, [pc, #160]	; (8001f8c <read_acc+0xb4>)
 8001eec:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ef0:	4b27      	ldr	r3, [pc, #156]	; (8001f90 <read_acc+0xb8>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	3314      	adds	r3, #20
 8001ef6:	b2d1      	uxtb	r1, r2
 8001ef8:	4a26      	ldr	r2, [pc, #152]	; (8001f94 <read_acc+0xbc>)
 8001efa:	54d1      	strb	r1, [r2, r3]
		ble_buff_ACC_FSR[21+counter_acc] = ((rawData_MPU9250[0] >> 8) & 0x00FF);
 8001efc:	4b23      	ldr	r3, [pc, #140]	; (8001f8c <read_acc+0xb4>)
 8001efe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f02:	121b      	asrs	r3, r3, #8
 8001f04:	b21a      	sxth	r2, r3
 8001f06:	4b22      	ldr	r3, [pc, #136]	; (8001f90 <read_acc+0xb8>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	3315      	adds	r3, #21
 8001f0c:	b2d1      	uxtb	r1, r2
 8001f0e:	4a21      	ldr	r2, [pc, #132]	; (8001f94 <read_acc+0xbc>)
 8001f10:	54d1      	strb	r1, [r2, r3]
		//Y
		ble_buff_ACC_FSR[60+counter_acc] = (rawData_MPU9250[1] & 0x00FF);
 8001f12:	4b1e      	ldr	r3, [pc, #120]	; (8001f8c <read_acc+0xb4>)
 8001f14:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001f18:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <read_acc+0xb8>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	333c      	adds	r3, #60	; 0x3c
 8001f1e:	b2d1      	uxtb	r1, r2
 8001f20:	4a1c      	ldr	r2, [pc, #112]	; (8001f94 <read_acc+0xbc>)
 8001f22:	54d1      	strb	r1, [r2, r3]
		ble_buff_ACC_FSR[61+counter_acc] = ((rawData_MPU9250[1] >> 8) & 0x00FF);
 8001f24:	4b19      	ldr	r3, [pc, #100]	; (8001f8c <read_acc+0xb4>)
 8001f26:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f2a:	121b      	asrs	r3, r3, #8
 8001f2c:	b21a      	sxth	r2, r3
 8001f2e:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <read_acc+0xb8>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	333d      	adds	r3, #61	; 0x3d
 8001f34:	b2d1      	uxtb	r1, r2
 8001f36:	4a17      	ldr	r2, [pc, #92]	; (8001f94 <read_acc+0xbc>)
 8001f38:	54d1      	strb	r1, [r2, r3]
		//Z
		ble_buff_ACC_FSR[100+counter_acc] = (rawData_MPU9250[2] & 0x00FF);
 8001f3a:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <read_acc+0xb4>)
 8001f3c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001f40:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <read_acc+0xb8>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	3364      	adds	r3, #100	; 0x64
 8001f46:	b2d1      	uxtb	r1, r2
 8001f48:	4a12      	ldr	r2, [pc, #72]	; (8001f94 <read_acc+0xbc>)
 8001f4a:	54d1      	strb	r1, [r2, r3]
		ble_buff_ACC_FSR[101+counter_acc] = ((rawData_MPU9250[2] >> 8) & 0x00FF);
 8001f4c:	4b0f      	ldr	r3, [pc, #60]	; (8001f8c <read_acc+0xb4>)
 8001f4e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f52:	121b      	asrs	r3, r3, #8
 8001f54:	b21a      	sxth	r2, r3
 8001f56:	4b0e      	ldr	r3, [pc, #56]	; (8001f90 <read_acc+0xb8>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	3365      	adds	r3, #101	; 0x65
 8001f5c:	b2d1      	uxtb	r1, r2
 8001f5e:	4a0d      	ldr	r2, [pc, #52]	; (8001f94 <read_acc+0xbc>)
 8001f60:	54d1      	strb	r1, [r2, r3]

		if(counter_acc == 38){
 8001f62:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <read_acc+0xb8>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b26      	cmp	r3, #38	; 0x26
 8001f68:	d106      	bne.n	8001f78 <read_acc+0xa0>
			counter_acc = 0;
 8001f6a:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <read_acc+0xb8>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	701a      	strb	r2, [r3, #0]
			flag_acc_buff_full = 0x01;
 8001f70:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <read_acc+0xb0>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	701a      	strb	r2, [r3, #0]
			counter_acc+=2;
	}
	/*
	 * BUFFER --> [20:139]
	 * */
}
 8001f76:	e005      	b.n	8001f84 <read_acc+0xac>
			counter_acc+=2;
 8001f78:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <read_acc+0xb8>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	3302      	adds	r3, #2
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	4b03      	ldr	r3, [pc, #12]	; (8001f90 <read_acc+0xb8>)
 8001f82:	701a      	strb	r2, [r3, #0]
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20000357 	.word	0x20000357
 8001f8c:	200001f0 	.word	0x200001f0
 8001f90:	20000353 	.word	0x20000353
 8001f94:	200002c4 	.word	0x200002c4

08001f98 <read_ppg>:


void read_ppg(void){
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
	/*
	 * MAX30100
	 * */
	if(flag_ppg_buff_full == 0){
 8001f9c:	4b16      	ldr	r3, [pc, #88]	; (8001ff8 <read_ppg+0x60>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d126      	bne.n	8001ff2 <read_ppg+0x5a>
		readFIFO(&RED, &IR);
 8001fa4:	4915      	ldr	r1, [pc, #84]	; (8001ffc <read_ppg+0x64>)
 8001fa6:	4816      	ldr	r0, [pc, #88]	; (8002000 <read_ppg+0x68>)
 8001fa8:	f7fe fbb6 	bl	8000718 <readFIFO>

		//ble_buffer[140+counter_ppg] = (RED & 0x00FF);
		//ble_buffer[141+counter_ppg] = ((RED >> 8) & 0x00FF);

		ble_buff_PPG[0+counter_ppg] = (IR & 0x00FF);
 8001fac:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <read_ppg+0x64>)
 8001fae:	8819      	ldrh	r1, [r3, #0]
 8001fb0:	4b14      	ldr	r3, [pc, #80]	; (8002004 <read_ppg+0x6c>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	b2c9      	uxtb	r1, r1
 8001fb8:	4b13      	ldr	r3, [pc, #76]	; (8002008 <read_ppg+0x70>)
 8001fba:	5499      	strb	r1, [r3, r2]
		ble_buff_PPG[1+counter_ppg] = ((IR >> 8) & 0x00FF);
 8001fbc:	4b0f      	ldr	r3, [pc, #60]	; (8001ffc <read_ppg+0x64>)
 8001fbe:	881b      	ldrh	r3, [r3, #0]
 8001fc0:	0a1b      	lsrs	r3, r3, #8
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <read_ppg+0x6c>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	b2d1      	uxtb	r1, r2
 8001fcc:	4a0e      	ldr	r2, [pc, #56]	; (8002008 <read_ppg+0x70>)
 8001fce:	54d1      	strb	r1, [r2, r3]

		if(counter_ppg == 198){
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <read_ppg+0x6c>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	2bc6      	cmp	r3, #198	; 0xc6
 8001fd6:	d106      	bne.n	8001fe6 <read_ppg+0x4e>
			counter_ppg = 0;
 8001fd8:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <read_ppg+0x6c>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	701a      	strb	r2, [r3, #0]
			flag_ppg_buff_full = 0x01;
 8001fde:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <read_ppg+0x60>)
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	701a      	strb	r2, [r3, #0]
	}
	/*
	 * BUFFER --> [140:539]
	 * */
	//HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
}
 8001fe4:	e005      	b.n	8001ff2 <read_ppg+0x5a>
			counter_ppg+=2;
 8001fe6:	4b07      	ldr	r3, [pc, #28]	; (8002004 <read_ppg+0x6c>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	3302      	adds	r3, #2
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	4b05      	ldr	r3, [pc, #20]	; (8002004 <read_ppg+0x6c>)
 8001ff0:	701a      	strb	r2, [r3, #0]
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000356 	.word	0x20000356
 8001ffc:	200001f6 	.word	0x200001f6
 8002000:	200001f8 	.word	0x200001f8
 8002004:	20000354 	.word	0x20000354
 8002008:	200001fc 	.word	0x200001fc

0800200c <get_buffer_values>:

void get_buffer_values(uint8_t* buff){
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
	/*
	 * buffer_select
	 * 0 --> ACC and FSR - 140 Bytes
	 * 1 --> PPG - 200 Bytes
	 * */
	if(buffer_select == 0x00){
 8002014:	4b2e      	ldr	r3, [pc, #184]	; (80020d0 <get_buffer_values+0xc4>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d12a      	bne.n	8002072 <get_buffer_values+0x66>
		buffer_select = 0x01; //select buffer for the next transmission
 800201c:	4b2c      	ldr	r3, [pc, #176]	; (80020d0 <get_buffer_values+0xc4>)
 800201e:	2201      	movs	r2, #1
 8002020:	701a      	strb	r2, [r3, #0]
		// preamble for acc and fsr data
		buff[0] = 0x00;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]
		buff[1] = 0xFA;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3301      	adds	r3, #1
 800202c:	22fa      	movs	r2, #250	; 0xfa
 800202e:	701a      	strb	r2, [r3, #0]
		buff[2] = 0xAF;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3302      	adds	r3, #2
 8002034:	22af      	movs	r2, #175	; 0xaf
 8002036:	701a      	strb	r2, [r3, #0]
		buff[3] = 0x00;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3303      	adds	r3, #3
 800203c:	2200      	movs	r2, #0
 800203e:	701a      	strb	r2, [r3, #0]
		// buffer fulfill
		for(int i = 0; i < 140; i++)
 8002040:	2300      	movs	r3, #0
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	e00b      	b.n	800205e <get_buffer_values+0x52>
				buff[i+4] = ble_buff_ACC_FSR[i];
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	3304      	adds	r3, #4
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	4413      	add	r3, r2
 800204e:	4921      	ldr	r1, [pc, #132]	; (80020d4 <get_buffer_values+0xc8>)
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	440a      	add	r2, r1
 8002054:	7812      	ldrb	r2, [r2, #0]
 8002056:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 140; i++)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	3301      	adds	r3, #1
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2b8b      	cmp	r3, #139	; 0x8b
 8002062:	ddf0      	ble.n	8002046 <get_buffer_values+0x3a>
		// enable read
		flag_acc_buff_full = 0x00;
 8002064:	4b1c      	ldr	r3, [pc, #112]	; (80020d8 <get_buffer_values+0xcc>)
 8002066:	2200      	movs	r2, #0
 8002068:	701a      	strb	r2, [r3, #0]
		flag_fsr_buff_full = 0x00;
 800206a:	4b1c      	ldr	r3, [pc, #112]	; (80020dc <get_buffer_values+0xd0>)
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]
 8002070:	e026      	b.n	80020c0 <get_buffer_values+0xb4>
	}else{
		buffer_select = 0x00; //select buffer for the next transmission
 8002072:	4b17      	ldr	r3, [pc, #92]	; (80020d0 <get_buffer_values+0xc4>)
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
		// preamble for ppg data
		buff[0] = 0x00;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	701a      	strb	r2, [r3, #0]
		buff[1] = 0xAF;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3301      	adds	r3, #1
 8002082:	22af      	movs	r2, #175	; 0xaf
 8002084:	701a      	strb	r2, [r3, #0]
		buff[2] = 0xFA;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3302      	adds	r3, #2
 800208a:	22fa      	movs	r2, #250	; 0xfa
 800208c:	701a      	strb	r2, [r3, #0]
		buff[3] = 0x00;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3303      	adds	r3, #3
 8002092:	2200      	movs	r2, #0
 8002094:	701a      	strb	r2, [r3, #0]
		// buffer fulfill
		for(int i = 0; i < 200; i++)
 8002096:	2300      	movs	r3, #0
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	e00b      	b.n	80020b4 <get_buffer_values+0xa8>
				buff[i+4] = ble_buff_PPG[i];
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	3304      	adds	r3, #4
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	4413      	add	r3, r2
 80020a4:	490e      	ldr	r1, [pc, #56]	; (80020e0 <get_buffer_values+0xd4>)
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	440a      	add	r2, r1
 80020aa:	7812      	ldrb	r2, [r2, #0]
 80020ac:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 200; i++)
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	3301      	adds	r3, #1
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	2bc7      	cmp	r3, #199	; 0xc7
 80020b8:	ddf0      	ble.n	800209c <get_buffer_values+0x90>
		// enable read
		flag_ppg_buff_full = 0x00;
 80020ba:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <get_buffer_values+0xd8>)
 80020bc:	2200      	movs	r2, #0
 80020be:	701a      	strb	r2, [r3, #0]
	}
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80020c0:	2102      	movs	r1, #2
 80020c2:	4809      	ldr	r0, [pc, #36]	; (80020e8 <get_buffer_values+0xdc>)
 80020c4:	f001 fbaa 	bl	800381c <HAL_GPIO_TogglePin>
}
 80020c8:	bf00      	nop
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	20000359 	.word	0x20000359
 80020d4:	200002c4 	.word	0x200002c4
 80020d8:	20000357 	.word	0x20000357
 80020dc:	20000358 	.word	0x20000358
 80020e0:	200001fc 	.word	0x200001fc
 80020e4:	20000356 	.word	0x20000356
 80020e8:	48000400 	.word	0x48000400

080020ec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  if(htim == &htim16){
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a21      	ldr	r2, [pc, #132]	; (800217c <HAL_TIM_PeriodElapsedCallback+0x90>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d13b      	bne.n	8002174 <HAL_TIM_PeriodElapsedCallback+0x88>
	  if(APP_BLE_Get_Server_Connection_Status() == APP_BLE_CONNECTED_SERVER){
 80020fc:	f008 fe7c 	bl	800adf8 <APP_BLE_Get_Server_Connection_Status>
 8002100:	4603      	mov	r3, r0
 8002102:	2b05      	cmp	r3, #5
 8002104:	d136      	bne.n	8002174 <HAL_TIM_PeriodElapsedCallback+0x88>
		  // Increment prescaler for fsr and acc
		  prescaler_fsr++;
 8002106:	4b1e      	ldr	r3, [pc, #120]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	3301      	adds	r3, #1
 800210c:	b2da      	uxtb	r2, r3
 800210e:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002110:	701a      	strb	r2, [r3, #0]
		  prescaler_acc++;
 8002112:	4b1c      	ldr	r3, [pc, #112]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	3301      	adds	r3, #1
 8002118:	b2da      	uxtb	r2, r3
 800211a:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800211c:	701a      	strb	r2, [r3, #0]
		  prescaler_send_pack++;
 800211e:	4b1a      	ldr	r3, [pc, #104]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	3301      	adds	r3, #1
 8002124:	b2da      	uxtb	r2, r3
 8002126:	4b18      	ldr	r3, [pc, #96]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002128:	701a      	strb	r2, [r3, #0]
		  // read ppg sensor - 100Hz
		  UTIL_SEQ_SetTask(1 << READ_PPG_TASK, CFG_SCH_PRIO_0);
 800212a:	2100      	movs	r1, #0
 800212c:	2040      	movs	r0, #64	; 0x40
 800212e:	f000 fb3b 	bl	80027a8 <UTIL_SEQ_SetTask>
		  // read fsr sensor - 10Hz
		  if(prescaler_fsr == 10){
 8002132:	4b13      	ldr	r3, [pc, #76]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b0a      	cmp	r3, #10
 8002138:	d106      	bne.n	8002148 <HAL_TIM_PeriodElapsedCallback+0x5c>
			  prescaler_fsr = 0;
 800213a:	4b11      	ldr	r3, [pc, #68]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800213c:	2200      	movs	r2, #0
 800213e:	701a      	strb	r2, [r3, #0]
			  UTIL_SEQ_SetTask(1 << READ_FSR_TASK, CFG_SCH_PRIO_0);
 8002140:	2100      	movs	r1, #0
 8002142:	2020      	movs	r0, #32
 8002144:	f000 fb30 	bl	80027a8 <UTIL_SEQ_SetTask>
		  }
		  // read acc sensor - 20Hz
		  if(prescaler_acc == 5){
 8002148:	4b0e      	ldr	r3, [pc, #56]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b05      	cmp	r3, #5
 800214e:	d106      	bne.n	800215e <HAL_TIM_PeriodElapsedCallback+0x72>
			  prescaler_acc = 0;
 8002150:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002152:	2200      	movs	r2, #0
 8002154:	701a      	strb	r2, [r3, #0]
			  UTIL_SEQ_SetTask(1 << READ_ACC_TASK, CFG_SCH_PRIO_0);
 8002156:	2100      	movs	r1, #0
 8002158:	2010      	movs	r0, #16
 800215a:	f000 fb25 	bl	80027a8 <UTIL_SEQ_SetTask>
		  }
		  if(prescaler_send_pack == 50){
 800215e:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b32      	cmp	r3, #50	; 0x32
 8002164:	d106      	bne.n	8002174 <HAL_TIM_PeriodElapsedCallback+0x88>
			  UTIL_SEQ_SetTask(1 << CFG_MY_TASK_NOTIFY_DATA, CFG_SCH_PRIO_0);
 8002166:	2100      	movs	r1, #0
 8002168:	2008      	movs	r0, #8
 800216a:	f000 fb1d 	bl	80027a8 <UTIL_SEQ_SetTask>
			  prescaler_send_pack = 0;
 800216e:	4b06      	ldr	r3, [pc, #24]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002170:	2200      	movs	r2, #0
 8002172:	701a      	strb	r2, [r3, #0]
  }

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002174:	bf00      	nop
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20000604 	.word	0x20000604
 8002180:	20000351 	.word	0x20000351
 8002184:	20000350 	.word	0x20000350
 8002188:	20000352 	.word	0x20000352

0800218c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 800219a:	b480      	push	{r7}
 800219c:	af00      	add	r7, sp, #0

}
 800219e:	bf00      	nop
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80021ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
	...

080021cc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80021d0:	4b10      	ldr	r3, [pc, #64]	; (8002214 <MX_RTC_Init+0x48>)
 80021d2:	4a11      	ldr	r2, [pc, #68]	; (8002218 <MX_RTC_Init+0x4c>)
 80021d4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80021d6:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <MX_RTC_Init+0x48>)
 80021d8:	2200      	movs	r2, #0
 80021da:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80021dc:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <MX_RTC_Init+0x48>)
 80021de:	220f      	movs	r2, #15
 80021e0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80021e2:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <MX_RTC_Init+0x48>)
 80021e4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80021e8:	60da      	str	r2, [r3, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80021ea:	480a      	ldr	r0, [pc, #40]	; (8002214 <MX_RTC_Init+0x48>)
 80021ec:	f003 ff10 	bl	8006010 <HAL_RTC_Init>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_RTC_Init+0x2e>
  {
    Error_Handler();
 80021f6:	f7ff ffc9 	bl	800218c <Error_Handler>
  }
  /** Enable the WakeUp 
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80021fa:	2200      	movs	r2, #0
 80021fc:	2100      	movs	r1, #0
 80021fe:	4805      	ldr	r0, [pc, #20]	; (8002214 <MX_RTC_Init+0x48>)
 8002200:	f003 fff4 	bl	80061ec <HAL_RTCEx_SetWakeUpTimer>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <MX_RTC_Init+0x42>
  {
    Error_Handler();
 800220a:	f7ff ffbf 	bl	800218c <Error_Handler>
  }

}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20000518 	.word	0x20000518
 8002218:	40002800 	.word	0x40002800

0800221c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a04      	ldr	r2, [pc, #16]	; (800223c <HAL_RTC_MspInit+0x20>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d101      	bne.n	8002232 <HAL_RTC_MspInit+0x16>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800222e:	f7ff ffbb 	bl	80021a8 <LL_RCC_EnableRTC>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002232:	bf00      	nop
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40002800 	.word	0x40002800

08002240 <LL_AHB2_GRP1_EnableClock>:
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800224c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800224e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4313      	orrs	r3, r2
 8002256:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800225c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4013      	ands	r3, r2
 8002262:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002264:	68fb      	ldr	r3, [r7, #12]
}
 8002266:	bf00      	nop
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <LL_APB1_GRP1_EnableClock>:
{
 8002272:	b480      	push	{r7}
 8002274:	b085      	sub	sp, #20
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800227a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800227e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002280:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4313      	orrs	r3, r2
 8002288:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800228a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800228e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4013      	ands	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002296:	68fb      	ldr	r3, [r7, #12]
}
 8002298:	bf00      	nop
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80022ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80022bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4013      	ands	r3, r2
 80022c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022c8:	68fb      	ldr	r3, [r7, #12]
}
 80022ca:	bf00      	nop
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
	...

080022d8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80022dc:	4b1b      	ldr	r3, [pc, #108]	; (800234c <MX_SPI1_Init+0x74>)
 80022de:	4a1c      	ldr	r2, [pc, #112]	; (8002350 <MX_SPI1_Init+0x78>)
 80022e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022e2:	4b1a      	ldr	r3, [pc, #104]	; (800234c <MX_SPI1_Init+0x74>)
 80022e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022ea:	4b18      	ldr	r3, [pc, #96]	; (800234c <MX_SPI1_Init+0x74>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022f0:	4b16      	ldr	r3, [pc, #88]	; (800234c <MX_SPI1_Init+0x74>)
 80022f2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80022f6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80022f8:	4b14      	ldr	r3, [pc, #80]	; (800234c <MX_SPI1_Init+0x74>)
 80022fa:	2202      	movs	r2, #2
 80022fc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80022fe:	4b13      	ldr	r3, [pc, #76]	; (800234c <MX_SPI1_Init+0x74>)
 8002300:	2201      	movs	r2, #1
 8002302:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002304:	4b11      	ldr	r3, [pc, #68]	; (800234c <MX_SPI1_Init+0x74>)
 8002306:	f44f 7200 	mov.w	r2, #512	; 0x200
 800230a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800230c:	4b0f      	ldr	r3, [pc, #60]	; (800234c <MX_SPI1_Init+0x74>)
 800230e:	2228      	movs	r2, #40	; 0x28
 8002310:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002312:	4b0e      	ldr	r3, [pc, #56]	; (800234c <MX_SPI1_Init+0x74>)
 8002314:	2200      	movs	r2, #0
 8002316:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <MX_SPI1_Init+0x74>)
 800231a:	2200      	movs	r2, #0
 800231c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800231e:	4b0b      	ldr	r3, [pc, #44]	; (800234c <MX_SPI1_Init+0x74>)
 8002320:	2200      	movs	r2, #0
 8002322:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002324:	4b09      	ldr	r3, [pc, #36]	; (800234c <MX_SPI1_Init+0x74>)
 8002326:	2207      	movs	r2, #7
 8002328:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800232a:	4b08      	ldr	r3, [pc, #32]	; (800234c <MX_SPI1_Init+0x74>)
 800232c:	2200      	movs	r2, #0
 800232e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <MX_SPI1_Init+0x74>)
 8002332:	2200      	movs	r2, #0
 8002334:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002336:	4805      	ldr	r0, [pc, #20]	; (800234c <MX_SPI1_Init+0x74>)
 8002338:	f003 fff3 	bl	8006322 <HAL_SPI_Init>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002342:	f7ff ff23 	bl	800218c <Error_Handler>
  }

}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	200005a0 	.word	0x200005a0
 8002350:	40013000 	.word	0x40013000

08002354 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8002358:	4b1b      	ldr	r3, [pc, #108]	; (80023c8 <MX_SPI2_Init+0x74>)
 800235a:	4a1c      	ldr	r2, [pc, #112]	; (80023cc <MX_SPI2_Init+0x78>)
 800235c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800235e:	4b1a      	ldr	r3, [pc, #104]	; (80023c8 <MX_SPI2_Init+0x74>)
 8002360:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002364:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002366:	4b18      	ldr	r3, [pc, #96]	; (80023c8 <MX_SPI2_Init+0x74>)
 8002368:	2200      	movs	r2, #0
 800236a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800236c:	4b16      	ldr	r3, [pc, #88]	; (80023c8 <MX_SPI2_Init+0x74>)
 800236e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002372:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002374:	4b14      	ldr	r3, [pc, #80]	; (80023c8 <MX_SPI2_Init+0x74>)
 8002376:	2202      	movs	r2, #2
 8002378:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800237a:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <MX_SPI2_Init+0x74>)
 800237c:	2201      	movs	r2, #1
 800237e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002380:	4b11      	ldr	r3, [pc, #68]	; (80023c8 <MX_SPI2_Init+0x74>)
 8002382:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002386:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002388:	4b0f      	ldr	r3, [pc, #60]	; (80023c8 <MX_SPI2_Init+0x74>)
 800238a:	2228      	movs	r2, #40	; 0x28
 800238c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800238e:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <MX_SPI2_Init+0x74>)
 8002390:	2200      	movs	r2, #0
 8002392:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002394:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <MX_SPI2_Init+0x74>)
 8002396:	2200      	movs	r2, #0
 8002398:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800239a:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <MX_SPI2_Init+0x74>)
 800239c:	2200      	movs	r2, #0
 800239e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80023a0:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <MX_SPI2_Init+0x74>)
 80023a2:	2207      	movs	r2, #7
 80023a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80023a6:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <MX_SPI2_Init+0x74>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80023ac:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <MX_SPI2_Init+0x74>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80023b2:	4805      	ldr	r0, [pc, #20]	; (80023c8 <MX_SPI2_Init+0x74>)
 80023b4:	f003 ffb5 	bl	8006322 <HAL_SPI_Init>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80023be:	f7ff fee5 	bl	800218c <Error_Handler>
  }

}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	2000053c 	.word	0x2000053c
 80023cc:	40003800 	.word	0x40003800

080023d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d8:	f107 030c 	add.w	r3, r7, #12
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	60da      	str	r2, [r3, #12]
 80023e6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a1e      	ldr	r2, [pc, #120]	; (8002468 <HAL_SPI_MspInit+0x98>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d118      	bne.n	8002424 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023f2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80023f6:	f7ff ff55 	bl	80022a4 <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fa:	2001      	movs	r0, #1
 80023fc:	f7ff ff20 	bl	8002240 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002400:	23e0      	movs	r3, #224	; 0xe0
 8002402:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002404:	2302      	movs	r3, #2
 8002406:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002408:	2301      	movs	r3, #1
 800240a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800240c:	2302      	movs	r3, #2
 800240e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002410:	2305      	movs	r3, #5
 8002412:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002414:	f107 030c 	add.w	r3, r7, #12
 8002418:	4619      	mov	r1, r3
 800241a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800241e:	f001 f875 	bl	800350c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002422:	e01c      	b.n	800245e <HAL_SPI_MspInit+0x8e>
  else if(spiHandle->Instance==SPI2)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a10      	ldr	r2, [pc, #64]	; (800246c <HAL_SPI_MspInit+0x9c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d117      	bne.n	800245e <HAL_SPI_MspInit+0x8e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800242e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002432:	f7ff ff1e 	bl	8002272 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002436:	2002      	movs	r0, #2
 8002438:	f7ff ff02 	bl	8002240 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800243c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002440:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002442:	2302      	movs	r3, #2
 8002444:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002446:	2300      	movs	r3, #0
 8002448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244a:	2300      	movs	r3, #0
 800244c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800244e:	2305      	movs	r3, #5
 8002450:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002452:	f107 030c 	add.w	r3, r7, #12
 8002456:	4619      	mov	r1, r3
 8002458:	4805      	ldr	r0, [pc, #20]	; (8002470 <HAL_SPI_MspInit+0xa0>)
 800245a:	f001 f857 	bl	800350c <HAL_GPIO_Init>
}
 800245e:	bf00      	nop
 8002460:	3720      	adds	r7, #32
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40013000 	.word	0x40013000
 800246c:	40003800 	.word	0x40003800
 8002470:	48000400 	.word	0x48000400

08002474 <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8002478:	4b05      	ldr	r3, [pc, #20]	; (8002490 <UTIL_LPM_Init+0x1c>)
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800247e:	4b05      	ldr	r3, [pc, #20]	; (8002494 <UTIL_LPM_Init+0x20>)
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8002484:	bf00      	nop
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	2000035c 	.word	0x2000035c
 8002494:	20000360 	.word	0x20000360

08002498 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8002498:	b480      	push	{r7}
 800249a:	b087      	sub	sp, #28
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024a4:	f3ef 8310 	mrs	r3, PRIMASK
 80024a8:	613b      	str	r3, [r7, #16]
  return(result);
 80024aa:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80024ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80024ae:	b672      	cpsid	i
  
  switch(state)
 80024b0:	78fb      	ldrb	r3, [r7, #3]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d009      	beq.n	80024ca <UTIL_LPM_SetOffMode+0x32>
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d000      	beq.n	80024bc <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 80024ba:	e00e      	b.n	80024da <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 80024bc:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <UTIL_LPM_SetOffMode+0x58>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	4a0a      	ldr	r2, [pc, #40]	; (80024f0 <UTIL_LPM_SetOffMode+0x58>)
 80024c6:	6013      	str	r3, [r2, #0]
      break;
 80024c8:	e007      	b.n	80024da <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	43da      	mvns	r2, r3
 80024ce:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <UTIL_LPM_SetOffMode+0x58>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4013      	ands	r3, r2
 80024d4:	4a06      	ldr	r2, [pc, #24]	; (80024f0 <UTIL_LPM_SetOffMode+0x58>)
 80024d6:	6013      	str	r3, [r2, #0]
      break;
 80024d8:	bf00      	nop
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80024e4:	bf00      	nop
 80024e6:	371c      	adds	r7, #28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	20000360 	.word	0x20000360

080024f4 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024fa:	f3ef 8310 	mrs	r3, PRIMASK
 80024fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8002500:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8002502:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8002504:	b672      	cpsid	i

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8002506:	4b12      	ldr	r3, [pc, #72]	; (8002550 <UTIL_LPM_EnterLowPower+0x5c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d006      	beq.n	800251c <UTIL_LPM_EnterLowPower+0x28>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800250e:	4b11      	ldr	r3, [pc, #68]	; (8002554 <UTIL_LPM_EnterLowPower+0x60>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8002514:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <UTIL_LPM_EnterLowPower+0x60>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	4798      	blx	r3
 800251a:	e010      	b.n	800253e <UTIL_LPM_EnterLowPower+0x4a>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800251c:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <UTIL_LPM_EnterLowPower+0x64>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d006      	beq.n	8002532 <UTIL_LPM_EnterLowPower+0x3e>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8002524:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <UTIL_LPM_EnterLowPower+0x60>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800252a:	4b0a      	ldr	r3, [pc, #40]	; (8002554 <UTIL_LPM_EnterLowPower+0x60>)
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	4798      	blx	r3
 8002530:	e005      	b.n	800253e <UTIL_LPM_EnterLowPower+0x4a>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8002532:	4b08      	ldr	r3, [pc, #32]	; (8002554 <UTIL_LPM_EnterLowPower+0x60>)
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <UTIL_LPM_EnterLowPower+0x60>)
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	4798      	blx	r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8002548:	bf00      	nop
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	2000035c 	.word	0x2000035c
 8002554:	0800b880 	.word	0x0800b880
 8002558:	20000360 	.word	0x20000360

0800255c <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode( void )
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterOffMode */

/* USER CODE END PWR_EnterOffMode */
}
 8002560:	bf00      	nop
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode( void )
{
 800256a:	b480      	push	{r7}
 800256c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitOffMode */

/* USER CODE END PWR_ExitOffMode */
}
 800256e:	bf00      	nop
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode( void )
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterStopMode */

/* USER CODE END PWR_EnterStopMode */
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode( void )
{
 8002586:	b480      	push	{r7}
 8002588:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitStopMode */

/* USER CODE END PWR_ExitStopMode */
}
 800258a:	bf00      	nop
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode( void )
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode */

/* USER CODE END PWR_EnterSleepMode */
}
 8002598:	bf00      	nop
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode( void )
{
 80025a2:	b480      	push	{r7}
 80025a4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode */

/* USER CODE END PWR_ExitSleepMode */
}
 80025a6:	bf00      	nop
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t mask_bm )
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08c      	sub	sp, #48	; 0x30
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80025b8:	4b63      	ldr	r3, [pc, #396]	; (8002748 <UTIL_SEQ_Run+0x198>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= mask_bm;
 80025be:	4b62      	ldr	r3, [pc, #392]	; (8002748 <UTIL_SEQ_Run+0x198>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4013      	ands	r3, r2
 80025c6:	4a60      	ldr	r2, [pc, #384]	; (8002748 <UTIL_SEQ_Run+0x198>)
 80025c8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 80025ca:	e082      	b.n	80026d2 <UTIL_SEQ_Run+0x122>
  {
    counter = 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 80025d0:	e002      	b.n	80025d8 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 80025d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d4:	3301      	adds	r3, #1
 80025d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 80025d8:	4a5c      	ldr	r2, [pc, #368]	; (800274c <UTIL_SEQ_Run+0x19c>)
 80025da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025dc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80025e0:	4b5b      	ldr	r3, [pc, #364]	; (8002750 <UTIL_SEQ_Run+0x1a0>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	401a      	ands	r2, r3
 80025e6:	4b58      	ldr	r3, [pc, #352]	; (8002748 <UTIL_SEQ_Run+0x198>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0f0      	beq.n	80025d2 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 80025f0:	4a56      	ldr	r2, [pc, #344]	; (800274c <UTIL_SEQ_Run+0x19c>)
 80025f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80025f8:	4b55      	ldr	r3, [pc, #340]	; (8002750 <UTIL_SEQ_Run+0x1a0>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	401a      	ands	r2, r3
 80025fe:	4b52      	ldr	r3, [pc, #328]	; (8002748 <UTIL_SEQ_Run+0x198>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4013      	ands	r3, r2
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if (!(TaskPrio[counter].round_robin & current_task_set))
 8002606:	4a51      	ldr	r2, [pc, #324]	; (800274c <UTIL_SEQ_Run+0x19c>)
 8002608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	4413      	add	r3, r2
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	4013      	ands	r3, r2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d106      	bne.n	8002626 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8002618:	4a4c      	ldr	r2, [pc, #304]	; (800274c <UTIL_SEQ_Run+0x19c>)
 800261a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	4413      	add	r3, r2
 8002620:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002624:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = bit_position(current_task_set & TaskPrio[counter].round_robin);
 8002626:	4a49      	ldr	r2, [pc, #292]	; (800274c <UTIL_SEQ_Run+0x19c>)
 8002628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4413      	add	r3, r2
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	4013      	ands	r3, r2
 8002634:	4618      	mov	r0, r3
 8002636:	f000 f97d 	bl	8002934 <bit_position>
 800263a:	4602      	mov	r2, r0
 800263c:	4b45      	ldr	r3, [pc, #276]	; (8002754 <UTIL_SEQ_Run+0x1a4>)
 800263e:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1 << (CurrentTaskIdx));
 8002640:	4a42      	ldr	r2, [pc, #264]	; (800274c <UTIL_SEQ_Run+0x19c>)
 8002642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4413      	add	r3, r2
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	4a42      	ldr	r2, [pc, #264]	; (8002754 <UTIL_SEQ_Run+0x1a4>)
 800264c:	6812      	ldr	r2, [r2, #0]
 800264e:	2101      	movs	r1, #1
 8002650:	fa01 f202 	lsl.w	r2, r1, r2
 8002654:	43d2      	mvns	r2, r2
 8002656:	401a      	ands	r2, r3
 8002658:	493c      	ldr	r1, [pc, #240]	; (800274c <UTIL_SEQ_Run+0x19c>)
 800265a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	440b      	add	r3, r1
 8002660:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002662:	f3ef 8310 	mrs	r3, PRIMASK
 8002666:	61bb      	str	r3, [r7, #24]
  return(result);
 8002668:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800266a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800266c:	b672      	cpsid	i
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1 << (CurrentTaskIdx));
 800266e:	4b39      	ldr	r3, [pc, #228]	; (8002754 <UTIL_SEQ_Run+0x1a4>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2201      	movs	r2, #1
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	43db      	mvns	r3, r3
 800267a:	461a      	mov	r2, r3
 800267c:	4b36      	ldr	r3, [pc, #216]	; (8002758 <UTIL_SEQ_Run+0x1a8>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4013      	ands	r3, r2
 8002682:	4a35      	ldr	r2, [pc, #212]	; (8002758 <UTIL_SEQ_Run+0x1a8>)
 8002684:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter; counter--)
 8002686:	2302      	movs	r3, #2
 8002688:	62fb      	str	r3, [r7, #44]	; 0x2c
 800268a:	e014      	b.n	80026b6 <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1].priority &= ~(1 << (CurrentTaskIdx));
 800268c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268e:	3b01      	subs	r3, #1
 8002690:	4a2e      	ldr	r2, [pc, #184]	; (800274c <UTIL_SEQ_Run+0x19c>)
 8002692:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002696:	4b2f      	ldr	r3, [pc, #188]	; (8002754 <UTIL_SEQ_Run+0x1a4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2101      	movs	r1, #1
 800269c:	fa01 f303 	lsl.w	r3, r1, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	4619      	mov	r1, r3
 80026a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a6:	3b01      	subs	r3, #1
 80026a8:	400a      	ands	r2, r1
 80026aa:	4928      	ldr	r1, [pc, #160]	; (800274c <UTIL_SEQ_Run+0x19c>)
 80026ac:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter; counter--)
 80026b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b2:	3b01      	subs	r3, #1
 80026b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1e7      	bne.n	800268c <UTIL_SEQ_Run+0xdc>
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f383 8810 	msr	PRIMASK, r3
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80026c6:	4b23      	ldr	r3, [pc, #140]	; (8002754 <UTIL_SEQ_Run+0x1a4>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a24      	ldr	r2, [pc, #144]	; (800275c <UTIL_SEQ_Run+0x1ac>)
 80026cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d0:	4798      	blx	r3
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 80026d2:	4b21      	ldr	r3, [pc, #132]	; (8002758 <UTIL_SEQ_Run+0x1a8>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	4b1e      	ldr	r3, [pc, #120]	; (8002750 <UTIL_SEQ_Run+0x1a0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	401a      	ands	r2, r3
 80026dc:	4b1a      	ldr	r3, [pc, #104]	; (8002748 <UTIL_SEQ_Run+0x198>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4013      	ands	r3, r2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d007      	beq.n	80026f6 <UTIL_SEQ_Run+0x146>
 80026e6:	4b1e      	ldr	r3, [pc, #120]	; (8002760 <UTIL_SEQ_Run+0x1b0>)
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	4b1e      	ldr	r3, [pc, #120]	; (8002764 <UTIL_SEQ_Run+0x1b4>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4013      	ands	r3, r2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f43f af6b 	beq.w	80025cc <UTIL_SEQ_Run+0x1c>
  }

  UTIL_SEQ_PreIdle( );
 80026f6:	f000 f90f 	bl	8002918 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026fa:	f3ef 8310 	mrs	r3, PRIMASK
 80026fe:	613b      	str	r3, [r7, #16]
  return(result);
 8002700:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8002702:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8002704:	b672      	cpsid	i
  if (!((TaskSet & TaskMask & SuperMask) || (EvtSet & EvtWaited)))
 8002706:	4b14      	ldr	r3, [pc, #80]	; (8002758 <UTIL_SEQ_Run+0x1a8>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	4b11      	ldr	r3, [pc, #68]	; (8002750 <UTIL_SEQ_Run+0x1a0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	401a      	ands	r2, r3
 8002710:	4b0d      	ldr	r3, [pc, #52]	; (8002748 <UTIL_SEQ_Run+0x198>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4013      	ands	r3, r2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d108      	bne.n	800272c <UTIL_SEQ_Run+0x17c>
 800271a:	4b11      	ldr	r3, [pc, #68]	; (8002760 <UTIL_SEQ_Run+0x1b0>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	4b11      	ldr	r3, [pc, #68]	; (8002764 <UTIL_SEQ_Run+0x1b4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4013      	ands	r3, r2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <UTIL_SEQ_Run+0x17c>
  {
    UTIL_SEQ_Idle( );
 8002728:	f7fe fa09 	bl	8000b3e <UTIL_SEQ_Idle>
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f383 8810 	msr	PRIMASK, r3
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  
  UTIL_SEQ_PostIdle( );
 8002736:	f000 f8f6 	bl	8002926 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800273a:	4a03      	ldr	r2, [pc, #12]	; (8002748 <UTIL_SEQ_Run+0x198>)
 800273c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273e:	6013      	str	r3, [r2, #0]

  return;
 8002740:	bf00      	nop
}
 8002742:	3730      	adds	r7, #48	; 0x30
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	2000000c 	.word	0x2000000c
 800274c:	200003f4 	.word	0x200003f4
 8002750:	20000008 	.word	0x20000008
 8002754:	20000370 	.word	0x20000370
 8002758:	20000364 	.word	0x20000364
 800275c:	20000374 	.word	0x20000374
 8002760:	20000368 	.word	0x20000368
 8002764:	2000036c 	.word	0x2000036c

08002768 <UTIL_SEQ_RegTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_RegTask( UTIL_SEQ_bm_t task_id_bm , uint32_t flags, void (*task)( void ) )
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b088      	sub	sp, #32
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002774:	f3ef 8310 	mrs	r3, PRIMASK
 8002778:	617b      	str	r3, [r7, #20]
  return(result);
 800277a:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800277c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800277e:	b672      	cpsid	i

  TaskCb[bit_position(task_id_bm)] = task;
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f000 f8d7 	bl	8002934 <bit_position>
 8002786:	4601      	mov	r1, r0
 8002788:	4a06      	ldr	r2, [pc, #24]	; (80027a4 <UTIL_SEQ_RegTask+0x3c>)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800279a:	bf00      	nop
}
 800279c:	3720      	adds	r7, #32
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000374 	.word	0x20000374

080027a8 <UTIL_SEQ_SetTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t task_id_bm , uint32_t task_prio )
{
 80027a8:	b480      	push	{r7}
 80027aa:	b087      	sub	sp, #28
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027b2:	f3ef 8310 	mrs	r3, PRIMASK
 80027b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80027b8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80027ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80027bc:	b672      	cpsid	i

  TaskSet |= task_id_bm;
 80027be:	4b0d      	ldr	r3, [pc, #52]	; (80027f4 <UTIL_SEQ_SetTask+0x4c>)
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	4a0b      	ldr	r2, [pc, #44]	; (80027f4 <UTIL_SEQ_SetTask+0x4c>)
 80027c8:	6013      	str	r3, [r2, #0]
  TaskPrio[task_prio].priority |= task_id_bm;
 80027ca:	4a0b      	ldr	r2, [pc, #44]	; (80027f8 <UTIL_SEQ_SetTask+0x50>)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	431a      	orrs	r2, r3
 80027d6:	4908      	ldr	r1, [pc, #32]	; (80027f8 <UTIL_SEQ_SetTask+0x50>)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80027e8:	bf00      	nop
}
 80027ea:	371c      	adds	r7, #28
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	20000364 	.word	0x20000364
 80027f8:	200003f4 	.word	0x200003f4

080027fc <UTIL_SEQ_PauseTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t task_id_bm )
{
 80027fc:	b480      	push	{r7}
 80027fe:	b087      	sub	sp, #28
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002804:	f3ef 8310 	mrs	r3, PRIMASK
 8002808:	60fb      	str	r3, [r7, #12]
  return(result);
 800280a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800280c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800280e:	b672      	cpsid	i

  TaskMask &= (~task_id_bm);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	43da      	mvns	r2, r3
 8002814:	4b07      	ldr	r3, [pc, #28]	; (8002834 <UTIL_SEQ_PauseTask+0x38>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4013      	ands	r3, r2
 800281a:	4a06      	ldr	r2, [pc, #24]	; (8002834 <UTIL_SEQ_PauseTask+0x38>)
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8002828:	bf00      	nop
}
 800282a:	371c      	adds	r7, #28
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	20000008 	.word	0x20000008

08002838 <UTIL_SEQ_ResumeTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t task_id_bm )
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002840:	f3ef 8310 	mrs	r3, PRIMASK
 8002844:	60fb      	str	r3, [r7, #12]
  return(result);
 8002846:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8002848:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800284a:	b672      	cpsid	i

  TaskMask |= task_id_bm;
 800284c:	4b08      	ldr	r3, [pc, #32]	; (8002870 <UTIL_SEQ_ResumeTask+0x38>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4313      	orrs	r3, r2
 8002854:	4a06      	ldr	r2, [pc, #24]	; (8002870 <UTIL_SEQ_ResumeTask+0x38>)
 8002856:	6013      	str	r3, [r2, #0]
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8002862:	bf00      	nop
}
 8002864:	371c      	adds	r7, #28
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	20000008 	.word	0x20000008

08002874 <UTIL_SEQ_SetEvt>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t evt_id_bm )
{
 8002874:	b480      	push	{r7}
 8002876:	b087      	sub	sp, #28
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800287c:	f3ef 8310 	mrs	r3, PRIMASK
 8002880:	60fb      	str	r3, [r7, #12]
  return(result);
 8002882:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8002884:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002886:	b672      	cpsid	i

  EvtSet |= evt_id_bm;
 8002888:	4b08      	ldr	r3, [pc, #32]	; (80028ac <UTIL_SEQ_SetEvt+0x38>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4313      	orrs	r3, r2
 8002890:	4a06      	ldr	r2, [pc, #24]	; (80028ac <UTIL_SEQ_SetEvt+0x38>)
 8002892:	6013      	str	r3, [r2, #0]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800289e:	bf00      	nop
}
 80028a0:	371c      	adds	r7, #28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	20000368 	.word	0x20000368

080028b0 <UTIL_SEQ_WaitEvt>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_WaitEvt( UTIL_SEQ_bm_t evt_id_bm )
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_id_bm;

  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_id_bm = (1 << CurrentTaskIdx);
 80028b8:	4b14      	ldr	r3, [pc, #80]	; (800290c <UTIL_SEQ_WaitEvt+0x5c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2201      	movs	r2, #1
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	60fb      	str	r3, [r7, #12]

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80028c4:	4b12      	ldr	r3, [pc, #72]	; (8002910 <UTIL_SEQ_WaitEvt+0x60>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	60bb      	str	r3, [r7, #8]
  EvtWaited = evt_id_bm;
 80028ca:	4a11      	ldr	r2, [pc, #68]	; (8002910 <UTIL_SEQ_WaitEvt+0x60>)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again fro the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while((EvtSet & EvtWaited) == 0)
 80028d0:	e005      	b.n	80028de <UTIL_SEQ_WaitEvt+0x2e>
  {
    UTIL_SEQ_EvtIdle(current_task_id_bm, EvtWaited);
 80028d2:	4b0f      	ldr	r3, [pc, #60]	; (8002910 <UTIL_SEQ_WaitEvt+0x60>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4619      	mov	r1, r3
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f7fe f936 	bl	8000b4a <UTIL_SEQ_EvtIdle>
  while((EvtSet & EvtWaited) == 0)
 80028de:	4b0d      	ldr	r3, [pc, #52]	; (8002914 <UTIL_SEQ_WaitEvt+0x64>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <UTIL_SEQ_WaitEvt+0x60>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4013      	ands	r3, r2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0f2      	beq.n	80028d2 <UTIL_SEQ_WaitEvt+0x22>
  }
  EvtSet &= (~EvtWaited);
 80028ec:	4b08      	ldr	r3, [pc, #32]	; (8002910 <UTIL_SEQ_WaitEvt+0x60>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	43da      	mvns	r2, r3
 80028f2:	4b08      	ldr	r3, [pc, #32]	; (8002914 <UTIL_SEQ_WaitEvt+0x64>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4013      	ands	r3, r2
 80028f8:	4a06      	ldr	r2, [pc, #24]	; (8002914 <UTIL_SEQ_WaitEvt+0x64>)
 80028fa:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 80028fc:	4a04      	ldr	r2, [pc, #16]	; (8002910 <UTIL_SEQ_WaitEvt+0x60>)
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	6013      	str	r3, [r2, #0]

  return;
 8002902:	bf00      	nop
}
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	20000370 	.word	0x20000370
 8002910:	2000036c 	.word	0x2000036c
 8002914:	20000368 	.word	0x20000368

08002918 <UTIL_SEQ_PreIdle>:
   */
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800291c:	bf00      	nop
}
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8002926:	b480      	push	{r7}
 8002928:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800292a:	bf00      	nop
}
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <bit_position>:

#if( __CORTEX_M == 0)
static const uint8_t clz_table_4bit[16] = { 4, 3, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 };	
static uint32_t bit_position(uint32_t value)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]

  uint32_t n = 0;
 800293c:	2300      	movs	r3, #0
 800293e:	60fb      	str	r3, [r7, #12]

  if ((value & 0xFFFF0000) == 0)  { n  = 16; value <<= 16;  }
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	0c1b      	lsrs	r3, r3, #16
 8002944:	041b      	lsls	r3, r3, #16
 8002946:	2b00      	cmp	r3, #0
 8002948:	d104      	bne.n	8002954 <bit_position+0x20>
 800294a:	2310      	movs	r3, #16
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	041b      	lsls	r3, r3, #16
 8002952:	607b      	str	r3, [r7, #4]
  if ((value & 0xFF000000) == 0)  { n +=  8; value <<=  8;  }
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d105      	bne.n	800296a <bit_position+0x36>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	3308      	adds	r3, #8
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	021b      	lsls	r3, r3, #8
 8002968:	607b      	str	r3, [r7, #4]
  if ((value & 0xF0000000) == 0)  { n +=  4; value <<=  4;  }
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d105      	bne.n	8002980 <bit_position+0x4c>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	3304      	adds	r3, #4
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	607b      	str	r3, [r7, #4]

  n += (uint32_t)clz_table_4bit[value >> (32-4)];
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	0f1b      	lsrs	r3, r3, #28
 8002984:	4a07      	ldr	r2, [pc, #28]	; (80029a4 <bit_position+0x70>)
 8002986:	5cd3      	ldrb	r3, [r2, r3]
 8002988:	461a      	mov	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	4413      	add	r3, r2
 800298e:	60fb      	str	r3, [r7, #12]

  return (31-n);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f1c3 031f 	rsb	r3, r3, #31
}
 8002996:	4618      	mov	r0, r3
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	0800b898 	.word	0x0800b898

080029a8 <LL_RCC_HSE_SetCapacitorTuning>:
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80029b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b4:	4a0a      	ldr	r2, [pc, #40]	; (80029e0 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80029b6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80029ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029c2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	021b      	lsls	r3, r3, #8
 80029ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029ce:	4313      	orrs	r3, r2
 80029d0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	cafecafe 	.word	0xcafecafe

080029e4 <LL_AHB3_GRP1_EnableClock>:
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80029ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80029fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4013      	ands	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a08:	68fb      	ldr	r3, [r7, #12]
}
 8002a0a:	bf00      	nop
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b082      	sub	sp, #8
 8002a1a:	af00      	add	r7, sp, #0

	OTP_ID0_t * p_otp;
	/**
	* Read HSE_Tuning from OTP
	*/
	p_otp = (OTP_ID0_t *) OTP_Read(0);
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	f007 fa8f 	bl	8009f40 <OTP_Read>
 8002a22:	6078      	str	r0, [r7, #4]
	if (p_otp)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d004      	beq.n	8002a34 <HAL_MspInit+0x1e>
	{
		LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	799b      	ldrb	r3, [r3, #6]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff ffba 	bl	80029a8 <LL_RCC_HSE_SetCapacitorTuning>
	}
  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002a34:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002a38:	f7ff ffd4 	bl	80029e4 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	2100      	movs	r1, #0
 8002a40:	202e      	movs	r0, #46	; 0x2e
 8002a42:	f000 fd04 	bl	800344e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002a46:	202e      	movs	r0, #46	; 0x2e
 8002a48:	f000 fd1b 	bl	8003482 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a4c:	bf00      	nop
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002a58:	bf00      	nop
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
	...

08002a64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8002a68:	2102      	movs	r1, #2
 8002a6a:	4802      	ldr	r0, [pc, #8]	; (8002a74 <HardFault_Handler+0x10>)
 8002a6c:	f000 fed6 	bl	800381c <HAL_GPIO_TogglePin>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a70:	e7fe      	b.n	8002a70 <HardFault_Handler+0xc>
 8002a72:	bf00      	nop
 8002a74:	48000400 	.word	0x48000400

08002a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a7c:	e7fe      	b.n	8002a7c <MemManage_Handler+0x4>

08002a7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a82:	e7fe      	b.n	8002a82 <BusFault_Handler+0x4>

08002a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a88:	e7fe      	b.n	8002a88 <UsageFault_Handler+0x4>

08002a8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a8e:	bf00      	nop
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a9c:	bf00      	nop
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002aaa:	bf00      	nop
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ab8:	f000 fb44 	bl	8003144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002abc:	bf00      	nop
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002ac4:	4802      	ldr	r0, [pc, #8]	; (8002ad0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002ac6:	f004 fb21 	bl	800710c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002aca:	bf00      	nop
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	20000604 	.word	0x20000604

08002ad4 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002ad8:	f000 feba 	bl	8003850 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002adc:	bf00      	nop
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <RTC_WKUP_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
* @brief This function handles RTC wake-up interrupt through EXTI line 19.
*/
void RTC_WKUP_IRQHandler(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
	HW_TS_RTC_Wakeup_Handler();
 8002ae4:	f7fe fc44 	bl	8001370 <HW_TS_RTC_Wakeup_Handler>
}
 8002ae8:	bf00      	nop
 8002aea:	bd80      	pop	{r7, pc}

08002aec <IPCC_C1_RX_IRQHandler>:
/**
* @brief This function handles IPCC RX occupied interrupt.
*/
void IPCC_C1_RX_IRQHandler(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
	HW_IPCC_Rx_Handler();
 8002af0:	f008 fd00 	bl	800b4f4 <HW_IPCC_Rx_Handler>
}
 8002af4:	bf00      	nop
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <IPCC_C1_TX_IRQHandler>:
/**
* @brief This function handles IPCC TX free interrupt.
*/
void IPCC_C1_TX_IRQHandler(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
	HW_IPCC_Tx_Handler();
 8002afc:	f008 fd32 	bl	800b564 <HW_IPCC_Tx_Handler>
}
 8002b00:	bf00      	nop
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8002b08:	4b26      	ldr	r3, [pc, #152]	; (8002ba4 <SystemInit+0xa0>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8002b0e:	4b25      	ldr	r3, [pc, #148]	; (8002ba4 <SystemInit+0xa0>)
 8002b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b14:	4a23      	ldr	r2, [pc, #140]	; (8002ba4 <SystemInit+0xa0>)
 8002b16:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b1a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b32:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002b36:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b42:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <SystemInit+0xa4>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b54:	f023 0305 	bic.w	r3, r3, #5
 8002b58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b68:	f023 0301 	bic.w	r3, r3, #1
 8002b6c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b74:	4a0d      	ldr	r2, [pc, #52]	; (8002bac <SystemInit+0xa8>)
 8002b76:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b7c:	4a0b      	ldr	r2, [pc, #44]	; (8002bac <SystemInit+0xa8>)
 8002b7e:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b8e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b94:	2200      	movs	r2, #0
 8002b96:	619a      	str	r2, [r3, #24]
}
 8002b98:	bf00      	nop
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	e000ed00 	.word	0xe000ed00
 8002ba8:	faf6fefb 	.word	0xfaf6fefb
 8002bac:	22041000 	.word	0x22041000

08002bb0 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b087      	sub	sp, #28
 8002bb4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8002bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	091b      	lsrs	r3, r3, #4
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	4a47      	ldr	r2, [pc, #284]	; (8002ce0 <SystemCoreClockUpdate+0x130>)
 8002bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc8:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 030c 	and.w	r3, r3, #12
 8002bd4:	2b0c      	cmp	r3, #12
 8002bd6:	d867      	bhi.n	8002ca8 <SystemCoreClockUpdate+0xf8>
 8002bd8:	a201      	add	r2, pc, #4	; (adr r2, 8002be0 <SystemCoreClockUpdate+0x30>)
 8002bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bde:	bf00      	nop
 8002be0:	08002c15 	.word	0x08002c15
 8002be4:	08002ca9 	.word	0x08002ca9
 8002be8:	08002ca9 	.word	0x08002ca9
 8002bec:	08002ca9 	.word	0x08002ca9
 8002bf0:	08002c1d 	.word	0x08002c1d
 8002bf4:	08002ca9 	.word	0x08002ca9
 8002bf8:	08002ca9 	.word	0x08002ca9
 8002bfc:	08002ca9 	.word	0x08002ca9
 8002c00:	08002c25 	.word	0x08002c25
 8002c04:	08002ca9 	.word	0x08002ca9
 8002c08:	08002ca9 	.word	0x08002ca9
 8002c0c:	08002ca9 	.word	0x08002ca9
 8002c10:	08002c2d 	.word	0x08002c2d
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8002c14:	4a33      	ldr	r2, [pc, #204]	; (8002ce4 <SystemCoreClockUpdate+0x134>)
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	6013      	str	r3, [r2, #0]
      break;
 8002c1a:	e049      	b.n	8002cb0 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8002c1c:	4b31      	ldr	r3, [pc, #196]	; (8002ce4 <SystemCoreClockUpdate+0x134>)
 8002c1e:	4a32      	ldr	r2, [pc, #200]	; (8002ce8 <SystemCoreClockUpdate+0x138>)
 8002c20:	601a      	str	r2, [r3, #0]
      break;
 8002c22:	e045      	b.n	8002cb0 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002c24:	4b2f      	ldr	r3, [pc, #188]	; (8002ce4 <SystemCoreClockUpdate+0x134>)
 8002c26:	4a31      	ldr	r2, [pc, #196]	; (8002cec <SystemCoreClockUpdate+0x13c>)
 8002c28:	601a      	str	r2, [r3, #0]
      break;
 8002c2a:	e041      	b.n	8002cb0 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8002c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	091b      	lsrs	r3, r3, #4
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	3301      	adds	r3, #1
 8002c46:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d105      	bne.n	8002c5a <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8002c4e:	4a26      	ldr	r2, [pc, #152]	; (8002ce8 <SystemCoreClockUpdate+0x138>)
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	e00d      	b.n	8002c76 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d105      	bne.n	8002c6c <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8002c60:	4a22      	ldr	r2, [pc, #136]	; (8002cec <SystemCoreClockUpdate+0x13c>)
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	e004      	b.n	8002c76 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c74:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	0a1b      	lsrs	r3, r3, #8
 8002c7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	fb02 f303 	mul.w	r3, r2, r3
 8002c88:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8002c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	0f5b      	lsrs	r3, r3, #29
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	3301      	adds	r3, #1
 8002c98:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca2:	4a10      	ldr	r2, [pc, #64]	; (8002ce4 <SystemCoreClockUpdate+0x134>)
 8002ca4:	6013      	str	r3, [r2, #0]
      break;
 8002ca6:	e003      	b.n	8002cb0 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8002ca8:	4a0e      	ldr	r2, [pc, #56]	; (8002ce4 <SystemCoreClockUpdate+0x134>)
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	6013      	str	r3, [r2, #0]
      break;
 8002cae:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	091b      	lsrs	r3, r3, #4
 8002cb8:	f003 030f 	and.w	r3, r3, #15
 8002cbc:	4a0c      	ldr	r2, [pc, #48]	; (8002cf0 <SystemCoreClockUpdate+0x140>)
 8002cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc2:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8002cc4:	4b07      	ldr	r3, [pc, #28]	; (8002ce4 <SystemCoreClockUpdate+0x134>)
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cce:	4a05      	ldr	r2, [pc, #20]	; (8002ce4 <SystemCoreClockUpdate+0x134>)
 8002cd0:	6013      	str	r3, [r2, #0]

}
 8002cd2:	bf00      	nop
 8002cd4:	371c      	adds	r7, #28
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	0800b908 	.word	0x0800b908
 8002ce4:	20000010 	.word	0x20000010
 8002ce8:	00f42400 	.word	0x00f42400
 8002cec:	01e84800 	.word	0x01e84800
 8002cf0:	0800b8a8 	.word	0x0800b8a8

08002cf4 <LL_APB2_GRP1_EnableClock>:
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d00:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d10:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4013      	ands	r3, r2
 8002d16:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d18:	68fb      	ldr	r3, [r7, #12]
}
 8002d1a:	bf00      	nop
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
	...

08002d28 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8002d2c:	4b10      	ldr	r3, [pc, #64]	; (8002d70 <MX_TIM16_Init+0x48>)
 8002d2e:	4a11      	ldr	r2, [pc, #68]	; (8002d74 <MX_TIM16_Init+0x4c>)
 8002d30:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1000;
 8002d32:	4b0f      	ldr	r3, [pc, #60]	; (8002d70 <MX_TIM16_Init+0x48>)
 8002d34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d38:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d3a:	4b0d      	ldr	r3, [pc, #52]	; (8002d70 <MX_TIM16_Init+0x48>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 320;
 8002d40:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <MX_TIM16_Init+0x48>)
 8002d42:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002d46:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d48:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <MX_TIM16_Init+0x48>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002d4e:	4b08      	ldr	r3, [pc, #32]	; (8002d70 <MX_TIM16_Init+0x48>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d54:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <MX_TIM16_Init+0x48>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002d5a:	4805      	ldr	r0, [pc, #20]	; (8002d70 <MX_TIM16_Init+0x48>)
 8002d5c:	f004 f981 	bl	8007062 <HAL_TIM_Base_Init>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8002d66:	f7ff fa11 	bl	800218c <Error_Handler>
  }

}
 8002d6a:	bf00      	nop
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	20000604 	.word	0x20000604
 8002d74:	40014400 	.word	0x40014400

08002d78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a09      	ldr	r2, [pc, #36]	; (8002dac <HAL_TIM_Base_MspInit+0x34>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d10b      	bne.n	8002da2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002d8a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002d8e:	f7ff ffb1 	bl	8002cf4 <LL_APB2_GRP1_EnableClock>

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002d92:	2200      	movs	r2, #0
 8002d94:	2100      	movs	r1, #0
 8002d96:	2019      	movs	r0, #25
 8002d98:	f000 fb59 	bl	800344e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002d9c:	2019      	movs	r0, #25
 8002d9e:	f000 fb70 	bl	8003482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8002da2:	bf00      	nop
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40014400 	.word	0x40014400

08002db0 <LL_AHB2_GRP1_EnableClock>:
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002dbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dcc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
}
 8002dd6:	bf00      	nop
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <LL_APB2_GRP1_EnableClock>:
{
 8002de2:	b480      	push	{r7}
 8002de4:	b085      	sub	sp, #20
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002df0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002dfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dfe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4013      	ands	r3, r2
 8002e04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e06:	68fb      	ldr	r3, [r7, #12]
}
 8002e08:	bf00      	nop
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002e18:	4b22      	ldr	r3, [pc, #136]	; (8002ea4 <MX_USART1_UART_Init+0x90>)
 8002e1a:	4a23      	ldr	r2, [pc, #140]	; (8002ea8 <MX_USART1_UART_Init+0x94>)
 8002e1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e1e:	4b21      	ldr	r3, [pc, #132]	; (8002ea4 <MX_USART1_UART_Init+0x90>)
 8002e20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e26:	4b1f      	ldr	r3, [pc, #124]	; (8002ea4 <MX_USART1_UART_Init+0x90>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ea4 <MX_USART1_UART_Init+0x90>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e32:	4b1c      	ldr	r3, [pc, #112]	; (8002ea4 <MX_USART1_UART_Init+0x90>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e38:	4b1a      	ldr	r3, [pc, #104]	; (8002ea4 <MX_USART1_UART_Init+0x90>)
 8002e3a:	220c      	movs	r2, #12
 8002e3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e3e:	4b19      	ldr	r3, [pc, #100]	; (8002ea4 <MX_USART1_UART_Init+0x90>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e44:	4b17      	ldr	r3, [pc, #92]	; (8002ea4 <MX_USART1_UART_Init+0x90>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e4a:	4b16      	ldr	r3, [pc, #88]	; (8002ea4 <MX_USART1_UART_Init+0x90>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e50:	4b14      	ldr	r3, [pc, #80]	; (8002ea4 <MX_USART1_UART_Init+0x90>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e56:	4b13      	ldr	r3, [pc, #76]	; (8002ea4 <MX_USART1_UART_Init+0x90>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e5c:	4811      	ldr	r0, [pc, #68]	; (8002ea4 <MX_USART1_UART_Init+0x90>)
 8002e5e:	f004 fb3f 	bl	80074e0 <HAL_UART_Init>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002e68:	f7ff f990 	bl	800218c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	480d      	ldr	r0, [pc, #52]	; (8002ea4 <MX_USART1_UART_Init+0x90>)
 8002e70:	f005 fd8d 	bl	800898e <HAL_UARTEx_SetTxFifoThreshold>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002e7a:	f7ff f987 	bl	800218c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e7e:	2100      	movs	r1, #0
 8002e80:	4808      	ldr	r0, [pc, #32]	; (8002ea4 <MX_USART1_UART_Init+0x90>)
 8002e82:	f005 fdc2 	bl	8008a0a <HAL_UARTEx_SetRxFifoThreshold>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002e8c:	f7ff f97e 	bl	800218c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002e90:	4804      	ldr	r0, [pc, #16]	; (8002ea4 <MX_USART1_UART_Init+0x90>)
 8002e92:	f005 fd43 	bl	800891c <HAL_UARTEx_DisableFifoMode>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002e9c:	f7ff f976 	bl	800218c <Error_Handler>
  }

}
 8002ea0:	bf00      	nop
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	20000644 	.word	0x20000644
 8002ea8:	40013800 	.word	0x40013800

08002eac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b088      	sub	sp, #32
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb4:	f107 030c 	add.w	r3, r7, #12
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	605a      	str	r2, [r3, #4]
 8002ebe:	609a      	str	r2, [r3, #8]
 8002ec0:	60da      	str	r2, [r3, #12]
 8002ec2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a0e      	ldr	r2, [pc, #56]	; (8002f04 <HAL_UART_MspInit+0x58>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d116      	bne.n	8002efc <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ece:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002ed2:	f7ff ff86 	bl	8002de2 <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ed6:	2002      	movs	r0, #2
 8002ed8:	f7ff ff6a 	bl	8002db0 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002edc:	23c0      	movs	r3, #192	; 0xc0
 8002ede:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002eec:	2307      	movs	r3, #7
 8002eee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef0:	f107 030c 	add.w	r3, r7, #12
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4804      	ldr	r0, [pc, #16]	; (8002f08 <HAL_UART_MspInit+0x5c>)
 8002ef8:	f000 fb08 	bl	800350c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002efc:	bf00      	nop
 8002efe:	3720      	adds	r7, #32
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40013800 	.word	0x40013800
 8002f08:	48000400 	.word	0x48000400

08002f0c <LL_AHB2_GRP1_EnableClock>:
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f30:	68fb      	ldr	r3, [r7, #12]
}
 8002f32:	bf00      	nop
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <LL_APB1_GRP1_EnableClock>:
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b085      	sub	sp, #20
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f4a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f62:	68fb      	ldr	r3, [r7, #12]
}
 8002f64:	bf00      	nop
 8002f66:	3714      	adds	r7, #20
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0

  hpcd_USB_FS.Instance = USB;
 8002f74:	4b10      	ldr	r3, [pc, #64]	; (8002fb8 <MX_USB_PCD_Init+0x48>)
 8002f76:	4a11      	ldr	r2, [pc, #68]	; (8002fbc <MX_USB_PCD_Init+0x4c>)
 8002f78:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002f7a:	4b0f      	ldr	r3, [pc, #60]	; (8002fb8 <MX_USB_PCD_Init+0x48>)
 8002f7c:	2208      	movs	r2, #8
 8002f7e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002f80:	4b0d      	ldr	r3, [pc, #52]	; (8002fb8 <MX_USB_PCD_Init+0x48>)
 8002f82:	2202      	movs	r2, #2
 8002f84:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002f86:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <MX_USB_PCD_Init+0x48>)
 8002f88:	2202      	movs	r2, #2
 8002f8a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8002f8c:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <MX_USB_PCD_Init+0x48>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002f92:	4b09      	ldr	r3, [pc, #36]	; (8002fb8 <MX_USB_PCD_Init+0x48>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002f98:	4b07      	ldr	r3, [pc, #28]	; (8002fb8 <MX_USB_PCD_Init+0x48>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002f9e:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <MX_USB_PCD_Init+0x48>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002fa4:	4804      	ldr	r0, [pc, #16]	; (8002fb8 <MX_USB_PCD_Init+0x48>)
 8002fa6:	f001 f968 	bl	800427a <HAL_PCD_Init>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8002fb0:	f7ff f8ec 	bl	800218c <Error_Handler>
  }

}
 8002fb4:	bf00      	nop
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	200006d0 	.word	0x200006d0
 8002fbc:	40006800 	.word	0x40006800

08002fc0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b088      	sub	sp, #32
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc8:	f107 030c 	add.w	r3, r7, #12
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	605a      	str	r2, [r3, #4]
 8002fd2:	609a      	str	r2, [r3, #8]
 8002fd4:	60da      	str	r2, [r3, #12]
 8002fd6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a0f      	ldr	r2, [pc, #60]	; (800301c <HAL_PCD_MspInit+0x5c>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d118      	bne.n	8003014 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fe2:	2001      	movs	r0, #1
 8002fe4:	f7ff ff92 	bl	8002f0c <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002fe8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002fec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fee:	2302      	movs	r3, #2
 8002ff0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002ffa:	230a      	movs	r3, #10
 8002ffc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ffe:	f107 030c 	add.w	r3, r7, #12
 8003002:	4619      	mov	r1, r3
 8003004:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003008:	f000 fa80 	bl	800350c <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800300c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003010:	f7ff ff95 	bl	8002f3e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8003014:	bf00      	nop
 8003016:	3720      	adds	r7, #32
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	40006800 	.word	0x40006800

08003020 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003020:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003022:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003024:	3304      	adds	r3, #4

08003026 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003026:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003028:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800302a:	d3f9      	bcc.n	8003020 <CopyDataInit>
  bx lr
 800302c:	4770      	bx	lr

0800302e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800302e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003030:	3004      	adds	r0, #4

08003032 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8003032:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003034:	d3fb      	bcc.n	800302e <FillZerobss>
  bx lr
 8003036:	4770      	bx	lr

08003038 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003038:	480c      	ldr	r0, [pc, #48]	; (800306c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800303a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800303c:	480c      	ldr	r0, [pc, #48]	; (8003070 <LoopForever+0x8>)
 800303e:	490d      	ldr	r1, [pc, #52]	; (8003074 <LoopForever+0xc>)
 8003040:	4a0d      	ldr	r2, [pc, #52]	; (8003078 <LoopForever+0x10>)
 8003042:	2300      	movs	r3, #0
 8003044:	f7ff ffef 	bl	8003026 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003048:	480c      	ldr	r0, [pc, #48]	; (800307c <LoopForever+0x14>)
 800304a:	490d      	ldr	r1, [pc, #52]	; (8003080 <LoopForever+0x18>)
 800304c:	2300      	movs	r3, #0
 800304e:	f7ff fff0 	bl	8003032 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8003052:	480c      	ldr	r0, [pc, #48]	; (8003084 <LoopForever+0x1c>)
 8003054:	490c      	ldr	r1, [pc, #48]	; (8003088 <LoopForever+0x20>)
 8003056:	2300      	movs	r3, #0
 8003058:	f7ff ffeb 	bl	8003032 <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800305c:	f7ff fd52 	bl	8002b04 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003060:	f008 fb90 	bl	800b784 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8003064:	f7fe fde2 	bl	8001c2c <main>

08003068 <LoopForever>:

LoopForever:
  b LoopForever
 8003068:	e7fe      	b.n	8003068 <LoopForever>
 800306a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800306c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003070:	20000004 	.word	0x20000004
 8003074:	2000002c 	.word	0x2000002c
 8003078:	0800b988 	.word	0x0800b988
  INIT_BSS _sbss, _ebss
 800307c:	200001c4 	.word	0x200001c4
 8003080:	2000094c 	.word	0x2000094c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8003084:	200301c4 	.word	0x200301c4
 8003088:	20030a44 	.word	0x20030a44

0800308c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800308c:	e7fe      	b.n	800308c <ADC1_IRQHandler>
	...

08003090 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800309a:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <HAL_Init+0x3c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a0b      	ldr	r2, [pc, #44]	; (80030cc <HAL_Init+0x3c>)
 80030a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030a6:	2003      	movs	r0, #3
 80030a8:	f000 f9c6 	bl	8003438 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030ac:	2000      	movs	r0, #0
 80030ae:	f000 f80f 	bl	80030d0 <HAL_InitTick>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	71fb      	strb	r3, [r7, #7]
 80030bc:	e001      	b.n	80030c2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80030be:	f7ff fcaa 	bl	8002a16 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80030c2:	79fb      	ldrb	r3, [r7, #7]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	58004000 	.word	0x58004000

080030d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80030d8:	2300      	movs	r3, #0
 80030da:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80030dc:	4b17      	ldr	r3, [pc, #92]	; (800313c <HAL_InitTick+0x6c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d023      	beq.n	800312c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 80030e4:	f002 fa64 	bl	80055b0 <HAL_RCC_GetHCLKFreq>
 80030e8:	4601      	mov	r1, r0
 80030ea:	4b14      	ldr	r3, [pc, #80]	; (800313c <HAL_InitTick+0x6c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 f9dd 	bl	80034ba <HAL_SYSTICK_Config>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10f      	bne.n	8003126 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b0f      	cmp	r3, #15
 800310a:	d809      	bhi.n	8003120 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800310c:	2200      	movs	r2, #0
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003114:	f000 f99b 	bl	800344e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003118:	4a09      	ldr	r2, [pc, #36]	; (8003140 <HAL_InitTick+0x70>)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6013      	str	r3, [r2, #0]
 800311e:	e007      	b.n	8003130 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	73fb      	strb	r3, [r7, #15]
 8003124:	e004      	b.n	8003130 <HAL_InitTick+0x60>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	73fb      	strb	r3, [r7, #15]
 800312a:	e001      	b.n	8003130 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003130:	7bfb      	ldrb	r3, [r7, #15]
}
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	20000018 	.word	0x20000018
 8003140:	20000014 	.word	0x20000014

08003144 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003148:	4b05      	ldr	r3, [pc, #20]	; (8003160 <HAL_IncTick+0x1c>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4b05      	ldr	r3, [pc, #20]	; (8003164 <HAL_IncTick+0x20>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4413      	add	r3, r2
 8003152:	4a03      	ldr	r2, [pc, #12]	; (8003160 <HAL_IncTick+0x1c>)
 8003154:	6013      	str	r3, [r2, #0]
}
 8003156:	bf00      	nop
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	20000944 	.word	0x20000944
 8003164:	20000018 	.word	0x20000018

08003168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  return uwTick;
 800316c:	4b03      	ldr	r3, [pc, #12]	; (800317c <HAL_GetTick+0x14>)
 800316e:	681b      	ldr	r3, [r3, #0]
}
 8003170:	4618      	mov	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	20000944 	.word	0x20000944

08003180 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003184:	4b03      	ldr	r3, [pc, #12]	; (8003194 <HAL_GetTickPrio+0x14>)
 8003186:	681b      	ldr	r3, [r3, #0]
}
 8003188:	4618      	mov	r0, r3
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	20000014 	.word	0x20000014

08003198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 80031a0:	f7ff ffe2 	bl	8003168 <HAL_GetTick>
 80031a4:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031b0:	d004      	beq.n	80031bc <HAL_Delay+0x24>
    {
      wait += (uint32_t)(uwTickFreq);
 80031b2:	4b09      	ldr	r3, [pc, #36]	; (80031d8 <HAL_Delay+0x40>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	4413      	add	r3, r2
 80031ba:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 80031bc:	bf00      	nop
 80031be:	f7ff ffd3 	bl	8003168 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d8f7      	bhi.n	80031be <HAL_Delay+0x26>
    {
    }
  }
 80031ce:	bf00      	nop
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	20000018 	.word	0x20000018

080031dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031ec:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <__NVIC_SetPriorityGrouping+0x44>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031f8:	4013      	ands	r3, r2
 80031fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003204:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800320c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800320e:	4a04      	ldr	r2, [pc, #16]	; (8003220 <__NVIC_SetPriorityGrouping+0x44>)
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	60d3      	str	r3, [r2, #12]
}
 8003214:	bf00      	nop
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	e000ed00 	.word	0xe000ed00

08003224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003228:	4b04      	ldr	r3, [pc, #16]	; (800323c <__NVIC_GetPriorityGrouping+0x18>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	0a1b      	lsrs	r3, r3, #8
 800322e:	f003 0307 	and.w	r3, r3, #7
}
 8003232:	4618      	mov	r0, r3
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	e000ed00 	.word	0xe000ed00

08003240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800324a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324e:	2b00      	cmp	r3, #0
 8003250:	db0b      	blt.n	800326a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003252:	79fb      	ldrb	r3, [r7, #7]
 8003254:	f003 021f 	and.w	r2, r3, #31
 8003258:	4907      	ldr	r1, [pc, #28]	; (8003278 <__NVIC_EnableIRQ+0x38>)
 800325a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325e:	095b      	lsrs	r3, r3, #5
 8003260:	2001      	movs	r0, #1
 8003262:	fa00 f202 	lsl.w	r2, r0, r2
 8003266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	e000e100 	.word	0xe000e100

0800327c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328a:	2b00      	cmp	r3, #0
 800328c:	db10      	blt.n	80032b0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800328e:	79fb      	ldrb	r3, [r7, #7]
 8003290:	f003 021f 	and.w	r2, r3, #31
 8003294:	4909      	ldr	r1, [pc, #36]	; (80032bc <__NVIC_DisableIRQ+0x40>)
 8003296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329a:	095b      	lsrs	r3, r3, #5
 800329c:	2001      	movs	r0, #1
 800329e:	fa00 f202 	lsl.w	r2, r0, r2
 80032a2:	3320      	adds	r3, #32
 80032a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80032a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80032ac:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	e000e100 	.word	0xe000e100

080032c0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	db0c      	blt.n	80032ec <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032d2:	79fb      	ldrb	r3, [r7, #7]
 80032d4:	f003 021f 	and.w	r2, r3, #31
 80032d8:	4907      	ldr	r1, [pc, #28]	; (80032f8 <__NVIC_SetPendingIRQ+0x38>)
 80032da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032de:	095b      	lsrs	r3, r3, #5
 80032e0:	2001      	movs	r0, #1
 80032e2:	fa00 f202 	lsl.w	r2, r0, r2
 80032e6:	3340      	adds	r3, #64	; 0x40
 80032e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	e000e100 	.word	0xe000e100

080032fc <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	4603      	mov	r3, r0
 8003304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330a:	2b00      	cmp	r3, #0
 800330c:	db0c      	blt.n	8003328 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800330e:	79fb      	ldrb	r3, [r7, #7]
 8003310:	f003 021f 	and.w	r2, r3, #31
 8003314:	4907      	ldr	r1, [pc, #28]	; (8003334 <__NVIC_ClearPendingIRQ+0x38>)
 8003316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331a:	095b      	lsrs	r3, r3, #5
 800331c:	2001      	movs	r0, #1
 800331e:	fa00 f202 	lsl.w	r2, r0, r2
 8003322:	3360      	adds	r3, #96	; 0x60
 8003324:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	e000e100 	.word	0xe000e100

08003338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	6039      	str	r1, [r7, #0]
 8003342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003348:	2b00      	cmp	r3, #0
 800334a:	db0a      	blt.n	8003362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	b2da      	uxtb	r2, r3
 8003350:	490c      	ldr	r1, [pc, #48]	; (8003384 <__NVIC_SetPriority+0x4c>)
 8003352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003356:	0112      	lsls	r2, r2, #4
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	440b      	add	r3, r1
 800335c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003360:	e00a      	b.n	8003378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	b2da      	uxtb	r2, r3
 8003366:	4908      	ldr	r1, [pc, #32]	; (8003388 <__NVIC_SetPriority+0x50>)
 8003368:	79fb      	ldrb	r3, [r7, #7]
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	3b04      	subs	r3, #4
 8003370:	0112      	lsls	r2, r2, #4
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	440b      	add	r3, r1
 8003376:	761a      	strb	r2, [r3, #24]
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	e000e100 	.word	0xe000e100
 8003388:	e000ed00 	.word	0xe000ed00

0800338c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800338c:	b480      	push	{r7}
 800338e:	b089      	sub	sp, #36	; 0x24
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f1c3 0307 	rsb	r3, r3, #7
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	bf28      	it	cs
 80033aa:	2304      	movcs	r3, #4
 80033ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	3304      	adds	r3, #4
 80033b2:	2b06      	cmp	r3, #6
 80033b4:	d902      	bls.n	80033bc <NVIC_EncodePriority+0x30>
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	3b03      	subs	r3, #3
 80033ba:	e000      	b.n	80033be <NVIC_EncodePriority+0x32>
 80033bc:	2300      	movs	r3, #0
 80033be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43da      	mvns	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	401a      	ands	r2, r3
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	fa01 f303 	lsl.w	r3, r1, r3
 80033de:	43d9      	mvns	r1, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e4:	4313      	orrs	r3, r2
         );
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3724      	adds	r7, #36	; 0x24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
	...

080033f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3b01      	subs	r3, #1
 8003400:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003404:	d301      	bcc.n	800340a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003406:	2301      	movs	r3, #1
 8003408:	e00f      	b.n	800342a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800340a:	4a0a      	ldr	r2, [pc, #40]	; (8003434 <SysTick_Config+0x40>)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3b01      	subs	r3, #1
 8003410:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003412:	210f      	movs	r1, #15
 8003414:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003418:	f7ff ff8e 	bl	8003338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800341c:	4b05      	ldr	r3, [pc, #20]	; (8003434 <SysTick_Config+0x40>)
 800341e:	2200      	movs	r2, #0
 8003420:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003422:	4b04      	ldr	r3, [pc, #16]	; (8003434 <SysTick_Config+0x40>)
 8003424:	2207      	movs	r2, #7
 8003426:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	e000e010 	.word	0xe000e010

08003438 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7ff fecb 	bl	80031dc <__NVIC_SetPriorityGrouping>
}
 8003446:	bf00      	nop
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b086      	sub	sp, #24
 8003452:	af00      	add	r7, sp, #0
 8003454:	4603      	mov	r3, r0
 8003456:	60b9      	str	r1, [r7, #8]
 8003458:	607a      	str	r2, [r7, #4]
 800345a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800345c:	f7ff fee2 	bl	8003224 <__NVIC_GetPriorityGrouping>
 8003460:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	68b9      	ldr	r1, [r7, #8]
 8003466:	6978      	ldr	r0, [r7, #20]
 8003468:	f7ff ff90 	bl	800338c <NVIC_EncodePriority>
 800346c:	4602      	mov	r2, r0
 800346e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003472:	4611      	mov	r1, r2
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff ff5f 	bl	8003338 <__NVIC_SetPriority>
}
 800347a:	bf00      	nop
 800347c:	3718      	adds	r7, #24
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b082      	sub	sp, #8
 8003486:	af00      	add	r7, sp, #0
 8003488:	4603      	mov	r3, r0
 800348a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800348c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff fed5 	bl	8003240 <__NVIC_EnableIRQ>
}
 8003496:	bf00      	nop
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b082      	sub	sp, #8
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	4603      	mov	r3, r0
 80034a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80034a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff fee5 	bl	800327c <__NVIC_DisableIRQ>
}
 80034b2:	bf00      	nop
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b082      	sub	sp, #8
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7ff ff96 	bl	80033f4 <SysTick_Config>
 80034c8:	4603      	mov	r3, r0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b082      	sub	sp, #8
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	4603      	mov	r3, r0
 80034da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80034dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff feed 	bl	80032c0 <__NVIC_SetPendingIRQ>
}
 80034e6:	bf00      	nop
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b082      	sub	sp, #8
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	4603      	mov	r3, r0
 80034f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80034f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff fefd 	bl	80032fc <__NVIC_ClearPendingIRQ>
}
 8003502:	bf00      	nop
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800350c:	b480      	push	{r7}
 800350e:	b087      	sub	sp, #28
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003516:	2300      	movs	r3, #0
 8003518:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800351a:	e14c      	b.n	80037b6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	2101      	movs	r1, #1
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	fa01 f303 	lsl.w	r3, r1, r3
 8003528:	4013      	ands	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 813e 	beq.w	80037b0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	2b02      	cmp	r3, #2
 800353a:	d003      	beq.n	8003544 <HAL_GPIO_Init+0x38>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2b12      	cmp	r3, #18
 8003542:	d123      	bne.n	800358c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	08da      	lsrs	r2, r3, #3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3208      	adds	r2, #8
 800354c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003550:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	220f      	movs	r2, #15
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	43db      	mvns	r3, r3
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	4013      	ands	r3, r2
 8003566:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	691a      	ldr	r2, [r3, #16]
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	4313      	orrs	r3, r2
 800357c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	08da      	lsrs	r2, r3, #3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	3208      	adds	r2, #8
 8003586:	6939      	ldr	r1, [r7, #16]
 8003588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	2203      	movs	r2, #3
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	43db      	mvns	r3, r3
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4013      	ands	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 0203 	and.w	r2, r3, #3
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d00b      	beq.n	80035e0 <HAL_GPIO_Init+0xd4>
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d007      	beq.n	80035e0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035d4:	2b11      	cmp	r3, #17
 80035d6:	d003      	beq.n	80035e0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2b12      	cmp	r3, #18
 80035de:	d130      	bne.n	8003642 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	2203      	movs	r2, #3
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	43db      	mvns	r3, r3
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	4013      	ands	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	68da      	ldr	r2, [r3, #12]
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003616:	2201      	movs	r2, #1
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	43db      	mvns	r3, r3
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	4013      	ands	r3, r2
 8003624:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	091b      	lsrs	r3, r3, #4
 800362c:	f003 0201 	and.w	r2, r3, #1
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	2203      	movs	r2, #3
 800364e:	fa02 f303 	lsl.w	r3, r2, r3
 8003652:	43db      	mvns	r3, r3
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4013      	ands	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	4313      	orrs	r3, r2
 800366a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 8098 	beq.w	80037b0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003680:	4a54      	ldr	r2, [pc, #336]	; (80037d4 <HAL_GPIO_Init+0x2c8>)
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	089b      	lsrs	r3, r3, #2
 8003686:	3302      	adds	r3, #2
 8003688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800368c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f003 0303 	and.w	r3, r3, #3
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	220f      	movs	r2, #15
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	43db      	mvns	r3, r3
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	4013      	ands	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036aa:	d019      	beq.n	80036e0 <HAL_GPIO_Init+0x1d4>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a4a      	ldr	r2, [pc, #296]	; (80037d8 <HAL_GPIO_Init+0x2cc>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d013      	beq.n	80036dc <HAL_GPIO_Init+0x1d0>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a49      	ldr	r2, [pc, #292]	; (80037dc <HAL_GPIO_Init+0x2d0>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d00d      	beq.n	80036d8 <HAL_GPIO_Init+0x1cc>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a48      	ldr	r2, [pc, #288]	; (80037e0 <HAL_GPIO_Init+0x2d4>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d007      	beq.n	80036d4 <HAL_GPIO_Init+0x1c8>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a47      	ldr	r2, [pc, #284]	; (80037e4 <HAL_GPIO_Init+0x2d8>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d101      	bne.n	80036d0 <HAL_GPIO_Init+0x1c4>
 80036cc:	2304      	movs	r3, #4
 80036ce:	e008      	b.n	80036e2 <HAL_GPIO_Init+0x1d6>
 80036d0:	2307      	movs	r3, #7
 80036d2:	e006      	b.n	80036e2 <HAL_GPIO_Init+0x1d6>
 80036d4:	2303      	movs	r3, #3
 80036d6:	e004      	b.n	80036e2 <HAL_GPIO_Init+0x1d6>
 80036d8:	2302      	movs	r3, #2
 80036da:	e002      	b.n	80036e2 <HAL_GPIO_Init+0x1d6>
 80036dc:	2301      	movs	r3, #1
 80036de:	e000      	b.n	80036e2 <HAL_GPIO_Init+0x1d6>
 80036e0:	2300      	movs	r3, #0
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	f002 0203 	and.w	r2, r2, #3
 80036e8:	0092      	lsls	r2, r2, #2
 80036ea:	4093      	lsls	r3, r2
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80036f2:	4938      	ldr	r1, [pc, #224]	; (80037d4 <HAL_GPIO_Init+0x2c8>)
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	089b      	lsrs	r3, r3, #2
 80036f8:	3302      	adds	r3, #2
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003700:	4b39      	ldr	r3, [pc, #228]	; (80037e8 <HAL_GPIO_Init+0x2dc>)
 8003702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003706:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	43db      	mvns	r3, r3
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	4013      	ands	r3, r2
 8003710:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4313      	orrs	r3, r2
 8003724:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003726:	4a30      	ldr	r2, [pc, #192]	; (80037e8 <HAL_GPIO_Init+0x2dc>)
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800372e:	4b2e      	ldr	r3, [pc, #184]	; (80037e8 <HAL_GPIO_Init+0x2dc>)
 8003730:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003734:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	43db      	mvns	r3, r3
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	4013      	ands	r3, r2
 800373e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d003      	beq.n	8003754 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	4313      	orrs	r3, r2
 8003752:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003754:	4a24      	ldr	r2, [pc, #144]	; (80037e8 <HAL_GPIO_Init+0x2dc>)
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800375c:	4b22      	ldr	r3, [pc, #136]	; (80037e8 <HAL_GPIO_Init+0x2dc>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	43db      	mvns	r3, r3
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	4013      	ands	r3, r2
 800376a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003780:	4a19      	ldr	r2, [pc, #100]	; (80037e8 <HAL_GPIO_Init+0x2dc>)
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003786:	4b18      	ldr	r3, [pc, #96]	; (80037e8 <HAL_GPIO_Init+0x2dc>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	43db      	mvns	r3, r3
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	4013      	ands	r3, r2
 8003794:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037aa:	4a0f      	ldr	r2, [pc, #60]	; (80037e8 <HAL_GPIO_Init+0x2dc>)
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	3301      	adds	r3, #1
 80037b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	fa22 f303 	lsr.w	r3, r2, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f47f aeab 	bne.w	800351c <HAL_GPIO_Init+0x10>
  }
}
 80037c6:	bf00      	nop
 80037c8:	371c      	adds	r7, #28
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	40010000 	.word	0x40010000
 80037d8:	48000400 	.word	0x48000400
 80037dc:	48000800 	.word	0x48000800
 80037e0:	48000c00 	.word	0x48000c00
 80037e4:	48001000 	.word	0x48001000
 80037e8:	58000800 	.word	0x58000800

080037ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	460b      	mov	r3, r1
 80037f6:	807b      	strh	r3, [r7, #2]
 80037f8:	4613      	mov	r3, r2
 80037fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037fc:	787b      	ldrb	r3, [r7, #1]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003802:	887a      	ldrh	r2, [r7, #2]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003808:	e002      	b.n	8003810 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800380a:	887a      	ldrh	r2, [r7, #2]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	460b      	mov	r3, r1
 8003826:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	695a      	ldr	r2, [r3, #20]
 800382c:	887b      	ldrh	r3, [r7, #2]
 800382e:	4013      	ands	r3, r2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d003      	beq.n	800383c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003834:	887a      	ldrh	r2, [r7, #2]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800383a:	e002      	b.n	8003842 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800383c:	887a      	ldrh	r2, [r7, #2]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	619a      	str	r2, [r3, #24]
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
	...

08003850 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003856:	4b0a      	ldr	r3, [pc, #40]	; (8003880 <HAL_HSEM_IRQHandler+0x30>)
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800385c:	4b08      	ldr	r3, [pc, #32]	; (8003880 <HAL_HSEM_IRQHandler+0x30>)
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	43db      	mvns	r3, r3
 8003864:	4906      	ldr	r1, [pc, #24]	; (8003880 <HAL_HSEM_IRQHandler+0x30>)
 8003866:	4013      	ands	r3, r2
 8003868:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800386a:	4a05      	ldr	r2, [pc, #20]	; (8003880 <HAL_HSEM_IRQHandler+0x30>)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f807 	bl	8003884 <HAL_HSEM_FreeCallback>
}
 8003876:	bf00      	nop
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	58001500 	.word	0x58001500

08003884 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e081      	b.n	80039ae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d106      	bne.n	80038c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7fe f94c 	bl	8001b5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2224      	movs	r2, #36	; 0x24
 80038c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0201 	bic.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d107      	bne.n	8003912 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	689a      	ldr	r2, [r3, #8]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800390e:	609a      	str	r2, [r3, #8]
 8003910:	e006      	b.n	8003920 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689a      	ldr	r2, [r3, #8]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800391e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	2b02      	cmp	r3, #2
 8003926:	d104      	bne.n	8003932 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003930:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6812      	ldr	r2, [r2, #0]
 800393c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003940:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003944:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68da      	ldr	r2, [r3, #12]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003954:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691a      	ldr	r2, [r3, #16]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	ea42 0103 	orr.w	r1, r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	021a      	lsls	r2, r3, #8
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	69d9      	ldr	r1, [r3, #28]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a1a      	ldr	r2, [r3, #32]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 0201 	orr.w	r2, r2, #1
 800398e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2220      	movs	r2, #32
 800399a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
	...

080039b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b088      	sub	sp, #32
 80039bc:	af02      	add	r7, sp, #8
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	607a      	str	r2, [r7, #4]
 80039c2:	461a      	mov	r2, r3
 80039c4:	460b      	mov	r3, r1
 80039c6:	817b      	strh	r3, [r7, #10]
 80039c8:	4613      	mov	r3, r2
 80039ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b20      	cmp	r3, #32
 80039d6:	f040 80da 	bne.w	8003b8e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d101      	bne.n	80039e8 <HAL_I2C_Master_Transmit+0x30>
 80039e4:	2302      	movs	r3, #2
 80039e6:	e0d3      	b.n	8003b90 <HAL_I2C_Master_Transmit+0x1d8>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80039f0:	f7ff fbba 	bl	8003168 <HAL_GetTick>
 80039f4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	2319      	movs	r3, #25
 80039fc:	2201      	movs	r2, #1
 80039fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f000 f9e6 	bl	8003dd4 <I2C_WaitOnFlagUntilTimeout>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e0be      	b.n	8003b90 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2221      	movs	r2, #33	; 0x21
 8003a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2210      	movs	r2, #16
 8003a1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	893a      	ldrh	r2, [r7, #8]
 8003a32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	2bff      	cmp	r3, #255	; 0xff
 8003a42:	d90e      	bls.n	8003a62 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	22ff      	movs	r2, #255	; 0xff
 8003a48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a4e:	b2da      	uxtb	r2, r3
 8003a50:	8979      	ldrh	r1, [r7, #10]
 8003a52:	4b51      	ldr	r3, [pc, #324]	; (8003b98 <HAL_I2C_Master_Transmit+0x1e0>)
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 fb48 	bl	80040f0 <I2C_TransferConfig>
 8003a60:	e06c      	b.n	8003b3c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	8979      	ldrh	r1, [r7, #10]
 8003a74:	4b48      	ldr	r3, [pc, #288]	; (8003b98 <HAL_I2C_Master_Transmit+0x1e0>)
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 fb37 	bl	80040f0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003a82:	e05b      	b.n	8003b3c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	6a39      	ldr	r1, [r7, #32]
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 f9e3 	bl	8003e54 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d001      	beq.n	8003a98 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e07b      	b.n	8003b90 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	781a      	ldrb	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	1c5a      	adds	r2, r3, #1
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d034      	beq.n	8003b3c <HAL_I2C_Master_Transmit+0x184>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d130      	bne.n	8003b3c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	6a3b      	ldr	r3, [r7, #32]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	2180      	movs	r1, #128	; 0x80
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f000 f975 	bl	8003dd4 <I2C_WaitOnFlagUntilTimeout>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e04d      	b.n	8003b90 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	2bff      	cmp	r3, #255	; 0xff
 8003afc:	d90e      	bls.n	8003b1c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	22ff      	movs	r2, #255	; 0xff
 8003b02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	8979      	ldrh	r1, [r7, #10]
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 faeb 	bl	80040f0 <I2C_TransferConfig>
 8003b1a:	e00f      	b.n	8003b3c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	8979      	ldrh	r1, [r7, #10]
 8003b2e:	2300      	movs	r3, #0
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f000 fada 	bl	80040f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d19e      	bne.n	8003a84 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	6a39      	ldr	r1, [r7, #32]
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f000 f9c2 	bl	8003ed4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e01a      	b.n	8003b90 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6859      	ldr	r1, [r3, #4]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	4b0b      	ldr	r3, [pc, #44]	; (8003b9c <HAL_I2C_Master_Transmit+0x1e4>)
 8003b6e:	400b      	ands	r3, r1
 8003b70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2220      	movs	r2, #32
 8003b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	e000      	b.n	8003b90 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003b8e:	2302      	movs	r3, #2
  }
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3718      	adds	r7, #24
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	80002000 	.word	0x80002000
 8003b9c:	fe00e800 	.word	0xfe00e800

08003ba0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b088      	sub	sp, #32
 8003ba4:	af02      	add	r7, sp, #8
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	607a      	str	r2, [r7, #4]
 8003baa:	461a      	mov	r2, r3
 8003bac:	460b      	mov	r3, r1
 8003bae:	817b      	strh	r3, [r7, #10]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b20      	cmp	r3, #32
 8003bbe:	f040 80db 	bne.w	8003d78 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d101      	bne.n	8003bd0 <HAL_I2C_Master_Receive+0x30>
 8003bcc:	2302      	movs	r3, #2
 8003bce:	e0d4      	b.n	8003d7a <HAL_I2C_Master_Receive+0x1da>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003bd8:	f7ff fac6 	bl	8003168 <HAL_GetTick>
 8003bdc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	2319      	movs	r3, #25
 8003be4:	2201      	movs	r2, #1
 8003be6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 f8f2 	bl	8003dd4 <I2C_WaitOnFlagUntilTimeout>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e0bf      	b.n	8003d7a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2222      	movs	r2, #34	; 0x22
 8003bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2210      	movs	r2, #16
 8003c06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	893a      	ldrh	r2, [r7, #8]
 8003c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	2bff      	cmp	r3, #255	; 0xff
 8003c2a:	d90e      	bls.n	8003c4a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	22ff      	movs	r2, #255	; 0xff
 8003c30:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c36:	b2da      	uxtb	r2, r3
 8003c38:	8979      	ldrh	r1, [r7, #10]
 8003c3a:	4b52      	ldr	r3, [pc, #328]	; (8003d84 <HAL_I2C_Master_Receive+0x1e4>)
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 fa54 	bl	80040f0 <I2C_TransferConfig>
 8003c48:	e06d      	b.n	8003d26 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	8979      	ldrh	r1, [r7, #10]
 8003c5c:	4b49      	ldr	r3, [pc, #292]	; (8003d84 <HAL_I2C_Master_Receive+0x1e4>)
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 fa43 	bl	80040f0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003c6a:	e05c      	b.n	8003d26 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	6a39      	ldr	r1, [r7, #32]
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f000 f96b 	bl	8003f4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e07c      	b.n	8003d7a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	b2d2      	uxtb	r2, r2
 8003c8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	3b01      	subs	r3, #1
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d034      	beq.n	8003d26 <HAL_I2C_Master_Receive+0x186>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d130      	bne.n	8003d26 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	2180      	movs	r1, #128	; 0x80
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 f880 	bl	8003dd4 <I2C_WaitOnFlagUntilTimeout>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e04d      	b.n	8003d7a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	2bff      	cmp	r3, #255	; 0xff
 8003ce6:	d90e      	bls.n	8003d06 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	22ff      	movs	r2, #255	; 0xff
 8003cec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	8979      	ldrh	r1, [r7, #10]
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 f9f6 	bl	80040f0 <I2C_TransferConfig>
 8003d04:	e00f      	b.n	8003d26 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d14:	b2da      	uxtb	r2, r3
 8003d16:	8979      	ldrh	r1, [r7, #10]
 8003d18:	2300      	movs	r3, #0
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 f9e5 	bl	80040f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d19d      	bne.n	8003c6c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	6a39      	ldr	r1, [r7, #32]
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 f8cd 	bl	8003ed4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e01a      	b.n	8003d7a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2220      	movs	r2, #32
 8003d4a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6859      	ldr	r1, [r3, #4]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	4b0c      	ldr	r3, [pc, #48]	; (8003d88 <HAL_I2C_Master_Receive+0x1e8>)
 8003d58:	400b      	ands	r3, r1
 8003d5a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d74:	2300      	movs	r3, #0
 8003d76:	e000      	b.n	8003d7a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003d78:	2302      	movs	r3, #2
  }
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3718      	adds	r7, #24
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	80002400 	.word	0x80002400
 8003d88:	fe00e800 	.word	0xfe00e800

08003d8c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d103      	bne.n	8003daa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2200      	movs	r2, #0
 8003da8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d007      	beq.n	8003dc8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	699a      	ldr	r2, [r3, #24]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 0201 	orr.w	r2, r2, #1
 8003dc6:	619a      	str	r2, [r3, #24]
  }
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	603b      	str	r3, [r7, #0]
 8003de0:	4613      	mov	r3, r2
 8003de2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003de4:	e022      	b.n	8003e2c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dec:	d01e      	beq.n	8003e2c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dee:	f7ff f9bb 	bl	8003168 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d302      	bcc.n	8003e04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d113      	bne.n	8003e2c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e08:	f043 0220 	orr.w	r2, r3, #32
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2220      	movs	r2, #32
 8003e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e00f      	b.n	8003e4c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	699a      	ldr	r2, [r3, #24]
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	4013      	ands	r3, r2
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	bf0c      	ite	eq
 8003e3c:	2301      	moveq	r3, #1
 8003e3e:	2300      	movne	r3, #0
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	461a      	mov	r2, r3
 8003e44:	79fb      	ldrb	r3, [r7, #7]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d0cd      	beq.n	8003de6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3710      	adds	r7, #16
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e60:	e02c      	b.n	8003ebc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	68b9      	ldr	r1, [r7, #8]
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f000 f8dc 	bl	8004024 <I2C_IsAcknowledgeFailed>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e02a      	b.n	8003ecc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e7c:	d01e      	beq.n	8003ebc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e7e:	f7ff f973 	bl	8003168 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d302      	bcc.n	8003e94 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d113      	bne.n	8003ebc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e98:	f043 0220 	orr.w	r2, r3, #32
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e007      	b.n	8003ecc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d1cb      	bne.n	8003e62 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ee0:	e028      	b.n	8003f34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	68b9      	ldr	r1, [r7, #8]
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 f89c 	bl	8004024 <I2C_IsAcknowledgeFailed>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e026      	b.n	8003f44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ef6:	f7ff f937 	bl	8003168 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	68ba      	ldr	r2, [r7, #8]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d302      	bcc.n	8003f0c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d113      	bne.n	8003f34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f10:	f043 0220 	orr.w	r2, r3, #32
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e007      	b.n	8003f44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	f003 0320 	and.w	r3, r3, #32
 8003f3e:	2b20      	cmp	r3, #32
 8003f40:	d1cf      	bne.n	8003ee2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f58:	e055      	b.n	8004006 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	68b9      	ldr	r1, [r7, #8]
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 f860 	bl	8004024 <I2C_IsAcknowledgeFailed>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e053      	b.n	8004016 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	f003 0320 	and.w	r3, r3, #32
 8003f78:	2b20      	cmp	r3, #32
 8003f7a:	d129      	bne.n	8003fd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	f003 0304 	and.w	r3, r3, #4
 8003f86:	2b04      	cmp	r3, #4
 8003f88:	d105      	bne.n	8003f96 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003f92:	2300      	movs	r3, #0
 8003f94:	e03f      	b.n	8004016 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6859      	ldr	r1, [r3, #4]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	4b1d      	ldr	r3, [pc, #116]	; (8004020 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003faa:	400b      	ands	r3, r1
 8003fac:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e022      	b.n	8004016 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fd0:	f7ff f8ca 	bl	8003168 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d302      	bcc.n	8003fe6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10f      	bne.n	8004006 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fea:	f043 0220 	orr.w	r2, r3, #32
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e007      	b.n	8004016 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b04      	cmp	r3, #4
 8004012:	d1a2      	bne.n	8003f5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	fe00e800 	.word	0xfe00e800

08004024 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	f003 0310 	and.w	r3, r3, #16
 800403a:	2b10      	cmp	r3, #16
 800403c:	d151      	bne.n	80040e2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800403e:	e022      	b.n	8004086 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004046:	d01e      	beq.n	8004086 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004048:	f7ff f88e 	bl	8003168 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	429a      	cmp	r2, r3
 8004056:	d302      	bcc.n	800405e <I2C_IsAcknowledgeFailed+0x3a>
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d113      	bne.n	8004086 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004062:	f043 0220 	orr.w	r2, r3, #32
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2220      	movs	r2, #32
 800406e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e02e      	b.n	80040e4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	f003 0320 	and.w	r3, r3, #32
 8004090:	2b20      	cmp	r3, #32
 8004092:	d1d5      	bne.n	8004040 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2210      	movs	r2, #16
 800409a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2220      	movs	r2, #32
 80040a2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f7ff fe71 	bl	8003d8c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6859      	ldr	r1, [r3, #4]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	4b0d      	ldr	r3, [pc, #52]	; (80040ec <I2C_IsAcknowledgeFailed+0xc8>)
 80040b6:	400b      	ands	r3, r1
 80040b8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040be:	f043 0204 	orr.w	r2, r3, #4
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e000      	b.n	80040e4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	fe00e800 	.word	0xfe00e800

080040f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	607b      	str	r3, [r7, #4]
 80040fa:	460b      	mov	r3, r1
 80040fc:	817b      	strh	r3, [r7, #10]
 80040fe:	4613      	mov	r3, r2
 8004100:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	0d5b      	lsrs	r3, r3, #21
 800410c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004110:	4b0d      	ldr	r3, [pc, #52]	; (8004148 <I2C_TransferConfig+0x58>)
 8004112:	430b      	orrs	r3, r1
 8004114:	43db      	mvns	r3, r3
 8004116:	ea02 0103 	and.w	r1, r2, r3
 800411a:	897b      	ldrh	r3, [r7, #10]
 800411c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004120:	7a7b      	ldrb	r3, [r7, #9]
 8004122:	041b      	lsls	r3, r3, #16
 8004124:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004128:	431a      	orrs	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	431a      	orrs	r2, r3
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	431a      	orrs	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800413a:	bf00      	nop
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	03ff63ff 	.word	0x03ff63ff

0800414c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b20      	cmp	r3, #32
 8004160:	d138      	bne.n	80041d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004168:	2b01      	cmp	r3, #1
 800416a:	d101      	bne.n	8004170 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800416c:	2302      	movs	r3, #2
 800416e:	e032      	b.n	80041d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2224      	movs	r2, #36	; 0x24
 800417c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0201 	bic.w	r2, r2, #1
 800418e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800419e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6819      	ldr	r1, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0201 	orr.w	r2, r2, #1
 80041be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041d0:	2300      	movs	r3, #0
 80041d2:	e000      	b.n	80041d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80041d4:	2302      	movs	r3, #2
  }
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b085      	sub	sp, #20
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
 80041ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b20      	cmp	r3, #32
 80041f6:	d139      	bne.n	800426c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d101      	bne.n	8004206 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004202:	2302      	movs	r3, #2
 8004204:	e033      	b.n	800426e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2224      	movs	r2, #36	; 0x24
 8004212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 0201 	bic.w	r2, r2, #1
 8004224:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004234:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	021b      	lsls	r3, r3, #8
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	4313      	orrs	r3, r2
 800423e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0201 	orr.w	r2, r2, #1
 8004256:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2220      	movs	r2, #32
 800425c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004268:	2300      	movs	r3, #0
 800426a:	e000      	b.n	800426e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800426c:	2302      	movs	r3, #2
  }
}
 800426e:	4618      	mov	r0, r3
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800427a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800427c:	b08b      	sub	sp, #44	; 0x2c
 800427e:	af06      	add	r7, sp, #24
 8004280:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e0ad      	b.n	80043e8 <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	d106      	bne.n	80042a6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f7fe fe8d 	bl	8002fc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2203      	movs	r2, #3
 80042aa:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f004 fc68 	bl	8008b88 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042b8:	2300      	movs	r3, #0
 80042ba:	73fb      	strb	r3, [r7, #15]
 80042bc:	e035      	b.n	800432a <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80042be:	7bfb      	ldrb	r3, [r7, #15]
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	015b      	lsls	r3, r3, #5
 80042c4:	4413      	add	r3, r2
 80042c6:	3329      	adds	r3, #41	; 0x29
 80042c8:	2201      	movs	r2, #1
 80042ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	015b      	lsls	r3, r3, #5
 80042d2:	4413      	add	r3, r2
 80042d4:	3328      	adds	r3, #40	; 0x28
 80042d6:	7bfa      	ldrb	r2, [r7, #15]
 80042d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80042da:	7bfb      	ldrb	r3, [r7, #15]
 80042dc:	7bfa      	ldrb	r2, [r7, #15]
 80042de:	b291      	uxth	r1, r2
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	015b      	lsls	r3, r3, #5
 80042e4:	4413      	add	r3, r2
 80042e6:	3336      	adds	r3, #54	; 0x36
 80042e8:	460a      	mov	r2, r1
 80042ea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	015b      	lsls	r3, r3, #5
 80042f2:	4413      	add	r3, r2
 80042f4:	332b      	adds	r3, #43	; 0x2b
 80042f6:	2200      	movs	r2, #0
 80042f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80042fa:	7bfb      	ldrb	r3, [r7, #15]
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	015b      	lsls	r3, r3, #5
 8004300:	4413      	add	r3, r2
 8004302:	3338      	adds	r3, #56	; 0x38
 8004304:	2200      	movs	r2, #0
 8004306:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004308:	7bfb      	ldrb	r3, [r7, #15]
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	015b      	lsls	r3, r3, #5
 800430e:	4413      	add	r3, r2
 8004310:	333c      	adds	r3, #60	; 0x3c
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004316:	7bfb      	ldrb	r3, [r7, #15]
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	3302      	adds	r3, #2
 800431c:	015b      	lsls	r3, r3, #5
 800431e:	4413      	add	r3, r2
 8004320:	2200      	movs	r2, #0
 8004322:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004324:	7bfb      	ldrb	r3, [r7, #15]
 8004326:	3301      	adds	r3, #1
 8004328:	73fb      	strb	r3, [r7, #15]
 800432a:	7bfa      	ldrb	r2, [r7, #15]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	429a      	cmp	r2, r3
 8004332:	d3c4      	bcc.n	80042be <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004334:	2300      	movs	r3, #0
 8004336:	73fb      	strb	r3, [r7, #15]
 8004338:	e031      	b.n	800439e <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800433a:	7bfb      	ldrb	r3, [r7, #15]
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	015b      	lsls	r3, r3, #5
 8004340:	4413      	add	r3, r2
 8004342:	f203 1329 	addw	r3, r3, #297	; 0x129
 8004346:	2200      	movs	r2, #0
 8004348:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800434a:	7bfb      	ldrb	r3, [r7, #15]
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	015b      	lsls	r3, r3, #5
 8004350:	4413      	add	r3, r2
 8004352:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004356:	7bfa      	ldrb	r2, [r7, #15]
 8004358:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800435a:	7bfb      	ldrb	r3, [r7, #15]
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	015b      	lsls	r3, r3, #5
 8004360:	4413      	add	r3, r2
 8004362:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8004366:	2200      	movs	r2, #0
 8004368:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800436a:	7bfb      	ldrb	r3, [r7, #15]
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	015b      	lsls	r3, r3, #5
 8004370:	4413      	add	r3, r2
 8004372:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8004376:	2200      	movs	r2, #0
 8004378:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800437a:	7bfb      	ldrb	r3, [r7, #15]
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	015b      	lsls	r3, r3, #5
 8004380:	4413      	add	r3, r2
 8004382:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004386:	2200      	movs	r2, #0
 8004388:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800438a:	7bfb      	ldrb	r3, [r7, #15]
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	330a      	adds	r3, #10
 8004390:	015b      	lsls	r3, r3, #5
 8004392:	4413      	add	r3, r2
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004398:	7bfb      	ldrb	r3, [r7, #15]
 800439a:	3301      	adds	r3, #1
 800439c:	73fb      	strb	r3, [r7, #15]
 800439e:	7bfa      	ldrb	r2, [r7, #15]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d3c8      	bcc.n	800433a <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	603b      	str	r3, [r7, #0]
 80043ae:	687e      	ldr	r6, [r7, #4]
 80043b0:	466d      	mov	r5, sp
 80043b2:	f106 0410 	add.w	r4, r6, #16
 80043b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043ba:	6823      	ldr	r3, [r4, #0]
 80043bc:	602b      	str	r3, [r5, #0]
 80043be:	1d33      	adds	r3, r6, #4
 80043c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043c2:	6838      	ldr	r0, [r7, #0]
 80043c4:	f004 fbfd 	bl	8008bc2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	69db      	ldr	r3, [r3, #28]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d102      	bne.n	80043e6 <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f805 	bl	80043f0 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3714      	adds	r7, #20
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080043f0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004414:	b29b      	uxth	r3, r3
 8004416:	f043 0301 	orr.w	r3, r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004428:	b29b      	uxth	r3, r3
 800442a:	f043 0302 	orr.w	r3, r3, #2
 800442e:	b29a      	uxth	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3714      	adds	r7, #20
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004448:	4b05      	ldr	r3, [pc, #20]	; (8004460 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a04      	ldr	r2, [pc, #16]	; (8004460 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800444e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004452:	6013      	str	r3, [r2, #0]
}
 8004454:	bf00      	nop
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	58000400 	.word	0x58000400

08004464 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004468:	4b04      	ldr	r3, [pc, #16]	; (800447c <HAL_PWREx_GetVoltageRange+0x18>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004470:	4618      	mov	r0, r3
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	58000400 	.word	0x58000400

08004480 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004480:	b480      	push	{r7}
 8004482:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800448e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004492:	d101      	bne.n	8004498 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004494:	2301      	movs	r3, #1
 8004496:	e000      	b.n	800449a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <LL_RCC_HSE_EnableBypass>:
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80044a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044b6:	6013      	str	r3, [r2, #0]
}
 80044b8:	bf00      	nop
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <LL_RCC_HSE_DisableBypass>:
{
 80044c2:	b480      	push	{r7}
 80044c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80044c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044d4:	6013      	str	r3, [r2, #0]
}
 80044d6:	bf00      	nop
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <LL_RCC_HSE_Enable>:
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80044e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044f2:	6013      	str	r3, [r2, #0]
}
 80044f4:	bf00      	nop
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <LL_RCC_HSE_Disable>:
{
 80044fe:	b480      	push	{r7}
 8004500:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800450c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004510:	6013      	str	r3, [r2, #0]
}
 8004512:	bf00      	nop
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <LL_RCC_HSE_IsReady>:
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800452e:	d101      	bne.n	8004534 <LL_RCC_HSE_IsReady+0x18>
 8004530:	2301      	movs	r3, #1
 8004532:	e000      	b.n	8004536 <LL_RCC_HSE_IsReady+0x1a>
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <LL_RCC_HSI_Enable>:
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800454e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004552:	6013      	str	r3, [r2, #0]
}
 8004554:	bf00      	nop
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <LL_RCC_HSI_Disable>:
{
 800455e:	b480      	push	{r7}
 8004560:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800456c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004570:	6013      	str	r3, [r2, #0]
}
 8004572:	bf00      	nop
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <LL_RCC_HSI_IsReady>:
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800458a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800458e:	d101      	bne.n	8004594 <LL_RCC_HSI_IsReady+0x18>
 8004590:	2301      	movs	r3, #1
 8004592:	e000      	b.n	8004596 <LL_RCC_HSI_IsReady+0x1a>
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <LL_RCC_HSI_SetCalibTrimming>:
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80045a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	061b      	lsls	r3, r3, #24
 80045b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045ba:	4313      	orrs	r3, r2
 80045bc:	604b      	str	r3, [r1, #4]
}
 80045be:	bf00      	nop
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <LL_RCC_HSI48_Enable>:
{
 80045ca:	b480      	push	{r7}
 80045cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80045ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045da:	f043 0301 	orr.w	r3, r3, #1
 80045de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80045e2:	bf00      	nop
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <LL_RCC_HSI48_Disable>:
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80045f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045fc:	f023 0301 	bic.w	r3, r3, #1
 8004600:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004604:	bf00      	nop
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <LL_RCC_HSI48_IsReady>:
{
 800460e:	b480      	push	{r7}
 8004610:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004616:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b02      	cmp	r3, #2
 8004620:	d101      	bne.n	8004626 <LL_RCC_HSI48_IsReady+0x18>
 8004622:	2301      	movs	r3, #1
 8004624:	e000      	b.n	8004628 <LL_RCC_HSI48_IsReady+0x1a>
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <LL_RCC_LSE_Enable>:
{
 8004632:	b480      	push	{r7}
 8004634:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800463a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004642:	f043 0301 	orr.w	r3, r3, #1
 8004646:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800464a:	bf00      	nop
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <LL_RCC_LSE_Disable>:
{
 8004654:	b480      	push	{r7}
 8004656:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004658:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800465c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004660:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004664:	f023 0301 	bic.w	r3, r3, #1
 8004668:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800466c:	bf00      	nop
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <LL_RCC_LSE_EnableBypass>:
{
 8004676:	b480      	push	{r7}
 8004678:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800467a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800467e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004682:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004686:	f043 0304 	orr.w	r3, r3, #4
 800468a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800468e:	bf00      	nop
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <LL_RCC_LSE_DisableBypass>:
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800469c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046a8:	f023 0304 	bic.w	r3, r3, #4
 80046ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80046b0:	bf00      	nop
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <LL_RCC_LSE_IsReady>:
{
 80046ba:	b480      	push	{r7}
 80046bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80046be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d101      	bne.n	80046d2 <LL_RCC_LSE_IsReady+0x18>
 80046ce:	2301      	movs	r3, #1
 80046d0:	e000      	b.n	80046d4 <LL_RCC_LSE_IsReady+0x1a>
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <LL_RCC_LSI1_Enable>:
{
 80046de:	b480      	push	{r7}
 80046e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80046e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046ee:	f043 0301 	orr.w	r3, r3, #1
 80046f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80046f6:	bf00      	nop
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <LL_RCC_LSI1_Disable>:
{
 8004700:	b480      	push	{r7}
 8004702:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004708:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800470c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004710:	f023 0301 	bic.w	r3, r3, #1
 8004714:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004718:	bf00      	nop
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <LL_RCC_LSI1_IsReady>:
{
 8004722:	b480      	push	{r7}
 8004724:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800472a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b02      	cmp	r3, #2
 8004734:	d101      	bne.n	800473a <LL_RCC_LSI1_IsReady+0x18>
 8004736:	2301      	movs	r3, #1
 8004738:	e000      	b.n	800473c <LL_RCC_LSI1_IsReady+0x1a>
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <LL_RCC_LSI2_Enable>:
{
 8004746:	b480      	push	{r7}
 8004748:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800474a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800474e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004752:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004756:	f043 0304 	orr.w	r3, r3, #4
 800475a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800475e:	bf00      	nop
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <LL_RCC_LSI2_Disable>:
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800476c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004770:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004774:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004778:	f023 0304 	bic.w	r3, r3, #4
 800477c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004780:	bf00      	nop
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <LL_RCC_LSI2_IsReady>:
{
 800478a:	b480      	push	{r7}
 800478c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800478e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004796:	f003 0308 	and.w	r3, r3, #8
 800479a:	2b08      	cmp	r3, #8
 800479c:	d101      	bne.n	80047a2 <LL_RCC_LSI2_IsReady+0x18>
 800479e:	2301      	movs	r3, #1
 80047a0:	e000      	b.n	80047a4 <LL_RCC_LSI2_IsReady+0x1a>
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <LL_RCC_LSI2_SetTrimming>:
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80047b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047be:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	021b      	lsls	r3, r3, #8
 80047c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047ca:	4313      	orrs	r3, r2
 80047cc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <LL_RCC_MSI_Enable>:
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80047e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047ea:	f043 0301 	orr.w	r3, r3, #1
 80047ee:	6013      	str	r3, [r2, #0]
}
 80047f0:	bf00      	nop
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <LL_RCC_MSI_Disable>:
{
 80047fa:	b480      	push	{r7}
 80047fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80047fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004808:	f023 0301 	bic.w	r3, r3, #1
 800480c:	6013      	str	r3, [r2, #0]
}
 800480e:	bf00      	nop
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <LL_RCC_MSI_IsReady>:
{
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800481c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b02      	cmp	r3, #2
 8004828:	d101      	bne.n	800482e <LL_RCC_MSI_IsReady+0x16>
 800482a:	2301      	movs	r3, #1
 800482c:	e000      	b.n	8004830 <LL_RCC_MSI_IsReady+0x18>
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <LL_RCC_MSI_SetRange>:
{
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800484c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4313      	orrs	r3, r2
 8004854:	600b      	str	r3, [r1, #0]
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <LL_RCC_MSI_GetRange>:
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004872:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2bb0      	cmp	r3, #176	; 0xb0
 8004878:	d901      	bls.n	800487e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800487a:	23b0      	movs	r3, #176	; 0xb0
 800487c:	607b      	str	r3, [r7, #4]
  return msiRange;
 800487e:	687b      	ldr	r3, [r7, #4]
}
 8004880:	4618      	mov	r0, r3
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <LL_RCC_MSI_SetCalibTrimming>:
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	021b      	lsls	r3, r3, #8
 80048a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048a6:	4313      	orrs	r3, r2
 80048a8:	604b      	str	r3, [r1, #4]
}
 80048aa:	bf00      	nop
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <LL_RCC_SetSysClkSource>:
{
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80048be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f023 0203 	bic.w	r2, r3, #3
 80048c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	608b      	str	r3, [r1, #8]
}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <LL_RCC_GetSysClkSource>:
{
 80048de:	b480      	push	{r7}
 80048e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80048e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f003 030c 	and.w	r3, r3, #12
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <LL_RCC_SetAHBPrescaler>:
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80048fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004908:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4313      	orrs	r3, r2
 8004910:	608b      	str	r3, [r1, #8]
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <LL_C2_RCC_SetAHBPrescaler>:
{
 800491e:	b480      	push	{r7}
 8004920:	b083      	sub	sp, #12
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800492a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800492e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004932:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4313      	orrs	r3, r2
 800493a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800493e:	bf00      	nop
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <LL_RCC_SetAHB4Prescaler>:
{
 800494a:	b480      	push	{r7}
 800494c:	b083      	sub	sp, #12
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004956:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800495a:	f023 020f 	bic.w	r2, r3, #15
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	091b      	lsrs	r3, r3, #4
 8004962:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004966:	4313      	orrs	r3, r2
 8004968:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <LL_RCC_SetAPB1Prescaler>:
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800498a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4313      	orrs	r3, r2
 8004992:	608b      	str	r3, [r1, #8]
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <LL_RCC_SetAPB2Prescaler>:
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80049a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	608b      	str	r3, [r1, #8]
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <LL_RCC_GetAHBPrescaler>:
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80049cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <LL_RCC_GetAHB4Prescaler>:
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80049e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <LL_RCC_GetAPB1Prescaler>:
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <LL_RCC_GetAPB2Prescaler>:
{
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a3e:	6013      	str	r3, [r2, #0]
}
 8004a40:	bf00      	nop
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a5c:	6013      	str	r3, [r2, #0]
}
 8004a5e:	bf00      	nop
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a7a:	d101      	bne.n	8004a80 <LL_RCC_PLL_IsReady+0x18>
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e000      	b.n	8004a82 <LL_RCC_PLL_IsReady+0x1a>
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	0a1b      	lsrs	r3, r3, #8
 8004a98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f003 0303 	and.w	r3, r3, #3
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004aee:	b480      	push	{r7}
 8004af0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b00:	d101      	bne.n	8004b06 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004b02:	2301      	movs	r3, #1
 8004b04:	e000      	b.n	8004b08 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004b12:	b480      	push	{r7}
 8004b14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b1a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b26:	d101      	bne.n	8004b2c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e000      	b.n	8004b2e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b40:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b4c:	d101      	bne.n	8004b52 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e000      	b.n	8004b54 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b70:	d101      	bne.n	8004b76 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004b72:	2301      	movs	r3, #1
 8004b74:	e000      	b.n	8004b78 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004b82:	b480      	push	{r7}
 8004b84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b94:	d101      	bne.n	8004b9a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004b96:	2301      	movs	r3, #1
 8004b98:	e000      	b.n	8004b9c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
	...

08004ba8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ba8:	b590      	push	{r4, r7, lr}
 8004baa:	b08b      	sub	sp, #44	; 0x2c
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e34b      	b.n	8005252 <HAL_RCC_OscConfig+0x6aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0320 	and.w	r3, r3, #32
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 808f 	beq.w	8004ce6 <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bc8:	f7ff fe89 	bl	80048de <LL_RCC_GetSysClkSource>
 8004bcc:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bce:	f7ff ff82 	bl	8004ad6 <LL_RCC_PLL_GetMainSource>
 8004bd2:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d005      	beq.n	8004be6 <HAL_RCC_OscConfig+0x3e>
 8004bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bdc:	2b0c      	cmp	r3, #12
 8004bde:	d149      	bne.n	8004c74 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d146      	bne.n	8004c74 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004be6:	f7ff fe17 	bl	8004818 <LL_RCC_MSI_IsReady>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d005      	beq.n	8004bfc <HAL_RCC_OscConfig+0x54>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	69db      	ldr	r3, [r3, #28]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e32a      	b.n	8005252 <HAL_RCC_OscConfig+0x6aa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004c00:	f7ff fe2f 	bl	8004862 <LL_RCC_MSI_GetRange>
 8004c04:	4603      	mov	r3, r0
 8004c06:	429c      	cmp	r4, r3
 8004c08:	d914      	bls.n	8004c34 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 fd0e 	bl	8005630 <RCC_SetFlashLatencyFromMSIRange>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e319      	b.n	8005252 <HAL_RCC_OscConfig+0x6aa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7ff fe09 	bl	800483a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7ff fe2d 	bl	800488c <LL_RCC_MSI_SetCalibTrimming>
 8004c32:	e013      	b.n	8004c5c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7ff fdfe 	bl	800483a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7ff fe22 	bl	800488c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f000 fcef 	bl	8005630 <RCC_SetFlashLatencyFromMSIRange>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e2fa      	b.n	8005252 <HAL_RCC_OscConfig+0x6aa>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 8004c5c:	f7fd ffa8 	bl	8002bb0 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004c60:	4bb4      	ldr	r3, [pc, #720]	; (8004f34 <HAL_RCC_OscConfig+0x38c>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7fe fa33 	bl	80030d0 <HAL_InitTick>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d039      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e2ee      	b.n	8005252 <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d01e      	beq.n	8004cba <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c7c:	f7ff fdae 	bl	80047dc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c80:	f7fe fa72 	bl	8003168 <HAL_GetTick>
 8004c84:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c88:	f7fe fa6e 	bl	8003168 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e2db      	b.n	8005252 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004c9a:	f7ff fdbd 	bl	8004818 <LL_RCC_MSI_IsReady>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d0f1      	beq.n	8004c88 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7ff fdc6 	bl	800483a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7ff fdea 	bl	800488c <LL_RCC_MSI_SetCalibTrimming>
 8004cb8:	e015      	b.n	8004ce6 <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004cba:	f7ff fd9e 	bl	80047fa <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004cbe:	f7fe fa53 	bl	8003168 <HAL_GetTick>
 8004cc2:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004cc4:	e008      	b.n	8004cd8 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004cc6:	f7fe fa4f 	bl	8003168 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e2bc      	b.n	8005252 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004cd8:	f7ff fd9e 	bl	8004818 <LL_RCC_MSI_IsReady>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1f1      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x11e>
 8004ce2:	e000      	b.n	8004ce6 <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ce4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d05a      	beq.n	8004da8 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cf2:	f7ff fdf4 	bl	80048de <LL_RCC_GetSysClkSource>
 8004cf6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cf8:	f7ff feed 	bl	8004ad6 <LL_RCC_PLL_GetMainSource>
 8004cfc:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	2b08      	cmp	r3, #8
 8004d02:	d005      	beq.n	8004d10 <HAL_RCC_OscConfig+0x168>
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	2b0c      	cmp	r3, #12
 8004d08:	d10d      	bne.n	8004d26 <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	2b03      	cmp	r3, #3
 8004d0e:	d10a      	bne.n	8004d26 <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d10:	f7ff fc04 	bl	800451c <LL_RCC_HSE_IsReady>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d045      	beq.n	8004da6 <HAL_RCC_OscConfig+0x1fe>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d141      	bne.n	8004da6 <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e295      	b.n	8005252 <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d2e:	d102      	bne.n	8004d36 <HAL_RCC_OscConfig+0x18e>
 8004d30:	f7ff fbd6 	bl	80044e0 <LL_RCC_HSE_Enable>
 8004d34:	e00d      	b.n	8004d52 <HAL_RCC_OscConfig+0x1aa>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d3e:	d104      	bne.n	8004d4a <HAL_RCC_OscConfig+0x1a2>
 8004d40:	f7ff fbb0 	bl	80044a4 <LL_RCC_HSE_EnableBypass>
 8004d44:	f7ff fbcc 	bl	80044e0 <LL_RCC_HSE_Enable>
 8004d48:	e003      	b.n	8004d52 <HAL_RCC_OscConfig+0x1aa>
 8004d4a:	f7ff fbd8 	bl	80044fe <LL_RCC_HSE_Disable>
 8004d4e:	f7ff fbb8 	bl	80044c2 <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d012      	beq.n	8004d80 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d5a:	f7fe fa05 	bl	8003168 <HAL_GetTick>
 8004d5e:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004d60:	e008      	b.n	8004d74 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d62:	f7fe fa01 	bl	8003168 <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b64      	cmp	r3, #100	; 0x64
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e26e      	b.n	8005252 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004d74:	f7ff fbd2 	bl	800451c <LL_RCC_HSE_IsReady>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d0f1      	beq.n	8004d62 <HAL_RCC_OscConfig+0x1ba>
 8004d7e:	e013      	b.n	8004da8 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d80:	f7fe f9f2 	bl	8003168 <HAL_GetTick>
 8004d84:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004d86:	e008      	b.n	8004d9a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d88:	f7fe f9ee 	bl	8003168 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	2b64      	cmp	r3, #100	; 0x64
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e25b      	b.n	8005252 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004d9a:	f7ff fbbf 	bl	800451c <LL_RCC_HSE_IsReady>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1f1      	bne.n	8004d88 <HAL_RCC_OscConfig+0x1e0>
 8004da4:	e000      	b.n	8004da8 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004da6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d051      	beq.n	8004e58 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004db4:	f7ff fd93 	bl	80048de <LL_RCC_GetSysClkSource>
 8004db8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dba:	f7ff fe8c 	bl	8004ad6 <LL_RCC_PLL_GetMainSource>
 8004dbe:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	2b04      	cmp	r3, #4
 8004dc4:	d005      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x22a>
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	2b0c      	cmp	r3, #12
 8004dca:	d113      	bne.n	8004df4 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d110      	bne.n	8004df4 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dd2:	f7ff fbd3 	bl	800457c <LL_RCC_HSI_IsReady>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d005      	beq.n	8004de8 <HAL_RCC_OscConfig+0x240>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e234      	b.n	8005252 <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7ff fbd7 	bl	80045a0 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004df2:	e031      	b.n	8004e58 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d019      	beq.n	8004e30 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dfc:	f7ff fba0 	bl	8004540 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e00:	f7fe f9b2 	bl	8003168 <HAL_GetTick>
 8004e04:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004e06:	e008      	b.n	8004e1a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e08:	f7fe f9ae 	bl	8003168 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e21b      	b.n	8005252 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004e1a:	f7ff fbaf 	bl	800457c <LL_RCC_HSI_IsReady>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d0f1      	beq.n	8004e08 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7ff fbb9 	bl	80045a0 <LL_RCC_HSI_SetCalibTrimming>
 8004e2e:	e013      	b.n	8004e58 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e30:	f7ff fb95 	bl	800455e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e34:	f7fe f998 	bl	8003168 <HAL_GetTick>
 8004e38:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004e3a:	e008      	b.n	8004e4e <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e3c:	f7fe f994 	bl	8003168 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e201      	b.n	8005252 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004e4e:	f7ff fb95 	bl	800457c <LL_RCC_HSI_IsReady>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1f1      	bne.n	8004e3c <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0308 	and.w	r3, r3, #8
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d106      	bne.n	8004e72 <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 80a2 	beq.w	8004fb6 <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d075      	beq.n	8004f66 <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0310 	and.w	r3, r3, #16
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d046      	beq.n	8004f14 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004e86:	f7ff fc4c 	bl	8004722 <LL_RCC_LSI1_IsReady>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d113      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004e90:	f7ff fc25 	bl	80046de <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e94:	f7fe f968 	bl	8003168 <HAL_GetTick>
 8004e98:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004e9c:	f7fe f964 	bl	8003168 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e1d1      	b.n	8005252 <HAL_RCC_OscConfig+0x6aa>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004eae:	f7ff fc38 	bl	8004722 <LL_RCC_LSI1_IsReady>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d0f1      	beq.n	8004e9c <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004eb8:	f7ff fc45 	bl	8004746 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ebc:	f7fe f954 	bl	8003168 <HAL_GetTick>
 8004ec0:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004ec2:	e008      	b.n	8004ed6 <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004ec4:	f7fe f950 	bl	8003168 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b03      	cmp	r3, #3
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e1bd      	b.n	8005252 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004ed6:	f7ff fc58 	bl	800478a <LL_RCC_LSI2_IsReady>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d0f1      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7ff fc62 	bl	80047ae <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004eea:	f7ff fc09 	bl	8004700 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eee:	f7fe f93b 	bl	8003168 <HAL_GetTick>
 8004ef2:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004ef4:	e008      	b.n	8004f08 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004ef6:	f7fe f937 	bl	8003168 <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d901      	bls.n	8004f08 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e1a4      	b.n	8005252 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004f08:	f7ff fc0b 	bl	8004722 <LL_RCC_LSI1_IsReady>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1f1      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x34e>
 8004f12:	e050      	b.n	8004fb6 <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004f14:	f7ff fbe3 	bl	80046de <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f18:	f7fe f926 	bl	8003168 <HAL_GetTick>
 8004f1c:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004f1e:	e00b      	b.n	8004f38 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004f20:	f7fe f922 	bl	8003168 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d904      	bls.n	8004f38 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e18f      	b.n	8005252 <HAL_RCC_OscConfig+0x6aa>
 8004f32:	bf00      	nop
 8004f34:	20000014 	.word	0x20000014
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004f38:	f7ff fbf3 	bl	8004722 <LL_RCC_LSI1_IsReady>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d0ee      	beq.n	8004f20 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004f42:	f7ff fc11 	bl	8004768 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004f48:	f7fe f90e 	bl	8003168 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b03      	cmp	r3, #3
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e17b      	b.n	8005252 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004f5a:	f7ff fc16 	bl	800478a <LL_RCC_LSI2_IsReady>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1f1      	bne.n	8004f48 <HAL_RCC_OscConfig+0x3a0>
 8004f64:	e027      	b.n	8004fb6 <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004f66:	f7ff fbff 	bl	8004768 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f6a:	f7fe f8fd 	bl	8003168 <HAL_GetTick>
 8004f6e:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004f70:	e008      	b.n	8004f84 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004f72:	f7fe f8f9 	bl	8003168 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	2b03      	cmp	r3, #3
 8004f7e:	d901      	bls.n	8004f84 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e166      	b.n	8005252 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004f84:	f7ff fc01 	bl	800478a <LL_RCC_LSI2_IsReady>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1f1      	bne.n	8004f72 <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004f8e:	f7ff fbb7 	bl	8004700 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f92:	f7fe f8e9 	bl	8003168 <HAL_GetTick>
 8004f96:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004f98:	e008      	b.n	8004fac <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004f9a:	f7fe f8e5 	bl	8003168 <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d901      	bls.n	8004fac <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e152      	b.n	8005252 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004fac:	f7ff fbb9 	bl	8004722 <LL_RCC_LSI1_IsReady>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1f1      	bne.n	8004f9a <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0304 	and.w	r3, r3, #4
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d05b      	beq.n	800507a <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fc2:	4ba6      	ldr	r3, [pc, #664]	; (800525c <HAL_RCC_OscConfig+0x6b4>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d114      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004fce:	f7ff fa39 	bl	8004444 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fd2:	f7fe f8c9 	bl	8003168 <HAL_GetTick>
 8004fd6:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fd8:	e008      	b.n	8004fec <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fda:	f7fe f8c5 	bl	8003168 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d901      	bls.n	8004fec <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e132      	b.n	8005252 <HAL_RCC_OscConfig+0x6aa>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fec:	4b9b      	ldr	r3, [pc, #620]	; (800525c <HAL_RCC_OscConfig+0x6b4>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d0f0      	beq.n	8004fda <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d102      	bne.n	8005006 <HAL_RCC_OscConfig+0x45e>
 8005000:	f7ff fb17 	bl	8004632 <LL_RCC_LSE_Enable>
 8005004:	e00c      	b.n	8005020 <HAL_RCC_OscConfig+0x478>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	2b05      	cmp	r3, #5
 800500c:	d104      	bne.n	8005018 <HAL_RCC_OscConfig+0x470>
 800500e:	f7ff fb32 	bl	8004676 <LL_RCC_LSE_EnableBypass>
 8005012:	f7ff fb0e 	bl	8004632 <LL_RCC_LSE_Enable>
 8005016:	e003      	b.n	8005020 <HAL_RCC_OscConfig+0x478>
 8005018:	f7ff fb1c 	bl	8004654 <LL_RCC_LSE_Disable>
 800501c:	f7ff fb3c 	bl	8004698 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d014      	beq.n	8005052 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005028:	f7fe f89e 	bl	8003168 <HAL_GetTick>
 800502c:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800502e:	e00a      	b.n	8005046 <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005030:	f7fe f89a 	bl	8003168 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	f241 3288 	movw	r2, #5000	; 0x1388
 800503e:	4293      	cmp	r3, r2
 8005040:	d901      	bls.n	8005046 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e105      	b.n	8005252 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005046:	f7ff fb38 	bl	80046ba <LL_RCC_LSE_IsReady>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d0ef      	beq.n	8005030 <HAL_RCC_OscConfig+0x488>
 8005050:	e013      	b.n	800507a <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005052:	f7fe f889 	bl	8003168 <HAL_GetTick>
 8005056:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005058:	e00a      	b.n	8005070 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800505a:	f7fe f885 	bl	8003168 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	f241 3288 	movw	r2, #5000	; 0x1388
 8005068:	4293      	cmp	r3, r2
 800506a:	d901      	bls.n	8005070 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e0f0      	b.n	8005252 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005070:	f7ff fb23 	bl	80046ba <LL_RCC_LSE_IsReady>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1ef      	bne.n	800505a <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005082:	2b00      	cmp	r3, #0
 8005084:	d02c      	beq.n	80050e0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508a:	2b00      	cmp	r3, #0
 800508c:	d014      	beq.n	80050b8 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800508e:	f7ff fa9c 	bl	80045ca <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005092:	f7fe f869 	bl	8003168 <HAL_GetTick>
 8005096:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005098:	e008      	b.n	80050ac <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800509a:	f7fe f865 	bl	8003168 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d901      	bls.n	80050ac <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e0d2      	b.n	8005252 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80050ac:	f7ff faaf 	bl	800460e <LL_RCC_HSI48_IsReady>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d0f1      	beq.n	800509a <HAL_RCC_OscConfig+0x4f2>
 80050b6:	e013      	b.n	80050e0 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80050b8:	f7ff fa98 	bl	80045ec <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050bc:	f7fe f854 	bl	8003168 <HAL_GetTick>
 80050c0:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80050c2:	e008      	b.n	80050d6 <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050c4:	f7fe f850 	bl	8003168 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e0bd      	b.n	8005252 <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80050d6:	f7ff fa9a 	bl	800460e <LL_RCC_HSI48_IsReady>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1f1      	bne.n	80050c4 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f000 80b3 	beq.w	8005250 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050ea:	f7ff fbf8 	bl	80048de <LL_RCC_GetSysClkSource>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b0c      	cmp	r3, #12
 80050f2:	d076      	beq.n	80051e2 <HAL_RCC_OscConfig+0x63a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d14b      	bne.n	8005194 <HAL_RCC_OscConfig+0x5ec>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050fc:	f7ff fca5 	bl	8004a4a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005100:	f7fe f832 	bl	8003168 <HAL_GetTick>
 8005104:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005106:	e008      	b.n	800511a <HAL_RCC_OscConfig+0x572>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005108:	f7fe f82e 	bl	8003168 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b02      	cmp	r3, #2
 8005114:	d901      	bls.n	800511a <HAL_RCC_OscConfig+0x572>
          {
            return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e09b      	b.n	8005252 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 800511a:	f7ff fca5 	bl	8004a68 <LL_RCC_PLL_IsReady>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1f1      	bne.n	8005108 <HAL_RCC_OscConfig+0x560>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005128:	68da      	ldr	r2, [r3, #12]
 800512a:	4b4d      	ldr	r3, [pc, #308]	; (8005260 <HAL_RCC_OscConfig+0x6b8>)
 800512c:	4013      	ands	r3, r2
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005136:	4311      	orrs	r1, r2
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800513c:	0212      	lsls	r2, r2, #8
 800513e:	4311      	orrs	r1, r2
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005144:	4311      	orrs	r1, r2
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800514a:	4311      	orrs	r1, r2
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005150:	430a      	orrs	r2, r1
 8005152:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005156:	4313      	orrs	r3, r2
 8005158:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800515a:	f7ff fc67 	bl	8004a2c <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800515e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800516c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800516e:	f7fd fffb 	bl	8003168 <HAL_GetTick>
 8005172:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8005174:	e008      	b.n	8005188 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005176:	f7fd fff7 	bl	8003168 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	2b02      	cmp	r3, #2
 8005182:	d901      	bls.n	8005188 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e064      	b.n	8005252 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() == 0U)
 8005188:	f7ff fc6e 	bl	8004a68 <LL_RCC_PLL_IsReady>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d0f1      	beq.n	8005176 <HAL_RCC_OscConfig+0x5ce>
 8005192:	e05d      	b.n	8005250 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005194:	f7ff fc59 	bl	8004a4a <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051a2:	f023 0303 	bic.w	r3, r3, #3
 80051a6:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80051a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051b2:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80051b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051ba:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051bc:	f7fd ffd4 	bl	8003168 <HAL_GetTick>
 80051c0:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80051c2:	e008      	b.n	80051d6 <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051c4:	f7fd ffd0 	bl	8003168 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e03d      	b.n	8005252 <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 80051d6:	f7ff fc47 	bl	8004a68 <LL_RCC_PLL_IsReady>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1f1      	bne.n	80051c4 <HAL_RCC_OscConfig+0x61c>
 80051e0:	e036      	b.n	8005250 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d101      	bne.n	80051ee <HAL_RCC_OscConfig+0x646>
      {
        return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e031      	b.n	8005252 <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80051ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	f003 0203 	and.w	r2, r3, #3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005200:	429a      	cmp	r2, r3
 8005202:	d123      	bne.n	800524c <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800520e:	429a      	cmp	r2, r3
 8005210:	d11c      	bne.n	800524c <HAL_RCC_OscConfig+0x6a4>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	0a1b      	lsrs	r3, r3, #8
 8005216:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800521e:	429a      	cmp	r2, r3
 8005220:	d114      	bne.n	800524c <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800522c:	429a      	cmp	r2, r3
 800522e:	d10d      	bne.n	800524c <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800523a:	429a      	cmp	r2, r3
 800523c:	d106      	bne.n	800524c <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005248:	429a      	cmp	r2, r3
 800524a:	d001      	beq.n	8005250 <HAL_RCC_OscConfig+0x6a8>
        {
          return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e000      	b.n	8005252 <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	372c      	adds	r7, #44	; 0x2c
 8005256:	46bd      	mov	sp, r7
 8005258:	bd90      	pop	{r4, r7, pc}
 800525a:	bf00      	nop
 800525c:	58000400 	.word	0x58000400
 8005260:	11c1808c 	.word	0x11c1808c

08005264 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d101      	bne.n	8005278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e12a      	b.n	80054ce <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005278:	4b97      	ldr	r3, [pc, #604]	; (80054d8 <HAL_RCC_ClockConfig+0x274>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0307 	and.w	r3, r3, #7
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	429a      	cmp	r2, r3
 8005284:	d91b      	bls.n	80052be <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005286:	4b94      	ldr	r3, [pc, #592]	; (80054d8 <HAL_RCC_ClockConfig+0x274>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f023 0207 	bic.w	r2, r3, #7
 800528e:	4992      	ldr	r1, [pc, #584]	; (80054d8 <HAL_RCC_ClockConfig+0x274>)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	4313      	orrs	r3, r2
 8005294:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005296:	f7fd ff67 	bl	8003168 <HAL_GetTick>
 800529a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800529c:	e008      	b.n	80052b0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800529e:	f7fd ff63 	bl	8003168 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d901      	bls.n	80052b0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e10e      	b.n	80054ce <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052b0:	4b89      	ldr	r3, [pc, #548]	; (80054d8 <HAL_RCC_ClockConfig+0x274>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0307 	and.w	r3, r3, #7
 80052b8:	683a      	ldr	r2, [r7, #0]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d1ef      	bne.n	800529e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d016      	beq.n	80052f8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7ff fb11 	bl	80048f6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80052d4:	f7fd ff48 	bl	8003168 <HAL_GetTick>
 80052d8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80052da:	e008      	b.n	80052ee <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80052dc:	f7fd ff44 	bl	8003168 <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e0ef      	b.n	80054ce <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80052ee:	f7ff fbfe 	bl	8004aee <LL_RCC_IsActiveFlag_HPRE>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d0f1      	beq.n	80052dc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0320 	and.w	r3, r3, #32
 8005300:	2b00      	cmp	r3, #0
 8005302:	d016      	beq.n	8005332 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	4618      	mov	r0, r3
 800530a:	f7ff fb08 	bl	800491e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800530e:	f7fd ff2b 	bl	8003168 <HAL_GetTick>
 8005312:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005314:	e008      	b.n	8005328 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005316:	f7fd ff27 	bl	8003168 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	2b02      	cmp	r3, #2
 8005322:	d901      	bls.n	8005328 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e0d2      	b.n	80054ce <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005328:	f7ff fbf3 	bl	8004b12 <LL_RCC_IsActiveFlag_C2HPRE>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d0f1      	beq.n	8005316 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533a:	2b00      	cmp	r3, #0
 800533c:	d016      	beq.n	800536c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	4618      	mov	r0, r3
 8005344:	f7ff fb01 	bl	800494a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005348:	f7fd ff0e 	bl	8003168 <HAL_GetTick>
 800534c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800534e:	e008      	b.n	8005362 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005350:	f7fd ff0a 	bl	8003168 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b02      	cmp	r3, #2
 800535c:	d901      	bls.n	8005362 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e0b5      	b.n	80054ce <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005362:	f7ff fbe9 	bl	8004b38 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d0f1      	beq.n	8005350 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0304 	and.w	r3, r3, #4
 8005374:	2b00      	cmp	r3, #0
 8005376:	d016      	beq.n	80053a6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	4618      	mov	r0, r3
 800537e:	f7ff fafb 	bl	8004978 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005382:	f7fd fef1 	bl	8003168 <HAL_GetTick>
 8005386:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005388:	e008      	b.n	800539c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800538a:	f7fd feed 	bl	8003168 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	2b02      	cmp	r3, #2
 8005396:	d901      	bls.n	800539c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e098      	b.n	80054ce <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800539c:	f7ff fbdf 	bl	8004b5e <LL_RCC_IsActiveFlag_PPRE1>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d0f1      	beq.n	800538a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0308 	and.w	r3, r3, #8
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d017      	beq.n	80053e2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	00db      	lsls	r3, r3, #3
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7ff faf1 	bl	80049a0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80053be:	f7fd fed3 	bl	8003168 <HAL_GetTick>
 80053c2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80053c4:	e008      	b.n	80053d8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80053c6:	f7fd fecf 	bl	8003168 <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d901      	bls.n	80053d8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e07a      	b.n	80054ce <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80053d8:	f7ff fbd3 	bl	8004b82 <LL_RCC_IsActiveFlag_PPRE2>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d0f1      	beq.n	80053c6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0301 	and.w	r3, r3, #1
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d043      	beq.n	8005476 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d106      	bne.n	8005404 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80053f6:	f7ff f891 	bl	800451c <LL_RCC_HSE_IsReady>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d11e      	bne.n	800543e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e064      	b.n	80054ce <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	2b03      	cmp	r3, #3
 800540a:	d106      	bne.n	800541a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800540c:	f7ff fb2c 	bl	8004a68 <LL_RCC_PLL_IsReady>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d113      	bne.n	800543e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e059      	b.n	80054ce <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d106      	bne.n	8005430 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005422:	f7ff f9f9 	bl	8004818 <LL_RCC_MSI_IsReady>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d108      	bne.n	800543e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e04e      	b.n	80054ce <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005430:	f7ff f8a4 	bl	800457c <LL_RCC_HSI_IsReady>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e047      	b.n	80054ce <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	4618      	mov	r0, r3
 8005444:	f7ff fa37 	bl	80048b6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005448:	f7fd fe8e 	bl	8003168 <HAL_GetTick>
 800544c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800544e:	e00a      	b.n	8005466 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005450:	f7fd fe8a 	bl	8003168 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	f241 3288 	movw	r2, #5000	; 0x1388
 800545e:	4293      	cmp	r3, r2
 8005460:	d901      	bls.n	8005466 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e033      	b.n	80054ce <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005466:	f7ff fa3a 	bl	80048de <LL_RCC_GetSysClkSource>
 800546a:	4602      	mov	r2, r0
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	429a      	cmp	r2, r3
 8005474:	d1ec      	bne.n	8005450 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005476:	4b18      	ldr	r3, [pc, #96]	; (80054d8 <HAL_RCC_ClockConfig+0x274>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0307 	and.w	r3, r3, #7
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	429a      	cmp	r2, r3
 8005482:	d21b      	bcs.n	80054bc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005484:	4b14      	ldr	r3, [pc, #80]	; (80054d8 <HAL_RCC_ClockConfig+0x274>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f023 0207 	bic.w	r2, r3, #7
 800548c:	4912      	ldr	r1, [pc, #72]	; (80054d8 <HAL_RCC_ClockConfig+0x274>)
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	4313      	orrs	r3, r2
 8005492:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005494:	f7fd fe68 	bl	8003168 <HAL_GetTick>
 8005498:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800549a:	e008      	b.n	80054ae <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800549c:	f7fd fe64 	bl	8003168 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e00f      	b.n	80054ce <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ae:	4b0a      	ldr	r3, [pc, #40]	; (80054d8 <HAL_RCC_ClockConfig+0x274>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0307 	and.w	r3, r3, #7
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d1ef      	bne.n	800549c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 80054bc:	f7fd fb78 	bl	8002bb0 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80054c0:	f7fd fe5e 	bl	8003180 <HAL_GetTickPrio>
 80054c4:	4603      	mov	r3, r0
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7fd fe02 	bl	80030d0 <HAL_InitTick>
 80054cc:	4603      	mov	r3, r0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	58004000 	.word	0x58004000

080054dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054dc:	b590      	push	{r4, r7, lr}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054e2:	f7ff f9fc 	bl	80048de <LL_RCC_GetSysClkSource>
 80054e6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10a      	bne.n	8005504 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80054ee:	f7ff f9b8 	bl	8004862 <LL_RCC_MSI_GetRange>
 80054f2:	4603      	mov	r3, r0
 80054f4:	091b      	lsrs	r3, r3, #4
 80054f6:	f003 030f 	and.w	r3, r3, #15
 80054fa:	4a2a      	ldr	r2, [pc, #168]	; (80055a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80054fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005500:	60fb      	str	r3, [r7, #12]
 8005502:	e04a      	b.n	800559a <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b04      	cmp	r3, #4
 8005508:	d102      	bne.n	8005510 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800550a:	4b27      	ldr	r3, [pc, #156]	; (80055a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800550c:	60fb      	str	r3, [r7, #12]
 800550e:	e044      	b.n	800559a <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b08      	cmp	r3, #8
 8005514:	d10a      	bne.n	800552c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005516:	f7fe ffb3 	bl	8004480 <LL_RCC_HSE_IsEnabledDiv2>
 800551a:	4603      	mov	r3, r0
 800551c:	2b01      	cmp	r3, #1
 800551e:	d102      	bne.n	8005526 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005520:	4b21      	ldr	r3, [pc, #132]	; (80055a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005522:	60fb      	str	r3, [r7, #12]
 8005524:	e039      	b.n	800559a <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005526:	4b21      	ldr	r3, [pc, #132]	; (80055ac <HAL_RCC_GetSysClockFreq+0xd0>)
 8005528:	60fb      	str	r3, [r7, #12]
 800552a:	e036      	b.n	800559a <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800552c:	f7ff fad3 	bl	8004ad6 <LL_RCC_PLL_GetMainSource>
 8005530:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b02      	cmp	r3, #2
 8005536:	d002      	beq.n	800553e <HAL_RCC_GetSysClockFreq+0x62>
 8005538:	2b03      	cmp	r3, #3
 800553a:	d003      	beq.n	8005544 <HAL_RCC_GetSysClockFreq+0x68>
 800553c:	e00d      	b.n	800555a <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800553e:	4b1a      	ldr	r3, [pc, #104]	; (80055a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005540:	60bb      	str	r3, [r7, #8]
        break;
 8005542:	e015      	b.n	8005570 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005544:	f7fe ff9c 	bl	8004480 <LL_RCC_HSE_IsEnabledDiv2>
 8005548:	4603      	mov	r3, r0
 800554a:	2b01      	cmp	r3, #1
 800554c:	d102      	bne.n	8005554 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800554e:	4b16      	ldr	r3, [pc, #88]	; (80055a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005550:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005552:	e00d      	b.n	8005570 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8005554:	4b15      	ldr	r3, [pc, #84]	; (80055ac <HAL_RCC_GetSysClockFreq+0xd0>)
 8005556:	60bb      	str	r3, [r7, #8]
        break;
 8005558:	e00a      	b.n	8005570 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800555a:	f7ff f982 	bl	8004862 <LL_RCC_MSI_GetRange>
 800555e:	4603      	mov	r3, r0
 8005560:	091b      	lsrs	r3, r3, #4
 8005562:	f003 030f 	and.w	r3, r3, #15
 8005566:	4a0f      	ldr	r2, [pc, #60]	; (80055a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800556c:	60bb      	str	r3, [r7, #8]
        break;
 800556e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8005570:	f7ff fa8c 	bl	8004a8c <LL_RCC_PLL_GetN>
 8005574:	4602      	mov	r2, r0
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	fb03 f402 	mul.w	r4, r3, r2
 800557c:	f7ff fa9f 	bl	8004abe <LL_RCC_PLL_GetDivider>
 8005580:	4603      	mov	r3, r0
 8005582:	091b      	lsrs	r3, r3, #4
 8005584:	3301      	adds	r3, #1
 8005586:	fbb4 f4f3 	udiv	r4, r4, r3
 800558a:	f7ff fa8c 	bl	8004aa6 <LL_RCC_PLL_GetR>
 800558e:	4603      	mov	r3, r0
 8005590:	0f5b      	lsrs	r3, r3, #29
 8005592:	3301      	adds	r3, #1
 8005594:	fbb4 f3f3 	udiv	r3, r4, r3
 8005598:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 800559a:	68fb      	ldr	r3, [r7, #12]
}
 800559c:	4618      	mov	r0, r3
 800559e:	3714      	adds	r7, #20
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd90      	pop	{r4, r7, pc}
 80055a4:	0800b908 	.word	0x0800b908
 80055a8:	00f42400 	.word	0x00f42400
 80055ac:	01e84800 	.word	0x01e84800

080055b0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055b0:	b598      	push	{r3, r4, r7, lr}
 80055b2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80055b4:	f7ff ff92 	bl	80054dc <HAL_RCC_GetSysClockFreq>
 80055b8:	4604      	mov	r4, r0
 80055ba:	f7ff fa05 	bl	80049c8 <LL_RCC_GetAHBPrescaler>
 80055be:	4603      	mov	r3, r0
 80055c0:	091b      	lsrs	r3, r3, #4
 80055c2:	f003 030f 	and.w	r3, r3, #15
 80055c6:	4a03      	ldr	r2, [pc, #12]	; (80055d4 <HAL_RCC_GetHCLKFreq+0x24>)
 80055c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055cc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	bd98      	pop	{r3, r4, r7, pc}
 80055d4:	0800b8a8 	.word	0x0800b8a8

080055d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055d8:	b598      	push	{r3, r4, r7, lr}
 80055da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80055dc:	f7ff ffe8 	bl	80055b0 <HAL_RCC_GetHCLKFreq>
 80055e0:	4604      	mov	r4, r0
 80055e2:	f7ff fa0b 	bl	80049fc <LL_RCC_GetAPB1Prescaler>
 80055e6:	4603      	mov	r3, r0
 80055e8:	0a1b      	lsrs	r3, r3, #8
 80055ea:	f003 0307 	and.w	r3, r3, #7
 80055ee:	4a04      	ldr	r2, [pc, #16]	; (8005600 <HAL_RCC_GetPCLK1Freq+0x28>)
 80055f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055f4:	f003 031f 	and.w	r3, r3, #31
 80055f8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	bd98      	pop	{r3, r4, r7, pc}
 8005600:	0800b8e8 	.word	0x0800b8e8

08005604 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005604:	b598      	push	{r3, r4, r7, lr}
 8005606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005608:	f7ff ffd2 	bl	80055b0 <HAL_RCC_GetHCLKFreq>
 800560c:	4604      	mov	r4, r0
 800560e:	f7ff fa01 	bl	8004a14 <LL_RCC_GetAPB2Prescaler>
 8005612:	4603      	mov	r3, r0
 8005614:	0adb      	lsrs	r3, r3, #11
 8005616:	f003 0307 	and.w	r3, r3, #7
 800561a:	4a04      	ldr	r2, [pc, #16]	; (800562c <HAL_RCC_GetPCLK2Freq+0x28>)
 800561c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005620:	f003 031f 	and.w	r3, r3, #31
 8005624:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005628:	4618      	mov	r0, r3
 800562a:	bd98      	pop	{r3, r4, r7, pc}
 800562c:	0800b8e8 	.word	0x0800b8e8

08005630 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005630:	b590      	push	{r4, r7, lr}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2bb0      	cmp	r3, #176	; 0xb0
 800563c:	d903      	bls.n	8005646 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800563e:	4b15      	ldr	r3, [pc, #84]	; (8005694 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005642:	60fb      	str	r3, [r7, #12]
 8005644:	e007      	b.n	8005656 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	091b      	lsrs	r3, r3, #4
 800564a:	f003 030f 	and.w	r3, r3, #15
 800564e:	4a11      	ldr	r2, [pc, #68]	; (8005694 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005654:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005656:	f7ff f9c3 	bl	80049e0 <LL_RCC_GetAHB4Prescaler>
 800565a:	4603      	mov	r3, r0
 800565c:	091b      	lsrs	r3, r3, #4
 800565e:	f003 030f 	and.w	r3, r3, #15
 8005662:	4a0d      	ldr	r2, [pc, #52]	; (8005698 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	fbb2 f3f3 	udiv	r3, r2, r3
 800566e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	4a0a      	ldr	r2, [pc, #40]	; (800569c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005674:	fba2 2303 	umull	r2, r3, r2, r3
 8005678:	0c9c      	lsrs	r4, r3, #18
 800567a:	f7fe fef3 	bl	8004464 <HAL_PWREx_GetVoltageRange>
 800567e:	4603      	mov	r3, r0
 8005680:	4619      	mov	r1, r3
 8005682:	4620      	mov	r0, r4
 8005684:	f000 f80c 	bl	80056a0 <RCC_SetFlashLatency>
 8005688:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800568a:	4618      	mov	r0, r3
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	bd90      	pop	{r4, r7, pc}
 8005692:	bf00      	nop
 8005694:	0800b908 	.word	0x0800b908
 8005698:	0800b8a8 	.word	0x0800b8a8
 800569c:	431bde83 	.word	0x431bde83

080056a0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80056a0:	b590      	push	{r4, r7, lr}
 80056a2:	b093      	sub	sp, #76	; 0x4c
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80056aa:	4b39      	ldr	r3, [pc, #228]	; (8005790 <RCC_SetFlashLatency+0xf0>)
 80056ac:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80056b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80056b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80056b6:	4a37      	ldr	r2, [pc, #220]	; (8005794 <RCC_SetFlashLatency+0xf4>)
 80056b8:	f107 031c 	add.w	r3, r7, #28
 80056bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80056be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80056c2:	4b35      	ldr	r3, [pc, #212]	; (8005798 <RCC_SetFlashLatency+0xf8>)
 80056c4:	f107 040c 	add.w	r4, r7, #12
 80056c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80056ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80056ce:	2300      	movs	r3, #0
 80056d0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056d8:	d11c      	bne.n	8005714 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80056da:	2300      	movs	r3, #0
 80056dc:	643b      	str	r3, [r7, #64]	; 0x40
 80056de:	e015      	b.n	800570c <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80056e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80056e8:	4413      	add	r3, r2
 80056ea:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d808      	bhi.n	8005706 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80056f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80056fc:	4413      	add	r3, r2
 80056fe:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005702:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005704:	e022      	b.n	800574c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005708:	3301      	adds	r3, #1
 800570a:	643b      	str	r3, [r7, #64]	; 0x40
 800570c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800570e:	2b03      	cmp	r3, #3
 8005710:	d9e6      	bls.n	80056e0 <RCC_SetFlashLatency+0x40>
 8005712:	e01b      	b.n	800574c <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005714:	2300      	movs	r3, #0
 8005716:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005718:	e015      	b.n	8005746 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800571a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005722:	4413      	add	r3, r2
 8005724:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	429a      	cmp	r2, r3
 800572c:	d808      	bhi.n	8005740 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800572e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005736:	4413      	add	r3, r2
 8005738:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800573c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800573e:	e005      	b.n	800574c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005742:	3301      	adds	r3, #1
 8005744:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005748:	2b02      	cmp	r3, #2
 800574a:	d9e6      	bls.n	800571a <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800574c:	4b13      	ldr	r3, [pc, #76]	; (800579c <RCC_SetFlashLatency+0xfc>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f023 0207 	bic.w	r2, r3, #7
 8005754:	4911      	ldr	r1, [pc, #68]	; (800579c <RCC_SetFlashLatency+0xfc>)
 8005756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005758:	4313      	orrs	r3, r2
 800575a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800575c:	f7fd fd04 	bl	8003168 <HAL_GetTick>
 8005760:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005762:	e008      	b.n	8005776 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005764:	f7fd fd00 	bl	8003168 <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	2b02      	cmp	r3, #2
 8005770:	d901      	bls.n	8005776 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e007      	b.n	8005786 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005776:	4b09      	ldr	r3, [pc, #36]	; (800579c <RCC_SetFlashLatency+0xfc>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0307 	and.w	r3, r3, #7
 800577e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005780:	429a      	cmp	r2, r3
 8005782:	d1ef      	bne.n	8005764 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	374c      	adds	r7, #76	; 0x4c
 800578a:	46bd      	mov	sp, r7
 800578c:	bd90      	pop	{r4, r7, pc}
 800578e:	bf00      	nop
 8005790:	0800b80c 	.word	0x0800b80c
 8005794:	0800b81c 	.word	0x0800b81c
 8005798:	0800b828 	.word	0x0800b828
 800579c:	58004000 	.word	0x58004000

080057a0 <LL_RCC_LSE_IsEnabled>:
{
 80057a0:	b480      	push	{r7}
 80057a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80057a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ac:	f003 0301 	and.w	r3, r3, #1
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d101      	bne.n	80057b8 <LL_RCC_LSE_IsEnabled+0x18>
 80057b4:	2301      	movs	r3, #1
 80057b6:	e000      	b.n	80057ba <LL_RCC_LSE_IsEnabled+0x1a>
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <LL_RCC_LSE_IsReady>:
{
 80057c4:	b480      	push	{r7}
 80057c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80057c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d0:	f003 0302 	and.w	r3, r3, #2
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d101      	bne.n	80057dc <LL_RCC_LSE_IsReady+0x18>
 80057d8:	2301      	movs	r3, #1
 80057da:	e000      	b.n	80057de <LL_RCC_LSE_IsReady+0x1a>
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <LL_RCC_MSI_EnablePLLMode>:
{
 80057e8:	b480      	push	{r7}
 80057ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80057ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057f6:	f043 0304 	orr.w	r3, r3, #4
 80057fa:	6013      	str	r3, [r2, #0]
}
 80057fc:	bf00      	nop
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <LL_RCC_SetRFWKPClockSource>:
{
 8005806:	b480      	push	{r7}
 8005808:	b083      	sub	sp, #12
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800580e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005812:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005816:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800581a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4313      	orrs	r3, r2
 8005822:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005826:	bf00      	nop
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <LL_RCC_SetSMPSClockSource>:
{
 8005832:	b480      	push	{r7}
 8005834:	b083      	sub	sp, #12
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800583a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800583e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005840:	f023 0203 	bic.w	r2, r3, #3
 8005844:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4313      	orrs	r3, r2
 800584c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800584e:	bf00      	nop
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <LL_RCC_SetSMPSPrescaler>:
{
 800585a:	b480      	push	{r7}
 800585c:	b083      	sub	sp, #12
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005868:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800586c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4313      	orrs	r3, r2
 8005874:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005876:	bf00      	nop
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr

08005882 <LL_RCC_SetUSARTClockSource>:
{
 8005882:	b480      	push	{r7}
 8005884:	b083      	sub	sp, #12
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800588a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800588e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005892:	f023 0203 	bic.w	r2, r3, #3
 8005896:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4313      	orrs	r3, r2
 800589e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80058a2:	bf00      	nop
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <LL_RCC_SetLPUARTClockSource>:
{
 80058ae:	b480      	push	{r7}
 80058b0:	b083      	sub	sp, #12
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80058b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80058ce:	bf00      	nop
 80058d0:	370c      	adds	r7, #12
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <LL_RCC_SetI2CClockSource>:
{
 80058da:	b480      	push	{r7}
 80058dc:	b083      	sub	sp, #12
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80058e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	091b      	lsrs	r3, r3, #4
 80058ee:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80058f2:	43db      	mvns	r3, r3
 80058f4:	401a      	ands	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	011b      	lsls	r3, r3, #4
 80058fa:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80058fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005902:	4313      	orrs	r3, r2
 8005904:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <LL_RCC_SetLPTIMClockSource>:
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800591c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005920:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	0c1b      	lsrs	r3, r3, #16
 8005928:	041b      	lsls	r3, r3, #16
 800592a:	43db      	mvns	r3, r3
 800592c:	401a      	ands	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	041b      	lsls	r3, r3, #16
 8005932:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005936:	4313      	orrs	r3, r2
 8005938:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <LL_RCC_SetSAIClockSource>:
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005958:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800595c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4313      	orrs	r3, r2
 8005964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <LL_RCC_SetRNGClockSource>:
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800597c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005984:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005988:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4313      	orrs	r3, r2
 8005990:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <LL_RCC_SetCLK48ClockSource>:
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80059a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <LL_RCC_SetUSBClockSource>:
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f7ff ffe3 	bl	80059a0 <LL_RCC_SetCLK48ClockSource>
}
 80059da:	bf00      	nop
 80059dc:	3708      	adds	r7, #8
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <LL_RCC_SetADCClockSource>:
{
 80059e2:	b480      	push	{r7}
 80059e4:	b083      	sub	sp, #12
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80059ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80059f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a02:	bf00      	nop
 8005a04:	370c      	adds	r7, #12
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <LL_RCC_SetRTCClockSource>:
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b083      	sub	sp, #12
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005a2e:	bf00      	nop
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr

08005a3a <LL_RCC_GetRTCClockSource>:
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <LL_RCC_ForceBackupDomainReset>:
{
 8005a54:	b480      	push	{r7}
 8005a56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005a6c:	bf00      	nop
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr

08005a76 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005a76:	b480      	push	{r7}
 8005a78:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005a8e:	bf00      	nop
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <LL_RCC_PLLSAI1_Enable>:
{
 8005a98:	b480      	push	{r7}
 8005a9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005aa6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005aaa:	6013      	str	r3, [r2, #0]
}
 8005aac:	bf00      	nop
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <LL_RCC_PLLSAI1_Disable>:
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ac4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ac8:	6013      	str	r3, [r2, #0]
}
 8005aca:	bf00      	nop
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <LL_RCC_PLLSAI1_IsReady>:
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ae2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ae6:	d101      	bne.n	8005aec <LL_RCC_PLLSAI1_IsReady+0x18>
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e000      	b.n	8005aee <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b088      	sub	sp, #32
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005b00:	2300      	movs	r3, #0
 8005b02:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005b04:	2300      	movs	r3, #0
 8005b06:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d033      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b1c:	d00c      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005b1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b22:	d802      	bhi.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d010      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005b28:	e017      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005b2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b2e:	d017      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8005b30:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005b34:	d016      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8005b36:	e010      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b46:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005b48:	e00d      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x6e>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	3304      	adds	r3, #4
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f000 f94d 	bl	8005dee <RCCEx_PLLSAI1_ConfigNP>
 8005b54:	4603      	mov	r3, r0
 8005b56:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005b58:	e005      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	77fb      	strb	r3, [r7, #31]
        break;
 8005b5e:	e002      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8005b60:	bf00      	nop
 8005b62:	e000      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8005b64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b66:	7ffb      	ldrb	r3, [r7, #31]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d105      	bne.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7ff fee9 	bl	8005948 <LL_RCC_SetSAIClockSource>
 8005b76:	e001      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b78:	7ffb      	ldrb	r3, [r7, #31]
 8005b7a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d046      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005b88:	f7ff ff57 	bl	8005a3a <LL_RCC_GetRTCClockSource>
 8005b8c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	69ba      	ldr	r2, [r7, #24]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d03c      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005b98:	f7fe fc54 	bl	8004444 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d105      	bne.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7ff ff31 	bl	8005a0e <LL_RCC_SetRTCClockSource>
 8005bac:	e02e      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bb6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005bb8:	f7ff ff4c 	bl	8005a54 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005bbc:	f7ff ff5b 	bl	8005a76 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005bce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005bd8:	f7ff fde2 	bl	80057a0 <LL_RCC_LSE_IsEnabled>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d114      	bne.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005be2:	f7fd fac1 	bl	8003168 <HAL_GetTick>
 8005be6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005be8:	e00b      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bea:	f7fd fabd 	bl	8003168 <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d902      	bls.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	77fb      	strb	r3, [r7, #31]
              break;
 8005c00:	e004      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005c02:	f7ff fddf 	bl	80057c4 <LL_RCC_LSE_IsReady>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d1ee      	bne.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005c0c:	7ffb      	ldrb	r3, [r7, #31]
 8005c0e:	77bb      	strb	r3, [r7, #30]
 8005c10:	e001      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c12:	7ffb      	ldrb	r3, [r7, #31]
 8005c14:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d004      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7ff fe2b 	bl	8005882 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0302 	and.w	r3, r3, #2
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d004      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	69db      	ldr	r3, [r3, #28]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f7ff fe36 	bl	80058ae <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0310 	and.w	r3, r3, #16
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d004      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7ff fe5e 	bl	8005914 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0320 	and.w	r3, r3, #32
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d004      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7ff fe53 	bl	8005914 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0304 	and.w	r3, r3, #4
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d004      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7ff fe2b 	bl	80058da <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0308 	and.w	r3, r3, #8
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d004      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7ff fe20 	bl	80058da <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d022      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7ff fe8e 	bl	80059cc <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cb8:	d107      	bne.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cc8:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005cd2:	d10b      	bne.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	3304      	adds	r3, #4
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f000 f8e3 	bl	8005ea4 <RCCEx_PLLSAI1_ConfigNQ>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005ce2:	7ffb      	ldrb	r3, [r7, #31]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      {
        /* set overall return value */
        status = ret;
 8005ce8:	7ffb      	ldrb	r3, [r7, #31]
 8005cea:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d02b      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d00:	d008      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d0a:	d003      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d105      	bne.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7ff fe2b 	bl	8005974 <LL_RCC_SetRNGClockSource>
 8005d1e:	e00a      	b.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d28:	60fb      	str	r3, [r7, #12]
 8005d2a:	2000      	movs	r0, #0
 8005d2c:	f7ff fe22 	bl	8005974 <LL_RCC_SetRNGClockSource>
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f7ff fe35 	bl	80059a0 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005d3e:	d107      	bne.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d4e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d022      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7ff fe3e 	bl	80059e2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d6e:	d107      	bne.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d7e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d88:	d10b      	bne.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	3304      	adds	r3, #4
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 f8e3 	bl	8005f5a <RCCEx_PLLSAI1_ConfigNR>
 8005d94:	4603      	mov	r3, r0
 8005d96:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005d98:	7ffb      	ldrb	r3, [r7, #31]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      {
        /* set overall return value */
        status = ret;
 8005d9e:	7ffb      	ldrb	r3, [r7, #31]
 8005da0:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d004      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7ff fd27 	bl	8005806 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d009      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7ff fd46 	bl	800585a <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7ff fd2d 	bl	8005832 <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 8005dd8:	7fbb      	ldrb	r3, [r7, #30]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3720      	adds	r7, #32
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8005de6:	f7ff fcff 	bl	80057e8 <LL_RCC_MSI_EnablePLLMode>
}
 8005dea:	bf00      	nop
 8005dec:	bd80      	pop	{r7, pc}

08005dee <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b084      	sub	sp, #16
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005df6:	2300      	movs	r3, #0
 8005df8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005dfa:	f7ff fe5c 	bl	8005ab6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005dfe:	f7fd f9b3 	bl	8003168 <HAL_GetTick>
 8005e02:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005e04:	e009      	b.n	8005e1a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e06:	f7fd f9af 	bl	8003168 <HAL_GetTick>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d902      	bls.n	8005e1a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	73fb      	strb	r3, [r7, #15]
      break;
 8005e18:	e004      	b.n	8005e24 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005e1a:	f7ff fe5b 	bl	8005ad4 <LL_RCC_PLLSAI1_IsReady>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1f0      	bne.n	8005e06 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005e24:	7bfb      	ldrb	r3, [r7, #15]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d137      	bne.n	8005e9a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	021b      	lsls	r3, r3, #8
 8005e3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e54:	4313      	orrs	r3, r2
 8005e56:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005e58:	f7ff fe1e 	bl	8005a98 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e5c:	f7fd f984 	bl	8003168 <HAL_GetTick>
 8005e60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005e62:	e009      	b.n	8005e78 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e64:	f7fd f980 	bl	8003168 <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d902      	bls.n	8005e78 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	73fb      	strb	r3, [r7, #15]
        break;
 8005e76:	e004      	b.n	8005e82 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005e78:	f7ff fe2c 	bl	8005ad4 <LL_RCC_PLLSAI1_IsReady>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d1f0      	bne.n	8005e64 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005e82:	7bfb      	ldrb	r3, [r7, #15]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d108      	bne.n	8005e9a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e8c:	691a      	ldr	r2, [r3, #16]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e96:	4313      	orrs	r3, r2
 8005e98:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005eac:	2300      	movs	r3, #0
 8005eae:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005eb0:	f7ff fe01 	bl	8005ab6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005eb4:	f7fd f958 	bl	8003168 <HAL_GetTick>
 8005eb8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005eba:	e009      	b.n	8005ed0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ebc:	f7fd f954 	bl	8003168 <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d902      	bls.n	8005ed0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	73fb      	strb	r3, [r7, #15]
      break;
 8005ece:	e004      	b.n	8005eda <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005ed0:	f7ff fe00 	bl	8005ad4 <LL_RCC_PLLSAI1_IsReady>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d1f0      	bne.n	8005ebc <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005eda:	7bfb      	ldrb	r3, [r7, #15]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d137      	bne.n	8005f50 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	021b      	lsls	r3, r3, #8
 8005ef0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005f0e:	f7ff fdc3 	bl	8005a98 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f12:	f7fd f929 	bl	8003168 <HAL_GetTick>
 8005f16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005f18:	e009      	b.n	8005f2e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f1a:	f7fd f925 	bl	8003168 <HAL_GetTick>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d902      	bls.n	8005f2e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	73fb      	strb	r3, [r7, #15]
        break;
 8005f2c:	e004      	b.n	8005f38 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005f2e:	f7ff fdd1 	bl	8005ad4 <LL_RCC_PLLSAI1_IsReady>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d1f0      	bne.n	8005f1a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005f38:	7bfb      	ldrb	r3, [r7, #15]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d108      	bne.n	8005f50 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f42:	691a      	ldr	r2, [r3, #16]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b084      	sub	sp, #16
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f62:	2300      	movs	r3, #0
 8005f64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005f66:	f7ff fda6 	bl	8005ab6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005f6a:	f7fd f8fd 	bl	8003168 <HAL_GetTick>
 8005f6e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005f70:	e009      	b.n	8005f86 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f72:	f7fd f8f9 	bl	8003168 <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d902      	bls.n	8005f86 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	73fb      	strb	r3, [r7, #15]
      break;
 8005f84:	e004      	b.n	8005f90 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005f86:	f7ff fda5 	bl	8005ad4 <LL_RCC_PLLSAI1_IsReady>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1f0      	bne.n	8005f72 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005f90:	7bfb      	ldrb	r3, [r7, #15]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d137      	bne.n	8006006 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	021b      	lsls	r3, r3, #8
 8005fa6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005faa:	4313      	orrs	r3, r2
 8005fac:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005fc4:	f7ff fd68 	bl	8005a98 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fc8:	f7fd f8ce 	bl	8003168 <HAL_GetTick>
 8005fcc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005fce:	e009      	b.n	8005fe4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005fd0:	f7fd f8ca 	bl	8003168 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d902      	bls.n	8005fe4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	73fb      	strb	r3, [r7, #15]
        break;
 8005fe2:	e004      	b.n	8005fee <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005fe4:	f7ff fd76 	bl	8005ad4 <LL_RCC_PLLSAI1_IsReady>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d1f0      	bne.n	8005fd0 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005fee:	7bfb      	ldrb	r3, [r7, #15]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d108      	bne.n	8006006 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ff8:	691a      	ldr	r2, [r3, #16]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006002:	4313      	orrs	r3, r2
 8006004:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006006:	7bfb      	ldrb	r3, [r7, #15]
}
 8006008:	4618      	mov	r0, r3
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e090      	b.n	8006144 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d106      	bne.n	800603c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f7fc f8f0 	bl	800221c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2202      	movs	r2, #2
 8006040:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	22ca      	movs	r2, #202	; 0xca
 800604a:	625a      	str	r2, [r3, #36]	; 0x24
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2253      	movs	r2, #83	; 0x53
 8006052:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 f89f 	bl	8006198 <RTC_EnterInitMode>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d009      	beq.n	8006074 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	22ff      	movs	r2, #255	; 0xff
 8006066:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2204      	movs	r2, #4
 800606c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e067      	b.n	8006144 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	6812      	ldr	r2, [r2, #0]
 800607e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006082:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006086:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	6899      	ldr	r1, [r3, #8]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685a      	ldr	r2, [r3, #4]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	431a      	orrs	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	431a      	orrs	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	430a      	orrs	r2, r1
 80060a4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	68d2      	ldr	r2, [r2, #12]
 80060ae:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6919      	ldr	r1, [r3, #16]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	041a      	lsls	r2, r3, #16
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	430a      	orrs	r2, r1
 80060c2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68da      	ldr	r2, [r3, #12]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060d2:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f022 0203 	bic.w	r2, r2, #3
 80060e2:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	69da      	ldr	r2, [r3, #28]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	431a      	orrs	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	430a      	orrs	r2, r1
 80060fa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f003 0320 	and.w	r3, r3, #32
 8006106:	2b00      	cmp	r3, #0
 8006108:	d113      	bne.n	8006132 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f81e 	bl	800614c <HAL_RTC_WaitForSynchro>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00d      	beq.n	8006132 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	22ff      	movs	r2, #255	; 0xff
 800611c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2204      	movs	r2, #4
 8006122:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e008      	b.n	8006144 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	22ff      	movs	r2, #255	; 0xff
 8006138:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8006142:	2300      	movs	r3, #0
  }
}
 8006144:	4618      	mov	r0, r3
 8006146:	3708      	adds	r7, #8
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68da      	ldr	r2, [r3, #12]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006162:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006164:	f7fd f800 	bl	8003168 <HAL_GetTick>
 8006168:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800616a:	e009      	b.n	8006180 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800616c:	f7fc fffc 	bl	8003168 <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800617a:	d901      	bls.n	8006180 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e007      	b.n	8006190 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	f003 0320 	and.w	r3, r3, #32
 800618a:	2b00      	cmp	r3, #0
 800618c:	d0ee      	beq.n	800616c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d119      	bne.n	80061e2 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061b6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80061b8:	f7fc ffd6 	bl	8003168 <HAL_GetTick>
 80061bc:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80061be:	e009      	b.n	80061d4 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80061c0:	f7fc ffd2 	bl	8003168 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061ce:	d901      	bls.n	80061d4 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e007      	b.n	80061e4 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d0ee      	beq.n	80061c0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3710      	adds	r7, #16
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <HAL_RTCEx_SetWakeUpTimer>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b086      	sub	sp, #24
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d101      	bne.n	8006206 <HAL_RTCEx_SetWakeUpTimer+0x1a>
 8006202:	2302      	movs	r3, #2
 8006204:	e089      	b.n	800631a <HAL_RTCEx_SetWakeUpTimer+0x12e>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2202      	movs	r2, #2
 8006212:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	22ca      	movs	r2, #202	; 0xca
 800621c:	625a      	str	r2, [r3, #36]	; 0x24
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2253      	movs	r2, #83	; 0x53
 8006224:	625a      	str	r2, [r3, #36]	; 0x24
 
  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != 0U){
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006230:	2b00      	cmp	r3, #0
 8006232:	d020      	beq.n	8006276 <HAL_RTCEx_SetWakeUpTimer+0x8a>
    tickstart = HAL_GetTick();
 8006234:	f7fc ff98 	bl	8003168 <HAL_GetTick>
 8006238:	6178      	str	r0, [r7, #20]

   /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800623a:	e015      	b.n	8006268 <HAL_RTCEx_SetWakeUpTimer+0x7c>
   {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800623c:	f7fc ff94 	bl	8003168 <HAL_GetTick>
 8006240:	4602      	mov	r2, r0
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800624a:	d90d      	bls.n	8006268 <HAL_RTCEx_SetWakeUpTimer+0x7c>
      {
       /* Enable the write protection for RTC registers */
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	22ff      	movs	r2, #255	; 0xff
 8006252:	625a      	str	r2, [r3, #36]	; 0x24

       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2203      	movs	r2, #3
 8006258:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

       /* Process Unlocked */ 
       __HAL_UNLOCK(hrtc);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 2020 	strb.w	r2, [r3, #32]

       return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e058      	b.n	800631a <HAL_RTCEx_SetWakeUpTimer+0x12e>
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	f003 0304 	and.w	r3, r3, #4
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1e2      	bne.n	800623c <HAL_RTCEx_SetWakeUpTimer+0x50>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	689a      	ldr	r2, [r3, #8]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006284:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8006286:	f7fc ff6f 	bl	8003168 <HAL_GetTick>
 800628a:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800628c:	e015      	b.n	80062ba <HAL_RTCEx_SetWakeUpTimer+0xce>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800628e:	f7fc ff6b 	bl	8003168 <HAL_GetTick>
 8006292:	4602      	mov	r2, r0
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800629c:	d90d      	bls.n	80062ba <HAL_RTCEx_SetWakeUpTimer+0xce>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	22ff      	movs	r2, #255	; 0xff
 80062a4:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2203      	movs	r2, #3
 80062aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */ 
      __HAL_UNLOCK(hrtc);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e02f      	b.n	800631a <HAL_RTCEx_SetWakeUpTimer+0x12e>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	f003 0304 	and.w	r3, r3, #4
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d0e2      	beq.n	800628e <HAL_RTCEx_SetWakeUpTimer+0xa2>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	689a      	ldr	r2, [r3, #8]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f022 0207 	bic.w	r2, r2, #7
 80062d6:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	6899      	ldr	r1, [r3, #8]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	430a      	orrs	r2, r1
 80062e6:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	615a      	str	r2, [r3, #20]

   /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	689a      	ldr	r2, [r3, #8]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062fe:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	22ff      	movs	r2, #255	; 0xff
 8006306:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3718      	adds	r7, #24
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b084      	sub	sp, #16
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d101      	bne.n	8006334 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e07c      	b.n	800642e <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006340:	b2db      	uxtb	r3, r3
 8006342:	2b00      	cmp	r3, #0
 8006344:	d106      	bne.n	8006354 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f7fc f83e 	bl	80023d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2202      	movs	r2, #2
 8006358:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800636a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006374:	d902      	bls.n	800637c <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006376:	2300      	movs	r3, #0
 8006378:	60fb      	str	r3, [r7, #12]
 800637a:	e002      	b.n	8006382 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800637c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006380:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800638a:	d007      	beq.n	800639c <HAL_SPI_Init+0x7a>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006394:	d002      	beq.n	800639c <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10b      	bne.n	80063bc <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063ac:	d903      	bls.n	80063b6 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2202      	movs	r2, #2
 80063b2:	631a      	str	r2, [r3, #48]	; 0x30
 80063b4:	e002      	b.n	80063bc <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	685a      	ldr	r2, [r3, #4]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	431a      	orrs	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	431a      	orrs	r2, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	431a      	orrs	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063da:	431a      	orrs	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	69db      	ldr	r3, [r3, #28]
 80063e0:	431a      	orrs	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	ea42 0103 	orr.w	r1, r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	430a      	orrs	r2, r1
 80063f4:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	0c1b      	lsrs	r3, r3, #16
 80063fc:	f003 0204 	and.w	r2, r3, #4
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006404:	431a      	orrs	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800640a:	431a      	orrs	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	ea42 0103 	orr.w	r1, r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	430a      	orrs	r2, r1
 800641c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b088      	sub	sp, #32
 800643a:	af00      	add	r7, sp, #0
 800643c:	60f8      	str	r0, [r7, #12]
 800643e:	60b9      	str	r1, [r7, #8]
 8006440:	603b      	str	r3, [r7, #0]
 8006442:	4613      	mov	r3, r2
 8006444:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006446:	2300      	movs	r3, #0
 8006448:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006450:	2b01      	cmp	r3, #1
 8006452:	d101      	bne.n	8006458 <HAL_SPI_Transmit+0x22>
 8006454:	2302      	movs	r3, #2
 8006456:	e150      	b.n	80066fa <HAL_SPI_Transmit+0x2c4>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006460:	f7fc fe82 	bl	8003168 <HAL_GetTick>
 8006464:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006466:	88fb      	ldrh	r3, [r7, #6]
 8006468:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b01      	cmp	r3, #1
 8006474:	d002      	beq.n	800647c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006476:	2302      	movs	r3, #2
 8006478:	77fb      	strb	r3, [r7, #31]
    goto error;
 800647a:	e135      	b.n	80066e8 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d002      	beq.n	8006488 <HAL_SPI_Transmit+0x52>
 8006482:	88fb      	ldrh	r3, [r7, #6]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d102      	bne.n	800648e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800648c:	e12c      	b.n	80066e8 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2203      	movs	r2, #3
 8006492:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	88fa      	ldrh	r2, [r7, #6]
 80064a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	88fa      	ldrh	r2, [r7, #6]
 80064ac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064d8:	d107      	bne.n	80064ea <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f4:	2b40      	cmp	r3, #64	; 0x40
 80064f6:	d007      	beq.n	8006508 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006506:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006510:	d94b      	bls.n	80065aa <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d002      	beq.n	8006520 <HAL_SPI_Transmit+0xea>
 800651a:	8afb      	ldrh	r3, [r7, #22]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d13e      	bne.n	800659e <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006524:	881a      	ldrh	r2, [r3, #0]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006530:	1c9a      	adds	r2, r3, #2
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800653a:	b29b      	uxth	r3, r3
 800653c:	3b01      	subs	r3, #1
 800653e:	b29a      	uxth	r2, r3
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006544:	e02b      	b.n	800659e <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	f003 0302 	and.w	r3, r3, #2
 8006550:	2b02      	cmp	r3, #2
 8006552:	d112      	bne.n	800657a <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006558:	881a      	ldrh	r2, [r3, #0]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006564:	1c9a      	adds	r2, r3, #2
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800656e:	b29b      	uxth	r3, r3
 8006570:	3b01      	subs	r3, #1
 8006572:	b29a      	uxth	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006578:	e011      	b.n	800659e <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800657a:	f7fc fdf5 	bl	8003168 <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	683a      	ldr	r2, [r7, #0]
 8006586:	429a      	cmp	r2, r3
 8006588:	d803      	bhi.n	8006592 <HAL_SPI_Transmit+0x15c>
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006590:	d102      	bne.n	8006598 <HAL_SPI_Transmit+0x162>
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d102      	bne.n	800659e <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8006598:	2303      	movs	r3, #3
 800659a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800659c:	e0a4      	b.n	80066e8 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1ce      	bne.n	8006546 <HAL_SPI_Transmit+0x110>
 80065a8:	e07c      	b.n	80066a4 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d002      	beq.n	80065b8 <HAL_SPI_Transmit+0x182>
 80065b2:	8afb      	ldrh	r3, [r7, #22]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d170      	bne.n	800669a <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065bc:	b29b      	uxth	r3, r3
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d912      	bls.n	80065e8 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c6:	881a      	ldrh	r2, [r3, #0]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d2:	1c9a      	adds	r2, r3, #2
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065dc:	b29b      	uxth	r3, r3
 80065de:	3b02      	subs	r3, #2
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065e6:	e058      	b.n	800669a <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	330c      	adds	r3, #12
 80065f2:	7812      	ldrb	r2, [r2, #0]
 80065f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fa:	1c5a      	adds	r2, r3, #1
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006604:	b29b      	uxth	r3, r3
 8006606:	3b01      	subs	r3, #1
 8006608:	b29a      	uxth	r2, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800660e:	e044      	b.n	800669a <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f003 0302 	and.w	r3, r3, #2
 800661a:	2b02      	cmp	r3, #2
 800661c:	d12b      	bne.n	8006676 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006622:	b29b      	uxth	r3, r3
 8006624:	2b01      	cmp	r3, #1
 8006626:	d912      	bls.n	800664e <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800662c:	881a      	ldrh	r2, [r3, #0]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006638:	1c9a      	adds	r2, r3, #2
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006642:	b29b      	uxth	r3, r3
 8006644:	3b02      	subs	r3, #2
 8006646:	b29a      	uxth	r2, r3
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800664c:	e025      	b.n	800669a <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	330c      	adds	r3, #12
 8006658:	7812      	ldrb	r2, [r2, #0]
 800665a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006660:	1c5a      	adds	r2, r3, #1
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800666a:	b29b      	uxth	r3, r3
 800666c:	3b01      	subs	r3, #1
 800666e:	b29a      	uxth	r2, r3
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006674:	e011      	b.n	800669a <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006676:	f7fc fd77 	bl	8003168 <HAL_GetTick>
 800667a:	4602      	mov	r2, r0
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	683a      	ldr	r2, [r7, #0]
 8006682:	429a      	cmp	r2, r3
 8006684:	d803      	bhi.n	800668e <HAL_SPI_Transmit+0x258>
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800668c:	d102      	bne.n	8006694 <HAL_SPI_Transmit+0x25e>
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d102      	bne.n	800669a <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006698:	e026      	b.n	80066e8 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800669e:	b29b      	uxth	r3, r3
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1b5      	bne.n	8006610 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066a4:	69ba      	ldr	r2, [r7, #24]
 80066a6:	6839      	ldr	r1, [r7, #0]
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f000 fc94 	bl	8006fd6 <SPI_EndRxTxTransaction>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d002      	beq.n	80066ba <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2220      	movs	r2, #32
 80066b8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10a      	bne.n	80066d8 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066c2:	2300      	movs	r3, #0
 80066c4:	613b      	str	r3, [r7, #16]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	613b      	str	r3, [r7, #16]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	613b      	str	r3, [r7, #16]
 80066d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d002      	beq.n	80066e6 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	77fb      	strb	r3, [r7, #31]
 80066e4:	e000      	b.n	80066e8 <HAL_SPI_Transmit+0x2b2>
  }

error:
 80066e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80066f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3720      	adds	r7, #32
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006702:	b580      	push	{r7, lr}
 8006704:	b088      	sub	sp, #32
 8006706:	af02      	add	r7, sp, #8
 8006708:	60f8      	str	r0, [r7, #12]
 800670a:	60b9      	str	r1, [r7, #8]
 800670c:	603b      	str	r3, [r7, #0]
 800670e:	4613      	mov	r3, r2
 8006710:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006712:	2300      	movs	r3, #0
 8006714:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800671e:	d112      	bne.n	8006746 <HAL_SPI_Receive+0x44>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10e      	bne.n	8006746 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2204      	movs	r2, #4
 800672c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006730:	88fa      	ldrh	r2, [r7, #6]
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	9300      	str	r3, [sp, #0]
 8006736:	4613      	mov	r3, r2
 8006738:	68ba      	ldr	r2, [r7, #8]
 800673a:	68b9      	ldr	r1, [r7, #8]
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f000 f908 	bl	8006952 <HAL_SPI_TransmitReceive>
 8006742:	4603      	mov	r3, r0
 8006744:	e101      	b.n	800694a <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800674c:	2b01      	cmp	r3, #1
 800674e:	d101      	bne.n	8006754 <HAL_SPI_Receive+0x52>
 8006750:	2302      	movs	r3, #2
 8006752:	e0fa      	b.n	800694a <HAL_SPI_Receive+0x248>
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800675c:	f7fc fd04 	bl	8003168 <HAL_GetTick>
 8006760:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b01      	cmp	r3, #1
 800676c:	d002      	beq.n	8006774 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800676e:	2302      	movs	r3, #2
 8006770:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006772:	e0e1      	b.n	8006938 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d002      	beq.n	8006780 <HAL_SPI_Receive+0x7e>
 800677a:	88fb      	ldrh	r3, [r7, #6]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d102      	bne.n	8006786 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006784:	e0d8      	b.n	8006938 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2204      	movs	r2, #4
 800678a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	68ba      	ldr	r2, [r7, #8]
 8006798:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	88fa      	ldrh	r2, [r7, #6]
 800679e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	88fa      	ldrh	r2, [r7, #6]
 80067a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80067d0:	d908      	bls.n	80067e4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	685a      	ldr	r2, [r3, #4]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80067e0:	605a      	str	r2, [r3, #4]
 80067e2:	e007      	b.n	80067f4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	685a      	ldr	r2, [r3, #4]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80067f2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067fc:	d107      	bne.n	800680e <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800680c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006818:	2b40      	cmp	r3, #64	; 0x40
 800681a:	d007      	beq.n	800682c <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800682a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006834:	d867      	bhi.n	8006906 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006836:	e030      	b.n	800689a <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f003 0301 	and.w	r3, r3, #1
 8006842:	2b01      	cmp	r3, #1
 8006844:	d117      	bne.n	8006876 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f103 020c 	add.w	r2, r3, #12
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006852:	7812      	ldrb	r2, [r2, #0]
 8006854:	b2d2      	uxtb	r2, r2
 8006856:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685c:	1c5a      	adds	r2, r3, #1
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006868:	b29b      	uxth	r3, r3
 800686a:	3b01      	subs	r3, #1
 800686c:	b29a      	uxth	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006874:	e011      	b.n	800689a <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006876:	f7fc fc77 	bl	8003168 <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	683a      	ldr	r2, [r7, #0]
 8006882:	429a      	cmp	r2, r3
 8006884:	d803      	bhi.n	800688e <HAL_SPI_Receive+0x18c>
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800688c:	d102      	bne.n	8006894 <HAL_SPI_Receive+0x192>
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d102      	bne.n	800689a <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006898:	e04e      	b.n	8006938 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1c8      	bne.n	8006838 <HAL_SPI_Receive+0x136>
 80068a6:	e034      	b.n	8006912 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	f003 0301 	and.w	r3, r3, #1
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d115      	bne.n	80068e2 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68da      	ldr	r2, [r3, #12]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c0:	b292      	uxth	r2, r2
 80068c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c8:	1c9a      	adds	r2, r3, #2
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	3b01      	subs	r3, #1
 80068d8:	b29a      	uxth	r2, r3
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80068e0:	e011      	b.n	8006906 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068e2:	f7fc fc41 	bl	8003168 <HAL_GetTick>
 80068e6:	4602      	mov	r2, r0
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	683a      	ldr	r2, [r7, #0]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d803      	bhi.n	80068fa <HAL_SPI_Receive+0x1f8>
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068f8:	d102      	bne.n	8006900 <HAL_SPI_Receive+0x1fe>
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d102      	bne.n	8006906 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006904:	e018      	b.n	8006938 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800690c:	b29b      	uxth	r3, r3
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1ca      	bne.n	80068a8 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	6839      	ldr	r1, [r7, #0]
 8006916:	68f8      	ldr	r0, [r7, #12]
 8006918:	f000 fb05 	bl	8006f26 <SPI_EndRxTransaction>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d002      	beq.n	8006928 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2220      	movs	r2, #32
 8006926:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800692c:	2b00      	cmp	r3, #0
 800692e:	d002      	beq.n	8006936 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	75fb      	strb	r3, [r7, #23]
 8006934:	e000      	b.n	8006938 <HAL_SPI_Receive+0x236>
  }

error :
 8006936:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006948:	7dfb      	ldrb	r3, [r7, #23]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3718      	adds	r7, #24
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b08a      	sub	sp, #40	; 0x28
 8006956:	af00      	add	r7, sp, #0
 8006958:	60f8      	str	r0, [r7, #12]
 800695a:	60b9      	str	r1, [r7, #8]
 800695c:	607a      	str	r2, [r7, #4]
 800695e:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006960:	2301      	movs	r3, #1
 8006962:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006964:	2300      	movs	r3, #0
 8006966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006970:	2b01      	cmp	r3, #1
 8006972:	d101      	bne.n	8006978 <HAL_SPI_TransmitReceive+0x26>
 8006974:	2302      	movs	r3, #2
 8006976:	e1fb      	b.n	8006d70 <HAL_SPI_TransmitReceive+0x41e>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006980:	f7fc fbf2 	bl	8003168 <HAL_GetTick>
 8006984:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800698c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006994:	887b      	ldrh	r3, [r7, #2]
 8006996:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006998:	887b      	ldrh	r3, [r7, #2]
 800699a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800699c:	7efb      	ldrb	r3, [r7, #27]
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d00e      	beq.n	80069c0 <HAL_SPI_TransmitReceive+0x6e>
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069a8:	d106      	bne.n	80069b8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d102      	bne.n	80069b8 <HAL_SPI_TransmitReceive+0x66>
 80069b2:	7efb      	ldrb	r3, [r7, #27]
 80069b4:	2b04      	cmp	r3, #4
 80069b6:	d003      	beq.n	80069c0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80069b8:	2302      	movs	r3, #2
 80069ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80069be:	e1cd      	b.n	8006d5c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d005      	beq.n	80069d2 <HAL_SPI_TransmitReceive+0x80>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d002      	beq.n	80069d2 <HAL_SPI_TransmitReceive+0x80>
 80069cc:	887b      	ldrh	r3, [r7, #2]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d103      	bne.n	80069da <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80069d8:	e1c0      	b.n	8006d5c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b04      	cmp	r3, #4
 80069e4:	d003      	beq.n	80069ee <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2205      	movs	r2, #5
 80069ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	887a      	ldrh	r2, [r7, #2]
 80069fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	887a      	ldrh	r2, [r7, #2]
 8006a06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	887a      	ldrh	r2, [r7, #2]
 8006a14:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	887a      	ldrh	r2, [r7, #2]
 8006a1a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a30:	d802      	bhi.n	8006a38 <HAL_SPI_TransmitReceive+0xe6>
 8006a32:	8a3b      	ldrh	r3, [r7, #16]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d908      	bls.n	8006a4a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006a46:	605a      	str	r2, [r3, #4]
 8006a48:	e007      	b.n	8006a5a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	685a      	ldr	r2, [r3, #4]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a58:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a64:	2b40      	cmp	r3, #64	; 0x40
 8006a66:	d007      	beq.n	8006a78 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a80:	d97c      	bls.n	8006b7c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d002      	beq.n	8006a90 <HAL_SPI_TransmitReceive+0x13e>
 8006a8a:	8a7b      	ldrh	r3, [r7, #18]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d169      	bne.n	8006b64 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a94:	881a      	ldrh	r2, [r3, #0]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa0:	1c9a      	adds	r2, r3, #2
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	3b01      	subs	r3, #1
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ab4:	e056      	b.n	8006b64 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	f003 0302 	and.w	r3, r3, #2
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d11b      	bne.n	8006afc <HAL_SPI_TransmitReceive+0x1aa>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d016      	beq.n	8006afc <HAL_SPI_TransmitReceive+0x1aa>
 8006ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d113      	bne.n	8006afc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad8:	881a      	ldrh	r2, [r3, #0]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae4:	1c9a      	adds	r2, r3, #2
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	3b01      	subs	r3, #1
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006af8:	2300      	movs	r3, #0
 8006afa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f003 0301 	and.w	r3, r3, #1
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d11c      	bne.n	8006b44 <HAL_SPI_TransmitReceive+0x1f2>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d016      	beq.n	8006b44 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68da      	ldr	r2, [r3, #12]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b20:	b292      	uxth	r2, r2
 8006b22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b28:	1c9a      	adds	r2, r3, #2
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	3b01      	subs	r3, #1
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b40:	2301      	movs	r3, #1
 8006b42:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006b44:	f7fc fb10 	bl	8003168 <HAL_GetTick>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d807      	bhi.n	8006b64 <HAL_SPI_TransmitReceive+0x212>
 8006b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b5a:	d003      	beq.n	8006b64 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006b62:	e0fb      	b.n	8006d5c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1a3      	bne.n	8006ab6 <HAL_SPI_TransmitReceive+0x164>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d19d      	bne.n	8006ab6 <HAL_SPI_TransmitReceive+0x164>
 8006b7a:	e0df      	b.n	8006d3c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d003      	beq.n	8006b8c <HAL_SPI_TransmitReceive+0x23a>
 8006b84:	8a7b      	ldrh	r3, [r7, #18]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	f040 80cb 	bne.w	8006d22 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d912      	bls.n	8006bbc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9a:	881a      	ldrh	r2, [r3, #0]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba6:	1c9a      	adds	r2, r3, #2
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	3b02      	subs	r3, #2
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006bba:	e0b2      	b.n	8006d22 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	330c      	adds	r3, #12
 8006bc6:	7812      	ldrb	r2, [r2, #0]
 8006bc8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bce:	1c5a      	adds	r2, r3, #1
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006be2:	e09e      	b.n	8006d22 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	f003 0302 	and.w	r3, r3, #2
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	d134      	bne.n	8006c5c <HAL_SPI_TransmitReceive+0x30a>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d02f      	beq.n	8006c5c <HAL_SPI_TransmitReceive+0x30a>
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d12c      	bne.n	8006c5c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d912      	bls.n	8006c32 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c10:	881a      	ldrh	r2, [r3, #0]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1c:	1c9a      	adds	r2, r3, #2
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	3b02      	subs	r3, #2
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c30:	e012      	b.n	8006c58 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	330c      	adds	r3, #12
 8006c3c:	7812      	ldrb	r2, [r2, #0]
 8006c3e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c44:	1c5a      	adds	r2, r3, #1
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	3b01      	subs	r3, #1
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	f003 0301 	and.w	r3, r3, #1
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d148      	bne.n	8006cfc <HAL_SPI_TransmitReceive+0x3aa>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d042      	beq.n	8006cfc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d923      	bls.n	8006cca <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68da      	ldr	r2, [r3, #12]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8c:	b292      	uxth	r2, r2
 8006c8e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c94:	1c9a      	adds	r2, r3, #2
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	3b02      	subs	r3, #2
 8006ca4:	b29a      	uxth	r2, r3
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d81f      	bhi.n	8006cf8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	685a      	ldr	r2, [r3, #4]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006cc6:	605a      	str	r2, [r3, #4]
 8006cc8:	e016      	b.n	8006cf8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f103 020c 	add.w	r2, r3, #12
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd6:	7812      	ldrb	r2, [r2, #0]
 8006cd8:	b2d2      	uxtb	r2, r2
 8006cda:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce0:	1c5a      	adds	r2, r3, #1
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006cfc:	f7fc fa34 	bl	8003168 <HAL_GetTick>
 8006d00:	4602      	mov	r2, r0
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d803      	bhi.n	8006d14 <HAL_SPI_TransmitReceive+0x3c2>
 8006d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d12:	d102      	bne.n	8006d1a <HAL_SPI_TransmitReceive+0x3c8>
 8006d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d103      	bne.n	8006d22 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006d20:	e01c      	b.n	8006d5c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	f47f af5b 	bne.w	8006be4 <HAL_SPI_TransmitReceive+0x292>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f47f af54 	bne.w	8006be4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d3c:	69fa      	ldr	r2, [r7, #28]
 8006d3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f000 f948 	bl	8006fd6 <SPI_EndRxTxTransaction>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d006      	beq.n	8006d5a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2220      	movs	r2, #32
 8006d56:	661a      	str	r2, [r3, #96]	; 0x60
 8006d58:	e000      	b.n	8006d5c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006d5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006d6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3728      	adds	r7, #40	; 0x28
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	603b      	str	r3, [r7, #0]
 8006d84:	4613      	mov	r3, r2
 8006d86:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d88:	e04c      	b.n	8006e24 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d90:	d048      	beq.n	8006e24 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006d92:	f7fc f9e9 	bl	8003168 <HAL_GetTick>
 8006d96:	4602      	mov	r2, r0
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	683a      	ldr	r2, [r7, #0]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d902      	bls.n	8006da8 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d13d      	bne.n	8006e24 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	685a      	ldr	r2, [r3, #4]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006db6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dc0:	d111      	bne.n	8006de6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dca:	d004      	beq.n	8006dd6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dd4:	d107      	bne.n	8006de6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006de4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dee:	d10f      	bne.n	8006e10 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006dfe:	601a      	str	r2, [r3, #0]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e0e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006e20:	2303      	movs	r3, #3
 8006e22:	e00f      	b.n	8006e44 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	689a      	ldr	r2, [r3, #8]
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	68ba      	ldr	r2, [r7, #8]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	bf0c      	ite	eq
 8006e34:	2301      	moveq	r3, #1
 8006e36:	2300      	movne	r3, #0
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	79fb      	ldrb	r3, [r7, #7]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d1a3      	bne.n	8006d8a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
 8006e58:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8006e5a:	e057      	b.n	8006f0c <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006e62:	d106      	bne.n	8006e72 <SPI_WaitFifoStateUntilTimeout+0x26>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d103      	bne.n	8006e72 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	330c      	adds	r3, #12
 8006e70:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e78:	d048      	beq.n	8006f0c <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006e7a:	f7fc f975 	bl	8003168 <HAL_GetTick>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	683a      	ldr	r2, [r7, #0]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d902      	bls.n	8006e90 <SPI_WaitFifoStateUntilTimeout+0x44>
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d13d      	bne.n	8006f0c <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	685a      	ldr	r2, [r3, #4]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e9e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ea8:	d111      	bne.n	8006ece <SPI_WaitFifoStateUntilTimeout+0x82>
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006eb2:	d004      	beq.n	8006ebe <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ebc:	d107      	bne.n	8006ece <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ecc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ed6:	d10f      	bne.n	8006ef8 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ee6:	601a      	str	r2, [r3, #0]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ef6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	e008      	b.n	8006f1e <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	689a      	ldr	r2, [r3, #8]
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	4013      	ands	r3, r2
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d19f      	bne.n	8006e5c <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b086      	sub	sp, #24
 8006f2a:	af02      	add	r7, sp, #8
 8006f2c:	60f8      	str	r0, [r7, #12]
 8006f2e:	60b9      	str	r1, [r7, #8]
 8006f30:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f3a:	d111      	bne.n	8006f60 <SPI_EndRxTransaction+0x3a>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f44:	d004      	beq.n	8006f50 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f4e:	d107      	bne.n	8006f60 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f5e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	9300      	str	r3, [sp, #0]
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	2200      	movs	r2, #0
 8006f68:	2180      	movs	r1, #128	; 0x80
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f7ff ff04 	bl	8006d78 <SPI_WaitFlagStateUntilTimeout>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d007      	beq.n	8006f86 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f7a:	f043 0220 	orr.w	r2, r3, #32
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e023      	b.n	8006fce <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f8e:	d11d      	bne.n	8006fcc <SPI_EndRxTransaction+0xa6>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f98:	d004      	beq.n	8006fa4 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fa2:	d113      	bne.n	8006fcc <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f7ff ff4b 	bl	8006e4c <SPI_WaitFifoStateUntilTimeout>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d007      	beq.n	8006fcc <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fc0:	f043 0220 	orr.w	r2, r3, #32
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e000      	b.n	8006fce <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b086      	sub	sp, #24
 8006fda:	af02      	add	r7, sp, #8
 8006fdc:	60f8      	str	r0, [r7, #12]
 8006fde:	60b9      	str	r1, [r7, #8]
 8006fe0:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	9300      	str	r3, [sp, #0]
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006fee:	68f8      	ldr	r0, [r7, #12]
 8006ff0:	f7ff ff2c 	bl	8006e4c <SPI_WaitFifoStateUntilTimeout>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d007      	beq.n	800700a <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ffe:	f043 0220 	orr.w	r2, r3, #32
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e027      	b.n	800705a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	9300      	str	r3, [sp, #0]
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	2200      	movs	r2, #0
 8007012:	2180      	movs	r1, #128	; 0x80
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f7ff feaf 	bl	8006d78 <SPI_WaitFlagStateUntilTimeout>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d007      	beq.n	8007030 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007024:	f043 0220 	orr.w	r2, r3, #32
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	e014      	b.n	800705a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	9300      	str	r3, [sp, #0]
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	2200      	movs	r2, #0
 8007038:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f7ff ff05 	bl	8006e4c <SPI_WaitFifoStateUntilTimeout>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d007      	beq.n	8007058 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800704c:	f043 0220 	orr.w	r2, r3, #32
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	e000      	b.n	800705a <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b082      	sub	sp, #8
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d101      	bne.n	8007074 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	e01d      	b.n	80070b0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b00      	cmp	r3, #0
 800707e:	d106      	bne.n	800708e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f7fb fe75 	bl	8002d78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2202      	movs	r2, #2
 8007092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	3304      	adds	r3, #4
 800709e:	4619      	mov	r1, r3
 80070a0:	4610      	mov	r0, r2
 80070a2:	f000 f97b 	bl	800739c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3708      	adds	r7, #8
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68da      	ldr	r2, [r3, #12]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f042 0201 	orr.w	r2, r2, #1
 80070ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	689a      	ldr	r2, [r3, #8]
 80070d6:	4b0c      	ldr	r3, [pc, #48]	; (8007108 <HAL_TIM_Base_Start_IT+0x50>)
 80070d8:	4013      	ands	r3, r2
 80070da:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2b06      	cmp	r3, #6
 80070e0:	d00b      	beq.n	80070fa <HAL_TIM_Base_Start_IT+0x42>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070e8:	d007      	beq.n	80070fa <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f042 0201 	orr.w	r2, r2, #1
 80070f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3714      	adds	r7, #20
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr
 8007108:	00010007 	.word	0x00010007

0800710c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	f003 0302 	and.w	r3, r3, #2
 800711e:	2b02      	cmp	r3, #2
 8007120:	d122      	bne.n	8007168 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	f003 0302 	and.w	r3, r3, #2
 800712c:	2b02      	cmp	r3, #2
 800712e:	d11b      	bne.n	8007168 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f06f 0202 	mvn.w	r2, #2
 8007138:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	f003 0303 	and.w	r3, r3, #3
 800714a:	2b00      	cmp	r3, #0
 800714c:	d003      	beq.n	8007156 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f905 	bl	800735e <HAL_TIM_IC_CaptureCallback>
 8007154:	e005      	b.n	8007162 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f8f7 	bl	800734a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 f908 	bl	8007372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	f003 0304 	and.w	r3, r3, #4
 8007172:	2b04      	cmp	r3, #4
 8007174:	d122      	bne.n	80071bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	f003 0304 	and.w	r3, r3, #4
 8007180:	2b04      	cmp	r3, #4
 8007182:	d11b      	bne.n	80071bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f06f 0204 	mvn.w	r2, #4
 800718c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2202      	movs	r2, #2
 8007192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d003      	beq.n	80071aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f8db 	bl	800735e <HAL_TIM_IC_CaptureCallback>
 80071a8:	e005      	b.n	80071b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 f8cd 	bl	800734a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f8de 	bl	8007372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	f003 0308 	and.w	r3, r3, #8
 80071c6:	2b08      	cmp	r3, #8
 80071c8:	d122      	bne.n	8007210 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	f003 0308 	and.w	r3, r3, #8
 80071d4:	2b08      	cmp	r3, #8
 80071d6:	d11b      	bne.n	8007210 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f06f 0208 	mvn.w	r2, #8
 80071e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2204      	movs	r2, #4
 80071e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	69db      	ldr	r3, [r3, #28]
 80071ee:	f003 0303 	and.w	r3, r3, #3
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d003      	beq.n	80071fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f8b1 	bl	800735e <HAL_TIM_IC_CaptureCallback>
 80071fc:	e005      	b.n	800720a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 f8a3 	bl	800734a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f8b4 	bl	8007372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	f003 0310 	and.w	r3, r3, #16
 800721a:	2b10      	cmp	r3, #16
 800721c:	d122      	bne.n	8007264 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	f003 0310 	and.w	r3, r3, #16
 8007228:	2b10      	cmp	r3, #16
 800722a:	d11b      	bne.n	8007264 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f06f 0210 	mvn.w	r2, #16
 8007234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2208      	movs	r2, #8
 800723a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	69db      	ldr	r3, [r3, #28]
 8007242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007246:	2b00      	cmp	r3, #0
 8007248:	d003      	beq.n	8007252 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f887 	bl	800735e <HAL_TIM_IC_CaptureCallback>
 8007250:	e005      	b.n	800725e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 f879 	bl	800734a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f88a 	bl	8007372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	f003 0301 	and.w	r3, r3, #1
 800726e:	2b01      	cmp	r3, #1
 8007270:	d10e      	bne.n	8007290 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	f003 0301 	and.w	r3, r3, #1
 800727c:	2b01      	cmp	r3, #1
 800727e:	d107      	bne.n	8007290 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f06f 0201 	mvn.w	r2, #1
 8007288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f7fa ff2e 	bl	80020ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800729a:	2b80      	cmp	r3, #128	; 0x80
 800729c:	d10e      	bne.n	80072bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072a8:	2b80      	cmp	r3, #128	; 0x80
 80072aa:	d107      	bne.n	80072bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80072b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f8de 	bl	8007478 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072ca:	d10e      	bne.n	80072ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072d6:	2b80      	cmp	r3, #128	; 0x80
 80072d8:	d107      	bne.n	80072ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80072e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 f8d1 	bl	800748c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f4:	2b40      	cmp	r3, #64	; 0x40
 80072f6:	d10e      	bne.n	8007316 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007302:	2b40      	cmp	r3, #64	; 0x40
 8007304:	d107      	bne.n	8007316 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800730e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 f838 	bl	8007386 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	f003 0320 	and.w	r3, r3, #32
 8007320:	2b20      	cmp	r3, #32
 8007322:	d10e      	bne.n	8007342 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	f003 0320 	and.w	r3, r3, #32
 800732e:	2b20      	cmp	r3, #32
 8007330:	d107      	bne.n	8007342 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f06f 0220 	mvn.w	r2, #32
 800733a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 f891 	bl	8007464 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007342:	bf00      	nop
 8007344:	3708      	adds	r7, #8
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800734a:	b480      	push	{r7}
 800734c:	b083      	sub	sp, #12
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007352:	bf00      	nop
 8007354:	370c      	adds	r7, #12
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr

0800735e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800735e:	b480      	push	{r7}
 8007360:	b083      	sub	sp, #12
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007366:	bf00      	nop
 8007368:	370c      	adds	r7, #12
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr

08007372 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007372:	b480      	push	{r7}
 8007374:	b083      	sub	sp, #12
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800737a:	bf00      	nop
 800737c:	370c      	adds	r7, #12
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr

08007386 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007386:	b480      	push	{r7}
 8007388:	b083      	sub	sp, #12
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800738e:	bf00      	nop
 8007390:	370c      	adds	r7, #12
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr
	...

0800739c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a2a      	ldr	r2, [pc, #168]	; (8007458 <TIM_Base_SetConfig+0xbc>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d003      	beq.n	80073bc <TIM_Base_SetConfig+0x20>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073ba:	d108      	bne.n	80073ce <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a21      	ldr	r2, [pc, #132]	; (8007458 <TIM_Base_SetConfig+0xbc>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d00b      	beq.n	80073ee <TIM_Base_SetConfig+0x52>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073dc:	d007      	beq.n	80073ee <TIM_Base_SetConfig+0x52>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a1e      	ldr	r2, [pc, #120]	; (800745c <TIM_Base_SetConfig+0xc0>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d003      	beq.n	80073ee <TIM_Base_SetConfig+0x52>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a1d      	ldr	r2, [pc, #116]	; (8007460 <TIM_Base_SetConfig+0xc4>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d108      	bne.n	8007400 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	4313      	orrs	r3, r2
 80073fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	695b      	ldr	r3, [r3, #20]
 800740a:	4313      	orrs	r3, r2
 800740c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	689a      	ldr	r2, [r3, #8]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a0c      	ldr	r2, [pc, #48]	; (8007458 <TIM_Base_SetConfig+0xbc>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d007      	beq.n	800743c <TIM_Base_SetConfig+0xa0>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a0b      	ldr	r2, [pc, #44]	; (800745c <TIM_Base_SetConfig+0xc0>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d003      	beq.n	800743c <TIM_Base_SetConfig+0xa0>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a0a      	ldr	r2, [pc, #40]	; (8007460 <TIM_Base_SetConfig+0xc4>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d103      	bne.n	8007444 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	691a      	ldr	r2, [r3, #16]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	615a      	str	r2, [r3, #20]
}
 800744a:	bf00      	nop
 800744c:	3714      	adds	r7, #20
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	40012c00 	.word	0x40012c00
 800745c:	40014400 	.word	0x40014400
 8007460:	40014800 	.word	0x40014800

08007464 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800746c:	bf00      	nop
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007480:	bf00      	nop
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007494:	bf00      	nop
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <LL_RCC_GetUSARTClockSource>:
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80074a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4013      	ands	r3, r2
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <LL_RCC_GetLPUARTClockSource>:
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80074c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4013      	ands	r3, r2
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d101      	bne.n	80074f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	e042      	b.n	8007578 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d106      	bne.n	800750a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f7fb fcd1 	bl	8002eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2224      	movs	r2, #36	; 0x24
 800750e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f022 0201 	bic.w	r2, r2, #1
 8007520:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 f82c 	bl	8007580 <UART_SetConfig>
 8007528:	4603      	mov	r3, r0
 800752a:	2b01      	cmp	r3, #1
 800752c:	d101      	bne.n	8007532 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e022      	b.n	8007578 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007536:	2b00      	cmp	r3, #0
 8007538:	d002      	beq.n	8007540 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f001 f884 	bl	8008648 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	685a      	ldr	r2, [r3, #4]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800754e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	689a      	ldr	r2, [r3, #8]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800755e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f042 0201 	orr.w	r2, r2, #1
 800756e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f001 f90b 	bl	800878c <UART_CheckIdleState>
 8007576:	4603      	mov	r3, r0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3708      	adds	r7, #8
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007580:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007584:	b08a      	sub	sp, #40	; 0x28
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800758a:	2300      	movs	r3, #0
 800758c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800758e:	2300      	movs	r3, #0
 8007590:	76fb      	strb	r3, [r7, #27]
#if defined(LPUART1)
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8007592:	2300      	movs	r3, #0
 8007594:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	689a      	ldr	r2, [r3, #8]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	431a      	orrs	r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	695b      	ldr	r3, [r3, #20]
 80075a4:	431a      	orrs	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	69db      	ldr	r3, [r3, #28]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075b4:	4313      	orrs	r3, r2
 80075b6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	4ba4      	ldr	r3, [pc, #656]	; (8007850 <UART_SetConfig+0x2d0>)
 80075c0:	4013      	ands	r3, r2
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	6812      	ldr	r2, [r2, #0]
 80075c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075c8:	430b      	orrs	r3, r1
 80075ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	68da      	ldr	r2, [r3, #12]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	430a      	orrs	r2, r1
 80075e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	699b      	ldr	r3, [r3, #24]
 80075e6:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a99      	ldr	r2, [pc, #612]	; (8007854 <UART_SetConfig+0x2d4>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d004      	beq.n	80075fc <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075f8:	4313      	orrs	r3, r2
 80075fa:	627b      	str	r3, [r7, #36]	; 0x24
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007606:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	6812      	ldr	r2, [r2, #0]
 800760e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007610:	430b      	orrs	r3, r1
 8007612:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761a:	f023 010f 	bic.w	r1, r3, #15
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	430a      	orrs	r2, r1
 8007628:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a8a      	ldr	r2, [pc, #552]	; (8007858 <UART_SetConfig+0x2d8>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d126      	bne.n	8007682 <UART_SetConfig+0x102>
 8007634:	2003      	movs	r0, #3
 8007636:	f7ff ff33 	bl	80074a0 <LL_RCC_GetUSARTClockSource>
 800763a:	4603      	mov	r3, r0
 800763c:	2b03      	cmp	r3, #3
 800763e:	d81b      	bhi.n	8007678 <UART_SetConfig+0xf8>
 8007640:	a201      	add	r2, pc, #4	; (adr r2, 8007648 <UART_SetConfig+0xc8>)
 8007642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007646:	bf00      	nop
 8007648:	08007659 	.word	0x08007659
 800764c:	08007669 	.word	0x08007669
 8007650:	08007661 	.word	0x08007661
 8007654:	08007671 	.word	0x08007671
 8007658:	2301      	movs	r3, #1
 800765a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800765e:	e042      	b.n	80076e6 <UART_SetConfig+0x166>
 8007660:	2302      	movs	r3, #2
 8007662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007666:	e03e      	b.n	80076e6 <UART_SetConfig+0x166>
 8007668:	2304      	movs	r3, #4
 800766a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800766e:	e03a      	b.n	80076e6 <UART_SetConfig+0x166>
 8007670:	2308      	movs	r3, #8
 8007672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007676:	e036      	b.n	80076e6 <UART_SetConfig+0x166>
 8007678:	2310      	movs	r3, #16
 800767a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800767e:	bf00      	nop
 8007680:	e031      	b.n	80076e6 <UART_SetConfig+0x166>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a73      	ldr	r2, [pc, #460]	; (8007854 <UART_SetConfig+0x2d4>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d129      	bne.n	80076e0 <UART_SetConfig+0x160>
 800768c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007690:	f7ff ff16 	bl	80074c0 <LL_RCC_GetLPUARTClockSource>
 8007694:	4603      	mov	r3, r0
 8007696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800769a:	d014      	beq.n	80076c6 <UART_SetConfig+0x146>
 800769c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076a0:	d802      	bhi.n	80076a8 <UART_SetConfig+0x128>
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d007      	beq.n	80076b6 <UART_SetConfig+0x136>
 80076a6:	e016      	b.n	80076d6 <UART_SetConfig+0x156>
 80076a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076ac:	d007      	beq.n	80076be <UART_SetConfig+0x13e>
 80076ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80076b2:	d00c      	beq.n	80076ce <UART_SetConfig+0x14e>
 80076b4:	e00f      	b.n	80076d6 <UART_SetConfig+0x156>
 80076b6:	2300      	movs	r3, #0
 80076b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076bc:	e013      	b.n	80076e6 <UART_SetConfig+0x166>
 80076be:	2302      	movs	r3, #2
 80076c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076c4:	e00f      	b.n	80076e6 <UART_SetConfig+0x166>
 80076c6:	2304      	movs	r3, #4
 80076c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076cc:	e00b      	b.n	80076e6 <UART_SetConfig+0x166>
 80076ce:	2308      	movs	r3, #8
 80076d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076d4:	e007      	b.n	80076e6 <UART_SetConfig+0x166>
 80076d6:	2310      	movs	r3, #16
 80076d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076dc:	bf00      	nop
 80076de:	e002      	b.n	80076e6 <UART_SetConfig+0x166>
 80076e0:	2310      	movs	r3, #16
 80076e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a5a      	ldr	r2, [pc, #360]	; (8007854 <UART_SetConfig+0x2d4>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	f040 8428 	bne.w	8007f42 <UART_SetConfig+0x9c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80076f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076f6:	2b08      	cmp	r3, #8
 80076f8:	f200 8171 	bhi.w	80079de <UART_SetConfig+0x45e>
 80076fc:	a201      	add	r2, pc, #4	; (adr r2, 8007704 <UART_SetConfig+0x184>)
 80076fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007702:	bf00      	nop
 8007704:	08007729 	.word	0x08007729
 8007708:	080079df 	.word	0x080079df
 800770c:	080077cb 	.word	0x080077cb
 8007710:	080079df 	.word	0x080079df
 8007714:	0800788f 	.word	0x0800788f
 8007718:	080079df 	.word	0x080079df
 800771c:	080079df 	.word	0x080079df
 8007720:	080079df 	.word	0x080079df
 8007724:	08007931 	.word	0x08007931
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007728:	f7fd ff56 	bl	80055d8 <HAL_RCC_GetPCLK1Freq>
 800772c:	4602      	mov	r2, r0
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007732:	2b00      	cmp	r3, #0
 8007734:	d044      	beq.n	80077c0 <UART_SetConfig+0x240>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773a:	2b01      	cmp	r3, #1
 800773c:	d03e      	beq.n	80077bc <UART_SetConfig+0x23c>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007742:	2b02      	cmp	r3, #2
 8007744:	d038      	beq.n	80077b8 <UART_SetConfig+0x238>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774a:	2b03      	cmp	r3, #3
 800774c:	d032      	beq.n	80077b4 <UART_SetConfig+0x234>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007752:	2b04      	cmp	r3, #4
 8007754:	d02c      	beq.n	80077b0 <UART_SetConfig+0x230>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775a:	2b05      	cmp	r3, #5
 800775c:	d026      	beq.n	80077ac <UART_SetConfig+0x22c>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007762:	2b06      	cmp	r3, #6
 8007764:	d020      	beq.n	80077a8 <UART_SetConfig+0x228>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776a:	2b07      	cmp	r3, #7
 800776c:	d01a      	beq.n	80077a4 <UART_SetConfig+0x224>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007772:	2b08      	cmp	r3, #8
 8007774:	d014      	beq.n	80077a0 <UART_SetConfig+0x220>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777a:	2b09      	cmp	r3, #9
 800777c:	d00e      	beq.n	800779c <UART_SetConfig+0x21c>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007782:	2b0a      	cmp	r3, #10
 8007784:	d008      	beq.n	8007798 <UART_SetConfig+0x218>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778a:	2b0b      	cmp	r3, #11
 800778c:	d102      	bne.n	8007794 <UART_SetConfig+0x214>
 800778e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007792:	e016      	b.n	80077c2 <UART_SetConfig+0x242>
 8007794:	2301      	movs	r3, #1
 8007796:	e014      	b.n	80077c2 <UART_SetConfig+0x242>
 8007798:	2380      	movs	r3, #128	; 0x80
 800779a:	e012      	b.n	80077c2 <UART_SetConfig+0x242>
 800779c:	2340      	movs	r3, #64	; 0x40
 800779e:	e010      	b.n	80077c2 <UART_SetConfig+0x242>
 80077a0:	2320      	movs	r3, #32
 80077a2:	e00e      	b.n	80077c2 <UART_SetConfig+0x242>
 80077a4:	2310      	movs	r3, #16
 80077a6:	e00c      	b.n	80077c2 <UART_SetConfig+0x242>
 80077a8:	230c      	movs	r3, #12
 80077aa:	e00a      	b.n	80077c2 <UART_SetConfig+0x242>
 80077ac:	230a      	movs	r3, #10
 80077ae:	e008      	b.n	80077c2 <UART_SetConfig+0x242>
 80077b0:	2308      	movs	r3, #8
 80077b2:	e006      	b.n	80077c2 <UART_SetConfig+0x242>
 80077b4:	2306      	movs	r3, #6
 80077b6:	e004      	b.n	80077c2 <UART_SetConfig+0x242>
 80077b8:	2304      	movs	r3, #4
 80077ba:	e002      	b.n	80077c2 <UART_SetConfig+0x242>
 80077bc:	2302      	movs	r3, #2
 80077be:	e000      	b.n	80077c2 <UART_SetConfig+0x242>
 80077c0:	2301      	movs	r3, #1
 80077c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80077c6:	617b      	str	r3, [r7, #20]
        break;
 80077c8:	e10c      	b.n	80079e4 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d05a      	beq.n	8007888 <UART_SetConfig+0x308>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d054      	beq.n	8007884 <UART_SetConfig+0x304>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077de:	2b02      	cmp	r3, #2
 80077e0:	d04e      	beq.n	8007880 <UART_SetConfig+0x300>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e6:	2b03      	cmp	r3, #3
 80077e8:	d048      	beq.n	800787c <UART_SetConfig+0x2fc>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ee:	2b04      	cmp	r3, #4
 80077f0:	d02c      	beq.n	800784c <UART_SetConfig+0x2cc>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f6:	2b05      	cmp	r3, #5
 80077f8:	d026      	beq.n	8007848 <UART_SetConfig+0x2c8>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fe:	2b06      	cmp	r3, #6
 8007800:	d020      	beq.n	8007844 <UART_SetConfig+0x2c4>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007806:	2b07      	cmp	r3, #7
 8007808:	d01a      	beq.n	8007840 <UART_SetConfig+0x2c0>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780e:	2b08      	cmp	r3, #8
 8007810:	d014      	beq.n	800783c <UART_SetConfig+0x2bc>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007816:	2b09      	cmp	r3, #9
 8007818:	d00e      	beq.n	8007838 <UART_SetConfig+0x2b8>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781e:	2b0a      	cmp	r3, #10
 8007820:	d008      	beq.n	8007834 <UART_SetConfig+0x2b4>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007826:	2b0b      	cmp	r3, #11
 8007828:	d102      	bne.n	8007830 <UART_SetConfig+0x2b0>
 800782a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800782e:	e02c      	b.n	800788a <UART_SetConfig+0x30a>
 8007830:	4b0a      	ldr	r3, [pc, #40]	; (800785c <UART_SetConfig+0x2dc>)
 8007832:	e02a      	b.n	800788a <UART_SetConfig+0x30a>
 8007834:	4b0a      	ldr	r3, [pc, #40]	; (8007860 <UART_SetConfig+0x2e0>)
 8007836:	e028      	b.n	800788a <UART_SetConfig+0x30a>
 8007838:	4b0a      	ldr	r3, [pc, #40]	; (8007864 <UART_SetConfig+0x2e4>)
 800783a:	e026      	b.n	800788a <UART_SetConfig+0x30a>
 800783c:	4b0a      	ldr	r3, [pc, #40]	; (8007868 <UART_SetConfig+0x2e8>)
 800783e:	e024      	b.n	800788a <UART_SetConfig+0x30a>
 8007840:	4b0a      	ldr	r3, [pc, #40]	; (800786c <UART_SetConfig+0x2ec>)
 8007842:	e022      	b.n	800788a <UART_SetConfig+0x30a>
 8007844:	4b0a      	ldr	r3, [pc, #40]	; (8007870 <UART_SetConfig+0x2f0>)
 8007846:	e020      	b.n	800788a <UART_SetConfig+0x30a>
 8007848:	4b0a      	ldr	r3, [pc, #40]	; (8007874 <UART_SetConfig+0x2f4>)
 800784a:	e01e      	b.n	800788a <UART_SetConfig+0x30a>
 800784c:	4b0a      	ldr	r3, [pc, #40]	; (8007878 <UART_SetConfig+0x2f8>)
 800784e:	e01c      	b.n	800788a <UART_SetConfig+0x30a>
 8007850:	cfff69f3 	.word	0xcfff69f3
 8007854:	40008000 	.word	0x40008000
 8007858:	40013800 	.word	0x40013800
 800785c:	00f42400 	.word	0x00f42400
 8007860:	0001e848 	.word	0x0001e848
 8007864:	0003d090 	.word	0x0003d090
 8007868:	0007a120 	.word	0x0007a120
 800786c:	000f4240 	.word	0x000f4240
 8007870:	00145855 	.word	0x00145855
 8007874:	00186a00 	.word	0x00186a00
 8007878:	001e8480 	.word	0x001e8480
 800787c:	4ba6      	ldr	r3, [pc, #664]	; (8007b18 <UART_SetConfig+0x598>)
 800787e:	e004      	b.n	800788a <UART_SetConfig+0x30a>
 8007880:	4ba6      	ldr	r3, [pc, #664]	; (8007b1c <UART_SetConfig+0x59c>)
 8007882:	e002      	b.n	800788a <UART_SetConfig+0x30a>
 8007884:	4ba6      	ldr	r3, [pc, #664]	; (8007b20 <UART_SetConfig+0x5a0>)
 8007886:	e000      	b.n	800788a <UART_SetConfig+0x30a>
 8007888:	4ba6      	ldr	r3, [pc, #664]	; (8007b24 <UART_SetConfig+0x5a4>)
 800788a:	617b      	str	r3, [r7, #20]
        break;
 800788c:	e0aa      	b.n	80079e4 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800788e:	f7fd fe25 	bl	80054dc <HAL_RCC_GetSysClockFreq>
 8007892:	4602      	mov	r2, r0
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007898:	2b00      	cmp	r3, #0
 800789a:	d044      	beq.n	8007926 <UART_SetConfig+0x3a6>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d03e      	beq.n	8007922 <UART_SetConfig+0x3a2>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d038      	beq.n	800791e <UART_SetConfig+0x39e>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b0:	2b03      	cmp	r3, #3
 80078b2:	d032      	beq.n	800791a <UART_SetConfig+0x39a>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b8:	2b04      	cmp	r3, #4
 80078ba:	d02c      	beq.n	8007916 <UART_SetConfig+0x396>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c0:	2b05      	cmp	r3, #5
 80078c2:	d026      	beq.n	8007912 <UART_SetConfig+0x392>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c8:	2b06      	cmp	r3, #6
 80078ca:	d020      	beq.n	800790e <UART_SetConfig+0x38e>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d0:	2b07      	cmp	r3, #7
 80078d2:	d01a      	beq.n	800790a <UART_SetConfig+0x38a>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d8:	2b08      	cmp	r3, #8
 80078da:	d014      	beq.n	8007906 <UART_SetConfig+0x386>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e0:	2b09      	cmp	r3, #9
 80078e2:	d00e      	beq.n	8007902 <UART_SetConfig+0x382>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e8:	2b0a      	cmp	r3, #10
 80078ea:	d008      	beq.n	80078fe <UART_SetConfig+0x37e>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f0:	2b0b      	cmp	r3, #11
 80078f2:	d102      	bne.n	80078fa <UART_SetConfig+0x37a>
 80078f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078f8:	e016      	b.n	8007928 <UART_SetConfig+0x3a8>
 80078fa:	2301      	movs	r3, #1
 80078fc:	e014      	b.n	8007928 <UART_SetConfig+0x3a8>
 80078fe:	2380      	movs	r3, #128	; 0x80
 8007900:	e012      	b.n	8007928 <UART_SetConfig+0x3a8>
 8007902:	2340      	movs	r3, #64	; 0x40
 8007904:	e010      	b.n	8007928 <UART_SetConfig+0x3a8>
 8007906:	2320      	movs	r3, #32
 8007908:	e00e      	b.n	8007928 <UART_SetConfig+0x3a8>
 800790a:	2310      	movs	r3, #16
 800790c:	e00c      	b.n	8007928 <UART_SetConfig+0x3a8>
 800790e:	230c      	movs	r3, #12
 8007910:	e00a      	b.n	8007928 <UART_SetConfig+0x3a8>
 8007912:	230a      	movs	r3, #10
 8007914:	e008      	b.n	8007928 <UART_SetConfig+0x3a8>
 8007916:	2308      	movs	r3, #8
 8007918:	e006      	b.n	8007928 <UART_SetConfig+0x3a8>
 800791a:	2306      	movs	r3, #6
 800791c:	e004      	b.n	8007928 <UART_SetConfig+0x3a8>
 800791e:	2304      	movs	r3, #4
 8007920:	e002      	b.n	8007928 <UART_SetConfig+0x3a8>
 8007922:	2302      	movs	r3, #2
 8007924:	e000      	b.n	8007928 <UART_SetConfig+0x3a8>
 8007926:	2301      	movs	r3, #1
 8007928:	fbb2 f3f3 	udiv	r3, r2, r3
 800792c:	617b      	str	r3, [r7, #20]
        break;
 800792e:	e059      	b.n	80079e4 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007934:	2b00      	cmp	r3, #0
 8007936:	d04e      	beq.n	80079d6 <UART_SetConfig+0x456>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793c:	2b01      	cmp	r3, #1
 800793e:	d047      	beq.n	80079d0 <UART_SetConfig+0x450>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007944:	2b02      	cmp	r3, #2
 8007946:	d040      	beq.n	80079ca <UART_SetConfig+0x44a>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794c:	2b03      	cmp	r3, #3
 800794e:	d039      	beq.n	80079c4 <UART_SetConfig+0x444>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007954:	2b04      	cmp	r3, #4
 8007956:	d032      	beq.n	80079be <UART_SetConfig+0x43e>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795c:	2b05      	cmp	r3, #5
 800795e:	d02b      	beq.n	80079b8 <UART_SetConfig+0x438>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007964:	2b06      	cmp	r3, #6
 8007966:	d024      	beq.n	80079b2 <UART_SetConfig+0x432>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796c:	2b07      	cmp	r3, #7
 800796e:	d01d      	beq.n	80079ac <UART_SetConfig+0x42c>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007974:	2b08      	cmp	r3, #8
 8007976:	d016      	beq.n	80079a6 <UART_SetConfig+0x426>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797c:	2b09      	cmp	r3, #9
 800797e:	d00f      	beq.n	80079a0 <UART_SetConfig+0x420>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007984:	2b0a      	cmp	r3, #10
 8007986:	d008      	beq.n	800799a <UART_SetConfig+0x41a>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798c:	2b0b      	cmp	r3, #11
 800798e:	d101      	bne.n	8007994 <UART_SetConfig+0x414>
 8007990:	2380      	movs	r3, #128	; 0x80
 8007992:	e022      	b.n	80079da <UART_SetConfig+0x45a>
 8007994:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007998:	e01f      	b.n	80079da <UART_SetConfig+0x45a>
 800799a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800799e:	e01c      	b.n	80079da <UART_SetConfig+0x45a>
 80079a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079a4:	e019      	b.n	80079da <UART_SetConfig+0x45a>
 80079a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079aa:	e016      	b.n	80079da <UART_SetConfig+0x45a>
 80079ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80079b0:	e013      	b.n	80079da <UART_SetConfig+0x45a>
 80079b2:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80079b6:	e010      	b.n	80079da <UART_SetConfig+0x45a>
 80079b8:	f640 43cc 	movw	r3, #3276	; 0xccc
 80079bc:	e00d      	b.n	80079da <UART_SetConfig+0x45a>
 80079be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80079c2:	e00a      	b.n	80079da <UART_SetConfig+0x45a>
 80079c4:	f241 5355 	movw	r3, #5461	; 0x1555
 80079c8:	e007      	b.n	80079da <UART_SetConfig+0x45a>
 80079ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80079ce:	e004      	b.n	80079da <UART_SetConfig+0x45a>
 80079d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80079d4:	e001      	b.n	80079da <UART_SetConfig+0x45a>
 80079d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079da:	617b      	str	r3, [r7, #20]
        break;
 80079dc:	e002      	b.n	80079e4 <UART_SetConfig+0x464>
      default:
        ret = HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	76fb      	strb	r3, [r7, #27]
        break;
 80079e2:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	f000 8604 	beq.w	80085f4 <UART_SetConfig+0x1074>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	685a      	ldr	r2, [r3, #4]
 80079f0:	4613      	mov	r3, r2
 80079f2:	005b      	lsls	r3, r3, #1
 80079f4:	4413      	add	r3, r2
 80079f6:	697a      	ldr	r2, [r7, #20]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d305      	bcc.n	8007a08 <UART_SetConfig+0x488>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d903      	bls.n	8007a10 <UART_SetConfig+0x490>
      {
        ret = HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	76fb      	strb	r3, [r7, #27]
 8007a0c:	f000 bdf2 	b.w	80085f4 <UART_SetConfig+0x1074>
      }
      else
      {
        switch (clocksource)
 8007a10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a14:	2b08      	cmp	r3, #8
 8007a16:	f200 8281 	bhi.w	8007f1c <UART_SetConfig+0x99c>
 8007a1a:	a201      	add	r2, pc, #4	; (adr r2, 8007a20 <UART_SetConfig+0x4a0>)
 8007a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a20:	08007a45 	.word	0x08007a45
 8007a24:	08007f1d 	.word	0x08007f1d
 8007a28:	08007b95 	.word	0x08007b95
 8007a2c:	08007f1d 	.word	0x08007f1d
 8007a30:	08007c8b 	.word	0x08007c8b
 8007a34:	08007f1d 	.word	0x08007f1d
 8007a38:	08007f1d 	.word	0x08007f1d
 8007a3c:	08007f1d 	.word	0x08007f1d
 8007a40:	08007dc9 	.word	0x08007dc9
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8007a44:	f7fd fdc8 	bl	80055d8 <HAL_RCC_GetPCLK1Freq>
 8007a48:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f04f 0100 	mov.w	r1, #0
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d070      	beq.n	8007b3c <UART_SetConfig+0x5bc>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d067      	beq.n	8007b32 <UART_SetConfig+0x5b2>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d05e      	beq.n	8007b28 <UART_SetConfig+0x5a8>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6e:	2b03      	cmp	r3, #3
 8007a70:	d04c      	beq.n	8007b0c <UART_SetConfig+0x58c>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a76:	2b04      	cmp	r3, #4
 8007a78:	d043      	beq.n	8007b02 <UART_SetConfig+0x582>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7e:	2b05      	cmp	r3, #5
 8007a80:	d03a      	beq.n	8007af8 <UART_SetConfig+0x578>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a86:	2b06      	cmp	r3, #6
 8007a88:	d031      	beq.n	8007aee <UART_SetConfig+0x56e>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8e:	2b07      	cmp	r3, #7
 8007a90:	d028      	beq.n	8007ae4 <UART_SetConfig+0x564>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a96:	2b08      	cmp	r3, #8
 8007a98:	d01f      	beq.n	8007ada <UART_SetConfig+0x55a>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9e:	2b09      	cmp	r3, #9
 8007aa0:	d016      	beq.n	8007ad0 <UART_SetConfig+0x550>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa6:	2b0a      	cmp	r3, #10
 8007aa8:	d00d      	beq.n	8007ac6 <UART_SetConfig+0x546>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aae:	2b0b      	cmp	r3, #11
 8007ab0:	d104      	bne.n	8007abc <UART_SetConfig+0x53c>
 8007ab2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ab6:	f04f 0400 	mov.w	r4, #0
 8007aba:	e043      	b.n	8007b44 <UART_SetConfig+0x5c4>
 8007abc:	f04f 0301 	mov.w	r3, #1
 8007ac0:	f04f 0400 	mov.w	r4, #0
 8007ac4:	e03e      	b.n	8007b44 <UART_SetConfig+0x5c4>
 8007ac6:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007aca:	f04f 0400 	mov.w	r4, #0
 8007ace:	e039      	b.n	8007b44 <UART_SetConfig+0x5c4>
 8007ad0:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007ad4:	f04f 0400 	mov.w	r4, #0
 8007ad8:	e034      	b.n	8007b44 <UART_SetConfig+0x5c4>
 8007ada:	f04f 0320 	mov.w	r3, #32
 8007ade:	f04f 0400 	mov.w	r4, #0
 8007ae2:	e02f      	b.n	8007b44 <UART_SetConfig+0x5c4>
 8007ae4:	f04f 0310 	mov.w	r3, #16
 8007ae8:	f04f 0400 	mov.w	r4, #0
 8007aec:	e02a      	b.n	8007b44 <UART_SetConfig+0x5c4>
 8007aee:	f04f 030c 	mov.w	r3, #12
 8007af2:	f04f 0400 	mov.w	r4, #0
 8007af6:	e025      	b.n	8007b44 <UART_SetConfig+0x5c4>
 8007af8:	f04f 030a 	mov.w	r3, #10
 8007afc:	f04f 0400 	mov.w	r4, #0
 8007b00:	e020      	b.n	8007b44 <UART_SetConfig+0x5c4>
 8007b02:	f04f 0308 	mov.w	r3, #8
 8007b06:	f04f 0400 	mov.w	r4, #0
 8007b0a:	e01b      	b.n	8007b44 <UART_SetConfig+0x5c4>
 8007b0c:	f04f 0306 	mov.w	r3, #6
 8007b10:	f04f 0400 	mov.w	r4, #0
 8007b14:	e016      	b.n	8007b44 <UART_SetConfig+0x5c4>
 8007b16:	bf00      	nop
 8007b18:	0028b0aa 	.word	0x0028b0aa
 8007b1c:	003d0900 	.word	0x003d0900
 8007b20:	007a1200 	.word	0x007a1200
 8007b24:	00f42400 	.word	0x00f42400
 8007b28:	f04f 0304 	mov.w	r3, #4
 8007b2c:	f04f 0400 	mov.w	r4, #0
 8007b30:	e008      	b.n	8007b44 <UART_SetConfig+0x5c4>
 8007b32:	f04f 0302 	mov.w	r3, #2
 8007b36:	f04f 0400 	mov.w	r4, #0
 8007b3a:	e003      	b.n	8007b44 <UART_SetConfig+0x5c4>
 8007b3c:	f04f 0301 	mov.w	r3, #1
 8007b40:	f04f 0400 	mov.w	r4, #0
 8007b44:	461a      	mov	r2, r3
 8007b46:	4623      	mov	r3, r4
 8007b48:	f7f8 fb22 	bl	8000190 <__aeabi_uldivmod>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	460c      	mov	r4, r1
 8007b50:	4619      	mov	r1, r3
 8007b52:	4622      	mov	r2, r4
 8007b54:	f04f 0300 	mov.w	r3, #0
 8007b58:	f04f 0400 	mov.w	r4, #0
 8007b5c:	0214      	lsls	r4, r2, #8
 8007b5e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007b62:	020b      	lsls	r3, r1, #8
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	6852      	ldr	r2, [r2, #4]
 8007b68:	0852      	lsrs	r2, r2, #1
 8007b6a:	4611      	mov	r1, r2
 8007b6c:	f04f 0200 	mov.w	r2, #0
 8007b70:	eb13 0b01 	adds.w	fp, r3, r1
 8007b74:	eb44 0c02 	adc.w	ip, r4, r2
 8007b78:	4658      	mov	r0, fp
 8007b7a:	4661      	mov	r1, ip
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	f04f 0400 	mov.w	r4, #0
 8007b84:	461a      	mov	r2, r3
 8007b86:	4623      	mov	r3, r4
 8007b88:	f7f8 fb02 	bl	8000190 <__aeabi_uldivmod>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	460c      	mov	r4, r1
 8007b90:	61fb      	str	r3, [r7, #28]
            break;
 8007b92:	e1c6      	b.n	8007f22 <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d05b      	beq.n	8007c54 <UART_SetConfig+0x6d4>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d053      	beq.n	8007c4c <UART_SetConfig+0x6cc>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba8:	2b02      	cmp	r3, #2
 8007baa:	d04b      	beq.n	8007c44 <UART_SetConfig+0x6c4>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb0:	2b03      	cmp	r3, #3
 8007bb2:	d043      	beq.n	8007c3c <UART_SetConfig+0x6bc>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb8:	2b04      	cmp	r3, #4
 8007bba:	d03b      	beq.n	8007c34 <UART_SetConfig+0x6b4>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc0:	2b05      	cmp	r3, #5
 8007bc2:	d033      	beq.n	8007c2c <UART_SetConfig+0x6ac>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc8:	2b06      	cmp	r3, #6
 8007bca:	d02b      	beq.n	8007c24 <UART_SetConfig+0x6a4>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd0:	2b07      	cmp	r3, #7
 8007bd2:	d023      	beq.n	8007c1c <UART_SetConfig+0x69c>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd8:	2b08      	cmp	r3, #8
 8007bda:	d01b      	beq.n	8007c14 <UART_SetConfig+0x694>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be0:	2b09      	cmp	r3, #9
 8007be2:	d013      	beq.n	8007c0c <UART_SetConfig+0x68c>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be8:	2b0a      	cmp	r3, #10
 8007bea:	d00b      	beq.n	8007c04 <UART_SetConfig+0x684>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf0:	2b0b      	cmp	r3, #11
 8007bf2:	d103      	bne.n	8007bfc <UART_SetConfig+0x67c>
 8007bf4:	4bae      	ldr	r3, [pc, #696]	; (8007eb0 <UART_SetConfig+0x930>)
 8007bf6:	f04f 0400 	mov.w	r4, #0
 8007bfa:	e02e      	b.n	8007c5a <UART_SetConfig+0x6da>
 8007bfc:	4bad      	ldr	r3, [pc, #692]	; (8007eb4 <UART_SetConfig+0x934>)
 8007bfe:	f04f 0400 	mov.w	r4, #0
 8007c02:	e02a      	b.n	8007c5a <UART_SetConfig+0x6da>
 8007c04:	4bac      	ldr	r3, [pc, #688]	; (8007eb8 <UART_SetConfig+0x938>)
 8007c06:	f04f 0400 	mov.w	r4, #0
 8007c0a:	e026      	b.n	8007c5a <UART_SetConfig+0x6da>
 8007c0c:	4bab      	ldr	r3, [pc, #684]	; (8007ebc <UART_SetConfig+0x93c>)
 8007c0e:	f04f 0400 	mov.w	r4, #0
 8007c12:	e022      	b.n	8007c5a <UART_SetConfig+0x6da>
 8007c14:	4baa      	ldr	r3, [pc, #680]	; (8007ec0 <UART_SetConfig+0x940>)
 8007c16:	f04f 0400 	mov.w	r4, #0
 8007c1a:	e01e      	b.n	8007c5a <UART_SetConfig+0x6da>
 8007c1c:	4ba9      	ldr	r3, [pc, #676]	; (8007ec4 <UART_SetConfig+0x944>)
 8007c1e:	f04f 0400 	mov.w	r4, #0
 8007c22:	e01a      	b.n	8007c5a <UART_SetConfig+0x6da>
 8007c24:	a49e      	add	r4, pc, #632	; (adr r4, 8007ea0 <UART_SetConfig+0x920>)
 8007c26:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007c2a:	e016      	b.n	8007c5a <UART_SetConfig+0x6da>
 8007c2c:	4ba6      	ldr	r3, [pc, #664]	; (8007ec8 <UART_SetConfig+0x948>)
 8007c2e:	f04f 0400 	mov.w	r4, #0
 8007c32:	e012      	b.n	8007c5a <UART_SetConfig+0x6da>
 8007c34:	4ba5      	ldr	r3, [pc, #660]	; (8007ecc <UART_SetConfig+0x94c>)
 8007c36:	f04f 0400 	mov.w	r4, #0
 8007c3a:	e00e      	b.n	8007c5a <UART_SetConfig+0x6da>
 8007c3c:	a49a      	add	r4, pc, #616	; (adr r4, 8007ea8 <UART_SetConfig+0x928>)
 8007c3e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007c42:	e00a      	b.n	8007c5a <UART_SetConfig+0x6da>
 8007c44:	4ba2      	ldr	r3, [pc, #648]	; (8007ed0 <UART_SetConfig+0x950>)
 8007c46:	f04f 0400 	mov.w	r4, #0
 8007c4a:	e006      	b.n	8007c5a <UART_SetConfig+0x6da>
 8007c4c:	4ba1      	ldr	r3, [pc, #644]	; (8007ed4 <UART_SetConfig+0x954>)
 8007c4e:	f04f 0400 	mov.w	r4, #0
 8007c52:	e002      	b.n	8007c5a <UART_SetConfig+0x6da>
 8007c54:	4b97      	ldr	r3, [pc, #604]	; (8007eb4 <UART_SetConfig+0x934>)
 8007c56:	f04f 0400 	mov.w	r4, #0
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	6852      	ldr	r2, [r2, #4]
 8007c5e:	0852      	lsrs	r2, r2, #1
 8007c60:	4611      	mov	r1, r2
 8007c62:	f04f 0200 	mov.w	r2, #0
 8007c66:	eb13 0b01 	adds.w	fp, r3, r1
 8007c6a:	eb44 0c02 	adc.w	ip, r4, r2
 8007c6e:	4658      	mov	r0, fp
 8007c70:	4661      	mov	r1, ip
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	f04f 0400 	mov.w	r4, #0
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	4623      	mov	r3, r4
 8007c7e:	f7f8 fa87 	bl	8000190 <__aeabi_uldivmod>
 8007c82:	4603      	mov	r3, r0
 8007c84:	460c      	mov	r4, r1
 8007c86:	61fb      	str	r3, [r7, #28]
            break;
 8007c88:	e14b      	b.n	8007f22 <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8007c8a:	f7fd fc27 	bl	80054dc <HAL_RCC_GetSysClockFreq>
 8007c8e:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	4618      	mov	r0, r3
 8007c94:	f04f 0100 	mov.w	r1, #0
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d067      	beq.n	8007d70 <UART_SetConfig+0x7f0>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d05e      	beq.n	8007d66 <UART_SetConfig+0x7e6>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cac:	2b02      	cmp	r3, #2
 8007cae:	d055      	beq.n	8007d5c <UART_SetConfig+0x7dc>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb4:	2b03      	cmp	r3, #3
 8007cb6:	d04c      	beq.n	8007d52 <UART_SetConfig+0x7d2>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cbc:	2b04      	cmp	r3, #4
 8007cbe:	d043      	beq.n	8007d48 <UART_SetConfig+0x7c8>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc4:	2b05      	cmp	r3, #5
 8007cc6:	d03a      	beq.n	8007d3e <UART_SetConfig+0x7be>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ccc:	2b06      	cmp	r3, #6
 8007cce:	d031      	beq.n	8007d34 <UART_SetConfig+0x7b4>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd4:	2b07      	cmp	r3, #7
 8007cd6:	d028      	beq.n	8007d2a <UART_SetConfig+0x7aa>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cdc:	2b08      	cmp	r3, #8
 8007cde:	d01f      	beq.n	8007d20 <UART_SetConfig+0x7a0>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce4:	2b09      	cmp	r3, #9
 8007ce6:	d016      	beq.n	8007d16 <UART_SetConfig+0x796>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cec:	2b0a      	cmp	r3, #10
 8007cee:	d00d      	beq.n	8007d0c <UART_SetConfig+0x78c>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf4:	2b0b      	cmp	r3, #11
 8007cf6:	d104      	bne.n	8007d02 <UART_SetConfig+0x782>
 8007cf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cfc:	f04f 0400 	mov.w	r4, #0
 8007d00:	e03a      	b.n	8007d78 <UART_SetConfig+0x7f8>
 8007d02:	f04f 0301 	mov.w	r3, #1
 8007d06:	f04f 0400 	mov.w	r4, #0
 8007d0a:	e035      	b.n	8007d78 <UART_SetConfig+0x7f8>
 8007d0c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007d10:	f04f 0400 	mov.w	r4, #0
 8007d14:	e030      	b.n	8007d78 <UART_SetConfig+0x7f8>
 8007d16:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007d1a:	f04f 0400 	mov.w	r4, #0
 8007d1e:	e02b      	b.n	8007d78 <UART_SetConfig+0x7f8>
 8007d20:	f04f 0320 	mov.w	r3, #32
 8007d24:	f04f 0400 	mov.w	r4, #0
 8007d28:	e026      	b.n	8007d78 <UART_SetConfig+0x7f8>
 8007d2a:	f04f 0310 	mov.w	r3, #16
 8007d2e:	f04f 0400 	mov.w	r4, #0
 8007d32:	e021      	b.n	8007d78 <UART_SetConfig+0x7f8>
 8007d34:	f04f 030c 	mov.w	r3, #12
 8007d38:	f04f 0400 	mov.w	r4, #0
 8007d3c:	e01c      	b.n	8007d78 <UART_SetConfig+0x7f8>
 8007d3e:	f04f 030a 	mov.w	r3, #10
 8007d42:	f04f 0400 	mov.w	r4, #0
 8007d46:	e017      	b.n	8007d78 <UART_SetConfig+0x7f8>
 8007d48:	f04f 0308 	mov.w	r3, #8
 8007d4c:	f04f 0400 	mov.w	r4, #0
 8007d50:	e012      	b.n	8007d78 <UART_SetConfig+0x7f8>
 8007d52:	f04f 0306 	mov.w	r3, #6
 8007d56:	f04f 0400 	mov.w	r4, #0
 8007d5a:	e00d      	b.n	8007d78 <UART_SetConfig+0x7f8>
 8007d5c:	f04f 0304 	mov.w	r3, #4
 8007d60:	f04f 0400 	mov.w	r4, #0
 8007d64:	e008      	b.n	8007d78 <UART_SetConfig+0x7f8>
 8007d66:	f04f 0302 	mov.w	r3, #2
 8007d6a:	f04f 0400 	mov.w	r4, #0
 8007d6e:	e003      	b.n	8007d78 <UART_SetConfig+0x7f8>
 8007d70:	f04f 0301 	mov.w	r3, #1
 8007d74:	f04f 0400 	mov.w	r4, #0
 8007d78:	461a      	mov	r2, r3
 8007d7a:	4623      	mov	r3, r4
 8007d7c:	f7f8 fa08 	bl	8000190 <__aeabi_uldivmod>
 8007d80:	4603      	mov	r3, r0
 8007d82:	460c      	mov	r4, r1
 8007d84:	4619      	mov	r1, r3
 8007d86:	4622      	mov	r2, r4
 8007d88:	f04f 0300 	mov.w	r3, #0
 8007d8c:	f04f 0400 	mov.w	r4, #0
 8007d90:	0214      	lsls	r4, r2, #8
 8007d92:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007d96:	020b      	lsls	r3, r1, #8
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	6852      	ldr	r2, [r2, #4]
 8007d9c:	0852      	lsrs	r2, r2, #1
 8007d9e:	4611      	mov	r1, r2
 8007da0:	f04f 0200 	mov.w	r2, #0
 8007da4:	eb13 0b01 	adds.w	fp, r3, r1
 8007da8:	eb44 0c02 	adc.w	ip, r4, r2
 8007dac:	4658      	mov	r0, fp
 8007dae:	4661      	mov	r1, ip
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	f04f 0400 	mov.w	r4, #0
 8007db8:	461a      	mov	r2, r3
 8007dba:	4623      	mov	r3, r4
 8007dbc:	f7f8 f9e8 	bl	8000190 <__aeabi_uldivmod>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	460c      	mov	r4, r1
 8007dc4:	61fb      	str	r3, [r7, #28]
            break;
 8007dc6:	e0ac      	b.n	8007f22 <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f000 8089 	beq.w	8007ee4 <UART_SetConfig+0x964>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d05b      	beq.n	8007e92 <UART_SetConfig+0x912>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d052      	beq.n	8007e88 <UART_SetConfig+0x908>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de6:	2b03      	cmp	r3, #3
 8007de8:	d04a      	beq.n	8007e80 <UART_SetConfig+0x900>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dee:	2b04      	cmp	r3, #4
 8007df0:	d041      	beq.n	8007e76 <UART_SetConfig+0x8f6>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df6:	2b05      	cmp	r3, #5
 8007df8:	d039      	beq.n	8007e6e <UART_SetConfig+0x8ee>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfe:	2b06      	cmp	r3, #6
 8007e00:	d031      	beq.n	8007e66 <UART_SetConfig+0x8e6>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e06:	2b07      	cmp	r3, #7
 8007e08:	d028      	beq.n	8007e5c <UART_SetConfig+0x8dc>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0e:	2b08      	cmp	r3, #8
 8007e10:	d01f      	beq.n	8007e52 <UART_SetConfig+0x8d2>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e16:	2b09      	cmp	r3, #9
 8007e18:	d016      	beq.n	8007e48 <UART_SetConfig+0x8c8>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1e:	2b0a      	cmp	r3, #10
 8007e20:	d00d      	beq.n	8007e3e <UART_SetConfig+0x8be>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e26:	2b0b      	cmp	r3, #11
 8007e28:	d104      	bne.n	8007e34 <UART_SetConfig+0x8b4>
 8007e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e2e:	f04f 0400 	mov.w	r4, #0
 8007e32:	e05b      	b.n	8007eec <UART_SetConfig+0x96c>
 8007e34:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007e38:	f04f 0400 	mov.w	r4, #0
 8007e3c:	e056      	b.n	8007eec <UART_SetConfig+0x96c>
 8007e3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e42:	f04f 0400 	mov.w	r4, #0
 8007e46:	e051      	b.n	8007eec <UART_SetConfig+0x96c>
 8007e48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007e4c:	f04f 0400 	mov.w	r4, #0
 8007e50:	e04c      	b.n	8007eec <UART_SetConfig+0x96c>
 8007e52:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007e56:	f04f 0400 	mov.w	r4, #0
 8007e5a:	e047      	b.n	8007eec <UART_SetConfig+0x96c>
 8007e5c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007e60:	f04f 0400 	mov.w	r4, #0
 8007e64:	e042      	b.n	8007eec <UART_SetConfig+0x96c>
 8007e66:	4b1c      	ldr	r3, [pc, #112]	; (8007ed8 <UART_SetConfig+0x958>)
 8007e68:	f04f 0400 	mov.w	r4, #0
 8007e6c:	e03e      	b.n	8007eec <UART_SetConfig+0x96c>
 8007e6e:	4b1b      	ldr	r3, [pc, #108]	; (8007edc <UART_SetConfig+0x95c>)
 8007e70:	f04f 0400 	mov.w	r4, #0
 8007e74:	e03a      	b.n	8007eec <UART_SetConfig+0x96c>
 8007e76:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007e7a:	f04f 0400 	mov.w	r4, #0
 8007e7e:	e035      	b.n	8007eec <UART_SetConfig+0x96c>
 8007e80:	4b17      	ldr	r3, [pc, #92]	; (8007ee0 <UART_SetConfig+0x960>)
 8007e82:	f04f 0400 	mov.w	r4, #0
 8007e86:	e031      	b.n	8007eec <UART_SetConfig+0x96c>
 8007e88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007e8c:	f04f 0400 	mov.w	r4, #0
 8007e90:	e02c      	b.n	8007eec <UART_SetConfig+0x96c>
 8007e92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007e96:	f04f 0400 	mov.w	r4, #0
 8007e9a:	e027      	b.n	8007eec <UART_SetConfig+0x96c>
 8007e9c:	f3af 8000 	nop.w
 8007ea0:	14585500 	.word	0x14585500
 8007ea4:	00000000 	.word	0x00000000
 8007ea8:	28b0aa00 	.word	0x28b0aa00
 8007eac:	00000000 	.word	0x00000000
 8007eb0:	00f42400 	.word	0x00f42400
 8007eb4:	f4240000 	.word	0xf4240000
 8007eb8:	01e84800 	.word	0x01e84800
 8007ebc:	03d09000 	.word	0x03d09000
 8007ec0:	07a12000 	.word	0x07a12000
 8007ec4:	0f424000 	.word	0x0f424000
 8007ec8:	186a0000 	.word	0x186a0000
 8007ecc:	1e848000 	.word	0x1e848000
 8007ed0:	3d090000 	.word	0x3d090000
 8007ed4:	7a120000 	.word	0x7a120000
 8007ed8:	000aaa00 	.word	0x000aaa00
 8007edc:	000ccc00 	.word	0x000ccc00
 8007ee0:	00155500 	.word	0x00155500
 8007ee4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007ee8:	f04f 0400 	mov.w	r4, #0
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	6852      	ldr	r2, [r2, #4]
 8007ef0:	0852      	lsrs	r2, r2, #1
 8007ef2:	4611      	mov	r1, r2
 8007ef4:	f04f 0200 	mov.w	r2, #0
 8007ef8:	eb13 0b01 	adds.w	fp, r3, r1
 8007efc:	eb44 0c02 	adc.w	ip, r4, r2
 8007f00:	4658      	mov	r0, fp
 8007f02:	4661      	mov	r1, ip
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	f04f 0400 	mov.w	r4, #0
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	4623      	mov	r3, r4
 8007f10:	f7f8 f93e 	bl	8000190 <__aeabi_uldivmod>
 8007f14:	4603      	mov	r3, r0
 8007f16:	460c      	mov	r4, r1
 8007f18:	61fb      	str	r3, [r7, #28]
            break;
 8007f1a:	e002      	b.n	8007f22 <UART_SetConfig+0x9a2>
          default:
            ret = HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	76fb      	strb	r3, [r7, #27]
            break;
 8007f20:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f28:	d308      	bcc.n	8007f3c <UART_SetConfig+0x9bc>
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f30:	d204      	bcs.n	8007f3c <UART_SetConfig+0x9bc>
        {
          huart->Instance->BRR = usartdiv;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	69fa      	ldr	r2, [r7, #28]
 8007f38:	60da      	str	r2, [r3, #12]
 8007f3a:	e35b      	b.n	80085f4 <UART_SetConfig+0x1074>
        }
        else
        {
          ret = HAL_ERROR;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	76fb      	strb	r3, [r7, #27]
 8007f40:	e358      	b.n	80085f4 <UART_SetConfig+0x1074>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	69db      	ldr	r3, [r3, #28]
 8007f46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f4a:	f040 81a6 	bne.w	800829a <UART_SetConfig+0xd1a>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007f4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f52:	3b01      	subs	r3, #1
 8007f54:	2b07      	cmp	r3, #7
 8007f56:	f200 8180 	bhi.w	800825a <UART_SetConfig+0xcda>
 8007f5a:	a201      	add	r2, pc, #4	; (adr r2, 8007f60 <UART_SetConfig+0x9e0>)
 8007f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f60:	08007f81 	.word	0x08007f81
 8007f64:	08008039 	.word	0x08008039
 8007f68:	0800825b 	.word	0x0800825b
 8007f6c:	080080e1 	.word	0x080080e1
 8007f70:	0800825b 	.word	0x0800825b
 8007f74:	0800825b 	.word	0x0800825b
 8007f78:	0800825b 	.word	0x0800825b
 8007f7c:	08008199 	.word	0x08008199
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f80:	f7fd fb40 	bl	8005604 <HAL_RCC_GetPCLK2Freq>
 8007f84:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d044      	beq.n	8008018 <UART_SetConfig+0xa98>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d03e      	beq.n	8008014 <UART_SetConfig+0xa94>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9a:	2b02      	cmp	r3, #2
 8007f9c:	d038      	beq.n	8008010 <UART_SetConfig+0xa90>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa2:	2b03      	cmp	r3, #3
 8007fa4:	d032      	beq.n	800800c <UART_SetConfig+0xa8c>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007faa:	2b04      	cmp	r3, #4
 8007fac:	d02c      	beq.n	8008008 <UART_SetConfig+0xa88>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb2:	2b05      	cmp	r3, #5
 8007fb4:	d026      	beq.n	8008004 <UART_SetConfig+0xa84>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fba:	2b06      	cmp	r3, #6
 8007fbc:	d020      	beq.n	8008000 <UART_SetConfig+0xa80>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc2:	2b07      	cmp	r3, #7
 8007fc4:	d01a      	beq.n	8007ffc <UART_SetConfig+0xa7c>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fca:	2b08      	cmp	r3, #8
 8007fcc:	d014      	beq.n	8007ff8 <UART_SetConfig+0xa78>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd2:	2b09      	cmp	r3, #9
 8007fd4:	d00e      	beq.n	8007ff4 <UART_SetConfig+0xa74>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fda:	2b0a      	cmp	r3, #10
 8007fdc:	d008      	beq.n	8007ff0 <UART_SetConfig+0xa70>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe2:	2b0b      	cmp	r3, #11
 8007fe4:	d102      	bne.n	8007fec <UART_SetConfig+0xa6c>
 8007fe6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007fea:	e016      	b.n	800801a <UART_SetConfig+0xa9a>
 8007fec:	2301      	movs	r3, #1
 8007fee:	e014      	b.n	800801a <UART_SetConfig+0xa9a>
 8007ff0:	2380      	movs	r3, #128	; 0x80
 8007ff2:	e012      	b.n	800801a <UART_SetConfig+0xa9a>
 8007ff4:	2340      	movs	r3, #64	; 0x40
 8007ff6:	e010      	b.n	800801a <UART_SetConfig+0xa9a>
 8007ff8:	2320      	movs	r3, #32
 8007ffa:	e00e      	b.n	800801a <UART_SetConfig+0xa9a>
 8007ffc:	2310      	movs	r3, #16
 8007ffe:	e00c      	b.n	800801a <UART_SetConfig+0xa9a>
 8008000:	230c      	movs	r3, #12
 8008002:	e00a      	b.n	800801a <UART_SetConfig+0xa9a>
 8008004:	230a      	movs	r3, #10
 8008006:	e008      	b.n	800801a <UART_SetConfig+0xa9a>
 8008008:	2308      	movs	r3, #8
 800800a:	e006      	b.n	800801a <UART_SetConfig+0xa9a>
 800800c:	2306      	movs	r3, #6
 800800e:	e004      	b.n	800801a <UART_SetConfig+0xa9a>
 8008010:	2304      	movs	r3, #4
 8008012:	e002      	b.n	800801a <UART_SetConfig+0xa9a>
 8008014:	2302      	movs	r3, #2
 8008016:	e000      	b.n	800801a <UART_SetConfig+0xa9a>
 8008018:	2301      	movs	r3, #1
 800801a:	693a      	ldr	r2, [r7, #16]
 800801c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008020:	005a      	lsls	r2, r3, #1
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	085b      	lsrs	r3, r3, #1
 8008028:	441a      	add	r2, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008032:	b29b      	uxth	r3, r3
 8008034:	61fb      	str	r3, [r7, #28]
        break;
 8008036:	e113      	b.n	8008260 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800803c:	2b00      	cmp	r3, #0
 800803e:	d043      	beq.n	80080c8 <UART_SetConfig+0xb48>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008044:	2b01      	cmp	r3, #1
 8008046:	d03d      	beq.n	80080c4 <UART_SetConfig+0xb44>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804c:	2b02      	cmp	r3, #2
 800804e:	d037      	beq.n	80080c0 <UART_SetConfig+0xb40>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008054:	2b03      	cmp	r3, #3
 8008056:	d031      	beq.n	80080bc <UART_SetConfig+0xb3c>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805c:	2b04      	cmp	r3, #4
 800805e:	d02b      	beq.n	80080b8 <UART_SetConfig+0xb38>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008064:	2b05      	cmp	r3, #5
 8008066:	d025      	beq.n	80080b4 <UART_SetConfig+0xb34>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806c:	2b06      	cmp	r3, #6
 800806e:	d01f      	beq.n	80080b0 <UART_SetConfig+0xb30>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008074:	2b07      	cmp	r3, #7
 8008076:	d019      	beq.n	80080ac <UART_SetConfig+0xb2c>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807c:	2b08      	cmp	r3, #8
 800807e:	d013      	beq.n	80080a8 <UART_SetConfig+0xb28>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008084:	2b09      	cmp	r3, #9
 8008086:	d00d      	beq.n	80080a4 <UART_SetConfig+0xb24>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808c:	2b0a      	cmp	r3, #10
 800808e:	d007      	beq.n	80080a0 <UART_SetConfig+0xb20>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008094:	2b0b      	cmp	r3, #11
 8008096:	d101      	bne.n	800809c <UART_SetConfig+0xb1c>
 8008098:	4b8c      	ldr	r3, [pc, #560]	; (80082cc <UART_SetConfig+0xd4c>)
 800809a:	e016      	b.n	80080ca <UART_SetConfig+0xb4a>
 800809c:	4b8c      	ldr	r3, [pc, #560]	; (80082d0 <UART_SetConfig+0xd50>)
 800809e:	e014      	b.n	80080ca <UART_SetConfig+0xb4a>
 80080a0:	4b8c      	ldr	r3, [pc, #560]	; (80082d4 <UART_SetConfig+0xd54>)
 80080a2:	e012      	b.n	80080ca <UART_SetConfig+0xb4a>
 80080a4:	4b8c      	ldr	r3, [pc, #560]	; (80082d8 <UART_SetConfig+0xd58>)
 80080a6:	e010      	b.n	80080ca <UART_SetConfig+0xb4a>
 80080a8:	4b8c      	ldr	r3, [pc, #560]	; (80082dc <UART_SetConfig+0xd5c>)
 80080aa:	e00e      	b.n	80080ca <UART_SetConfig+0xb4a>
 80080ac:	4b8c      	ldr	r3, [pc, #560]	; (80082e0 <UART_SetConfig+0xd60>)
 80080ae:	e00c      	b.n	80080ca <UART_SetConfig+0xb4a>
 80080b0:	4b8c      	ldr	r3, [pc, #560]	; (80082e4 <UART_SetConfig+0xd64>)
 80080b2:	e00a      	b.n	80080ca <UART_SetConfig+0xb4a>
 80080b4:	4b8c      	ldr	r3, [pc, #560]	; (80082e8 <UART_SetConfig+0xd68>)
 80080b6:	e008      	b.n	80080ca <UART_SetConfig+0xb4a>
 80080b8:	4b8c      	ldr	r3, [pc, #560]	; (80082ec <UART_SetConfig+0xd6c>)
 80080ba:	e006      	b.n	80080ca <UART_SetConfig+0xb4a>
 80080bc:	4b8c      	ldr	r3, [pc, #560]	; (80082f0 <UART_SetConfig+0xd70>)
 80080be:	e004      	b.n	80080ca <UART_SetConfig+0xb4a>
 80080c0:	4b8c      	ldr	r3, [pc, #560]	; (80082f4 <UART_SetConfig+0xd74>)
 80080c2:	e002      	b.n	80080ca <UART_SetConfig+0xb4a>
 80080c4:	4b8c      	ldr	r3, [pc, #560]	; (80082f8 <UART_SetConfig+0xd78>)
 80080c6:	e000      	b.n	80080ca <UART_SetConfig+0xb4a>
 80080c8:	4b81      	ldr	r3, [pc, #516]	; (80082d0 <UART_SetConfig+0xd50>)
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	6852      	ldr	r2, [r2, #4]
 80080ce:	0852      	lsrs	r2, r2, #1
 80080d0:	441a      	add	r2, r3
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80080da:	b29b      	uxth	r3, r3
 80080dc:	61fb      	str	r3, [r7, #28]
        break;
 80080de:	e0bf      	b.n	8008260 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080e0:	f7fd f9fc 	bl	80054dc <HAL_RCC_GetSysClockFreq>
 80080e4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d044      	beq.n	8008178 <UART_SetConfig+0xbf8>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d03e      	beq.n	8008174 <UART_SetConfig+0xbf4>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	d038      	beq.n	8008170 <UART_SetConfig+0xbf0>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008102:	2b03      	cmp	r3, #3
 8008104:	d032      	beq.n	800816c <UART_SetConfig+0xbec>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810a:	2b04      	cmp	r3, #4
 800810c:	d02c      	beq.n	8008168 <UART_SetConfig+0xbe8>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008112:	2b05      	cmp	r3, #5
 8008114:	d026      	beq.n	8008164 <UART_SetConfig+0xbe4>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811a:	2b06      	cmp	r3, #6
 800811c:	d020      	beq.n	8008160 <UART_SetConfig+0xbe0>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008122:	2b07      	cmp	r3, #7
 8008124:	d01a      	beq.n	800815c <UART_SetConfig+0xbdc>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812a:	2b08      	cmp	r3, #8
 800812c:	d014      	beq.n	8008158 <UART_SetConfig+0xbd8>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008132:	2b09      	cmp	r3, #9
 8008134:	d00e      	beq.n	8008154 <UART_SetConfig+0xbd4>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813a:	2b0a      	cmp	r3, #10
 800813c:	d008      	beq.n	8008150 <UART_SetConfig+0xbd0>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008142:	2b0b      	cmp	r3, #11
 8008144:	d102      	bne.n	800814c <UART_SetConfig+0xbcc>
 8008146:	f44f 7380 	mov.w	r3, #256	; 0x100
 800814a:	e016      	b.n	800817a <UART_SetConfig+0xbfa>
 800814c:	2301      	movs	r3, #1
 800814e:	e014      	b.n	800817a <UART_SetConfig+0xbfa>
 8008150:	2380      	movs	r3, #128	; 0x80
 8008152:	e012      	b.n	800817a <UART_SetConfig+0xbfa>
 8008154:	2340      	movs	r3, #64	; 0x40
 8008156:	e010      	b.n	800817a <UART_SetConfig+0xbfa>
 8008158:	2320      	movs	r3, #32
 800815a:	e00e      	b.n	800817a <UART_SetConfig+0xbfa>
 800815c:	2310      	movs	r3, #16
 800815e:	e00c      	b.n	800817a <UART_SetConfig+0xbfa>
 8008160:	230c      	movs	r3, #12
 8008162:	e00a      	b.n	800817a <UART_SetConfig+0xbfa>
 8008164:	230a      	movs	r3, #10
 8008166:	e008      	b.n	800817a <UART_SetConfig+0xbfa>
 8008168:	2308      	movs	r3, #8
 800816a:	e006      	b.n	800817a <UART_SetConfig+0xbfa>
 800816c:	2306      	movs	r3, #6
 800816e:	e004      	b.n	800817a <UART_SetConfig+0xbfa>
 8008170:	2304      	movs	r3, #4
 8008172:	e002      	b.n	800817a <UART_SetConfig+0xbfa>
 8008174:	2302      	movs	r3, #2
 8008176:	e000      	b.n	800817a <UART_SetConfig+0xbfa>
 8008178:	2301      	movs	r3, #1
 800817a:	693a      	ldr	r2, [r7, #16]
 800817c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008180:	005a      	lsls	r2, r3, #1
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	085b      	lsrs	r3, r3, #1
 8008188:	441a      	add	r2, r3
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008192:	b29b      	uxth	r3, r3
 8008194:	61fb      	str	r3, [r7, #28]
        break;
 8008196:	e063      	b.n	8008260 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819c:	2b00      	cmp	r3, #0
 800819e:	d04f      	beq.n	8008240 <UART_SetConfig+0xcc0>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d048      	beq.n	800823a <UART_SetConfig+0xcba>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d041      	beq.n	8008234 <UART_SetConfig+0xcb4>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b4:	2b03      	cmp	r3, #3
 80081b6:	d03a      	beq.n	800822e <UART_SetConfig+0xcae>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081bc:	2b04      	cmp	r3, #4
 80081be:	d033      	beq.n	8008228 <UART_SetConfig+0xca8>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c4:	2b05      	cmp	r3, #5
 80081c6:	d02c      	beq.n	8008222 <UART_SetConfig+0xca2>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081cc:	2b06      	cmp	r3, #6
 80081ce:	d025      	beq.n	800821c <UART_SetConfig+0xc9c>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d4:	2b07      	cmp	r3, #7
 80081d6:	d01e      	beq.n	8008216 <UART_SetConfig+0xc96>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081dc:	2b08      	cmp	r3, #8
 80081de:	d017      	beq.n	8008210 <UART_SetConfig+0xc90>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e4:	2b09      	cmp	r3, #9
 80081e6:	d010      	beq.n	800820a <UART_SetConfig+0xc8a>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ec:	2b0a      	cmp	r3, #10
 80081ee:	d009      	beq.n	8008204 <UART_SetConfig+0xc84>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f4:	2b0b      	cmp	r3, #11
 80081f6:	d102      	bne.n	80081fe <UART_SetConfig+0xc7e>
 80081f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081fc:	e022      	b.n	8008244 <UART_SetConfig+0xcc4>
 80081fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008202:	e01f      	b.n	8008244 <UART_SetConfig+0xcc4>
 8008204:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008208:	e01c      	b.n	8008244 <UART_SetConfig+0xcc4>
 800820a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800820e:	e019      	b.n	8008244 <UART_SetConfig+0xcc4>
 8008210:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008214:	e016      	b.n	8008244 <UART_SetConfig+0xcc4>
 8008216:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800821a:	e013      	b.n	8008244 <UART_SetConfig+0xcc4>
 800821c:	f241 5354 	movw	r3, #5460	; 0x1554
 8008220:	e010      	b.n	8008244 <UART_SetConfig+0xcc4>
 8008222:	f641 1398 	movw	r3, #6552	; 0x1998
 8008226:	e00d      	b.n	8008244 <UART_SetConfig+0xcc4>
 8008228:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800822c:	e00a      	b.n	8008244 <UART_SetConfig+0xcc4>
 800822e:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8008232:	e007      	b.n	8008244 <UART_SetConfig+0xcc4>
 8008234:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008238:	e004      	b.n	8008244 <UART_SetConfig+0xcc4>
 800823a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800823e:	e001      	b.n	8008244 <UART_SetConfig+0xcc4>
 8008240:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	6852      	ldr	r2, [r2, #4]
 8008248:	0852      	lsrs	r2, r2, #1
 800824a:	441a      	add	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	fbb2 f3f3 	udiv	r3, r2, r3
 8008254:	b29b      	uxth	r3, r3
 8008256:	61fb      	str	r3, [r7, #28]
        break;
 8008258:	e002      	b.n	8008260 <UART_SetConfig+0xce0>
      default:
        ret = HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	76fb      	strb	r3, [r7, #27]
        break;
 800825e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	2b0f      	cmp	r3, #15
 8008264:	d916      	bls.n	8008294 <UART_SetConfig+0xd14>
 8008266:	69fb      	ldr	r3, [r7, #28]
 8008268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800826c:	d212      	bcs.n	8008294 <UART_SetConfig+0xd14>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	b29b      	uxth	r3, r3
 8008272:	f023 030f 	bic.w	r3, r3, #15
 8008276:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	085b      	lsrs	r3, r3, #1
 800827c:	b29b      	uxth	r3, r3
 800827e:	f003 0307 	and.w	r3, r3, #7
 8008282:	b29a      	uxth	r2, r3
 8008284:	89fb      	ldrh	r3, [r7, #14]
 8008286:	4313      	orrs	r3, r2
 8008288:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	89fa      	ldrh	r2, [r7, #14]
 8008290:	60da      	str	r2, [r3, #12]
 8008292:	e1af      	b.n	80085f4 <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	76fb      	strb	r3, [r7, #27]
 8008298:	e1ac      	b.n	80085f4 <UART_SetConfig+0x1074>
    }
  }
  else
  {
    switch (clocksource)
 800829a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800829e:	3b01      	subs	r3, #1
 80082a0:	2b07      	cmp	r3, #7
 80082a2:	f200 8196 	bhi.w	80085d2 <UART_SetConfig+0x1052>
 80082a6:	a201      	add	r2, pc, #4	; (adr r2, 80082ac <UART_SetConfig+0xd2c>)
 80082a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ac:	080082fd 	.word	0x080082fd
 80082b0:	080083b3 	.word	0x080083b3
 80082b4:	080085d3 	.word	0x080085d3
 80082b8:	0800845d 	.word	0x0800845d
 80082bc:	080085d3 	.word	0x080085d3
 80082c0:	080085d3 	.word	0x080085d3
 80082c4:	080085d3 	.word	0x080085d3
 80082c8:	08008513 	.word	0x08008513
 80082cc:	0001e848 	.word	0x0001e848
 80082d0:	01e84800 	.word	0x01e84800
 80082d4:	0003d090 	.word	0x0003d090
 80082d8:	0007a120 	.word	0x0007a120
 80082dc:	000f4240 	.word	0x000f4240
 80082e0:	001e8480 	.word	0x001e8480
 80082e4:	0028b0aa 	.word	0x0028b0aa
 80082e8:	0030d400 	.word	0x0030d400
 80082ec:	003d0900 	.word	0x003d0900
 80082f0:	00516154 	.word	0x00516154
 80082f4:	007a1200 	.word	0x007a1200
 80082f8:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082fc:	f7fd f982 	bl	8005604 <HAL_RCC_GetPCLK2Freq>
 8008300:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008306:	2b00      	cmp	r3, #0
 8008308:	d044      	beq.n	8008394 <UART_SetConfig+0xe14>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830e:	2b01      	cmp	r3, #1
 8008310:	d03e      	beq.n	8008390 <UART_SetConfig+0xe10>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008316:	2b02      	cmp	r3, #2
 8008318:	d038      	beq.n	800838c <UART_SetConfig+0xe0c>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831e:	2b03      	cmp	r3, #3
 8008320:	d032      	beq.n	8008388 <UART_SetConfig+0xe08>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008326:	2b04      	cmp	r3, #4
 8008328:	d02c      	beq.n	8008384 <UART_SetConfig+0xe04>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832e:	2b05      	cmp	r3, #5
 8008330:	d026      	beq.n	8008380 <UART_SetConfig+0xe00>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008336:	2b06      	cmp	r3, #6
 8008338:	d020      	beq.n	800837c <UART_SetConfig+0xdfc>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833e:	2b07      	cmp	r3, #7
 8008340:	d01a      	beq.n	8008378 <UART_SetConfig+0xdf8>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008346:	2b08      	cmp	r3, #8
 8008348:	d014      	beq.n	8008374 <UART_SetConfig+0xdf4>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834e:	2b09      	cmp	r3, #9
 8008350:	d00e      	beq.n	8008370 <UART_SetConfig+0xdf0>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008356:	2b0a      	cmp	r3, #10
 8008358:	d008      	beq.n	800836c <UART_SetConfig+0xdec>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835e:	2b0b      	cmp	r3, #11
 8008360:	d102      	bne.n	8008368 <UART_SetConfig+0xde8>
 8008362:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008366:	e016      	b.n	8008396 <UART_SetConfig+0xe16>
 8008368:	2301      	movs	r3, #1
 800836a:	e014      	b.n	8008396 <UART_SetConfig+0xe16>
 800836c:	2380      	movs	r3, #128	; 0x80
 800836e:	e012      	b.n	8008396 <UART_SetConfig+0xe16>
 8008370:	2340      	movs	r3, #64	; 0x40
 8008372:	e010      	b.n	8008396 <UART_SetConfig+0xe16>
 8008374:	2320      	movs	r3, #32
 8008376:	e00e      	b.n	8008396 <UART_SetConfig+0xe16>
 8008378:	2310      	movs	r3, #16
 800837a:	e00c      	b.n	8008396 <UART_SetConfig+0xe16>
 800837c:	230c      	movs	r3, #12
 800837e:	e00a      	b.n	8008396 <UART_SetConfig+0xe16>
 8008380:	230a      	movs	r3, #10
 8008382:	e008      	b.n	8008396 <UART_SetConfig+0xe16>
 8008384:	2308      	movs	r3, #8
 8008386:	e006      	b.n	8008396 <UART_SetConfig+0xe16>
 8008388:	2306      	movs	r3, #6
 800838a:	e004      	b.n	8008396 <UART_SetConfig+0xe16>
 800838c:	2304      	movs	r3, #4
 800838e:	e002      	b.n	8008396 <UART_SetConfig+0xe16>
 8008390:	2302      	movs	r3, #2
 8008392:	e000      	b.n	8008396 <UART_SetConfig+0xe16>
 8008394:	2301      	movs	r3, #1
 8008396:	693a      	ldr	r2, [r7, #16]
 8008398:	fbb2 f2f3 	udiv	r2, r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	085b      	lsrs	r3, r3, #1
 80083a2:	441a      	add	r2, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	61fb      	str	r3, [r7, #28]
        break;
 80083b0:	e112      	b.n	80085d8 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d044      	beq.n	8008444 <UART_SetConfig+0xec4>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d03e      	beq.n	8008440 <UART_SetConfig+0xec0>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c6:	2b02      	cmp	r3, #2
 80083c8:	d038      	beq.n	800843c <UART_SetConfig+0xebc>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ce:	2b03      	cmp	r3, #3
 80083d0:	d032      	beq.n	8008438 <UART_SetConfig+0xeb8>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d6:	2b04      	cmp	r3, #4
 80083d8:	d02c      	beq.n	8008434 <UART_SetConfig+0xeb4>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083de:	2b05      	cmp	r3, #5
 80083e0:	d026      	beq.n	8008430 <UART_SetConfig+0xeb0>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e6:	2b06      	cmp	r3, #6
 80083e8:	d020      	beq.n	800842c <UART_SetConfig+0xeac>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ee:	2b07      	cmp	r3, #7
 80083f0:	d01a      	beq.n	8008428 <UART_SetConfig+0xea8>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f6:	2b08      	cmp	r3, #8
 80083f8:	d014      	beq.n	8008424 <UART_SetConfig+0xea4>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fe:	2b09      	cmp	r3, #9
 8008400:	d00e      	beq.n	8008420 <UART_SetConfig+0xea0>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008406:	2b0a      	cmp	r3, #10
 8008408:	d008      	beq.n	800841c <UART_SetConfig+0xe9c>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840e:	2b0b      	cmp	r3, #11
 8008410:	d102      	bne.n	8008418 <UART_SetConfig+0xe98>
 8008412:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008416:	e016      	b.n	8008446 <UART_SetConfig+0xec6>
 8008418:	4b80      	ldr	r3, [pc, #512]	; (800861c <UART_SetConfig+0x109c>)
 800841a:	e014      	b.n	8008446 <UART_SetConfig+0xec6>
 800841c:	4b80      	ldr	r3, [pc, #512]	; (8008620 <UART_SetConfig+0x10a0>)
 800841e:	e012      	b.n	8008446 <UART_SetConfig+0xec6>
 8008420:	4b80      	ldr	r3, [pc, #512]	; (8008624 <UART_SetConfig+0x10a4>)
 8008422:	e010      	b.n	8008446 <UART_SetConfig+0xec6>
 8008424:	4b80      	ldr	r3, [pc, #512]	; (8008628 <UART_SetConfig+0x10a8>)
 8008426:	e00e      	b.n	8008446 <UART_SetConfig+0xec6>
 8008428:	4b80      	ldr	r3, [pc, #512]	; (800862c <UART_SetConfig+0x10ac>)
 800842a:	e00c      	b.n	8008446 <UART_SetConfig+0xec6>
 800842c:	4b80      	ldr	r3, [pc, #512]	; (8008630 <UART_SetConfig+0x10b0>)
 800842e:	e00a      	b.n	8008446 <UART_SetConfig+0xec6>
 8008430:	4b80      	ldr	r3, [pc, #512]	; (8008634 <UART_SetConfig+0x10b4>)
 8008432:	e008      	b.n	8008446 <UART_SetConfig+0xec6>
 8008434:	4b80      	ldr	r3, [pc, #512]	; (8008638 <UART_SetConfig+0x10b8>)
 8008436:	e006      	b.n	8008446 <UART_SetConfig+0xec6>
 8008438:	4b80      	ldr	r3, [pc, #512]	; (800863c <UART_SetConfig+0x10bc>)
 800843a:	e004      	b.n	8008446 <UART_SetConfig+0xec6>
 800843c:	4b80      	ldr	r3, [pc, #512]	; (8008640 <UART_SetConfig+0x10c0>)
 800843e:	e002      	b.n	8008446 <UART_SetConfig+0xec6>
 8008440:	4b80      	ldr	r3, [pc, #512]	; (8008644 <UART_SetConfig+0x10c4>)
 8008442:	e000      	b.n	8008446 <UART_SetConfig+0xec6>
 8008444:	4b75      	ldr	r3, [pc, #468]	; (800861c <UART_SetConfig+0x109c>)
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	6852      	ldr	r2, [r2, #4]
 800844a:	0852      	lsrs	r2, r2, #1
 800844c:	441a      	add	r2, r3
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	fbb2 f3f3 	udiv	r3, r2, r3
 8008456:	b29b      	uxth	r3, r3
 8008458:	61fb      	str	r3, [r7, #28]
        break;
 800845a:	e0bd      	b.n	80085d8 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800845c:	f7fd f83e 	bl	80054dc <HAL_RCC_GetSysClockFreq>
 8008460:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008466:	2b00      	cmp	r3, #0
 8008468:	d044      	beq.n	80084f4 <UART_SetConfig+0xf74>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846e:	2b01      	cmp	r3, #1
 8008470:	d03e      	beq.n	80084f0 <UART_SetConfig+0xf70>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008476:	2b02      	cmp	r3, #2
 8008478:	d038      	beq.n	80084ec <UART_SetConfig+0xf6c>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847e:	2b03      	cmp	r3, #3
 8008480:	d032      	beq.n	80084e8 <UART_SetConfig+0xf68>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008486:	2b04      	cmp	r3, #4
 8008488:	d02c      	beq.n	80084e4 <UART_SetConfig+0xf64>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848e:	2b05      	cmp	r3, #5
 8008490:	d026      	beq.n	80084e0 <UART_SetConfig+0xf60>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008496:	2b06      	cmp	r3, #6
 8008498:	d020      	beq.n	80084dc <UART_SetConfig+0xf5c>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849e:	2b07      	cmp	r3, #7
 80084a0:	d01a      	beq.n	80084d8 <UART_SetConfig+0xf58>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a6:	2b08      	cmp	r3, #8
 80084a8:	d014      	beq.n	80084d4 <UART_SetConfig+0xf54>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ae:	2b09      	cmp	r3, #9
 80084b0:	d00e      	beq.n	80084d0 <UART_SetConfig+0xf50>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b6:	2b0a      	cmp	r3, #10
 80084b8:	d008      	beq.n	80084cc <UART_SetConfig+0xf4c>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084be:	2b0b      	cmp	r3, #11
 80084c0:	d102      	bne.n	80084c8 <UART_SetConfig+0xf48>
 80084c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80084c6:	e016      	b.n	80084f6 <UART_SetConfig+0xf76>
 80084c8:	2301      	movs	r3, #1
 80084ca:	e014      	b.n	80084f6 <UART_SetConfig+0xf76>
 80084cc:	2380      	movs	r3, #128	; 0x80
 80084ce:	e012      	b.n	80084f6 <UART_SetConfig+0xf76>
 80084d0:	2340      	movs	r3, #64	; 0x40
 80084d2:	e010      	b.n	80084f6 <UART_SetConfig+0xf76>
 80084d4:	2320      	movs	r3, #32
 80084d6:	e00e      	b.n	80084f6 <UART_SetConfig+0xf76>
 80084d8:	2310      	movs	r3, #16
 80084da:	e00c      	b.n	80084f6 <UART_SetConfig+0xf76>
 80084dc:	230c      	movs	r3, #12
 80084de:	e00a      	b.n	80084f6 <UART_SetConfig+0xf76>
 80084e0:	230a      	movs	r3, #10
 80084e2:	e008      	b.n	80084f6 <UART_SetConfig+0xf76>
 80084e4:	2308      	movs	r3, #8
 80084e6:	e006      	b.n	80084f6 <UART_SetConfig+0xf76>
 80084e8:	2306      	movs	r3, #6
 80084ea:	e004      	b.n	80084f6 <UART_SetConfig+0xf76>
 80084ec:	2304      	movs	r3, #4
 80084ee:	e002      	b.n	80084f6 <UART_SetConfig+0xf76>
 80084f0:	2302      	movs	r3, #2
 80084f2:	e000      	b.n	80084f6 <UART_SetConfig+0xf76>
 80084f4:	2301      	movs	r3, #1
 80084f6:	693a      	ldr	r2, [r7, #16]
 80084f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	085b      	lsrs	r3, r3, #1
 8008502:	441a      	add	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	fbb2 f3f3 	udiv	r3, r2, r3
 800850c:	b29b      	uxth	r3, r3
 800850e:	61fb      	str	r3, [r7, #28]
        break;
 8008510:	e062      	b.n	80085d8 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008516:	2b00      	cmp	r3, #0
 8008518:	d04e      	beq.n	80085b8 <UART_SetConfig+0x1038>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851e:	2b01      	cmp	r3, #1
 8008520:	d047      	beq.n	80085b2 <UART_SetConfig+0x1032>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008526:	2b02      	cmp	r3, #2
 8008528:	d040      	beq.n	80085ac <UART_SetConfig+0x102c>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852e:	2b03      	cmp	r3, #3
 8008530:	d039      	beq.n	80085a6 <UART_SetConfig+0x1026>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008536:	2b04      	cmp	r3, #4
 8008538:	d032      	beq.n	80085a0 <UART_SetConfig+0x1020>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853e:	2b05      	cmp	r3, #5
 8008540:	d02b      	beq.n	800859a <UART_SetConfig+0x101a>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008546:	2b06      	cmp	r3, #6
 8008548:	d024      	beq.n	8008594 <UART_SetConfig+0x1014>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854e:	2b07      	cmp	r3, #7
 8008550:	d01d      	beq.n	800858e <UART_SetConfig+0x100e>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008556:	2b08      	cmp	r3, #8
 8008558:	d016      	beq.n	8008588 <UART_SetConfig+0x1008>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800855e:	2b09      	cmp	r3, #9
 8008560:	d00f      	beq.n	8008582 <UART_SetConfig+0x1002>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008566:	2b0a      	cmp	r3, #10
 8008568:	d008      	beq.n	800857c <UART_SetConfig+0xffc>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856e:	2b0b      	cmp	r3, #11
 8008570:	d101      	bne.n	8008576 <UART_SetConfig+0xff6>
 8008572:	2380      	movs	r3, #128	; 0x80
 8008574:	e022      	b.n	80085bc <UART_SetConfig+0x103c>
 8008576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800857a:	e01f      	b.n	80085bc <UART_SetConfig+0x103c>
 800857c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008580:	e01c      	b.n	80085bc <UART_SetConfig+0x103c>
 8008582:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008586:	e019      	b.n	80085bc <UART_SetConfig+0x103c>
 8008588:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800858c:	e016      	b.n	80085bc <UART_SetConfig+0x103c>
 800858e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008592:	e013      	b.n	80085bc <UART_SetConfig+0x103c>
 8008594:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8008598:	e010      	b.n	80085bc <UART_SetConfig+0x103c>
 800859a:	f640 43cc 	movw	r3, #3276	; 0xccc
 800859e:	e00d      	b.n	80085bc <UART_SetConfig+0x103c>
 80085a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085a4:	e00a      	b.n	80085bc <UART_SetConfig+0x103c>
 80085a6:	f241 5355 	movw	r3, #5461	; 0x1555
 80085aa:	e007      	b.n	80085bc <UART_SetConfig+0x103c>
 80085ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80085b0:	e004      	b.n	80085bc <UART_SetConfig+0x103c>
 80085b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80085b6:	e001      	b.n	80085bc <UART_SetConfig+0x103c>
 80085b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	6852      	ldr	r2, [r2, #4]
 80085c0:	0852      	lsrs	r2, r2, #1
 80085c2:	441a      	add	r2, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	61fb      	str	r3, [r7, #28]
        break;
 80085d0:	e002      	b.n	80085d8 <UART_SetConfig+0x1058>
      default:
        ret = HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	76fb      	strb	r3, [r7, #27]
        break;
 80085d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085d8:	69fb      	ldr	r3, [r7, #28]
 80085da:	2b0f      	cmp	r3, #15
 80085dc:	d908      	bls.n	80085f0 <UART_SetConfig+0x1070>
 80085de:	69fb      	ldr	r3, [r7, #28]
 80085e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085e4:	d204      	bcs.n	80085f0 <UART_SetConfig+0x1070>
    {
      huart->Instance->BRR = usartdiv;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	69fa      	ldr	r2, [r7, #28]
 80085ec:	60da      	str	r2, [r3, #12]
 80085ee:	e001      	b.n	80085f4 <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 80085f0:	2301      	movs	r3, #1
 80085f2:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8008610:	7efb      	ldrb	r3, [r7, #27]
}
 8008612:	4618      	mov	r0, r3
 8008614:	3728      	adds	r7, #40	; 0x28
 8008616:	46bd      	mov	sp, r7
 8008618:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800861c:	00f42400 	.word	0x00f42400
 8008620:	0001e848 	.word	0x0001e848
 8008624:	0003d090 	.word	0x0003d090
 8008628:	0007a120 	.word	0x0007a120
 800862c:	000f4240 	.word	0x000f4240
 8008630:	00145855 	.word	0x00145855
 8008634:	00186a00 	.word	0x00186a00
 8008638:	001e8480 	.word	0x001e8480
 800863c:	0028b0aa 	.word	0x0028b0aa
 8008640:	003d0900 	.word	0x003d0900
 8008644:	007a1200 	.word	0x007a1200

08008648 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008654:	f003 0301 	and.w	r3, r3, #1
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00a      	beq.n	8008672 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	430a      	orrs	r2, r1
 8008670:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008676:	f003 0302 	and.w	r3, r3, #2
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00a      	beq.n	8008694 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	430a      	orrs	r2, r1
 8008692:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008698:	f003 0304 	and.w	r3, r3, #4
 800869c:	2b00      	cmp	r3, #0
 800869e:	d00a      	beq.n	80086b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	430a      	orrs	r2, r1
 80086b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ba:	f003 0308 	and.w	r3, r3, #8
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d00a      	beq.n	80086d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	430a      	orrs	r2, r1
 80086d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086dc:	f003 0310 	and.w	r3, r3, #16
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d00a      	beq.n	80086fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	430a      	orrs	r2, r1
 80086f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086fe:	f003 0320 	and.w	r3, r3, #32
 8008702:	2b00      	cmp	r3, #0
 8008704:	d00a      	beq.n	800871c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	430a      	orrs	r2, r1
 800871a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008724:	2b00      	cmp	r3, #0
 8008726:	d01a      	beq.n	800875e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	430a      	orrs	r2, r1
 800873c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008742:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008746:	d10a      	bne.n	800875e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	430a      	orrs	r2, r1
 800875c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008766:	2b00      	cmp	r3, #0
 8008768:	d00a      	beq.n	8008780 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	430a      	orrs	r2, r1
 800877e:	605a      	str	r2, [r3, #4]
  }
}
 8008780:	bf00      	nop
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b086      	sub	sp, #24
 8008790:	af02      	add	r7, sp, #8
 8008792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800879c:	f7fa fce4 	bl	8003168 <HAL_GetTick>
 80087a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f003 0308 	and.w	r3, r3, #8
 80087ac:	2b08      	cmp	r3, #8
 80087ae:	d10e      	bne.n	80087ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087b4:	9300      	str	r3, [sp, #0]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2200      	movs	r2, #0
 80087ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 f82c 	bl	800881c <UART_WaitOnFlagUntilTimeout>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d001      	beq.n	80087ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087ca:	2303      	movs	r3, #3
 80087cc:	e022      	b.n	8008814 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f003 0304 	and.w	r3, r3, #4
 80087d8:	2b04      	cmp	r3, #4
 80087da:	d10e      	bne.n	80087fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087e0:	9300      	str	r3, [sp, #0]
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 f816 	bl	800881c <UART_WaitOnFlagUntilTimeout>
 80087f0:	4603      	mov	r3, r0
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d001      	beq.n	80087fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087f6:	2303      	movs	r3, #3
 80087f8:	e00c      	b.n	8008814 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2220      	movs	r2, #32
 80087fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2220      	movs	r2, #32
 8008806:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008812:	2300      	movs	r3, #0
}
 8008814:	4618      	mov	r0, r3
 8008816:	3710      	adds	r7, #16
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b084      	sub	sp, #16
 8008820:	af00      	add	r7, sp, #0
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	60b9      	str	r1, [r7, #8]
 8008826:	603b      	str	r3, [r7, #0]
 8008828:	4613      	mov	r3, r2
 800882a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800882c:	e062      	b.n	80088f4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008834:	d05e      	beq.n	80088f4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008836:	f7fa fc97 	bl	8003168 <HAL_GetTick>
 800883a:	4602      	mov	r2, r0
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	1ad3      	subs	r3, r2, r3
 8008840:	69ba      	ldr	r2, [r7, #24]
 8008842:	429a      	cmp	r2, r3
 8008844:	d302      	bcc.n	800884c <UART_WaitOnFlagUntilTimeout+0x30>
 8008846:	69bb      	ldr	r3, [r7, #24]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d11d      	bne.n	8008888 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	681a      	ldr	r2, [r3, #0]
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800885a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	689a      	ldr	r2, [r3, #8]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f022 0201 	bic.w	r2, r2, #1
 800886a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2220      	movs	r2, #32
 8008870:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2220      	movs	r2, #32
 8008878:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2200      	movs	r2, #0
 8008880:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008884:	2303      	movs	r3, #3
 8008886:	e045      	b.n	8008914 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f003 0304 	and.w	r3, r3, #4
 8008892:	2b00      	cmp	r3, #0
 8008894:	d02e      	beq.n	80088f4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	69db      	ldr	r3, [r3, #28]
 800889c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088a4:	d126      	bne.n	80088f4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80088ae:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80088be:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	689a      	ldr	r2, [r3, #8]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f022 0201 	bic.w	r2, r2, #1
 80088ce:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2220      	movs	r2, #32
 80088d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2220      	movs	r2, #32
 80088dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2220      	movs	r2, #32
 80088e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2200      	movs	r2, #0
 80088ec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 80088f0:	2303      	movs	r3, #3
 80088f2:	e00f      	b.n	8008914 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	69da      	ldr	r2, [r3, #28]
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	4013      	ands	r3, r2
 80088fe:	68ba      	ldr	r2, [r7, #8]
 8008900:	429a      	cmp	r2, r3
 8008902:	bf0c      	ite	eq
 8008904:	2301      	moveq	r3, #1
 8008906:	2300      	movne	r3, #0
 8008908:	b2db      	uxtb	r3, r3
 800890a:	461a      	mov	r2, r3
 800890c:	79fb      	ldrb	r3, [r7, #7]
 800890e:	429a      	cmp	r2, r3
 8008910:	d08d      	beq.n	800882e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008912:	2300      	movs	r3, #0
}
 8008914:	4618      	mov	r0, r3
 8008916:	3710      	adds	r7, #16
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800891c:	b480      	push	{r7}
 800891e:	b085      	sub	sp, #20
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800892a:	2b01      	cmp	r3, #1
 800892c:	d101      	bne.n	8008932 <HAL_UARTEx_DisableFifoMode+0x16>
 800892e:	2302      	movs	r3, #2
 8008930:	e027      	b.n	8008982 <HAL_UARTEx_DisableFifoMode+0x66>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2201      	movs	r2, #1
 8008936:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2224      	movs	r2, #36	; 0x24
 800893e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f022 0201 	bic.w	r2, r2, #1
 8008958:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008960:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2200      	movs	r2, #0
 8008966:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2220      	movs	r2, #32
 8008974:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	3714      	adds	r7, #20
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr

0800898e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b084      	sub	sp, #16
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
 8008996:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d101      	bne.n	80089a6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80089a2:	2302      	movs	r3, #2
 80089a4:	e02d      	b.n	8008a02 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2201      	movs	r2, #1
 80089aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2224      	movs	r2, #36	; 0x24
 80089b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f022 0201 	bic.w	r2, r2, #1
 80089cc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	683a      	ldr	r2, [r7, #0]
 80089de:	430a      	orrs	r2, r1
 80089e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 f850 	bl	8008a88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	68fa      	ldr	r2, [r7, #12]
 80089ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2220      	movs	r2, #32
 80089f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b084      	sub	sp, #16
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
 8008a12:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d101      	bne.n	8008a22 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008a1e:	2302      	movs	r3, #2
 8008a20:	e02d      	b.n	8008a7e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2201      	movs	r2, #1
 8008a26:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2224      	movs	r2, #36	; 0x24
 8008a2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f022 0201 	bic.w	r2, r2, #1
 8008a48:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	683a      	ldr	r2, [r7, #0]
 8008a5a:	430a      	orrs	r2, r1
 8008a5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 f812 	bl	8008a88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68fa      	ldr	r2, [r7, #12]
 8008a6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2220      	movs	r2, #32
 8008a70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3710      	adds	r7, #16
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
	...

08008a88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b089      	sub	sp, #36	; 0x24
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008a90:	4a2f      	ldr	r2, [pc, #188]	; (8008b50 <UARTEx_SetNbDataToProcess+0xc8>)
 8008a92:	f107 0314 	add.w	r3, r7, #20
 8008a96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008a9a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008a9e:	4a2d      	ldr	r2, [pc, #180]	; (8008b54 <UARTEx_SetNbDataToProcess+0xcc>)
 8008aa0:	f107 030c 	add.w	r3, r7, #12
 8008aa4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008aa8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d108      	bne.n	8008ac6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008ac4:	e03d      	b.n	8008b42 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008ac6:	2308      	movs	r3, #8
 8008ac8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008aca:	2308      	movs	r3, #8
 8008acc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	0e5b      	lsrs	r3, r3, #25
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	f003 0307 	and.w	r3, r3, #7
 8008adc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	0f5b      	lsrs	r3, r3, #29
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	f003 0307 	and.w	r3, r3, #7
 8008aec:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008aee:	7fbb      	ldrb	r3, [r7, #30]
 8008af0:	7f3a      	ldrb	r2, [r7, #28]
 8008af2:	f107 0120 	add.w	r1, r7, #32
 8008af6:	440a      	add	r2, r1
 8008af8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008afc:	fb02 f303 	mul.w	r3, r2, r3
 8008b00:	7f3a      	ldrb	r2, [r7, #28]
 8008b02:	f107 0120 	add.w	r1, r7, #32
 8008b06:	440a      	add	r2, r1
 8008b08:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008b0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b10:	b29a      	uxth	r2, r3
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008b18:	7ffb      	ldrb	r3, [r7, #31]
 8008b1a:	7f7a      	ldrb	r2, [r7, #29]
 8008b1c:	f107 0120 	add.w	r1, r7, #32
 8008b20:	440a      	add	r2, r1
 8008b22:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008b26:	fb02 f303 	mul.w	r3, r2, r3
 8008b2a:	7f7a      	ldrb	r2, [r7, #29]
 8008b2c:	f107 0120 	add.w	r1, r7, #32
 8008b30:	440a      	add	r2, r1
 8008b32:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008b36:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b3a:	b29a      	uxth	r2, r3
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008b42:	bf00      	nop
 8008b44:	3724      	adds	r7, #36	; 0x24
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr
 8008b4e:	bf00      	nop
 8008b50:	0800b838 	.word	0x0800b838
 8008b54:	0800b840 	.word	0x0800b840

08008b58 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008b60:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008b64:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008b6c:	b29a      	uxth	r2, r3
 8008b6e:	89fb      	ldrh	r3, [r7, #14]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	b29a      	uxth	r2, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3714      	adds	r7, #20
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b085      	sub	sp, #20
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008b90:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008b94:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	b21a      	sxth	r2, r3
 8008ba0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008ba4:	43db      	mvns	r3, r3
 8008ba6:	b21b      	sxth	r3, r3
 8008ba8:	4013      	ands	r3, r2
 8008baa:	b21b      	sxth	r3, r3
 8008bac:	b29a      	uxth	r2, r3
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3714      	adds	r7, #20
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr

08008bc2 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	f107 0014 	add.w	r0, r7, #20
 8008bd0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f7ff ffaf 	bl	8008b58 <USB_EnableGlobalInt>

  return HAL_OK;
 8008bfa:	2300      	movs	r3, #0
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3708      	adds	r7, #8
 8008c00:	46bd      	mov	sp, r7
 8008c02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c06:	b004      	add	sp, #16
 8008c08:	4770      	bx	lr

08008c0a <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable(void)
{
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b088      	sub	sp, #32
 8008c0e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008c10:	2300      	movs	r3, #0
 8008c12:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8008c14:	f107 0308 	add.w	r3, r7, #8
 8008c18:	2218      	movs	r2, #24
 8008c1a:	2100      	movs	r1, #0
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f001 f97f 	bl	8009f20 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008c22:	233f      	movs	r3, #63	; 0x3f
 8008c24:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8008c26:	2381      	movs	r3, #129	; 0x81
 8008c28:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008c2a:	1dfb      	adds	r3, r7, #7
 8008c2c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8008c32:	f107 0308 	add.w	r3, r7, #8
 8008c36:	2100      	movs	r1, #0
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f001 f835 	bl	8009ca8 <hci_send_req>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	da01      	bge.n	8008c48 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008c44:	23ff      	movs	r3, #255	; 0xff
 8008c46:	e005      	b.n	8008c54 <aci_gap_set_non_discoverable+0x4a>
  if (status) 
 8008c48:	79fb      	ldrb	r3, [r7, #7]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d001      	beq.n	8008c52 <aci_gap_set_non_discoverable+0x48>
  {
    return status;
 8008c4e:	79fb      	ldrb	r3, [r7, #7]
 8008c50:	e000      	b.n	8008c54 <aci_gap_set_non_discoverable+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8008c52:	2300      	movs	r3, #0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3720      	adds	r7, #32
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 8008c5c:	b5b0      	push	{r4, r5, r7, lr}
 8008c5e:	b0ce      	sub	sp, #312	; 0x138
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	4605      	mov	r5, r0
 8008c64:	460c      	mov	r4, r1
 8008c66:	4610      	mov	r0, r2
 8008c68:	4619      	mov	r1, r3
 8008c6a:	1dfb      	adds	r3, r7, #7
 8008c6c:	462a      	mov	r2, r5
 8008c6e:	701a      	strb	r2, [r3, #0]
 8008c70:	1d3b      	adds	r3, r7, #4
 8008c72:	4622      	mov	r2, r4
 8008c74:	801a      	strh	r2, [r3, #0]
 8008c76:	1cbb      	adds	r3, r7, #2
 8008c78:	4602      	mov	r2, r0
 8008c7a:	801a      	strh	r2, [r3, #0]
 8008c7c:	1dbb      	adds	r3, r7, #6
 8008c7e:	460a      	mov	r2, r1
 8008c80:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8008c82:	f107 0310 	add.w	r3, r7, #16
 8008c86:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8008c8a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8008c8e:	3308      	adds	r3, #8
 8008c90:	f107 0210 	add.w	r2, r7, #16
 8008c94:	4413      	add	r3, r2
 8008c96:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8008c9a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008c9e:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8008ca2:	4413      	add	r3, r2
 8008ca4:	3309      	adds	r3, #9
 8008ca6:	f107 0210 	add.w	r2, r7, #16
 8008caa:	4413      	add	r3, r2
 8008cac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008cb0:	f107 030f 	add.w	r3, r7, #15
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 8008cbe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008cc2:	1dfa      	adds	r2, r7, #7
 8008cc4:	7812      	ldrb	r2, [r2, #0]
 8008cc6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008cc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ccc:	3301      	adds	r3, #1
 8008cce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 8008cd2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008cd6:	1d3a      	adds	r2, r7, #4
 8008cd8:	8812      	ldrh	r2, [r2, #0]
 8008cda:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8008cde:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ce2:	3302      	adds	r3, #2
 8008ce4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 8008ce8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008cec:	1cba      	adds	r2, r7, #2
 8008cee:	8812      	ldrh	r2, [r2, #0]
 8008cf0:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8008cf4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008cf8:	3302      	adds	r3, #2
 8008cfa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8008cfe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008d02:	1dba      	adds	r2, r7, #6
 8008d04:	7812      	ldrb	r2, [r2, #0]
 8008d06:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008d08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8008d12:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008d16:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8008d1a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008d1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d20:	3301      	adds	r3, #1
 8008d22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 8008d26:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008d2a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008d2e:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8008d30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d34:	3301      	adds	r3, #1
 8008d36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length);
 8008d3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008d3e:	3308      	adds	r3, #8
 8008d40:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008d44:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f001 f8d9 	bl	8009f00 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8008d4e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8008d52:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008d56:	4413      	add	r3, r2
 8008d58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 8008d5c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008d60:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008d64:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008d66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length);
 8008d70:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008d74:	3301      	adds	r3, #1
 8008d76:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008d7a:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f001 f8be 	bl	8009f00 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8008d84:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8008d88:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008d8c:	4413      	add	r3, r2
 8008d8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 8008d92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d96:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8008d9a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008d9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008da0:	3302      	adds	r3, #2
 8008da2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 8008da6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008daa:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8008dae:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8008db0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008db4:	3302      	adds	r3, #2
 8008db6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 8008dba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008dbe:	2218      	movs	r2, #24
 8008dc0:	2100      	movs	r1, #0
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f001 f8ac 	bl	8009f20 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008dc8:	233f      	movs	r3, #63	; 0x3f
 8008dca:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8008dce:	2383      	movs	r3, #131	; 0x83
 8008dd0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008dd4:	f107 0310 	add.w	r3, r7, #16
 8008dd8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008ddc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008de0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008de4:	f107 030f 	add.w	r3, r7, #15
 8008de8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008dec:	2301      	movs	r3, #1
 8008dee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008df2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008df6:	2100      	movs	r1, #0
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f000 ff55 	bl	8009ca8 <hci_send_req>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	da01      	bge.n	8008e08 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8008e04:	23ff      	movs	r3, #255	; 0xff
 8008e06:	e009      	b.n	8008e1c <aci_gap_set_discoverable+0x1c0>
  if (status) 
 8008e08:	f107 030f 	add.w	r3, r7, #15
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d003      	beq.n	8008e1a <aci_gap_set_discoverable+0x1be>
  {
    return status;
 8008e12:	f107 030f 	add.w	r3, r7, #15
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	e000      	b.n	8008e1c <aci_gap_set_discoverable+0x1c0>
  }
  return BLE_STATUS_SUCCESS;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bdb0      	pop	{r4, r5, r7, pc}

08008e26 <aci_gap_set_io_capability>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
 8008e26:	b580      	push	{r7, lr}
 8008e28:	b0cc      	sub	sp, #304	; 0x130
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	1dfb      	adds	r3, r7, #7
 8008e30:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8008e32:	f107 0310 	add.w	r3, r7, #16
 8008e36:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008e3a:	f107 030f 	add.w	r3, r7, #15
 8008e3e:	2200      	movs	r2, #0
 8008e40:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008e42:	2300      	movs	r3, #0
 8008e44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = htob(IO_Capability, 1);
 8008e48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e4c:	1dfa      	adds	r2, r7, #7
 8008e4e:	7812      	ldrb	r2, [r2, #0]
 8008e50:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008e52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e56:	3301      	adds	r3, #1
 8008e58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8008e5c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008e60:	2218      	movs	r2, #24
 8008e62:	2100      	movs	r1, #0
 8008e64:	4618      	mov	r0, r3
 8008e66:	f001 f85b 	bl	8009f20 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008e6a:	233f      	movs	r3, #63	; 0x3f
 8008e6c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8008e70:	2385      	movs	r3, #133	; 0x85
 8008e72:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008e76:	f107 0310 	add.w	r3, r7, #16
 8008e7a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008e7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e82:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008e86:	f107 030f 	add.w	r3, r7, #15
 8008e8a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008e94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008e98:	2100      	movs	r1, #0
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f000 ff04 	bl	8009ca8 <hci_send_req>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	da01      	bge.n	8008eaa <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 8008ea6:	23ff      	movs	r3, #255	; 0xff
 8008ea8:	e009      	b.n	8008ebe <aci_gap_set_io_capability+0x98>
  if (status) 
 8008eaa:	f107 030f 	add.w	r3, r7, #15
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d003      	beq.n	8008ebc <aci_gap_set_io_capability+0x96>
  {
    return status;
 8008eb4:	f107 030f 	add.w	r3, r7, #15
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	e000      	b.n	8008ebe <aci_gap_set_io_capability+0x98>
  }
  return BLE_STATUS_SUCCESS;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 8008ec8:	b5b0      	push	{r4, r5, r7, lr}
 8008eca:	b0cc      	sub	sp, #304	; 0x130
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	4605      	mov	r5, r0
 8008ed0:	460c      	mov	r4, r1
 8008ed2:	4610      	mov	r0, r2
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	1dfb      	adds	r3, r7, #7
 8008ed8:	462a      	mov	r2, r5
 8008eda:	701a      	strb	r2, [r3, #0]
 8008edc:	1dbb      	adds	r3, r7, #6
 8008ede:	4622      	mov	r2, r4
 8008ee0:	701a      	strb	r2, [r3, #0]
 8008ee2:	1d7b      	adds	r3, r7, #5
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	701a      	strb	r2, [r3, #0]
 8008ee8:	1d3b      	adds	r3, r7, #4
 8008eea:	460a      	mov	r2, r1
 8008eec:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8008eee:	f107 0310 	add.w	r3, r7, #16
 8008ef2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008ef6:	f107 030f 	add.w	r3, r7, #15
 8008efa:	2200      	movs	r2, #0
 8008efc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008efe:	2300      	movs	r3, #0
 8008f00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 8008f04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f08:	1dfa      	adds	r2, r7, #7
 8008f0a:	7812      	ldrb	r2, [r2, #0]
 8008f0c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008f0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f12:	3301      	adds	r3, #1
 8008f14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 8008f18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f1c:	1dba      	adds	r2, r7, #6
 8008f1e:	7812      	ldrb	r2, [r2, #0]
 8008f20:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008f22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f26:	3301      	adds	r3, #1
 8008f28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = htob(SC_Support, 1);
 8008f2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f30:	1d7a      	adds	r2, r7, #5
 8008f32:	7812      	ldrb	r2, [r2, #0]
 8008f34:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008f36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 8008f40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f44:	1d3a      	adds	r2, r7, #4
 8008f46:	7812      	ldrb	r2, [r2, #0]
 8008f48:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8008f4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f4e:	3301      	adds	r3, #1
 8008f50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 8008f54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f58:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8008f5c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008f5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f62:	3301      	adds	r3, #1
 8008f64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 8008f68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f6c:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8008f70:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008f72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f76:	3301      	adds	r3, #1
 8008f78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 8008f7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f80:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8008f84:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008f86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 8008f90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f94:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8008f98:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8008f9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008fa0:	3304      	adds	r3, #4
 8008fa2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 8008fa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008faa:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8008fae:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8008fb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8008fba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008fbe:	2218      	movs	r2, #24
 8008fc0:	2100      	movs	r1, #0
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f000 ffac 	bl	8009f20 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008fc8:	233f      	movs	r3, #63	; 0x3f
 8008fca:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8008fce:	2386      	movs	r3, #134	; 0x86
 8008fd0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008fd4:	f107 0310 	add.w	r3, r7, #16
 8008fd8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008fdc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008fe0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008fe4:	f107 030f 	add.w	r3, r7, #15
 8008fe8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008fec:	2301      	movs	r3, #1
 8008fee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008ff2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ff6:	2100      	movs	r1, #0
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f000 fe55 	bl	8009ca8 <hci_send_req>
 8008ffe:	4603      	mov	r3, r0
 8009000:	2b00      	cmp	r3, #0
 8009002:	da01      	bge.n	8009008 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 8009004:	23ff      	movs	r3, #255	; 0xff
 8009006:	e009      	b.n	800901c <aci_gap_set_authentication_requirement+0x154>
  if (status) 
 8009008:	f107 030f 	add.w	r3, r7, #15
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d003      	beq.n	800901a <aci_gap_set_authentication_requirement+0x152>
  {
    return status;
 8009012:	f107 030f 	add.w	r3, r7, #15
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	e000      	b.n	800901c <aci_gap_set_authentication_requirement+0x154>
  }
  return BLE_STATUS_SUCCESS;
 800901a:	2300      	movs	r3, #0
}
 800901c:	4618      	mov	r0, r3
 800901e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009022:	46bd      	mov	sp, r7
 8009024:	bdb0      	pop	{r4, r5, r7, pc}

08009026 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 8009026:	b590      	push	{r4, r7, lr}
 8009028:	b0cd      	sub	sp, #308	; 0x134
 800902a:	af00      	add	r7, sp, #0
 800902c:	4604      	mov	r4, r0
 800902e:	4608      	mov	r0, r1
 8009030:	4611      	mov	r1, r2
 8009032:	463a      	mov	r2, r7
 8009034:	6013      	str	r3, [r2, #0]
 8009036:	1dfb      	adds	r3, r7, #7
 8009038:	4622      	mov	r2, r4
 800903a:	701a      	strb	r2, [r3, #0]
 800903c:	1dbb      	adds	r3, r7, #6
 800903e:	4602      	mov	r2, r0
 8009040:	701a      	strb	r2, [r3, #0]
 8009042:	1d7b      	adds	r3, r7, #5
 8009044:	460a      	mov	r2, r1
 8009046:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8009048:	f107 0310 	add.w	r3, r7, #16
 800904c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 8009050:	f107 0308 	add.w	r3, r7, #8
 8009054:	2207      	movs	r2, #7
 8009056:	2100      	movs	r1, #0
 8009058:	4618      	mov	r0, r3
 800905a:	f000 ff61 	bl	8009f20 <Osal_MemSet>
  int index_input = 0;
 800905e:	2300      	movs	r3, #0
 8009060:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = htob(Role, 1);
 8009064:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009068:	1dfa      	adds	r2, r7, #7
 800906a:	7812      	ldrb	r2, [r2, #0]
 800906c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800906e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009072:	3301      	adds	r3, #1
 8009074:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 8009078:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800907c:	1dba      	adds	r2, r7, #6
 800907e:	7812      	ldrb	r2, [r2, #0]
 8009080:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009082:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009086:	3301      	adds	r3, #1
 8009088:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 800908c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009090:	1d7a      	adds	r2, r7, #5
 8009092:	7812      	ldrb	r2, [r2, #0]
 8009094:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009096:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800909a:	3301      	adds	r3, #1
 800909c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 80090a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80090a4:	2218      	movs	r2, #24
 80090a6:	2100      	movs	r1, #0
 80090a8:	4618      	mov	r0, r3
 80090aa:	f000 ff39 	bl	8009f20 <Osal_MemSet>
  rq.ogf = 0x3f;
 80090ae:	233f      	movs	r3, #63	; 0x3f
 80090b0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 80090b4:	238a      	movs	r3, #138	; 0x8a
 80090b6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80090ba:	f107 0310 	add.w	r3, r7, #16
 80090be:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80090c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80090ca:	f107 0308 	add.w	r3, r7, #8
 80090ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80090d2:	2307      	movs	r3, #7
 80090d4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80090d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80090dc:	2100      	movs	r1, #0
 80090de:	4618      	mov	r0, r3
 80090e0:	f000 fde2 	bl	8009ca8 <hci_send_req>
 80090e4:	4603      	mov	r3, r0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	da01      	bge.n	80090ee <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 80090ea:	23ff      	movs	r3, #255	; 0xff
 80090ec:	e021      	b.n	8009132 <aci_gap_init+0x10c>
  if (resp.Status) 
 80090ee:	f107 0308 	add.w	r3, r7, #8
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d003      	beq.n	8009100 <aci_gap_init+0xda>
  {
    return resp.Status;
 80090f8:	f107 0308 	add.w	r3, r7, #8
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	e018      	b.n	8009132 <aci_gap_init+0x10c>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8009100:	f107 0308 	add.w	r3, r7, #8
 8009104:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009108:	b29a      	uxth	r2, r3
 800910a:	463b      	mov	r3, r7
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8009110:	f107 0308 	add.w	r3, r7, #8
 8009114:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009118:	b29a      	uxth	r2, r3
 800911a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800911e:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8009120:	f107 0308 	add.w	r3, r7, #8
 8009124:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009128:	b29a      	uxth	r2, r3
 800912a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800912e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009130:	2300      	movs	r3, #0
}
 8009132:	4618      	mov	r0, r3
 8009134:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8009138:	46bd      	mov	sp, r7
 800913a:	bd90      	pop	{r4, r7, pc}

0800913c <aci_gap_update_adv_data>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_update_adv_data(uint8_t AdvDataLen,
                                   uint8_t AdvData[])
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b0cc      	sub	sp, #304	; 0x130
 8009140:	af00      	add	r7, sp, #0
 8009142:	4602      	mov	r2, r0
 8009144:	463b      	mov	r3, r7
 8009146:	6019      	str	r1, [r3, #0]
 8009148:	1dfb      	adds	r3, r7, #7
 800914a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800914c:	f107 0310 	add.w	r3, r7, #16
 8009150:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009154:	f107 030f 	add.w	r3, r7, #15
 8009158:	2200      	movs	r2, #0
 800915a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800915c:	2300      	movs	r3, #0
 800915e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 8009162:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009166:	1dfa      	adds	r2, r7, #7
 8009168:	7812      	ldrb	r2, [r2, #0]
 800916a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800916c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009170:	3301      	adds	r3, #1
 8009172:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen);
 8009176:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800917a:	1c58      	adds	r0, r3, #1
 800917c:	1dfb      	adds	r3, r7, #7
 800917e:	781a      	ldrb	r2, [r3, #0]
 8009180:	463b      	mov	r3, r7
 8009182:	6819      	ldr	r1, [r3, #0]
 8009184:	f000 febc 	bl	8009f00 <Osal_MemCpy>
  index_input += AdvDataLen;
 8009188:	1dfb      	adds	r3, r7, #7
 800918a:	781b      	ldrb	r3, [r3, #0]
 800918c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009190:	4413      	add	r3, r2
 8009192:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8009196:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800919a:	2218      	movs	r2, #24
 800919c:	2100      	movs	r1, #0
 800919e:	4618      	mov	r0, r3
 80091a0:	f000 febe 	bl	8009f20 <Osal_MemSet>
  rq.ogf = 0x3f;
 80091a4:	233f      	movs	r3, #63	; 0x3f
 80091a6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 80091aa:	238e      	movs	r3, #142	; 0x8e
 80091ac:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80091b0:	f107 0310 	add.w	r3, r7, #16
 80091b4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80091b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80091bc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80091c0:	f107 030f 	add.w	r3, r7, #15
 80091c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80091c8:	2301      	movs	r3, #1
 80091ca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80091ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80091d2:	2100      	movs	r1, #0
 80091d4:	4618      	mov	r0, r3
 80091d6:	f000 fd67 	bl	8009ca8 <hci_send_req>
 80091da:	4603      	mov	r3, r0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	da01      	bge.n	80091e4 <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 80091e0:	23ff      	movs	r3, #255	; 0xff
 80091e2:	e009      	b.n	80091f8 <aci_gap_update_adv_data+0xbc>
  if (status) 
 80091e4:	f107 030f 	add.w	r3, r7, #15
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d003      	beq.n	80091f6 <aci_gap_update_adv_data+0xba>
  {
    return status;
 80091ee:	f107 030f 	add.w	r3, r7, #15
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	e000      	b.n	80091f8 <aci_gap_update_adv_data+0xbc>
  }
  return BLE_STATUS_SUCCESS;
 80091f6:	2300      	movs	r3, #0
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}

08009202 <aci_gap_configure_whitelist>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_configure_whitelist(void)
{
 8009202:	b580      	push	{r7, lr}
 8009204:	b088      	sub	sp, #32
 8009206:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009208:	2300      	movs	r3, #0
 800920a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800920c:	f107 0308 	add.w	r3, r7, #8
 8009210:	2218      	movs	r2, #24
 8009212:	2100      	movs	r1, #0
 8009214:	4618      	mov	r0, r3
 8009216:	f000 fe83 	bl	8009f20 <Osal_MemSet>
  rq.ogf = 0x3f;
 800921a:	233f      	movs	r3, #63	; 0x3f
 800921c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800921e:	2392      	movs	r3, #146	; 0x92
 8009220:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009222:	1dfb      	adds	r3, r7, #7
 8009224:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009226:	2301      	movs	r3, #1
 8009228:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800922a:	f107 0308 	add.w	r3, r7, #8
 800922e:	2100      	movs	r1, #0
 8009230:	4618      	mov	r0, r3
 8009232:	f000 fd39 	bl	8009ca8 <hci_send_req>
 8009236:	4603      	mov	r3, r0
 8009238:	2b00      	cmp	r3, #0
 800923a:	da01      	bge.n	8009240 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800923c:	23ff      	movs	r3, #255	; 0xff
 800923e:	e005      	b.n	800924c <aci_gap_configure_whitelist+0x4a>
  if (status) 
 8009240:	79fb      	ldrb	r3, [r7, #7]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d001      	beq.n	800924a <aci_gap_configure_whitelist+0x48>
  {
    return status;
 8009246:	79fb      	ldrb	r3, [r7, #7]
 8009248:	e000      	b.n	800924c <aci_gap_configure_whitelist+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	3720      	adds	r7, #32
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init(void)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b088      	sub	sp, #32
 8009258:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800925a:	2300      	movs	r3, #0
 800925c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800925e:	f107 0308 	add.w	r3, r7, #8
 8009262:	2218      	movs	r2, #24
 8009264:	2100      	movs	r1, #0
 8009266:	4618      	mov	r0, r3
 8009268:	f000 fe5a 	bl	8009f20 <Osal_MemSet>
  rq.ogf = 0x3f;
 800926c:	233f      	movs	r3, #63	; 0x3f
 800926e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8009270:	f240 1301 	movw	r3, #257	; 0x101
 8009274:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009276:	1dfb      	adds	r3, r7, #7
 8009278:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800927a:	2301      	movs	r3, #1
 800927c:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800927e:	f107 0308 	add.w	r3, r7, #8
 8009282:	2100      	movs	r1, #0
 8009284:	4618      	mov	r0, r3
 8009286:	f000 fd0f 	bl	8009ca8 <hci_send_req>
 800928a:	4603      	mov	r3, r0
 800928c:	2b00      	cmp	r3, #0
 800928e:	da01      	bge.n	8009294 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8009290:	23ff      	movs	r3, #255	; 0xff
 8009292:	e005      	b.n	80092a0 <aci_gatt_init+0x4c>
  if (status) 
 8009294:	79fb      	ldrb	r3, [r7, #7]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d001      	beq.n	800929e <aci_gatt_init+0x4a>
  {
    return status;
 800929a:	79fb      	ldrb	r3, [r7, #7]
 800929c:	e000      	b.n	80092a0 <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 800929e:	2300      	movs	r3, #0
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3720      	adds	r7, #32
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 80092a8:	b590      	push	{r4, r7, lr}
 80092aa:	b0cf      	sub	sp, #316	; 0x13c
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	4604      	mov	r4, r0
 80092b0:	4638      	mov	r0, r7
 80092b2:	6001      	str	r1, [r0, #0]
 80092b4:	4610      	mov	r0, r2
 80092b6:	4619      	mov	r1, r3
 80092b8:	1dfb      	adds	r3, r7, #7
 80092ba:	4622      	mov	r2, r4
 80092bc:	701a      	strb	r2, [r3, #0]
 80092be:	1dbb      	adds	r3, r7, #6
 80092c0:	4602      	mov	r2, r0
 80092c2:	701a      	strb	r2, [r3, #0]
 80092c4:	1d7b      	adds	r3, r7, #5
 80092c6:	460a      	mov	r2, r1
 80092c8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80092ca:	f107 0310 	add.w	r3, r7, #16
 80092ce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80092d2:	1dfb      	adds	r3, r7, #7
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d007      	beq.n	80092ea <aci_gatt_add_service+0x42>
 80092da:	1dfb      	adds	r3, r7, #7
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	2b02      	cmp	r3, #2
 80092e0:	d101      	bne.n	80092e6 <aci_gatt_add_service+0x3e>
 80092e2:	2311      	movs	r3, #17
 80092e4:	e002      	b.n	80092ec <aci_gatt_add_service+0x44>
 80092e6:	2301      	movs	r3, #1
 80092e8:	e000      	b.n	80092ec <aci_gatt_add_service+0x44>
 80092ea:	2303      	movs	r3, #3
 80092ec:	f107 0210 	add.w	r2, r7, #16
 80092f0:	4413      	add	r3, r2
 80092f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 80092f6:	f107 030c 	add.w	r3, r7, #12
 80092fa:	2203      	movs	r2, #3
 80092fc:	2100      	movs	r1, #0
 80092fe:	4618      	mov	r0, r3
 8009300:	f000 fe0e 	bl	8009f20 <Osal_MemSet>
  int index_input = 0;
 8009304:	2300      	movs	r3, #0
 8009306:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 800930a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800930e:	1dfa      	adds	r2, r7, #7
 8009310:	7812      	ldrb	r2, [r2, #0]
 8009312:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009314:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009318:	3301      	adds	r3, #1
 800931a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 800931e:	1dfb      	adds	r3, r7, #7
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	2b01      	cmp	r3, #1
 8009324:	d002      	beq.n	800932c <aci_gatt_add_service+0x84>
 8009326:	2b02      	cmp	r3, #2
 8009328:	d004      	beq.n	8009334 <aci_gatt_add_service+0x8c>
 800932a:	e007      	b.n	800933c <aci_gatt_add_service+0x94>
      case 1: size = 2; break;
 800932c:	2302      	movs	r3, #2
 800932e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8009332:	e005      	b.n	8009340 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 8009334:	2310      	movs	r3, #16
 8009336:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800933a:	e001      	b.n	8009340 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 800933c:	2347      	movs	r3, #71	; 0x47
 800933e:	e05d      	b.n	80093fc <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 8009340:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009344:	1c58      	adds	r0, r3, #1
 8009346:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800934a:	463b      	mov	r3, r7
 800934c:	6819      	ldr	r1, [r3, #0]
 800934e:	f000 fdd7 	bl	8009f00 <Osal_MemCpy>
    index_input += size;
 8009352:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009356:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800935a:	4413      	add	r3, r2
 800935c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = htob(Service_Type, 1);
 8009360:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009364:	1dba      	adds	r2, r7, #6
 8009366:	7812      	ldrb	r2, [r2, #0]
 8009368:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800936a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800936e:	3301      	adds	r3, #1
 8009370:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 8009374:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009378:	1d7a      	adds	r2, r7, #5
 800937a:	7812      	ldrb	r2, [r2, #0]
 800937c:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800937e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009382:	3301      	adds	r3, #1
 8009384:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 8009388:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800938c:	2218      	movs	r2, #24
 800938e:	2100      	movs	r1, #0
 8009390:	4618      	mov	r0, r3
 8009392:	f000 fdc5 	bl	8009f20 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009396:	233f      	movs	r3, #63	; 0x3f
 8009398:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800939c:	f44f 7381 	mov.w	r3, #258	; 0x102
 80093a0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80093a4:	f107 0310 	add.w	r3, r7, #16
 80093a8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80093ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093b0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80093b4:	f107 030c 	add.w	r3, r7, #12
 80093b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80093bc:	2303      	movs	r3, #3
 80093be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80093c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80093c6:	2100      	movs	r1, #0
 80093c8:	4618      	mov	r0, r3
 80093ca:	f000 fc6d 	bl	8009ca8 <hci_send_req>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	da01      	bge.n	80093d8 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 80093d4:	23ff      	movs	r3, #255	; 0xff
 80093d6:	e011      	b.n	80093fc <aci_gatt_add_service+0x154>
  if (resp.Status) 
 80093d8:	f107 030c 	add.w	r3, r7, #12
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d003      	beq.n	80093ea <aci_gatt_add_service+0x142>
  {
    return resp.Status;
 80093e2:	f107 030c 	add.w	r3, r7, #12
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	e008      	b.n	80093fc <aci_gatt_add_service+0x154>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 80093ea:	f107 030c 	add.w	r3, r7, #12
 80093ee:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80093f2:	b29a      	uxth	r2, r3
 80093f4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80093f8:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80093fa:	2300      	movs	r3, #0
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8009402:	46bd      	mov	sp, r7
 8009404:	bd90      	pop	{r4, r7, pc}

08009406 <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 8009406:	b590      	push	{r4, r7, lr}
 8009408:	b0d1      	sub	sp, #324	; 0x144
 800940a:	af00      	add	r7, sp, #0
 800940c:	4604      	mov	r4, r0
 800940e:	4608      	mov	r0, r1
 8009410:	f107 0108 	add.w	r1, r7, #8
 8009414:	600a      	str	r2, [r1, #0]
 8009416:	4619      	mov	r1, r3
 8009418:	f107 030e 	add.w	r3, r7, #14
 800941c:	4622      	mov	r2, r4
 800941e:	801a      	strh	r2, [r3, #0]
 8009420:	f107 030d 	add.w	r3, r7, #13
 8009424:	4602      	mov	r2, r0
 8009426:	701a      	strb	r2, [r3, #0]
 8009428:	1dbb      	adds	r3, r7, #6
 800942a:	460a      	mov	r2, r1
 800942c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800942e:	f107 0318 	add.w	r3, r7, #24
 8009432:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8009436:	f107 030d 	add.w	r3, r7, #13
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	2b01      	cmp	r3, #1
 800943e:	d008      	beq.n	8009452 <aci_gatt_add_char+0x4c>
 8009440:	f107 030d 	add.w	r3, r7, #13
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	2b02      	cmp	r3, #2
 8009448:	d101      	bne.n	800944e <aci_gatt_add_char+0x48>
 800944a:	2313      	movs	r3, #19
 800944c:	e002      	b.n	8009454 <aci_gatt_add_char+0x4e>
 800944e:	2303      	movs	r3, #3
 8009450:	e000      	b.n	8009454 <aci_gatt_add_char+0x4e>
 8009452:	2305      	movs	r3, #5
 8009454:	f107 0218 	add.w	r2, r7, #24
 8009458:	4413      	add	r3, r2
 800945a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800945e:	f107 0314 	add.w	r3, r7, #20
 8009462:	2203      	movs	r2, #3
 8009464:	2100      	movs	r1, #0
 8009466:	4618      	mov	r0, r3
 8009468:	f000 fd5a 	bl	8009f20 <Osal_MemSet>
  int index_input = 0;
 800946c:	2300      	movs	r3, #0
 800946e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = htob(Service_Handle, 2);
 8009472:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009476:	f107 020e 	add.w	r2, r7, #14
 800947a:	8812      	ldrh	r2, [r2, #0]
 800947c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800947e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009482:	3302      	adds	r3, #2
 8009484:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 8009488:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800948c:	f107 020d 	add.w	r2, r7, #13
 8009490:	7812      	ldrb	r2, [r2, #0]
 8009492:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009494:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009498:	3301      	adds	r3, #1
 800949a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 800949e:	f107 030d 	add.w	r3, r7, #13
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d002      	beq.n	80094ae <aci_gatt_add_char+0xa8>
 80094a8:	2b02      	cmp	r3, #2
 80094aa:	d004      	beq.n	80094b6 <aci_gatt_add_char+0xb0>
 80094ac:	e007      	b.n	80094be <aci_gatt_add_char+0xb8>
      case 1: size = 2; break;
 80094ae:	2302      	movs	r3, #2
 80094b0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80094b4:	e005      	b.n	80094c2 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 80094b6:	2310      	movs	r3, #16
 80094b8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80094bc:	e001      	b.n	80094c2 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 80094be:	2347      	movs	r3, #71	; 0x47
 80094c0:	e086      	b.n	80095d0 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 80094c2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80094c6:	1cd8      	adds	r0, r3, #3
 80094c8:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80094cc:	f107 0308 	add.w	r3, r7, #8
 80094d0:	6819      	ldr	r1, [r3, #0]
 80094d2:	f000 fd15 	bl	8009f00 <Osal_MemCpy>
    index_input += size;
 80094d6:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80094da:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80094de:	4413      	add	r3, r2
 80094e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 80094e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80094e8:	1dba      	adds	r2, r7, #6
 80094ea:	8812      	ldrh	r2, [r2, #0]
 80094ec:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80094ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80094f2:	3302      	adds	r3, #2
 80094f4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 80094f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80094fc:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8009500:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8009502:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009506:	3301      	adds	r3, #1
 8009508:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 800950c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009510:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8009514:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8009516:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800951a:	3301      	adds	r3, #1
 800951c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 8009520:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009524:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8009528:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800952a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800952e:	3301      	adds	r3, #1
 8009530:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 8009534:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009538:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800953c:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800953e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009542:	3301      	adds	r3, #1
 8009544:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 8009548:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800954c:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8009550:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8009552:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009556:	3301      	adds	r3, #1
 8009558:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 800955c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009560:	2218      	movs	r2, #24
 8009562:	2100      	movs	r1, #0
 8009564:	4618      	mov	r0, r3
 8009566:	f000 fcdb 	bl	8009f20 <Osal_MemSet>
  rq.ogf = 0x3f;
 800956a:	233f      	movs	r3, #63	; 0x3f
 800956c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8009570:	f44f 7382 	mov.w	r3, #260	; 0x104
 8009574:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8009578:	f107 0318 	add.w	r3, r7, #24
 800957c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8009580:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009584:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8009588:	f107 0314 	add.w	r3, r7, #20
 800958c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8009590:	2303      	movs	r3, #3
 8009592:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8009596:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800959a:	2100      	movs	r1, #0
 800959c:	4618      	mov	r0, r3
 800959e:	f000 fb83 	bl	8009ca8 <hci_send_req>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	da01      	bge.n	80095ac <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 80095a8:	23ff      	movs	r3, #255	; 0xff
 80095aa:	e011      	b.n	80095d0 <aci_gatt_add_char+0x1ca>
  if (resp.Status) 
 80095ac:	f107 0314 	add.w	r3, r7, #20
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d003      	beq.n	80095be <aci_gatt_add_char+0x1b8>
  {
    return resp.Status;
 80095b6:	f107 0314 	add.w	r3, r7, #20
 80095ba:	781b      	ldrb	r3, [r3, #0]
 80095bc:	e008      	b.n	80095d0 <aci_gatt_add_char+0x1ca>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 80095be:	f107 0314 	add.w	r3, r7, #20
 80095c2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80095c6:	b29a      	uxth	r2, r3
 80095c8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80095cc:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80095ce:	2300      	movs	r3, #0
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd90      	pop	{r4, r7, pc}

080095da <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 80095da:	b5b0      	push	{r4, r5, r7, lr}
 80095dc:	b0cc      	sub	sp, #304	; 0x130
 80095de:	af00      	add	r7, sp, #0
 80095e0:	4605      	mov	r5, r0
 80095e2:	460c      	mov	r4, r1
 80095e4:	4610      	mov	r0, r2
 80095e6:	4619      	mov	r1, r3
 80095e8:	1dbb      	adds	r3, r7, #6
 80095ea:	462a      	mov	r2, r5
 80095ec:	801a      	strh	r2, [r3, #0]
 80095ee:	1d3b      	adds	r3, r7, #4
 80095f0:	4622      	mov	r2, r4
 80095f2:	801a      	strh	r2, [r3, #0]
 80095f4:	1cfb      	adds	r3, r7, #3
 80095f6:	4602      	mov	r2, r0
 80095f8:	701a      	strb	r2, [r3, #0]
 80095fa:	1cbb      	adds	r3, r7, #2
 80095fc:	460a      	mov	r2, r1
 80095fe:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8009600:	f107 0310 	add.w	r3, r7, #16
 8009604:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009608:	f107 030f 	add.w	r3, r7, #15
 800960c:	2200      	movs	r2, #0
 800960e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009610:	2300      	movs	r3, #0
 8009612:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = htob(Service_Handle, 2);
 8009616:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800961a:	1dba      	adds	r2, r7, #6
 800961c:	8812      	ldrh	r2, [r2, #0]
 800961e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009620:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009624:	3302      	adds	r3, #2
 8009626:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = htob(Char_Handle, 2);
 800962a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800962e:	1d3a      	adds	r2, r7, #4
 8009630:	8812      	ldrh	r2, [r2, #0]
 8009632:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009634:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009638:	3302      	adds	r3, #2
 800963a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = htob(Val_Offset, 1);
 800963e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009642:	1cfa      	adds	r2, r7, #3
 8009644:	7812      	ldrb	r2, [r2, #0]
 8009646:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009648:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800964c:	3301      	adds	r3, #1
 800964e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 8009652:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009656:	1cba      	adds	r2, r7, #2
 8009658:	7812      	ldrb	r2, [r2, #0]
 800965a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800965c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009660:	3301      	adds	r3, #1
 8009662:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 8009666:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800966a:	1d98      	adds	r0, r3, #6
 800966c:	1cbb      	adds	r3, r7, #2
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	461a      	mov	r2, r3
 8009672:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8009676:	f000 fc43 	bl	8009f00 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800967a:	1cbb      	adds	r3, r7, #2
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009682:	4413      	add	r3, r2
 8009684:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8009688:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800968c:	2218      	movs	r2, #24
 800968e:	2100      	movs	r1, #0
 8009690:	4618      	mov	r0, r3
 8009692:	f000 fc45 	bl	8009f20 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009696:	233f      	movs	r3, #63	; 0x3f
 8009698:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800969c:	f44f 7383 	mov.w	r3, #262	; 0x106
 80096a0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80096a4:	f107 0310 	add.w	r3, r7, #16
 80096a8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80096ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096b0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80096b4:	f107 030f 	add.w	r3, r7, #15
 80096b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80096bc:	2301      	movs	r3, #1
 80096be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80096c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80096c6:	2100      	movs	r1, #0
 80096c8:	4618      	mov	r0, r3
 80096ca:	f000 faed 	bl	8009ca8 <hci_send_req>
 80096ce:	4603      	mov	r3, r0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	da01      	bge.n	80096d8 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 80096d4:	23ff      	movs	r3, #255	; 0xff
 80096d6:	e009      	b.n	80096ec <aci_gatt_update_char_value+0x112>
  if (status) 
 80096d8:	f107 030f 	add.w	r3, r7, #15
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d003      	beq.n	80096ea <aci_gatt_update_char_value+0x110>
  {
    return status;
 80096e2:	f107 030f 	add.w	r3, r7, #15
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	e000      	b.n	80096ec <aci_gatt_update_char_value+0x112>
  }
  return BLE_STATUS_SUCCESS;
 80096ea:	2300      	movs	r3, #0
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bdb0      	pop	{r4, r5, r7, pc}

080096f6 <aci_gatt_exchange_config>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gatt_exchange_config(uint16_t Connection_Handle)
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b0cc      	sub	sp, #304	; 0x130
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	4602      	mov	r2, r0
 80096fe:	1dbb      	adds	r3, r7, #6
 8009700:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_exchange_config_cp0 *cp0 = (aci_gatt_exchange_config_cp0*)(cmd_buffer);
 8009702:	f107 0310 	add.w	r3, r7, #16
 8009706:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800970a:	f107 030f 	add.w	r3, r7, #15
 800970e:	2200      	movs	r2, #0
 8009710:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009712:	2300      	movs	r3, #0
 8009714:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8009718:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800971c:	1dba      	adds	r2, r7, #6
 800971e:	8812      	ldrh	r2, [r2, #0]
 8009720:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009722:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009726:	3302      	adds	r3, #2
 8009728:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800972c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009730:	2218      	movs	r2, #24
 8009732:	2100      	movs	r1, #0
 8009734:	4618      	mov	r0, r3
 8009736:	f000 fbf3 	bl	8009f20 <Osal_MemSet>
  rq.ogf = 0x3f;
 800973a:	233f      	movs	r3, #63	; 0x3f
 800973c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x10b;
 8009740:	f240 130b 	movw	r3, #267	; 0x10b
 8009744:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8009748:	230f      	movs	r3, #15
 800974a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800974e:	f107 0310 	add.w	r3, r7, #16
 8009752:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009756:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800975a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800975e:	f107 030f 	add.w	r3, r7, #15
 8009762:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009766:	2301      	movs	r3, #1
 8009768:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800976c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009770:	2100      	movs	r1, #0
 8009772:	4618      	mov	r0, r3
 8009774:	f000 fa98 	bl	8009ca8 <hci_send_req>
 8009778:	4603      	mov	r3, r0
 800977a:	2b00      	cmp	r3, #0
 800977c:	da01      	bge.n	8009782 <aci_gatt_exchange_config+0x8c>
    return BLE_STATUS_TIMEOUT;
 800977e:	23ff      	movs	r3, #255	; 0xff
 8009780:	e009      	b.n	8009796 <aci_gatt_exchange_config+0xa0>
  if (status) 
 8009782:	f107 030f 	add.w	r3, r7, #15
 8009786:	781b      	ldrb	r3, [r3, #0]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d003      	beq.n	8009794 <aci_gatt_exchange_config+0x9e>
  {
    return status;
 800978c:	f107 030f 	add.w	r3, r7, #15
 8009790:	781b      	ldrb	r3, [r3, #0]
 8009792:	e000      	b.n	8009796 <aci_gatt_exchange_config+0xa0>
  }
  return BLE_STATUS_SUCCESS;
 8009794:	2300      	movs	r3, #0
}
 8009796:	4618      	mov	r0, r3
 8009798:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b0cc      	sub	sp, #304	; 0x130
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	463b      	mov	r3, r7
 80097a8:	601a      	str	r2, [r3, #0]
 80097aa:	1dfb      	adds	r3, r7, #7
 80097ac:	4602      	mov	r2, r0
 80097ae:	701a      	strb	r2, [r3, #0]
 80097b0:	1dbb      	adds	r3, r7, #6
 80097b2:	460a      	mov	r2, r1
 80097b4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80097b6:	f107 0310 	add.w	r3, r7, #16
 80097ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80097be:	f107 030f 	add.w	r3, r7, #15
 80097c2:	2200      	movs	r2, #0
 80097c4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80097c6:	2300      	movs	r3, #0
 80097c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = htob(Offset, 1);
 80097cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097d0:	1dfa      	adds	r2, r7, #7
 80097d2:	7812      	ldrb	r2, [r2, #0]
 80097d4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80097d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097da:	3301      	adds	r3, #1
 80097dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = htob(Length, 1);
 80097e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097e4:	1dba      	adds	r2, r7, #6
 80097e6:	7812      	ldrb	r2, [r2, #0]
 80097e8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80097ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097ee:	3301      	adds	r3, #1
 80097f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->Value, (const void *) Value, Length);
 80097f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097f8:	1c98      	adds	r0, r3, #2
 80097fa:	1dbb      	adds	r3, r7, #6
 80097fc:	781a      	ldrb	r2, [r3, #0]
 80097fe:	463b      	mov	r3, r7
 8009800:	6819      	ldr	r1, [r3, #0]
 8009802:	f000 fb7d 	bl	8009f00 <Osal_MemCpy>
  index_input += Length;
 8009806:	1dbb      	adds	r3, r7, #6
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800980e:	4413      	add	r3, r2
 8009810:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8009814:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009818:	2218      	movs	r2, #24
 800981a:	2100      	movs	r1, #0
 800981c:	4618      	mov	r0, r3
 800981e:	f000 fb7f 	bl	8009f20 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009822:	233f      	movs	r3, #63	; 0x3f
 8009824:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8009828:	230c      	movs	r3, #12
 800982a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800982e:	f107 0310 	add.w	r3, r7, #16
 8009832:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009836:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800983a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800983e:	f107 030f 	add.w	r3, r7, #15
 8009842:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009846:	2301      	movs	r3, #1
 8009848:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800984c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009850:	2100      	movs	r1, #0
 8009852:	4618      	mov	r0, r3
 8009854:	f000 fa28 	bl	8009ca8 <hci_send_req>
 8009858:	4603      	mov	r3, r0
 800985a:	2b00      	cmp	r3, #0
 800985c:	da01      	bge.n	8009862 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 800985e:	23ff      	movs	r3, #255	; 0xff
 8009860:	e009      	b.n	8009876 <aci_hal_write_config_data+0xd6>
  if (status) 
 8009862:	f107 030f 	add.w	r3, r7, #15
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d003      	beq.n	8009874 <aci_hal_write_config_data+0xd4>
  {
    return status;
 800986c:	f107 030f 	add.w	r3, r7, #15
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	e000      	b.n	8009876 <aci_hal_write_config_data+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 8009874:	2300      	movs	r3, #0
}
 8009876:	4618      	mov	r0, r3
 8009878:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b0cc      	sub	sp, #304	; 0x130
 8009884:	af00      	add	r7, sp, #0
 8009886:	4602      	mov	r2, r0
 8009888:	1dfb      	adds	r3, r7, #7
 800988a:	701a      	strb	r2, [r3, #0]
 800988c:	1dbb      	adds	r3, r7, #6
 800988e:	460a      	mov	r2, r1
 8009890:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8009892:	f107 0310 	add.w	r3, r7, #16
 8009896:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800989a:	f107 030f 	add.w	r3, r7, #15
 800989e:	2200      	movs	r2, #0
 80098a0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80098a2:	2300      	movs	r3, #0
 80098a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = htob(En_High_Power, 1);
 80098a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098ac:	1dfa      	adds	r2, r7, #7
 80098ae:	7812      	ldrb	r2, [r2, #0]
 80098b0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80098b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80098b6:	3301      	adds	r3, #1
 80098b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = htob(PA_Level, 1);
 80098bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098c0:	1dba      	adds	r2, r7, #6
 80098c2:	7812      	ldrb	r2, [r2, #0]
 80098c4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80098c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80098ca:	3301      	adds	r3, #1
 80098cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 80098d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80098d4:	2218      	movs	r2, #24
 80098d6:	2100      	movs	r1, #0
 80098d8:	4618      	mov	r0, r3
 80098da:	f000 fb21 	bl	8009f20 <Osal_MemSet>
  rq.ogf = 0x3f;
 80098de:	233f      	movs	r3, #63	; 0x3f
 80098e0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 80098e4:	230f      	movs	r3, #15
 80098e6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80098ea:	f107 0310 	add.w	r3, r7, #16
 80098ee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80098f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80098f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80098fa:	f107 030f 	add.w	r3, r7, #15
 80098fe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009902:	2301      	movs	r3, #1
 8009904:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8009908:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800990c:	2100      	movs	r1, #0
 800990e:	4618      	mov	r0, r3
 8009910:	f000 f9ca 	bl	8009ca8 <hci_send_req>
 8009914:	4603      	mov	r3, r0
 8009916:	2b00      	cmp	r3, #0
 8009918:	da01      	bge.n	800991e <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 800991a:	23ff      	movs	r3, #255	; 0xff
 800991c:	e009      	b.n	8009932 <aci_hal_set_tx_power_level+0xb2>
  if (status) 
 800991e:	f107 030f 	add.w	r3, r7, #15
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d003      	beq.n	8009930 <aci_hal_set_tx_power_level+0xb0>
  {
    return status;
 8009928:	f107 030f 	add.w	r3, r7, #15
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	e000      	b.n	8009932 <aci_hal_set_tx_power_level+0xb2>
  }
  return BLE_STATUS_SUCCESS;
 8009930:	2300      	movs	r3, #0
}
 8009932:	4618      	mov	r0, r3
 8009934:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy((void *) Link_Connection_Handle, (const void *) resp.Link_Connection_Handle, 16);
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask(uint16_t Radio_Activity_Mask)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b0cc      	sub	sp, #304	; 0x130
 8009940:	af00      	add	r7, sp, #0
 8009942:	4602      	mov	r2, r0
 8009944:	1dbb      	adds	r3, r7, #6
 8009946:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8009948:	f107 0310 	add.w	r3, r7, #16
 800994c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009950:	f107 030f 	add.w	r3, r7, #15
 8009954:	2200      	movs	r2, #0
 8009956:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009958:	2300      	movs	r3, #0
 800995a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = htob(Radio_Activity_Mask, 2);
 800995e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009962:	1dba      	adds	r2, r7, #6
 8009964:	8812      	ldrh	r2, [r2, #0]
 8009966:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009968:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800996c:	3302      	adds	r3, #2
 800996e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8009972:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009976:	2218      	movs	r2, #24
 8009978:	2100      	movs	r1, #0
 800997a:	4618      	mov	r0, r3
 800997c:	f000 fad0 	bl	8009f20 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009980:	233f      	movs	r3, #63	; 0x3f
 8009982:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8009986:	2318      	movs	r3, #24
 8009988:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800998c:	f107 0310 	add.w	r3, r7, #16
 8009990:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009994:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009998:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800999c:	f107 030f 	add.w	r3, r7, #15
 80099a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80099a4:	2301      	movs	r3, #1
 80099a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80099aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80099ae:	2100      	movs	r1, #0
 80099b0:	4618      	mov	r0, r3
 80099b2:	f000 f979 	bl	8009ca8 <hci_send_req>
 80099b6:	4603      	mov	r3, r0
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	da01      	bge.n	80099c0 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 80099bc:	23ff      	movs	r3, #255	; 0xff
 80099be:	e009      	b.n	80099d4 <aci_hal_set_radio_activity_mask+0x98>
  if (status) 
 80099c0:	f107 030f 	add.w	r3, r7, #15
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d003      	beq.n	80099d2 <aci_hal_set_radio_activity_mask+0x96>
  {
    return status;
 80099ca:	f107 030f 	add.w	r3, r7, #15
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	e000      	b.n	80099d4 <aci_hal_set_radio_activity_mask+0x98>
  }
  return BLE_STATUS_SUCCESS;
 80099d2:	2300      	movs	r3, #0
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}

080099de <hci_reset>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_reset(void)
{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b088      	sub	sp, #32
 80099e2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80099e4:	2300      	movs	r3, #0
 80099e6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 80099e8:	f107 0308 	add.w	r3, r7, #8
 80099ec:	2218      	movs	r2, #24
 80099ee:	2100      	movs	r1, #0
 80099f0:	4618      	mov	r0, r3
 80099f2:	f000 fa95 	bl	8009f20 <Osal_MemSet>
  rq.ogf = 0x03;
 80099f6:	2303      	movs	r3, #3
 80099f8:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80099fa:	2303      	movs	r3, #3
 80099fc:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80099fe:	1dfb      	adds	r3, r7, #7
 8009a00:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009a02:	2301      	movs	r3, #1
 8009a04:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8009a06:	f107 0308 	add.w	r3, r7, #8
 8009a0a:	2100      	movs	r1, #0
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f000 f94b 	bl	8009ca8 <hci_send_req>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	da01      	bge.n	8009a1c <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009a18:	23ff      	movs	r3, #255	; 0xff
 8009a1a:	e005      	b.n	8009a28 <hci_reset+0x4a>
  if (status) 
 8009a1c:	79fb      	ldrb	r3, [r7, #7]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d001      	beq.n	8009a26 <hci_reset+0x48>
  {
    return status;
 8009a22:	79fb      	ldrb	r3, [r7, #7]
 8009a24:	e000      	b.n	8009a28 <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8009a26:	2300      	movs	r3, #0
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3720      	adds	r7, #32
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy(uint16_t Connection_Handle,
                           uint8_t *TX_PHY,
                           uint8_t *RX_PHY)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b0ce      	sub	sp, #312	; 0x138
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	f107 0308 	add.w	r3, r7, #8
 8009a3a:	6019      	str	r1, [r3, #0]
 8009a3c:	1d3b      	adds	r3, r7, #4
 8009a3e:	601a      	str	r2, [r3, #0]
 8009a40:	f107 030e 	add.w	r3, r7, #14
 8009a44:	4602      	mov	r2, r0
 8009a46:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 8009a48:	f107 0318 	add.w	r3, r7, #24
 8009a4c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 8009a50:	f107 0310 	add.w	r3, r7, #16
 8009a54:	2205      	movs	r2, #5
 8009a56:	2100      	movs	r1, #0
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f000 fa61 	bl	8009f20 <Osal_MemSet>
  int index_input = 0;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8009a64:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009a68:	f107 020e 	add.w	r2, r7, #14
 8009a6c:	8812      	ldrh	r2, [r2, #0]
 8009a6e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009a70:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009a74:	3302      	adds	r3, #2
 8009a76:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet(&rq, 0, sizeof(rq));
 8009a7a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009a7e:	2218      	movs	r2, #24
 8009a80:	2100      	movs	r1, #0
 8009a82:	4618      	mov	r0, r3
 8009a84:	f000 fa4c 	bl	8009f20 <Osal_MemSet>
  rq.ogf = 0x08;
 8009a88:	2308      	movs	r3, #8
 8009a8a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 8009a8e:	2330      	movs	r3, #48	; 0x30
 8009a90:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8009a94:	f107 0318 	add.w	r3, r7, #24
 8009a98:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8009a9c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009aa0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8009aa4:	f107 0310 	add.w	r3, r7, #16
 8009aa8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8009aac:	2305      	movs	r3, #5
 8009aae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8009ab2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009ab6:	2100      	movs	r1, #0
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f000 f8f5 	bl	8009ca8 <hci_send_req>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	da01      	bge.n	8009ac8 <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 8009ac4:	23ff      	movs	r3, #255	; 0xff
 8009ac6:	e016      	b.n	8009af6 <hci_le_read_phy+0xc6>
  if (resp.Status) 
 8009ac8:	f107 0310 	add.w	r3, r7, #16
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d003      	beq.n	8009ada <hci_le_read_phy+0xaa>
  {
    return resp.Status;
 8009ad2:	f107 0310 	add.w	r3, r7, #16
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	e00d      	b.n	8009af6 <hci_le_read_phy+0xc6>
  }
  *TX_PHY = btoh(resp.TX_PHY, 1);
 8009ada:	f107 0310 	add.w	r3, r7, #16
 8009ade:	78da      	ldrb	r2, [r3, #3]
 8009ae0:	f107 0308 	add.w	r3, r7, #8
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	701a      	strb	r2, [r3, #0]
  *RX_PHY = btoh(resp.RX_PHY, 1);
 8009ae8:	f107 0310 	add.w	r3, r7, #16
 8009aec:	791a      	ldrb	r2, [r3, #4]
 8009aee:	1d3b      	adds	r3, r7, #4
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009af4:	2300      	movs	r3, #0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy(uint8_t ALL_PHYS,
                                  uint8_t TX_PHYS,
                                  uint8_t RX_PHYS)
{
 8009b00:	b590      	push	{r4, r7, lr}
 8009b02:	b0cd      	sub	sp, #308	; 0x134
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	4604      	mov	r4, r0
 8009b08:	4608      	mov	r0, r1
 8009b0a:	4611      	mov	r1, r2
 8009b0c:	1dfb      	adds	r3, r7, #7
 8009b0e:	4622      	mov	r2, r4
 8009b10:	701a      	strb	r2, [r3, #0]
 8009b12:	1dbb      	adds	r3, r7, #6
 8009b14:	4602      	mov	r2, r0
 8009b16:	701a      	strb	r2, [r3, #0]
 8009b18:	1d7b      	adds	r3, r7, #5
 8009b1a:	460a      	mov	r2, r1
 8009b1c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8009b1e:	f107 0310 	add.w	r3, r7, #16
 8009b22:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009b26:	f107 030f 	add.w	r3, r7, #15
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = htob(ALL_PHYS, 1);
 8009b34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b38:	1dfa      	adds	r2, r7, #7
 8009b3a:	7812      	ldrb	r2, [r2, #0]
 8009b3c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009b3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009b42:	3301      	adds	r3, #1
 8009b44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = htob(TX_PHYS, 1);
 8009b48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b4c:	1dba      	adds	r2, r7, #6
 8009b4e:	7812      	ldrb	r2, [r2, #0]
 8009b50:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009b52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009b56:	3301      	adds	r3, #1
 8009b58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = htob(RX_PHYS, 1);
 8009b5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b60:	1d7a      	adds	r2, r7, #5
 8009b62:	7812      	ldrb	r2, [r2, #0]
 8009b64:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009b66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8009b70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009b74:	2218      	movs	r2, #24
 8009b76:	2100      	movs	r1, #0
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f000 f9d1 	bl	8009f20 <Osal_MemSet>
  rq.ogf = 0x08;
 8009b7e:	2308      	movs	r3, #8
 8009b80:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8009b84:	2331      	movs	r3, #49	; 0x31
 8009b86:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009b8a:	f107 0310 	add.w	r3, r7, #16
 8009b8e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009b92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009b96:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009b9a:	f107 030f 	add.w	r3, r7, #15
 8009b9e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8009ba8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009bac:	2100      	movs	r1, #0
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f000 f87a 	bl	8009ca8 <hci_send_req>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	da01      	bge.n	8009bbe <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 8009bba:	23ff      	movs	r3, #255	; 0xff
 8009bbc:	e009      	b.n	8009bd2 <hci_le_set_default_phy+0xd2>
  if (status) 
 8009bbe:	f107 030f 	add.w	r3, r7, #15
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d003      	beq.n	8009bd0 <hci_le_set_default_phy+0xd0>
  {
    return status;
 8009bc8:	f107 030f 	add.w	r3, r7, #15
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	e000      	b.n	8009bd2 <hci_le_set_default_phy+0xd2>
  }
  return BLE_STATUS_SUCCESS;
 8009bd0:	2300      	movs	r3, #0
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd90      	pop	{r4, r7, pc}

08009bdc <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b082      	sub	sp, #8
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	4a08      	ldr	r2, [pc, #32]	; (8009c0c <hci_init+0x30>)
 8009bec:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8009bee:	4a08      	ldr	r2, [pc, #32]	; (8009c10 <hci_init+0x34>)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8009bf4:	4806      	ldr	r0, [pc, #24]	; (8009c10 <hci_init+0x34>)
 8009bf6:	f000 f96f 	bl	8009ed8 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f000 f8d0 	bl	8009da4 <TlInit>

  return;
 8009c04:	bf00      	nop
}
 8009c06:	3708      	adds	r7, #8
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	2000042c 	.word	0x2000042c
 8009c10:	20000404 	.word	0x20000404

08009c14 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009c1a:	4820      	ldr	r0, [pc, #128]	; (8009c9c <hci_user_evt_proc+0x88>)
 8009c1c:	f000 fc34 	bl	800a488 <LST_is_empty>
 8009c20:	4603      	mov	r3, r0
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d128      	bne.n	8009c78 <hci_user_evt_proc+0x64>
 8009c26:	4b1e      	ldr	r3, [pc, #120]	; (8009ca0 <hci_user_evt_proc+0x8c>)
 8009c28:	781b      	ldrb	r3, [r3, #0]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d024      	beq.n	8009c78 <hci_user_evt_proc+0x64>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009c2e:	f107 030c 	add.w	r3, r7, #12
 8009c32:	4619      	mov	r1, r3
 8009c34:	4819      	ldr	r0, [pc, #100]	; (8009c9c <hci_user_evt_proc+0x88>)
 8009c36:	f000 fcae 	bl	800a596 <LST_remove_head>

    UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009c3a:	4b19      	ldr	r3, [pc, #100]	; (8009ca0 <hci_user_evt_proc+0x8c>)
 8009c3c:	2201      	movs	r2, #1
 8009c3e:	701a      	strb	r2, [r3, #0]

    if (hciContext.UserEvtRx != NULL)
 8009c40:	4b18      	ldr	r3, [pc, #96]	; (8009ca4 <hci_user_evt_proc+0x90>)
 8009c42:	69db      	ldr	r3, [r3, #28]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d009      	beq.n	8009c5c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	60bb      	str	r3, [r7, #8]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009c4c:	4b15      	ldr	r3, [pc, #84]	; (8009ca4 <hci_user_evt_proc+0x90>)
 8009c4e:	69db      	ldr	r3, [r3, #28]
 8009c50:	1d3a      	adds	r2, r7, #4
 8009c52:	4610      	mov	r0, r2
 8009c54:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8009c56:	793a      	ldrb	r2, [r7, #4]
 8009c58:	4b11      	ldr	r3, [pc, #68]	; (8009ca0 <hci_user_evt_proc+0x8c>)
 8009c5a:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8009c5c:	4b10      	ldr	r3, [pc, #64]	; (8009ca0 <hci_user_evt_proc+0x8c>)
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d004      	beq.n	8009c6e <hci_user_evt_proc+0x5a>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	4618      	mov	r0, r3
 8009c68:	f000 ff0c 	bl	800aa84 <TL_MM_EvtDone>
 8009c6c:	e004      	b.n	8009c78 <hci_user_evt_proc+0x64>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	4619      	mov	r1, r3
 8009c72:	480a      	ldr	r0, [pc, #40]	; (8009c9c <hci_user_evt_proc+0x88>)
 8009c74:	f000 fc28 	bl	800a4c8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009c78:	4808      	ldr	r0, [pc, #32]	; (8009c9c <hci_user_evt_proc+0x88>)
 8009c7a:	f000 fc05 	bl	800a488 <LST_is_empty>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d107      	bne.n	8009c94 <hci_user_evt_proc+0x80>
 8009c84:	4b06      	ldr	r3, [pc, #24]	; (8009ca0 <hci_user_evt_proc+0x8c>)
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d003      	beq.n	8009c94 <hci_user_evt_proc+0x80>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8009c8c:	4803      	ldr	r0, [pc, #12]	; (8009c9c <hci_user_evt_proc+0x88>)
 8009c8e:	f001 fa8e 	bl	800b1ae <hci_notify_asynch_evt>
  }


  return;
 8009c92:	bf00      	nop
 8009c94:	bf00      	nop
}
 8009c96:	3710      	adds	r7, #16
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}
 8009c9c:	200000cc 	.word	0x200000cc
 8009ca0:	200000d8 	.word	0x200000d8
 8009ca4:	20000404 	.word	0x20000404

08009ca8 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b088      	sub	sp, #32
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8009cb4:	2000      	movs	r0, #0
 8009cb6:	f000 f8cb 	bl	8009e50 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	885b      	ldrh	r3, [r3, #2]
 8009cc2:	b21b      	sxth	r3, r3
 8009cc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009cc8:	b21a      	sxth	r2, r3
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	881b      	ldrh	r3, [r3, #0]
 8009cce:	029b      	lsls	r3, r3, #10
 8009cd0:	b21b      	sxth	r3, r3
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	b21b      	sxth	r3, r3
 8009cd6:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	68db      	ldr	r3, [r3, #12]
 8009cdc:	b2d9      	uxtb	r1, r3
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	689a      	ldr	r2, [r3, #8]
 8009ce2:	8bbb      	ldrh	r3, [r7, #28]
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f000 f88d 	bl	8009e04 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8009cea:	e04e      	b.n	8009d8a <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8009cec:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8009cf0:	f001 fa74 	bl	800b1dc <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009cf4:	e043      	b.n	8009d7e <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8009cf6:	f107 030c 	add.w	r3, r7, #12
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	4828      	ldr	r0, [pc, #160]	; (8009da0 <hci_send_req+0xf8>)
 8009cfe:	f000 fc4a 	bl	800a596 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	7a5b      	ldrb	r3, [r3, #9]
 8009d06:	2b0f      	cmp	r3, #15
 8009d08:	d114      	bne.n	8009d34 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	330b      	adds	r3, #11
 8009d0e:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	885b      	ldrh	r3, [r3, #2]
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	8bba      	ldrh	r2, [r7, #28]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d104      	bne.n	8009d26 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	691b      	ldr	r3, [r3, #16]
 8009d20:	693a      	ldr	r2, [r7, #16]
 8009d22:	7812      	ldrb	r2, [r2, #0]
 8009d24:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	785b      	ldrb	r3, [r3, #1]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d027      	beq.n	8009d7e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009d2e:	2301      	movs	r3, #1
 8009d30:	77fb      	strb	r3, [r7, #31]
 8009d32:	e024      	b.n	8009d7e <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	330b      	adds	r3, #11
 8009d38:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8009d3a:	69bb      	ldr	r3, [r7, #24]
 8009d3c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	8bba      	ldrh	r2, [r7, #28]
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d114      	bne.n	8009d72 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	7a9b      	ldrb	r3, [r3, #10]
 8009d4c:	3b03      	subs	r3, #3
 8009d4e:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	695a      	ldr	r2, [r3, #20]
 8009d54:	7dfb      	ldrb	r3, [r7, #23]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	bfa8      	it	ge
 8009d5a:	461a      	movge	r2, r3
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6918      	ldr	r0, [r3, #16]
 8009d64:	69bb      	ldr	r3, [r7, #24]
 8009d66:	1cd9      	adds	r1, r3, #3
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	695b      	ldr	r3, [r3, #20]
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	f001 fd2d 	bl	800b7cc <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8009d72:	69bb      	ldr	r3, [r7, #24]
 8009d74:	781b      	ldrb	r3, [r3, #0]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d001      	beq.n	8009d7e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009d7e:	4808      	ldr	r0, [pc, #32]	; (8009da0 <hci_send_req+0xf8>)
 8009d80:	f000 fb82 	bl	800a488 <LST_is_empty>
 8009d84:	4603      	mov	r3, r0
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d0b5      	beq.n	8009cf6 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8009d8a:	7ffb      	ldrb	r3, [r7, #31]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d0ad      	beq.n	8009cec <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8009d90:	2001      	movs	r0, #1
 8009d92:	f000 f85d 	bl	8009e50 <NotifyCmdStatus>

  return 0;
 8009d96:	2300      	movs	r3, #0
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3720      	adds	r7, #32
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}
 8009da0:	20000424 	.word	0x20000424

08009da4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b086      	sub	sp, #24
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8009dac:	480f      	ldr	r0, [pc, #60]	; (8009dec <TlInit+0x48>)
 8009dae:	f000 fb5b 	bl	800a468 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8009db2:	4a0f      	ldr	r2, [pc, #60]	; (8009df0 <TlInit+0x4c>)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8009db8:	480e      	ldr	r0, [pc, #56]	; (8009df4 <TlInit+0x50>)
 8009dba:	f000 fb55 	bl	800a468 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009dbe:	4b0e      	ldr	r3, [pc, #56]	; (8009df8 <TlInit+0x54>)
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8009dc4:	4b0d      	ldr	r3, [pc, #52]	; (8009dfc <TlInit+0x58>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d00a      	beq.n	8009de2 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8009dd0:	4b0b      	ldr	r3, [pc, #44]	; (8009e00 <TlInit+0x5c>)
 8009dd2:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8009dd4:	4b09      	ldr	r3, [pc, #36]	; (8009dfc <TlInit+0x58>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f107 0208 	add.w	r2, r7, #8
 8009ddc:	4610      	mov	r0, r2
 8009dde:	4798      	blx	r3
  }

  return;
 8009de0:	bf00      	nop
 8009de2:	bf00      	nop
}
 8009de4:	3718      	adds	r7, #24
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}
 8009dea:	bf00      	nop
 8009dec:	20000424 	.word	0x20000424
 8009df0:	200000d4 	.word	0x200000d4
 8009df4:	200000cc 	.word	0x200000cc
 8009df8:	200000d8 	.word	0x200000d8
 8009dfc:	20000404 	.word	0x20000404
 8009e00:	08009e91 	.word	0x08009e91

08009e04 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b082      	sub	sp, #8
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	603a      	str	r2, [r7, #0]
 8009e0e:	80fb      	strh	r3, [r7, #6]
 8009e10:	460b      	mov	r3, r1
 8009e12:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8009e14:	4b0c      	ldr	r3, [pc, #48]	; (8009e48 <SendCmd+0x44>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	88fa      	ldrh	r2, [r7, #6]
 8009e1a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8009e1e:	4b0a      	ldr	r3, [pc, #40]	; (8009e48 <SendCmd+0x44>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	797a      	ldrb	r2, [r7, #5]
 8009e24:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8009e26:	4b08      	ldr	r3, [pc, #32]	; (8009e48 <SendCmd+0x44>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	330c      	adds	r3, #12
 8009e2c:	797a      	ldrb	r2, [r7, #5]
 8009e2e:	6839      	ldr	r1, [r7, #0]
 8009e30:	4618      	mov	r0, r3
 8009e32:	f001 fccb 	bl	800b7cc <memcpy>

  hciContext.io.Send(0,0);
 8009e36:	4b05      	ldr	r3, [pc, #20]	; (8009e4c <SendCmd+0x48>)
 8009e38:	691b      	ldr	r3, [r3, #16]
 8009e3a:	2100      	movs	r1, #0
 8009e3c:	2000      	movs	r0, #0
 8009e3e:	4798      	blx	r3

  return;
 8009e40:	bf00      	nop
}
 8009e42:	3708      	adds	r7, #8
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	200000d4 	.word	0x200000d4
 8009e4c:	20000404 	.word	0x20000404

08009e50 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	4603      	mov	r3, r0
 8009e58:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8009e5a:	79fb      	ldrb	r3, [r7, #7]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d108      	bne.n	8009e72 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8009e60:	4b0a      	ldr	r3, [pc, #40]	; (8009e8c <NotifyCmdStatus+0x3c>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d00d      	beq.n	8009e84 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8009e68:	4b08      	ldr	r3, [pc, #32]	; (8009e8c <NotifyCmdStatus+0x3c>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2000      	movs	r0, #0
 8009e6e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8009e70:	e008      	b.n	8009e84 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8009e72:	4b06      	ldr	r3, [pc, #24]	; (8009e8c <NotifyCmdStatus+0x3c>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d004      	beq.n	8009e84 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8009e7a:	4b04      	ldr	r3, [pc, #16]	; (8009e8c <NotifyCmdStatus+0x3c>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	2001      	movs	r0, #1
 8009e80:	4798      	blx	r3
  return;
 8009e82:	bf00      	nop
 8009e84:	bf00      	nop
}
 8009e86:	3708      	adds	r7, #8
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}
 8009e8c:	2000042c 	.word	0x2000042c

08009e90 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b082      	sub	sp, #8
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	7a5b      	ldrb	r3, [r3, #9]
 8009e9c:	2b0f      	cmp	r3, #15
 8009e9e:	d003      	beq.n	8009ea8 <TlEvtReceived+0x18>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	7a5b      	ldrb	r3, [r3, #9]
 8009ea4:	2b0e      	cmp	r3, #14
 8009ea6:	d107      	bne.n	8009eb8 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8009ea8:	6879      	ldr	r1, [r7, #4]
 8009eaa:	4809      	ldr	r0, [pc, #36]	; (8009ed0 <TlEvtReceived+0x40>)
 8009eac:	f000 fb30 	bl	800a510 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8009eb0:	2000      	movs	r0, #0
 8009eb2:	f001 f988 	bl	800b1c6 <hci_cmd_resp_release>
 8009eb6:	e006      	b.n	8009ec6 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8009eb8:	6879      	ldr	r1, [r7, #4]
 8009eba:	4806      	ldr	r0, [pc, #24]	; (8009ed4 <TlEvtReceived+0x44>)
 8009ebc:	f000 fb28 	bl	800a510 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009ec0:	4804      	ldr	r0, [pc, #16]	; (8009ed4 <TlEvtReceived+0x44>)
 8009ec2:	f001 f974 	bl	800b1ae <hci_notify_asynch_evt>
  }

  return;
 8009ec6:	bf00      	nop
}
 8009ec8:	3708      	adds	r7, #8
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	20000424 	.word	0x20000424
 8009ed4:	200000cc 	.word	0x200000cc

08009ed8 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	4a05      	ldr	r2, [pc, #20]	; (8009ef8 <hci_register_io_bus+0x20>)
 8009ee4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	4a04      	ldr	r2, [pc, #16]	; (8009efc <hci_register_io_bus+0x24>)
 8009eea:	611a      	str	r2, [r3, #16]

  return;
 8009eec:	bf00      	nop
}
 8009eee:	370c      	adds	r7, #12
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr
 8009ef8:	0800a85d 	.word	0x0800a85d
 8009efc:	0800a8c5 	.word	0x0800a8c5

08009f00 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	60b9      	str	r1, [r7, #8]
 8009f0a:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	68b9      	ldr	r1, [r7, #8]
 8009f10:	68f8      	ldr	r0, [r7, #12]
 8009f12:	f001 fc5b 	bl	800b7cc <memcpy>
 8009f16:	4603      	mov	r3, r0
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3710      	adds	r7, #16
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	68b9      	ldr	r1, [r7, #8]
 8009f30:	68f8      	ldr	r0, [r7, #12]
 8009f32:	f001 fc56 	bl	800b7e2 <memset>
 8009f36:	4603      	mov	r3, r0
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3710      	adds	r7, #16
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8009f40:	b480      	push	{r7}
 8009f42:	b085      	sub	sp, #20
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	4603      	mov	r3, r0
 8009f48:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8009f4a:	4b0f      	ldr	r3, [pc, #60]	; (8009f88 <OTP_Read+0x48>)
 8009f4c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009f4e:	e002      	b.n	8009f56 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	3b08      	subs	r3, #8
 8009f54:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	3307      	adds	r3, #7
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	79fa      	ldrb	r2, [r7, #7]
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d003      	beq.n	8009f6a <OTP_Read+0x2a>
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	4a09      	ldr	r2, [pc, #36]	; (8009f8c <OTP_Read+0x4c>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d1f2      	bne.n	8009f50 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	3307      	adds	r3, #7
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	79fa      	ldrb	r2, [r7, #7]
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d001      	beq.n	8009f7a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8009f76:	2300      	movs	r3, #0
 8009f78:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3714      	adds	r7, #20
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr
 8009f88:	1fff73f8 	.word	0x1fff73f8
 8009f8c:	1fff7000 	.word	0x1fff7000

08009f90 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b08a      	sub	sp, #40	; 0x28
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8009fa4:	6a3b      	ldr	r3, [r7, #32]
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	2bff      	cmp	r3, #255	; 0xff
 8009faa:	d000      	beq.n	8009fae <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 8009fac:	e04a      	b.n	800a044 <PeerToPeer_Event_Handler+0xb4>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 8009fae:	6a3b      	ldr	r3, [r7, #32]
 8009fb0:	3302      	adds	r3, #2
 8009fb2:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 8009fb4:	69fb      	ldr	r3, [r7, #28]
 8009fb6:	881b      	ldrh	r3, [r3, #0]
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	461a      	mov	r2, r3
 8009fbc:	f640 4301 	movw	r3, #3073	; 0xc01
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d000      	beq.n	8009fc6 <PeerToPeer_Event_Handler+0x36>
          break;
 8009fc4:	e03d      	b.n	800a042 <PeerToPeer_Event_Handler+0xb2>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 8009fc6:	69fb      	ldr	r3, [r7, #28]
 8009fc8:	3302      	adds	r3, #2
 8009fca:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8009fcc:	69bb      	ldr	r3, [r7, #24]
 8009fce:	885b      	ldrh	r3, [r3, #2]
 8009fd0:	b29b      	uxth	r3, r3
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	4b1e      	ldr	r3, [pc, #120]	; (800a050 <PeerToPeer_Event_Handler+0xc0>)
 8009fd6:	889b      	ldrh	r3, [r3, #4]
 8009fd8:	3302      	adds	r3, #2
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d118      	bne.n	800a010 <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8009fe4:	69bb      	ldr	r3, [r7, #24]
 8009fe6:	7a1b      	ldrb	r3, [r3, #8]
 8009fe8:	f003 0301 	and.w	r3, r3, #1
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d007      	beq.n	800a000 <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8009ff4:	f107 0308 	add.w	r3, r7, #8
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f001 f931 	bl	800b260 <P2PS_STM_App_Notification>
        break;
 8009ffe:	e01f      	b.n	800a040 <PeerToPeer_Event_Handler+0xb0>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800a000:	2301      	movs	r3, #1
 800a002:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800a004:	f107 0308 	add.w	r3, r7, #8
 800a008:	4618      	mov	r0, r3
 800a00a:	f001 f929 	bl	800b260 <P2PS_STM_App_Notification>
        break;
 800a00e:	e017      	b.n	800a040 <PeerToPeer_Event_Handler+0xb0>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 800a010:	69bb      	ldr	r3, [r7, #24]
 800a012:	885b      	ldrh	r3, [r3, #2]
 800a014:	b29b      	uxth	r3, r3
 800a016:	461a      	mov	r2, r3
 800a018:	4b0d      	ldr	r3, [pc, #52]	; (800a050 <PeerToPeer_Event_Handler+0xc0>)
 800a01a:	885b      	ldrh	r3, [r3, #2]
 800a01c:	3301      	adds	r3, #1
 800a01e:	429a      	cmp	r2, r3
 800a020:	d10e      	bne.n	800a040 <PeerToPeer_Event_Handler+0xb0>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800a022:	2303      	movs	r3, #3
 800a024:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800a026:	69bb      	ldr	r3, [r7, #24]
 800a028:	88db      	ldrh	r3, [r3, #6]
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	b2db      	uxtb	r3, r3
 800a02e:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800a030:	69bb      	ldr	r3, [r7, #24]
 800a032:	3308      	adds	r3, #8
 800a034:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 800a036:	f107 0308 	add.w	r3, r7, #8
 800a03a:	4618      	mov	r0, r3
 800a03c:	f001 f910 	bl	800b260 <P2PS_STM_App_Notification>
        break;
 800a040:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 800a042:	bf00      	nop
  }

  return(return_value);
 800a044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800a048:	4618      	mov	r0, r3
 800a04a:	3728      	adds	r7, #40	; 0x28
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}
 800a050:	200000dc 	.word	0x200000dc

0800a054 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b08a      	sub	sp, #40	; 0x28
 800a058:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800a05a:	484a      	ldr	r0, [pc, #296]	; (800a184 <P2PS_STM_Init+0x130>)
 800a05c:	f000 fb56 	bl	800a70c <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800a060:	238f      	movs	r3, #143	; 0x8f
 800a062:	703b      	strb	r3, [r7, #0]
 800a064:	23e5      	movs	r3, #229	; 0xe5
 800a066:	707b      	strb	r3, [r7, #1]
 800a068:	23b3      	movs	r3, #179	; 0xb3
 800a06a:	70bb      	strb	r3, [r7, #2]
 800a06c:	23d5      	movs	r3, #213	; 0xd5
 800a06e:	70fb      	strb	r3, [r7, #3]
 800a070:	232e      	movs	r3, #46	; 0x2e
 800a072:	713b      	strb	r3, [r7, #4]
 800a074:	237f      	movs	r3, #127	; 0x7f
 800a076:	717b      	strb	r3, [r7, #5]
 800a078:	234a      	movs	r3, #74	; 0x4a
 800a07a:	71bb      	strb	r3, [r7, #6]
 800a07c:	2398      	movs	r3, #152	; 0x98
 800a07e:	71fb      	strb	r3, [r7, #7]
 800a080:	232a      	movs	r3, #42	; 0x2a
 800a082:	723b      	strb	r3, [r7, #8]
 800a084:	2348      	movs	r3, #72	; 0x48
 800a086:	727b      	strb	r3, [r7, #9]
 800a088:	237a      	movs	r3, #122	; 0x7a
 800a08a:	72bb      	strb	r3, [r7, #10]
 800a08c:	23cc      	movs	r3, #204	; 0xcc
 800a08e:	72fb      	strb	r3, [r7, #11]
 800a090:	2340      	movs	r3, #64	; 0x40
 800a092:	733b      	strb	r3, [r7, #12]
 800a094:	23fe      	movs	r3, #254	; 0xfe
 800a096:	737b      	strb	r3, [r7, #13]
 800a098:	2300      	movs	r3, #0
 800a09a:	73bb      	strb	r3, [r7, #14]
 800a09c:	2300      	movs	r3, #0
 800a09e:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800a0a0:	4639      	mov	r1, r7
 800a0a2:	4b39      	ldr	r3, [pc, #228]	; (800a188 <P2PS_STM_Init+0x134>)
 800a0a4:	9300      	str	r3, [sp, #0]
 800a0a6:	2308      	movs	r3, #8
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	2002      	movs	r0, #2
 800a0ac:	f7ff f8fc 	bl	80092a8 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800a0b0:	2319      	movs	r3, #25
 800a0b2:	703b      	strb	r3, [r7, #0]
 800a0b4:	23ed      	movs	r3, #237	; 0xed
 800a0b6:	707b      	strb	r3, [r7, #1]
 800a0b8:	2382      	movs	r3, #130	; 0x82
 800a0ba:	70bb      	strb	r3, [r7, #2]
 800a0bc:	23ae      	movs	r3, #174	; 0xae
 800a0be:	70fb      	strb	r3, [r7, #3]
 800a0c0:	23ed      	movs	r3, #237	; 0xed
 800a0c2:	713b      	strb	r3, [r7, #4]
 800a0c4:	2321      	movs	r3, #33	; 0x21
 800a0c6:	717b      	strb	r3, [r7, #5]
 800a0c8:	234c      	movs	r3, #76	; 0x4c
 800a0ca:	71bb      	strb	r3, [r7, #6]
 800a0cc:	239d      	movs	r3, #157	; 0x9d
 800a0ce:	71fb      	strb	r3, [r7, #7]
 800a0d0:	2341      	movs	r3, #65	; 0x41
 800a0d2:	723b      	strb	r3, [r7, #8]
 800a0d4:	2345      	movs	r3, #69	; 0x45
 800a0d6:	727b      	strb	r3, [r7, #9]
 800a0d8:	2322      	movs	r3, #34	; 0x22
 800a0da:	72bb      	strb	r3, [r7, #10]
 800a0dc:	238e      	movs	r3, #142	; 0x8e
 800a0de:	72fb      	strb	r3, [r7, #11]
 800a0e0:	2341      	movs	r3, #65	; 0x41
 800a0e2:	733b      	strb	r3, [r7, #12]
 800a0e4:	23fe      	movs	r3, #254	; 0xfe
 800a0e6:	737b      	strb	r3, [r7, #13]
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	73bb      	strb	r3, [r7, #14]
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800a0f0:	4b25      	ldr	r3, [pc, #148]	; (800a188 <P2PS_STM_Init+0x134>)
 800a0f2:	8818      	ldrh	r0, [r3, #0]
 800a0f4:	463a      	mov	r2, r7
 800a0f6:	4b25      	ldr	r3, [pc, #148]	; (800a18c <P2PS_STM_Init+0x138>)
 800a0f8:	9305      	str	r3, [sp, #20]
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	9304      	str	r3, [sp, #16]
 800a0fe:	230a      	movs	r3, #10
 800a100:	9303      	str	r3, [sp, #12]
 800a102:	2301      	movs	r3, #1
 800a104:	9302      	str	r3, [sp, #8]
 800a106:	2300      	movs	r3, #0
 800a108:	9301      	str	r3, [sp, #4]
 800a10a:	2306      	movs	r3, #6
 800a10c:	9300      	str	r3, [sp, #0]
 800a10e:	23cd      	movs	r3, #205	; 0xcd
 800a110:	2102      	movs	r1, #2
 800a112:	f7ff f978 	bl	8009406 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800a116:	2319      	movs	r3, #25
 800a118:	703b      	strb	r3, [r7, #0]
 800a11a:	23ed      	movs	r3, #237	; 0xed
 800a11c:	707b      	strb	r3, [r7, #1]
 800a11e:	2382      	movs	r3, #130	; 0x82
 800a120:	70bb      	strb	r3, [r7, #2]
 800a122:	23ae      	movs	r3, #174	; 0xae
 800a124:	70fb      	strb	r3, [r7, #3]
 800a126:	23ed      	movs	r3, #237	; 0xed
 800a128:	713b      	strb	r3, [r7, #4]
 800a12a:	2321      	movs	r3, #33	; 0x21
 800a12c:	717b      	strb	r3, [r7, #5]
 800a12e:	234c      	movs	r3, #76	; 0x4c
 800a130:	71bb      	strb	r3, [r7, #6]
 800a132:	239d      	movs	r3, #157	; 0x9d
 800a134:	71fb      	strb	r3, [r7, #7]
 800a136:	2341      	movs	r3, #65	; 0x41
 800a138:	723b      	strb	r3, [r7, #8]
 800a13a:	2345      	movs	r3, #69	; 0x45
 800a13c:	727b      	strb	r3, [r7, #9]
 800a13e:	2322      	movs	r3, #34	; 0x22
 800a140:	72bb      	strb	r3, [r7, #10]
 800a142:	238e      	movs	r3, #142	; 0x8e
 800a144:	72fb      	strb	r3, [r7, #11]
 800a146:	2342      	movs	r3, #66	; 0x42
 800a148:	733b      	strb	r3, [r7, #12]
 800a14a:	23fe      	movs	r3, #254	; 0xfe
 800a14c:	737b      	strb	r3, [r7, #13]
 800a14e:	2300      	movs	r3, #0
 800a150:	73bb      	strb	r3, [r7, #14]
 800a152:	2300      	movs	r3, #0
 800a154:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800a156:	4b0c      	ldr	r3, [pc, #48]	; (800a188 <P2PS_STM_Init+0x134>)
 800a158:	8818      	ldrh	r0, [r3, #0]
 800a15a:	463a      	mov	r2, r7
 800a15c:	4b0c      	ldr	r3, [pc, #48]	; (800a190 <P2PS_STM_Init+0x13c>)
 800a15e:	9305      	str	r3, [sp, #20]
 800a160:	2301      	movs	r3, #1
 800a162:	9304      	str	r3, [sp, #16]
 800a164:	230a      	movs	r3, #10
 800a166:	9303      	str	r3, [sp, #12]
 800a168:	2301      	movs	r3, #1
 800a16a:	9302      	str	r3, [sp, #8]
 800a16c:	2300      	movs	r3, #0
 800a16e:	9301      	str	r3, [sp, #4]
 800a170:	2310      	movs	r3, #16
 800a172:	9300      	str	r3, [sp, #0]
 800a174:	23cd      	movs	r3, #205	; 0xcd
 800a176:	2102      	movs	r1, #2
 800a178:	f7ff f945 	bl	8009406 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 800a17c:	bf00      	nop
}
 800a17e:	3710      	adds	r7, #16
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	08009f91 	.word	0x08009f91
 800a188:	200000dc 	.word	0x200000dc
 800a18c:	200000de 	.word	0x200000de
 800a190:	200000e0 	.word	0x200000e0

0800a194 <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b086      	sub	sp, #24
 800a198:	af02      	add	r7, sp, #8
 800a19a:	4603      	mov	r3, r0
 800a19c:	6039      	str	r1, [r7, #0]
 800a19e:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800a1a0:	2342      	movs	r3, #66	; 0x42
 800a1a2:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800a1a4:	88fb      	ldrh	r3, [r7, #6]
 800a1a6:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d000      	beq.n	800a1b0 <P2PS_STM_App_Update_Char+0x1c>
                             (uint8_t *)  pPayload);
    
      break;

    default:
      break;
 800a1ae:	e00c      	b.n	800a1ca <P2PS_STM_App_Update_Char+0x36>
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 800a1b0:	4b08      	ldr	r3, [pc, #32]	; (800a1d4 <P2PS_STM_App_Update_Char+0x40>)
 800a1b2:	8818      	ldrh	r0, [r3, #0]
 800a1b4:	4b07      	ldr	r3, [pc, #28]	; (800a1d4 <P2PS_STM_App_Update_Char+0x40>)
 800a1b6:	8899      	ldrh	r1, [r3, #4]
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	9300      	str	r3, [sp, #0]
 800a1bc:	23cd      	movs	r3, #205	; 0xcd
 800a1be:	2200      	movs	r2, #0
 800a1c0:	f7ff fa0b 	bl	80095da <aci_gatt_update_char_value>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	73fb      	strb	r3, [r7, #15]
      break;
 800a1c8:	bf00      	nop
  }

  return result;
 800a1ca:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3710      	adds	r7, #16
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}
 800a1d4:	200000dc 	.word	0x200000dc

0800a1d8 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b088      	sub	sp, #32
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a1e0:	f107 030c 	add.w	r3, r7, #12
 800a1e4:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800a1ec:	69fb      	ldr	r3, [r7, #28]
 800a1ee:	2121      	movs	r1, #33	; 0x21
 800a1f0:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800a1f4:	f000 f86e 	bl	800a2d4 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a1f8:	69fb      	ldr	r3, [r7, #28]
 800a1fa:	330b      	adds	r3, #11
 800a1fc:	78db      	ldrb	r3, [r3, #3]
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3720      	adds	r7, #32
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
	...

0800a208 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	4a08      	ldr	r2, [pc, #32]	; (800a238 <shci_init+0x30>)
 800a218:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800a21a:	4a08      	ldr	r2, [pc, #32]	; (800a23c <shci_init+0x34>)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800a220:	4806      	ldr	r0, [pc, #24]	; (800a23c <shci_init+0x34>)
 800a222:	f000 f90d 	bl	800a440 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4618      	mov	r0, r3
 800a22c:	f000 f890 	bl	800a350 <TlInit>

  return;
 800a230:	bf00      	nop
}
 800a232:	3708      	adds	r7, #8
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}
 800a238:	20000450 	.word	0x20000450
 800a23c:	20000430 	.word	0x20000430

0800a240 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b084      	sub	sp, #16
 800a244:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a246:	4820      	ldr	r0, [pc, #128]	; (800a2c8 <shci_user_evt_proc+0x88>)
 800a248:	f000 f91e 	bl	800a488 <LST_is_empty>
 800a24c:	4603      	mov	r3, r0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d128      	bne.n	800a2a4 <shci_user_evt_proc+0x64>
 800a252:	4b1e      	ldr	r3, [pc, #120]	; (800a2cc <shci_user_evt_proc+0x8c>)
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d024      	beq.n	800a2a4 <shci_user_evt_proc+0x64>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a25a:	f107 030c 	add.w	r3, r7, #12
 800a25e:	4619      	mov	r1, r3
 800a260:	4819      	ldr	r0, [pc, #100]	; (800a2c8 <shci_user_evt_proc+0x88>)
 800a262:	f000 f998 	bl	800a596 <LST_remove_head>

    SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a266:	4b19      	ldr	r3, [pc, #100]	; (800a2cc <shci_user_evt_proc+0x8c>)
 800a268:	2201      	movs	r2, #1
 800a26a:	701a      	strb	r2, [r3, #0]

    if (shciContext.UserEvtRx != NULL)
 800a26c:	4b18      	ldr	r3, [pc, #96]	; (800a2d0 <shci_user_evt_proc+0x90>)
 800a26e:	69db      	ldr	r3, [r3, #28]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d009      	beq.n	800a288 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	60bb      	str	r3, [r7, #8]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a278:	4b15      	ldr	r3, [pc, #84]	; (800a2d0 <shci_user_evt_proc+0x90>)
 800a27a:	69db      	ldr	r3, [r3, #28]
 800a27c:	1d3a      	adds	r2, r7, #4
 800a27e:	4610      	mov	r0, r2
 800a280:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800a282:	793a      	ldrb	r2, [r7, #4]
 800a284:	4b11      	ldr	r3, [pc, #68]	; (800a2cc <shci_user_evt_proc+0x8c>)
 800a286:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800a288:	4b10      	ldr	r3, [pc, #64]	; (800a2cc <shci_user_evt_proc+0x8c>)
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d004      	beq.n	800a29a <shci_user_evt_proc+0x5a>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	4618      	mov	r0, r3
 800a294:	f000 fbf6 	bl	800aa84 <TL_MM_EvtDone>
 800a298:	e004      	b.n	800a2a4 <shci_user_evt_proc+0x64>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	4619      	mov	r1, r3
 800a29e:	480a      	ldr	r0, [pc, #40]	; (800a2c8 <shci_user_evt_proc+0x88>)
 800a2a0:	f000 f912 	bl	800a4c8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a2a4:	4808      	ldr	r0, [pc, #32]	; (800a2c8 <shci_user_evt_proc+0x88>)
 800a2a6:	f000 f8ef 	bl	800a488 <LST_is_empty>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d107      	bne.n	800a2c0 <shci_user_evt_proc+0x80>
 800a2b0:	4b06      	ldr	r3, [pc, #24]	; (800a2cc <shci_user_evt_proc+0x8c>)
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d003      	beq.n	800a2c0 <shci_user_evt_proc+0x80>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800a2b8:	4803      	ldr	r0, [pc, #12]	; (800a2c8 <shci_user_evt_proc+0x88>)
 800a2ba:	f7f6 fc53 	bl	8000b64 <shci_notify_asynch_evt>
  }


  return;
 800a2be:	bf00      	nop
 800a2c0:	bf00      	nop
}
 800a2c2:	3710      	adds	r7, #16
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}
 800a2c8:	20000108 	.word	0x20000108
 800a2cc:	20000118 	.word	0x20000118
 800a2d0:	20000430 	.word	0x20000430

0800a2d4 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b084      	sub	sp, #16
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	60ba      	str	r2, [r7, #8]
 800a2dc:	607b      	str	r3, [r7, #4]
 800a2de:	4603      	mov	r3, r0
 800a2e0:	81fb      	strh	r3, [r7, #14]
 800a2e2:	460b      	mov	r3, r1
 800a2e4:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800a2e6:	2000      	movs	r0, #0
 800a2e8:	f000 f864 	bl	800a3b4 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800a2ec:	4b16      	ldr	r3, [pc, #88]	; (800a348 <shci_send+0x74>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	89fa      	ldrh	r2, [r7, #14]
 800a2f2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800a2f6:	4b14      	ldr	r3, [pc, #80]	; (800a348 <shci_send+0x74>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	7b7a      	ldrb	r2, [r7, #13]
 800a2fc:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800a2fe:	4b12      	ldr	r3, [pc, #72]	; (800a348 <shci_send+0x74>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	330c      	adds	r3, #12
 800a304:	7b7a      	ldrb	r2, [r7, #13]
 800a306:	68b9      	ldr	r1, [r7, #8]
 800a308:	4618      	mov	r0, r3
 800a30a:	f001 fa5f 	bl	800b7cc <memcpy>

  shciContext.io.Send(0,0);
 800a30e:	4b0f      	ldr	r3, [pc, #60]	; (800a34c <shci_send+0x78>)
 800a310:	691b      	ldr	r3, [r3, #16]
 800a312:	2100      	movs	r1, #0
 800a314:	2000      	movs	r0, #0
 800a316:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800a318:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800a31c:	f7f6 fc3a 	bl	8000b94 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f103 0008 	add.w	r0, r3, #8
 800a326:	4b08      	ldr	r3, [pc, #32]	; (800a348 <shci_send+0x74>)
 800a328:	6819      	ldr	r1, [r3, #0]
 800a32a:	4b07      	ldr	r3, [pc, #28]	; (800a348 <shci_send+0x74>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	789b      	ldrb	r3, [r3, #2]
 800a330:	3303      	adds	r3, #3
 800a332:	461a      	mov	r2, r3
 800a334:	f001 fa4a 	bl	800b7cc <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a338:	2001      	movs	r0, #1
 800a33a:	f000 f83b 	bl	800a3b4 <Cmd_SetStatus>

  return;
 800a33e:	bf00      	nop
}
 800a340:	3710      	adds	r7, #16
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop
 800a348:	20000114 	.word	0x20000114
 800a34c:	20000430 	.word	0x20000430

0800a350 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b086      	sub	sp, #24
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800a358:	4a10      	ldr	r2, [pc, #64]	; (800a39c <TlInit+0x4c>)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800a35e:	4810      	ldr	r0, [pc, #64]	; (800a3a0 <TlInit+0x50>)
 800a360:	f000 f882 	bl	800a468 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a364:	2001      	movs	r0, #1
 800a366:	f000 f825 	bl	800a3b4 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a36a:	4b0e      	ldr	r3, [pc, #56]	; (800a3a4 <TlInit+0x54>)
 800a36c:	2201      	movs	r2, #1
 800a36e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800a370:	4b0d      	ldr	r3, [pc, #52]	; (800a3a8 <TlInit+0x58>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d00c      	beq.n	800a392 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800a37c:	4b0b      	ldr	r3, [pc, #44]	; (800a3ac <TlInit+0x5c>)
 800a37e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800a380:	4b0b      	ldr	r3, [pc, #44]	; (800a3b0 <TlInit+0x60>)
 800a382:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800a384:	4b08      	ldr	r3, [pc, #32]	; (800a3a8 <TlInit+0x58>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f107 020c 	add.w	r2, r7, #12
 800a38c:	4610      	mov	r0, r2
 800a38e:	4798      	blx	r3
  }

  return;
 800a390:	bf00      	nop
 800a392:	bf00      	nop
}
 800a394:	3718      	adds	r7, #24
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
 800a39a:	bf00      	nop
 800a39c:	20000114 	.word	0x20000114
 800a3a0:	20000108 	.word	0x20000108
 800a3a4:	20000118 	.word	0x20000118
 800a3a8:	20000430 	.word	0x20000430
 800a3ac:	0800a405 	.word	0x0800a405
 800a3b0:	0800a41d 	.word	0x0800a41d

0800a3b4 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b082      	sub	sp, #8
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800a3be:	79fb      	ldrb	r3, [r7, #7]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d10b      	bne.n	800a3dc <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800a3c4:	4b0d      	ldr	r3, [pc, #52]	; (800a3fc <Cmd_SetStatus+0x48>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d003      	beq.n	800a3d4 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800a3cc:	4b0b      	ldr	r3, [pc, #44]	; (800a3fc <Cmd_SetStatus+0x48>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	2000      	movs	r0, #0
 800a3d2:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800a3d4:	4b0a      	ldr	r3, [pc, #40]	; (800a400 <Cmd_SetStatus+0x4c>)
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800a3da:	e00b      	b.n	800a3f4 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800a3dc:	4b08      	ldr	r3, [pc, #32]	; (800a400 <Cmd_SetStatus+0x4c>)
 800a3de:	2201      	movs	r2, #1
 800a3e0:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800a3e2:	4b06      	ldr	r3, [pc, #24]	; (800a3fc <Cmd_SetStatus+0x48>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d004      	beq.n	800a3f4 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800a3ea:	4b04      	ldr	r3, [pc, #16]	; (800a3fc <Cmd_SetStatus+0x48>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	2001      	movs	r0, #1
 800a3f0:	4798      	blx	r3
  return;
 800a3f2:	bf00      	nop
 800a3f4:	bf00      	nop
}
 800a3f6:	3708      	adds	r7, #8
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}
 800a3fc:	20000450 	.word	0x20000450
 800a400:	20000110 	.word	0x20000110

0800a404 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800a40c:	2000      	movs	r0, #0
 800a40e:	f7f6 fbb6 	bl	8000b7e <shci_cmd_resp_release>

  return;
 800a412:	bf00      	nop
}
 800a414:	3708      	adds	r7, #8
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}
	...

0800a41c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800a424:	6879      	ldr	r1, [r7, #4]
 800a426:	4805      	ldr	r0, [pc, #20]	; (800a43c <TlUserEvtReceived+0x20>)
 800a428:	f000 f872 	bl	800a510 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a42c:	4803      	ldr	r0, [pc, #12]	; (800a43c <TlUserEvtReceived+0x20>)
 800a42e:	f7f6 fb99 	bl	8000b64 <shci_notify_asynch_evt>

  return;
 800a432:	bf00      	nop
}
 800a434:	3708      	adds	r7, #8
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
 800a43a:	bf00      	nop
 800a43c:	20000108 	.word	0x20000108

0800a440 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800a440:	b480      	push	{r7}
 800a442:	b083      	sub	sp, #12
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	4a05      	ldr	r2, [pc, #20]	; (800a460 <shci_register_io_bus+0x20>)
 800a44c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	4a04      	ldr	r2, [pc, #16]	; (800a464 <shci_register_io_bus+0x24>)
 800a452:	611a      	str	r2, [r3, #16]

  return;
 800a454:	bf00      	nop
}
 800a456:	370c      	adds	r7, #12
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr
 800a460:	0800a939 	.word	0x0800a939
 800a464:	0800a98d 	.word	0x0800a98d

0800a468 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800a468:	b480      	push	{r7}
 800a46a:	b083      	sub	sp, #12
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	605a      	str	r2, [r3, #4]
}
 800a47c:	bf00      	nop
 800a47e:	370c      	adds	r7, #12
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr

0800a488 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800a488:	b480      	push	{r7}
 800a48a:	b087      	sub	sp, #28
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a490:	f3ef 8310 	mrs	r3, PRIMASK
 800a494:	60fb      	str	r3, [r7, #12]
  return(result);
 800a496:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a498:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a49a:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d102      	bne.n	800a4ac <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	75fb      	strb	r3, [r7, #23]
 800a4aa:	e001      	b.n	800a4b0 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	75fb      	strb	r3, [r7, #23]
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800a4ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	371c      	adds	r7, #28
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr

0800a4c8 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b087      	sub	sp, #28
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4d2:	f3ef 8310 	mrs	r3, PRIMASK
 800a4d6:	60fb      	str	r3, [r7, #12]
  return(result);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a4da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a4dc:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	687a      	ldr	r2, [r7, #4]
 800a4ea:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	683a      	ldr	r2, [r7, #0]
 800a4f0:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	683a      	ldr	r2, [r7, #0]
 800a4f8:	605a      	str	r2, [r3, #4]
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a504:	bf00      	nop
 800a506:	371c      	adds	r7, #28
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr

0800a510 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800a510:	b480      	push	{r7}
 800a512:	b087      	sub	sp, #28
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a51a:	f3ef 8310 	mrs	r3, PRIMASK
 800a51e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a520:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a522:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a524:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	687a      	ldr	r2, [r7, #4]
 800a52a:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	685a      	ldr	r2, [r3, #4]
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	683a      	ldr	r2, [r7, #0]
 800a538:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	685b      	ldr	r3, [r3, #4]
 800a53e:	683a      	ldr	r2, [r7, #0]
 800a540:	601a      	str	r2, [r3, #0]
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a54c:	bf00      	nop
 800a54e:	371c      	adds	r7, #28
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr

0800a558 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800a558:	b480      	push	{r7}
 800a55a:	b087      	sub	sp, #28
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a560:	f3ef 8310 	mrs	r3, PRIMASK
 800a564:	60fb      	str	r3, [r7, #12]
  return(result);
 800a566:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a568:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a56a:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	6812      	ldr	r2, [r2, #0]
 800a574:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	687a      	ldr	r2, [r7, #4]
 800a57c:	6852      	ldr	r2, [r2, #4]
 800a57e:	605a      	str	r2, [r3, #4]
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a58a:	bf00      	nop
 800a58c:	371c      	adds	r7, #28
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr

0800a596 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b086      	sub	sp, #24
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
 800a59e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5a0:	f3ef 8310 	mrs	r3, PRIMASK
 800a5a4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a5a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a5aa:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681a      	ldr	r2, [r3, #0]
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f7ff ffcd 	bl	800a558 <LST_remove_node>
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a5c8:	bf00      	nop
 800a5ca:	3718      	adds	r7, #24
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	af00      	add	r7, sp, #0
  return;
 800a5d4:	bf00      	nop
}
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr

0800a5de <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 800a5de:	b480      	push	{r7}
 800a5e0:	af00      	add	r7, sp, #0
  return;
 800a5e2:	bf00      	nop
}
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <DIS_Init>:
__weak void DIS_Init( void )
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	af00      	add	r7, sp, #0
  return;
 800a5f0:	bf00      	nop
}
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f8:	4770      	bx	lr

0800a5fa <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 800a5fa:	b480      	push	{r7}
 800a5fc:	af00      	add	r7, sp, #0
  return;
 800a5fe:	bf00      	nop
}
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr

0800a608 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 800a608:	b480      	push	{r7}
 800a60a:	af00      	add	r7, sp, #0
  return;
 800a60c:	bf00      	nop
}
 800a60e:	46bd      	mov	sp, r7
 800a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a614:	4770      	bx	lr

0800a616 <HRS_Init>:
__weak void HRS_Init( void )
{
 800a616:	b480      	push	{r7}
 800a618:	af00      	add	r7, sp, #0
  return;
 800a61a:	bf00      	nop
}
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr

0800a624 <HTS_Init>:
__weak void HTS_Init( void )
{
 800a624:	b480      	push	{r7}
 800a626:	af00      	add	r7, sp, #0
  return;
 800a628:	bf00      	nop
}
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr

0800a632 <IAS_Init>:
__weak void IAS_Init( void )
{
 800a632:	b480      	push	{r7}
 800a634:	af00      	add	r7, sp, #0
  return;
 800a636:	bf00      	nop
}
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr

0800a640 <LLS_Init>:
__weak void LLS_Init( void )
{
 800a640:	b480      	push	{r7}
 800a642:	af00      	add	r7, sp, #0
  return;
 800a644:	bf00      	nop
}
 800a646:	46bd      	mov	sp, r7
 800a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64c:	4770      	bx	lr

0800a64e <TPS_Init>:
__weak void TPS_Init( void )
{
 800a64e:	b480      	push	{r7}
 800a650:	af00      	add	r7, sp, #0
  return;
 800a652:	bf00      	nop
}
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr

0800a65c <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 800a65c:	b480      	push	{r7}
 800a65e:	af00      	add	r7, sp, #0
  return;
 800a660:	bf00      	nop
}
 800a662:	46bd      	mov	sp, r7
 800a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a668:	4770      	bx	lr

0800a66a <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 800a66a:	b480      	push	{r7}
 800a66c:	af00      	add	r7, sp, #0
  return;
 800a66e:	bf00      	nop
}
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr

0800a678 <MESH_Init>:
__weak void MESH_Init( void )
{
 800a678:	b480      	push	{r7}
 800a67a:	af00      	add	r7, sp, #0
  return;
 800a67c:	bf00      	nop
}
 800a67e:	46bd      	mov	sp, r7
 800a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a684:	4770      	bx	lr

0800a686 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 800a686:	b480      	push	{r7}
 800a688:	af00      	add	r7, sp, #0
  return;
 800a68a:	bf00      	nop
}
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 800a694:	b480      	push	{r7}
 800a696:	af00      	add	r7, sp, #0
  return;
 800a698:	bf00      	nop
}
 800a69a:	46bd      	mov	sp, r7
 800a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a0:	4770      	bx	lr
	...

0800a6a4 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800a6a8:	4b04      	ldr	r3, [pc, #16]	; (800a6bc <SVCCTL_Init+0x18>)
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800a6ae:	4b04      	ldr	r3, [pc, #16]	; (800a6c0 <SVCCTL_Init+0x1c>)
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800a6b4:	f000 f806 	bl	800a6c4 <SVCCTL_SvcInit>

  return;
 800a6b8:	bf00      	nop
}
 800a6ba:	bd80      	pop	{r7, pc}
 800a6bc:	200000e4 	.word	0x200000e4
 800a6c0:	20000104 	.word	0x20000104

0800a6c4 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	af00      	add	r7, sp, #0
  BLS_Init();
 800a6c8:	f7ff ff82 	bl	800a5d0 <BLS_Init>

  CRS_STM_Init();
 800a6cc:	f7ff ff87 	bl	800a5de <CRS_STM_Init>

  DIS_Init();
 800a6d0:	f7ff ff8c 	bl	800a5ec <DIS_Init>

  EDS_STM_Init();
 800a6d4:	f7ff ff91 	bl	800a5fa <EDS_STM_Init>

  HIDS_Init();
 800a6d8:	f7ff ff96 	bl	800a608 <HIDS_Init>

  HRS_Init();
 800a6dc:	f7ff ff9b 	bl	800a616 <HRS_Init>

  HTS_Init();
 800a6e0:	f7ff ffa0 	bl	800a624 <HTS_Init>

  IAS_Init();
 800a6e4:	f7ff ffa5 	bl	800a632 <IAS_Init>

  LLS_Init();
 800a6e8:	f7ff ffaa 	bl	800a640 <LLS_Init>

  TPS_Init();
 800a6ec:	f7ff ffaf 	bl	800a64e <TPS_Init>

  MOTENV_STM_Init();
 800a6f0:	f7ff ffb4 	bl	800a65c <MOTENV_STM_Init>

  P2PS_STM_Init();
 800a6f4:	f7ff fcae 	bl	800a054 <P2PS_STM_Init>

  OTAS_STM_Init();
 800a6f8:	f7ff ffb7 	bl	800a66a <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800a6fc:	f7ff ffc3 	bl	800a686 <BVOPUS_STM_Init>

  MESH_Init();
 800a700:	f7ff ffba 	bl	800a678 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800a704:	f7ff ffc6 	bl	800a694 <SVCCTL_InitCustomSvc>
  
  return;
 800a708:	bf00      	nop
}
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800a70c:	b480      	push	{r7}
 800a70e:	b083      	sub	sp, #12
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800a714:	4b09      	ldr	r3, [pc, #36]	; (800a73c <SVCCTL_RegisterSvcHandler+0x30>)
 800a716:	7f1b      	ldrb	r3, [r3, #28]
 800a718:	4619      	mov	r1, r3
 800a71a:	4a08      	ldr	r2, [pc, #32]	; (800a73c <SVCCTL_RegisterSvcHandler+0x30>)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800a722:	4b06      	ldr	r3, [pc, #24]	; (800a73c <SVCCTL_RegisterSvcHandler+0x30>)
 800a724:	7f1b      	ldrb	r3, [r3, #28]
 800a726:	3301      	adds	r3, #1
 800a728:	b2da      	uxtb	r2, r3
 800a72a:	4b04      	ldr	r3, [pc, #16]	; (800a73c <SVCCTL_RegisterSvcHandler+0x30>)
 800a72c:	771a      	strb	r2, [r3, #28]

  return;
 800a72e:	bf00      	nop
}
 800a730:	370c      	adds	r7, #12
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr
 800a73a:	bf00      	nop
 800a73c:	200000e4 	.word	0x200000e4

0800a740 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b086      	sub	sp, #24
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	3301      	adds	r3, #1
 800a74c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800a74e:	2300      	movs	r3, #0
 800a750:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	2bff      	cmp	r3, #255	; 0xff
 800a758:	d000      	beq.n	800a75c <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800a75a:	e025      	b.n	800a7a8 <SVCCTL_UserEvtRx+0x68>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	3302      	adds	r3, #2
 800a760:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	881b      	ldrh	r3, [r3, #0]
 800a766:	b29b      	uxth	r3, r3
 800a768:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a76c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a770:	d000      	beq.n	800a774 <SVCCTL_UserEvtRx+0x34>
          break;
 800a772:	e018      	b.n	800a7a6 <SVCCTL_UserEvtRx+0x66>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a774:	2300      	movs	r3, #0
 800a776:	757b      	strb	r3, [r7, #21]
 800a778:	e00d      	b.n	800a796 <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800a77a:	7d7b      	ldrb	r3, [r7, #21]
 800a77c:	4a18      	ldr	r2, [pc, #96]	; (800a7e0 <SVCCTL_UserEvtRx+0xa0>)
 800a77e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	4798      	blx	r3
 800a786:	4603      	mov	r3, r0
 800a788:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 800a78a:	7dfb      	ldrb	r3, [r7, #23]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d108      	bne.n	800a7a2 <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a790:	7d7b      	ldrb	r3, [r7, #21]
 800a792:	3301      	adds	r3, #1
 800a794:	757b      	strb	r3, [r7, #21]
 800a796:	4b12      	ldr	r3, [pc, #72]	; (800a7e0 <SVCCTL_UserEvtRx+0xa0>)
 800a798:	7f1b      	ldrb	r3, [r3, #28]
 800a79a:	7d7a      	ldrb	r2, [r7, #21]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d3ec      	bcc.n	800a77a <SVCCTL_UserEvtRx+0x3a>
          break;
 800a7a0:	e000      	b.n	800a7a4 <SVCCTL_UserEvtRx+0x64>
              break;
 800a7a2:	bf00      	nop
          break;
 800a7a4:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 800a7a6:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800a7a8:	7dfb      	ldrb	r3, [r7, #23]
 800a7aa:	2b01      	cmp	r3, #1
 800a7ac:	d009      	beq.n	800a7c2 <SVCCTL_UserEvtRx+0x82>
 800a7ae:	2b02      	cmp	r3, #2
 800a7b0:	d00a      	beq.n	800a7c8 <SVCCTL_UserEvtRx+0x88>
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d10b      	bne.n	800a7ce <SVCCTL_UserEvtRx+0x8e>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 fa62 	bl	800ac80 <SVCCTL_App_Notification>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	75bb      	strb	r3, [r7, #22]
      break;
 800a7c0:	e008      	b.n	800a7d4 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	75bb      	strb	r3, [r7, #22]
      break;
 800a7c6:	e005      	b.n	800a7d4 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	75bb      	strb	r3, [r7, #22]
      break;
 800a7cc:	e002      	b.n	800a7d4 <SVCCTL_UserEvtRx+0x94>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	75bb      	strb	r3, [r7, #22]
      break;
 800a7d2:	bf00      	nop
  }

  return (return_status);
 800a7d4:	7dbb      	ldrb	r3, [r7, #22]
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3718      	adds	r7, #24
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}
 800a7de:	bf00      	nop
 800a7e0:	200000e4 	.word	0x200000e4

0800a7e4 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800a7e8:	f000 ff06 	bl	800b5f8 <HW_IPCC_Enable>

  return;
 800a7ec:	bf00      	nop
}
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <TL_Init>:


void TL_Init( void )
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800a7f4:	4b0f      	ldr	r3, [pc, #60]	; (800a834 <TL_Init+0x44>)
 800a7f6:	4a10      	ldr	r2, [pc, #64]	; (800a838 <TL_Init+0x48>)
 800a7f8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800a7fa:	4b0e      	ldr	r3, [pc, #56]	; (800a834 <TL_Init+0x44>)
 800a7fc:	4a0f      	ldr	r2, [pc, #60]	; (800a83c <TL_Init+0x4c>)
 800a7fe:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800a800:	4b0c      	ldr	r3, [pc, #48]	; (800a834 <TL_Init+0x44>)
 800a802:	4a0f      	ldr	r2, [pc, #60]	; (800a840 <TL_Init+0x50>)
 800a804:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800a806:	4b0b      	ldr	r3, [pc, #44]	; (800a834 <TL_Init+0x44>)
 800a808:	4a0e      	ldr	r2, [pc, #56]	; (800a844 <TL_Init+0x54>)
 800a80a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_sys_table = &TL_SysTable;
 800a80c:	4b09      	ldr	r3, [pc, #36]	; (800a834 <TL_Init+0x44>)
 800a80e:	4a0e      	ldr	r2, [pc, #56]	; (800a848 <TL_Init+0x58>)
 800a810:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800a812:	4b08      	ldr	r3, [pc, #32]	; (800a834 <TL_Init+0x44>)
 800a814:	4a0d      	ldr	r2, [pc, #52]	; (800a84c <TL_Init+0x5c>)
 800a816:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800a818:	4b06      	ldr	r3, [pc, #24]	; (800a834 <TL_Init+0x44>)
 800a81a:	4a0d      	ldr	r2, [pc, #52]	; (800a850 <TL_Init+0x60>)
 800a81c:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800a81e:	4b05      	ldr	r3, [pc, #20]	; (800a834 <TL_Init+0x44>)
 800a820:	4a0c      	ldr	r2, [pc, #48]	; (800a854 <TL_Init+0x64>)
 800a822:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800a824:	4b03      	ldr	r3, [pc, #12]	; (800a834 <TL_Init+0x44>)
 800a826:	4a0c      	ldr	r2, [pc, #48]	; (800a858 <TL_Init+0x68>)
 800a828:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800a82a:	f000 feed 	bl	800b608 <HW_IPCC_Init>

  return;
 800a82e:	bf00      	nop
}
 800a830:	bd80      	pop	{r7, pc}
 800a832:	bf00      	nop
 800a834:	20030000 	.word	0x20030000
 800a838:	20030024 	.word	0x20030024
 800a83c:	20030044 	.word	0x20030044
 800a840:	20030054 	.word	0x20030054
 800a844:	20030060 	.word	0x20030060
 800a848:	20030068 	.word	0x20030068
 800a84c:	20030070 	.word	0x20030070
 800a850:	2003008c 	.word	0x2003008c
 800a854:	20030090 	.word	0x20030090
 800a858:	2003009c 	.word	0x2003009c

0800a85c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800a868:	4811      	ldr	r0, [pc, #68]	; (800a8b0 <TL_BLE_Init+0x54>)
 800a86a:	f7ff fdfd 	bl	800a468 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800a86e:	4b11      	ldr	r3, [pc, #68]	; (800a8b4 <TL_BLE_Init+0x58>)
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	689a      	ldr	r2, [r3, #8]
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	68da      	ldr	r2, [r3, #12]
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	4a0c      	ldr	r2, [pc, #48]	; (800a8b8 <TL_BLE_Init+0x5c>)
 800a888:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	4a08      	ldr	r2, [pc, #32]	; (800a8b0 <TL_BLE_Init+0x54>)
 800a88e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800a890:	f000 fed0 	bl	800b634 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4a08      	ldr	r2, [pc, #32]	; (800a8bc <TL_BLE_Init+0x60>)
 800a89a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	4a07      	ldr	r2, [pc, #28]	; (800a8c0 <TL_BLE_Init+0x64>)
 800a8a2:	6013      	str	r3, [r2, #0]

  return 0;
 800a8a4:	2300      	movs	r3, #0
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3710      	adds	r7, #16
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	20030a34 	.word	0x20030a34
 800a8b4:	20030000 	.word	0x20030000
 800a8b8:	20030a24 	.word	0x20030a24
 800a8bc:	2000045c 	.word	0x2000045c
 800a8c0:	20000460 	.word	0x20000460

0800a8c4 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	807b      	strh	r3, [r7, #2]
  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800a8d0:	4b05      	ldr	r3, [pc, #20]	; (800a8e8 <TL_BLE_SendCmd+0x24>)
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	721a      	strb	r2, [r3, #8]

  HW_IPCC_BLE_SendCmd();
 800a8da:	f000 feb5 	bl	800b648 <HW_IPCC_BLE_SendCmd>

  return 0;
 800a8de:	2300      	movs	r3, #0
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3708      	adds	r7, #8
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}
 800a8e8:	20030000 	.word	0x20030000

0800a8ec <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b082      	sub	sp, #8
 800a8f0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800a8f2:	e009      	b.n	800a908 <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800a8f4:	1d3b      	adds	r3, r7, #4
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	4808      	ldr	r0, [pc, #32]	; (800a91c <HW_IPCC_BLE_RxEvtNot+0x30>)
 800a8fa:	f7ff fe4c 	bl	800a596 <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 800a8fe:	4b08      	ldr	r3, [pc, #32]	; (800a920 <HW_IPCC_BLE_RxEvtNot+0x34>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	687a      	ldr	r2, [r7, #4]
 800a904:	4610      	mov	r0, r2
 800a906:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800a908:	4804      	ldr	r0, [pc, #16]	; (800a91c <HW_IPCC_BLE_RxEvtNot+0x30>)
 800a90a:	f7ff fdbd 	bl	800a488 <LST_is_empty>
 800a90e:	4603      	mov	r3, r0
 800a910:	2b00      	cmp	r3, #0
 800a912:	d0ef      	beq.n	800a8f4 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800a914:	bf00      	nop
}
 800a916:	3708      	adds	r7, #8
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}
 800a91c:	20030a34 	.word	0x20030a34
 800a920:	2000045c 	.word	0x2000045c

0800a924 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800a928:	4b02      	ldr	r3, [pc, #8]	; (800a934 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4798      	blx	r3

  return;
 800a92e:	bf00      	nop
}
 800a930:	bd80      	pop	{r7, pc}
 800a932:	bf00      	nop
 800a934:	20000460 	.word	0x20000460

0800a938 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800a944:	480d      	ldr	r0, [pc, #52]	; (800a97c <TL_SYS_Init+0x44>)
 800a946:	f7ff fd8f 	bl	800a468 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800a94a:	4b0d      	ldr	r3, [pc, #52]	; (800a980 <TL_SYS_Init+0x48>)
 800a94c:	68db      	ldr	r3, [r3, #12]
 800a94e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	689a      	ldr	r2, [r3, #8]
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	4a08      	ldr	r2, [pc, #32]	; (800a97c <TL_SYS_Init+0x44>)
 800a95c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800a95e:	f000 fe95 	bl	800b68c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4a07      	ldr	r2, [pc, #28]	; (800a984 <TL_SYS_Init+0x4c>)
 800a968:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	4a06      	ldr	r2, [pc, #24]	; (800a988 <TL_SYS_Init+0x50>)
 800a970:	6013      	str	r3, [r2, #0]

  return 0;
 800a972:	2300      	movs	r3, #0
}
 800a974:	4618      	mov	r0, r3
 800a976:	3710      	adds	r7, #16
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}
 800a97c:	20030a3c 	.word	0x20030a3c
 800a980:	20030000 	.word	0x20030000
 800a984:	20000464 	.word	0x20000464
 800a988:	20000468 	.word	0x20000468

0800a98c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b082      	sub	sp, #8
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	460b      	mov	r3, r1
 800a996:	807b      	strh	r3, [r7, #2]
  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800a998:	4b05      	ldr	r3, [pc, #20]	; (800a9b0 <TL_SYS_SendCmd+0x24>)
 800a99a:	68db      	ldr	r3, [r3, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	2210      	movs	r2, #16
 800a9a0:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 800a9a2:	f000 fe7d 	bl	800b6a0 <HW_IPCC_SYS_SendCmd>

  return 0;
 800a9a6:	2300      	movs	r3, #0
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3708      	adds	r7, #8
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}
 800a9b0:	20030000 	.word	0x20030000

0800a9b4 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a9b8:	4b04      	ldr	r3, [pc, #16]	; (800a9cc <HW_IPCC_SYS_CmdEvtNot+0x18>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	4a04      	ldr	r2, [pc, #16]	; (800a9d0 <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 800a9be:	68d2      	ldr	r2, [r2, #12]
 800a9c0:	6812      	ldr	r2, [r2, #0]
 800a9c2:	4610      	mov	r0, r2
 800a9c4:	4798      	blx	r3

  return;
 800a9c6:	bf00      	nop
}
 800a9c8:	bd80      	pop	{r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	20000464 	.word	0x20000464
 800a9d0:	20030000 	.word	0x20030000

0800a9d4 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b082      	sub	sp, #8
 800a9d8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a9da:	e009      	b.n	800a9f0 <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800a9dc:	1d3b      	adds	r3, r7, #4
 800a9de:	4619      	mov	r1, r3
 800a9e0:	4808      	ldr	r0, [pc, #32]	; (800aa04 <HW_IPCC_SYS_EvtNot+0x30>)
 800a9e2:	f7ff fdd8 	bl	800a596 <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 800a9e6:	4b08      	ldr	r3, [pc, #32]	; (800aa08 <HW_IPCC_SYS_EvtNot+0x34>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	687a      	ldr	r2, [r7, #4]
 800a9ec:	4610      	mov	r0, r2
 800a9ee:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a9f0:	4804      	ldr	r0, [pc, #16]	; (800aa04 <HW_IPCC_SYS_EvtNot+0x30>)
 800a9f2:	f7ff fd49 	bl	800a488 <LST_is_empty>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d0ef      	beq.n	800a9dc <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800a9fc:	bf00      	nop
}
 800a9fe:	3708      	adds	r7, #8
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}
 800aa04:	20030a3c 	.word	0x20030a3c
 800aa08:	20000468 	.word	0x20000468

0800aa0c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b082      	sub	sp, #8
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800aa14:	4817      	ldr	r0, [pc, #92]	; (800aa74 <TL_MM_Init+0x68>)
 800aa16:	f7ff fd27 	bl	800a468 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800aa1a:	4817      	ldr	r0, [pc, #92]	; (800aa78 <TL_MM_Init+0x6c>)
 800aa1c:	f7ff fd24 	bl	800a468 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800aa20:	4b16      	ldr	r3, [pc, #88]	; (800aa7c <TL_MM_Init+0x70>)
 800aa22:	691b      	ldr	r3, [r3, #16]
 800aa24:	4a16      	ldr	r2, [pc, #88]	; (800aa80 <TL_MM_Init+0x74>)
 800aa26:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800aa28:	4b15      	ldr	r3, [pc, #84]	; (800aa80 <TL_MM_Init+0x74>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	6892      	ldr	r2, [r2, #8]
 800aa30:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800aa32:	4b13      	ldr	r3, [pc, #76]	; (800aa80 <TL_MM_Init+0x74>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	687a      	ldr	r2, [r7, #4]
 800aa38:	68d2      	ldr	r2, [r2, #12]
 800aa3a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800aa3c:	4b10      	ldr	r3, [pc, #64]	; (800aa80 <TL_MM_Init+0x74>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4a0c      	ldr	r2, [pc, #48]	; (800aa74 <TL_MM_Init+0x68>)
 800aa42:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800aa44:	4b0e      	ldr	r3, [pc, #56]	; (800aa80 <TL_MM_Init+0x74>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	687a      	ldr	r2, [r7, #4]
 800aa4a:	6812      	ldr	r2, [r2, #0]
 800aa4c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800aa4e:	4b0c      	ldr	r3, [pc, #48]	; (800aa80 <TL_MM_Init+0x74>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	687a      	ldr	r2, [r7, #4]
 800aa54:	6852      	ldr	r2, [r2, #4]
 800aa56:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800aa58:	4b09      	ldr	r3, [pc, #36]	; (800aa80 <TL_MM_Init+0x74>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	687a      	ldr	r2, [r7, #4]
 800aa5e:	6912      	ldr	r2, [r2, #16]
 800aa60:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800aa62:	4b07      	ldr	r3, [pc, #28]	; (800aa80 <TL_MM_Init+0x74>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	687a      	ldr	r2, [r7, #4]
 800aa68:	6952      	ldr	r2, [r2, #20]
 800aa6a:	619a      	str	r2, [r3, #24]

  return;
 800aa6c:	bf00      	nop
}
 800aa6e:	3708      	adds	r7, #8
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	200300a8 	.word	0x200300a8
 800aa78:	20000454 	.word	0x20000454
 800aa7c:	20030000 	.word	0x20030000
 800aa80:	2000046c 	.word	0x2000046c

0800aa84 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b082      	sub	sp, #8
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800aa8c:	6879      	ldr	r1, [r7, #4]
 800aa8e:	4805      	ldr	r0, [pc, #20]	; (800aaa4 <TL_MM_EvtDone+0x20>)
 800aa90:	f7ff fd3e 	bl	800a510 <LST_insert_tail>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800aa94:	4804      	ldr	r0, [pc, #16]	; (800aaa8 <TL_MM_EvtDone+0x24>)
 800aa96:	f000 fe29 	bl	800b6ec <HW_IPCC_MM_SendFreeBuf>

  return;
 800aa9a:	bf00      	nop
}
 800aa9c:	3708      	adds	r7, #8
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}
 800aaa2:	bf00      	nop
 800aaa4:	20000454 	.word	0x20000454
 800aaa8:	0800aaad 	.word	0x0800aaad

0800aaac <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b082      	sub	sp, #8
 800aab0:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800aab2:	e00c      	b.n	800aace <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800aab4:	1d3b      	adds	r3, r7, #4
 800aab6:	4619      	mov	r1, r3
 800aab8:	480a      	ldr	r0, [pc, #40]	; (800aae4 <SendFreeBuf+0x38>)
 800aaba:	f7ff fd6c 	bl	800a596 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800aabe:	4b0a      	ldr	r3, [pc, #40]	; (800aae8 <SendFreeBuf+0x3c>)
 800aac0:	691b      	ldr	r3, [r3, #16]
 800aac2:	691b      	ldr	r3, [r3, #16]
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	4611      	mov	r1, r2
 800aac8:	4618      	mov	r0, r3
 800aaca:	f7ff fd21 	bl	800a510 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800aace:	4805      	ldr	r0, [pc, #20]	; (800aae4 <SendFreeBuf+0x38>)
 800aad0:	f7ff fcda 	bl	800a488 <LST_is_empty>
 800aad4:	4603      	mov	r3, r0
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d0ec      	beq.n	800aab4 <SendFreeBuf+0x8>
  }

  return;
 800aada:	bf00      	nop
}
 800aadc:	3708      	adds	r7, #8
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	bf00      	nop
 800aae4:	20000454 	.word	0x20000454
 800aae8:	20030000 	.word	0x20030000

0800aaec <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800aaf0:	4805      	ldr	r0, [pc, #20]	; (800ab08 <TL_TRACES_Init+0x1c>)
 800aaf2:	f7ff fcb9 	bl	800a468 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800aaf6:	4b05      	ldr	r3, [pc, #20]	; (800ab0c <TL_TRACES_Init+0x20>)
 800aaf8:	695b      	ldr	r3, [r3, #20]
 800aafa:	4a03      	ldr	r2, [pc, #12]	; (800ab08 <TL_TRACES_Init+0x1c>)
 800aafc:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800aafe:	f000 fe2b 	bl	800b758 <HW_IPCC_TRACES_Init>

  return;
 800ab02:	bf00      	nop
}
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	bf00      	nop
 800ab08:	200300b0 	.word	0x200300b0
 800ab0c:	20030000 	.word	0x20030000

0800ab10 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800ab16:	e008      	b.n	800ab2a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800ab18:	1d3b      	adds	r3, r7, #4
 800ab1a:	4619      	mov	r1, r3
 800ab1c:	4808      	ldr	r0, [pc, #32]	; (800ab40 <HW_IPCC_TRACES_EvtNot+0x30>)
 800ab1e:	f7ff fd3a 	bl	800a596 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	4618      	mov	r0, r3
 800ab26:	f000 f80d 	bl	800ab44 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800ab2a:	4805      	ldr	r0, [pc, #20]	; (800ab40 <HW_IPCC_TRACES_EvtNot+0x30>)
 800ab2c:	f7ff fcac 	bl	800a488 <LST_is_empty>
 800ab30:	4603      	mov	r3, r0
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d0f0      	beq.n	800ab18 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800ab36:	bf00      	nop
}
 800ab38:	3708      	adds	r7, #8
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}
 800ab3e:	bf00      	nop
 800ab40:	200300b0 	.word	0x200300b0

0800ab44 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt ){};
 800ab44:	b480      	push	{r7}
 800ab46:	b083      	sub	sp, #12
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	bf00      	nop
 800ab4e:	370c      	adds	r7, #12
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr

0800ab58 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800ab5c:	4b03      	ldr	r3, [pc, #12]	; (800ab6c <LL_FLASH_GetUDN+0x14>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr
 800ab6a:	bf00      	nop
 800ab6c:	1fff7580 	.word	0x1fff7580

0800ab70 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800ab70:	b480      	push	{r7}
 800ab72:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800ab74:	4b03      	ldr	r3, [pc, #12]	; (800ab84 <LL_FLASH_GetDeviceID+0x14>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	b2db      	uxtb	r3, r3
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr
 800ab84:	1fff7584 	.word	0x1fff7584

0800ab88 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800ab8c:	4b03      	ldr	r3, [pc, #12]	; (800ab9c <LL_FLASH_GetSTCompanyID+0x14>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	0a1b      	lsrs	r3, r3, #8
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr
 800ab9c:	1fff7584 	.word	0x1fff7584

0800aba0 <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 800aba0:	b5b0      	push	{r4, r5, r7, lr}
 800aba2:	b08c      	sub	sp, #48	; 0x30
 800aba4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800aba6:	4b2b      	ldr	r3, [pc, #172]	; (800ac54 <APP_BLE_Init+0xb4>)
 800aba8:	463c      	mov	r4, r7
 800abaa:	461d      	mov	r5, r3
 800abac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800abae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800abb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800abb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800abb4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800abb8:	c407      	stmia	r4!, {r0, r1, r2}
 800abba:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 800abbc:	f000 f928 	bl	800ae10 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800abc0:	2101      	movs	r1, #1
 800abc2:	2002      	movs	r0, #2
 800abc4:	f7f7 fc68 	bl	8002498 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800abc8:	4a23      	ldr	r2, [pc, #140]	; (800ac58 <APP_BLE_Init+0xb8>)
 800abca:	2100      	movs	r1, #0
 800abcc:	2004      	movs	r0, #4
 800abce:	f7f7 fdcb 	bl	8002768 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 800abd2:	463b      	mov	r3, r7
 800abd4:	4618      	mov	r0, r3
 800abd6:	f7ff faff 	bl	800a1d8 <SHCI_C2_BLE_Init>

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800abda:	f000 f92f 	bl	800ae3c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800abde:	f7ff fd61 	bl	800a6a4 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800abe2:	4b1e      	ldr	r3, [pc, #120]	; (800ac5c <APP_BLE_Init+0xbc>)
 800abe4:	2200      	movs	r2, #0
 800abe6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;  
 800abea:	4b1c      	ldr	r3, [pc, #112]	; (800ac5c <APP_BLE_Init+0xbc>)
 800abec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abf0:	84da      	strh	r2, [r3, #38]	; 0x26
  /**
   * From here, all initialization are BLE application specific
   */
    UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800abf2:	4a1b      	ldr	r2, [pc, #108]	; (800ac60 <APP_BLE_Init+0xc0>)
 800abf4:	2100      	movs	r1, #0
 800abf6:	2001      	movs	r0, #1
 800abf8:	f7f7 fdb6 	bl	8002768 <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)  
    manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)  
  aci_hal_set_radio_activity_mask(0x0006);
 800abfc:	2006      	movs	r0, #6
 800abfe:	f7fe fe9d 	bl	800993c <aci_hal_set_radio_activity_mask>
  mutex = 1; 
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 800ac02:	f000 fb63 	bl	800b2cc <P2PS_APP_Init>

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 800ac06:	4b17      	ldr	r3, [pc, #92]	; (800ac64 <APP_BLE_Init+0xc4>)
 800ac08:	2200      	movs	r2, #0
 800ac0a:	4917      	ldr	r1, [pc, #92]	; (800ac68 <APP_BLE_Init+0xc8>)
 800ac0c:	2000      	movs	r0, #0
 800ac0e:	f7f6 fd5f 	bl	80016d0 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800ac12:	4b16      	ldr	r3, [pc, #88]	; (800ac6c <APP_BLE_Init+0xcc>)
 800ac14:	2200      	movs	r2, #0
 800ac16:	4916      	ldr	r1, [pc, #88]	; (800ac70 <APP_BLE_Init+0xd0>)
 800ac18:	2000      	movs	r0, #0
 800ac1a:	f7f6 fd59 	bl	80016d0 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800ac1e:	4b0f      	ldr	r3, [pc, #60]	; (800ac5c <APP_BLE_Init+0xbc>)
 800ac20:	2200      	movs	r2, #0
 800ac22:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800ac26:	4b0d      	ldr	r3, [pc, #52]	; (800ac5c <APP_BLE_Init+0xbc>)
 800ac28:	2200      	movs	r2, #0
 800ac2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800ac2e:	4b11      	ldr	r3, [pc, #68]	; (800ac74 <APP_BLE_Init+0xd4>)
 800ac30:	2280      	movs	r2, #128	; 0x80
 800ac32:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800ac34:	4b10      	ldr	r3, [pc, #64]	; (800ac78 <APP_BLE_Init+0xd8>)
 800ac36:	22a0      	movs	r2, #160	; 0xa0
 800ac38:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 800ac3a:	2001      	movs	r0, #1
 800ac3c:	f000 f9d8 	bl	800aff0 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */
   HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 800ac40:	2201      	movs	r2, #1
 800ac42:	2120      	movs	r1, #32
 800ac44:	480d      	ldr	r0, [pc, #52]	; (800ac7c <APP_BLE_Init+0xdc>)
 800ac46:	f7f8 fdd1 	bl	80037ec <HAL_GPIO_WritePin>
/* USER CODE END APP_BLE_Init_2 */
  return;
 800ac4a:	bf00      	nop
}
 800ac4c:	3730      	adds	r7, #48	; 0x30
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bdb0      	pop	{r4, r5, r7, pc}
 800ac52:	bf00      	nop
 800ac54:	0800b848 	.word	0x0800b848
 800ac58:	08009c15 	.word	0x08009c15
 800ac5c:	2000011c 	.word	0x2000011c
 800ac60:	0800b15d 	.word	0x0800b15d
 800ac64:	0800b191 	.word	0x0800b191
 800ac68:	200001ad 	.word	0x200001ad
 800ac6c:	0800b1a1 	.word	0x0800b1a1
 800ac70:	200001ae 	.word	0x200001ae
 800ac74:	200001b0 	.word	0x200001b0
 800ac78:	200001b2 	.word	0x200001b2
 800ac7c:	48000400 	.word	0x48000400

0800ac80 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b08a      	sub	sp, #40	; 0x28
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blue_aci *blue_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete; 
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ac88:	2342      	movs	r3, #66	; 0x42
 800ac8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	3301      	adds	r3, #1
 800ac92:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 800ac94:	6a3b      	ldr	r3, [r7, #32]
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	2b3e      	cmp	r3, #62	; 0x3e
 800ac9a:	d02f      	beq.n	800acfc <SVCCTL_App_Notification+0x7c>
 800ac9c:	2bff      	cmp	r3, #255	; 0xff
 800ac9e:	f000 808c 	beq.w	800adba <SVCCTL_App_Notification+0x13a>
 800aca2:	2b05      	cmp	r3, #5
 800aca4:	d000      	beq.n	800aca8 <SVCCTL_App_Notification+0x28>

        default:
        /* USER CODE BEGIN ECODE_DEFAULT*/

        /* USER CODE END ECODE_DEFAULT*/
          break;
 800aca6:	e09b      	b.n	800ade0 <SVCCTL_App_Notification+0x160>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 800aca8:	6a3b      	ldr	r3, [r7, #32]
 800acaa:	3302      	adds	r3, #2
 800acac:	60fb      	str	r3, [r7, #12]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800acb4:	b29a      	uxth	r2, r3
 800acb6:	4b4d      	ldr	r3, [pc, #308]	; (800adec <SVCCTL_App_Notification+0x16c>)
 800acb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800acba:	429a      	cmp	r2, r3
 800acbc:	d106      	bne.n	800accc <SVCCTL_App_Notification+0x4c>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800acbe:	4b4b      	ldr	r3, [pc, #300]	; (800adec <SVCCTL_App_Notification+0x16c>)
 800acc0:	2200      	movs	r2, #0
 800acc2:	84da      	strh	r2, [r3, #38]	; 0x26
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800acc4:	4b49      	ldr	r3, [pc, #292]	; (800adec <SVCCTL_App_Notification+0x16c>)
 800acc6:	2200      	movs	r2, #0
 800acc8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      Adv_Request(APP_BLE_FAST_ADV);
 800accc:	2001      	movs	r0, #1
 800acce:	f000 f98f 	bl	800aff0 <Adv_Request>
        handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800acd2:	4b47      	ldr	r3, [pc, #284]	; (800adf0 <SVCCTL_App_Notification+0x170>)
 800acd4:	2201      	movs	r2, #1
 800acd6:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800acd8:	4b44      	ldr	r3, [pc, #272]	; (800adec <SVCCTL_App_Notification+0x16c>)
 800acda:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800acdc:	4b44      	ldr	r3, [pc, #272]	; (800adf0 <SVCCTL_App_Notification+0x170>)
 800acde:	805a      	strh	r2, [r3, #2]
        P2PS_APP_Notification(&handleNotification);
 800ace0:	4843      	ldr	r0, [pc, #268]	; (800adf0 <SVCCTL_App_Notification+0x170>)
 800ace2:	f000 fadf 	bl	800b2a4 <P2PS_APP_Notification>
        HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800ace6:	2200      	movs	r2, #0
 800ace8:	2101      	movs	r1, #1
 800acea:	4842      	ldr	r0, [pc, #264]	; (800adf4 <SVCCTL_App_Notification+0x174>)
 800acec:	f7f8 fd7e 	bl	80037ec <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 800acf0:	2201      	movs	r2, #1
 800acf2:	2120      	movs	r1, #32
 800acf4:	483f      	ldr	r0, [pc, #252]	; (800adf4 <SVCCTL_App_Notification+0x174>)
 800acf6:	f7f8 fd79 	bl	80037ec <HAL_GPIO_WritePin>
    break; /* EVT_DISCONN_COMPLETE */
 800acfa:	e071      	b.n	800ade0 <SVCCTL_App_Notification+0x160>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 800acfc:	6a3b      	ldr	r3, [r7, #32]
 800acfe:	3302      	adds	r3, #2
 800ad00:	61bb      	str	r3, [r7, #24]
      switch (meta_evt->subevent)
 800ad02:	69bb      	ldr	r3, [r7, #24]
 800ad04:	781b      	ldrb	r3, [r3, #0]
 800ad06:	2b03      	cmp	r3, #3
 800ad08:	d053      	beq.n	800adb2 <SVCCTL_App_Notification+0x132>
 800ad0a:	2b0c      	cmp	r3, #12
 800ad0c:	d002      	beq.n	800ad14 <SVCCTL_App_Notification+0x94>
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d016      	beq.n	800ad40 <SVCCTL_App_Notification+0xc0>
          break;
 800ad12:	e051      	b.n	800adb8 <SVCCTL_App_Notification+0x138>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 800ad14:	69bb      	ldr	r3, [r7, #24]
 800ad16:	3301      	adds	r3, #1
 800ad18:	617b      	str	r3, [r7, #20]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 800ad1a:	4b34      	ldr	r3, [pc, #208]	; (800adec <SVCCTL_App_Notification+0x16c>)
 800ad1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ad1e:	f107 020a 	add.w	r2, r7, #10
 800ad22:	f107 010b 	add.w	r1, r7, #11
 800ad26:	4618      	mov	r0, r3
 800ad28:	f7fe fe82 	bl	8009a30 <hci_le_read_phy>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret == BLE_STATUS_SUCCESS)
 800ad32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d13d      	bne.n	800adb6 <SVCCTL_App_Notification+0x136>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 800ad3a:	7afb      	ldrb	r3, [r7, #11]
 800ad3c:	2b02      	cmp	r3, #2
          break;
 800ad3e:	e03a      	b.n	800adb6 <SVCCTL_App_Notification+0x136>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 800ad40:	69bb      	ldr	r3, [r7, #24]
 800ad42:	3301      	adds	r3, #1
 800ad44:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800ad46:	4b29      	ldr	r3, [pc, #164]	; (800adec <SVCCTL_App_Notification+0x16c>)
 800ad48:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f7f6 fd35 	bl	80017bc <HW_TS_Stop>
            if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800ad52:	4b26      	ldr	r3, [pc, #152]	; (800adec <SVCCTL_App_Notification+0x16c>)
 800ad54:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800ad58:	2b04      	cmp	r3, #4
 800ad5a:	d104      	bne.n	800ad66 <SVCCTL_App_Notification+0xe6>
              BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800ad5c:	4b23      	ldr	r3, [pc, #140]	; (800adec <SVCCTL_App_Notification+0x16c>)
 800ad5e:	2206      	movs	r2, #6
 800ad60:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 800ad64:	e003      	b.n	800ad6e <SVCCTL_App_Notification+0xee>
              BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800ad66:	4b21      	ldr	r3, [pc, #132]	; (800adec <SVCCTL_App_Notification+0x16c>)
 800ad68:	2205      	movs	r2, #5
 800ad6a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
                connection_complete_event->Connection_Handle;
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ad74:	b29a      	uxth	r2, r3
            BleApplicationContext.BleApplicationContext_legacy.connectionHandle =
 800ad76:	4b1d      	ldr	r3, [pc, #116]	; (800adec <SVCCTL_App_Notification+0x16c>)
 800ad78:	84da      	strh	r2, [r3, #38]	; 0x26
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800ad7a:	4b1d      	ldr	r3, [pc, #116]	; (800adf0 <SVCCTL_App_Notification+0x170>)
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800ad80:	4b1a      	ldr	r3, [pc, #104]	; (800adec <SVCCTL_App_Notification+0x16c>)
 800ad82:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800ad84:	4b1a      	ldr	r3, [pc, #104]	; (800adf0 <SVCCTL_App_Notification+0x170>)
 800ad86:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 800ad88:	4819      	ldr	r0, [pc, #100]	; (800adf0 <SVCCTL_App_Notification+0x170>)
 800ad8a:	f000 fa8b 	bl	800b2a4 <P2PS_APP_Notification>
          HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800ad8e:	2201      	movs	r2, #1
 800ad90:	2101      	movs	r1, #1
 800ad92:	4818      	ldr	r0, [pc, #96]	; (800adf4 <SVCCTL_App_Notification+0x174>)
 800ad94:	f7f8 fd2a 	bl	80037ec <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800ad98:	2200      	movs	r2, #0
 800ad9a:	2120      	movs	r1, #32
 800ad9c:	4815      	ldr	r0, [pc, #84]	; (800adf4 <SVCCTL_App_Notification+0x174>)
 800ad9e:	f7f8 fd25 	bl	80037ec <HAL_GPIO_WritePin>
          aci_gatt_exchange_config(connection_complete_event->Connection_Handle);
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ada8:	b29b      	uxth	r3, r3
 800adaa:	4618      	mov	r0, r3
 800adac:	f7fe fca3 	bl	80096f6 <aci_gatt_exchange_config>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 800adb0:	e002      	b.n	800adb8 <SVCCTL_App_Notification+0x138>
          break;
 800adb2:	bf00      	nop
 800adb4:	e014      	b.n	800ade0 <SVCCTL_App_Notification+0x160>
          break;
 800adb6:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 800adb8:	e012      	b.n	800ade0 <SVCCTL_App_Notification+0x160>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800adba:	6a3b      	ldr	r3, [r7, #32]
 800adbc:	3302      	adds	r3, #2
 800adbe:	61fb      	str	r3, [r7, #28]
      switch (blue_evt->ecode)
 800adc0:	69fb      	ldr	r3, [r7, #28]
 800adc2:	881b      	ldrh	r3, [r3, #0]
 800adc4:	b29b      	uxth	r3, r3
 800adc6:	f240 4207 	movw	r2, #1031	; 0x407
 800adca:	4293      	cmp	r3, r2
 800adcc:	d004      	beq.n	800add8 <SVCCTL_App_Notification+0x158>
 800adce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800add2:	d003      	beq.n	800addc <SVCCTL_App_Notification+0x15c>
 800add4:	2b04      	cmp	r3, #4
        break; /* RADIO_ACTIVITY_EVENT */
 800add6:	e002      	b.n	800adde <SVCCTL_App_Notification+0x15e>
        break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 800add8:	bf00      	nop
 800adda:	e000      	b.n	800adde <SVCCTL_App_Notification+0x15e>
      break;
 800addc:	bf00      	nop
      break; /* EVT_VENDOR */
 800adde:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800ade0:	2301      	movs	r3, #1
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3728      	adds	r7, #40	; 0x28
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	2000011c 	.word	0x2000011c
 800adf0:	20000948 	.word	0x20000948
 800adf4:	48000400 	.word	0x48000400

0800adf8 <APP_BLE_Get_Server_Connection_Status>:

APP_BLE_ConnStatus_t APP_BLE_Get_Server_Connection_Status(void)
{
 800adf8:	b480      	push	{r7}
 800adfa:	af00      	add	r7, sp, #0
    return BleApplicationContext.Device_Connection_Status;
 800adfc:	4b03      	ldr	r3, [pc, #12]	; (800ae0c <APP_BLE_Get_Server_Connection_Status+0x14>)
 800adfe:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr
 800ae0c:	2000011c 	.word	0x2000011c

0800ae10 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b082      	sub	sp, #8
 800ae14:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800ae16:	4b06      	ldr	r3, [pc, #24]	; (800ae30 <Ble_Tl_Init+0x20>)
 800ae18:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800ae1a:	4b06      	ldr	r3, [pc, #24]	; (800ae34 <Ble_Tl_Init+0x24>)
 800ae1c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800ae1e:	463b      	mov	r3, r7
 800ae20:	4619      	mov	r1, r3
 800ae22:	4805      	ldr	r0, [pc, #20]	; (800ae38 <Ble_Tl_Init+0x28>)
 800ae24:	f7fe feda 	bl	8009bdc <hci_init>

  return;
 800ae28:	bf00      	nop
}
 800ae2a:	3708      	adds	r7, #8
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}
 800ae30:	200300b8 	.word	0x200300b8
 800ae34:	0800b22b 	.word	0x0800b22b
 800ae38:	0800b1f3 	.word	0x0800b1f3

0800ae3c <Ble_Hci_Gap_Gatt_Init>:

 static void Ble_Hci_Gap_Gatt_Init(void){
 800ae3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae3e:	b091      	sub	sp, #68	; 0x44
 800ae40:	af06      	add	r7, sp, #24
  uint8_t role;
  uint8_t index;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE }; 
 800ae42:	2300      	movs	r3, #0
 800ae44:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 800ae46:	f7fe fdca 	bl	80099de <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 800ae4a:	f000 f943 	bl	800b0d4 <BleGetBdAddress>
 800ae4e:	6238      	str	r0, [r7, #32]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800ae50:	6a3a      	ldr	r2, [r7, #32]
 800ae52:	2106      	movs	r1, #6
 800ae54:	2000      	movs	r0, #0
 800ae56:	f7fe fca3 	bl	80097a0 <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 800ae5a:	6a3b      	ldr	r3, [r7, #32]
 800ae5c:	795a      	ldrb	r2, [r3, #5]
 800ae5e:	4b5e      	ldr	r3, [pc, #376]	; (800afd8 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ae60:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 800ae62:	6a3b      	ldr	r3, [r7, #32]
 800ae64:	791a      	ldrb	r2, [r3, #4]
 800ae66:	4b5c      	ldr	r3, [pc, #368]	; (800afd8 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ae68:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 800ae6a:	6a3b      	ldr	r3, [r7, #32]
 800ae6c:	78da      	ldrb	r2, [r3, #3]
 800ae6e:	4b5a      	ldr	r3, [pc, #360]	; (800afd8 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ae70:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 800ae72:	6a3b      	ldr	r3, [r7, #32]
 800ae74:	789a      	ldrb	r2, [r3, #2]
 800ae76:	4b58      	ldr	r3, [pc, #352]	; (800afd8 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ae78:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 800ae7a:	6a3b      	ldr	r3, [r7, #32]
 800ae7c:	785a      	ldrb	r2, [r3, #1]
 800ae7e:	4b56      	ldr	r3, [pc, #344]	; (800afd8 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ae80:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 800ae82:	6a3b      	ldr	r3, [r7, #32]
 800ae84:	781a      	ldrb	r2, [r3, #0]
 800ae86:	4b54      	ldr	r3, [pc, #336]	; (800afd8 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ae88:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 800ae8a:	f64e 536e 	movw	r3, #60782	; 0xed6e
 800ae8e:	60fb      	str	r3, [r7, #12]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 800ae90:	f7ff fe62 	bl	800ab58 <LL_FLASH_GetUDN>
 800ae94:	4603      	mov	r3, r0
 800ae96:	60bb      	str	r3, [r7, #8]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 800ae98:	f107 0308 	add.w	r3, r7, #8
 800ae9c:	461a      	mov	r2, r3
 800ae9e:	2106      	movs	r1, #6
 800aea0:	202e      	movs	r0, #46	; 0x2e
 800aea2:	f7fe fc7d 	bl	80097a0 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK 
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800aea6:	4a4d      	ldr	r2, [pc, #308]	; (800afdc <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 800aea8:	2110      	movs	r1, #16
 800aeaa:	2018      	movs	r0, #24
 800aeac:	f7fe fc78 	bl	80097a0 <aci_hal_write_config_data>
    
   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 800aeb0:	4a4b      	ldr	r2, [pc, #300]	; (800afe0 <Ble_Hci_Gap_Gatt_Init+0x1a4>)
 800aeb2:	2110      	movs	r1, #16
 800aeb4:	2008      	movs	r0, #8
 800aeb6:	f7fe fc73 	bl	80097a0 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800aeba:	2118      	movs	r1, #24
 800aebc:	2001      	movs	r0, #1
 800aebe:	f7fe fcdf 	bl	8009880 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 800aec2:	f7fe f9c7 	bl	8009254 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 800aec6:	2300      	movs	r3, #0
 800aec8:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800aeca:	7ffb      	ldrb	r3, [r7, #31]
 800aecc:	f043 0301 	orr.w	r3, r3, #1
 800aed0:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 800aed2:	7ffb      	ldrb	r3, [r7, #31]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d01e      	beq.n	800af16 <Ble_Hci_Gap_Gatt_Init+0xda>
  {
    const char *name = "STM32WB";
 800aed8:	4b42      	ldr	r3, [pc, #264]	; (800afe4 <Ble_Hci_Gap_Gatt_Init+0x1a8>)
 800aeda:	61bb      	str	r3, [r7, #24]
    aci_gap_init(role, 0,
 800aedc:	f107 0216 	add.w	r2, r7, #22
 800aee0:	7ff8      	ldrb	r0, [r7, #31]
 800aee2:	f107 0312 	add.w	r3, r7, #18
 800aee6:	9301      	str	r3, [sp, #4]
 800aee8:	f107 0314 	add.w	r3, r7, #20
 800aeec:	9300      	str	r3, [sp, #0]
 800aeee:	4613      	mov	r3, r2
 800aef0:	2207      	movs	r2, #7
 800aef2:	2100      	movs	r1, #0
 800aef4:	f7fe f897 	bl	8009026 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800aef8:	8afc      	ldrh	r4, [r7, #22]
 800aefa:	8abd      	ldrh	r5, [r7, #20]
 800aefc:	69b8      	ldr	r0, [r7, #24]
 800aefe:	f7f5 f93f 	bl	8000180 <strlen>
 800af02:	4603      	mov	r3, r0
 800af04:	b2da      	uxtb	r2, r3
 800af06:	69bb      	ldr	r3, [r7, #24]
 800af08:	9300      	str	r3, [sp, #0]
 800af0a:	4613      	mov	r3, r2
 800af0c:	2200      	movs	r2, #0
 800af0e:	4629      	mov	r1, r5
 800af10:	4620      	mov	r0, r4
 800af12:	f7fe fb62 	bl	80095da <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 800af16:	8af8      	ldrh	r0, [r7, #22]
 800af18:	8a79      	ldrh	r1, [r7, #18]
 800af1a:	1d3b      	adds	r3, r7, #4
 800af1c:	9300      	str	r3, [sp, #0]
 800af1e:	2302      	movs	r3, #2
 800af20:	2200      	movs	r2, #0
 800af22:	f7fe fb5a 	bl	80095da <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
/**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED); 
 800af26:	2202      	movs	r2, #2
 800af28:	2102      	movs	r1, #2
 800af2a:	2000      	movs	r0, #0
 800af2c:	f7fe fde8 	bl	8009b00 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800af30:	4b2d      	ldr	r3, [pc, #180]	; (800afe8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800af32:	2201      	movs	r2, #1
 800af34:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800af36:	4b2c      	ldr	r3, [pc, #176]	; (800afe8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	4618      	mov	r0, r3
 800af3c:	f7fd ff73 	bl	8008e26 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800af40:	4b29      	ldr	r3, [pc, #164]	; (800afe8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800af42:	2201      	movs	r2, #1
 800af44:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 800af46:	4b28      	ldr	r3, [pc, #160]	; (800afe8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800af48:	2200      	movs	r2, #0
 800af4a:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = 8;
 800af4c:	4b26      	ldr	r3, [pc, #152]	; (800afe8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800af4e:	2208      	movs	r2, #8
 800af50:	755a      	strb	r2, [r3, #21]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
 800af52:	4b25      	ldr	r3, [pc, #148]	; (800afe8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800af54:	2210      	movs	r2, #16
 800af56:	759a      	strb	r2, [r3, #22]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = 1;
 800af58:	4b23      	ldr	r3, [pc, #140]	; (800afe8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800af5a:	2201      	movs	r2, #1
 800af5c:	751a      	strb	r2, [r3, #20]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
 800af5e:	4b22      	ldr	r3, [pc, #136]	; (800afe8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800af60:	4a22      	ldr	r2, [pc, #136]	; (800afec <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800af62:	619a      	str	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = 1;
 800af64:	4b20      	ldr	r3, [pc, #128]	; (800afe8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800af66:	2201      	movs	r2, #1
 800af68:	709a      	strb	r2, [r3, #2]
  for (index = 0; index < 16; index++)
 800af6a:	2300      	movs	r3, #0
 800af6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800af70:	e00b      	b.n	800af8a <Ble_Hci_Gap_Gatt_Init+0x14e>
  {
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 800af72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af76:	4a1c      	ldr	r2, [pc, #112]	; (800afe8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800af78:	4413      	add	r3, r2
 800af7a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800af7e:	711a      	strb	r2, [r3, #4]
  for (index = 0; index < 16; index++)
 800af80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af84:	3301      	adds	r3, #1
 800af86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800af8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af8e:	2b0f      	cmp	r3, #15
 800af90:	d9ef      	bls.n	800af72 <Ble_Hci_Gap_Gatt_Init+0x136>
  }

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800af92:	4b15      	ldr	r3, [pc, #84]	; (800afe8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800af94:	789d      	ldrb	r5, [r3, #2]
 800af96:	4b14      	ldr	r3, [pc, #80]	; (800afe8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800af98:	785e      	ldrb	r6, [r3, #1]
 800af9a:	4b13      	ldr	r3, [pc, #76]	; (800afe8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800af9c:	7d5b      	ldrb	r3, [r3, #21]
 800af9e:	4a12      	ldr	r2, [pc, #72]	; (800afe8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800afa0:	7d92      	ldrb	r2, [r2, #22]
 800afa2:	4911      	ldr	r1, [pc, #68]	; (800afe8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800afa4:	7d09      	ldrb	r1, [r1, #20]
 800afa6:	4810      	ldr	r0, [pc, #64]	; (800afe8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800afa8:	6980      	ldr	r0, [r0, #24]
 800afaa:	2400      	movs	r4, #0
 800afac:	9404      	str	r4, [sp, #16]
 800afae:	9003      	str	r0, [sp, #12]
 800afb0:	9102      	str	r1, [sp, #8]
 800afb2:	9201      	str	r2, [sp, #4]
 800afb4:	9300      	str	r3, [sp, #0]
 800afb6:	2300      	movs	r3, #0
 800afb8:	2201      	movs	r2, #1
 800afba:	4631      	mov	r1, r6
 800afbc:	4628      	mov	r0, r5
 800afbe:	f7fd ff83 	bl	8008ec8 <aci_gap_set_authentication_requirement>
                                        );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800afc2:	4b09      	ldr	r3, [pc, #36]	; (800afe8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800afc4:	789b      	ldrb	r3, [r3, #2]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d001      	beq.n	800afce <Ble_Hci_Gap_Gatt_Init+0x192>
   {
     aci_gap_configure_whitelist();
 800afca:	f7fe f91a 	bl	8009202 <aci_gap_configure_whitelist>
   }
}
 800afce:	bf00      	nop
 800afd0:	372c      	adds	r7, #44	; 0x2c
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afd6:	bf00      	nop
 800afd8:	2000001c 	.word	0x2000001c
 800afdc:	0800b950 	.word	0x0800b950
 800afe0:	0800b960 	.word	0x0800b960
 800afe4:	0800b878 	.word	0x0800b878
 800afe8:	2000011c 	.word	0x2000011c
 800afec:	0001b207 	.word	0x0001b207

0800aff0 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b08c      	sub	sp, #48	; 0x30
 800aff4:	af08      	add	r7, sp, #32
 800aff6:	4603      	mov	r3, r0
 800aff8:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800affa:	2342      	movs	r3, #66	; 0x42
 800affc:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;
 
  if (New_Status == APP_BLE_FAST_ADV)
 800affe:	79fb      	ldrb	r3, [r7, #7]
 800b000:	2b01      	cmp	r3, #1
 800b002:	d106      	bne.n	800b012 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800b004:	4b2c      	ldr	r3, [pc, #176]	; (800b0b8 <Adv_Request+0xc8>)
 800b006:	881b      	ldrh	r3, [r3, #0]
 800b008:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800b00a:	4b2c      	ldr	r3, [pc, #176]	; (800b0bc <Adv_Request+0xcc>)
 800b00c:	881b      	ldrh	r3, [r3, #0]
 800b00e:	81bb      	strh	r3, [r7, #12]
 800b010:	e005      	b.n	800b01e <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800b012:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800b016:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800b018:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800b01c:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800b01e:	4b28      	ldr	r3, [pc, #160]	; (800b0c0 <Adv_Request+0xd0>)
 800b020:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800b024:	4618      	mov	r0, r3
 800b026:	f7f6 fbc9 	bl	80017bc <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);
    if ((New_Status == APP_BLE_LP_ADV)
 800b02a:	79fb      	ldrb	r3, [r7, #7]
 800b02c:	2b02      	cmp	r3, #2
 800b02e:	d10d      	bne.n	800b04c <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800b030:	4b23      	ldr	r3, [pc, #140]	; (800b0c0 <Adv_Request+0xd0>)
 800b032:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800b036:	2b01      	cmp	r3, #1
 800b038:	d004      	beq.n	800b044 <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800b03a:	4b21      	ldr	r3, [pc, #132]	; (800b0c0 <Adv_Request+0xd0>)
 800b03c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800b040:	2b02      	cmp	r3, #2
 800b042:	d103      	bne.n	800b04c <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 800b044:	f7fd fde1 	bl	8008c0a <aci_gap_set_non_discoverable>
 800b048:	4603      	mov	r3, r0
 800b04a:	72fb      	strb	r3, [r7, #11]
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 800b04c:	4a1c      	ldr	r2, [pc, #112]	; (800b0c0 <Adv_Request+0xd0>)
 800b04e:	79fb      	ldrb	r3, [r7, #7]
 800b050:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 800b054:	4b1a      	ldr	r3, [pc, #104]	; (800b0c0 <Adv_Request+0xd0>)
 800b056:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b05a:	89b8      	ldrh	r0, [r7, #12]
 800b05c:	89f9      	ldrh	r1, [r7, #14]
 800b05e:	2200      	movs	r2, #0
 800b060:	9206      	str	r2, [sp, #24]
 800b062:	2200      	movs	r2, #0
 800b064:	9205      	str	r2, [sp, #20]
 800b066:	4a17      	ldr	r2, [pc, #92]	; (800b0c4 <Adv_Request+0xd4>)
 800b068:	9204      	str	r2, [sp, #16]
 800b06a:	9303      	str	r3, [sp, #12]
 800b06c:	4b16      	ldr	r3, [pc, #88]	; (800b0c8 <Adv_Request+0xd8>)
 800b06e:	9302      	str	r3, [sp, #8]
 800b070:	2308      	movs	r3, #8
 800b072:	9301      	str	r3, [sp, #4]
 800b074:	2300      	movs	r3, #0
 800b076:	9300      	str	r3, [sp, #0]
 800b078:	2300      	movs	r3, #0
 800b07a:	4602      	mov	r2, r0
 800b07c:	2000      	movs	r0, #0
 800b07e:	f7fd fded 	bl	8008c5c <aci_gap_set_discoverable>
 800b082:	4603      	mov	r3, r0
 800b084:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);
    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 800b086:	4911      	ldr	r1, [pc, #68]	; (800b0cc <Adv_Request+0xdc>)
 800b088:	200e      	movs	r0, #14
 800b08a:	f7fe f857 	bl	800913c <aci_gap_update_adv_data>
 800b08e:	4603      	mov	r3, r0
 800b090:	72fb      	strb	r3, [r7, #11]

     if (ret == BLE_STATUS_SUCCESS)
 800b092:	7afb      	ldrb	r3, [r7, #11]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d10a      	bne.n	800b0ae <Adv_Request+0xbe>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 800b098:	79fb      	ldrb	r3, [r7, #7]
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	d107      	bne.n	800b0ae <Adv_Request+0xbe>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800b09e:	4b08      	ldr	r3, [pc, #32]	; (800b0c0 <Adv_Request+0xd0>)
 800b0a0:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800b0a4:	490a      	ldr	r1, [pc, #40]	; (800b0d0 <Adv_Request+0xe0>)
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f7f6 fc12 	bl	80018d0 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 800b0ac:	bf00      	nop
 800b0ae:	bf00      	nop
}
 800b0b0:	3710      	adds	r7, #16
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
 800b0b6:	bf00      	nop
 800b0b8:	200001b0 	.word	0x200001b0
 800b0bc:	200001b2 	.word	0x200001b2
 800b0c0:	2000011c 	.word	0x2000011c
 800b0c4:	20000145 	.word	0x20000145
 800b0c8:	0800b970 	.word	0x0800b970
 800b0cc:	2000001c 	.word	0x2000001c
 800b0d0:	0001e046 	.word	0x0001e046

0800b0d4 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b086      	sub	sp, #24
 800b0d8:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800b0da:	f7ff fd3d 	bl	800ab58 <LL_FLASH_GetUDN>
 800b0de:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0e6:	d023      	beq.n	800b130 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800b0e8:	f7ff fd4e 	bl	800ab88 <LL_FLASH_GetSTCompanyID>
 800b0ec:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800b0ee:	f7ff fd3f 	bl	800ab70 <LL_FLASH_GetDeviceID>
 800b0f2:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	b2da      	uxtb	r2, r3
 800b0f8:	4b16      	ldr	r3, [pc, #88]	; (800b154 <BleGetBdAddress+0x80>)
 800b0fa:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	0a1b      	lsrs	r3, r3, #8
 800b100:	b2da      	uxtb	r2, r3
 800b102:	4b14      	ldr	r3, [pc, #80]	; (800b154 <BleGetBdAddress+0x80>)
 800b104:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	0c1b      	lsrs	r3, r3, #16
 800b10a:	b2da      	uxtb	r2, r3
 800b10c:	4b11      	ldr	r3, [pc, #68]	; (800b154 <BleGetBdAddress+0x80>)
 800b10e:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	b2da      	uxtb	r2, r3
 800b114:	4b0f      	ldr	r3, [pc, #60]	; (800b154 <BleGetBdAddress+0x80>)
 800b116:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	b2da      	uxtb	r2, r3
 800b11c:	4b0d      	ldr	r3, [pc, #52]	; (800b154 <BleGetBdAddress+0x80>)
 800b11e:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	0a1b      	lsrs	r3, r3, #8
 800b124:	b2da      	uxtb	r2, r3
 800b126:	4b0b      	ldr	r3, [pc, #44]	; (800b154 <BleGetBdAddress+0x80>)
 800b128:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 800b12a:	4b0a      	ldr	r3, [pc, #40]	; (800b154 <BleGetBdAddress+0x80>)
 800b12c:	617b      	str	r3, [r7, #20]
 800b12e:	e00b      	b.n	800b148 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800b130:	2000      	movs	r0, #0
 800b132:	f7fe ff05 	bl	8009f40 <OTP_Read>
 800b136:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d002      	beq.n	800b144 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	617b      	str	r3, [r7, #20]
 800b142:	e001      	b.n	800b148 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 800b144:	4b04      	ldr	r3, [pc, #16]	; (800b158 <BleGetBdAddress+0x84>)
 800b146:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 800b148:	697b      	ldr	r3, [r7, #20]
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3718      	adds	r7, #24
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
 800b152:	bf00      	nop
 800b154:	20000470 	.word	0x20000470
 800b158:	0800b948 	.word	0x0800b948

0800b15c <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b082      	sub	sp, #8
 800b160:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800b162:	4b0a      	ldr	r3, [pc, #40]	; (800b18c <Adv_Cancel+0x30>)
 800b164:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800b168:	2b05      	cmp	r3, #5
 800b16a:	d00a      	beq.n	800b182 <Adv_Cancel+0x26>

  {

    tBleStatus result = 0x00;
 800b16c:	2300      	movs	r3, #0
 800b16e:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 800b170:	f7fd fd4b 	bl	8008c0a <aci_gap_set_non_discoverable>
 800b174:	4603      	mov	r3, r0
 800b176:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b178:	4b04      	ldr	r3, [pc, #16]	; (800b18c <Adv_Cancel+0x30>)
 800b17a:	2200      	movs	r2, #0
 800b17c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 800b180:	bf00      	nop
 800b182:	bf00      	nop
}
 800b184:	3708      	adds	r7, #8
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}
 800b18a:	bf00      	nop
 800b18c:	2000011c 	.word	0x2000011c

0800b190 <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 800b190:	b580      	push	{r7, lr}
 800b192:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 800b194:	2100      	movs	r1, #0
 800b196:	2001      	movs	r0, #1
 800b198:	f7f7 fb06 	bl	80027a8 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 800b19c:	bf00      	nop
}
 800b19e:	bd80      	pop	{r7, pc}

0800b1a0 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 800b1a0:	b480      	push	{r7}
 800b1a2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */

/* USER CODE END Switch_OFF_GPIO */
}
 800b1a4:	bf00      	nop
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ac:	4770      	bx	lr

0800b1ae <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800b1ae:	b580      	push	{r7, lr}
 800b1b0:	b082      	sub	sp, #8
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800b1b6:	2100      	movs	r1, #0
 800b1b8:	2004      	movs	r0, #4
 800b1ba:	f7f7 faf5 	bl	80027a8 <UTIL_SEQ_SetTask>
  return;
 800b1be:	bf00      	nop
}
 800b1c0:	3708      	adds	r7, #8
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}

0800b1c6 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800b1c6:	b580      	push	{r7, lr}
 800b1c8:	b082      	sub	sp, #8
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800b1ce:	2001      	movs	r0, #1
 800b1d0:	f7f7 fb50 	bl	8002874 <UTIL_SEQ_SetEvt>
  return;
 800b1d4:	bf00      	nop
}
 800b1d6:	3708      	adds	r7, #8
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}

0800b1dc <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b082      	sub	sp, #8
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800b1e4:	2001      	movs	r0, #1
 800b1e6:	f7f7 fb63 	bl	80028b0 <UTIL_SEQ_WaitEvt>
  return;
 800b1ea:	bf00      	nop
}
 800b1ec:	3708      	adds	r7, #8
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}

0800b1f2 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 800b1f2:	b580      	push	{r7, lr}
 800b1f4:	b084      	sub	sp, #16
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload; 
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	685b      	ldr	r3, [r3, #4]
 800b202:	3308      	adds	r3, #8
 800b204:	4618      	mov	r0, r3
 800b206:	f7ff fa9b 	bl	800a740 <SVCCTL_UserEvtRx>
 800b20a:	4603      	mov	r3, r0
 800b20c:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800b20e:	7afb      	ldrb	r3, [r7, #11]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d003      	beq.n	800b21c <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	2201      	movs	r2, #1
 800b218:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 800b21a:	e002      	b.n	800b222 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	2200      	movs	r2, #0
 800b220:	701a      	strb	r2, [r3, #0]
}
 800b222:	bf00      	nop
 800b224:	3710      	adds	r7, #16
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}

0800b22a <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 800b22a:	b580      	push	{r7, lr}
 800b22c:	b084      	sub	sp, #16
 800b22e:	af00      	add	r7, sp, #0
 800b230:	4603      	mov	r3, r0
 800b232:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 800b234:	79fb      	ldrb	r3, [r7, #7]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d002      	beq.n	800b240 <BLE_StatusNot+0x16>
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	d006      	beq.n	800b24c <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 800b23e:	e00b      	b.n	800b258 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800b240:	23ff      	movs	r3, #255	; 0xff
 800b242:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800b244:	68f8      	ldr	r0, [r7, #12]
 800b246:	f7f7 fad9 	bl	80027fc <UTIL_SEQ_PauseTask>
      break;
 800b24a:	e005      	b.n	800b258 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800b24c:	23ff      	movs	r3, #255	; 0xff
 800b24e:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800b250:	68f8      	ldr	r0, [r7, #12]
 800b252:	f7f7 faf1 	bl	8002838 <UTIL_SEQ_ResumeTask>
      break;
 800b256:	bf00      	nop
  }
  return;
 800b258:	bf00      	nop
}
 800b25a:	3710      	adds	r7, #16
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <P2PS_STM_App_Notification>:
static void P2PS_DataChange_Timer_Callback(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	781b      	ldrb	r3, [r3, #0]
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	d00b      	beq.n	800b288 <P2PS_STM_App_Notification+0x28>
 800b270:	2b03      	cmp	r3, #3
 800b272:	d00d      	beq.n	800b290 <P2PS_STM_App_Notification+0x30>
 800b274:	2b00      	cmp	r3, #0
 800b276:	d000      	beq.n	800b27a <P2PS_STM_App_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 800b278:	e00b      	b.n	800b292 <P2PS_STM_App_Notification+0x32>
    	P2P_Server_App_Context.NotificationStatus = 1;
 800b27a:	4b08      	ldr	r3, [pc, #32]	; (800b29c <P2PS_STM_App_Notification+0x3c>)
 800b27c:	2201      	movs	r2, #1
 800b27e:	701a      	strb	r2, [r3, #0]
    	HAL_TIM_Base_Start_IT(&htim16);
 800b280:	4807      	ldr	r0, [pc, #28]	; (800b2a0 <P2PS_STM_App_Notification+0x40>)
 800b282:	f7fb ff19 	bl	80070b8 <HAL_TIM_Base_Start_IT>
      break;
 800b286:	e004      	b.n	800b292 <P2PS_STM_App_Notification+0x32>
    	P2P_Server_App_Context.NotificationStatus = 0;
 800b288:	4b04      	ldr	r3, [pc, #16]	; (800b29c <P2PS_STM_App_Notification+0x3c>)
 800b28a:	2200      	movs	r2, #0
 800b28c:	701a      	strb	r2, [r3, #0]
      break;
 800b28e:	e000      	b.n	800b292 <P2PS_STM_App_Notification+0x32>
      break;
 800b290:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800b292:	bf00      	nop
}
 800b294:	3708      	adds	r7, #8
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}
 800b29a:	bf00      	nop
 800b29c:	200001b4 	.word	0x200001b4
 800b2a0:	20000604 	.word	0x20000604

0800b2a4 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b083      	sub	sp, #12
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	781b      	ldrb	r3, [r3, #0]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d002      	beq.n	800b2ba <P2PS_APP_Notification+0x16>
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d002      	beq.n	800b2be <P2PS_APP_Notification+0x1a>
    
    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800b2b8:	e002      	b.n	800b2c0 <P2PS_APP_Notification+0x1c>
    break;
 800b2ba:	bf00      	nop
 800b2bc:	e000      	b.n	800b2c0 <P2PS_APP_Notification+0x1c>
    break;
 800b2be:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 800b2c0:	bf00      	nop
}
 800b2c2:	370c      	adds	r7, #12
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr

0800b2cc <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */
	/* Register task used to update the characteristic (send the notification) */
		UTIL_SEQ_RegTask(1 << CFG_MY_TASK_NOTIFY_DATA ,UTIL_SEQ_RFU, P2PS_Send_Notification_Task);
 800b2d0:	4a05      	ldr	r2, [pc, #20]	; (800b2e8 <P2PS_APP_Init+0x1c>)
 800b2d2:	2100      	movs	r1, #0
 800b2d4:	2008      	movs	r0, #8
 800b2d6:	f7f7 fa47 	bl	8002768 <UTIL_SEQ_RegTask>
//				P2PS_DataChange_Timer_Callback);

	  /**
	   * Initialize Template application context
	   */
	  P2P_Server_App_Context.NotificationStatus=0;
 800b2da:	4b04      	ldr	r3, [pc, #16]	; (800b2ec <P2PS_APP_Init+0x20>)
 800b2dc:	2200      	movs	r2, #0
 800b2de:	701a      	strb	r2, [r3, #0]
	  P2PS_APP_context_Init();
 800b2e0:	f000 f824 	bl	800b32c <P2PS_APP_context_Init>
/* USER CODE END P2PS_APP_Init */
  return;
 800b2e4:	bf00      	nop
}
 800b2e6:	bd80      	pop	{r7, pc}
 800b2e8:	0800b2f1 	.word	0x0800b2f1
 800b2ec:	200001b4 	.word	0x200001b4

0800b2f0 <P2PS_Send_Notification_Task>:

/* USER CODE BEGIN FD */

static void P2PS_Send_Notification_Task(void)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b0b4      	sub	sp, #208	; 0xd0
 800b2f4:	af00      	add	r7, sp, #0
  /* Update P2P_NOTIFY characteristic */
	uint8_t value[PAYLOAD_LENGTH] = {0};
 800b2f6:	463b      	mov	r3, r7
 800b2f8:	22cd      	movs	r2, #205	; 0xcd
 800b2fa:	2100      	movs	r1, #0
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f000 fa70 	bl	800b7e2 <memset>

	if(P2P_Server_App_Context.NotificationStatus)
 800b302:	4b09      	ldr	r3, [pc, #36]	; (800b328 <P2PS_Send_Notification_Task+0x38>)
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d00a      	beq.n	800b320 <P2PS_Send_Notification_Task+0x30>
	{
		get_buffer_values(&value[0]);
 800b30a:	463b      	mov	r3, r7
 800b30c:	4618      	mov	r0, r3
 800b30e:	f7f6 fe7d 	bl	800200c <get_buffer_values>
//		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
		P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID,&value[0]);
 800b312:	463b      	mov	r3, r7
 800b314:	4619      	mov	r1, r3
 800b316:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800b31a:	f7fe ff3b 	bl	800a194 <P2PS_STM_App_Update_Char>
	else
	{

	}

  return;
 800b31e:	bf00      	nop
 800b320:	bf00      	nop
}
 800b322:	37d0      	adds	r7, #208	; 0xd0
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}
 800b328:	200001b4 	.word	0x200001b4

0800b32c <P2PS_APP_context_Init>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
static void P2PS_APP_context_Init(void)
{
 800b32c:	b480      	push	{r7}
 800b32e:	af00      	add	r7, sp, #0
  P2P_Server_App_Context.Parameter = 0;
 800b330:	4b0b      	ldr	r3, [pc, #44]	; (800b360 <P2PS_APP_context_Init+0x34>)
 800b332:	2200      	movs	r2, #0
 800b334:	805a      	strh	r2, [r3, #2]
  P2P_Server_App_Context.ACC.X = 0;
 800b336:	4b0a      	ldr	r3, [pc, #40]	; (800b360 <P2PS_APP_context_Init+0x34>)
 800b338:	2200      	movs	r2, #0
 800b33a:	809a      	strh	r2, [r3, #4]
  P2P_Server_App_Context.ACC.Y = 0;
 800b33c:	4b08      	ldr	r3, [pc, #32]	; (800b360 <P2PS_APP_context_Init+0x34>)
 800b33e:	2200      	movs	r2, #0
 800b340:	80da      	strh	r2, [r3, #6]
  P2P_Server_App_Context.ACC.Z = 0;
 800b342:	4b07      	ldr	r3, [pc, #28]	; (800b360 <P2PS_APP_context_Init+0x34>)
 800b344:	2200      	movs	r2, #0
 800b346:	811a      	strh	r2, [r3, #8]
  P2P_Server_App_Context.ECG.ecg_value = 0;
 800b348:	4b05      	ldr	r3, [pc, #20]	; (800b360 <P2PS_APP_context_Init+0x34>)
 800b34a:	2200      	movs	r2, #0
 800b34c:	815a      	strh	r2, [r3, #10]
  P2P_Server_App_Context.PPG.ppg_value = 0;
 800b34e:	4b04      	ldr	r3, [pc, #16]	; (800b360 <P2PS_APP_context_Init+0x34>)
 800b350:	2200      	movs	r2, #0
 800b352:	819a      	strh	r2, [r3, #12]
}
 800b354:	bf00      	nop
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr
 800b35e:	bf00      	nop
 800b360:	200001b4 	.word	0x200001b4

0800b364 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 800b364:	b480      	push	{r7}
 800b366:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800b368:	4b05      	ldr	r3, [pc, #20]	; (800b380 <LL_PWR_EnableBootC2+0x1c>)
 800b36a:	68db      	ldr	r3, [r3, #12]
 800b36c:	4a04      	ldr	r2, [pc, #16]	; (800b380 <LL_PWR_EnableBootC2+0x1c>)
 800b36e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b372:	60d3      	str	r3, [r2, #12]
}
 800b374:	bf00      	nop
 800b376:	46bd      	mov	sp, r7
 800b378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37c:	4770      	bx	lr
 800b37e:	bf00      	nop
 800b380:	58000400 	.word	0x58000400

0800b384 <LL_AHB3_GRP1_EnableClock>:
{
 800b384:	b480      	push	{r7}
 800b386:	b085      	sub	sp, #20
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800b38c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b390:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b392:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	4313      	orrs	r3, r2
 800b39a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800b39c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b3a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	4013      	ands	r3, r2
 800b3a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
}
 800b3aa:	bf00      	nop
 800b3ac:	3714      	adds	r7, #20
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr

0800b3b6 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800b3b6:	b480      	push	{r7}
 800b3b8:	b083      	sub	sp, #12
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	601a      	str	r2, [r3, #0]
}
 800b3ca:	bf00      	nop
 800b3cc:	370c      	adds	r7, #12
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr

0800b3d6 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800b3d6:	b480      	push	{r7}
 800b3d8:	b083      	sub	sp, #12
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f043 0201 	orr.w	r2, r3, #1
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	601a      	str	r2, [r3, #0]
}
 800b3ea:	bf00      	nop
 800b3ec:	370c      	adds	r7, #12
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f4:	4770      	bx	lr

0800b3f6 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b3f6:	b480      	push	{r7}
 800b3f8:	b083      	sub	sp, #12
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	6078      	str	r0, [r7, #4]
 800b3fe:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	685a      	ldr	r2, [r3, #4]
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	041b      	lsls	r3, r3, #16
 800b408:	43db      	mvns	r3, r3
 800b40a:	401a      	ands	r2, r3
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	605a      	str	r2, [r3, #4]
}
 800b410:	bf00      	nop
 800b412:	370c      	adds	r7, #12
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr

0800b41c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b083      	sub	sp, #12
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
 800b424:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	685a      	ldr	r2, [r3, #4]
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	041b      	lsls	r3, r3, #16
 800b42e:	431a      	orrs	r2, r3
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	605a      	str	r2, [r3, #4]
}
 800b434:	bf00      	nop
 800b436:	370c      	adds	r7, #12
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr

0800b440 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b440:	b480      	push	{r7}
 800b442:	b083      	sub	sp, #12
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
 800b448:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	685a      	ldr	r2, [r3, #4]
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	43db      	mvns	r3, r3
 800b452:	401a      	ands	r2, r3
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	605a      	str	r2, [r3, #4]
}
 800b458:	bf00      	nop
 800b45a:	370c      	adds	r7, #12
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr

0800b464 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b464:	b480      	push	{r7}
 800b466:	b083      	sub	sp, #12
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	683a      	ldr	r2, [r7, #0]
 800b472:	609a      	str	r2, [r3, #8]
}
 800b474:	bf00      	nop
 800b476:	370c      	adds	r7, #12
 800b478:	46bd      	mov	sp, r7
 800b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47e:	4770      	bx	lr

0800b480 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b480:	b480      	push	{r7}
 800b482:	b083      	sub	sp, #12
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	041a      	lsls	r2, r3, #16
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	609a      	str	r2, [r3, #8]
}
 800b492:	bf00      	nop
 800b494:	370c      	adds	r7, #12
 800b496:	46bd      	mov	sp, r7
 800b498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49c:	4770      	bx	lr

0800b49e <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800b49e:	b480      	push	{r7}
 800b4a0:	b083      	sub	sp, #12
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	6078      	str	r0, [r7, #4]
 800b4a6:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	68da      	ldr	r2, [r3, #12]
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	4013      	ands	r3, r2
 800b4b0:	683a      	ldr	r2, [r7, #0]
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	d101      	bne.n	800b4ba <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	e000      	b.n	800b4bc <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800b4ba:	2300      	movs	r3, #0
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	370c      	adds	r7, #12
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr

0800b4c8 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b083      	sub	sp, #12
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	69da      	ldr	r2, [r3, #28]
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	4013      	ands	r3, r2
 800b4da:	683a      	ldr	r2, [r7, #0]
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d101      	bne.n	800b4e4 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	e000      	b.n	800b4e6 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800b4e4:	2300      	movs	r3, #0
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	370c      	adds	r7, #12
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f0:	4770      	bx	lr
	...

0800b4f4 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800b4f8:	2102      	movs	r1, #2
 800b4fa:	4819      	ldr	r0, [pc, #100]	; (800b560 <HW_IPCC_Rx_Handler+0x6c>)
 800b4fc:	f7ff ffe4 	bl	800b4c8 <LL_C2_IPCC_IsActiveFlag_CHx>
 800b500:	4603      	mov	r3, r0
 800b502:	2b00      	cmp	r3, #0
 800b504:	d009      	beq.n	800b51a <HW_IPCC_Rx_Handler+0x26>
 800b506:	4b16      	ldr	r3, [pc, #88]	; (800b560 <HW_IPCC_Rx_Handler+0x6c>)
 800b508:	685b      	ldr	r3, [r3, #4]
 800b50a:	43db      	mvns	r3, r3
 800b50c:	f003 0302 	and.w	r3, r3, #2
 800b510:	2b00      	cmp	r3, #0
 800b512:	d002      	beq.n	800b51a <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800b514:	f000 f8de 	bl	800b6d4 <HW_IPCC_SYS_EvtHandler>
 800b518:	e01f      	b.n	800b55a <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CliNotifEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800b51a:	2101      	movs	r1, #1
 800b51c:	4810      	ldr	r0, [pc, #64]	; (800b560 <HW_IPCC_Rx_Handler+0x6c>)
 800b51e:	f7ff ffd3 	bl	800b4c8 <LL_C2_IPCC_IsActiveFlag_CHx>
 800b522:	4603      	mov	r3, r0
 800b524:	2b00      	cmp	r3, #0
 800b526:	d008      	beq.n	800b53a <HW_IPCC_Rx_Handler+0x46>
 800b528:	4b0d      	ldr	r3, [pc, #52]	; (800b560 <HW_IPCC_Rx_Handler+0x6c>)
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	f003 0301 	and.w	r3, r3, #1
 800b530:	2b00      	cmp	r3, #0
 800b532:	d102      	bne.n	800b53a <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800b534:	f000 f892 	bl	800b65c <HW_IPCC_BLE_EvtHandler>
 800b538:	e00f      	b.n	800b55a <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800b53a:	2108      	movs	r1, #8
 800b53c:	4808      	ldr	r0, [pc, #32]	; (800b560 <HW_IPCC_Rx_Handler+0x6c>)
 800b53e:	f7ff ffc3 	bl	800b4c8 <LL_C2_IPCC_IsActiveFlag_CHx>
 800b542:	4603      	mov	r3, r0
 800b544:	2b00      	cmp	r3, #0
 800b546:	d009      	beq.n	800b55c <HW_IPCC_Rx_Handler+0x68>
 800b548:	4b05      	ldr	r3, [pc, #20]	; (800b560 <HW_IPCC_Rx_Handler+0x6c>)
 800b54a:	685b      	ldr	r3, [r3, #4]
 800b54c:	43db      	mvns	r3, r3
 800b54e:	f003 0308 	and.w	r3, r3, #8
 800b552:	2b00      	cmp	r3, #0
 800b554:	d002      	beq.n	800b55c <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800b556:	f000 f909 	bl	800b76c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800b55a:	bf00      	nop
 800b55c:	bf00      	nop
}
 800b55e:	bd80      	pop	{r7, pc}
 800b560:	58000c00 	.word	0x58000c00

0800b564 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800b564:	b580      	push	{r7, lr}
 800b566:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800b568:	2102      	movs	r1, #2
 800b56a:	4822      	ldr	r0, [pc, #136]	; (800b5f4 <HW_IPCC_Tx_Handler+0x90>)
 800b56c:	f7ff ff97 	bl	800b49e <LL_C1_IPCC_IsActiveFlag_CHx>
 800b570:	4603      	mov	r3, r0
 800b572:	2b00      	cmp	r3, #0
 800b574:	d109      	bne.n	800b58a <HW_IPCC_Tx_Handler+0x26>
 800b576:	4b1f      	ldr	r3, [pc, #124]	; (800b5f4 <HW_IPCC_Tx_Handler+0x90>)
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	43db      	mvns	r3, r3
 800b57c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b580:	2b00      	cmp	r3, #0
 800b582:	d002      	beq.n	800b58a <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800b584:	f000 f89a 	bl	800b6bc <HW_IPCC_SYS_CmdEvtHandler>
 800b588:	e031      	b.n	800b5ee <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800b58a:	2102      	movs	r1, #2
 800b58c:	4819      	ldr	r0, [pc, #100]	; (800b5f4 <HW_IPCC_Tx_Handler+0x90>)
 800b58e:	f7ff ff86 	bl	800b49e <LL_C1_IPCC_IsActiveFlag_CHx>
 800b592:	4603      	mov	r3, r0
 800b594:	2b00      	cmp	r3, #0
 800b596:	d109      	bne.n	800b5ac <HW_IPCC_Tx_Handler+0x48>
 800b598:	4b16      	ldr	r3, [pc, #88]	; (800b5f4 <HW_IPCC_Tx_Handler+0x90>)
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	43db      	mvns	r3, r3
 800b59e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d002      	beq.n	800b5ac <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800b5a6:	f000 f889 	bl	800b6bc <HW_IPCC_SYS_CmdEvtHandler>
 800b5aa:	e020      	b.n	800b5ee <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800b5ac:	2108      	movs	r1, #8
 800b5ae:	4811      	ldr	r0, [pc, #68]	; (800b5f4 <HW_IPCC_Tx_Handler+0x90>)
 800b5b0:	f7ff ff75 	bl	800b49e <LL_C1_IPCC_IsActiveFlag_CHx>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d109      	bne.n	800b5ce <HW_IPCC_Tx_Handler+0x6a>
 800b5ba:	4b0e      	ldr	r3, [pc, #56]	; (800b5f4 <HW_IPCC_Tx_Handler+0x90>)
 800b5bc:	685b      	ldr	r3, [r3, #4]
 800b5be:	43db      	mvns	r3, r3
 800b5c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d002      	beq.n	800b5ce <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 800b5c8:	f000 f8b2 	bl	800b730 <HW_IPCC_MM_FreeBufHandler>
 800b5cc:	e00f      	b.n	800b5ee <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800b5ce:	2120      	movs	r1, #32
 800b5d0:	4808      	ldr	r0, [pc, #32]	; (800b5f4 <HW_IPCC_Tx_Handler+0x90>)
 800b5d2:	f7ff ff64 	bl	800b49e <LL_C1_IPCC_IsActiveFlag_CHx>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d109      	bne.n	800b5f0 <HW_IPCC_Tx_Handler+0x8c>
 800b5dc:	4b05      	ldr	r3, [pc, #20]	; (800b5f4 <HW_IPCC_Tx_Handler+0x90>)
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	43db      	mvns	r3, r3
 800b5e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d002      	beq.n	800b5f0 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800b5ea:	f000 f843 	bl	800b674 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800b5ee:	bf00      	nop
 800b5f0:	bf00      	nop
}
 800b5f2:	bd80      	pop	{r7, pc}
 800b5f4:	58000c00 	.word	0x58000c00

0800b5f8 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	af00      	add	r7, sp, #0
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800b5fc:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800b5fe:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800b600:	f7ff feb0 	bl	800b364 <LL_PWR_EnableBootC2>

  return;
 800b604:	bf00      	nop
}
 800b606:	bd80      	pop	{r7, pc}

0800b608 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800b60c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b610:	f7ff feb8 	bl	800b384 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800b614:	4806      	ldr	r0, [pc, #24]	; (800b630 <HW_IPCC_Init+0x28>)
 800b616:	f7ff fede 	bl	800b3d6 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800b61a:	4805      	ldr	r0, [pc, #20]	; (800b630 <HW_IPCC_Init+0x28>)
 800b61c:	f7ff fecb 	bl	800b3b6 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800b620:	202c      	movs	r0, #44	; 0x2c
 800b622:	f7f7 ff2e 	bl	8003482 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800b626:	202d      	movs	r0, #45	; 0x2d
 800b628:	f7f7 ff2b 	bl	8003482 <HAL_NVIC_EnableIRQ>

  return;
 800b62c:	bf00      	nop
}
 800b62e:	bd80      	pop	{r7, pc}
 800b630:	58000c00 	.word	0x58000c00

0800b634 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800b634:	b580      	push	{r7, lr}
 800b636:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800b638:	2101      	movs	r1, #1
 800b63a:	4802      	ldr	r0, [pc, #8]	; (800b644 <HW_IPCC_BLE_Init+0x10>)
 800b63c:	f7ff ff00 	bl	800b440 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b640:	bf00      	nop
}
 800b642:	bd80      	pop	{r7, pc}
 800b644:	58000c00 	.word	0x58000c00

0800b648 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800b64c:	2101      	movs	r1, #1
 800b64e:	4802      	ldr	r0, [pc, #8]	; (800b658 <HW_IPCC_BLE_SendCmd+0x10>)
 800b650:	f7ff ff16 	bl	800b480 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800b654:	bf00      	nop
}
 800b656:	bd80      	pop	{r7, pc}
 800b658:	58000c00 	.word	0x58000c00

0800b65c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800b660:	f7ff f944 	bl	800a8ec <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800b664:	2101      	movs	r1, #1
 800b666:	4802      	ldr	r0, [pc, #8]	; (800b670 <HW_IPCC_BLE_EvtHandler+0x14>)
 800b668:	f7ff fefc 	bl	800b464 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800b66c:	bf00      	nop
}
 800b66e:	bd80      	pop	{r7, pc}
 800b670:	58000c00 	.word	0x58000c00

0800b674 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800b674:	b580      	push	{r7, lr}
 800b676:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800b678:	2120      	movs	r1, #32
 800b67a:	4803      	ldr	r0, [pc, #12]	; (800b688 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800b67c:	f7ff fece 	bl	800b41c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800b680:	f7ff f950 	bl	800a924 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800b684:	bf00      	nop
}
 800b686:	bd80      	pop	{r7, pc}
 800b688:	58000c00 	.word	0x58000c00

0800b68c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800b690:	2102      	movs	r1, #2
 800b692:	4802      	ldr	r0, [pc, #8]	; (800b69c <HW_IPCC_SYS_Init+0x10>)
 800b694:	f7ff fed4 	bl	800b440 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b698:	bf00      	nop
}
 800b69a:	bd80      	pop	{r7, pc}
 800b69c:	58000c00 	.word	0x58000c00

0800b6a0 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b6a4:	2102      	movs	r1, #2
 800b6a6:	4804      	ldr	r0, [pc, #16]	; (800b6b8 <HW_IPCC_SYS_SendCmd+0x18>)
 800b6a8:	f7ff feea 	bl	800b480 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b6ac:	2102      	movs	r1, #2
 800b6ae:	4802      	ldr	r0, [pc, #8]	; (800b6b8 <HW_IPCC_SYS_SendCmd+0x18>)
 800b6b0:	f7ff fea1 	bl	800b3f6 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800b6b4:	bf00      	nop
}
 800b6b6:	bd80      	pop	{r7, pc}
 800b6b8:	58000c00 	.word	0x58000c00

0800b6bc <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b6c0:	2102      	movs	r1, #2
 800b6c2:	4803      	ldr	r0, [pc, #12]	; (800b6d0 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800b6c4:	f7ff feaa 	bl	800b41c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800b6c8:	f7ff f974 	bl	800a9b4 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800b6cc:	bf00      	nop
}
 800b6ce:	bd80      	pop	{r7, pc}
 800b6d0:	58000c00 	.word	0x58000c00

0800b6d4 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800b6d8:	f7ff f97c 	bl	800a9d4 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800b6dc:	2102      	movs	r1, #2
 800b6de:	4802      	ldr	r0, [pc, #8]	; (800b6e8 <HW_IPCC_SYS_EvtHandler+0x14>)
 800b6e0:	f7ff fec0 	bl	800b464 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800b6e4:	bf00      	nop
}
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	58000c00 	.word	0x58000c00

0800b6ec <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b082      	sub	sp, #8
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800b6f4:	2108      	movs	r1, #8
 800b6f6:	480c      	ldr	r0, [pc, #48]	; (800b728 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b6f8:	f7ff fed1 	bl	800b49e <LL_C1_IPCC_IsActiveFlag_CHx>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d007      	beq.n	800b712 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800b702:	4a0a      	ldr	r2, [pc, #40]	; (800b72c <HW_IPCC_MM_SendFreeBuf+0x40>)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b708:	2108      	movs	r1, #8
 800b70a:	4807      	ldr	r0, [pc, #28]	; (800b728 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b70c:	f7ff fe73 	bl	800b3f6 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800b710:	e006      	b.n	800b720 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b716:	2108      	movs	r1, #8
 800b718:	4803      	ldr	r0, [pc, #12]	; (800b728 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b71a:	f7ff feb1 	bl	800b480 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800b71e:	bf00      	nop
}
 800b720:	3708      	adds	r7, #8
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop
 800b728:	58000c00 	.word	0x58000c00
 800b72c:	20000478 	.word	0x20000478

0800b730 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800b730:	b580      	push	{r7, lr}
 800b732:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b734:	2108      	movs	r1, #8
 800b736:	4806      	ldr	r0, [pc, #24]	; (800b750 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800b738:	f7ff fe70 	bl	800b41c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800b73c:	4b05      	ldr	r3, [pc, #20]	; (800b754 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b742:	2108      	movs	r1, #8
 800b744:	4802      	ldr	r0, [pc, #8]	; (800b750 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800b746:	f7ff fe9b 	bl	800b480 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800b74a:	bf00      	nop
}
 800b74c:	bd80      	pop	{r7, pc}
 800b74e:	bf00      	nop
 800b750:	58000c00 	.word	0x58000c00
 800b754:	20000478 	.word	0x20000478

0800b758 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800b75c:	2108      	movs	r1, #8
 800b75e:	4802      	ldr	r0, [pc, #8]	; (800b768 <HW_IPCC_TRACES_Init+0x10>)
 800b760:	f7ff fe6e 	bl	800b440 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b764:	bf00      	nop
}
 800b766:	bd80      	pop	{r7, pc}
 800b768:	58000c00 	.word	0x58000c00

0800b76c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800b770:	f7ff f9ce 	bl	800ab10 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800b774:	2108      	movs	r1, #8
 800b776:	4802      	ldr	r0, [pc, #8]	; (800b780 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800b778:	f7ff fe74 	bl	800b464 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800b77c:	bf00      	nop
}
 800b77e:	bd80      	pop	{r7, pc}
 800b780:	58000c00 	.word	0x58000c00

0800b784 <__libc_init_array>:
 800b784:	b570      	push	{r4, r5, r6, lr}
 800b786:	4e0d      	ldr	r6, [pc, #52]	; (800b7bc <__libc_init_array+0x38>)
 800b788:	4c0d      	ldr	r4, [pc, #52]	; (800b7c0 <__libc_init_array+0x3c>)
 800b78a:	1ba4      	subs	r4, r4, r6
 800b78c:	10a4      	asrs	r4, r4, #2
 800b78e:	2500      	movs	r5, #0
 800b790:	42a5      	cmp	r5, r4
 800b792:	d109      	bne.n	800b7a8 <__libc_init_array+0x24>
 800b794:	4e0b      	ldr	r6, [pc, #44]	; (800b7c4 <__libc_init_array+0x40>)
 800b796:	4c0c      	ldr	r4, [pc, #48]	; (800b7c8 <__libc_init_array+0x44>)
 800b798:	f000 f82c 	bl	800b7f4 <_init>
 800b79c:	1ba4      	subs	r4, r4, r6
 800b79e:	10a4      	asrs	r4, r4, #2
 800b7a0:	2500      	movs	r5, #0
 800b7a2:	42a5      	cmp	r5, r4
 800b7a4:	d105      	bne.n	800b7b2 <__libc_init_array+0x2e>
 800b7a6:	bd70      	pop	{r4, r5, r6, pc}
 800b7a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b7ac:	4798      	blx	r3
 800b7ae:	3501      	adds	r5, #1
 800b7b0:	e7ee      	b.n	800b790 <__libc_init_array+0xc>
 800b7b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b7b6:	4798      	blx	r3
 800b7b8:	3501      	adds	r5, #1
 800b7ba:	e7f2      	b.n	800b7a2 <__libc_init_array+0x1e>
 800b7bc:	0800b980 	.word	0x0800b980
 800b7c0:	0800b980 	.word	0x0800b980
 800b7c4:	0800b980 	.word	0x0800b980
 800b7c8:	0800b984 	.word	0x0800b984

0800b7cc <memcpy>:
 800b7cc:	b510      	push	{r4, lr}
 800b7ce:	1e43      	subs	r3, r0, #1
 800b7d0:	440a      	add	r2, r1
 800b7d2:	4291      	cmp	r1, r2
 800b7d4:	d100      	bne.n	800b7d8 <memcpy+0xc>
 800b7d6:	bd10      	pop	{r4, pc}
 800b7d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b7e0:	e7f7      	b.n	800b7d2 <memcpy+0x6>

0800b7e2 <memset>:
 800b7e2:	4402      	add	r2, r0
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d100      	bne.n	800b7ec <memset+0xa>
 800b7ea:	4770      	bx	lr
 800b7ec:	f803 1b01 	strb.w	r1, [r3], #1
 800b7f0:	e7f9      	b.n	800b7e6 <memset+0x4>
	...

0800b7f4 <_init>:
 800b7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7f6:	bf00      	nop
 800b7f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7fa:	bc08      	pop	{r3}
 800b7fc:	469e      	mov	lr, r3
 800b7fe:	4770      	bx	lr

0800b800 <_fini>:
 800b800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b802:	bf00      	nop
 800b804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b806:	bc08      	pop	{r3}
 800b808:	469e      	mov	lr, r3
 800b80a:	4770      	bx	lr
