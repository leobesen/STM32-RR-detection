
SERVER_NUCLEO_LB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6ac  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  0800c7e8  0800c7e8  0001c7e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ca80  0800ca80  0001ca80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ca88  0800ca88  0001ca88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ca8c  0800ca8c  0001ca8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000058  20000004  0800ca90  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  2000005c  0800cae8  0002005c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000003d  200000f8  0800cb81  000200f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000138  0800cbbe  00020138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 000000a8  2000014c  0800cbcf  0002014c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000a38  200001f4  0800cc77  000201f4  2**2
                  ALLOC
 12 ._user_heap_stack 00000c04  20000c2c  0800cc77  00020c2c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       000001b7  20030028  20030028  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 17 .debug_info   0004bfd8  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 000084b0  00000000  00000000  0006c1fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 00003630  00000000  00000000  000746b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 00003268  00000000  00000000  00077ce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_macro  0000ff7d  00000000  00000000  0007af48  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   0003c441  00000000  00000000  0008aec5  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    00116872  00000000  00000000  000c7306  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  001ddb78  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000e4a4  00000000  00000000  001ddbf4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001f4 	.word	0x200001f4
 8000158:	00000000 	.word	0x00000000
 800015c:	0800c7d0 	.word	0x0800c7d0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001f8 	.word	0x200001f8
 8000178:	0800c7d0 	.word	0x0800c7d0

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800019c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001a0:	f000 b972 	b.w	8000488 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	4604      	mov	r4, r0
 80001c4:	4688      	mov	r8, r1
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d14b      	bne.n	8000262 <__udivmoddi4+0xa6>
 80001ca:	428a      	cmp	r2, r1
 80001cc:	4615      	mov	r5, r2
 80001ce:	d967      	bls.n	80002a0 <__udivmoddi4+0xe4>
 80001d0:	fab2 f282 	clz	r2, r2
 80001d4:	b14a      	cbz	r2, 80001ea <__udivmoddi4+0x2e>
 80001d6:	f1c2 0720 	rsb	r7, r2, #32
 80001da:	fa01 f302 	lsl.w	r3, r1, r2
 80001de:	fa20 f707 	lsr.w	r7, r0, r7
 80001e2:	4095      	lsls	r5, r2
 80001e4:	ea47 0803 	orr.w	r8, r7, r3
 80001e8:	4094      	lsls	r4, r2
 80001ea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001ee:	0c23      	lsrs	r3, r4, #16
 80001f0:	fbb8 f7fe 	udiv	r7, r8, lr
 80001f4:	fa1f fc85 	uxth.w	ip, r5
 80001f8:	fb0e 8817 	mls	r8, lr, r7, r8
 80001fc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000200:	fb07 f10c 	mul.w	r1, r7, ip
 8000204:	4299      	cmp	r1, r3
 8000206:	d909      	bls.n	800021c <__udivmoddi4+0x60>
 8000208:	18eb      	adds	r3, r5, r3
 800020a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800020e:	f080 811b 	bcs.w	8000448 <__udivmoddi4+0x28c>
 8000212:	4299      	cmp	r1, r3
 8000214:	f240 8118 	bls.w	8000448 <__udivmoddi4+0x28c>
 8000218:	3f02      	subs	r7, #2
 800021a:	442b      	add	r3, r5
 800021c:	1a5b      	subs	r3, r3, r1
 800021e:	b2a4      	uxth	r4, r4
 8000220:	fbb3 f0fe 	udiv	r0, r3, lr
 8000224:	fb0e 3310 	mls	r3, lr, r0, r3
 8000228:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800022c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000230:	45a4      	cmp	ip, r4
 8000232:	d909      	bls.n	8000248 <__udivmoddi4+0x8c>
 8000234:	192c      	adds	r4, r5, r4
 8000236:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800023a:	f080 8107 	bcs.w	800044c <__udivmoddi4+0x290>
 800023e:	45a4      	cmp	ip, r4
 8000240:	f240 8104 	bls.w	800044c <__udivmoddi4+0x290>
 8000244:	3802      	subs	r0, #2
 8000246:	442c      	add	r4, r5
 8000248:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024c:	eba4 040c 	sub.w	r4, r4, ip
 8000250:	2700      	movs	r7, #0
 8000252:	b11e      	cbz	r6, 800025c <__udivmoddi4+0xa0>
 8000254:	40d4      	lsrs	r4, r2
 8000256:	2300      	movs	r3, #0
 8000258:	e9c6 4300 	strd	r4, r3, [r6]
 800025c:	4639      	mov	r1, r7
 800025e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000262:	428b      	cmp	r3, r1
 8000264:	d909      	bls.n	800027a <__udivmoddi4+0xbe>
 8000266:	2e00      	cmp	r6, #0
 8000268:	f000 80eb 	beq.w	8000442 <__udivmoddi4+0x286>
 800026c:	2700      	movs	r7, #0
 800026e:	e9c6 0100 	strd	r0, r1, [r6]
 8000272:	4638      	mov	r0, r7
 8000274:	4639      	mov	r1, r7
 8000276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027a:	fab3 f783 	clz	r7, r3
 800027e:	2f00      	cmp	r7, #0
 8000280:	d147      	bne.n	8000312 <__udivmoddi4+0x156>
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__udivmoddi4+0xd0>
 8000286:	4282      	cmp	r2, r0
 8000288:	f200 80fa 	bhi.w	8000480 <__udivmoddi4+0x2c4>
 800028c:	1a84      	subs	r4, r0, r2
 800028e:	eb61 0303 	sbc.w	r3, r1, r3
 8000292:	2001      	movs	r0, #1
 8000294:	4698      	mov	r8, r3
 8000296:	2e00      	cmp	r6, #0
 8000298:	d0e0      	beq.n	800025c <__udivmoddi4+0xa0>
 800029a:	e9c6 4800 	strd	r4, r8, [r6]
 800029e:	e7dd      	b.n	800025c <__udivmoddi4+0xa0>
 80002a0:	b902      	cbnz	r2, 80002a4 <__udivmoddi4+0xe8>
 80002a2:	deff      	udf	#255	; 0xff
 80002a4:	fab2 f282 	clz	r2, r2
 80002a8:	2a00      	cmp	r2, #0
 80002aa:	f040 808f 	bne.w	80003cc <__udivmoddi4+0x210>
 80002ae:	1b49      	subs	r1, r1, r5
 80002b0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002b4:	fa1f f885 	uxth.w	r8, r5
 80002b8:	2701      	movs	r7, #1
 80002ba:	fbb1 fcfe 	udiv	ip, r1, lr
 80002be:	0c23      	lsrs	r3, r4, #16
 80002c0:	fb0e 111c 	mls	r1, lr, ip, r1
 80002c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c8:	fb08 f10c 	mul.w	r1, r8, ip
 80002cc:	4299      	cmp	r1, r3
 80002ce:	d907      	bls.n	80002e0 <__udivmoddi4+0x124>
 80002d0:	18eb      	adds	r3, r5, r3
 80002d2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0x122>
 80002d8:	4299      	cmp	r1, r3
 80002da:	f200 80cd 	bhi.w	8000478 <__udivmoddi4+0x2bc>
 80002de:	4684      	mov	ip, r0
 80002e0:	1a59      	subs	r1, r3, r1
 80002e2:	b2a3      	uxth	r3, r4
 80002e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e8:	fb0e 1410 	mls	r4, lr, r0, r1
 80002ec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80002f0:	fb08 f800 	mul.w	r8, r8, r0
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0x14c>
 80002f8:	192c      	adds	r4, r5, r4
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0x14a>
 8000300:	45a0      	cmp	r8, r4
 8000302:	f200 80b6 	bhi.w	8000472 <__udivmoddi4+0x2b6>
 8000306:	4618      	mov	r0, r3
 8000308:	eba4 0408 	sub.w	r4, r4, r8
 800030c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000310:	e79f      	b.n	8000252 <__udivmoddi4+0x96>
 8000312:	f1c7 0c20 	rsb	ip, r7, #32
 8000316:	40bb      	lsls	r3, r7
 8000318:	fa22 fe0c 	lsr.w	lr, r2, ip
 800031c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000320:	fa01 f407 	lsl.w	r4, r1, r7
 8000324:	fa20 f50c 	lsr.w	r5, r0, ip
 8000328:	fa21 f30c 	lsr.w	r3, r1, ip
 800032c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000330:	4325      	orrs	r5, r4
 8000332:	fbb3 f9f8 	udiv	r9, r3, r8
 8000336:	0c2c      	lsrs	r4, r5, #16
 8000338:	fb08 3319 	mls	r3, r8, r9, r3
 800033c:	fa1f fa8e 	uxth.w	sl, lr
 8000340:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000344:	fb09 f40a 	mul.w	r4, r9, sl
 8000348:	429c      	cmp	r4, r3
 800034a:	fa02 f207 	lsl.w	r2, r2, r7
 800034e:	fa00 f107 	lsl.w	r1, r0, r7
 8000352:	d90b      	bls.n	800036c <__udivmoddi4+0x1b0>
 8000354:	eb1e 0303 	adds.w	r3, lr, r3
 8000358:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800035c:	f080 8087 	bcs.w	800046e <__udivmoddi4+0x2b2>
 8000360:	429c      	cmp	r4, r3
 8000362:	f240 8084 	bls.w	800046e <__udivmoddi4+0x2b2>
 8000366:	f1a9 0902 	sub.w	r9, r9, #2
 800036a:	4473      	add	r3, lr
 800036c:	1b1b      	subs	r3, r3, r4
 800036e:	b2ad      	uxth	r5, r5
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800037c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000380:	45a2      	cmp	sl, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x1da>
 8000384:	eb1e 0404 	adds.w	r4, lr, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038c:	d26b      	bcs.n	8000466 <__udivmoddi4+0x2aa>
 800038e:	45a2      	cmp	sl, r4
 8000390:	d969      	bls.n	8000466 <__udivmoddi4+0x2aa>
 8000392:	3802      	subs	r0, #2
 8000394:	4474      	add	r4, lr
 8000396:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800039a:	fba0 8902 	umull	r8, r9, r0, r2
 800039e:	eba4 040a 	sub.w	r4, r4, sl
 80003a2:	454c      	cmp	r4, r9
 80003a4:	46c2      	mov	sl, r8
 80003a6:	464b      	mov	r3, r9
 80003a8:	d354      	bcc.n	8000454 <__udivmoddi4+0x298>
 80003aa:	d051      	beq.n	8000450 <__udivmoddi4+0x294>
 80003ac:	2e00      	cmp	r6, #0
 80003ae:	d069      	beq.n	8000484 <__udivmoddi4+0x2c8>
 80003b0:	ebb1 050a 	subs.w	r5, r1, sl
 80003b4:	eb64 0403 	sbc.w	r4, r4, r3
 80003b8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003bc:	40fd      	lsrs	r5, r7
 80003be:	40fc      	lsrs	r4, r7
 80003c0:	ea4c 0505 	orr.w	r5, ip, r5
 80003c4:	e9c6 5400 	strd	r5, r4, [r6]
 80003c8:	2700      	movs	r7, #0
 80003ca:	e747      	b.n	800025c <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f703 	lsr.w	r7, r0, r3
 80003d4:	4095      	lsls	r5, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	fa21 f303 	lsr.w	r3, r1, r3
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	4338      	orrs	r0, r7
 80003e4:	0c01      	lsrs	r1, r0, #16
 80003e6:	fbb3 f7fe 	udiv	r7, r3, lr
 80003ea:	fa1f f885 	uxth.w	r8, r5
 80003ee:	fb0e 3317 	mls	r3, lr, r7, r3
 80003f2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f6:	fb07 f308 	mul.w	r3, r7, r8
 80003fa:	428b      	cmp	r3, r1
 80003fc:	fa04 f402 	lsl.w	r4, r4, r2
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x256>
 8000402:	1869      	adds	r1, r5, r1
 8000404:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000408:	d22f      	bcs.n	800046a <__udivmoddi4+0x2ae>
 800040a:	428b      	cmp	r3, r1
 800040c:	d92d      	bls.n	800046a <__udivmoddi4+0x2ae>
 800040e:	3f02      	subs	r7, #2
 8000410:	4429      	add	r1, r5
 8000412:	1acb      	subs	r3, r1, r3
 8000414:	b281      	uxth	r1, r0
 8000416:	fbb3 f0fe 	udiv	r0, r3, lr
 800041a:	fb0e 3310 	mls	r3, lr, r0, r3
 800041e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000422:	fb00 f308 	mul.w	r3, r0, r8
 8000426:	428b      	cmp	r3, r1
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x27e>
 800042a:	1869      	adds	r1, r5, r1
 800042c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000430:	d217      	bcs.n	8000462 <__udivmoddi4+0x2a6>
 8000432:	428b      	cmp	r3, r1
 8000434:	d915      	bls.n	8000462 <__udivmoddi4+0x2a6>
 8000436:	3802      	subs	r0, #2
 8000438:	4429      	add	r1, r5
 800043a:	1ac9      	subs	r1, r1, r3
 800043c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000440:	e73b      	b.n	80002ba <__udivmoddi4+0xfe>
 8000442:	4637      	mov	r7, r6
 8000444:	4630      	mov	r0, r6
 8000446:	e709      	b.n	800025c <__udivmoddi4+0xa0>
 8000448:	4607      	mov	r7, r0
 800044a:	e6e7      	b.n	800021c <__udivmoddi4+0x60>
 800044c:	4618      	mov	r0, r3
 800044e:	e6fb      	b.n	8000248 <__udivmoddi4+0x8c>
 8000450:	4541      	cmp	r1, r8
 8000452:	d2ab      	bcs.n	80003ac <__udivmoddi4+0x1f0>
 8000454:	ebb8 0a02 	subs.w	sl, r8, r2
 8000458:	eb69 020e 	sbc.w	r2, r9, lr
 800045c:	3801      	subs	r0, #1
 800045e:	4613      	mov	r3, r2
 8000460:	e7a4      	b.n	80003ac <__udivmoddi4+0x1f0>
 8000462:	4660      	mov	r0, ip
 8000464:	e7e9      	b.n	800043a <__udivmoddi4+0x27e>
 8000466:	4618      	mov	r0, r3
 8000468:	e795      	b.n	8000396 <__udivmoddi4+0x1da>
 800046a:	4667      	mov	r7, ip
 800046c:	e7d1      	b.n	8000412 <__udivmoddi4+0x256>
 800046e:	4681      	mov	r9, r0
 8000470:	e77c      	b.n	800036c <__udivmoddi4+0x1b0>
 8000472:	3802      	subs	r0, #2
 8000474:	442c      	add	r4, r5
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0x14c>
 8000478:	f1ac 0c02 	sub.w	ip, ip, #2
 800047c:	442b      	add	r3, r5
 800047e:	e72f      	b.n	80002e0 <__udivmoddi4+0x124>
 8000480:	4638      	mov	r0, r7
 8000482:	e708      	b.n	8000296 <__udivmoddi4+0xda>
 8000484:	4637      	mov	r7, r6
 8000486:	e6e9      	b.n	800025c <__udivmoddi4+0xa0>

08000488 <__aeabi_idiv0>:
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop

0800048c <begin>:
#include <stdlib.h>     /* abs */

float temperature;
//uint16_t IR, RED;

void begin(void){
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0

	  uint8_t temp = 0;
 8000492:	2300      	movs	r3, #0
 8000494:	71fb      	strb	r3, [r7, #7]

	  /*
	   * Reset
	   * */
	  read_byte( MAX30102_MODE_CONFIG, &temp );
 8000496:	1dfb      	adds	r3, r7, #7
 8000498:	4619      	mov	r1, r3
 800049a:	2009      	movs	r0, #9
 800049c:	f000 f8c2 	bl	8000624 <read_byte>

	  temp |= (1<<6);
 80004a0:	79fb      	ldrb	r3, [r7, #7]
 80004a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	71fb      	strb	r3, [r7, #7]
	  write_byte(MAX30102_MODE_CONFIG, temp);
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	4619      	mov	r1, r3
 80004ae:	2009      	movs	r0, #9
 80004b0:	f000 f89c 	bl	80005ec <write_byte>

	  //Wait for the end of reset state/process
	  do
	  {
		read_byte(MAX30102_MODE_CONFIG, &temp);
 80004b4:	1dfb      	adds	r3, r7, #7
 80004b6:	4619      	mov	r1, r3
 80004b8:	2009      	movs	r0, #9
 80004ba:	f000 f8b3 	bl	8000624 <read_byte>
	    temp &= (1<<6);
 80004be:	79fb      	ldrb	r3, [r7, #7]
 80004c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	71fb      	strb	r3, [r7, #7]
	  }
	  while (temp != 0);
 80004c8:	79fb      	ldrb	r3, [r7, #7]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d1f2      	bne.n	80004b4 <begin+0x28>

	  /*
	   * FIFO Config
	   * */
	  write_byte(MAX30102_FIFO_CONFIG, 0x0F);  //sample avg = 1, fifo rollover=false, fifo almost full = 17
 80004ce:	210f      	movs	r1, #15
 80004d0:	2008      	movs	r0, #8
 80004d2:	f000 f88b 	bl	80005ec <write_byte>
	  write_byte(MAX30102_FIFO_WR_PTR, 0x00);
 80004d6:	2100      	movs	r1, #0
 80004d8:	2004      	movs	r0, #4
 80004da:	f000 f887 	bl	80005ec <write_byte>
	  write_byte(MAX30102_OVRFLOW_CTR, 0x00);
 80004de:	2100      	movs	r1, #0
 80004e0:	2005      	movs	r0, #5
 80004e2:	f000 f883 	bl	80005ec <write_byte>
	  write_byte(MAX30102_FIFO_RD_PTR, 0x00);
 80004e6:	2100      	movs	r1, #0
 80004e8:	2006      	movs	r0, #6
 80004ea:	f000 f87f 	bl	80005ec <write_byte>

	  /*
	   * Mode Configuration
	   * */
	  write_byte(MAX30102_MODE_CONFIG, 0x03); //0x02 for Red only, 0x03 for SpO2 mode 0x07 multimode LED
 80004ee:	2103      	movs	r1, #3
 80004f0:	2009      	movs	r0, #9
 80004f2:	f000 f87b 	bl	80005ec <write_byte>
	 // read_byte( MAX30102_MODE_CONFIG, &temp ); //check

	  /*
	   * SPO2 high resolution activation
	   * */
	  write_byte(MAX30102_SPO2_CONFIG, 0x05); // SPO2_ADC range = 2048nA, SPO2 sample rate (100 Hz), LED pulseWidth 118us
 80004f6:	2105      	movs	r1, #5
 80004f8:	200a      	movs	r0, #10
 80004fa:	f000 f877 	bl	80005ec <write_byte>
	  //read_byte( MAX30102_SPO2_CONFIG, &temp );

	  /*
	   * LED RED current level
	   * */
	  write_byte(MAX30102_LED1_PA, 0x1F); //Choose value for ~ 6.2mA for LED1
 80004fe:	211f      	movs	r1, #31
 8000500:	200c      	movs	r0, #12
 8000502:	f000 f873 	bl	80005ec <write_byte>
	  //read_byte( MAX30102_LED1_PA, &temp ); //check

	  /*
	   * LED IR current level
	   * */
	  write_byte(MAX30102_LED2_PA, 0x1F); // Choose value for ~ 6.2mA for LED2
 8000506:	211f      	movs	r1, #31
 8000508:	200d      	movs	r0, #13
 800050a:	f000 f86f 	bl	80005ec <write_byte>
	 // read_byte( MAX30102_LED2_PA, &temp ); //check

}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
	...

08000518 <readFIFO>:


void readFIFO(uint16_t* RED, uint16_t* IR){
 8000518:	b580      	push	{r7, lr}
 800051a:	b08a      	sub	sp, #40	; 0x28
 800051c:	af02      	add	r7, sp, #8
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
   /* Burst read four bytes from the FIFO
    * to obtain 16-bit ADC values for IR
    * and RED reflectance.
    */
	uint8_t data[6];
	uint32_t ir_data = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	61fb      	str	r3, [r7, #28]
	uint32_t red_data = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	61bb      	str	r3, [r7, #24]
	uint32_t un_temp;

	data[0] = MAX30102_FIFO_DATA;
 800052a:	2307      	movs	r3, #7
 800052c:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c3, MAX30102_ADDR, data, 1, 100);
 800052e:	f107 020c 	add.w	r2, r7, #12
 8000532:	2364      	movs	r3, #100	; 0x64
 8000534:	9300      	str	r3, [sp, #0]
 8000536:	2301      	movs	r3, #1
 8000538:	21ae      	movs	r1, #174	; 0xae
 800053a:	482b      	ldr	r0, [pc, #172]	; (80005e8 <readFIFO+0xd0>)
 800053c:	f004 fc72 	bl	8004e24 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c3, MAX30102_ADDR, data, 6, 1000); // Read four times from the FIFO
 8000540:	f107 020c 	add.w	r2, r7, #12
 8000544:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2306      	movs	r3, #6
 800054c:	21ae      	movs	r1, #174	; 0xae
 800054e:	4826      	ldr	r0, [pc, #152]	; (80005e8 <readFIFO+0xd0>)
 8000550:	f004 fd5c 	bl	800500c <HAL_I2C_Master_Receive>

	un_temp=(unsigned char) data[0];
 8000554:	7b3b      	ldrb	r3, [r7, #12]
 8000556:	617b      	str	r3, [r7, #20]
	un_temp<<=16;
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	041b      	lsls	r3, r3, #16
 800055c:	617b      	str	r3, [r7, #20]
	red_data+=un_temp;
 800055e:	69ba      	ldr	r2, [r7, #24]
 8000560:	697b      	ldr	r3, [r7, #20]
 8000562:	4413      	add	r3, r2
 8000564:	61bb      	str	r3, [r7, #24]
	un_temp=(unsigned char) data[1];
 8000566:	7b7b      	ldrb	r3, [r7, #13]
 8000568:	617b      	str	r3, [r7, #20]
	un_temp<<=8;
 800056a:	697b      	ldr	r3, [r7, #20]
 800056c:	021b      	lsls	r3, r3, #8
 800056e:	617b      	str	r3, [r7, #20]
	red_data+=un_temp;
 8000570:	69ba      	ldr	r2, [r7, #24]
 8000572:	697b      	ldr	r3, [r7, #20]
 8000574:	4413      	add	r3, r2
 8000576:	61bb      	str	r3, [r7, #24]
	un_temp=(unsigned char) data[2];
 8000578:	7bbb      	ldrb	r3, [r7, #14]
 800057a:	617b      	str	r3, [r7, #20]
	red_data+=un_temp;
 800057c:	69ba      	ldr	r2, [r7, #24]
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	4413      	add	r3, r2
 8000582:	61bb      	str	r3, [r7, #24]

	un_temp=(unsigned char) data[3];
 8000584:	7bfb      	ldrb	r3, [r7, #15]
 8000586:	617b      	str	r3, [r7, #20]
	un_temp<<=16;
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	041b      	lsls	r3, r3, #16
 800058c:	617b      	str	r3, [r7, #20]
	ir_data+=un_temp;
 800058e:	69fa      	ldr	r2, [r7, #28]
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	4413      	add	r3, r2
 8000594:	61fb      	str	r3, [r7, #28]
	un_temp=(unsigned char) data[4];
 8000596:	7c3b      	ldrb	r3, [r7, #16]
 8000598:	617b      	str	r3, [r7, #20]
	un_temp<<=8;
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	021b      	lsls	r3, r3, #8
 800059e:	617b      	str	r3, [r7, #20]
	ir_data+=un_temp;
 80005a0:	69fa      	ldr	r2, [r7, #28]
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	4413      	add	r3, r2
 80005a6:	61fb      	str	r3, [r7, #28]
	un_temp=(unsigned char) data[5];
 80005a8:	7c7b      	ldrb	r3, [r7, #17]
 80005aa:	617b      	str	r3, [r7, #20]
	ir_data+=un_temp;
 80005ac:	69fa      	ldr	r2, [r7, #28]
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	4413      	add	r3, r2
 80005b2:	61fb      	str	r3, [r7, #28]

	red_data&=0x03FFFF;  //Mask MSB [23:18]
 80005b4:	69bb      	ldr	r3, [r7, #24]
 80005b6:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80005ba:	61bb      	str	r3, [r7, #24]
	ir_data&=0x03FFFF;  //Mask MSB [23:18]
 80005bc:	69fb      	ldr	r3, [r7, #28]
 80005be:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80005c2:	61fb      	str	r3, [r7, #28]

	red_data >>= 2; // the result is left aligned, starting on bit 18. Thus, by using 16 bits ADC resolution, we need to shift right by 2.
 80005c4:	69bb      	ldr	r3, [r7, #24]
 80005c6:	089b      	lsrs	r3, r3, #2
 80005c8:	61bb      	str	r3, [r7, #24]
	ir_data >>= 2;
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	089b      	lsrs	r3, r3, #2
 80005ce:	61fb      	str	r3, [r7, #28]

	// Combine bytes to get the actual number
	IR[0] = (uint16_t)(ir_data);
 80005d0:	69fb      	ldr	r3, [r7, #28]
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	801a      	strh	r2, [r3, #0]
	RED[0] = (uint16_t)(red_data);
 80005d8:	69bb      	ldr	r3, [r7, #24]
 80005da:	b29a      	uxth	r2, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	801a      	strh	r2, [r3, #0]
}
 80005e0:	bf00      	nop
 80005e2:	3720      	adds	r7, #32
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000738 	.word	0x20000738

080005ec <write_byte>:
   HAL_I2C_Master_Receive(&hi2c3, MAX30102_ADDR, &tempFrac, 1, 100);

   temperature  = (float) tempFrac * 0.0625 + (int8_t) tempInt;
}

void write_byte(uint8_t reg, uint8_t data){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af02      	add	r7, sp, #8
 80005f2:	4603      	mov	r3, r0
 80005f4:	460a      	mov	r2, r1
 80005f6:	71fb      	strb	r3, [r7, #7]
 80005f8:	4613      	mov	r3, r2
 80005fa:	71bb      	strb	r3, [r7, #6]
   /*  Write to the register of a device. Note the char
    *  type must be used due to the MBED i2c functions
    */
   uint8_t transfer[2] = {reg, data};
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	733b      	strb	r3, [r7, #12]
 8000600:	79bb      	ldrb	r3, [r7, #6]
 8000602:	737b      	strb	r3, [r7, #13]
   HAL_I2C_Master_Transmit(&hi2c3, MAX30102_ADDR, transfer, 2, 100);
 8000604:	f107 020c 	add.w	r2, r7, #12
 8000608:	2364      	movs	r3, #100	; 0x64
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	2302      	movs	r3, #2
 800060e:	21ae      	movs	r1, #174	; 0xae
 8000610:	4803      	ldr	r0, [pc, #12]	; (8000620 <write_byte+0x34>)
 8000612:	f004 fc07 	bl	8004e24 <HAL_I2C_Master_Transmit>
}
 8000616:	bf00      	nop
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20000738 	.word	0x20000738

08000624 <read_byte>:

void read_byte(uint8_t reg, uint8_t* data){
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af02      	add	r7, sp, #8
 800062a:	4603      	mov	r3, r0
 800062c:	6039      	str	r1, [r7, #0]
 800062e:	71fb      	strb	r3, [r7, #7]

	   HAL_I2C_Master_Transmit(&hi2c3, MAX30102_ADDR + 1 , &reg, 1, 100);
 8000630:	1dfa      	adds	r2, r7, #7
 8000632:	2364      	movs	r3, #100	; 0x64
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2301      	movs	r3, #1
 8000638:	21af      	movs	r1, #175	; 0xaf
 800063a:	4807      	ldr	r0, [pc, #28]	; (8000658 <read_byte+0x34>)
 800063c:	f004 fbf2 	bl	8004e24 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c3, MAX30102_ADDR + 1, data, 1, 100);
 8000640:	2364      	movs	r3, #100	; 0x64
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	2301      	movs	r3, #1
 8000646:	683a      	ldr	r2, [r7, #0]
 8000648:	21af      	movs	r1, #175	; 0xaf
 800064a:	4803      	ldr	r0, [pc, #12]	; (8000658 <read_byte+0x34>)
 800064c:	f004 fcde 	bl	800500c <HAL_I2C_Master_Receive>
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000738 	.word	0x20000738

0800065c <writeByte>:
float q[4] = {1.0f, 0.0f, 0.0f, 0.0f};           // vector to hold quaternion
float eInt[3] = {0.0f, 0.0f, 0.0f};              // vector to hold integral error for Mahony method


void writeByte(accConfig acc, uint8_t reg, uint8_t data)
{
 800065c:	b590      	push	{r4, r7, lr}
 800065e:	b087      	sub	sp, #28
 8000660:	af00      	add	r7, sp, #0
 8000662:	1d3c      	adds	r4, r7, #4
 8000664:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000668:	70fb      	strb	r3, [r7, #3]
	uint8_t spiReg = reg;
 800066a:	78fb      	ldrb	r3, [r7, #3]
 800066c:	75fb      	strb	r3, [r7, #23]
	//Enable CS
	HAL_GPIO_WritePin(acc.GPIOx_CS, acc.GPIO_Pin_CS, GPIO_PIN_RESET);
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	89b9      	ldrh	r1, [r7, #12]
 8000672:	2200      	movs	r2, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f004 faef 	bl	8004c58 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(acc.accSPI, &spiReg, 1, 100);
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f107 0117 	add.w	r1, r7, #23
 8000680:	2364      	movs	r3, #100	; 0x64
 8000682:	2201      	movs	r2, #1
 8000684:	f007 f95c 	bl	8007940 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Transmit(acc.accSPI, &data, 1, 100);
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	2364      	movs	r3, #100	; 0x64
 800068c:	2201      	movs	r2, #1
 800068e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000692:	f007 f955 	bl	8007940 <HAL_SPI_Transmit>
	//Disable CS
	HAL_GPIO_WritePin(acc.GPIOx_CS, acc.GPIO_Pin_CS, GPIO_PIN_SET);
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	89b9      	ldrh	r1, [r7, #12]
 800069a:	2201      	movs	r2, #1
 800069c:	4618      	mov	r0, r3
 800069e:	f004 fadb 	bl	8004c58 <HAL_GPIO_WritePin>

}
 80006a2:	bf00      	nop
 80006a4:	371c      	adds	r7, #28
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd90      	pop	{r4, r7, pc}

080006aa <readByte>:

void readByte(accConfig acc, uint8_t reg, uint8_t *dataR, uint8_t size)
{
 80006aa:	b590      	push	{r4, r7, lr}
 80006ac:	b087      	sub	sp, #28
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	1d3c      	adds	r4, r7, #4
 80006b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80006b6:	70fb      	strb	r3, [r7, #3]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 80006b8:	78fb      	ldrb	r3, [r7, #3]
 80006ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	753b      	strb	r3, [r7, #20]
	//Enable CS
	HAL_GPIO_WritePin(acc.GPIOx_CS, acc.GPIO_Pin_CS, GPIO_PIN_RESET);
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	89b9      	ldrh	r1, [r7, #12]
 80006c6:	2200      	movs	r2, #0
 80006c8:	4618      	mov	r0, r3
 80006ca:	f004 fac5 	bl	8004c58 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(acc.accSPI, spiBuf, 1, 100);
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f107 0114 	add.w	r1, r7, #20
 80006d4:	2364      	movs	r3, #100	; 0x64
 80006d6:	2201      	movs	r2, #1
 80006d8:	f007 f932 	bl	8007940 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Receive(acc.accSPI, dataR, size, 10000);
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80006e2:	b29a      	uxth	r2, r3
 80006e4:	f242 7310 	movw	r3, #10000	; 0x2710
 80006e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80006ea:	f007 fa97 	bl	8007c1c <HAL_SPI_Receive>
	//Disable CS
	HAL_GPIO_WritePin(acc.GPIOx_CS, acc.GPIO_Pin_CS, GPIO_PIN_SET);
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	89b9      	ldrh	r1, [r7, #12]
 80006f2:	2201      	movs	r2, #1
 80006f4:	4618      	mov	r0, r3
 80006f6:	f004 faaf 	bl	8004c58 <HAL_GPIO_WritePin>


}
 80006fa:	bf00      	nop
 80006fc:	371c      	adds	r7, #28
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd90      	pop	{r4, r7, pc}

08000702 <readAccelData>:
  }
}


accDataRaw readAccelData(accConfig acc)
{
 8000702:	b580      	push	{r7, lr}
 8000704:	b08a      	sub	sp, #40	; 0x28
 8000706:	af02      	add	r7, sp, #8
 8000708:	60f8      	str	r0, [r7, #12]
 800070a:	4638      	mov	r0, r7
 800070c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint8_t rawData[6];  // x/y/z accel register data stored here
  accDataRaw data;

  readByte(acc, ACCEL_XOUT_H, &rawData[0], 6);  // Read the six raw data registers into data array
 8000710:	2306      	movs	r3, #6
 8000712:	9301      	str	r3, [sp, #4]
 8000714:	f107 0318 	add.w	r3, r7, #24
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	233b      	movs	r3, #59	; 0x3b
 800071c:	463a      	mov	r2, r7
 800071e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000720:	f7ff ffc3 	bl	80006aa <readByte>
  data.x = (uint16_t)((uint16_t)(rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8000724:	7e3b      	ldrb	r3, [r7, #24]
 8000726:	b29b      	uxth	r3, r3
 8000728:	021b      	lsls	r3, r3, #8
 800072a:	b29a      	uxth	r2, r3
 800072c:	7e7b      	ldrb	r3, [r7, #25]
 800072e:	b29b      	uxth	r3, r3
 8000730:	4313      	orrs	r3, r2
 8000732:	b29b      	uxth	r3, r3
 8000734:	823b      	strh	r3, [r7, #16]
  if(data.x > 32768) data.x = 65536 - data.x;
 8000736:	8a3b      	ldrh	r3, [r7, #16]
 8000738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800073c:	d903      	bls.n	8000746 <readAccelData+0x44>
 800073e:	8a3b      	ldrh	r3, [r7, #16]
 8000740:	425b      	negs	r3, r3
 8000742:	b29b      	uxth	r3, r3
 8000744:	823b      	strh	r3, [r7, #16]
  data.y = (uint16_t)((uint16_t)(rawData[2] << 8) | rawData[3]) ;
 8000746:	7ebb      	ldrb	r3, [r7, #26]
 8000748:	b29b      	uxth	r3, r3
 800074a:	021b      	lsls	r3, r3, #8
 800074c:	b29a      	uxth	r2, r3
 800074e:	7efb      	ldrb	r3, [r7, #27]
 8000750:	b29b      	uxth	r3, r3
 8000752:	4313      	orrs	r3, r2
 8000754:	b29b      	uxth	r3, r3
 8000756:	827b      	strh	r3, [r7, #18]
  if(data.y > 32768) data.y = 65536 - data.y;
 8000758:	8a7b      	ldrh	r3, [r7, #18]
 800075a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800075e:	d903      	bls.n	8000768 <readAccelData+0x66>
 8000760:	8a7b      	ldrh	r3, [r7, #18]
 8000762:	425b      	negs	r3, r3
 8000764:	b29b      	uxth	r3, r3
 8000766:	827b      	strh	r3, [r7, #18]
  data.z = (uint16_t)((uint16_t)(rawData[4] << 8) | rawData[5]) ;
 8000768:	7f3b      	ldrb	r3, [r7, #28]
 800076a:	b29b      	uxth	r3, r3
 800076c:	021b      	lsls	r3, r3, #8
 800076e:	b29a      	uxth	r2, r3
 8000770:	7f7b      	ldrb	r3, [r7, #29]
 8000772:	b29b      	uxth	r3, r3
 8000774:	4313      	orrs	r3, r2
 8000776:	b29b      	uxth	r3, r3
 8000778:	82bb      	strh	r3, [r7, #20]
  if(data.z > 32768) data.z = 65536 - data.z;
 800077a:	8abb      	ldrh	r3, [r7, #20]
 800077c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000780:	d903      	bls.n	800078a <readAccelData+0x88>
 8000782:	8abb      	ldrh	r3, [r7, #20]
 8000784:	425b      	negs	r3, r3
 8000786:	b29b      	uxth	r3, r3
 8000788:	82bb      	strh	r3, [r7, #20]

  return data;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	461a      	mov	r2, r3
 800078e:	f107 0310 	add.w	r3, r7, #16
 8000792:	6818      	ldr	r0, [r3, #0]
 8000794:	6010      	str	r0, [r2, #0]
 8000796:	889b      	ldrh	r3, [r3, #4]
 8000798:	8093      	strh	r3, [r2, #4]
}
 800079a:	68f8      	ldr	r0, [r7, #12]
 800079c:	3720      	adds	r7, #32
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
	...

080007a4 <initMPU9250>:
	writeByte(acc, I2C_SLV0_CTRL, 0x81);
}


void initMPU9250(accConfig acc)
{  
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af02      	add	r7, sp, #8
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t c;

	// Initialize MPU9250 device
  // wake up device
  writeByte(acc, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 80007b0:	2300      	movs	r3, #0
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	236b      	movs	r3, #107	; 0x6b
 80007b6:	1d3a      	adds	r2, r7, #4
 80007b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80007ba:	f7ff ff4f 	bl	800065c <writeByte>
  readByte(acc, PWR_MGMT_1, &c, 1);
 80007be:	2301      	movs	r3, #1
 80007c0:	9301      	str	r3, [sp, #4]
 80007c2:	f107 0317 	add.w	r3, r7, #23
 80007c6:	9300      	str	r3, [sp, #0]
 80007c8:	236b      	movs	r3, #107	; 0x6b
 80007ca:	1d3a      	adds	r2, r7, #4
 80007cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80007ce:	f7ff ff6c 	bl	80006aa <readByte>
  HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 80007d2:	2064      	movs	r0, #100	; 0x64
 80007d4:	f002 fe7e 	bl	80034d4 <HAL_Delay>

  // get stable time source
  writeByte(acc, PWR_MGMT_1, 0x01);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 80007d8:	2301      	movs	r3, #1
 80007da:	9300      	str	r3, [sp, #0]
 80007dc:	236b      	movs	r3, #107	; 0x6b
 80007de:	1d3a      	adds	r2, r7, #4
 80007e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80007e2:	f7ff ff3b 	bl	800065c <writeByte>
  readByte(acc, PWR_MGMT_1, &c, 1);
 80007e6:	2301      	movs	r3, #1
 80007e8:	9301      	str	r3, [sp, #4]
 80007ea:	f107 0317 	add.w	r3, r7, #23
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	236b      	movs	r3, #107	; 0x6b
 80007f2:	1d3a      	adds	r2, r7, #4
 80007f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80007f6:	f7ff ff58 	bl	80006aa <readByte>
  // Configure Gyro and Accelerometer
  // Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively; 
  // DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
  // Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
  writeByte(acc, CONFIG, 0x03);
 80007fa:	2303      	movs	r3, #3
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	231a      	movs	r3, #26
 8000800:	1d3a      	adds	r2, r7, #4
 8000802:	ca07      	ldmia	r2, {r0, r1, r2}
 8000804:	f7ff ff2a 	bl	800065c <writeByte>
  readByte(acc, CONFIG, &c, 1);
 8000808:	2301      	movs	r3, #1
 800080a:	9301      	str	r3, [sp, #4]
 800080c:	f107 0317 	add.w	r3, r7, #23
 8000810:	9300      	str	r3, [sp, #0]
 8000812:	231a      	movs	r3, #26
 8000814:	1d3a      	adds	r2, r7, #4
 8000816:	ca07      	ldmia	r2, {r0, r1, r2}
 8000818:	f7ff ff47 	bl	80006aa <readByte>
  // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
  writeByte(acc, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
 800081c:	2304      	movs	r3, #4
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	2319      	movs	r3, #25
 8000822:	1d3a      	adds	r2, r7, #4
 8000824:	ca07      	ldmia	r2, {r0, r1, r2}
 8000826:	f7ff ff19 	bl	800065c <writeByte>
  readByte(acc, SMPLRT_DIV, &c, 1);
 800082a:	2301      	movs	r3, #1
 800082c:	9301      	str	r3, [sp, #4]
 800082e:	f107 0317 	add.w	r3, r7, #23
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	2319      	movs	r3, #25
 8000836:	1d3a      	adds	r2, r7, #4
 8000838:	ca07      	ldmia	r2, {r0, r1, r2}
 800083a:	f7ff ff36 	bl	80006aa <readByte>
  //writeByte(GYRO_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
  //writeByte(GYRO_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
  //writeByte(GYRO_CONFIG, c | Gscale << 3); // Set full scale range for the gyro

  // Set accelerometer configuration
  readByte(acc, ACCEL_CONFIG, &c, 1);
 800083e:	2301      	movs	r3, #1
 8000840:	9301      	str	r3, [sp, #4]
 8000842:	f107 0317 	add.w	r3, r7, #23
 8000846:	9300      	str	r3, [sp, #0]
 8000848:	231c      	movs	r3, #28
 800084a:	1d3a      	adds	r2, r7, #4
 800084c:	ca07      	ldmia	r2, {r0, r1, r2}
 800084e:	f7ff ff2c 	bl	80006aa <readByte>
  writeByte(acc, ACCEL_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
 8000852:	7dfb      	ldrb	r3, [r7, #23]
 8000854:	f003 031f 	and.w	r3, r3, #31
 8000858:	b2db      	uxtb	r3, r3
 800085a:	9300      	str	r3, [sp, #0]
 800085c:	231c      	movs	r3, #28
 800085e:	1d3a      	adds	r2, r7, #4
 8000860:	ca07      	ldmia	r2, {r0, r1, r2}
 8000862:	f7ff fefb 	bl	800065c <writeByte>
  writeByte(acc, ACCEL_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
 8000866:	7dfb      	ldrb	r3, [r7, #23]
 8000868:	f023 0318 	bic.w	r3, r3, #24
 800086c:	b2db      	uxtb	r3, r3
 800086e:	9300      	str	r3, [sp, #0]
 8000870:	231c      	movs	r3, #28
 8000872:	1d3a      	adds	r2, r7, #4
 8000874:	ca07      	ldmia	r2, {r0, r1, r2}
 8000876:	f7ff fef1 	bl	800065c <writeByte>
  writeByte(acc, ACCEL_CONFIG, c | Ascale << 3); // Set full scale range for the accelerometer
 800087a:	4b42      	ldr	r3, [pc, #264]	; (8000984 <initMPU9250+0x1e0>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	00db      	lsls	r3, r3, #3
 8000880:	b25a      	sxtb	r2, r3
 8000882:	7dfb      	ldrb	r3, [r7, #23]
 8000884:	b25b      	sxtb	r3, r3
 8000886:	4313      	orrs	r3, r2
 8000888:	b25b      	sxtb	r3, r3
 800088a:	b2db      	uxtb	r3, r3
 800088c:	9300      	str	r3, [sp, #0]
 800088e:	231c      	movs	r3, #28
 8000890:	1d3a      	adds	r2, r7, #4
 8000892:	ca07      	ldmia	r2, {r0, r1, r2}
 8000894:	f7ff fee2 	bl	800065c <writeByte>
  readByte(acc, ACCEL_CONFIG, &c, 1);
 8000898:	2301      	movs	r3, #1
 800089a:	9301      	str	r3, [sp, #4]
 800089c:	f107 0317 	add.w	r3, r7, #23
 80008a0:	9300      	str	r3, [sp, #0]
 80008a2:	231c      	movs	r3, #28
 80008a4:	1d3a      	adds	r2, r7, #4
 80008a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80008a8:	f7ff feff 	bl	80006aa <readByte>
  // Set accelerometer sample rate configuration
  // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
  // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
  readByte(acc, ACCEL_CONFIG2, &c, 1);
 80008ac:	2301      	movs	r3, #1
 80008ae:	9301      	str	r3, [sp, #4]
 80008b0:	f107 0317 	add.w	r3, r7, #23
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	231d      	movs	r3, #29
 80008b8:	1d3a      	adds	r2, r7, #4
 80008ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80008bc:	f7ff fef5 	bl	80006aa <readByte>
  writeByte(acc, ACCEL_CONFIG2, c & ~0x0F); // Clear accel_fchoice_b (bit 3) and A_DLPFG (b	its [2:0])
 80008c0:	7dfb      	ldrb	r3, [r7, #23]
 80008c2:	f023 030f 	bic.w	r3, r3, #15
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	9300      	str	r3, [sp, #0]
 80008ca:	231d      	movs	r3, #29
 80008cc:	1d3a      	adds	r2, r7, #4
 80008ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80008d0:	f7ff fec4 	bl	800065c <writeByte>
  writeByte(acc, ACCEL_CONFIG2, c | 0x06); // Set accelerometer rate to 1 kHz and bandwidth to 21 Hz
 80008d4:	7dfb      	ldrb	r3, [r7, #23]
 80008d6:	f043 0306 	orr.w	r3, r3, #6
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	9300      	str	r3, [sp, #0]
 80008de:	231d      	movs	r3, #29
 80008e0:	1d3a      	adds	r2, r7, #4
 80008e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80008e4:	f7ff feba 	bl	800065c <writeByte>
  readByte(acc, ACCEL_CONFIG2, &c, 1);
 80008e8:	2301      	movs	r3, #1
 80008ea:	9301      	str	r3, [sp, #4]
 80008ec:	f107 0317 	add.w	r3, r7, #23
 80008f0:	9300      	str	r3, [sp, #0]
 80008f2:	231d      	movs	r3, #29
 80008f4:	1d3a      	adds	r2, r7, #4
 80008f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80008f8:	f7ff fed7 	bl	80006aa <readByte>
  // but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

  // Configure Interrupts and Bypass Enable
  // Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips 
  // can join the I2C bus and all can be controlled by the Arduino as master
  writeByte(acc, INT_PIN_CFG, 0x22);
 80008fc:	2322      	movs	r3, #34	; 0x22
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	2337      	movs	r3, #55	; 0x37
 8000902:	1d3a      	adds	r2, r7, #4
 8000904:	ca07      	ldmia	r2, {r0, r1, r2}
 8000906:	f7ff fea9 	bl	800065c <writeByte>
  writeByte(acc, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 800090a:	2301      	movs	r3, #1
 800090c:	9300      	str	r3, [sp, #0]
 800090e:	2338      	movs	r3, #56	; 0x38
 8000910:	1d3a      	adds	r2, r7, #4
 8000912:	ca07      	ldmia	r2, {r0, r1, r2}
 8000914:	f7ff fea2 	bl	800065c <writeByte>

  // Power off gyro
  readByte(acc, PWR_MGMT_2, &c, 1);
 8000918:	2301      	movs	r3, #1
 800091a:	9301      	str	r3, [sp, #4]
 800091c:	f107 0317 	add.w	r3, r7, #23
 8000920:	9300      	str	r3, [sp, #0]
 8000922:	236c      	movs	r3, #108	; 0x6c
 8000924:	1d3a      	adds	r2, r7, #4
 8000926:	ca07      	ldmia	r2, {r0, r1, r2}
 8000928:	f7ff febf 	bl	80006aa <readByte>
  c |= 0x07;
 800092c:	7dfb      	ldrb	r3, [r7, #23]
 800092e:	f043 0307 	orr.w	r3, r3, #7
 8000932:	b2db      	uxtb	r3, r3
 8000934:	75fb      	strb	r3, [r7, #23]
  c &= 0xC7;
 8000936:	7dfb      	ldrb	r3, [r7, #23]
 8000938:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800093c:	b2db      	uxtb	r3, r3
 800093e:	75fb      	strb	r3, [r7, #23]
  writeByte(acc, PWR_MGMT_2, c); // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8000940:	7dfb      	ldrb	r3, [r7, #23]
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	236c      	movs	r3, #108	; 0x6c
 8000946:	1d3a      	adds	r2, r7, #4
 8000948:	ca07      	ldmia	r2, {r0, r1, r2}
 800094a:	f7ff fe87 	bl	800065c <writeByte>

  //Power off temperature
  readByte(acc, PWR_MGMT_1, &c, 1);
 800094e:	2301      	movs	r3, #1
 8000950:	9301      	str	r3, [sp, #4]
 8000952:	f107 0317 	add.w	r3, r7, #23
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	236b      	movs	r3, #107	; 0x6b
 800095a:	1d3a      	adds	r2, r7, #4
 800095c:	ca07      	ldmia	r2, {r0, r1, r2}
 800095e:	f7ff fea4 	bl	80006aa <readByte>
  c |= 0x08;
 8000962:	7dfb      	ldrb	r3, [r7, #23]
 8000964:	f043 0308 	orr.w	r3, r3, #8
 8000968:	b2db      	uxtb	r3, r3
 800096a:	75fb      	strb	r3, [r7, #23]
  writeByte(acc, PWR_MGMT_1, c); // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 800096c:	7dfb      	ldrb	r3, [r7, #23]
 800096e:	9300      	str	r3, [sp, #0]
 8000970:	236b      	movs	r3, #107	; 0x6b
 8000972:	1d3a      	adds	r2, r7, #4
 8000974:	ca07      	ldmia	r2, {r0, r1, r2}
 8000976:	f7ff fe71 	bl	800065c <writeByte>

}
 800097a:	bf00      	nop
 800097c:	3718      	adds	r7, #24
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000210 	.word	0x20000210

08000988 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000994:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000996:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4313      	orrs	r3, r2
 800099e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80009a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4013      	ands	r3, r2
 80009aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009ac:	68fb      	ldr	r3, [r7, #12]
}
 80009ae:	bf00      	nop
 80009b0:	3714      	adds	r7, #20
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
	...

080009bc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80009c2:	463b      	mov	r3, r7
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
 80009d0:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009d2:	4b29      	ldr	r3, [pc, #164]	; (8000a78 <MX_ADC1_Init+0xbc>)
 80009d4:	4a29      	ldr	r2, [pc, #164]	; (8000a7c <MX_ADC1_Init+0xc0>)
 80009d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009d8:	4b27      	ldr	r3, [pc, #156]	; (8000a78 <MX_ADC1_Init+0xbc>)
 80009da:	2200      	movs	r2, #0
 80009dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009de:	4b26      	ldr	r3, [pc, #152]	; (8000a78 <MX_ADC1_Init+0xbc>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009e4:	4b24      	ldr	r3, [pc, #144]	; (8000a78 <MX_ADC1_Init+0xbc>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009ea:	4b23      	ldr	r3, [pc, #140]	; (8000a78 <MX_ADC1_Init+0xbc>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009f0:	4b21      	ldr	r3, [pc, #132]	; (8000a78 <MX_ADC1_Init+0xbc>)
 80009f2:	2204      	movs	r2, #4
 80009f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009f6:	4b20      	ldr	r3, [pc, #128]	; (8000a78 <MX_ADC1_Init+0xbc>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009fc:	4b1e      	ldr	r3, [pc, #120]	; (8000a78 <MX_ADC1_Init+0xbc>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000a02:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <MX_ADC1_Init+0xbc>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a08:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <MX_ADC1_Init+0xbc>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a10:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <MX_ADC1_Init+0xbc>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a16:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <MX_ADC1_Init+0xbc>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a1c:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <MX_ADC1_Init+0xbc>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a24:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <MX_ADC1_Init+0xbc>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a2a:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <MX_ADC1_Init+0xbc>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a32:	4811      	ldr	r0, [pc, #68]	; (8000a78 <MX_ADC1_Init+0xbc>)
 8000a34:	f002 ff5e 	bl	80038f4 <HAL_ADC_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000a3e:	f001 ff9f 	bl	8002980 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a42:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_ADC1_Init+0xc4>)
 8000a44:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a46:	2306      	movs	r3, #6
 8000a48:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a4e:	237f      	movs	r3, #127	; 0x7f
 8000a50:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a52:	2304      	movs	r3, #4
 8000a54:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a5a:	463b      	mov	r3, r7
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4806      	ldr	r0, [pc, #24]	; (8000a78 <MX_ADC1_Init+0xbc>)
 8000a60:	f003 f976 	bl	8003d50 <HAL_ADC_ConfigChannel>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000a6a:	f001 ff89 	bl	8002980 <Error_Handler>
  }

}
 8000a6e:	bf00      	nop
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	200006d4 	.word	0x200006d4
 8000a7c:	50040000 	.word	0x50040000
 8000a80:	1d500080 	.word	0x1d500080

08000a84 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a0d      	ldr	r2, [pc, #52]	; (8000ad8 <HAL_ADC_MspInit+0x54>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d113      	bne.n	8000ace <HAL_ADC_MspInit+0x4a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000aa6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000aaa:	f7ff ff6d 	bl	8000988 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	2001      	movs	r0, #1
 8000ab0:	f7ff ff6a 	bl	8000988 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ab4:	2304      	movs	r3, #4
 8000ab6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac0:	f107 030c 	add.w	r3, r7, #12
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aca:	f003 ff55 	bl	8004978 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ace:	bf00      	nop
 8000ad0:	3720      	adds	r7, #32
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	50040000 	.word	0x50040000

08000adc <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000adc:	b5b0      	push	{r4, r5, r7, lr}
 8000ade:	b088      	sub	sp, #32
 8000ae0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <APPD_EnableCPU2+0x34>)
 8000ae4:	1d3c      	adds	r4, r7, #4
 8000ae6:	461d      	mov	r5, r3
 8000ae8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000af0:	c403      	stmia	r4!, {r0, r1}
 8000af2:	8022      	strh	r2, [r4, #0]
 8000af4:	3402      	adds	r4, #2
 8000af6:	0c13      	lsrs	r3, r2, #16
 8000af8:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000afa:	f00a fd1b 	bl	800b534 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	4618      	mov	r0, r3
 8000b02:	f00a f836 	bl	800ab72 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000b06:	bf00      	nop
}
 8000b08:	3720      	adds	r7, #32
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bdb0      	pop	{r4, r5, r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	0800c7e8 	.word	0x0800c7e8

08000b14 <LL_C2_PWR_SetPowerMode>:
  *         @arg @ref LL_PWR_MODE_STANDBY
  *         @arg @ref LL_PWR_MODE_SHUTDOWN
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000b1c:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <LL_C2_PWR_SetPowerMode+0x28>)
 8000b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b22:	f023 0207 	bic.w	r2, r3, #7
 8000b26:	4905      	ldr	r1, [pc, #20]	; (8000b3c <LL_C2_PWR_SetPowerMode+0x28>)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	58000400 	.word	0x58000400

08000b40 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000b52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	608b      	str	r3, [r1, #8]
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000b6c:	f000 f80a 	bl	8000b84 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000b70:	4903      	ldr	r1, [pc, #12]	; (8000b80 <APPE_Init+0x18>)
 8000b72:	2000      	movs	r0, #0
 8000b74:	f000 fd62 	bl	800163c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000b78:	f000 f812 	bl	8000ba0 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000b7c:	bf00      	nop
}
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	200007ec 	.word	0x200007ec

08000b84 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000b88:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000b8c:	f7ff ffd8 	bl	8000b40 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000b90:	f00b fb98 	bl	800c2c4 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000b94:	2004      	movs	r0, #4
 8000b96:	f7ff ffbd 	bl	8000b14 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8000b9a:	bf00      	nop
}
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b088      	sub	sp, #32
 8000ba4:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000ba6:	f00a fb29 	bl	800b1fc <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 8000baa:	4a11      	ldr	r2, [pc, #68]	; (8000bf0 <appe_Tl_Init+0x50>)
 8000bac:	2100      	movs	r1, #0
 8000bae:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000bb2:	f00b fca7 	bl	800c504 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <appe_Tl_Init+0x54>)
 8000bb8:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000bba:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <appe_Tl_Init+0x58>)
 8000bbc:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000bbe:	463b      	mov	r3, r7
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	480e      	ldr	r0, [pc, #56]	; (8000bfc <appe_Tl_Init+0x5c>)
 8000bc4:	f009 ffec 	bl	800aba0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000bc8:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <appe_Tl_Init+0x60>)
 8000bca:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000bcc:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <appe_Tl_Init+0x64>)
 8000bce:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000bd0:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <appe_Tl_Init+0x68>)
 8000bd2:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000bd4:	f240 533c 	movw	r3, #1340	; 0x53c
 8000bd8:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000bda:	f107 0308 	add.w	r3, r7, #8
 8000bde:	4618      	mov	r0, r3
 8000be0:	f00a fc1e 	bl	800b420 <TL_MM_Init>

  TL_Enable();
 8000be4:	f00a fb04 	bl	800b1f0 <TL_Enable>

  return;
 8000be8:	bf00      	nop
}
 8000bea:	3720      	adds	r7, #32
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	0800abd9 	.word	0x0800abd9
 8000bf4:	20030724 	.word	0x20030724
 8000bf8:	08000c0d 	.word	0x08000c0d
 8000bfc:	08000c23 	.word	0x08000c23
 8000c00:	2003093c 	.word	0x2003093c
 8000c04:	20030830 	.word	0x20030830
 8000c08:	200301e8 	.word	0x200301e8

08000c0c <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000c16:	bf00      	nop
}
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b082      	sub	sp, #8
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 8000c2a:	f7ff ff57 	bl	8000adc <APPD_EnableCPU2>

  APP_BLE_Init( );
 8000c2e:	f00a fcdb 	bl	800b5e8 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000c32:	2100      	movs	r1, #0
 8000c34:	2001      	movs	r0, #1
 8000c36:	f00b fb57 	bl	800c2e8 <UTIL_LPM_SetOffMode>
  return;
 8000c3a:	bf00      	nop
}
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 8000c46:	bf00      	nop
}
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000c5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c5e:	f00b fb71 	bl	800c344 <UTIL_SEQ_Run>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000c72:	2100      	movs	r1, #0
 8000c74:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000c78:	f00b fc64 	bl	800c544 <UTIL_SEQ_SetTask>
  return;
 8000c7c:	bf00      	nop
}
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000c8c:	2002      	movs	r0, #2
 8000c8e:	f00b fcbf 	bl	800c610 <UTIL_SEQ_SetEvt>
  return;
 8000c92:	bf00      	nop
}
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000ca2:	2002      	movs	r0, #2
 8000ca4:	f00b fcd2 	bl	800c64c <UTIL_SEQ_WaitEvt>
  return;
 8000ca8:	bf00      	nop
}
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <LL_AHB2_GRP1_EnableClock>:
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ccc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
}
 8000cd6:	bf00      	nop
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
	...

08000ce4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf8:	2004      	movs	r0, #4
 8000cfa:	f7ff ffd9 	bl	8000cb0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfe:	2002      	movs	r0, #2
 8000d00:	f7ff ffd6 	bl	8000cb0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d04:	2001      	movs	r0, #1
 8000d06:	f7ff ffd3 	bl	8000cb0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d0a:	2010      	movs	r0, #16
 8000d0c:	f7ff ffd0 	bl	8000cb0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d10:	2008      	movs	r0, #8
 8000d12:	f7ff ffcd 	bl	8000cb0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI2_CS_2_Pin|SPI2_CS_1_Pin, GPIO_PIN_SET);
 8000d16:	2201      	movs	r2, #1
 8000d18:	2103      	movs	r1, #3
 8000d1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d1e:	f003 ff9b 	bl	8004c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_1_GPIO_Port, SPI1_CS_1_Pin, GPIO_PIN_SET);
 8000d22:	2201      	movs	r2, #1
 8000d24:	2104      	movs	r1, #4
 8000d26:	482e      	ldr	r0, [pc, #184]	; (8000de0 <MX_GPIO_Init+0xfc>)
 8000d28:	f003 ff96 	bl	8004c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2123      	movs	r1, #35	; 0x23
 8000d30:	482b      	ldr	r0, [pc, #172]	; (8000de0 <MX_GPIO_Init+0xfc>)
 8000d32:	f003 ff91 	bl	8004c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_2_GPIO_Port, SPI1_CS_2_Pin, GPIO_PIN_RESET);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2110      	movs	r1, #16
 8000d3a:	482a      	ldr	r0, [pc, #168]	; (8000de4 <MX_GPIO_Init+0x100>)
 8000d3c:	f003 ff8c 	bl	8004c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI2_CS_2_Pin|SPI2_CS_1_Pin;
 8000d40:	2303      	movs	r3, #3
 8000d42:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d44:	2301      	movs	r3, #1
 8000d46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	4619      	mov	r1, r3
 8000d54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d58:	f003 fe0e 	bl	8004978 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d5c:	2310      	movs	r3, #16
 8000d5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d60:	2300      	movs	r3, #0
 8000d62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	481e      	ldr	r0, [pc, #120]	; (8000de8 <MX_GPIO_Init+0x104>)
 8000d6e:	f003 fe03 	bl	8004978 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_1_Pin;
 8000d72:	2304      	movs	r3, #4
 8000d74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d76:	2301      	movs	r3, #1
 8000d78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SPI1_CS_1_GPIO_Port, &GPIO_InitStruct);
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	4619      	mov	r1, r3
 8000d86:	4816      	ldr	r0, [pc, #88]	; (8000de0 <MX_GPIO_Init+0xfc>)
 8000d88:	f003 fdf6 	bl	8004978 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin;
 8000d8c:	2323      	movs	r3, #35	; 0x23
 8000d8e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d90:	2301      	movs	r3, #1
 8000d92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	4619      	mov	r1, r3
 8000da0:	480f      	ldr	r0, [pc, #60]	; (8000de0 <MX_GPIO_Init+0xfc>)
 8000da2:	f003 fde9 	bl	8004978 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_2_Pin;
 8000da6:	2310      	movs	r3, #16
 8000da8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000daa:	2301      	movs	r3, #1
 8000dac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SPI1_CS_2_GPIO_Port, &GPIO_InitStruct);
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	4619      	mov	r1, r3
 8000dba:	480a      	ldr	r0, [pc, #40]	; (8000de4 <MX_GPIO_Init+0x100>)
 8000dbc:	f003 fddc 	bl	8004978 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|B3_Pin;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4806      	ldr	r0, [pc, #24]	; (8000dec <MX_GPIO_Init+0x108>)
 8000dd2:	f003 fdd1 	bl	8004978 <HAL_GPIO_Init>

}
 8000dd6:	bf00      	nop
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	48000400 	.word	0x48000400
 8000de4:	48001000 	.word	0x48001000
 8000de8:	48000800 	.word	0x48000800
 8000dec:	48000c00 	.word	0x48000c00

08000df0 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <LL_EXTI_EnableIT_0_31+0x24>)
 8000dfa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000dfe:	4905      	ldr	r1, [pc, #20]	; (8000e14 <LL_EXTI_EnableIT_0_31+0x24>)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	58000800 	.word	0x58000800

08000e18 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4904      	ldr	r1, [pc, #16]	; (8000e38 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	600b      	str	r3, [r1, #0]

}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	58000800 	.word	0x58000800

08000e3c <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000e42:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <ReadRtcSsrValue+0x3c>)
 8000e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <ReadRtcSsrValue+0x3c>)
 8000e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000e52:	e005      	b.n	8000e60 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000e58:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <ReadRtcSsrValue+0x3c>)
 8000e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d1f5      	bne.n	8000e54 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000e68:	683b      	ldr	r3, [r7, #0]
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40002800 	.word	0x40002800

08000e7c <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	460a      	mov	r2, r1
 8000e86:	71fb      	strb	r3, [r7, #7]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000e8c:	79ba      	ldrb	r2, [r7, #6]
 8000e8e:	491d      	ldr	r1, [pc, #116]	; (8000f04 <LinkTimerAfter+0x88>)
 8000e90:	4613      	mov	r3, r2
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	4413      	add	r3, r2
 8000e96:	00db      	lsls	r3, r3, #3
 8000e98:	440b      	add	r3, r1
 8000e9a:	3315      	adds	r3, #21
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	2b06      	cmp	r3, #6
 8000ea4:	d009      	beq.n	8000eba <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000ea6:	7bfa      	ldrb	r2, [r7, #15]
 8000ea8:	4916      	ldr	r1, [pc, #88]	; (8000f04 <LinkTimerAfter+0x88>)
 8000eaa:	4613      	mov	r3, r2
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	4413      	add	r3, r2
 8000eb0:	00db      	lsls	r3, r3, #3
 8000eb2:	440b      	add	r3, r1
 8000eb4:	3314      	adds	r3, #20
 8000eb6:	79fa      	ldrb	r2, [r7, #7]
 8000eb8:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000eba:	79fa      	ldrb	r2, [r7, #7]
 8000ebc:	4911      	ldr	r1, [pc, #68]	; (8000f04 <LinkTimerAfter+0x88>)
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	4413      	add	r3, r2
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	440b      	add	r3, r1
 8000ec8:	3315      	adds	r3, #21
 8000eca:	7bfa      	ldrb	r2, [r7, #15]
 8000ecc:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000ece:	79fa      	ldrb	r2, [r7, #7]
 8000ed0:	490c      	ldr	r1, [pc, #48]	; (8000f04 <LinkTimerAfter+0x88>)
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	4413      	add	r3, r2
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	440b      	add	r3, r1
 8000edc:	3314      	adds	r3, #20
 8000ede:	79ba      	ldrb	r2, [r7, #6]
 8000ee0:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000ee2:	79ba      	ldrb	r2, [r7, #6]
 8000ee4:	4907      	ldr	r1, [pc, #28]	; (8000f04 <LinkTimerAfter+0x88>)
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	4413      	add	r3, r2
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	440b      	add	r3, r1
 8000ef0:	3315      	adds	r3, #21
 8000ef2:	79fa      	ldrb	r2, [r7, #7]
 8000ef4:	701a      	strb	r2, [r3, #0]

  return;
 8000ef6:	bf00      	nop
}
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	2000005c 	.word	0x2000005c

08000f08 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	460a      	mov	r2, r1
 8000f12:	71fb      	strb	r3, [r7, #7]
 8000f14:	4613      	mov	r3, r2
 8000f16:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000f18:	4b29      	ldr	r3, [pc, #164]	; (8000fc0 <LinkTimerBefore+0xb8>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	79ba      	ldrb	r2, [r7, #6]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d032      	beq.n	8000f8a <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000f24:	79ba      	ldrb	r2, [r7, #6]
 8000f26:	4927      	ldr	r1, [pc, #156]	; (8000fc4 <LinkTimerBefore+0xbc>)
 8000f28:	4613      	mov	r3, r2
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	4413      	add	r3, r2
 8000f2e:	00db      	lsls	r3, r3, #3
 8000f30:	440b      	add	r3, r1
 8000f32:	3314      	adds	r3, #20
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000f38:	7bfa      	ldrb	r2, [r7, #15]
 8000f3a:	4922      	ldr	r1, [pc, #136]	; (8000fc4 <LinkTimerBefore+0xbc>)
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	4413      	add	r3, r2
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	440b      	add	r3, r1
 8000f46:	3315      	adds	r3, #21
 8000f48:	79fa      	ldrb	r2, [r7, #7]
 8000f4a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000f4c:	79fa      	ldrb	r2, [r7, #7]
 8000f4e:	491d      	ldr	r1, [pc, #116]	; (8000fc4 <LinkTimerBefore+0xbc>)
 8000f50:	4613      	mov	r3, r2
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	4413      	add	r3, r2
 8000f56:	00db      	lsls	r3, r3, #3
 8000f58:	440b      	add	r3, r1
 8000f5a:	3315      	adds	r3, #21
 8000f5c:	79ba      	ldrb	r2, [r7, #6]
 8000f5e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000f60:	79fa      	ldrb	r2, [r7, #7]
 8000f62:	4918      	ldr	r1, [pc, #96]	; (8000fc4 <LinkTimerBefore+0xbc>)
 8000f64:	4613      	mov	r3, r2
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	4413      	add	r3, r2
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	440b      	add	r3, r1
 8000f6e:	3314      	adds	r3, #20
 8000f70:	7bfa      	ldrb	r2, [r7, #15]
 8000f72:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000f74:	79ba      	ldrb	r2, [r7, #6]
 8000f76:	4913      	ldr	r1, [pc, #76]	; (8000fc4 <LinkTimerBefore+0xbc>)
 8000f78:	4613      	mov	r3, r2
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	4413      	add	r3, r2
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	440b      	add	r3, r1
 8000f82:	3314      	adds	r3, #20
 8000f84:	79fa      	ldrb	r2, [r7, #7]
 8000f86:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000f88:	e014      	b.n	8000fb4 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000f8a:	79fa      	ldrb	r2, [r7, #7]
 8000f8c:	490d      	ldr	r1, [pc, #52]	; (8000fc4 <LinkTimerBefore+0xbc>)
 8000f8e:	4613      	mov	r3, r2
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	4413      	add	r3, r2
 8000f94:	00db      	lsls	r3, r3, #3
 8000f96:	440b      	add	r3, r1
 8000f98:	3315      	adds	r3, #21
 8000f9a:	79ba      	ldrb	r2, [r7, #6]
 8000f9c:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000f9e:	79ba      	ldrb	r2, [r7, #6]
 8000fa0:	4908      	ldr	r1, [pc, #32]	; (8000fc4 <LinkTimerBefore+0xbc>)
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	4413      	add	r3, r2
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	440b      	add	r3, r1
 8000fac:	3314      	adds	r3, #20
 8000fae:	79fa      	ldrb	r2, [r7, #7]
 8000fb0:	701a      	strb	r2, [r3, #0]
  return;
 8000fb2:	bf00      	nop
}
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	200000ec 	.word	0x200000ec
 8000fc4:	2000005c 	.word	0x2000005c

08000fc8 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000fd2:	4b4e      	ldr	r3, [pc, #312]	; (800110c <linkTimer+0x144>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b06      	cmp	r3, #6
 8000fda:	d118      	bne.n	800100e <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000fdc:	4b4b      	ldr	r3, [pc, #300]	; (800110c <linkTimer+0x144>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4b4b      	ldr	r3, [pc, #300]	; (8001110 <linkTimer+0x148>)
 8000fe4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000fe6:	4a49      	ldr	r2, [pc, #292]	; (800110c <linkTimer+0x144>)
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000fec:	79fa      	ldrb	r2, [r7, #7]
 8000fee:	4949      	ldr	r1, [pc, #292]	; (8001114 <linkTimer+0x14c>)
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	4413      	add	r3, r2
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	440b      	add	r3, r1
 8000ffa:	3315      	adds	r3, #21
 8000ffc:	2206      	movs	r2, #6
 8000ffe:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001000:	4b45      	ldr	r3, [pc, #276]	; (8001118 <linkTimer+0x150>)
 8001002:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001006:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	81fb      	strh	r3, [r7, #14]
 800100c:	e078      	b.n	8001100 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800100e:	f000 f909 	bl	8001224 <ReturnTimeElapsed>
 8001012:	4603      	mov	r3, r0
 8001014:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001016:	79fa      	ldrb	r2, [r7, #7]
 8001018:	493e      	ldr	r1, [pc, #248]	; (8001114 <linkTimer+0x14c>)
 800101a:	4613      	mov	r3, r2
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	4413      	add	r3, r2
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	440b      	add	r3, r1
 8001024:	3308      	adds	r3, #8
 8001026:	6819      	ldr	r1, [r3, #0]
 8001028:	89fb      	ldrh	r3, [r7, #14]
 800102a:	79fa      	ldrb	r2, [r7, #7]
 800102c:	4419      	add	r1, r3
 800102e:	4839      	ldr	r0, [pc, #228]	; (8001114 <linkTimer+0x14c>)
 8001030:	4613      	mov	r3, r2
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	4413      	add	r3, r2
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	4403      	add	r3, r0
 800103a:	3308      	adds	r3, #8
 800103c:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800103e:	79fa      	ldrb	r2, [r7, #7]
 8001040:	4934      	ldr	r1, [pc, #208]	; (8001114 <linkTimer+0x14c>)
 8001042:	4613      	mov	r3, r2
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	4413      	add	r3, r2
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	440b      	add	r3, r1
 800104c:	3308      	adds	r3, #8
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001052:	4b2e      	ldr	r3, [pc, #184]	; (800110c <linkTimer+0x144>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	b2db      	uxtb	r3, r3
 8001058:	4619      	mov	r1, r3
 800105a:	4a2e      	ldr	r2, [pc, #184]	; (8001114 <linkTimer+0x14c>)
 800105c:	460b      	mov	r3, r1
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	440b      	add	r3, r1
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	4413      	add	r3, r2
 8001066:	3308      	adds	r3, #8
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	429a      	cmp	r2, r3
 800106e:	d337      	bcc.n	80010e0 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001070:	4b26      	ldr	r3, [pc, #152]	; (800110c <linkTimer+0x144>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001076:	7b7a      	ldrb	r2, [r7, #13]
 8001078:	4926      	ldr	r1, [pc, #152]	; (8001114 <linkTimer+0x14c>)
 800107a:	4613      	mov	r3, r2
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	4413      	add	r3, r2
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	440b      	add	r3, r1
 8001084:	3315      	adds	r3, #21
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800108a:	e013      	b.n	80010b4 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 800108c:	7b7a      	ldrb	r2, [r7, #13]
 800108e:	4921      	ldr	r1, [pc, #132]	; (8001114 <linkTimer+0x14c>)
 8001090:	4613      	mov	r3, r2
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	4413      	add	r3, r2
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	440b      	add	r3, r1
 800109a:	3315      	adds	r3, #21
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80010a0:	7b7a      	ldrb	r2, [r7, #13]
 80010a2:	491c      	ldr	r1, [pc, #112]	; (8001114 <linkTimer+0x14c>)
 80010a4:	4613      	mov	r3, r2
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	4413      	add	r3, r2
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	440b      	add	r3, r1
 80010ae:	3315      	adds	r3, #21
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80010b4:	7b3b      	ldrb	r3, [r7, #12]
 80010b6:	2b06      	cmp	r3, #6
 80010b8:	d00b      	beq.n	80010d2 <linkTimer+0x10a>
 80010ba:	7b3a      	ldrb	r2, [r7, #12]
 80010bc:	4915      	ldr	r1, [pc, #84]	; (8001114 <linkTimer+0x14c>)
 80010be:	4613      	mov	r3, r2
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	4413      	add	r3, r2
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	440b      	add	r3, r1
 80010c8:	3308      	adds	r3, #8
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	68ba      	ldr	r2, [r7, #8]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d2dc      	bcs.n	800108c <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80010d2:	7b7a      	ldrb	r2, [r7, #13]
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fecf 	bl	8000e7c <LinkTimerAfter>
 80010de:	e00f      	b.n	8001100 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80010e0:	4b0a      	ldr	r3, [pc, #40]	; (800110c <linkTimer+0x144>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	4611      	mov	r1, r2
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff ff0c 	bl	8000f08 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <linkTimer+0x144>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <linkTimer+0x148>)
 80010f8:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80010fa:	4a04      	ldr	r2, [pc, #16]	; (800110c <linkTimer+0x144>)
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001100:	89fb      	ldrh	r3, [r7, #14]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200000ec 	.word	0x200000ec
 8001110:	200000ed 	.word	0x200000ed
 8001114:	2000005c 	.word	0x2000005c
 8001118:	200000f0 	.word	0x200000f0

0800111c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	460a      	mov	r2, r1
 8001126:	71fb      	strb	r3, [r7, #7]
 8001128:	4613      	mov	r3, r2
 800112a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 800112c:	4b39      	ldr	r3, [pc, #228]	; (8001214 <UnlinkTimer+0xf8>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	b2db      	uxtb	r3, r3
 8001132:	79fa      	ldrb	r2, [r7, #7]
 8001134:	429a      	cmp	r2, r3
 8001136:	d111      	bne.n	800115c <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001138:	4b36      	ldr	r3, [pc, #216]	; (8001214 <UnlinkTimer+0xf8>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4b36      	ldr	r3, [pc, #216]	; (8001218 <UnlinkTimer+0xfc>)
 8001140:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001142:	79fa      	ldrb	r2, [r7, #7]
 8001144:	4935      	ldr	r1, [pc, #212]	; (800121c <UnlinkTimer+0x100>)
 8001146:	4613      	mov	r3, r2
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	4413      	add	r3, r2
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	440b      	add	r3, r1
 8001150:	3315      	adds	r3, #21
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4b2f      	ldr	r3, [pc, #188]	; (8001214 <UnlinkTimer+0xf8>)
 8001158:	701a      	strb	r2, [r3, #0]
 800115a:	e03e      	b.n	80011da <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 800115c:	79fa      	ldrb	r2, [r7, #7]
 800115e:	492f      	ldr	r1, [pc, #188]	; (800121c <UnlinkTimer+0x100>)
 8001160:	4613      	mov	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	4413      	add	r3, r2
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	440b      	add	r3, r1
 800116a:	3314      	adds	r3, #20
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001170:	79fa      	ldrb	r2, [r7, #7]
 8001172:	492a      	ldr	r1, [pc, #168]	; (800121c <UnlinkTimer+0x100>)
 8001174:	4613      	mov	r3, r2
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	4413      	add	r3, r2
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	440b      	add	r3, r1
 800117e:	3315      	adds	r3, #21
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001184:	79f9      	ldrb	r1, [r7, #7]
 8001186:	7bfa      	ldrb	r2, [r7, #15]
 8001188:	4824      	ldr	r0, [pc, #144]	; (800121c <UnlinkTimer+0x100>)
 800118a:	460b      	mov	r3, r1
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	440b      	add	r3, r1
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	4403      	add	r3, r0
 8001194:	3315      	adds	r3, #21
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	b2d8      	uxtb	r0, r3
 800119a:	4920      	ldr	r1, [pc, #128]	; (800121c <UnlinkTimer+0x100>)
 800119c:	4613      	mov	r3, r2
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	4413      	add	r3, r2
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	440b      	add	r3, r1
 80011a6:	3315      	adds	r3, #21
 80011a8:	4602      	mov	r2, r0
 80011aa:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80011ac:	7bbb      	ldrb	r3, [r7, #14]
 80011ae:	2b06      	cmp	r3, #6
 80011b0:	d013      	beq.n	80011da <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80011b2:	79f9      	ldrb	r1, [r7, #7]
 80011b4:	7bba      	ldrb	r2, [r7, #14]
 80011b6:	4819      	ldr	r0, [pc, #100]	; (800121c <UnlinkTimer+0x100>)
 80011b8:	460b      	mov	r3, r1
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	440b      	add	r3, r1
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	4403      	add	r3, r0
 80011c2:	3314      	adds	r3, #20
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	b2d8      	uxtb	r0, r3
 80011c8:	4914      	ldr	r1, [pc, #80]	; (800121c <UnlinkTimer+0x100>)
 80011ca:	4613      	mov	r3, r2
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	4413      	add	r3, r2
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	440b      	add	r3, r1
 80011d4:	3314      	adds	r3, #20
 80011d6:	4602      	mov	r2, r0
 80011d8:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80011da:	79fa      	ldrb	r2, [r7, #7]
 80011dc:	490f      	ldr	r1, [pc, #60]	; (800121c <UnlinkTimer+0x100>)
 80011de:	4613      	mov	r3, r2
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	4413      	add	r3, r2
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	440b      	add	r3, r1
 80011e8:	330c      	adds	r3, #12
 80011ea:	2201      	movs	r2, #1
 80011ec:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <UnlinkTimer+0xf8>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b06      	cmp	r3, #6
 80011f6:	d107      	bne.n	8001208 <UnlinkTimer+0xec>
 80011f8:	79bb      	ldrb	r3, [r7, #6]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d104      	bne.n	8001208 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <UnlinkTimer+0x104>)
 8001200:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001204:	601a      	str	r2, [r3, #0]
  }

  return;
 8001206:	bf00      	nop
 8001208:	bf00      	nop
}
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	200000ec 	.word	0x200000ec
 8001218:	200000ed 	.word	0x200000ed
 800121c:	2000005c 	.word	0x2000005c
 8001220:	200000f0 	.word	0x200000f0

08001224 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800122a:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <ReturnTimeElapsed+0x70>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001232:	d026      	beq.n	8001282 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001234:	f7ff fe02 	bl	8000e3c <ReadRtcSsrValue>
 8001238:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800123a:	4b16      	ldr	r3, [pc, #88]	; (8001294 <ReturnTimeElapsed+0x70>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	429a      	cmp	r2, r3
 8001242:	d805      	bhi.n	8001250 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001244:	4b13      	ldr	r3, [pc, #76]	; (8001294 <ReturnTimeElapsed+0x70>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	e00a      	b.n	8001266 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <ReturnTimeElapsed+0x74>)
 8001252:	881b      	ldrh	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 800125c:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <ReturnTimeElapsed+0x70>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	4413      	add	r3, r2
 8001264:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001266:	4b0d      	ldr	r3, [pc, #52]	; (800129c <ReturnTimeElapsed+0x78>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	461a      	mov	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	fb02 f303 	mul.w	r3, r2, r3
 8001272:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001274:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <ReturnTimeElapsed+0x7c>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	40d3      	lsrs	r3, r2
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	e001      	b.n	8001286 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	b29b      	uxth	r3, r3
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200000f0 	.word	0x200000f0
 8001298:	2000021a 	.word	0x2000021a
 800129c:	20000219 	.word	0x20000219
 80012a0:	20000218 	.word	0x20000218

080012a4 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 80012ae:	88fb      	ldrh	r3, [r7, #6]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d108      	bne.n	80012c6 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80012b4:	f7ff fdc2 	bl	8000e3c <ReadRtcSsrValue>
 80012b8:	4602      	mov	r2, r0
 80012ba:	4b24      	ldr	r3, [pc, #144]	; (800134c <RestartWakeupCounter+0xa8>)
 80012bc:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80012be:	2003      	movs	r0, #3
 80012c0:	f003 fb3d 	bl	800493e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80012c4:	e03e      	b.n	8001344 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80012c6:	88fb      	ldrh	r3, [r7, #6]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d803      	bhi.n	80012d4 <RestartWakeupCounter+0x30>
 80012cc:	4b20      	ldr	r3, [pc, #128]	; (8001350 <RestartWakeupCounter+0xac>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d002      	beq.n	80012da <RestartWakeupCounter+0x36>
      Value -= 1;
 80012d4:	88fb      	ldrh	r3, [r7, #6]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80012da:	bf00      	nop
 80012dc:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <RestartWakeupCounter+0xb0>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	f003 0304 	and.w	r3, r3, #4
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0f7      	beq.n	80012dc <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80012ec:	4b19      	ldr	r3, [pc, #100]	; (8001354 <RestartWakeupCounter+0xb0>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4b17      	ldr	r3, [pc, #92]	; (8001354 <RestartWakeupCounter+0xb0>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001300:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <RestartWakeupCounter+0xb4>)
 8001304:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001308:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800130a:	2003      	movs	r0, #3
 800130c:	f003 fb25 	bl	800495a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <RestartWakeupCounter+0xb8>)
 8001312:	695b      	ldr	r3, [r3, #20]
 8001314:	0c1b      	lsrs	r3, r3, #16
 8001316:	041b      	lsls	r3, r3, #16
 8001318:	88fa      	ldrh	r2, [r7, #6]
 800131a:	4910      	ldr	r1, [pc, #64]	; (800135c <RestartWakeupCounter+0xb8>)
 800131c:	4313      	orrs	r3, r2
 800131e:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001320:	f7ff fd8c 	bl	8000e3c <ReadRtcSsrValue>
 8001324:	4602      	mov	r2, r0
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <RestartWakeupCounter+0xa8>)
 8001328:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 800132a:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <RestartWakeupCounter+0xb0>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	689a      	ldr	r2, [r3, #8]
 8001332:	4b08      	ldr	r3, [pc, #32]	; (8001354 <RestartWakeupCounter+0xb0>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800133c:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 800133e:	f3af 8000 	nop.w
  return ;
 8001342:	bf00      	nop
}
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200000f0 	.word	0x200000f0
 8001350:	20000218 	.word	0x20000218
 8001354:	20000214 	.word	0x20000214
 8001358:	58000800 	.word	0x58000800
 800135c:	40002800 	.word	0x40002800

08001360 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001366:	4b47      	ldr	r3, [pc, #284]	; (8001484 <RescheduleTimerList+0x124>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800136e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001372:	d108      	bne.n	8001386 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001374:	bf00      	nop
 8001376:	4b44      	ldr	r3, [pc, #272]	; (8001488 <RescheduleTimerList+0x128>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	f003 0304 	and.w	r3, r3, #4
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1f7      	bne.n	8001376 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001386:	4b40      	ldr	r3, [pc, #256]	; (8001488 <RescheduleTimerList+0x128>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	689a      	ldr	r2, [r3, #8]
 800138e:	4b3e      	ldr	r3, [pc, #248]	; (8001488 <RescheduleTimerList+0x128>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001398:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800139a:	4b3c      	ldr	r3, [pc, #240]	; (800148c <RescheduleTimerList+0x12c>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80013a0:	7bfa      	ldrb	r2, [r7, #15]
 80013a2:	493b      	ldr	r1, [pc, #236]	; (8001490 <RescheduleTimerList+0x130>)
 80013a4:	4613      	mov	r3, r2
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	4413      	add	r3, r2
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	440b      	add	r3, r1
 80013ae:	3308      	adds	r3, #8
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80013b4:	f7ff ff36 	bl	8001224 <ReturnTimeElapsed>
 80013b8:	4603      	mov	r3, r0
 80013ba:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80013bc:	88fb      	ldrh	r3, [r7, #6]
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d205      	bcs.n	80013d0 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80013c8:	4b32      	ldr	r3, [pc, #200]	; (8001494 <RescheduleTimerList+0x134>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	701a      	strb	r2, [r3, #0]
 80013ce:	e04d      	b.n	800146c <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80013d0:	88fb      	ldrh	r3, [r7, #6]
 80013d2:	4a31      	ldr	r2, [pc, #196]	; (8001498 <RescheduleTimerList+0x138>)
 80013d4:	8812      	ldrh	r2, [r2, #0]
 80013d6:	b292      	uxth	r2, r2
 80013d8:	4413      	add	r3, r2
 80013da:	461a      	mov	r2, r3
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	4293      	cmp	r3, r2
 80013e0:	d906      	bls.n	80013f0 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80013e2:	4b2d      	ldr	r3, [pc, #180]	; (8001498 <RescheduleTimerList+0x138>)
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80013e8:	4b2a      	ldr	r3, [pc, #168]	; (8001494 <RescheduleTimerList+0x134>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]
 80013ee:	e03d      	b.n	800146c <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	88fb      	ldrh	r3, [r7, #6]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80013fa:	4b26      	ldr	r3, [pc, #152]	; (8001494 <RescheduleTimerList+0x134>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001400:	e034      	b.n	800146c <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001402:	7bfa      	ldrb	r2, [r7, #15]
 8001404:	4922      	ldr	r1, [pc, #136]	; (8001490 <RescheduleTimerList+0x130>)
 8001406:	4613      	mov	r3, r2
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4413      	add	r3, r2
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	440b      	add	r3, r1
 8001410:	3308      	adds	r3, #8
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	88fb      	ldrh	r3, [r7, #6]
 8001416:	429a      	cmp	r2, r3
 8001418:	d20a      	bcs.n	8001430 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800141a:	7bfa      	ldrb	r2, [r7, #15]
 800141c:	491c      	ldr	r1, [pc, #112]	; (8001490 <RescheduleTimerList+0x130>)
 800141e:	4613      	mov	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	4413      	add	r3, r2
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	440b      	add	r3, r1
 8001428:	3308      	adds	r3, #8
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	e013      	b.n	8001458 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001430:	7bfa      	ldrb	r2, [r7, #15]
 8001432:	4917      	ldr	r1, [pc, #92]	; (8001490 <RescheduleTimerList+0x130>)
 8001434:	4613      	mov	r3, r2
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	4413      	add	r3, r2
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	440b      	add	r3, r1
 800143e:	3308      	adds	r3, #8
 8001440:	6819      	ldr	r1, [r3, #0]
 8001442:	88fb      	ldrh	r3, [r7, #6]
 8001444:	7bfa      	ldrb	r2, [r7, #15]
 8001446:	1ac9      	subs	r1, r1, r3
 8001448:	4811      	ldr	r0, [pc, #68]	; (8001490 <RescheduleTimerList+0x130>)
 800144a:	4613      	mov	r3, r2
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	4413      	add	r3, r2
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	4403      	add	r3, r0
 8001454:	3308      	adds	r3, #8
 8001456:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001458:	7bfa      	ldrb	r2, [r7, #15]
 800145a:	490d      	ldr	r1, [pc, #52]	; (8001490 <RescheduleTimerList+0x130>)
 800145c:	4613      	mov	r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4413      	add	r3, r2
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	440b      	add	r3, r1
 8001466:	3315      	adds	r3, #21
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800146c:	7bfb      	ldrb	r3, [r7, #15]
 800146e:	2b06      	cmp	r3, #6
 8001470:	d1c7      	bne.n	8001402 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001472:	89bb      	ldrh	r3, [r7, #12]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff15 	bl	80012a4 <RestartWakeupCounter>

  return ;
 800147a:	bf00      	nop
}
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40002800 	.word	0x40002800
 8001488:	20000214 	.word	0x20000214
 800148c:	200000ec 	.word	0x200000ec
 8001490:	2000005c 	.word	0x2000005c
 8001494:	200000f4 	.word	0x200000f4
 8001498:	2000021c 	.word	0x2000021c

0800149c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08a      	sub	sp, #40	; 0x28
 80014a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014a2:	f3ef 8310 	mrs	r3, PRIMASK
 80014a6:	617b      	str	r3, [r7, #20]
  return(result);
 80014a8:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80014ac:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80014ae:	4b5e      	ldr	r3, [pc, #376]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	22ca      	movs	r2, #202	; 0xca
 80014b6:	625a      	str	r2, [r3, #36]	; 0x24
 80014b8:	4b5b      	ldr	r3, [pc, #364]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2253      	movs	r2, #83	; 0x53
 80014c0:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 80014c2:	4b59      	ldr	r3, [pc, #356]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	689a      	ldr	r2, [r3, #8]
 80014ca:	4b57      	ldr	r3, [pc, #348]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014d4:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80014d6:	4b55      	ldr	r3, [pc, #340]	; (800162c <HW_TS_RTC_Wakeup_Handler+0x190>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80014de:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80014e2:	4953      	ldr	r1, [pc, #332]	; (8001630 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80014e4:	4613      	mov	r3, r2
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	4413      	add	r3, r2
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	440b      	add	r3, r1
 80014ee:	330c      	adds	r3, #12
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d170      	bne.n	80015da <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80014f8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80014fc:	494c      	ldr	r1, [pc, #304]	; (8001630 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80014fe:	4613      	mov	r3, r2
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	4413      	add	r3, r2
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	440b      	add	r3, r1
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800150c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001510:	4947      	ldr	r1, [pc, #284]	; (8001630 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001512:	4613      	mov	r3, r2
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4413      	add	r3, r2
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	440b      	add	r3, r1
 800151c:	3310      	adds	r3, #16
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001522:	4b44      	ldr	r3, [pc, #272]	; (8001634 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	d04e      	beq.n	80015ca <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800152c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001530:	493f      	ldr	r1, [pc, #252]	; (8001630 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001532:	4613      	mov	r3, r2
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	4413      	add	r3, r2
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	440b      	add	r3, r1
 800153c:	330d      	adds	r3, #13
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b01      	cmp	r3, #1
 8001544:	d125      	bne.n	8001592 <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001546:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800154a:	2101      	movs	r1, #1
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fde5 	bl	800111c <UnlinkTimer>
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001554:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800155c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001560:	4933      	ldr	r1, [pc, #204]	; (8001630 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001562:	4613      	mov	r3, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	4413      	add	r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	440b      	add	r3, r1
 800156c:	3304      	adds	r3, #4
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001574:	4611      	mov	r1, r2
 8001576:	4618      	mov	r0, r3
 8001578:	f000 fa40 	bl	80019fc <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800157c:	4b2a      	ldr	r3, [pc, #168]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	22ca      	movs	r2, #202	; 0xca
 8001584:	625a      	str	r2, [r3, #36]	; 0x24
 8001586:	4b28      	ldr	r3, [pc, #160]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2253      	movs	r2, #83	; 0x53
 800158e:	625a      	str	r2, [r3, #36]	; 0x24
 8001590:	e013      	b.n	80015ba <HW_TS_RTC_Wakeup_Handler+0x11e>
 8001592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800159c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015a0:	4618      	mov	r0, r3
 80015a2:	f000 f9a1 	bl	80018e8 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80015a6:	4b20      	ldr	r3, [pc, #128]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	22ca      	movs	r2, #202	; 0xca
 80015ae:	625a      	str	r2, [r3, #36]	; 0x24
 80015b0:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2253      	movs	r2, #83	; 0x53
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80015ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015be:	69fa      	ldr	r2, [r7, #28]
 80015c0:	4619      	mov	r1, r3
 80015c2:	69b8      	ldr	r0, [r7, #24]
 80015c4:	f000 faa0 	bl	8001b08 <HW_TS_RTC_Int_AppNot>
 80015c8:	e024      	b.n	8001614 <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 80015ca:	f7ff fec9 	bl	8001360 <RescheduleTimerList>
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	f383 8810 	msr	PRIMASK, r3
 80015d8:	e01c      	b.n	8001614 <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80015da:	bf00      	nop
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0f7      	beq.n	80015dc <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80015ec:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001600:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001602:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001604:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001614:	4b04      	ldr	r3, [pc, #16]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	22ff      	movs	r2, #255	; 0xff
 800161c:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800161e:	bf00      	nop
}
 8001620:	3728      	adds	r7, #40	; 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000214 	.word	0x20000214
 800162c:	200000ec 	.word	0x200000ec
 8001630:	2000005c 	.word	0x2000005c
 8001634:	200000f4 	.word	0x200000f4
 8001638:	58000800 	.word	0x58000800

0800163c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	6039      	str	r1, [r7, #0]
 8001646:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8001648:	4a61      	ldr	r2, [pc, #388]	; (80017d0 <HW_TS_Init+0x194>)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800164e:	4b60      	ldr	r3, [pc, #384]	; (80017d0 <HW_TS_Init+0x194>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	22ca      	movs	r2, #202	; 0xca
 8001656:	625a      	str	r2, [r3, #36]	; 0x24
 8001658:	4b5d      	ldr	r3, [pc, #372]	; (80017d0 <HW_TS_Init+0x194>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2253      	movs	r2, #83	; 0x53
 8001660:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001662:	4b5c      	ldr	r3, [pc, #368]	; (80017d4 <HW_TS_Init+0x198>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	4a5b      	ldr	r2, [pc, #364]	; (80017d4 <HW_TS_Init+0x198>)
 8001668:	f043 0320 	orr.w	r3, r3, #32
 800166c:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800166e:	4b59      	ldr	r3, [pc, #356]	; (80017d4 <HW_TS_Init+0x198>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	b2db      	uxtb	r3, r3
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	b2db      	uxtb	r3, r3
 800167a:	f1c3 0304 	rsb	r3, r3, #4
 800167e:	b2da      	uxtb	r2, r3
 8001680:	4b55      	ldr	r3, [pc, #340]	; (80017d8 <HW_TS_Init+0x19c>)
 8001682:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001684:	4b53      	ldr	r3, [pc, #332]	; (80017d4 <HW_TS_Init+0x198>)
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800168c:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001690:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	fa92 f2a2 	rbit	r2, r2
 8001698:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	fab2 f282 	clz	r2, r2
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	40d3      	lsrs	r3, r2
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	3301      	adds	r3, #1
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4b4c      	ldr	r3, [pc, #304]	; (80017dc <HW_TS_Init+0x1a0>)
 80016ac:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80016ae:	4b49      	ldr	r3, [pc, #292]	; (80017d4 <HW_TS_Init+0x198>)
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	3301      	adds	r3, #1
 80016bc:	b29a      	uxth	r2, r3
 80016be:	4b48      	ldr	r3, [pc, #288]	; (80017e0 <HW_TS_Init+0x1a4>)
 80016c0:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80016c2:	4b47      	ldr	r3, [pc, #284]	; (80017e0 <HW_TS_Init+0x1a4>)
 80016c4:	881b      	ldrh	r3, [r3, #0]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	4a44      	ldr	r2, [pc, #272]	; (80017dc <HW_TS_Init+0x1a0>)
 80016ca:	7812      	ldrb	r2, [r2, #0]
 80016cc:	fb02 f303 	mul.w	r3, r2, r3
 80016d0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80016d4:	4a40      	ldr	r2, [pc, #256]	; (80017d8 <HW_TS_Init+0x19c>)
 80016d6:	7812      	ldrb	r2, [r2, #0]
 80016d8:	40d3      	lsrs	r3, r2
 80016da:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d904      	bls.n	80016f0 <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80016e6:	4b3f      	ldr	r3, [pc, #252]	; (80017e4 <HW_TS_Init+0x1a8>)
 80016e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016ec:	801a      	strh	r2, [r3, #0]
 80016ee:	e003      	b.n	80016f8 <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	4b3b      	ldr	r3, [pc, #236]	; (80017e4 <HW_TS_Init+0x1a8>)
 80016f6:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80016f8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80016fc:	f7ff fb8c 	bl	8000e18 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001700:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001704:	f7ff fb74 	bl	8000df0 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d143      	bne.n	8001796 <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800170e:	4b36      	ldr	r3, [pc, #216]	; (80017e8 <HW_TS_Init+0x1ac>)
 8001710:	2201      	movs	r2, #1
 8001712:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001714:	4b35      	ldr	r3, [pc, #212]	; (80017ec <HW_TS_Init+0x1b0>)
 8001716:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800171a:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800171c:	2300      	movs	r3, #0
 800171e:	75fb      	strb	r3, [r7, #23]
 8001720:	e00c      	b.n	800173c <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001722:	7dfa      	ldrb	r2, [r7, #23]
 8001724:	4932      	ldr	r1, [pc, #200]	; (80017f0 <HW_TS_Init+0x1b4>)
 8001726:	4613      	mov	r3, r2
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	4413      	add	r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	440b      	add	r3, r1
 8001730:	330c      	adds	r3, #12
 8001732:	2200      	movs	r2, #0
 8001734:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001736:	7dfb      	ldrb	r3, [r7, #23]
 8001738:	3301      	adds	r3, #1
 800173a:	75fb      	strb	r3, [r7, #23]
 800173c:	7dfb      	ldrb	r3, [r7, #23]
 800173e:	2b05      	cmp	r3, #5
 8001740:	d9ef      	bls.n	8001722 <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001742:	4b2c      	ldr	r3, [pc, #176]	; (80017f4 <HW_TS_Init+0x1b8>)
 8001744:	2206      	movs	r2, #6
 8001746:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8001748:	4b21      	ldr	r3, [pc, #132]	; (80017d0 <HW_TS_Init+0x194>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	4b1f      	ldr	r3, [pc, #124]	; (80017d0 <HW_TS_Init+0x194>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800175a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800175c:	4b1c      	ldr	r3, [pc, #112]	; (80017d0 <HW_TS_Init+0x194>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	b2da      	uxtb	r2, r3
 8001766:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <HW_TS_Init+0x194>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001770:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001772:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <HW_TS_Init+0x1bc>)
 8001774:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001778:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800177a:	2003      	movs	r0, #3
 800177c:	f003 f8ed 	bl	800495a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001780:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <HW_TS_Init+0x194>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <HW_TS_Init+0x194>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	e00a      	b.n	80017ac <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001796:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <HW_TS_Init+0x194>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d002      	beq.n	80017ac <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80017a6:	2003      	movs	r0, #3
 80017a8:	f003 f8c9 	bl	800493e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <HW_TS_Init+0x194>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	22ff      	movs	r2, #255	; 0xff
 80017b4:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80017b6:	2200      	movs	r2, #0
 80017b8:	2103      	movs	r1, #3
 80017ba:	2003      	movs	r0, #3
 80017bc:	f003 f87d 	bl	80048ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80017c0:	2003      	movs	r0, #3
 80017c2:	f003 f894 	bl	80048ee <HAL_NVIC_EnableIRQ>

  return;
 80017c6:	bf00      	nop
}
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000214 	.word	0x20000214
 80017d4:	40002800 	.word	0x40002800
 80017d8:	20000218 	.word	0x20000218
 80017dc:	20000219 	.word	0x20000219
 80017e0:	2000021a 	.word	0x2000021a
 80017e4:	2000021c 	.word	0x2000021c
 80017e8:	200000f4 	.word	0x200000f4
 80017ec:	200000f0 	.word	0x200000f0
 80017f0:	2000005c 	.word	0x2000005c
 80017f4:	200000ec 	.word	0x200000ec
 80017f8:	58000800 	.word	0x58000800

080017fc <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b08b      	sub	sp, #44	; 0x2c
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	603b      	str	r3, [r7, #0]
 8001808:	4613      	mov	r3, r2
 800180a:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001812:	f3ef 8310 	mrs	r3, PRIMASK
 8001816:	61fb      	str	r3, [r7, #28]
  return(result);
 8001818:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800181a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800181c:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800181e:	e004      	b.n	800182a <HW_TS_Create+0x2e>
  {
    loop++;
 8001820:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001824:	3301      	adds	r3, #1
 8001826:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800182a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800182e:	2b05      	cmp	r3, #5
 8001830:	d80c      	bhi.n	800184c <HW_TS_Create+0x50>
 8001832:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001836:	492b      	ldr	r1, [pc, #172]	; (80018e4 <HW_TS_Create+0xe8>)
 8001838:	4613      	mov	r3, r2
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	4413      	add	r3, r2
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	440b      	add	r3, r1
 8001842:	330c      	adds	r3, #12
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1e9      	bne.n	8001820 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800184c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001850:	2b06      	cmp	r3, #6
 8001852:	d037      	beq.n	80018c4 <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001854:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001858:	4922      	ldr	r1, [pc, #136]	; (80018e4 <HW_TS_Create+0xe8>)
 800185a:	4613      	mov	r3, r2
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	4413      	add	r3, r2
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	440b      	add	r3, r1
 8001864:	330c      	adds	r3, #12
 8001866:	2201      	movs	r2, #1
 8001868:	701a      	strb	r2, [r3, #0]
 800186a:	6a3b      	ldr	r3, [r7, #32]
 800186c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001874:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001878:	491a      	ldr	r1, [pc, #104]	; (80018e4 <HW_TS_Create+0xe8>)
 800187a:	4613      	mov	r3, r2
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	4413      	add	r3, r2
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	440b      	add	r3, r1
 8001884:	3310      	adds	r3, #16
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800188a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800188e:	4915      	ldr	r1, [pc, #84]	; (80018e4 <HW_TS_Create+0xe8>)
 8001890:	4613      	mov	r3, r2
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	4413      	add	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	440b      	add	r3, r1
 800189a:	330d      	adds	r3, #13
 800189c:	79fa      	ldrb	r2, [r7, #7]
 800189e:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80018a0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80018a4:	490f      	ldr	r1, [pc, #60]	; (80018e4 <HW_TS_Create+0xe8>)
 80018a6:	4613      	mov	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4413      	add	r3, r2
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	440b      	add	r3, r1
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80018ba:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80018bc:	2300      	movs	r3, #0
 80018be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80018c2:	e007      	b.n	80018d4 <HW_TS_Create+0xd8>
 80018c4:	6a3b      	ldr	r3, [r7, #32]
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80018ce:	2301      	movs	r3, #1
 80018d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80018d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80018d8:	4618      	mov	r0, r3
 80018da:	372c      	adds	r7, #44	; 0x2c
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	2000005c 	.word	0x2000005c

080018e8 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018f2:	f3ef 8310 	mrs	r3, PRIMASK
 80018f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80018f8:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80018fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80018fc:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80018fe:	2003      	movs	r0, #3
 8001900:	f003 f803 	bl	800490a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001904:	4b37      	ldr	r3, [pc, #220]	; (80019e4 <HW_TS_Stop+0xfc>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	22ca      	movs	r2, #202	; 0xca
 800190c:	625a      	str	r2, [r3, #36]	; 0x24
 800190e:	4b35      	ldr	r3, [pc, #212]	; (80019e4 <HW_TS_Stop+0xfc>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2253      	movs	r2, #83	; 0x53
 8001916:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001918:	79fa      	ldrb	r2, [r7, #7]
 800191a:	4933      	ldr	r1, [pc, #204]	; (80019e8 <HW_TS_Stop+0x100>)
 800191c:	4613      	mov	r3, r2
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	4413      	add	r3, r2
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	440b      	add	r3, r1
 8001926:	330c      	adds	r3, #12
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d148      	bne.n	80019c2 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	2100      	movs	r1, #0
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fbf1 	bl	800111c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800193a:	4b2c      	ldr	r3, [pc, #176]	; (80019ec <HW_TS_Stop+0x104>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001940:	7cfb      	ldrb	r3, [r7, #19]
 8001942:	2b06      	cmp	r3, #6
 8001944:	d135      	bne.n	80019b2 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001946:	4b2a      	ldr	r3, [pc, #168]	; (80019f0 <HW_TS_Stop+0x108>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800194e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001952:	d108      	bne.n	8001966 <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001954:	bf00      	nop
 8001956:	4b23      	ldr	r3, [pc, #140]	; (80019e4 <HW_TS_Stop+0xfc>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f7      	bne.n	8001956 <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001966:	4b1f      	ldr	r3, [pc, #124]	; (80019e4 <HW_TS_Stop+0xfc>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	4b1d      	ldr	r3, [pc, #116]	; (80019e4 <HW_TS_Stop+0xfc>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001978:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800197a:	bf00      	nop
 800197c:	4b19      	ldr	r3, [pc, #100]	; (80019e4 <HW_TS_Stop+0xfc>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0f7      	beq.n	800197c <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800198c:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <HW_TS_Stop+0xfc>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	b2da      	uxtb	r2, r3
 8001996:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <HW_TS_Stop+0xfc>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80019a0:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80019a2:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <HW_TS_Stop+0x10c>)
 80019a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80019a8:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80019aa:	2003      	movs	r0, #3
 80019ac:	f002 ffd5 	bl	800495a <HAL_NVIC_ClearPendingIRQ>
 80019b0:	e007      	b.n	80019c2 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80019b2:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <HW_TS_Stop+0x110>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	7cfa      	ldrb	r2, [r7, #19]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d001      	beq.n	80019c2 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 80019be:	f7ff fccf 	bl	8001360 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80019c2:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <HW_TS_Stop+0xfc>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	22ff      	movs	r2, #255	; 0xff
 80019ca:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80019cc:	2003      	movs	r0, #3
 80019ce:	f002 ff8e 	bl	80048ee <HAL_NVIC_EnableIRQ>
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80019dc:	bf00      	nop
}
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000214 	.word	0x20000214
 80019e8:	2000005c 	.word	0x2000005c
 80019ec:	200000ec 	.word	0x200000ec
 80019f0:	40002800 	.word	0x40002800
 80019f4:	58000800 	.word	0x58000800
 80019f8:	200000ed 	.word	0x200000ed

080019fc <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	6039      	str	r1, [r7, #0]
 8001a06:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001a08:	79fa      	ldrb	r2, [r7, #7]
 8001a0a:	493b      	ldr	r1, [pc, #236]	; (8001af8 <HW_TS_Start+0xfc>)
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	4413      	add	r3, r2
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	440b      	add	r3, r1
 8001a16:	330c      	adds	r3, #12
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d103      	bne.n	8001a28 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff ff60 	bl	80018e8 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a28:	f3ef 8310 	mrs	r3, PRIMASK
 8001a2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001a30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a32:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001a34:	2003      	movs	r0, #3
 8001a36:	f002 ff68 	bl	800490a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001a3a:	4b30      	ldr	r3, [pc, #192]	; (8001afc <HW_TS_Start+0x100>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	22ca      	movs	r2, #202	; 0xca
 8001a42:	625a      	str	r2, [r3, #36]	; 0x24
 8001a44:	4b2d      	ldr	r3, [pc, #180]	; (8001afc <HW_TS_Start+0x100>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2253      	movs	r2, #83	; 0x53
 8001a4c:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001a4e:	79fa      	ldrb	r2, [r7, #7]
 8001a50:	4929      	ldr	r1, [pc, #164]	; (8001af8 <HW_TS_Start+0xfc>)
 8001a52:	4613      	mov	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	4413      	add	r3, r2
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	440b      	add	r3, r1
 8001a5c:	330c      	adds	r3, #12
 8001a5e:	2202      	movs	r2, #2
 8001a60:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001a62:	79fa      	ldrb	r2, [r7, #7]
 8001a64:	4924      	ldr	r1, [pc, #144]	; (8001af8 <HW_TS_Start+0xfc>)
 8001a66:	4613      	mov	r3, r2
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	4413      	add	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	440b      	add	r3, r1
 8001a70:	3308      	adds	r3, #8
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001a76:	79fa      	ldrb	r2, [r7, #7]
 8001a78:	491f      	ldr	r1, [pc, #124]	; (8001af8 <HW_TS_Start+0xfc>)
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	4413      	add	r3, r2
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	440b      	add	r3, r1
 8001a84:	3304      	adds	r3, #4
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff fa9b 	bl	8000fc8 <linkTimer>
 8001a92:	4603      	mov	r3, r0
 8001a94:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001a96:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <HW_TS_Start+0x104>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001a9c:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <HW_TS_Start+0x108>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	7c7a      	ldrb	r2, [r7, #17]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d002      	beq.n	8001aae <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 8001aa8:	f7ff fc5a 	bl	8001360 <RescheduleTimerList>
 8001aac:	e013      	b.n	8001ad6 <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001aae:	79fa      	ldrb	r2, [r7, #7]
 8001ab0:	4911      	ldr	r1, [pc, #68]	; (8001af8 <HW_TS_Start+0xfc>)
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	4413      	add	r3, r2
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	440b      	add	r3, r1
 8001abc:	3308      	adds	r3, #8
 8001abe:	6819      	ldr	r1, [r3, #0]
 8001ac0:	8a7b      	ldrh	r3, [r7, #18]
 8001ac2:	79fa      	ldrb	r2, [r7, #7]
 8001ac4:	1ac9      	subs	r1, r1, r3
 8001ac6:	480c      	ldr	r0, [pc, #48]	; (8001af8 <HW_TS_Start+0xfc>)
 8001ac8:	4613      	mov	r3, r2
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	4413      	add	r3, r2
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	4403      	add	r3, r0
 8001ad2:	3308      	adds	r3, #8
 8001ad4:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001ad6:	4b09      	ldr	r3, [pc, #36]	; (8001afc <HW_TS_Start+0x100>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	22ff      	movs	r2, #255	; 0xff
 8001ade:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001ae0:	2003      	movs	r0, #3
 8001ae2:	f002 ff04 	bl	80048ee <HAL_NVIC_EnableIRQ>
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001af0:	bf00      	nop
}
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	2000005c 	.word	0x2000005c
 8001afc:	20000214 	.word	0x20000214
 8001b00:	200000ec 	.word	0x200000ec
 8001b04:	200000ed 	.word	0x200000ed

08001b08 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	460b      	mov	r3, r1
 8001b12:	607a      	str	r2, [r7, #4]
 8001b14:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4798      	blx	r3

  return;
 8001b1a:	bf00      	nop
}
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <LL_AHB2_GRP1_EnableClock>:
{
 8001b22:	b480      	push	{r7}
 8001b24:	b085      	sub	sp, #20
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4013      	ands	r3, r2
 8001b44:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b46:	68fb      	ldr	r3, [r7, #12]
}
 8001b48:	bf00      	nop
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4013      	ands	r3, r2
 8001b76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b78:	68fb      	ldr	r3, [r7, #12]
}
 8001b7a:	bf00      	nop
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
	...

08001b88 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001b8c:	4b1b      	ldr	r3, [pc, #108]	; (8001bfc <MX_I2C1_Init+0x74>)
 8001b8e:	4a1c      	ldr	r2, [pc, #112]	; (8001c00 <MX_I2C1_Init+0x78>)
 8001b90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 8001b92:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <MX_I2C1_Init+0x74>)
 8001b94:	4a1b      	ldr	r2, [pc, #108]	; (8001c04 <MX_I2C1_Init+0x7c>)
 8001b96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b98:	4b18      	ldr	r3, [pc, #96]	; (8001bfc <MX_I2C1_Init+0x74>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b9e:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <MX_I2C1_Init+0x74>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ba4:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <MX_I2C1_Init+0x74>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001baa:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <MX_I2C1_Init+0x74>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <MX_I2C1_Init+0x74>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bb6:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <MX_I2C1_Init+0x74>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bbc:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <MX_I2C1_Init+0x74>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bc2:	480e      	ldr	r0, [pc, #56]	; (8001bfc <MX_I2C1_Init+0x74>)
 8001bc4:	f003 f89e 	bl	8004d04 <HAL_I2C_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001bce:	f000 fed7 	bl	8002980 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4809      	ldr	r0, [pc, #36]	; (8001bfc <MX_I2C1_Init+0x74>)
 8001bd6:	f003 fcef 	bl	80055b8 <HAL_I2CEx_ConfigAnalogFilter>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001be0:	f000 fece 	bl	8002980 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001be4:	2100      	movs	r1, #0
 8001be6:	4805      	ldr	r0, [pc, #20]	; (8001bfc <MX_I2C1_Init+0x74>)
 8001be8:	f003 fd31 	bl	800564e <HAL_I2CEx_ConfigDigitalFilter>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001bf2:	f000 fec5 	bl	8002980 <Error_Handler>
  }

}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000784 	.word	0x20000784
 8001c00:	40005400 	.word	0x40005400
 8001c04:	00300f38 	.word	0x00300f38

08001c08 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8001c0c:	4b1b      	ldr	r3, [pc, #108]	; (8001c7c <MX_I2C3_Init+0x74>)
 8001c0e:	4a1c      	ldr	r2, [pc, #112]	; (8001c80 <MX_I2C3_Init+0x78>)
 8001c10:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 8001c12:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <MX_I2C3_Init+0x74>)
 8001c14:	f640 6214 	movw	r2, #3604	; 0xe14
 8001c18:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001c1a:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <MX_I2C3_Init+0x74>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c20:	4b16      	ldr	r3, [pc, #88]	; (8001c7c <MX_I2C3_Init+0x74>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c26:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <MX_I2C3_Init+0x74>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001c2c:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <MX_I2C3_Init+0x74>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c32:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <MX_I2C3_Init+0x74>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c38:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <MX_I2C3_Init+0x74>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c3e:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <MX_I2C3_Init+0x74>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001c44:	480d      	ldr	r0, [pc, #52]	; (8001c7c <MX_I2C3_Init+0x74>)
 8001c46:	f003 f85d 	bl	8004d04 <HAL_I2C_Init>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001c50:	f000 fe96 	bl	8002980 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c54:	2100      	movs	r1, #0
 8001c56:	4809      	ldr	r0, [pc, #36]	; (8001c7c <MX_I2C3_Init+0x74>)
 8001c58:	f003 fcae 	bl	80055b8 <HAL_I2CEx_ConfigAnalogFilter>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001c62:	f000 fe8d 	bl	8002980 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001c66:	2100      	movs	r1, #0
 8001c68:	4804      	ldr	r0, [pc, #16]	; (8001c7c <MX_I2C3_Init+0x74>)
 8001c6a:	f003 fcf0 	bl	800564e <HAL_I2CEx_ConfigDigitalFilter>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001c74:	f000 fe84 	bl	8002980 <Error_Handler>
  }

}
 8001c78:	bf00      	nop
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20000738 	.word	0x20000738
 8001c80:	40005c00 	.word	0x40005c00

08001c84 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b088      	sub	sp, #32
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8c:	f107 030c 	add.w	r3, r7, #12
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a1d      	ldr	r2, [pc, #116]	; (8001d18 <HAL_I2C_MspInit+0x94>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d118      	bne.n	8001cd8 <HAL_I2C_MspInit+0x54>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca6:	2002      	movs	r0, #2
 8001ca8:	f7ff ff3b 	bl	8001b22 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cac:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cb0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cb2:	2312      	movs	r3, #18
 8001cb4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cbe:	2304      	movs	r3, #4
 8001cc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc2:	f107 030c 	add.w	r3, r7, #12
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4814      	ldr	r0, [pc, #80]	; (8001d1c <HAL_I2C_MspInit+0x98>)
 8001cca:	f002 fe55 	bl	8004978 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cce:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001cd2:	f7ff ff3f 	bl	8001b54 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001cd6:	e01b      	b.n	8001d10 <HAL_I2C_MspInit+0x8c>
  else if(i2cHandle->Instance==I2C3)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a10      	ldr	r2, [pc, #64]	; (8001d20 <HAL_I2C_MspInit+0x9c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d116      	bne.n	8001d10 <HAL_I2C_MspInit+0x8c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce2:	2004      	movs	r0, #4
 8001ce4:	f7ff ff1d 	bl	8001b22 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cec:	2312      	movs	r3, #18
 8001cee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001cf8:	2304      	movs	r3, #4
 8001cfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cfc:	f107 030c 	add.w	r3, r7, #12
 8001d00:	4619      	mov	r1, r3
 8001d02:	4808      	ldr	r0, [pc, #32]	; (8001d24 <HAL_I2C_MspInit+0xa0>)
 8001d04:	f002 fe38 	bl	8004978 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001d08:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001d0c:	f7ff ff22 	bl	8001b54 <LL_APB1_GRP1_EnableClock>
}
 8001d10:	bf00      	nop
 8001d12:	3720      	adds	r7, #32
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40005400 	.word	0x40005400
 8001d1c:	48000400 	.word	0x48000400
 8001d20:	40005c00 	.word	0x40005c00
 8001d24:	48000800 	.word	0x48000800

08001d28 <LL_RCC_LSE_SetDriveCapability>:
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d38:	f023 0218 	bic.w	r2, r3, #24
 8001d3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d5a:	f001 fb35 	bl	80033c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d5e:	f000 f8a7 	bl	8001eb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d62:	f7fe ffbf 	bl	8000ce4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001d66:	f001 f9f1 	bl	800314c <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8001d6a:	f001 fa9d 	bl	80032a8 <MX_USB_PCD_Init>
  MX_RF_Init();
 8001d6e:	f000 fe0e 	bl	800298e <MX_RF_Init>
  MX_RTC_Init();
 8001d72:	f000 fe3d 	bl	80029f0 <MX_RTC_Init>
  MX_I2C3_Init();
 8001d76:	f7ff ff47 	bl	8001c08 <MX_I2C3_Init>
  MX_SPI1_Init();
 8001d7a:	f000 fecf 	bl	8002b1c <MX_SPI1_Init>
  MX_SPI2_Init();
 8001d7e:	f000 ff0b 	bl	8002b98 <MX_SPI2_Init>
  MX_TIM16_Init();
 8001d82:	f001 f96d 	bl	8003060 <MX_TIM16_Init>
  MX_I2C1_Init();
 8001d86:	f7ff feff 	bl	8001b88 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001d8a:	f7fe fe17 	bl	80009bc <MX_ADC1_Init>


  /*
   * MPU9250
   * */
   readByte(acc1_1, WHO_AM_I_MPU9250, &WAI_MPU9250_1, 1);
 8001d8e:	4a39      	ldr	r2, [pc, #228]	; (8001e74 <main+0x120>)
 8001d90:	2301      	movs	r3, #1
 8001d92:	9301      	str	r3, [sp, #4]
 8001d94:	4b38      	ldr	r3, [pc, #224]	; (8001e78 <main+0x124>)
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	2375      	movs	r3, #117	; 0x75
 8001d9a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d9c:	f7fe fc85 	bl	80006aa <readByte>
   readByte(acc1_2, WHO_AM_I_MPU9250, &WAI_MPU9250_2, 1);
 8001da0:	4a36      	ldr	r2, [pc, #216]	; (8001e7c <main+0x128>)
 8001da2:	2301      	movs	r3, #1
 8001da4:	9301      	str	r3, [sp, #4]
 8001da6:	4b36      	ldr	r3, [pc, #216]	; (8001e80 <main+0x12c>)
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	2375      	movs	r3, #117	; 0x75
 8001dac:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dae:	f7fe fc7c 	bl	80006aa <readByte>
   readByte(acc2_1, WHO_AM_I_MPU9250, &WAI_MPU9250_3, 1);
 8001db2:	4a34      	ldr	r2, [pc, #208]	; (8001e84 <main+0x130>)
 8001db4:	2301      	movs	r3, #1
 8001db6:	9301      	str	r3, [sp, #4]
 8001db8:	4b33      	ldr	r3, [pc, #204]	; (8001e88 <main+0x134>)
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	2375      	movs	r3, #117	; 0x75
 8001dbe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dc0:	f7fe fc73 	bl	80006aa <readByte>
   readByte(acc2_2, WHO_AM_I_MPU9250, &WAI_MPU9250_4, 1);
 8001dc4:	4a31      	ldr	r2, [pc, #196]	; (8001e8c <main+0x138>)
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	9301      	str	r3, [sp, #4]
 8001dca:	4b31      	ldr	r3, [pc, #196]	; (8001e90 <main+0x13c>)
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	2375      	movs	r3, #117	; 0x75
 8001dd0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dd2:	f7fe fc6a 	bl	80006aa <readByte>
   if((WAI_MPU9250_1 == 0x71)&&(WAI_MPU9250_2 == 0x71)&&(WAI_MPU9250_3 == 0x71)&&(WAI_MPU9250_4 == 0x71))
 8001dd6:	4b28      	ldr	r3, [pc, #160]	; (8001e78 <main+0x124>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b71      	cmp	r3, #113	; 0x71
 8001ddc:	d110      	bne.n	8001e00 <main+0xac>
 8001dde:	4b28      	ldr	r3, [pc, #160]	; (8001e80 <main+0x12c>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b71      	cmp	r3, #113	; 0x71
 8001de4:	d10c      	bne.n	8001e00 <main+0xac>
 8001de6:	4b28      	ldr	r3, [pc, #160]	; (8001e88 <main+0x134>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b71      	cmp	r3, #113	; 0x71
 8001dec:	d108      	bne.n	8001e00 <main+0xac>
 8001dee:	4b28      	ldr	r3, [pc, #160]	; (8001e90 <main+0x13c>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b71      	cmp	r3, #113	; 0x71
 8001df4:	d104      	bne.n	8001e00 <main+0xac>
   	   HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8001df6:	2101      	movs	r1, #1
 8001df8:	4826      	ldr	r0, [pc, #152]	; (8001e94 <main+0x140>)
 8001dfa:	f002 ff45 	bl	8004c88 <HAL_GPIO_TogglePin>
 8001dfe:	e003      	b.n	8001e08 <main+0xb4>
      else
   	   HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001e00:	2102      	movs	r1, #2
 8001e02:	4824      	ldr	r0, [pc, #144]	; (8001e94 <main+0x140>)
 8001e04:	f002 ff40 	bl	8004c88 <HAL_GPIO_TogglePin>
   initMPU9250(acc1_1);
 8001e08:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <main+0x120>)
 8001e0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001e0e:	f7fe fcc9 	bl	80007a4 <initMPU9250>
   initMPU9250(acc1_2);
 8001e12:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <main+0x128>)
 8001e14:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001e18:	f7fe fcc4 	bl	80007a4 <initMPU9250>
   initMPU9250(acc2_1);
 8001e1c:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <main+0x130>)
 8001e1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001e22:	f7fe fcbf 	bl	80007a4 <initMPU9250>
   initMPU9250(acc2_2);
 8001e26:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <main+0x138>)
 8001e28:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001e2c:	f7fe fcba 	bl	80007a4 <initMPU9250>

  /*
   * MAX30100
   * */
   read_byte(reg, &ID_MAX30102); // Part ID, normally 0x15
 8001e30:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <main+0x144>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	4919      	ldr	r1, [pc, #100]	; (8001e9c <main+0x148>)
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe fbf4 	bl	8000624 <read_byte>
//   if(ID_MAX30102 == 0x15)
//	   HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
//   else
//	   HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
   begin();
 8001e3c:	f7fe fb26 	bl	800048c <begin>
   /*
    *  ADC
    * */

  // Calibrate The ADC On Power-Up For Better Accuracy
  HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
 8001e40:	217f      	movs	r1, #127	; 0x7f
 8001e42:	4817      	ldr	r0, [pc, #92]	; (8001ea0 <main+0x14c>)
 8001e44:	f002 fb9e 	bl	8004584 <HAL_ADCEx_Calibration_Start>

   /*
    * Register functions
    * */
   UTIL_SEQ_RegTask( 1<< READ_ACC_TASK, UTIL_SEQ_RFU, read_acc );
 8001e48:	4a16      	ldr	r2, [pc, #88]	; (8001ea4 <main+0x150>)
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	2010      	movs	r0, #16
 8001e4e:	f00a fb59 	bl	800c504 <UTIL_SEQ_RegTask>
   UTIL_SEQ_RegTask( 1<< READ_FSR_TASK, UTIL_SEQ_RFU, read_fsr );
 8001e52:	4a15      	ldr	r2, [pc, #84]	; (8001ea8 <main+0x154>)
 8001e54:	2100      	movs	r1, #0
 8001e56:	2020      	movs	r0, #32
 8001e58:	f00a fb54 	bl	800c504 <UTIL_SEQ_RegTask>
   UTIL_SEQ_RegTask( 1<< READ_PPG_TASK, UTIL_SEQ_RFU, read_ppg );
 8001e5c:	4a13      	ldr	r2, [pc, #76]	; (8001eac <main+0x158>)
 8001e5e:	2100      	movs	r1, #0
 8001e60:	2040      	movs	r0, #64	; 0x40
 8001e62:	f00a fb4f 	bl	800c504 <UTIL_SEQ_RegTask>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */

   APPE_Init();
 8001e66:	f7fe fe7f 	bl	8000b68 <APPE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001e6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e6e:	f00a fa69 	bl	800c344 <UTIL_SEQ_Run>
 8001e72:	e7fa      	b.n	8001e6a <main+0x116>
 8001e74:	20000004 	.word	0x20000004
 8001e78:	2000021e 	.word	0x2000021e
 8001e7c:	20000010 	.word	0x20000010
 8001e80:	2000021f 	.word	0x2000021f
 8001e84:	2000001c 	.word	0x2000001c
 8001e88:	20000220 	.word	0x20000220
 8001e8c:	20000028 	.word	0x20000028
 8001e90:	20000221 	.word	0x20000221
 8001e94:	48000400 	.word	0x48000400
 8001e98:	20000034 	.word	0x20000034
 8001e9c:	20000222 	.word	0x20000222
 8001ea0:	200006d4 	.word	0x200006d4
 8001ea4:	0800209d 	.word	0x0800209d
 8001ea8:	0800201d 	.word	0x0800201d
 8001eac:	080022d1 	.word	0x080022d1

08001eb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b0ae      	sub	sp, #184	; 0xb8
 8001eb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eb6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001eba:	2248      	movs	r2, #72	; 0x48
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f00a fc7d 	bl	800c7be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ec4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]
 8001ed4:	615a      	str	r2, [r3, #20]
 8001ed6:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ed8:	1d3b      	adds	r3, r7, #4
 8001eda:	2250      	movs	r2, #80	; 0x50
 8001edc:	2100      	movs	r1, #0
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f00a fc6d 	bl	800c7be <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8001ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ef2:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8001ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f023 0303 	bic.w	r3, r3, #3
 8001efe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f02:	f043 0301 	orr.w	r3, r3, #1
 8001f06:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001f08:	f003 fcd2 	bl	80058b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	f7ff ff0b 	bl	8001d28 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f12:	4b41      	ldr	r3, [pc, #260]	; (8002018 <SystemClock_Config+0x168>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f1a:	4a3f      	ldr	r2, [pc, #252]	; (8002018 <SystemClock_Config+0x168>)
 8001f1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	4b3d      	ldr	r3, [pc, #244]	; (8002018 <SystemClock_Config+0x168>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f2a:	603b      	str	r3, [r7, #0]
 8001f2c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001f2e:	2327      	movs	r3, #39	; 0x27
 8001f30:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f36:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f40:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001f42:	2301      	movs	r3, #1
 8001f44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f48:	2340      	movs	r3, #64	; 0x40
 8001f4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001f54:	2360      	movs	r3, #96	; 0x60
 8001f56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f60:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001f64:	4618      	mov	r0, r3
 8001f66:	f004 f855 	bl	8006014 <HAL_RCC_OscConfig>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001f70:	f000 fd06 	bl	8002980 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001f74:	236f      	movs	r3, #111	; 0x6f
 8001f76:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f80:	2300      	movs	r3, #0
 8001f82:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f84:	2300      	movs	r3, #0
 8001f86:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001f90:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f94:	2101      	movs	r1, #1
 8001f96:	4618      	mov	r0, r3
 8001f98:	f004 fbd0 	bl	800673c <HAL_RCC_ClockConfig>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8001fa2:	f000 fced 	bl	8002980 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8001fa6:	f643 530d 	movw	r3, #15629	; 0x3d0d
 8001faa:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8001fac:	2318      	movs	r3, #24
 8001fae:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001fb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fb4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001fb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fba:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001fbc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001fc0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8001fc2:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8001fc6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001fcc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001fd2:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8001fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001fd8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001fdc:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001fde:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001fe2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001fe4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fe8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001fea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fee:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001ff4:	2310      	movs	r3, #16
 8001ff6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ff8:	1d3b      	adds	r3, r7, #4
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f004 ffe8 	bl	8006fd0 <HAL_RCCEx_PeriphCLKConfig>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <SystemClock_Config+0x15a>
  {
    Error_Handler();
 8002006:	f000 fcbb 	bl	8002980 <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800200a:	f005 f956 	bl	80072ba <HAL_RCCEx_EnableMSIPLLMode>
}
 800200e:	bf00      	nop
 8002010:	37b8      	adds	r7, #184	; 0xb8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	58000400 	.word	0x58000400

0800201c <read_fsr>:

/* USER CODE BEGIN 4 */
void read_fsr(void){
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0

//
	HAL_ADC_Start(&hadc1);
 8002020:	481a      	ldr	r0, [pc, #104]	; (800208c <read_fsr+0x70>)
 8002022:	f001 fdad 	bl	8003b80 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002026:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800202a:	4818      	ldr	r0, [pc, #96]	; (800208c <read_fsr+0x70>)
 800202c:	f001 fdfc 	bl	8003c28 <HAL_ADC_PollForConversion>
	raw_fsr = HAL_ADC_GetValue(&hadc1);
 8002030:	4816      	ldr	r0, [pc, #88]	; (800208c <read_fsr+0x70>)
 8002032:	f001 fe7f 	bl	8003d34 <HAL_ADC_GetValue>
 8002036:	4603      	mov	r3, r0
 8002038:	b29a      	uxth	r2, r3
 800203a:	4b15      	ldr	r3, [pc, #84]	; (8002090 <read_fsr+0x74>)
 800203c:	801a      	strh	r2, [r3, #0]

	ble_buff_FSR[0+counter_fsr] = (raw_fsr & 0x00FF);
 800203e:	4b14      	ldr	r3, [pc, #80]	; (8002090 <read_fsr+0x74>)
 8002040:	8819      	ldrh	r1, [r3, #0]
 8002042:	4b14      	ldr	r3, [pc, #80]	; (8002094 <read_fsr+0x78>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	461a      	mov	r2, r3
 8002048:	b2c9      	uxtb	r1, r1
 800204a:	4b13      	ldr	r3, [pc, #76]	; (8002098 <read_fsr+0x7c>)
 800204c:	5499      	strb	r1, [r3, r2]
	ble_buff_FSR[1+counter_fsr] = ((raw_fsr >> 8) & 0x00FF);
 800204e:	4b10      	ldr	r3, [pc, #64]	; (8002090 <read_fsr+0x74>)
 8002050:	881b      	ldrh	r3, [r3, #0]
 8002052:	0a1b      	lsrs	r3, r3, #8
 8002054:	b29a      	uxth	r2, r3
 8002056:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <read_fsr+0x78>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	3301      	adds	r3, #1
 800205c:	b2d1      	uxtb	r1, r2
 800205e:	4a0e      	ldr	r2, [pc, #56]	; (8002098 <read_fsr+0x7c>)
 8002060:	54d1      	strb	r1, [r2, r3]

	if(counter_fsr == 18){
 8002062:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <read_fsr+0x78>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b12      	cmp	r3, #18
 8002068:	d108      	bne.n	800207c <read_fsr+0x60>
		counter_fsr=0;
 800206a:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <read_fsr+0x78>)
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1 << SEND_FSR_DATA_BLE_TASK, CFG_SCH_PRIO_1);
 8002070:	2101      	movs	r1, #1
 8002072:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002076:	f00a fa65 	bl	800c544 <UTIL_SEQ_SetTask>
		counter_fsr+=2;
	/*
	 * BUFFER --> [0:19]
	 * */
	//HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
}
 800207a:	e005      	b.n	8002088 <read_fsr+0x6c>
		counter_fsr+=2;
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <read_fsr+0x78>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	3302      	adds	r3, #2
 8002082:	b2da      	uxtb	r2, r3
 8002084:	4b03      	ldr	r3, [pc, #12]	; (8002094 <read_fsr+0x78>)
 8002086:	701a      	strb	r2, [r3, #0]
}
 8002088:	bf00      	nop
 800208a:	bd80      	pop	{r7, pc}
 800208c:	200006d4 	.word	0x200006d4
 8002090:	200007d0 	.word	0x200007d0
 8002094:	200005b1 	.word	0x200005b1
 8002098:	20000598 	.word	0x20000598

0800209c <read_acc>:

void read_acc(void){
 800209c:	b590      	push	{r4, r7, lr}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0

	acc_data_raw[0] = readAccelData(acc1_1);
 80020a2:	4c83      	ldr	r4, [pc, #524]	; (80022b0 <read_acc+0x214>)
 80020a4:	4638      	mov	r0, r7
 80020a6:	4b83      	ldr	r3, [pc, #524]	; (80022b4 <read_acc+0x218>)
 80020a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020aa:	f7fe fb2a 	bl	8000702 <readAccelData>
 80020ae:	4622      	mov	r2, r4
 80020b0:	463b      	mov	r3, r7
 80020b2:	6819      	ldr	r1, [r3, #0]
 80020b4:	6011      	str	r1, [r2, #0]
 80020b6:	889b      	ldrh	r3, [r3, #4]
 80020b8:	8093      	strh	r3, [r2, #4]
	acc_data_raw[1] = readAccelData(acc1_2);
 80020ba:	4c7d      	ldr	r4, [pc, #500]	; (80022b0 <read_acc+0x214>)
 80020bc:	4638      	mov	r0, r7
 80020be:	4b7e      	ldr	r3, [pc, #504]	; (80022b8 <read_acc+0x21c>)
 80020c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020c2:	f7fe fb1e 	bl	8000702 <readAccelData>
 80020c6:	1da3      	adds	r3, r4, #6
 80020c8:	463a      	mov	r2, r7
 80020ca:	6811      	ldr	r1, [r2, #0]
 80020cc:	6019      	str	r1, [r3, #0]
 80020ce:	8892      	ldrh	r2, [r2, #4]
 80020d0:	809a      	strh	r2, [r3, #4]
	acc_data_raw[2] = readAccelData(acc2_1);
 80020d2:	4c77      	ldr	r4, [pc, #476]	; (80022b0 <read_acc+0x214>)
 80020d4:	4638      	mov	r0, r7
 80020d6:	4b79      	ldr	r3, [pc, #484]	; (80022bc <read_acc+0x220>)
 80020d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020da:	f7fe fb12 	bl	8000702 <readAccelData>
 80020de:	f104 030c 	add.w	r3, r4, #12
 80020e2:	463a      	mov	r2, r7
 80020e4:	6811      	ldr	r1, [r2, #0]
 80020e6:	6019      	str	r1, [r3, #0]
 80020e8:	8892      	ldrh	r2, [r2, #4]
 80020ea:	809a      	strh	r2, [r3, #4]
	acc_data_raw[3] = readAccelData(acc2_2);
 80020ec:	4c70      	ldr	r4, [pc, #448]	; (80022b0 <read_acc+0x214>)
 80020ee:	4638      	mov	r0, r7
 80020f0:	4b73      	ldr	r3, [pc, #460]	; (80022c0 <read_acc+0x224>)
 80020f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020f4:	f7fe fb05 	bl	8000702 <readAccelData>
 80020f8:	f104 0312 	add.w	r3, r4, #18
 80020fc:	463a      	mov	r2, r7
 80020fe:	6811      	ldr	r1, [r2, #0]
 8002100:	6019      	str	r1, [r3, #0]
 8002102:	8892      	ldrh	r2, [r2, #4]
 8002104:	809a      	strh	r2, [r3, #4]

	for(int i=0;i<4;i++){
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	e090      	b.n	800222e <read_acc+0x192>
		//X
		ble_buff_ACC[i][0+counter_acc] = (acc_data_raw[i].x & 0x00FF);
 800210c:	4968      	ldr	r1, [pc, #416]	; (80022b0 <read_acc+0x214>)
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	4613      	mov	r3, r2
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	4413      	add	r3, r2
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	440b      	add	r3, r1
 800211a:	881a      	ldrh	r2, [r3, #0]
 800211c:	4b69      	ldr	r3, [pc, #420]	; (80022c4 <read_acc+0x228>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	461c      	mov	r4, r3
 8002122:	b2d0      	uxtb	r0, r2
 8002124:	4968      	ldr	r1, [pc, #416]	; (80022c8 <read_acc+0x22c>)
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	4613      	mov	r3, r2
 800212a:	011b      	lsls	r3, r3, #4
 800212c:	1a9b      	subs	r3, r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	440b      	add	r3, r1
 8002132:	4423      	add	r3, r4
 8002134:	4602      	mov	r2, r0
 8002136:	701a      	strb	r2, [r3, #0]
		ble_buff_ACC[i][1+counter_acc] = ((acc_data_raw[i].x >> 8) & 0x00FF);
 8002138:	495d      	ldr	r1, [pc, #372]	; (80022b0 <read_acc+0x214>)
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	4613      	mov	r3, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4413      	add	r3, r2
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	440b      	add	r3, r1
 8002146:	881b      	ldrh	r3, [r3, #0]
 8002148:	0a1b      	lsrs	r3, r3, #8
 800214a:	b29a      	uxth	r2, r3
 800214c:	4b5d      	ldr	r3, [pc, #372]	; (80022c4 <read_acc+0x228>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	1c59      	adds	r1, r3, #1
 8002152:	b2d4      	uxtb	r4, r2
 8002154:	485c      	ldr	r0, [pc, #368]	; (80022c8 <read_acc+0x22c>)
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	4613      	mov	r3, r2
 800215a:	011b      	lsls	r3, r3, #4
 800215c:	1a9b      	subs	r3, r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4403      	add	r3, r0
 8002162:	440b      	add	r3, r1
 8002164:	4622      	mov	r2, r4
 8002166:	701a      	strb	r2, [r3, #0]
		//Y
		ble_buff_ACC[i][2+counter_acc] = (acc_data_raw[i].y & 0x00FF);
 8002168:	4951      	ldr	r1, [pc, #324]	; (80022b0 <read_acc+0x214>)
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	4613      	mov	r3, r2
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	4413      	add	r3, r2
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	440b      	add	r3, r1
 8002176:	3302      	adds	r3, #2
 8002178:	881a      	ldrh	r2, [r3, #0]
 800217a:	4b52      	ldr	r3, [pc, #328]	; (80022c4 <read_acc+0x228>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	1c99      	adds	r1, r3, #2
 8002180:	b2d4      	uxtb	r4, r2
 8002182:	4851      	ldr	r0, [pc, #324]	; (80022c8 <read_acc+0x22c>)
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	4613      	mov	r3, r2
 8002188:	011b      	lsls	r3, r3, #4
 800218a:	1a9b      	subs	r3, r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	4403      	add	r3, r0
 8002190:	440b      	add	r3, r1
 8002192:	4622      	mov	r2, r4
 8002194:	701a      	strb	r2, [r3, #0]
		ble_buff_ACC[i][3+counter_acc] = ((acc_data_raw[i].y >> 8) & 0x00FF);
 8002196:	4946      	ldr	r1, [pc, #280]	; (80022b0 <read_acc+0x214>)
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	4613      	mov	r3, r2
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	4413      	add	r3, r2
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	440b      	add	r3, r1
 80021a4:	3302      	adds	r3, #2
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	0a1b      	lsrs	r3, r3, #8
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	4b45      	ldr	r3, [pc, #276]	; (80022c4 <read_acc+0x228>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	1cd9      	adds	r1, r3, #3
 80021b2:	b2d4      	uxtb	r4, r2
 80021b4:	4844      	ldr	r0, [pc, #272]	; (80022c8 <read_acc+0x22c>)
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	4613      	mov	r3, r2
 80021ba:	011b      	lsls	r3, r3, #4
 80021bc:	1a9b      	subs	r3, r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	4403      	add	r3, r0
 80021c2:	440b      	add	r3, r1
 80021c4:	4622      	mov	r2, r4
 80021c6:	701a      	strb	r2, [r3, #0]
		//Z
		ble_buff_ACC[i][4+counter_acc] = (acc_data_raw[i].z & 0x00FF);
 80021c8:	4939      	ldr	r1, [pc, #228]	; (80022b0 <read_acc+0x214>)
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	4613      	mov	r3, r2
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	4413      	add	r3, r2
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	440b      	add	r3, r1
 80021d6:	3304      	adds	r3, #4
 80021d8:	881a      	ldrh	r2, [r3, #0]
 80021da:	4b3a      	ldr	r3, [pc, #232]	; (80022c4 <read_acc+0x228>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	1d19      	adds	r1, r3, #4
 80021e0:	b2d4      	uxtb	r4, r2
 80021e2:	4839      	ldr	r0, [pc, #228]	; (80022c8 <read_acc+0x22c>)
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	4613      	mov	r3, r2
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	1a9b      	subs	r3, r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	4403      	add	r3, r0
 80021f0:	440b      	add	r3, r1
 80021f2:	4622      	mov	r2, r4
 80021f4:	701a      	strb	r2, [r3, #0]
		ble_buff_ACC[i][5+counter_acc] = ((acc_data_raw[i].z >> 8) & 0x00FF);
 80021f6:	492e      	ldr	r1, [pc, #184]	; (80022b0 <read_acc+0x214>)
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	4613      	mov	r3, r2
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	4413      	add	r3, r2
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	440b      	add	r3, r1
 8002204:	3304      	adds	r3, #4
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	0a1b      	lsrs	r3, r3, #8
 800220a:	b29a      	uxth	r2, r3
 800220c:	4b2d      	ldr	r3, [pc, #180]	; (80022c4 <read_acc+0x228>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	1d59      	adds	r1, r3, #5
 8002212:	b2d4      	uxtb	r4, r2
 8002214:	482c      	ldr	r0, [pc, #176]	; (80022c8 <read_acc+0x22c>)
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	4613      	mov	r3, r2
 800221a:	011b      	lsls	r3, r3, #4
 800221c:	1a9b      	subs	r3, r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	4403      	add	r3, r0
 8002222:	440b      	add	r3, r1
 8002224:	4622      	mov	r2, r4
 8002226:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<4;i++){
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	3301      	adds	r3, #1
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2b03      	cmp	r3, #3
 8002232:	f77f af6b 	ble.w	800210c <read_acc+0x70>
	}
	counter_acc+=6;
 8002236:	4b23      	ldr	r3, [pc, #140]	; (80022c4 <read_acc+0x228>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	3306      	adds	r3, #6
 800223c:	b2da      	uxtb	r2, r3
 800223e:	4b21      	ldr	r3, [pc, #132]	; (80022c4 <read_acc+0x228>)
 8002240:	701a      	strb	r2, [r3, #0]

	if(counter_acc == 30){
 8002242:	4b20      	ldr	r3, [pc, #128]	; (80022c4 <read_acc+0x228>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b1e      	cmp	r3, #30
 8002248:	d106      	bne.n	8002258 <read_acc+0x1bc>
		// send first pack
		acc_pack_number = 0x01;
 800224a:	4b20      	ldr	r3, [pc, #128]	; (80022cc <read_acc+0x230>)
 800224c:	2201      	movs	r2, #1
 800224e:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1 << SEND_ACC_DATA_BLE_TASK, CFG_SCH_PRIO_1);
 8002250:	2101      	movs	r1, #1
 8002252:	2080      	movs	r0, #128	; 0x80
 8002254:	f00a f976 	bl	800c544 <UTIL_SEQ_SetTask>
	}
	if(counter_acc == 60){
 8002258:	4b1a      	ldr	r3, [pc, #104]	; (80022c4 <read_acc+0x228>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b3c      	cmp	r3, #60	; 0x3c
 800225e:	d106      	bne.n	800226e <read_acc+0x1d2>
		// send second pack
		acc_pack_number = 0x02;
 8002260:	4b1a      	ldr	r3, [pc, #104]	; (80022cc <read_acc+0x230>)
 8002262:	2202      	movs	r2, #2
 8002264:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1 << SEND_ACC_DATA_BLE_TASK, CFG_SCH_PRIO_1);
 8002266:	2101      	movs	r1, #1
 8002268:	2080      	movs	r0, #128	; 0x80
 800226a:	f00a f96b 	bl	800c544 <UTIL_SEQ_SetTask>
	}
	if(counter_acc == 90){
 800226e:	4b15      	ldr	r3, [pc, #84]	; (80022c4 <read_acc+0x228>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b5a      	cmp	r3, #90	; 0x5a
 8002274:	d106      	bne.n	8002284 <read_acc+0x1e8>
		// send third pack
		acc_pack_number = 0x03;
 8002276:	4b15      	ldr	r3, [pc, #84]	; (80022cc <read_acc+0x230>)
 8002278:	2203      	movs	r2, #3
 800227a:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1 << SEND_ACC_DATA_BLE_TASK, CFG_SCH_PRIO_1);
 800227c:	2101      	movs	r1, #1
 800227e:	2080      	movs	r0, #128	; 0x80
 8002280:	f00a f960 	bl	800c544 <UTIL_SEQ_SetTask>
	}
	if(counter_acc == 120){
 8002284:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <read_acc+0x228>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b78      	cmp	r3, #120	; 0x78
 800228a:	d106      	bne.n	800229a <read_acc+0x1fe>
		// send fourth pack
		acc_pack_number = 0x04;
 800228c:	4b0f      	ldr	r3, [pc, #60]	; (80022cc <read_acc+0x230>)
 800228e:	2204      	movs	r2, #4
 8002290:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1 << SEND_ACC_DATA_BLE_TASK, CFG_SCH_PRIO_1);
 8002292:	2101      	movs	r1, #1
 8002294:	2080      	movs	r0, #128	; 0x80
 8002296:	f00a f955 	bl	800c544 <UTIL_SEQ_SetTask>
	}

	if(counter_acc == 120)
 800229a:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <read_acc+0x228>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b78      	cmp	r3, #120	; 0x78
 80022a0:	d102      	bne.n	80022a8 <read_acc+0x20c>
		counter_acc = 0;
 80022a2:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <read_acc+0x228>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	701a      	strb	r2, [r3, #0]

}
 80022a8:	bf00      	nop
 80022aa:	3714      	adds	r7, #20
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd90      	pop	{r4, r7, pc}
 80022b0:	200007d4 	.word	0x200007d4
 80022b4:	20000004 	.word	0x20000004
 80022b8:	20000010 	.word	0x20000010
 80022bc:	2000001c 	.word	0x2000001c
 80022c0:	20000028 	.word	0x20000028
 80022c4:	200005af 	.word	0x200005af
 80022c8:	200003b8 	.word	0x200003b8
 80022cc:	200005b2 	.word	0x200005b2

080022d0 <read_ppg>:


void read_ppg(void){
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
	/*
	 * MAX30100
	 * */
	readFIFO(&RED, &IR);
 80022d4:	4935      	ldr	r1, [pc, #212]	; (80023ac <read_ppg+0xdc>)
 80022d6:	4836      	ldr	r0, [pc, #216]	; (80023b0 <read_ppg+0xe0>)
 80022d8:	f7fe f91e 	bl	8000518 <readFIFO>

	ble_buff_PPG[0][0+counter_ppg] = (RED & 0x00FF);
 80022dc:	4b34      	ldr	r3, [pc, #208]	; (80023b0 <read_ppg+0xe0>)
 80022de:	8819      	ldrh	r1, [r3, #0]
 80022e0:	4b34      	ldr	r3, [pc, #208]	; (80023b4 <read_ppg+0xe4>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	461a      	mov	r2, r3
 80022e6:	b2c9      	uxtb	r1, r1
 80022e8:	4b33      	ldr	r3, [pc, #204]	; (80023b8 <read_ppg+0xe8>)
 80022ea:	5499      	strb	r1, [r3, r2]
	ble_buff_PPG[0][1+counter_ppg] = ((RED >> 8) & 0x00FF);
 80022ec:	4b30      	ldr	r3, [pc, #192]	; (80023b0 <read_ppg+0xe0>)
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	0a1b      	lsrs	r3, r3, #8
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	4b2f      	ldr	r3, [pc, #188]	; (80023b4 <read_ppg+0xe4>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	3301      	adds	r3, #1
 80022fa:	b2d1      	uxtb	r1, r2
 80022fc:	4a2e      	ldr	r2, [pc, #184]	; (80023b8 <read_ppg+0xe8>)
 80022fe:	54d1      	strb	r1, [r2, r3]

	ble_buff_PPG[1][0+counter_ppg] = (IR & 0x00FF);
 8002300:	4b2a      	ldr	r3, [pc, #168]	; (80023ac <read_ppg+0xdc>)
 8002302:	881a      	ldrh	r2, [r3, #0]
 8002304:	4b2b      	ldr	r3, [pc, #172]	; (80023b4 <read_ppg+0xe4>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	4619      	mov	r1, r3
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	4b2a      	ldr	r3, [pc, #168]	; (80023b8 <read_ppg+0xe8>)
 800230e:	440b      	add	r3, r1
 8002310:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	ble_buff_PPG[1][1+counter_ppg] = ((IR >> 8) & 0x00FF);
 8002314:	4b25      	ldr	r3, [pc, #148]	; (80023ac <read_ppg+0xdc>)
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	0a1b      	lsrs	r3, r3, #8
 800231a:	b29a      	uxth	r2, r3
 800231c:	4b25      	ldr	r3, [pc, #148]	; (80023b4 <read_ppg+0xe4>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	3301      	adds	r3, #1
 8002322:	b2d1      	uxtb	r1, r2
 8002324:	4a24      	ldr	r2, [pc, #144]	; (80023b8 <read_ppg+0xe8>)
 8002326:	4413      	add	r3, r2
 8002328:	460a      	mov	r2, r1
 800232a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

	counter_ppg+=2;
 800232e:	4b21      	ldr	r3, [pc, #132]	; (80023b4 <read_ppg+0xe4>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	3302      	adds	r3, #2
 8002334:	b2da      	uxtb	r2, r3
 8002336:	4b1f      	ldr	r3, [pc, #124]	; (80023b4 <read_ppg+0xe4>)
 8002338:	701a      	strb	r2, [r3, #0]

	if(counter_ppg == 50){
 800233a:	4b1e      	ldr	r3, [pc, #120]	; (80023b4 <read_ppg+0xe4>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b32      	cmp	r3, #50	; 0x32
 8002340:	d107      	bne.n	8002352 <read_ppg+0x82>
		// send first pack
		ppg_pack_number = 0x01;
 8002342:	4b1e      	ldr	r3, [pc, #120]	; (80023bc <read_ppg+0xec>)
 8002344:	2201      	movs	r2, #1
 8002346:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1 << SEND_PPG_DATA_BLE_TASK, CFG_SCH_PRIO_1);
 8002348:	2101      	movs	r1, #1
 800234a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800234e:	f00a f8f9 	bl	800c544 <UTIL_SEQ_SetTask>
	}
	if(counter_ppg == 100){
 8002352:	4b18      	ldr	r3, [pc, #96]	; (80023b4 <read_ppg+0xe4>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b64      	cmp	r3, #100	; 0x64
 8002358:	d107      	bne.n	800236a <read_ppg+0x9a>
		// send second pack
		ppg_pack_number = 0x02;
 800235a:	4b18      	ldr	r3, [pc, #96]	; (80023bc <read_ppg+0xec>)
 800235c:	2202      	movs	r2, #2
 800235e:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1 << SEND_PPG_DATA_BLE_TASK, CFG_SCH_PRIO_1);
 8002360:	2101      	movs	r1, #1
 8002362:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002366:	f00a f8ed 	bl	800c544 <UTIL_SEQ_SetTask>
	}
	if(counter_ppg == 150){
 800236a:	4b12      	ldr	r3, [pc, #72]	; (80023b4 <read_ppg+0xe4>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b96      	cmp	r3, #150	; 0x96
 8002370:	d107      	bne.n	8002382 <read_ppg+0xb2>
		// send third pack
		ppg_pack_number = 0x03;
 8002372:	4b12      	ldr	r3, [pc, #72]	; (80023bc <read_ppg+0xec>)
 8002374:	2203      	movs	r2, #3
 8002376:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1 << SEND_PPG_DATA_BLE_TASK, CFG_SCH_PRIO_1);
 8002378:	2101      	movs	r1, #1
 800237a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800237e:	f00a f8e1 	bl	800c544 <UTIL_SEQ_SetTask>
	}
	if(counter_ppg == 200){
 8002382:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <read_ppg+0xe4>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2bc8      	cmp	r3, #200	; 0xc8
 8002388:	d107      	bne.n	800239a <read_ppg+0xca>
		// send fourth pack
		ppg_pack_number = 0x04;
 800238a:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <read_ppg+0xec>)
 800238c:	2204      	movs	r2, #4
 800238e:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1 << SEND_PPG_DATA_BLE_TASK, CFG_SCH_PRIO_1);
 8002390:	2101      	movs	r1, #1
 8002392:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002396:	f00a f8d5 	bl	800c544 <UTIL_SEQ_SetTask>
	}

	if(counter_ppg == 200)
 800239a:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <read_ppg+0xe4>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2bc8      	cmp	r3, #200	; 0xc8
 80023a0:	d102      	bne.n	80023a8 <read_ppg+0xd8>
		counter_ppg = 0;
 80023a2:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <read_ppg+0xe4>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	701a      	strb	r2, [r3, #0]

}
 80023a8:	bf00      	nop
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	20000224 	.word	0x20000224
 80023b0:	20000226 	.word	0x20000226
 80023b4:	200005b0 	.word	0x200005b0
 80023b8:	20000228 	.word	0x20000228
 80023bc:	200005b3 	.word	0x200005b3

080023c0 <prepare_fsr_ble_pack>:

void prepare_fsr_ble_pack(uint8_t* buff){
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]

	buff[0] = BLE_PACK_ID;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2228      	movs	r2, #40	; 0x28
 80023cc:	701a      	strb	r2, [r3, #0]
	buff[1] = BLE_FSR_PACK;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3301      	adds	r3, #1
 80023d2:	2201      	movs	r2, #1
 80023d4:	701a      	strb	r2, [r3, #0]
	buff[2] = 0x01;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3302      	adds	r3, #2
 80023da:	2201      	movs	r2, #1
 80023dc:	701a      	strb	r2, [r3, #0]
	for(int i=3;i<23;i++)
 80023de:	2303      	movs	r3, #3
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	e00a      	b.n	80023fa <prepare_fsr_ble_pack+0x3a>
		buff[i] = ble_buff_FSR[i-3];
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	1eda      	subs	r2, r3, #3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	440b      	add	r3, r1
 80023ee:	4907      	ldr	r1, [pc, #28]	; (800240c <prepare_fsr_ble_pack+0x4c>)
 80023f0:	5c8a      	ldrb	r2, [r1, r2]
 80023f2:	701a      	strb	r2, [r3, #0]
	for(int i=3;i<23;i++)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	3301      	adds	r3, #1
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2b16      	cmp	r3, #22
 80023fe:	ddf1      	ble.n	80023e4 <prepare_fsr_ble_pack+0x24>

}
 8002400:	bf00      	nop
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	20000598 	.word	0x20000598

08002410 <prepare_acc_ble_pack>:

void prepare_acc_ble_pack(uint8_t* buff){
 8002410:	b580      	push	{r7, lr}
 8002412:	b0a6      	sub	sp, #152	; 0x98
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]

	uint8_t acc_buffer[123] = {0};
 8002418:	f107 0308 	add.w	r3, r7, #8
 800241c:	227b      	movs	r2, #123	; 0x7b
 800241e:	2100      	movs	r1, #0
 8002420:	4618      	mov	r0, r3
 8002422:	f00a f9cc 	bl	800c7be <memset>

	if(acc_pack_number != 0x00){
 8002426:	4bb7      	ldr	r3, [pc, #732]	; (8002704 <prepare_acc_ble_pack+0x2f4>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 8165 	beq.w	80026fa <prepare_acc_ble_pack+0x2ea>
		switch(acc_pack_number){
 8002430:	4bb4      	ldr	r3, [pc, #720]	; (8002704 <prepare_acc_ble_pack+0x2f4>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	3b01      	subs	r3, #1
 8002436:	2b03      	cmp	r3, #3
 8002438:	f200 8140 	bhi.w	80026bc <prepare_acc_ble_pack+0x2ac>
 800243c:	a201      	add	r2, pc, #4	; (adr r2, 8002444 <prepare_acc_ble_pack+0x34>)
 800243e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002442:	bf00      	nop
 8002444:	08002455 	.word	0x08002455
 8002448:	080024ef 	.word	0x080024ef
 800244c:	08002589 	.word	0x08002589
 8002450:	08002623 	.word	0x08002623
			case 0x01:
				acc_buffer[0] = BLE_PACK_ID;
 8002454:	2328      	movs	r3, #40	; 0x28
 8002456:	723b      	strb	r3, [r7, #8]
				acc_buffer[1] = BLE_ACC_PACK;
 8002458:	2302      	movs	r3, #2
 800245a:	727b      	strb	r3, [r7, #9]
				acc_buffer[2] = acc_pack_number;
 800245c:	4ba9      	ldr	r3, [pc, #676]	; (8002704 <prepare_acc_ble_pack+0x2f4>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	72bb      	strb	r3, [r7, #10]
				for(int i=0;i<30;i++){
 8002462:	2300      	movs	r3, #0
 8002464:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002468:	e03c      	b.n	80024e4 <prepare_acc_ble_pack+0xd4>
					acc_buffer[3 + i] = ble_buff_ACC[0][i];
 800246a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800246e:	3303      	adds	r3, #3
 8002470:	49a5      	ldr	r1, [pc, #660]	; (8002708 <prepare_acc_ble_pack+0x2f8>)
 8002472:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002476:	440a      	add	r2, r1
 8002478:	7812      	ldrb	r2, [r2, #0]
 800247a:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800247e:	440b      	add	r3, r1
 8002480:	f803 2c90 	strb.w	r2, [r3, #-144]
					acc_buffer[33 + i] = ble_buff_ACC[1][i];
 8002484:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002488:	3321      	adds	r3, #33	; 0x21
 800248a:	499f      	ldr	r1, [pc, #636]	; (8002708 <prepare_acc_ble_pack+0x2f8>)
 800248c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002490:	440a      	add	r2, r1
 8002492:	3278      	adds	r2, #120	; 0x78
 8002494:	7812      	ldrb	r2, [r2, #0]
 8002496:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800249a:	440b      	add	r3, r1
 800249c:	f803 2c90 	strb.w	r2, [r3, #-144]
					acc_buffer[63 + i] = ble_buff_ACC[2][i];
 80024a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024a4:	333f      	adds	r3, #63	; 0x3f
 80024a6:	4998      	ldr	r1, [pc, #608]	; (8002708 <prepare_acc_ble_pack+0x2f8>)
 80024a8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80024ac:	440a      	add	r2, r1
 80024ae:	32f0      	adds	r2, #240	; 0xf0
 80024b0:	7812      	ldrb	r2, [r2, #0]
 80024b2:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80024b6:	440b      	add	r3, r1
 80024b8:	f803 2c90 	strb.w	r2, [r3, #-144]
					acc_buffer[93 + i] = ble_buff_ACC[3][i];
 80024bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024c0:	335d      	adds	r3, #93	; 0x5d
 80024c2:	4991      	ldr	r1, [pc, #580]	; (8002708 <prepare_acc_ble_pack+0x2f8>)
 80024c4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80024c8:	440a      	add	r2, r1
 80024ca:	f502 72b4 	add.w	r2, r2, #360	; 0x168
 80024ce:	7812      	ldrb	r2, [r2, #0]
 80024d0:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80024d4:	440b      	add	r3, r1
 80024d6:	f803 2c90 	strb.w	r2, [r3, #-144]
				for(int i=0;i<30;i++){
 80024da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024de:	3301      	adds	r3, #1
 80024e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80024e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024e8:	2b1d      	cmp	r3, #29
 80024ea:	ddbe      	ble.n	800246a <prepare_acc_ble_pack+0x5a>
				}
				break;
 80024ec:	e0ea      	b.n	80026c4 <prepare_acc_ble_pack+0x2b4>
			case 0x02:
				acc_buffer[0] = BLE_PACK_ID;
 80024ee:	2328      	movs	r3, #40	; 0x28
 80024f0:	723b      	strb	r3, [r7, #8]
				acc_buffer[1] = BLE_ACC_PACK;
 80024f2:	2302      	movs	r3, #2
 80024f4:	727b      	strb	r3, [r7, #9]
				acc_buffer[2] = acc_pack_number;
 80024f6:	4b83      	ldr	r3, [pc, #524]	; (8002704 <prepare_acc_ble_pack+0x2f4>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	72bb      	strb	r3, [r7, #10]
				for(int i=30;i<60;i++){
 80024fc:	231e      	movs	r3, #30
 80024fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002502:	e03c      	b.n	800257e <prepare_acc_ble_pack+0x16e>
					acc_buffer[3 + i - 30] = ble_buff_ACC[0][i];
 8002504:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002508:	3b1b      	subs	r3, #27
 800250a:	497f      	ldr	r1, [pc, #508]	; (8002708 <prepare_acc_ble_pack+0x2f8>)
 800250c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002510:	440a      	add	r2, r1
 8002512:	7812      	ldrb	r2, [r2, #0]
 8002514:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002518:	440b      	add	r3, r1
 800251a:	f803 2c90 	strb.w	r2, [r3, #-144]
					acc_buffer[33 + i- 30] = ble_buff_ACC[1][i];
 800251e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002522:	3303      	adds	r3, #3
 8002524:	4978      	ldr	r1, [pc, #480]	; (8002708 <prepare_acc_ble_pack+0x2f8>)
 8002526:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800252a:	440a      	add	r2, r1
 800252c:	3278      	adds	r2, #120	; 0x78
 800252e:	7812      	ldrb	r2, [r2, #0]
 8002530:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002534:	440b      	add	r3, r1
 8002536:	f803 2c90 	strb.w	r2, [r3, #-144]
					acc_buffer[63 + i- 30] = ble_buff_ACC[2][i];
 800253a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800253e:	3321      	adds	r3, #33	; 0x21
 8002540:	4971      	ldr	r1, [pc, #452]	; (8002708 <prepare_acc_ble_pack+0x2f8>)
 8002542:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002546:	440a      	add	r2, r1
 8002548:	32f0      	adds	r2, #240	; 0xf0
 800254a:	7812      	ldrb	r2, [r2, #0]
 800254c:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002550:	440b      	add	r3, r1
 8002552:	f803 2c90 	strb.w	r2, [r3, #-144]
					acc_buffer[93 + i - 30] = ble_buff_ACC[3][i];
 8002556:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800255a:	333f      	adds	r3, #63	; 0x3f
 800255c:	496a      	ldr	r1, [pc, #424]	; (8002708 <prepare_acc_ble_pack+0x2f8>)
 800255e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002562:	440a      	add	r2, r1
 8002564:	f502 72b4 	add.w	r2, r2, #360	; 0x168
 8002568:	7812      	ldrb	r2, [r2, #0]
 800256a:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800256e:	440b      	add	r3, r1
 8002570:	f803 2c90 	strb.w	r2, [r3, #-144]
				for(int i=30;i<60;i++){
 8002574:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002578:	3301      	adds	r3, #1
 800257a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800257e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002582:	2b3b      	cmp	r3, #59	; 0x3b
 8002584:	ddbe      	ble.n	8002504 <prepare_acc_ble_pack+0xf4>
				}
				break;
 8002586:	e09d      	b.n	80026c4 <prepare_acc_ble_pack+0x2b4>
			case 0x03:
				acc_buffer[0] = BLE_PACK_ID;
 8002588:	2328      	movs	r3, #40	; 0x28
 800258a:	723b      	strb	r3, [r7, #8]
				acc_buffer[1] = BLE_ACC_PACK;
 800258c:	2302      	movs	r3, #2
 800258e:	727b      	strb	r3, [r7, #9]
				acc_buffer[2] = acc_pack_number;
 8002590:	4b5c      	ldr	r3, [pc, #368]	; (8002704 <prepare_acc_ble_pack+0x2f4>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	72bb      	strb	r3, [r7, #10]
				for(int i=60;i<90;i++){
 8002596:	233c      	movs	r3, #60	; 0x3c
 8002598:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800259c:	e03c      	b.n	8002618 <prepare_acc_ble_pack+0x208>
					acc_buffer[3 + i - 60] = ble_buff_ACC[0][i];
 800259e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025a2:	3b39      	subs	r3, #57	; 0x39
 80025a4:	4958      	ldr	r1, [pc, #352]	; (8002708 <prepare_acc_ble_pack+0x2f8>)
 80025a6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80025aa:	440a      	add	r2, r1
 80025ac:	7812      	ldrb	r2, [r2, #0]
 80025ae:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80025b2:	440b      	add	r3, r1
 80025b4:	f803 2c90 	strb.w	r2, [r3, #-144]
					acc_buffer[33 + i - 60] = ble_buff_ACC[1][i];
 80025b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025bc:	3b1b      	subs	r3, #27
 80025be:	4952      	ldr	r1, [pc, #328]	; (8002708 <prepare_acc_ble_pack+0x2f8>)
 80025c0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80025c4:	440a      	add	r2, r1
 80025c6:	3278      	adds	r2, #120	; 0x78
 80025c8:	7812      	ldrb	r2, [r2, #0]
 80025ca:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80025ce:	440b      	add	r3, r1
 80025d0:	f803 2c90 	strb.w	r2, [r3, #-144]
					acc_buffer[63 + i - 60] = ble_buff_ACC[2][i];
 80025d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025d8:	3303      	adds	r3, #3
 80025da:	494b      	ldr	r1, [pc, #300]	; (8002708 <prepare_acc_ble_pack+0x2f8>)
 80025dc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80025e0:	440a      	add	r2, r1
 80025e2:	32f0      	adds	r2, #240	; 0xf0
 80025e4:	7812      	ldrb	r2, [r2, #0]
 80025e6:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80025ea:	440b      	add	r3, r1
 80025ec:	f803 2c90 	strb.w	r2, [r3, #-144]
					acc_buffer[93 + i - 60] = ble_buff_ACC[3][i];
 80025f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025f4:	3321      	adds	r3, #33	; 0x21
 80025f6:	4944      	ldr	r1, [pc, #272]	; (8002708 <prepare_acc_ble_pack+0x2f8>)
 80025f8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80025fc:	440a      	add	r2, r1
 80025fe:	f502 72b4 	add.w	r2, r2, #360	; 0x168
 8002602:	7812      	ldrb	r2, [r2, #0]
 8002604:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002608:	440b      	add	r3, r1
 800260a:	f803 2c90 	strb.w	r2, [r3, #-144]
				for(int i=60;i<90;i++){
 800260e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002612:	3301      	adds	r3, #1
 8002614:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002618:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800261c:	2b59      	cmp	r3, #89	; 0x59
 800261e:	ddbe      	ble.n	800259e <prepare_acc_ble_pack+0x18e>
				}
				break;
 8002620:	e050      	b.n	80026c4 <prepare_acc_ble_pack+0x2b4>
			case 0x04:
				acc_buffer[0] = BLE_PACK_ID;
 8002622:	2328      	movs	r3, #40	; 0x28
 8002624:	723b      	strb	r3, [r7, #8]
				acc_buffer[1] = BLE_ACC_PACK;
 8002626:	2302      	movs	r3, #2
 8002628:	727b      	strb	r3, [r7, #9]
				acc_buffer[2] = acc_pack_number;
 800262a:	4b36      	ldr	r3, [pc, #216]	; (8002704 <prepare_acc_ble_pack+0x2f4>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	72bb      	strb	r3, [r7, #10]
				for(int i=90;i<120;i++){
 8002630:	235a      	movs	r3, #90	; 0x5a
 8002632:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002636:	e03c      	b.n	80026b2 <prepare_acc_ble_pack+0x2a2>
					acc_buffer[3 + i - 90] = ble_buff_ACC[0][i];
 8002638:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800263c:	3b57      	subs	r3, #87	; 0x57
 800263e:	4932      	ldr	r1, [pc, #200]	; (8002708 <prepare_acc_ble_pack+0x2f8>)
 8002640:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002644:	440a      	add	r2, r1
 8002646:	7812      	ldrb	r2, [r2, #0]
 8002648:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800264c:	440b      	add	r3, r1
 800264e:	f803 2c90 	strb.w	r2, [r3, #-144]
					acc_buffer[33 + i - 90] = ble_buff_ACC[1][i];
 8002652:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002656:	3b39      	subs	r3, #57	; 0x39
 8002658:	492b      	ldr	r1, [pc, #172]	; (8002708 <prepare_acc_ble_pack+0x2f8>)
 800265a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800265e:	440a      	add	r2, r1
 8002660:	3278      	adds	r2, #120	; 0x78
 8002662:	7812      	ldrb	r2, [r2, #0]
 8002664:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002668:	440b      	add	r3, r1
 800266a:	f803 2c90 	strb.w	r2, [r3, #-144]
					acc_buffer[63 + i - 90] = ble_buff_ACC[2][i];
 800266e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002672:	3b1b      	subs	r3, #27
 8002674:	4924      	ldr	r1, [pc, #144]	; (8002708 <prepare_acc_ble_pack+0x2f8>)
 8002676:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800267a:	440a      	add	r2, r1
 800267c:	32f0      	adds	r2, #240	; 0xf0
 800267e:	7812      	ldrb	r2, [r2, #0]
 8002680:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002684:	440b      	add	r3, r1
 8002686:	f803 2c90 	strb.w	r2, [r3, #-144]
					acc_buffer[93 + i - 90] = ble_buff_ACC[3][i];
 800268a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800268e:	3303      	adds	r3, #3
 8002690:	491d      	ldr	r1, [pc, #116]	; (8002708 <prepare_acc_ble_pack+0x2f8>)
 8002692:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002696:	440a      	add	r2, r1
 8002698:	f502 72b4 	add.w	r2, r2, #360	; 0x168
 800269c:	7812      	ldrb	r2, [r2, #0]
 800269e:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80026a2:	440b      	add	r3, r1
 80026a4:	f803 2c90 	strb.w	r2, [r3, #-144]
				for(int i=90;i<120;i++){
 80026a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026ac:	3301      	adds	r3, #1
 80026ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80026b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026b6:	2b77      	cmp	r3, #119	; 0x77
 80026b8:	ddbe      	ble.n	8002638 <prepare_acc_ble_pack+0x228>
				}
				break;
 80026ba:	e003      	b.n	80026c4 <prepare_acc_ble_pack+0x2b4>
			default:
				acc_pack_number = 0x00;
 80026bc:	4b11      	ldr	r3, [pc, #68]	; (8002704 <prepare_acc_ble_pack+0x2f4>)
 80026be:	2200      	movs	r2, #0
 80026c0:	701a      	strb	r2, [r3, #0]
				break;
 80026c2:	bf00      	nop
		}
		acc_pack_number = 0x00;
 80026c4:	4b0f      	ldr	r3, [pc, #60]	; (8002704 <prepare_acc_ble_pack+0x2f4>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<123;i++)
 80026ca:	2300      	movs	r3, #0
 80026cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80026d0:	e00f      	b.n	80026f2 <prepare_acc_ble_pack+0x2e2>
			buff[i] = acc_buffer[i];
 80026d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	4413      	add	r3, r2
 80026da:	f107 0108 	add.w	r1, r7, #8
 80026de:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80026e2:	440a      	add	r2, r1
 80026e4:	7812      	ldrb	r2, [r2, #0]
 80026e6:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<123;i++)
 80026e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026ec:	3301      	adds	r3, #1
 80026ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80026f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026f6:	2b7a      	cmp	r3, #122	; 0x7a
 80026f8:	ddeb      	ble.n	80026d2 <prepare_acc_ble_pack+0x2c2>
	}
}
 80026fa:	bf00      	nop
 80026fc:	3798      	adds	r7, #152	; 0x98
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	200005b2 	.word	0x200005b2
 8002708:	200003b8 	.word	0x200003b8

0800270c <prepare_ppg_ble_pack>:
void prepare_ppg_ble_pack(uint8_t* buff){
 800270c:	b580      	push	{r7, lr}
 800270e:	b0a2      	sub	sp, #136	; 0x88
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]

	uint8_t ppg_buffer[103] = {0};
 8002714:	f107 030c 	add.w	r3, r7, #12
 8002718:	2267      	movs	r2, #103	; 0x67
 800271a:	2100      	movs	r1, #0
 800271c:	4618      	mov	r0, r3
 800271e:	f00a f84e 	bl	800c7be <memset>

	if(ppg_pack_number != 0x00){
 8002722:	4b72      	ldr	r3, [pc, #456]	; (80028ec <prepare_ppg_ble_pack+0x1e0>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 80db 	beq.w	80028e2 <prepare_ppg_ble_pack+0x1d6>
		switch(ppg_pack_number){
 800272c:	4b6f      	ldr	r3, [pc, #444]	; (80028ec <prepare_ppg_ble_pack+0x1e0>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	3b01      	subs	r3, #1
 8002732:	2b03      	cmp	r3, #3
 8002734:	f200 80bc 	bhi.w	80028b0 <prepare_ppg_ble_pack+0x1a4>
 8002738:	a201      	add	r2, pc, #4	; (adr r2, 8002740 <prepare_ppg_ble_pack+0x34>)
 800273a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800273e:	bf00      	nop
 8002740:	08002751 	.word	0x08002751
 8002744:	080027b1 	.word	0x080027b1
 8002748:	08002811 	.word	0x08002811
 800274c:	08002861 	.word	0x08002861
			case 0x01:
				ppg_buffer[0] = BLE_PACK_ID;
 8002750:	2328      	movs	r3, #40	; 0x28
 8002752:	733b      	strb	r3, [r7, #12]
				ppg_buffer[1] = BLE_PPG_PACK;
 8002754:	2303      	movs	r3, #3
 8002756:	737b      	strb	r3, [r7, #13]
				ppg_buffer[2] = ppg_pack_number;
 8002758:	4b64      	ldr	r3, [pc, #400]	; (80028ec <prepare_ppg_ble_pack+0x1e0>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	73bb      	strb	r3, [r7, #14]
				for(int i=0;i<50;i++){
 800275e:	2300      	movs	r3, #0
 8002760:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002764:	e01f      	b.n	80027a6 <prepare_ppg_ble_pack+0x9a>
					ppg_buffer[3 + i] = ble_buff_PPG[0][i];
 8002766:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800276a:	3303      	adds	r3, #3
 800276c:	4960      	ldr	r1, [pc, #384]	; (80028f0 <prepare_ppg_ble_pack+0x1e4>)
 800276e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002772:	440a      	add	r2, r1
 8002774:	7812      	ldrb	r2, [r2, #0]
 8002776:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800277a:	440b      	add	r3, r1
 800277c:	f803 2c7c 	strb.w	r2, [r3, #-124]
					ppg_buffer[53 + i] = ble_buff_PPG[1][i];
 8002780:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002784:	3335      	adds	r3, #53	; 0x35
 8002786:	495a      	ldr	r1, [pc, #360]	; (80028f0 <prepare_ppg_ble_pack+0x1e4>)
 8002788:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800278c:	440a      	add	r2, r1
 800278e:	32c8      	adds	r2, #200	; 0xc8
 8002790:	7812      	ldrb	r2, [r2, #0]
 8002792:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002796:	440b      	add	r3, r1
 8002798:	f803 2c7c 	strb.w	r2, [r3, #-124]
				for(int i=0;i<50;i++){
 800279c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027a0:	3301      	adds	r3, #1
 80027a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80027a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027aa:	2b31      	cmp	r3, #49	; 0x31
 80027ac:	dddb      	ble.n	8002766 <prepare_ppg_ble_pack+0x5a>
				}
				break;
 80027ae:	e083      	b.n	80028b8 <prepare_ppg_ble_pack+0x1ac>
			case 0x02:
				ppg_buffer[0] = BLE_PACK_ID;
 80027b0:	2328      	movs	r3, #40	; 0x28
 80027b2:	733b      	strb	r3, [r7, #12]
				ppg_buffer[1] = BLE_PPG_PACK;
 80027b4:	2303      	movs	r3, #3
 80027b6:	737b      	strb	r3, [r7, #13]
				ppg_buffer[2] = ppg_pack_number;
 80027b8:	4b4c      	ldr	r3, [pc, #304]	; (80028ec <prepare_ppg_ble_pack+0x1e0>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	73bb      	strb	r3, [r7, #14]
				for(int i=50;i<100;i++){
 80027be:	2332      	movs	r3, #50	; 0x32
 80027c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80027c4:	e01f      	b.n	8002806 <prepare_ppg_ble_pack+0xfa>
					ppg_buffer[3 + i - 50] = ble_buff_PPG[0][i];
 80027c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027ca:	3b2f      	subs	r3, #47	; 0x2f
 80027cc:	4948      	ldr	r1, [pc, #288]	; (80028f0 <prepare_ppg_ble_pack+0x1e4>)
 80027ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80027d2:	440a      	add	r2, r1
 80027d4:	7812      	ldrb	r2, [r2, #0]
 80027d6:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80027da:	440b      	add	r3, r1
 80027dc:	f803 2c7c 	strb.w	r2, [r3, #-124]
					ppg_buffer[53 + i - 50] = ble_buff_PPG[1][i];
 80027e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027e4:	3303      	adds	r3, #3
 80027e6:	4942      	ldr	r1, [pc, #264]	; (80028f0 <prepare_ppg_ble_pack+0x1e4>)
 80027e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80027ec:	440a      	add	r2, r1
 80027ee:	32c8      	adds	r2, #200	; 0xc8
 80027f0:	7812      	ldrb	r2, [r2, #0]
 80027f2:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80027f6:	440b      	add	r3, r1
 80027f8:	f803 2c7c 	strb.w	r2, [r3, #-124]
				for(int i=50;i<100;i++){
 80027fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002800:	3301      	adds	r3, #1
 8002802:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002806:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800280a:	2b63      	cmp	r3, #99	; 0x63
 800280c:	dddb      	ble.n	80027c6 <prepare_ppg_ble_pack+0xba>
				}
				break;
 800280e:	e053      	b.n	80028b8 <prepare_ppg_ble_pack+0x1ac>
			case 0x03:
				ppg_buffer[0] = BLE_PACK_ID;
 8002810:	2328      	movs	r3, #40	; 0x28
 8002812:	733b      	strb	r3, [r7, #12]
				ppg_buffer[1] = BLE_PPG_PACK;
 8002814:	2303      	movs	r3, #3
 8002816:	737b      	strb	r3, [r7, #13]
				ppg_buffer[2] = ppg_pack_number;
 8002818:	4b34      	ldr	r3, [pc, #208]	; (80028ec <prepare_ppg_ble_pack+0x1e0>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	73bb      	strb	r3, [r7, #14]
				for(int i=100;i<150;i++){
 800281e:	2364      	movs	r3, #100	; 0x64
 8002820:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002822:	e019      	b.n	8002858 <prepare_ppg_ble_pack+0x14c>
					ppg_buffer[3 + i - 100] = ble_buff_PPG[0][i];
 8002824:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002826:	3b61      	subs	r3, #97	; 0x61
 8002828:	4931      	ldr	r1, [pc, #196]	; (80028f0 <prepare_ppg_ble_pack+0x1e4>)
 800282a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800282c:	440a      	add	r2, r1
 800282e:	7812      	ldrb	r2, [r2, #0]
 8002830:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002834:	440b      	add	r3, r1
 8002836:	f803 2c7c 	strb.w	r2, [r3, #-124]
					ppg_buffer[53 + i - 100] = ble_buff_PPG[1][i];
 800283a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800283c:	3b2f      	subs	r3, #47	; 0x2f
 800283e:	492c      	ldr	r1, [pc, #176]	; (80028f0 <prepare_ppg_ble_pack+0x1e4>)
 8002840:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002842:	440a      	add	r2, r1
 8002844:	32c8      	adds	r2, #200	; 0xc8
 8002846:	7812      	ldrb	r2, [r2, #0]
 8002848:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800284c:	440b      	add	r3, r1
 800284e:	f803 2c7c 	strb.w	r2, [r3, #-124]
				for(int i=100;i<150;i++){
 8002852:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002854:	3301      	adds	r3, #1
 8002856:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002858:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800285a:	2b95      	cmp	r3, #149	; 0x95
 800285c:	dde2      	ble.n	8002824 <prepare_ppg_ble_pack+0x118>
				}
				break;
 800285e:	e02b      	b.n	80028b8 <prepare_ppg_ble_pack+0x1ac>
			case 0x04:
				ppg_buffer[0] = BLE_PACK_ID;
 8002860:	2328      	movs	r3, #40	; 0x28
 8002862:	733b      	strb	r3, [r7, #12]
				ppg_buffer[1] = BLE_PPG_PACK;
 8002864:	2303      	movs	r3, #3
 8002866:	737b      	strb	r3, [r7, #13]
				ppg_buffer[2] = ppg_pack_number;
 8002868:	4b20      	ldr	r3, [pc, #128]	; (80028ec <prepare_ppg_ble_pack+0x1e0>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	73bb      	strb	r3, [r7, #14]
				for(int i=150;i<200;i++){
 800286e:	2396      	movs	r3, #150	; 0x96
 8002870:	67bb      	str	r3, [r7, #120]	; 0x78
 8002872:	e019      	b.n	80028a8 <prepare_ppg_ble_pack+0x19c>
					ppg_buffer[3 + i - 150] = ble_buff_PPG[0][i];
 8002874:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002876:	3b93      	subs	r3, #147	; 0x93
 8002878:	491d      	ldr	r1, [pc, #116]	; (80028f0 <prepare_ppg_ble_pack+0x1e4>)
 800287a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800287c:	440a      	add	r2, r1
 800287e:	7812      	ldrb	r2, [r2, #0]
 8002880:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002884:	440b      	add	r3, r1
 8002886:	f803 2c7c 	strb.w	r2, [r3, #-124]
					ppg_buffer[53 + i - 150] = ble_buff_PPG[1][i];
 800288a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800288c:	3b61      	subs	r3, #97	; 0x61
 800288e:	4918      	ldr	r1, [pc, #96]	; (80028f0 <prepare_ppg_ble_pack+0x1e4>)
 8002890:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002892:	440a      	add	r2, r1
 8002894:	32c8      	adds	r2, #200	; 0xc8
 8002896:	7812      	ldrb	r2, [r2, #0]
 8002898:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800289c:	440b      	add	r3, r1
 800289e:	f803 2c7c 	strb.w	r2, [r3, #-124]
				for(int i=150;i<200;i++){
 80028a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028a4:	3301      	adds	r3, #1
 80028a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80028a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028aa:	2bc7      	cmp	r3, #199	; 0xc7
 80028ac:	dde2      	ble.n	8002874 <prepare_ppg_ble_pack+0x168>
				}
				break;
 80028ae:	e003      	b.n	80028b8 <prepare_ppg_ble_pack+0x1ac>
			default:
				ppg_pack_number = 0x00;
 80028b0:	4b0e      	ldr	r3, [pc, #56]	; (80028ec <prepare_ppg_ble_pack+0x1e0>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	701a      	strb	r2, [r3, #0]
				break;
 80028b6:	bf00      	nop
		}
		ppg_pack_number = 0x00;
 80028b8:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <prepare_ppg_ble_pack+0x1e0>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<103;i++)
 80028be:	2300      	movs	r3, #0
 80028c0:	677b      	str	r3, [r7, #116]	; 0x74
 80028c2:	e00b      	b.n	80028dc <prepare_ppg_ble_pack+0x1d0>
			buff[i] = ppg_buffer[i];
 80028c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	4413      	add	r3, r2
 80028ca:	f107 010c 	add.w	r1, r7, #12
 80028ce:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80028d0:	440a      	add	r2, r1
 80028d2:	7812      	ldrb	r2, [r2, #0]
 80028d4:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<103;i++)
 80028d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028d8:	3301      	adds	r3, #1
 80028da:	677b      	str	r3, [r7, #116]	; 0x74
 80028dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028de:	2b66      	cmp	r3, #102	; 0x66
 80028e0:	ddf0      	ble.n	80028c4 <prepare_ppg_ble_pack+0x1b8>
	}
}
 80028e2:	bf00      	nop
 80028e4:	3788      	adds	r7, #136	; 0x88
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	200005b3 	.word	0x200005b3
 80028f0:	20000228 	.word	0x20000228

080028f4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  if(htim == &htim16){
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a1c      	ldr	r2, [pc, #112]	; (8002970 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d130      	bne.n	8002966 <HAL_TIM_PeriodElapsedCallback+0x72>
	  if(APP_BLE_Get_Server_Connection_Status() == APP_BLE_CONNECTED_SERVER){
 8002904:	f008 ff9c 	bl	800b840 <APP_BLE_Get_Server_Connection_Status>
 8002908:	4603      	mov	r3, r0
 800290a:	2b05      	cmp	r3, #5
 800290c:	d12b      	bne.n	8002966 <HAL_TIM_PeriodElapsedCallback+0x72>
		  // Increment prescaler for fsr and acc
		  prescaler_fsr++;
 800290e:	4b19      	ldr	r3, [pc, #100]	; (8002974 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	3301      	adds	r3, #1
 8002914:	b2da      	uxtb	r2, r3
 8002916:	4b17      	ldr	r3, [pc, #92]	; (8002974 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002918:	701a      	strb	r2, [r3, #0]
		  prescaler_acc++;
 800291a:	4b17      	ldr	r3, [pc, #92]	; (8002978 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	3301      	adds	r3, #1
 8002920:	b2da      	uxtb	r2, r3
 8002922:	4b15      	ldr	r3, [pc, #84]	; (8002978 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002924:	701a      	strb	r2, [r3, #0]
		  prescaler_send_pack++;
 8002926:	4b15      	ldr	r3, [pc, #84]	; (800297c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	3301      	adds	r3, #1
 800292c:	b2da      	uxtb	r2, r3
 800292e:	4b13      	ldr	r3, [pc, #76]	; (800297c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002930:	701a      	strb	r2, [r3, #0]
		  // read ppg sensor - 100Hz
		  UTIL_SEQ_SetTask(1 << READ_PPG_TASK, CFG_SCH_PRIO_0);
 8002932:	2100      	movs	r1, #0
 8002934:	2040      	movs	r0, #64	; 0x40
 8002936:	f009 fe05 	bl	800c544 <UTIL_SEQ_SetTask>
		  // read fsr sensor - 10Hz
		  if(prescaler_fsr == 10){
 800293a:	4b0e      	ldr	r3, [pc, #56]	; (8002974 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b0a      	cmp	r3, #10
 8002940:	d106      	bne.n	8002950 <HAL_TIM_PeriodElapsedCallback+0x5c>
			  prescaler_fsr = 0;
 8002942:	4b0c      	ldr	r3, [pc, #48]	; (8002974 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002944:	2200      	movs	r2, #0
 8002946:	701a      	strb	r2, [r3, #0]
			  UTIL_SEQ_SetTask(1 << READ_FSR_TASK, CFG_SCH_PRIO_0);
 8002948:	2100      	movs	r1, #0
 800294a:	2020      	movs	r0, #32
 800294c:	f009 fdfa 	bl	800c544 <UTIL_SEQ_SetTask>
		  }
		  // read acc sensor - 20Hz
		  if(prescaler_acc == 5){
 8002950:	4b09      	ldr	r3, [pc, #36]	; (8002978 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b05      	cmp	r3, #5
 8002956:	d106      	bne.n	8002966 <HAL_TIM_PeriodElapsedCallback+0x72>
			  prescaler_acc = 0;
 8002958:	4b07      	ldr	r3, [pc, #28]	; (8002978 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800295a:	2200      	movs	r2, #0
 800295c:	701a      	strb	r2, [r3, #0]
			  UTIL_SEQ_SetTask(1 << READ_ACC_TASK, CFG_SCH_PRIO_0);
 800295e:	2100      	movs	r1, #0
 8002960:	2010      	movs	r0, #16
 8002962:	f009 fdef 	bl	800c544 <UTIL_SEQ_SetTask>
  }

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	200008d8 	.word	0x200008d8
 8002974:	200005ad 	.word	0x200005ad
 8002978:	200005ac 	.word	0x200005ac
 800297c:	200005ae 	.word	0x200005ae

08002980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002984:	bf00      	nop
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 800298e:	b480      	push	{r7}
 8002990:	af00      	add	r7, sp, #0

}
 8002992:	bf00      	nop
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80029a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80029b4:	bf00      	nop
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <LL_APB1_GRP1_EnableClock>:
{
 80029be:	b480      	push	{r7}
 80029c0:	b085      	sub	sp, #20
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80029c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80029cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80029d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029da:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4013      	ands	r3, r2
 80029e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029e2:	68fb      	ldr	r3, [r7, #12]
}
 80029e4:	bf00      	nop
 80029e6:	3714      	adds	r7, #20
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80029f4:	4b16      	ldr	r3, [pc, #88]	; (8002a50 <MX_RTC_Init+0x60>)
 80029f6:	4a17      	ldr	r2, [pc, #92]	; (8002a54 <MX_RTC_Init+0x64>)
 80029f8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80029fa:	4b15      	ldr	r3, [pc, #84]	; (8002a50 <MX_RTC_Init+0x60>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002a00:	4b13      	ldr	r3, [pc, #76]	; (8002a50 <MX_RTC_Init+0x60>)
 8002a02:	220f      	movs	r2, #15
 8002a04:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002a06:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <MX_RTC_Init+0x60>)
 8002a08:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002a0c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002a0e:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <MX_RTC_Init+0x60>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002a14:	4b0e      	ldr	r3, [pc, #56]	; (8002a50 <MX_RTC_Init+0x60>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002a1a:	4b0d      	ldr	r3, [pc, #52]	; (8002a50 <MX_RTC_Init+0x60>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002a20:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <MX_RTC_Init+0x60>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002a26:	480a      	ldr	r0, [pc, #40]	; (8002a50 <MX_RTC_Init+0x60>)
 8002a28:	f004 fd5e 	bl	80074e8 <HAL_RTC_Init>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002a32:	f7ff ffa5 	bl	8002980 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002a36:	2200      	movs	r2, #0
 8002a38:	2100      	movs	r1, #0
 8002a3a:	4805      	ldr	r0, [pc, #20]	; (8002a50 <MX_RTC_Init+0x60>)
 8002a3c:	f004 fe42 	bl	80076c4 <HAL_RTCEx_SetWakeUpTimer>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002a46:	f7ff ff9b 	bl	8002980 <Error_Handler>
  }

}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	200007ec 	.word	0x200007ec
 8002a54:	40002800 	.word	0x40002800

08002a58 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a06      	ldr	r2, [pc, #24]	; (8002a80 <HAL_RTC_MspInit+0x28>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d105      	bne.n	8002a76 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002a6a:	f7ff ff97 	bl	800299c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002a6e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002a72:	f7ff ffa4 	bl	80029be <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002a76:	bf00      	nop
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40002800 	.word	0x40002800

08002a84 <LL_AHB2_GRP1_EnableClock>:
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
}
 8002aaa:	bf00      	nop
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <LL_APB1_GRP1_EnableClock>:
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b085      	sub	sp, #20
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ac4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ada:	68fb      	ldr	r3, [r7, #12]
}
 8002adc:	bf00      	nop
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002af4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002af6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b04:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
}
 8002b0e:	bf00      	nop
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
	...

08002b1c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002b20:	4b1b      	ldr	r3, [pc, #108]	; (8002b90 <MX_SPI1_Init+0x74>)
 8002b22:	4a1c      	ldr	r2, [pc, #112]	; (8002b94 <MX_SPI1_Init+0x78>)
 8002b24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b26:	4b1a      	ldr	r3, [pc, #104]	; (8002b90 <MX_SPI1_Init+0x74>)
 8002b28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b2e:	4b18      	ldr	r3, [pc, #96]	; (8002b90 <MX_SPI1_Init+0x74>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b34:	4b16      	ldr	r3, [pc, #88]	; (8002b90 <MX_SPI1_Init+0x74>)
 8002b36:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002b3a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002b3c:	4b14      	ldr	r3, [pc, #80]	; (8002b90 <MX_SPI1_Init+0x74>)
 8002b3e:	2202      	movs	r2, #2
 8002b40:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002b42:	4b13      	ldr	r3, [pc, #76]	; (8002b90 <MX_SPI1_Init+0x74>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b48:	4b11      	ldr	r3, [pc, #68]	; (8002b90 <MX_SPI1_Init+0x74>)
 8002b4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b4e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002b50:	4b0f      	ldr	r3, [pc, #60]	; (8002b90 <MX_SPI1_Init+0x74>)
 8002b52:	2228      	movs	r2, #40	; 0x28
 8002b54:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b56:	4b0e      	ldr	r3, [pc, #56]	; (8002b90 <MX_SPI1_Init+0x74>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b5c:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <MX_SPI1_Init+0x74>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b62:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <MX_SPI1_Init+0x74>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002b68:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <MX_SPI1_Init+0x74>)
 8002b6a:	2207      	movs	r2, #7
 8002b6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002b6e:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <MX_SPI1_Init+0x74>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002b74:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <MX_SPI1_Init+0x74>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b7a:	4805      	ldr	r0, [pc, #20]	; (8002b90 <MX_SPI1_Init+0x74>)
 8002b7c:	f004 fe3d 	bl	80077fa <HAL_SPI_Init>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002b86:	f7ff fefb 	bl	8002980 <Error_Handler>
  }

}
 8002b8a:	bf00      	nop
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	20000874 	.word	0x20000874
 8002b94:	40013000 	.word	0x40013000

08002b98 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8002b9c:	4b1b      	ldr	r3, [pc, #108]	; (8002c0c <MX_SPI2_Init+0x74>)
 8002b9e:	4a1c      	ldr	r2, [pc, #112]	; (8002c10 <MX_SPI2_Init+0x78>)
 8002ba0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002ba2:	4b1a      	ldr	r3, [pc, #104]	; (8002c0c <MX_SPI2_Init+0x74>)
 8002ba4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ba8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002baa:	4b18      	ldr	r3, [pc, #96]	; (8002c0c <MX_SPI2_Init+0x74>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002bb0:	4b16      	ldr	r3, [pc, #88]	; (8002c0c <MX_SPI2_Init+0x74>)
 8002bb2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002bb6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002bb8:	4b14      	ldr	r3, [pc, #80]	; (8002c0c <MX_SPI2_Init+0x74>)
 8002bba:	2202      	movs	r2, #2
 8002bbc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002bbe:	4b13      	ldr	r3, [pc, #76]	; (8002c0c <MX_SPI2_Init+0x74>)
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002bc4:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <MX_SPI2_Init+0x74>)
 8002bc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bca:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002bcc:	4b0f      	ldr	r3, [pc, #60]	; (8002c0c <MX_SPI2_Init+0x74>)
 8002bce:	2228      	movs	r2, #40	; 0x28
 8002bd0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bd2:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <MX_SPI2_Init+0x74>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bd8:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <MX_SPI2_Init+0x74>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bde:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <MX_SPI2_Init+0x74>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002be4:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <MX_SPI2_Init+0x74>)
 8002be6:	2207      	movs	r2, #7
 8002be8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002bea:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <MX_SPI2_Init+0x74>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002bf0:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <MX_SPI2_Init+0x74>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002bf6:	4805      	ldr	r0, [pc, #20]	; (8002c0c <MX_SPI2_Init+0x74>)
 8002bf8:	f004 fdff 	bl	80077fa <HAL_SPI_Init>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002c02:	f7ff febd 	bl	8002980 <Error_Handler>
  }

}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	20000810 	.word	0x20000810
 8002c10:	40003800 	.word	0x40003800

08002c14 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c1c:	f107 030c 	add.w	r3, r7, #12
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	605a      	str	r2, [r3, #4]
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	60da      	str	r2, [r3, #12]
 8002c2a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a28      	ldr	r2, [pc, #160]	; (8002cd4 <HAL_SPI_MspInit+0xc0>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d118      	bne.n	8002c68 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c36:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002c3a:	f7ff ff55 	bl	8002ae8 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c3e:	2001      	movs	r0, #1
 8002c40:	f7ff ff20 	bl	8002a84 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002c44:	23e0      	movs	r3, #224	; 0xe0
 8002c46:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c48:	2302      	movs	r3, #2
 8002c4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c50:	2302      	movs	r3, #2
 8002c52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c54:	2305      	movs	r3, #5
 8002c56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c58:	f107 030c 	add.w	r3, r7, #12
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c62:	f001 fe89 	bl	8004978 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002c66:	e030      	b.n	8002cca <HAL_SPI_MspInit+0xb6>
  else if(spiHandle->Instance==SPI2)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a1a      	ldr	r2, [pc, #104]	; (8002cd8 <HAL_SPI_MspInit+0xc4>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d12b      	bne.n	8002cca <HAL_SPI_MspInit+0xb6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002c72:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002c76:	f7ff ff1e 	bl	8002ab6 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c7a:	2004      	movs	r0, #4
 8002c7c:	f7ff ff02 	bl	8002a84 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c80:	2001      	movs	r0, #1
 8002c82:	f7ff feff 	bl	8002a84 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002c86:	230c      	movs	r3, #12
 8002c88:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c92:	2300      	movs	r3, #0
 8002c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c96:	2305      	movs	r3, #5
 8002c98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c9a:	f107 030c 	add.w	r3, r7, #12
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	480e      	ldr	r0, [pc, #56]	; (8002cdc <HAL_SPI_MspInit+0xc8>)
 8002ca2:	f001 fe69 	bl	8004978 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ca6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002caa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cac:	2302      	movs	r3, #2
 8002cae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002cb8:	2305      	movs	r3, #5
 8002cba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cbc:	f107 030c 	add.w	r3, r7, #12
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cc6:	f001 fe57 	bl	8004978 <HAL_GPIO_Init>
}
 8002cca:	bf00      	nop
 8002ccc:	3720      	adds	r7, #32
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40013000 	.word	0x40013000
 8002cd8:	40003800 	.word	0x40003800
 8002cdc:	48000800 	.word	0x48000800

08002ce0 <LL_RCC_HSE_SetCapacitorTuning>:
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8002ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cec:	4a0a      	ldr	r2, [pc, #40]	; (8002d18 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8002cee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8002cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cfa:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	021b      	lsls	r3, r3, #8
 8002d02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d06:	4313      	orrs	r3, r2
 8002d08:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	cafecafe 	.word	0xcafecafe

08002d1c <LL_AHB3_GRP1_EnableClock>:
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d40:	68fb      	ldr	r3, [r7, #12]
}
 8002d42:	bf00      	nop
 8002d44:	3714      	adds	r7, #20
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0

	OTP_ID0_t * p_otp;
	/**
	* Read HSE_Tuning from OTP
	*/
	p_otp = (OTP_ID0_t *) OTP_Read(0);
 8002d54:	2000      	movs	r0, #0
 8002d56:	f007 fda9 	bl	800a8ac <OTP_Read>
 8002d5a:	6078      	str	r0, [r7, #4]
	if (p_otp)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d004      	beq.n	8002d6c <HAL_MspInit+0x1e>
	{
		LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	799b      	ldrb	r3, [r3, #6]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff ffba 	bl	8002ce0 <LL_RCC_HSE_SetCapacitorTuning>
	}
  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002d6c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002d70:	f7ff ffd4 	bl	8002d1c <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002d74:	2200      	movs	r2, #0
 8002d76:	2100      	movs	r1, #0
 8002d78:	202e      	movs	r0, #46	; 0x2e
 8002d7a:	f001 fd9e 	bl	80048ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002d7e:	202e      	movs	r0, #46	; 0x2e
 8002d80:	f001 fdb5 	bl	80048ee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d84:	bf00      	nop
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d90:	bf00      	nop
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
	...

08002d9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8002da0:	2102      	movs	r1, #2
 8002da2:	4802      	ldr	r0, [pc, #8]	; (8002dac <HardFault_Handler+0x10>)
 8002da4:	f001 ff70 	bl	8004c88 <HAL_GPIO_TogglePin>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002da8:	e7fe      	b.n	8002da8 <HardFault_Handler+0xc>
 8002daa:	bf00      	nop
 8002dac:	48000400 	.word	0x48000400

08002db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002db4:	e7fe      	b.n	8002db4 <MemManage_Handler+0x4>

08002db6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002db6:	b480      	push	{r7}
 8002db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dba:	e7fe      	b.n	8002dba <BusFault_Handler+0x4>

08002dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dc0:	e7fe      	b.n	8002dc0 <UsageFault_Handler+0x4>

08002dc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dc6:	bf00      	nop
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dd4:	bf00      	nop
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dde:	b480      	push	{r7}
 8002de0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002de2:	bf00      	nop
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002df0:	f000 fb44 	bl	800347c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002df4:	bf00      	nop
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002dfc:	4802      	ldr	r0, [pc, #8]	; (8002e08 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002dfe:	f005 fcab 	bl	8008758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002e02:	bf00      	nop
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	200008d8 	.word	0x200008d8

08002e0c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002e10:	f001 ff54 	bl	8004cbc <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002e14:	bf00      	nop
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <RTC_WKUP_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
* @brief This function handles RTC wake-up interrupt through EXTI line 19.
*/
void RTC_WKUP_IRQHandler(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
	HW_TS_RTC_Wakeup_Handler();
 8002e1c:	f7fe fb3e 	bl	800149c <HW_TS_RTC_Wakeup_Handler>
}
 8002e20:	bf00      	nop
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <IPCC_C1_RX_IRQHandler>:
/**
* @brief This function handles IPCC RX occupied interrupt.
*/
void IPCC_C1_RX_IRQHandler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
	HW_IPCC_Rx_Handler();
 8002e28:	f009 f8fc 	bl	800c024 <HW_IPCC_Rx_Handler>
}
 8002e2c:	bf00      	nop
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <IPCC_C1_TX_IRQHandler>:
/**
* @brief This function handles IPCC TX free interrupt.
*/
void IPCC_C1_TX_IRQHandler(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
	HW_IPCC_Tx_Handler();
 8002e34:	f009 f92e 	bl	800c094 <HW_IPCC_Tx_Handler>
}
 8002e38:	bf00      	nop
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8002e40:	4b26      	ldr	r3, [pc, #152]	; (8002edc <SystemInit+0xa0>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8002e46:	4b25      	ldr	r3, [pc, #148]	; (8002edc <SystemInit+0xa0>)
 8002e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4c:	4a23      	ldr	r2, [pc, #140]	; (8002edc <SystemInit+0xa0>)
 8002e4e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e52:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e60:	f043 0301 	orr.w	r3, r3, #1
 8002e64:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e6a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002e6e:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e7a:	4b19      	ldr	r3, [pc, #100]	; (8002ee0 <SystemInit+0xa4>)
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e8c:	f023 0305 	bic.w	r3, r3, #5
 8002e90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ea0:	f023 0301 	bic.w	r3, r3, #1
 8002ea4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eac:	4a0d      	ldr	r2, [pc, #52]	; (8002ee4 <SystemInit+0xa8>)
 8002eae:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb4:	4a0b      	ldr	r2, [pc, #44]	; (8002ee4 <SystemInit+0xa8>)
 8002eb6:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ec2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ec6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ecc:	2200      	movs	r2, #0
 8002ece:	619a      	str	r2, [r3, #24]
}
 8002ed0:	bf00      	nop
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	e000ed00 	.word	0xe000ed00
 8002ee0:	faf6fefb 	.word	0xfaf6fefb
 8002ee4:	22041000 	.word	0x22041000

08002ee8 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b087      	sub	sp, #28
 8002eec:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8002eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	091b      	lsrs	r3, r3, #4
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	4a47      	ldr	r2, [pc, #284]	; (8003018 <SystemCoreClockUpdate+0x130>)
 8002efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f00:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 030c 	and.w	r3, r3, #12
 8002f0c:	2b0c      	cmp	r3, #12
 8002f0e:	d867      	bhi.n	8002fe0 <SystemCoreClockUpdate+0xf8>
 8002f10:	a201      	add	r2, pc, #4	; (adr r2, 8002f18 <SystemCoreClockUpdate+0x30>)
 8002f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f16:	bf00      	nop
 8002f18:	08002f4d 	.word	0x08002f4d
 8002f1c:	08002fe1 	.word	0x08002fe1
 8002f20:	08002fe1 	.word	0x08002fe1
 8002f24:	08002fe1 	.word	0x08002fe1
 8002f28:	08002f55 	.word	0x08002f55
 8002f2c:	08002fe1 	.word	0x08002fe1
 8002f30:	08002fe1 	.word	0x08002fe1
 8002f34:	08002fe1 	.word	0x08002fe1
 8002f38:	08002f5d 	.word	0x08002f5d
 8002f3c:	08002fe1 	.word	0x08002fe1
 8002f40:	08002fe1 	.word	0x08002fe1
 8002f44:	08002fe1 	.word	0x08002fe1
 8002f48:	08002f65 	.word	0x08002f65
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8002f4c:	4a33      	ldr	r2, [pc, #204]	; (800301c <SystemCoreClockUpdate+0x134>)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	6013      	str	r3, [r2, #0]
      break;
 8002f52:	e049      	b.n	8002fe8 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8002f54:	4b31      	ldr	r3, [pc, #196]	; (800301c <SystemCoreClockUpdate+0x134>)
 8002f56:	4a32      	ldr	r2, [pc, #200]	; (8003020 <SystemCoreClockUpdate+0x138>)
 8002f58:	601a      	str	r2, [r3, #0]
      break;
 8002f5a:	e045      	b.n	8002fe8 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002f5c:	4b2f      	ldr	r3, [pc, #188]	; (800301c <SystemCoreClockUpdate+0x134>)
 8002f5e:	4a31      	ldr	r2, [pc, #196]	; (8003024 <SystemCoreClockUpdate+0x13c>)
 8002f60:	601a      	str	r2, [r3, #0]
      break;
 8002f62:	e041      	b.n	8002fe8 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8002f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	091b      	lsrs	r3, r3, #4
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d105      	bne.n	8002f92 <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8002f86:	4a26      	ldr	r2, [pc, #152]	; (8003020 <SystemCoreClockUpdate+0x138>)
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	e00d      	b.n	8002fae <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	d105      	bne.n	8002fa4 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8002f98:	4a22      	ldr	r2, [pc, #136]	; (8003024 <SystemCoreClockUpdate+0x13c>)
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa0:	617b      	str	r3, [r7, #20]
 8002fa2:	e004      	b.n	8002fae <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fac:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	0a1b      	lsrs	r3, r3, #8
 8002fb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	fb02 f303 	mul.w	r3, r2, r3
 8002fc0:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8002fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	0f5b      	lsrs	r3, r3, #29
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	3301      	adds	r3, #1
 8002fd0:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fda:	4a10      	ldr	r2, [pc, #64]	; (800301c <SystemCoreClockUpdate+0x134>)
 8002fdc:	6013      	str	r3, [r2, #0]
      break;
 8002fde:	e003      	b.n	8002fe8 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8002fe0:	4a0e      	ldr	r2, [pc, #56]	; (800301c <SystemCoreClockUpdate+0x134>)
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	6013      	str	r3, [r2, #0]
      break;
 8002fe6:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	091b      	lsrs	r3, r3, #4
 8002ff0:	f003 030f 	and.w	r3, r3, #15
 8002ff4:	4a0c      	ldr	r2, [pc, #48]	; (8003028 <SystemCoreClockUpdate+0x140>)
 8002ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ffa:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8002ffc:	4b07      	ldr	r3, [pc, #28]	; (800301c <SystemCoreClockUpdate+0x134>)
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	fbb2 f3f3 	udiv	r3, r2, r3
 8003006:	4a05      	ldr	r2, [pc, #20]	; (800301c <SystemCoreClockUpdate+0x134>)
 8003008:	6013      	str	r3, [r2, #0]

}
 800300a:	bf00      	nop
 800300c:	371c      	adds	r7, #28
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	0800c9e8 	.word	0x0800c9e8
 800301c:	20000038 	.word	0x20000038
 8003020:	00f42400 	.word	0x00f42400
 8003024:	01e84800 	.word	0x01e84800
 8003028:	0800c988 	.word	0x0800c988

0800302c <LL_APB2_GRP1_EnableClock>:
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003038:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800303a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4313      	orrs	r3, r2
 8003042:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003048:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4013      	ands	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003050:	68fb      	ldr	r3, [r7, #12]
}
 8003052:	bf00      	nop
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
	...

08003060 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8003064:	4b10      	ldr	r3, [pc, #64]	; (80030a8 <MX_TIM16_Init+0x48>)
 8003066:	4a11      	ldr	r2, [pc, #68]	; (80030ac <MX_TIM16_Init+0x4c>)
 8003068:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1000;
 800306a:	4b0f      	ldr	r3, [pc, #60]	; (80030a8 <MX_TIM16_Init+0x48>)
 800306c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003070:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003072:	4b0d      	ldr	r3, [pc, #52]	; (80030a8 <MX_TIM16_Init+0x48>)
 8003074:	2200      	movs	r2, #0
 8003076:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 320;
 8003078:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <MX_TIM16_Init+0x48>)
 800307a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800307e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003080:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <MX_TIM16_Init+0x48>)
 8003082:	2200      	movs	r2, #0
 8003084:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003086:	4b08      	ldr	r3, [pc, #32]	; (80030a8 <MX_TIM16_Init+0x48>)
 8003088:	2200      	movs	r2, #0
 800308a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800308c:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <MX_TIM16_Init+0x48>)
 800308e:	2200      	movs	r2, #0
 8003090:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003092:	4805      	ldr	r0, [pc, #20]	; (80030a8 <MX_TIM16_Init+0x48>)
 8003094:	f005 faba 	bl	800860c <HAL_TIM_Base_Init>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800309e:	f7ff fc6f 	bl	8002980 <Error_Handler>
  }

}
 80030a2:	bf00      	nop
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	200008d8 	.word	0x200008d8
 80030ac:	40014400 	.word	0x40014400

080030b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a09      	ldr	r2, [pc, #36]	; (80030e4 <HAL_TIM_Base_MspInit+0x34>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d10b      	bne.n	80030da <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80030c2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80030c6:	f7ff ffb1 	bl	800302c <LL_APB2_GRP1_EnableClock>

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80030ca:	2200      	movs	r2, #0
 80030cc:	2100      	movs	r1, #0
 80030ce:	2019      	movs	r0, #25
 80030d0:	f001 fbf3 	bl	80048ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80030d4:	2019      	movs	r0, #25
 80030d6:	f001 fc0a 	bl	80048ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80030da:	bf00      	nop
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40014400 	.word	0x40014400

080030e8 <LL_AHB2_GRP1_EnableClock>:
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80030f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80030f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003104:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4013      	ands	r3, r2
 800310a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800310c:	68fb      	ldr	r3, [r7, #12]
}
 800310e:	bf00      	nop
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <LL_APB2_GRP1_EnableClock>:
{
 800311a:	b480      	push	{r7}
 800311c:	b085      	sub	sp, #20
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003126:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003128:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4313      	orrs	r3, r2
 8003130:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003136:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4013      	ands	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800313e:	68fb      	ldr	r3, [r7, #12]
}
 8003140:	bf00      	nop
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8003150:	4b22      	ldr	r3, [pc, #136]	; (80031dc <MX_USART1_UART_Init+0x90>)
 8003152:	4a23      	ldr	r2, [pc, #140]	; (80031e0 <MX_USART1_UART_Init+0x94>)
 8003154:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003156:	4b21      	ldr	r3, [pc, #132]	; (80031dc <MX_USART1_UART_Init+0x90>)
 8003158:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800315c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800315e:	4b1f      	ldr	r3, [pc, #124]	; (80031dc <MX_USART1_UART_Init+0x90>)
 8003160:	2200      	movs	r2, #0
 8003162:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003164:	4b1d      	ldr	r3, [pc, #116]	; (80031dc <MX_USART1_UART_Init+0x90>)
 8003166:	2200      	movs	r2, #0
 8003168:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800316a:	4b1c      	ldr	r3, [pc, #112]	; (80031dc <MX_USART1_UART_Init+0x90>)
 800316c:	2200      	movs	r2, #0
 800316e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003170:	4b1a      	ldr	r3, [pc, #104]	; (80031dc <MX_USART1_UART_Init+0x90>)
 8003172:	220c      	movs	r2, #12
 8003174:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003176:	4b19      	ldr	r3, [pc, #100]	; (80031dc <MX_USART1_UART_Init+0x90>)
 8003178:	2200      	movs	r2, #0
 800317a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800317c:	4b17      	ldr	r3, [pc, #92]	; (80031dc <MX_USART1_UART_Init+0x90>)
 800317e:	2200      	movs	r2, #0
 8003180:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003182:	4b16      	ldr	r3, [pc, #88]	; (80031dc <MX_USART1_UART_Init+0x90>)
 8003184:	2200      	movs	r2, #0
 8003186:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003188:	4b14      	ldr	r3, [pc, #80]	; (80031dc <MX_USART1_UART_Init+0x90>)
 800318a:	2200      	movs	r2, #0
 800318c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800318e:	4b13      	ldr	r3, [pc, #76]	; (80031dc <MX_USART1_UART_Init+0x90>)
 8003190:	2200      	movs	r2, #0
 8003192:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003194:	4811      	ldr	r0, [pc, #68]	; (80031dc <MX_USART1_UART_Init+0x90>)
 8003196:	f005 fcc9 	bl	8008b2c <HAL_UART_Init>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80031a0:	f7ff fbee 	bl	8002980 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031a4:	2100      	movs	r1, #0
 80031a6:	480d      	ldr	r0, [pc, #52]	; (80031dc <MX_USART1_UART_Init+0x90>)
 80031a8:	f006 f8c1 	bl	800932e <HAL_UARTEx_SetTxFifoThreshold>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80031b2:	f7ff fbe5 	bl	8002980 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031b6:	2100      	movs	r1, #0
 80031b8:	4808      	ldr	r0, [pc, #32]	; (80031dc <MX_USART1_UART_Init+0x90>)
 80031ba:	f006 f8f6 	bl	80093aa <HAL_UARTEx_SetRxFifoThreshold>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80031c4:	f7ff fbdc 	bl	8002980 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80031c8:	4804      	ldr	r0, [pc, #16]	; (80031dc <MX_USART1_UART_Init+0x90>)
 80031ca:	f006 f877 	bl	80092bc <HAL_UARTEx_DisableFifoMode>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80031d4:	f7ff fbd4 	bl	8002980 <Error_Handler>
  }

}
 80031d8:	bf00      	nop
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	20000924 	.word	0x20000924
 80031e0:	40013800 	.word	0x40013800

080031e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b088      	sub	sp, #32
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ec:	f107 030c 	add.w	r3, r7, #12
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	605a      	str	r2, [r3, #4]
 80031f6:	609a      	str	r2, [r3, #8]
 80031f8:	60da      	str	r2, [r3, #12]
 80031fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a0e      	ldr	r2, [pc, #56]	; (800323c <HAL_UART_MspInit+0x58>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d116      	bne.n	8003234 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003206:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800320a:	f7ff ff86 	bl	800311a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800320e:	2002      	movs	r0, #2
 8003210:	f7ff ff6a 	bl	80030e8 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003214:	23c0      	movs	r3, #192	; 0xc0
 8003216:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003218:	2302      	movs	r3, #2
 800321a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321c:	2300      	movs	r3, #0
 800321e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003220:	2300      	movs	r3, #0
 8003222:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003224:	2307      	movs	r3, #7
 8003226:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003228:	f107 030c 	add.w	r3, r7, #12
 800322c:	4619      	mov	r1, r3
 800322e:	4804      	ldr	r0, [pc, #16]	; (8003240 <HAL_UART_MspInit+0x5c>)
 8003230:	f001 fba2 	bl	8004978 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003234:	bf00      	nop
 8003236:	3720      	adds	r7, #32
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40013800 	.word	0x40013800
 8003240:	48000400 	.word	0x48000400

08003244 <LL_AHB2_GRP1_EnableClock>:
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800324c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003250:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003252:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4313      	orrs	r3, r2
 800325a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800325c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003260:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4013      	ands	r3, r2
 8003266:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003268:	68fb      	ldr	r3, [r7, #12]
}
 800326a:	bf00      	nop
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <LL_APB1_GRP1_EnableClock>:
{
 8003276:	b480      	push	{r7}
 8003278:	b085      	sub	sp, #20
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800327e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003282:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003284:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4313      	orrs	r3, r2
 800328c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800328e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003292:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4013      	ands	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800329a:	68fb      	ldr	r3, [r7, #12]
}
 800329c:	bf00      	nop
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0

  hpcd_USB_FS.Instance = USB;
 80032ac:	4b10      	ldr	r3, [pc, #64]	; (80032f0 <MX_USB_PCD_Init+0x48>)
 80032ae:	4a11      	ldr	r2, [pc, #68]	; (80032f4 <MX_USB_PCD_Init+0x4c>)
 80032b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80032b2:	4b0f      	ldr	r3, [pc, #60]	; (80032f0 <MX_USB_PCD_Init+0x48>)
 80032b4:	2208      	movs	r2, #8
 80032b6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80032b8:	4b0d      	ldr	r3, [pc, #52]	; (80032f0 <MX_USB_PCD_Init+0x48>)
 80032ba:	2202      	movs	r2, #2
 80032bc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80032be:	4b0c      	ldr	r3, [pc, #48]	; (80032f0 <MX_USB_PCD_Init+0x48>)
 80032c0:	2202      	movs	r2, #2
 80032c2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80032c4:	4b0a      	ldr	r3, [pc, #40]	; (80032f0 <MX_USB_PCD_Init+0x48>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80032ca:	4b09      	ldr	r3, [pc, #36]	; (80032f0 <MX_USB_PCD_Init+0x48>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80032d0:	4b07      	ldr	r3, [pc, #28]	; (80032f0 <MX_USB_PCD_Init+0x48>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80032d6:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <MX_USB_PCD_Init+0x48>)
 80032d8:	2200      	movs	r2, #0
 80032da:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80032dc:	4804      	ldr	r0, [pc, #16]	; (80032f0 <MX_USB_PCD_Init+0x48>)
 80032de:	f002 fa02 	bl	80056e6 <HAL_PCD_Init>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80032e8:	f7ff fb4a 	bl	8002980 <Error_Handler>
  }

}
 80032ec:	bf00      	nop
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	200009b0 	.word	0x200009b0
 80032f4:	40006800 	.word	0x40006800

080032f8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b088      	sub	sp, #32
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003300:	f107 030c 	add.w	r3, r7, #12
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	60da      	str	r2, [r3, #12]
 800330e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a0f      	ldr	r2, [pc, #60]	; (8003354 <HAL_PCD_MspInit+0x5c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d118      	bne.n	800334c <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800331a:	2001      	movs	r0, #1
 800331c:	f7ff ff92 	bl	8003244 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003320:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003324:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003326:	2302      	movs	r3, #2
 8003328:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332e:	2300      	movs	r3, #0
 8003330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8003332:	230a      	movs	r3, #10
 8003334:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003336:	f107 030c 	add.w	r3, r7, #12
 800333a:	4619      	mov	r1, r3
 800333c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003340:	f001 fb1a 	bl	8004978 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003344:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003348:	f7ff ff95 	bl	8003276 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800334c:	bf00      	nop
 800334e:	3720      	adds	r7, #32
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40006800 	.word	0x40006800

08003358 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003358:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800335a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800335c:	3304      	adds	r3, #4

0800335e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800335e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003360:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003362:	d3f9      	bcc.n	8003358 <CopyDataInit>
  bx lr
 8003364:	4770      	bx	lr

08003366 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003366:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003368:	3004      	adds	r0, #4

0800336a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800336a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800336c:	d3fb      	bcc.n	8003366 <FillZerobss>
  bx lr
 800336e:	4770      	bx	lr

08003370 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003370:	480c      	ldr	r0, [pc, #48]	; (80033a4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8003372:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003374:	480c      	ldr	r0, [pc, #48]	; (80033a8 <LoopForever+0x8>)
 8003376:	490d      	ldr	r1, [pc, #52]	; (80033ac <LoopForever+0xc>)
 8003378:	4a0d      	ldr	r2, [pc, #52]	; (80033b0 <LoopForever+0x10>)
 800337a:	2300      	movs	r3, #0
 800337c:	f7ff ffef 	bl	800335e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003380:	480c      	ldr	r0, [pc, #48]	; (80033b4 <LoopForever+0x14>)
 8003382:	490d      	ldr	r1, [pc, #52]	; (80033b8 <LoopForever+0x18>)
 8003384:	2300      	movs	r3, #0
 8003386:	f7ff fff0 	bl	800336a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800338a:	480c      	ldr	r0, [pc, #48]	; (80033bc <LoopForever+0x1c>)
 800338c:	490c      	ldr	r1, [pc, #48]	; (80033c0 <LoopForever+0x20>)
 800338e:	2300      	movs	r3, #0
 8003390:	f7ff ffeb 	bl	800336a <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003394:	f7ff fd52 	bl	8002e3c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003398:	f009 f9e2 	bl	800c760 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800339c:	f7fe fcda 	bl	8001d54 <main>

080033a0 <LoopForever>:

LoopForever:
  b LoopForever
 80033a0:	e7fe      	b.n	80033a0 <LoopForever>
 80033a2:	0000      	.short	0x0000
  ldr   r0, =_estack
 80033a4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80033a8:	20000004 	.word	0x20000004
 80033ac:	2000005c 	.word	0x2000005c
 80033b0:	0800ca90 	.word	0x0800ca90
  INIT_BSS _sbss, _ebss
 80033b4:	200001f4 	.word	0x200001f4
 80033b8:	20000c2c 	.word	0x20000c2c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80033bc:	200301e0 	.word	0x200301e0
 80033c0:	20030a57 	.word	0x20030a57

080033c4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80033c4:	e7fe      	b.n	80033c4 <ADC1_IRQHandler>
	...

080033c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80033ce:	2300      	movs	r3, #0
 80033d0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033d2:	4b0c      	ldr	r3, [pc, #48]	; (8003404 <HAL_Init+0x3c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a0b      	ldr	r2, [pc, #44]	; (8003404 <HAL_Init+0x3c>)
 80033d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033dc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033de:	2003      	movs	r0, #3
 80033e0:	f001 fa60 	bl	80048a4 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033e4:	2000      	movs	r0, #0
 80033e6:	f000 f80f 	bl	8003408 <HAL_InitTick>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d002      	beq.n	80033f6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	71fb      	strb	r3, [r7, #7]
 80033f4:	e001      	b.n	80033fa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80033f6:	f7ff fcaa 	bl	8002d4e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80033fa:	79fb      	ldrb	r3, [r7, #7]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	58004000 	.word	0x58004000

08003408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003414:	4b17      	ldr	r3, [pc, #92]	; (8003474 <HAL_InitTick+0x6c>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d024      	beq.n	8003466 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 800341c:	f003 fb34 	bl	8006a88 <HAL_RCC_GetHCLKFreq>
 8003420:	4602      	mov	r2, r0
 8003422:	4b14      	ldr	r3, [pc, #80]	; (8003474 <HAL_InitTick+0x6c>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	4619      	mov	r1, r3
 8003428:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800342c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003430:	fbb2 f3f3 	udiv	r3, r2, r3
 8003434:	4618      	mov	r0, r3
 8003436:	f001 fa76 	bl	8004926 <HAL_SYSTICK_Config>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10f      	bne.n	8003460 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b0f      	cmp	r3, #15
 8003444:	d809      	bhi.n	800345a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003446:	2200      	movs	r2, #0
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800344e:	f001 fa34 	bl	80048ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003452:	4a09      	ldr	r2, [pc, #36]	; (8003478 <HAL_InitTick+0x70>)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6013      	str	r3, [r2, #0]
 8003458:	e007      	b.n	800346a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	73fb      	strb	r3, [r7, #15]
 800345e:	e004      	b.n	800346a <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	73fb      	strb	r3, [r7, #15]
 8003464:	e001      	b.n	800346a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800346a:	7bfb      	ldrb	r3, [r7, #15]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	20000040 	.word	0x20000040
 8003478:	2000003c 	.word	0x2000003c

0800347c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003480:	4b06      	ldr	r3, [pc, #24]	; (800349c <HAL_IncTick+0x20>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	461a      	mov	r2, r3
 8003486:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <HAL_IncTick+0x24>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4413      	add	r3, r2
 800348c:	4a04      	ldr	r2, [pc, #16]	; (80034a0 <HAL_IncTick+0x24>)
 800348e:	6013      	str	r3, [r2, #0]
}
 8003490:	bf00      	nop
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	20000040 	.word	0x20000040
 80034a0:	20000c24 	.word	0x20000c24

080034a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  return uwTick;
 80034a8:	4b03      	ldr	r3, [pc, #12]	; (80034b8 <HAL_GetTick+0x14>)
 80034aa:	681b      	ldr	r3, [r3, #0]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	20000c24 	.word	0x20000c24

080034bc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80034c0:	4b03      	ldr	r3, [pc, #12]	; (80034d0 <HAL_GetTickPrio+0x14>)
 80034c2:	681b      	ldr	r3, [r3, #0]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	2000003c 	.word	0x2000003c

080034d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 80034dc:	f7ff ffe2 	bl	80034a4 <HAL_GetTick>
 80034e0:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034ec:	d005      	beq.n	80034fa <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 80034ee:	4b09      	ldr	r3, [pc, #36]	; (8003514 <HAL_Delay+0x40>)
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	461a      	mov	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4413      	add	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 80034fa:	bf00      	nop
 80034fc:	f7ff ffd2 	bl	80034a4 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	429a      	cmp	r2, r3
 800350a:	d8f7      	bhi.n	80034fc <HAL_Delay+0x28>
    {
    }
  }
 800350c:	bf00      	nop
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	20000040 	.word	0x20000040

08003518 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	431a      	orrs	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	609a      	str	r2, [r3, #8]
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800353e:	b480      	push	{r7}
 8003540:	b083      	sub	sp, #12
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
 8003546:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	431a      	orrs	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	609a      	str	r2, [r3, #8]
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003574:	4618      	mov	r0, r3
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003580:	b480      	push	{r7}
 8003582:	b087      	sub	sp, #28
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
 800358c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	3360      	adds	r3, #96	; 0x60
 8003592:	461a      	mov	r2, r3
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	4b08      	ldr	r3, [pc, #32]	; (80035c4 <LL_ADC_SetOffset+0x44>)
 80035a2:	4013      	ands	r3, r2
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	4313      	orrs	r3, r2
 80035b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80035b8:	bf00      	nop
 80035ba:	371c      	adds	r7, #28
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	03fff000 	.word	0x03fff000

080035c8 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	3360      	adds	r3, #96	; 0x60
 80035d6:	461a      	mov	r2, r3
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4413      	add	r3, r2
 80035de:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3714      	adds	r7, #20
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	3360      	adds	r3, #96	; 0x60
 8003604:	461a      	mov	r2, r3
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	431a      	orrs	r2, r3
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800361e:	bf00      	nop
 8003620:	371c      	adds	r7, #28
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800363e:	2301      	movs	r3, #1
 8003640:	e000      	b.n	8003644 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003650:	b480      	push	{r7}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	3330      	adds	r3, #48	; 0x30
 8003660:	461a      	mov	r2, r3
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	0a1b      	lsrs	r3, r3, #8
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	f003 030c 	and.w	r3, r3, #12
 800366c:	4413      	add	r3, r2
 800366e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	f003 031f 	and.w	r3, r3, #31
 800367a:	211f      	movs	r1, #31
 800367c:	fa01 f303 	lsl.w	r3, r1, r3
 8003680:	43db      	mvns	r3, r3
 8003682:	401a      	ands	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	0e9b      	lsrs	r3, r3, #26
 8003688:	f003 011f 	and.w	r1, r3, #31
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	f003 031f 	and.w	r3, r3, #31
 8003692:	fa01 f303 	lsl.w	r3, r1, r3
 8003696:	431a      	orrs	r2, r3
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800369c:	bf00      	nop
 800369e:	371c      	adds	r7, #28
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b087      	sub	sp, #28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	3314      	adds	r3, #20
 80036b8:	461a      	mov	r2, r3
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	0e5b      	lsrs	r3, r3, #25
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	4413      	add	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	0d1b      	lsrs	r3, r3, #20
 80036d0:	f003 031f 	and.w	r3, r3, #31
 80036d4:	2107      	movs	r1, #7
 80036d6:	fa01 f303 	lsl.w	r3, r1, r3
 80036da:	43db      	mvns	r3, r3
 80036dc:	401a      	ands	r2, r3
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	0d1b      	lsrs	r3, r3, #20
 80036e2:	f003 031f 	and.w	r3, r3, #31
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	fa01 f303 	lsl.w	r3, r1, r3
 80036ec:	431a      	orrs	r2, r3
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80036f2:	bf00      	nop
 80036f4:	371c      	adds	r7, #28
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
	...

08003700 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003718:	43db      	mvns	r3, r3
 800371a:	401a      	ands	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f003 0318 	and.w	r3, r3, #24
 8003722:	4908      	ldr	r1, [pc, #32]	; (8003744 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003724:	40d9      	lsrs	r1, r3
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	400b      	ands	r3, r1
 800372a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800372e:	431a      	orrs	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003736:	bf00      	nop
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	0007ffff 	.word	0x0007ffff

08003748 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003758:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6093      	str	r3, [r2, #8]
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800377c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003780:	d101      	bne.n	8003786 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003782:	2301      	movs	r3, #1
 8003784:	e000      	b.n	8003788 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80037a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037d0:	d101      	bne.n	80037d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80037f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037f8:	f043 0201 	orr.w	r2, r3, #1
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800381c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003820:	f043 0202 	orr.w	r2, r3, #2
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	2b01      	cmp	r3, #1
 8003846:	d101      	bne.n	800384c <LL_ADC_IsEnabled+0x18>
 8003848:	2301      	movs	r3, #1
 800384a:	e000      	b.n	800384e <LL_ADC_IsEnabled+0x1a>
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b02      	cmp	r3, #2
 800386c:	d101      	bne.n	8003872 <LL_ADC_IsDisableOngoing+0x18>
 800386e:	2301      	movs	r3, #1
 8003870:	e000      	b.n	8003874 <LL_ADC_IsDisableOngoing+0x1a>
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003890:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003894:	f043 0204 	orr.w	r2, r3, #4
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b04      	cmp	r3, #4
 80038ba:	d101      	bne.n	80038c0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80038bc:	2301      	movs	r3, #1
 80038be:	e000      	b.n	80038c2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr

080038ce <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 0308 	and.w	r3, r3, #8
 80038de:	2b08      	cmp	r3, #8
 80038e0:	d101      	bne.n	80038e6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80038e2:	2301      	movs	r3, #1
 80038e4:	e000      	b.n	80038e8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b088      	sub	sp, #32
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038fc:	2300      	movs	r3, #0
 80038fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003900:	2300      	movs	r3, #0
 8003902:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e12a      	b.n	8003b64 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003918:	2b00      	cmp	r3, #0
 800391a:	d109      	bne.n	8003930 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f7fd f8b1 	bl	8000a84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff ff19 	bl	800376c <LL_ADC_IsDeepPowerDownEnabled>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d004      	beq.n	800394a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff feff 	bl	8003748 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f7ff ff34 	bl	80037bc <LL_ADC_IsInternalRegulatorEnabled>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d113      	bne.n	8003982 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff ff18 	bl	8003794 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003964:	4b81      	ldr	r3, [pc, #516]	; (8003b6c <HAL_ADC_Init+0x278>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	099b      	lsrs	r3, r3, #6
 800396a:	4a81      	ldr	r2, [pc, #516]	; (8003b70 <HAL_ADC_Init+0x27c>)
 800396c:	fba2 2303 	umull	r2, r3, r2, r3
 8003970:	099b      	lsrs	r3, r3, #6
 8003972:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003974:	e002      	b.n	800397c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	3b01      	subs	r3, #1
 800397a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1f9      	bne.n	8003976 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff ff18 	bl	80037bc <LL_ADC_IsInternalRegulatorEnabled>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10d      	bne.n	80039ae <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003996:	f043 0210 	orr.w	r2, r3, #16
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a2:	f043 0201 	orr.w	r2, r3, #1
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7ff ff78 	bl	80038a8 <LL_ADC_REG_IsConversionOngoing>
 80039b8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039be:	f003 0310 	and.w	r3, r3, #16
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f040 80c5 	bne.w	8003b52 <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f040 80c1 	bne.w	8003b52 <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80039d8:	f043 0202 	orr.w	r2, r3, #2
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff ff25 	bl	8003834 <LL_ADC_IsEnabled>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10b      	bne.n	8003a08 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039f0:	4860      	ldr	r0, [pc, #384]	; (8003b74 <HAL_ADC_Init+0x280>)
 80039f2:	f7ff ff1f 	bl	8003834 <LL_ADC_IsEnabled>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d105      	bne.n	8003a08 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	4619      	mov	r1, r3
 8003a02:	485d      	ldr	r0, [pc, #372]	; (8003b78 <HAL_ADC_Init+0x284>)
 8003a04:	f7ff fd88 	bl	8003518 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	7e5b      	ldrb	r3, [r3, #25]
 8003a0c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a12:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003a18:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003a1e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a26:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d106      	bne.n	8003a44 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	045b      	lsls	r3, r3, #17
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d009      	beq.n	8003a60 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a50:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a58:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68da      	ldr	r2, [r3, #12]
 8003a66:	4b45      	ldr	r3, [pc, #276]	; (8003b7c <HAL_ADC_Init+0x288>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6812      	ldr	r2, [r2, #0]
 8003a6e:	69b9      	ldr	r1, [r7, #24]
 8003a70:	430b      	orrs	r3, r1
 8003a72:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff ff15 	bl	80038a8 <LL_ADC_REG_IsConversionOngoing>
 8003a7e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff ff22 	bl	80038ce <LL_ADC_INJ_IsConversionOngoing>
 8003a8a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d13d      	bne.n	8003b0e <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d13a      	bne.n	8003b0e <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003a9c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003aa4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ab4:	f023 0302 	bic.w	r3, r3, #2
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6812      	ldr	r2, [r2, #0]
 8003abc:	69b9      	ldr	r1, [r7, #24]
 8003abe:	430b      	orrs	r3, r1
 8003ac0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d118      	bne.n	8003afe <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003ad6:	f023 0304 	bic.w	r3, r3, #4
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003ae2:	4311      	orrs	r1, r2
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003ae8:	4311      	orrs	r1, r2
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003aee:	430a      	orrs	r2, r1
 8003af0:	431a      	orrs	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f042 0201 	orr.w	r2, r2, #1
 8003afa:	611a      	str	r2, [r3, #16]
 8003afc:	e007      	b.n	8003b0e <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	691a      	ldr	r2, [r3, #16]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0201 	bic.w	r2, r2, #1
 8003b0c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d10c      	bne.n	8003b30 <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1c:	f023 010f 	bic.w	r1, r3, #15
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	69db      	ldr	r3, [r3, #28]
 8003b24:	1e5a      	subs	r2, r3, #1
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	631a      	str	r2, [r3, #48]	; 0x30
 8003b2e:	e007      	b.n	8003b40 <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 020f 	bic.w	r2, r2, #15
 8003b3e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b44:	f023 0303 	bic.w	r3, r3, #3
 8003b48:	f043 0201 	orr.w	r2, r3, #1
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	655a      	str	r2, [r3, #84]	; 0x54
 8003b50:	e007      	b.n	8003b62 <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b56:	f043 0210 	orr.w	r2, r3, #16
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b62:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3720      	adds	r7, #32
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	20000038 	.word	0x20000038
 8003b70:	053e2d63 	.word	0x053e2d63
 8003b74:	50040000 	.word	0x50040000
 8003b78:	50040300 	.word	0x50040300
 8003b7c:	fff0c007 	.word	0xfff0c007

08003b80 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7ff fe8b 	bl	80038a8 <LL_ADC_REG_IsConversionOngoing>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d140      	bne.n	8003c1a <HAL_ADC_Start+0x9a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d101      	bne.n	8003ba6 <HAL_ADC_Start+0x26>
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	e03c      	b.n	8003c20 <HAL_ADC_Start+0xa0>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 fc08 	bl	80043c4 <ADC_Enable>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d128      	bne.n	8003c10 <HAL_ADC_Start+0x90>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003bc6:	f023 0301 	bic.w	r3, r3, #1
 8003bca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bde:	d106      	bne.n	8003bee <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be4:	f023 0206 	bic.w	r2, r3, #6
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	659a      	str	r2, [r3, #88]	; 0x58
 8003bec:	e002      	b.n	8003bf4 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	221c      	movs	r2, #28
 8003bfa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff fe39 	bl	8003880 <LL_ADC_REG_StartConversion>
 8003c0e:	e006      	b.n	8003c1e <HAL_ADC_Start+0x9e>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003c18:	e001      	b.n	8003c1e <HAL_ADC_Start+0x9e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	2b08      	cmp	r3, #8
 8003c38:	d102      	bne.n	8003c40 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003c3a:	2308      	movs	r3, #8
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	e010      	b.n	8003c62 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d007      	beq.n	8003c5e <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c52:	f043 0220 	orr.w	r2, r3, #32
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	655a      	str	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e066      	b.n	8003d2c <HAL_ADC_PollForConversion+0x104>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8003c5e:	2304      	movs	r3, #4
 8003c60:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003c62:	f7ff fc1f 	bl	80034a4 <HAL_GetTick>
 8003c66:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003c68:	e01a      	b.n	8003ca0 <HAL_ADC_PollForConversion+0x78>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c70:	d016      	beq.n	8003ca0 <HAL_ADC_PollForConversion+0x78>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003c72:	f7ff fc17 	bl	80034a4 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d302      	bcc.n	8003c88 <HAL_ADC_PollForConversion+0x60>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10b      	bne.n	8003ca0 <HAL_ADC_PollForConversion+0x78>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8c:	f043 0204 	orr.w	r2, r3, #4
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e045      	b.n	8003d2c <HAL_ADC_PollForConversion+0x104>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0dd      	beq.n	8003c6a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7ff fcb3 	bl	800362a <LL_ADC_REG_IsTriggerSourceSWStart>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d01c      	beq.n	8003d04 <HAL_ADC_PollForConversion+0xdc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	7e5b      	ldrb	r3, [r3, #25]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d118      	bne.n	8003d04 <HAL_ADC_PollForConversion+0xdc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0308 	and.w	r3, r3, #8
 8003cdc:	2b08      	cmp	r3, #8
 8003cde:	d111      	bne.n	8003d04 <HAL_ADC_PollForConversion+0xdc>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d105      	bne.n	8003d04 <HAL_ADC_PollForConversion+0xdc>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfc:	f043 0201 	orr.w	r2, r3, #1
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2b08      	cmp	r3, #8
 8003d08:	d104      	bne.n	8003d14 <HAL_ADC_PollForConversion+0xec>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2208      	movs	r2, #8
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	e00a      	b.n	8003d2a <HAL_ADC_PollForConversion+0x102>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY) == 0UL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d103      	bne.n	8003d2a <HAL_ADC_PollForConversion+0x102>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	220c      	movs	r2, #12
 8003d28:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
	...

08003d50 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b0a6      	sub	sp, #152	; 0x98
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003d60:	2300      	movs	r3, #0
 8003d62:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d101      	bne.n	8003d72 <HAL_ADC_ConfigChannel+0x22>
 8003d6e:	2302      	movs	r3, #2
 8003d70:	e31e      	b.n	80043b0 <HAL_ADC_ConfigChannel+0x660>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7ff fd92 	bl	80038a8 <LL_ADC_REG_IsConversionOngoing>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f040 8303 	bne.w	8004392 <HAL_ADC_ConfigChannel+0x642>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6818      	ldr	r0, [r3, #0]
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	6859      	ldr	r1, [r3, #4]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	461a      	mov	r2, r3
 8003d9a:	f7ff fc59 	bl	8003650 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7ff fd80 	bl	80038a8 <LL_ADC_REG_IsConversionOngoing>
 8003da8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7ff fd8c 	bl	80038ce <LL_ADC_INJ_IsConversionOngoing>
 8003db6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003dba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f040 8148 	bne.w	8004054 <HAL_ADC_ConfigChannel+0x304>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003dc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f040 8143 	bne.w	8004054 <HAL_ADC_ConfigChannel+0x304>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6818      	ldr	r0, [r3, #0]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	6819      	ldr	r1, [r3, #0]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	f7ff fc64 	bl	80036a8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	695a      	ldr	r2, [r3, #20]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	08db      	lsrs	r3, r3, #3
 8003dec:	f003 0303 	and.w	r3, r3, #3
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	fa02 f303 	lsl.w	r3, r2, r3
 8003df6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	d00a      	beq.n	8003e18 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6818      	ldr	r0, [r3, #0]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	6919      	ldr	r1, [r3, #16]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e12:	f7ff fbb5 	bl	8003580 <LL_ADC_SetOffset>
 8003e16:	e11d      	b.n	8004054 <HAL_ADC_ConfigChannel+0x304>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7ff fbd2 	bl	80035c8 <LL_ADC_GetOffsetChannel>
 8003e24:	4603      	mov	r3, r0
 8003e26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10a      	bne.n	8003e44 <HAL_ADC_ConfigChannel+0xf4>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2100      	movs	r1, #0
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff fbc7 	bl	80035c8 <LL_ADC_GetOffsetChannel>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	0e9b      	lsrs	r3, r3, #26
 8003e3e:	f003 021f 	and.w	r2, r3, #31
 8003e42:	e012      	b.n	8003e6a <HAL_ADC_ConfigChannel+0x11a>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2100      	movs	r1, #0
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7ff fbbc 	bl	80035c8 <LL_ADC_GetOffsetChannel>
 8003e50:	4603      	mov	r3, r0
 8003e52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e5a:	fa93 f3a3 	rbit	r3, r3
 8003e5e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003e60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e62:	fab3 f383 	clz	r3, r3
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	461a      	mov	r2, r3
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d105      	bne.n	8003e82 <HAL_ADC_ConfigChannel+0x132>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	0e9b      	lsrs	r3, r3, #26
 8003e7c:	f003 031f 	and.w	r3, r3, #31
 8003e80:	e00a      	b.n	8003e98 <HAL_ADC_ConfigChannel+0x148>
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e8a:	fa93 f3a3 	rbit	r3, r3
 8003e8e:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8003e90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e92:	fab3 f383 	clz	r3, r3
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d106      	bne.n	8003eaa <HAL_ADC_ConfigChannel+0x15a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7ff fba5 	bl	80035f4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2101      	movs	r1, #1
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff fb89 	bl	80035c8 <LL_ADC_GetOffsetChannel>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10a      	bne.n	8003ed6 <HAL_ADC_ConfigChannel+0x186>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2101      	movs	r1, #1
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff fb7e 	bl	80035c8 <LL_ADC_GetOffsetChannel>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	0e9b      	lsrs	r3, r3, #26
 8003ed0:	f003 021f 	and.w	r2, r3, #31
 8003ed4:	e010      	b.n	8003ef8 <HAL_ADC_ConfigChannel+0x1a8>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2101      	movs	r1, #1
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7ff fb73 	bl	80035c8 <LL_ADC_GetOffsetChannel>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ee8:	fa93 f3a3 	rbit	r3, r3
 8003eec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef0:	fab3 f383 	clz	r3, r3
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d105      	bne.n	8003f10 <HAL_ADC_ConfigChannel+0x1c0>
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	0e9b      	lsrs	r3, r3, #26
 8003f0a:	f003 031f 	and.w	r3, r3, #31
 8003f0e:	e00a      	b.n	8003f26 <HAL_ADC_ConfigChannel+0x1d6>
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f18:	fa93 f3a3 	rbit	r3, r3
 8003f1c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003f1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f20:	fab3 f383 	clz	r3, r3
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d106      	bne.n	8003f38 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	2101      	movs	r1, #1
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7ff fb5e 	bl	80035f4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2102      	movs	r1, #2
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff fb42 	bl	80035c8 <LL_ADC_GetOffsetChannel>
 8003f44:	4603      	mov	r3, r0
 8003f46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10a      	bne.n	8003f64 <HAL_ADC_ConfigChannel+0x214>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2102      	movs	r1, #2
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7ff fb37 	bl	80035c8 <LL_ADC_GetOffsetChannel>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	0e9b      	lsrs	r3, r3, #26
 8003f5e:	f003 021f 	and.w	r2, r3, #31
 8003f62:	e010      	b.n	8003f86 <HAL_ADC_ConfigChannel+0x236>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2102      	movs	r1, #2
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7ff fb2c 	bl	80035c8 <LL_ADC_GetOffsetChannel>
 8003f70:	4603      	mov	r3, r0
 8003f72:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f76:	fa93 f3a3 	rbit	r3, r3
 8003f7a:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8003f7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f7e:	fab3 f383 	clz	r3, r3
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	461a      	mov	r2, r3
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d105      	bne.n	8003f9e <HAL_ADC_ConfigChannel+0x24e>
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	0e9b      	lsrs	r3, r3, #26
 8003f98:	f003 031f 	and.w	r3, r3, #31
 8003f9c:	e00a      	b.n	8003fb4 <HAL_ADC_ConfigChannel+0x264>
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fa6:	fa93 f3a3 	rbit	r3, r3
 8003faa:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003fac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fae:	fab3 f383 	clz	r3, r3
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d106      	bne.n	8003fc6 <HAL_ADC_ConfigChannel+0x276>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	2102      	movs	r1, #2
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7ff fb17 	bl	80035f4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2103      	movs	r1, #3
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7ff fafb 	bl	80035c8 <LL_ADC_GetOffsetChannel>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10a      	bne.n	8003ff2 <HAL_ADC_ConfigChannel+0x2a2>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2103      	movs	r1, #3
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff faf0 	bl	80035c8 <LL_ADC_GetOffsetChannel>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	0e9b      	lsrs	r3, r3, #26
 8003fec:	f003 021f 	and.w	r2, r3, #31
 8003ff0:	e010      	b.n	8004014 <HAL_ADC_ConfigChannel+0x2c4>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2103      	movs	r1, #3
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7ff fae5 	bl	80035c8 <LL_ADC_GetOffsetChannel>
 8003ffe:	4603      	mov	r3, r0
 8004000:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004004:	fa93 f3a3 	rbit	r3, r3
 8004008:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800400a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800400c:	fab3 f383 	clz	r3, r3
 8004010:	b2db      	uxtb	r3, r3
 8004012:	461a      	mov	r2, r3
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800401c:	2b00      	cmp	r3, #0
 800401e:	d105      	bne.n	800402c <HAL_ADC_ConfigChannel+0x2dc>
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	0e9b      	lsrs	r3, r3, #26
 8004026:	f003 031f 	and.w	r3, r3, #31
 800402a:	e00a      	b.n	8004042 <HAL_ADC_ConfigChannel+0x2f2>
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004034:	fa93 f3a3 	rbit	r3, r3
 8004038:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 800403a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800403c:	fab3 f383 	clz	r3, r3
 8004040:	b2db      	uxtb	r3, r3
 8004042:	429a      	cmp	r2, r3
 8004044:	d106      	bne.n	8004054 <HAL_ADC_ConfigChannel+0x304>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2200      	movs	r2, #0
 800404c:	2103      	movs	r1, #3
 800404e:	4618      	mov	r0, r3
 8004050:	f7ff fad0 	bl	80035f4 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff fbeb 	bl	8003834 <LL_ADC_IsEnabled>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	f040 819f 	bne.w	80043a4 <HAL_ADC_ConfigChannel+0x654>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6818      	ldr	r0, [r3, #0]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	6819      	ldr	r1, [r3, #0]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	461a      	mov	r2, r3
 8004074:	f7ff fb44 	bl	8003700 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	4aab      	ldr	r2, [pc, #684]	; (800432c <HAL_ADC_ConfigChannel+0x5dc>)
 800407e:	4293      	cmp	r3, r2
 8004080:	f040 80fd 	bne.w	800427e <HAL_ADC_ConfigChannel+0x52e>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10b      	bne.n	80040ac <HAL_ADC_ConfigChannel+0x35c>
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	0e9b      	lsrs	r3, r3, #26
 800409a:	3301      	adds	r3, #1
 800409c:	f003 031f 	and.w	r3, r3, #31
 80040a0:	2b09      	cmp	r3, #9
 80040a2:	bf94      	ite	ls
 80040a4:	2301      	movls	r3, #1
 80040a6:	2300      	movhi	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	e012      	b.n	80040d2 <HAL_ADC_ConfigChannel+0x382>
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040b4:	fa93 f3a3 	rbit	r3, r3
 80040b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80040ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040bc:	fab3 f383 	clz	r3, r3
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	3301      	adds	r3, #1
 80040c4:	f003 031f 	and.w	r3, r3, #31
 80040c8:	2b09      	cmp	r3, #9
 80040ca:	bf94      	ite	ls
 80040cc:	2301      	movls	r3, #1
 80040ce:	2300      	movhi	r3, #0
 80040d0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d064      	beq.n	80041a0 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d107      	bne.n	80040f2 <HAL_ADC_ConfigChannel+0x3a2>
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	0e9b      	lsrs	r3, r3, #26
 80040e8:	3301      	adds	r3, #1
 80040ea:	069b      	lsls	r3, r3, #26
 80040ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040f0:	e00e      	b.n	8004110 <HAL_ADC_ConfigChannel+0x3c0>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040fa:	fa93 f3a3 	rbit	r3, r3
 80040fe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004102:	fab3 f383 	clz	r3, r3
 8004106:	b2db      	uxtb	r3, r3
 8004108:	3301      	adds	r3, #1
 800410a:	069b      	lsls	r3, r3, #26
 800410c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004118:	2b00      	cmp	r3, #0
 800411a:	d109      	bne.n	8004130 <HAL_ADC_ConfigChannel+0x3e0>
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	0e9b      	lsrs	r3, r3, #26
 8004122:	3301      	adds	r3, #1
 8004124:	f003 031f 	and.w	r3, r3, #31
 8004128:	2101      	movs	r1, #1
 800412a:	fa01 f303 	lsl.w	r3, r1, r3
 800412e:	e010      	b.n	8004152 <HAL_ADC_ConfigChannel+0x402>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004138:	fa93 f3a3 	rbit	r3, r3
 800413c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800413e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004140:	fab3 f383 	clz	r3, r3
 8004144:	b2db      	uxtb	r3, r3
 8004146:	3301      	adds	r3, #1
 8004148:	f003 031f 	and.w	r3, r3, #31
 800414c:	2101      	movs	r1, #1
 800414e:	fa01 f303 	lsl.w	r3, r1, r3
 8004152:	ea42 0103 	orr.w	r1, r2, r3
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10a      	bne.n	8004178 <HAL_ADC_ConfigChannel+0x428>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	0e9b      	lsrs	r3, r3, #26
 8004168:	3301      	adds	r3, #1
 800416a:	f003 021f 	and.w	r2, r3, #31
 800416e:	4613      	mov	r3, r2
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	4413      	add	r3, r2
 8004174:	051b      	lsls	r3, r3, #20
 8004176:	e011      	b.n	800419c <HAL_ADC_ConfigChannel+0x44c>
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004180:	fa93 f3a3 	rbit	r3, r3
 8004184:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	fab3 f383 	clz	r3, r3
 800418c:	b2db      	uxtb	r3, r3
 800418e:	3301      	adds	r3, #1
 8004190:	f003 021f 	and.w	r2, r3, #31
 8004194:	4613      	mov	r3, r2
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	4413      	add	r3, r2
 800419a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800419c:	430b      	orrs	r3, r1
 800419e:	e069      	b.n	8004274 <HAL_ADC_ConfigChannel+0x524>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d107      	bne.n	80041bc <HAL_ADC_ConfigChannel+0x46c>
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	0e9b      	lsrs	r3, r3, #26
 80041b2:	3301      	adds	r3, #1
 80041b4:	069b      	lsls	r3, r3, #26
 80041b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041ba:	e00e      	b.n	80041da <HAL_ADC_ConfigChannel+0x48a>
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c2:	6a3b      	ldr	r3, [r7, #32]
 80041c4:	fa93 f3a3 	rbit	r3, r3
 80041c8:	61fb      	str	r3, [r7, #28]
  return result;
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	fab3 f383 	clz	r3, r3
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	3301      	adds	r3, #1
 80041d4:	069b      	lsls	r3, r3, #26
 80041d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d109      	bne.n	80041fa <HAL_ADC_ConfigChannel+0x4aa>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	0e9b      	lsrs	r3, r3, #26
 80041ec:	3301      	adds	r3, #1
 80041ee:	f003 031f 	and.w	r3, r3, #31
 80041f2:	2101      	movs	r1, #1
 80041f4:	fa01 f303 	lsl.w	r3, r1, r3
 80041f8:	e010      	b.n	800421c <HAL_ADC_ConfigChannel+0x4cc>
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	fa93 f3a3 	rbit	r3, r3
 8004206:	617b      	str	r3, [r7, #20]
  return result;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	fab3 f383 	clz	r3, r3
 800420e:	b2db      	uxtb	r3, r3
 8004210:	3301      	adds	r3, #1
 8004212:	f003 031f 	and.w	r3, r3, #31
 8004216:	2101      	movs	r1, #1
 8004218:	fa01 f303 	lsl.w	r3, r1, r3
 800421c:	ea42 0103 	orr.w	r1, r2, r3
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10d      	bne.n	8004248 <HAL_ADC_ConfigChannel+0x4f8>
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	0e9b      	lsrs	r3, r3, #26
 8004232:	3301      	adds	r3, #1
 8004234:	f003 021f 	and.w	r2, r3, #31
 8004238:	4613      	mov	r3, r2
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	4413      	add	r3, r2
 800423e:	3b1e      	subs	r3, #30
 8004240:	051b      	lsls	r3, r3, #20
 8004242:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004246:	e014      	b.n	8004272 <HAL_ADC_ConfigChannel+0x522>
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	fa93 f3a3 	rbit	r3, r3
 8004254:	60fb      	str	r3, [r7, #12]
  return result;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	fab3 f383 	clz	r3, r3
 800425c:	b2db      	uxtb	r3, r3
 800425e:	3301      	adds	r3, #1
 8004260:	f003 021f 	and.w	r2, r3, #31
 8004264:	4613      	mov	r3, r2
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	4413      	add	r3, r2
 800426a:	3b1e      	subs	r3, #30
 800426c:	051b      	lsls	r3, r3, #20
 800426e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004272:	430b      	orrs	r3, r1
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	6892      	ldr	r2, [r2, #8]
 8004278:	4619      	mov	r1, r3
 800427a:	f7ff fa15 	bl	80036a8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	4b2b      	ldr	r3, [pc, #172]	; (8004330 <HAL_ADC_ConfigChannel+0x5e0>)
 8004284:	4013      	ands	r3, r2
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 808c 	beq.w	80043a4 <HAL_ADC_ConfigChannel+0x654>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800428c:	4829      	ldr	r0, [pc, #164]	; (8004334 <HAL_ADC_ConfigChannel+0x5e4>)
 800428e:	f7ff f969 	bl	8003564 <LL_ADC_GetCommonPathInternalCh>
 8004292:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004296:	4828      	ldr	r0, [pc, #160]	; (8004338 <HAL_ADC_ConfigChannel+0x5e8>)
 8004298:	f7ff facc 	bl	8003834 <LL_ADC_IsEnabled>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d16d      	bne.n	800437e <HAL_ADC_ConfigChannel+0x62e>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a25      	ldr	r2, [pc, #148]	; (800433c <HAL_ADC_ConfigChannel+0x5ec>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d126      	bne.n	80042fa <HAL_ADC_ConfigChannel+0x5aa>
 80042ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d120      	bne.n	80042fa <HAL_ADC_ConfigChannel+0x5aa>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a1e      	ldr	r2, [pc, #120]	; (8004338 <HAL_ADC_ConfigChannel+0x5e8>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d170      	bne.n	80043a4 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80042c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80042ca:	4619      	mov	r1, r3
 80042cc:	4819      	ldr	r0, [pc, #100]	; (8004334 <HAL_ADC_ConfigChannel+0x5e4>)
 80042ce:	f7ff f936 	bl	800353e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80042d2:	4b1b      	ldr	r3, [pc, #108]	; (8004340 <HAL_ADC_ConfigChannel+0x5f0>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	099b      	lsrs	r3, r3, #6
 80042d8:	4a1a      	ldr	r2, [pc, #104]	; (8004344 <HAL_ADC_ConfigChannel+0x5f4>)
 80042da:	fba2 2303 	umull	r2, r3, r2, r3
 80042de:	099a      	lsrs	r2, r3, #6
 80042e0:	4613      	mov	r3, r2
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	4413      	add	r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 80042ea:	e002      	b.n	80042f2 <HAL_ADC_ConfigChannel+0x5a2>
              {
                wait_loop_index--;
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	3b01      	subs	r3, #1
 80042f0:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1f9      	bne.n	80042ec <HAL_ADC_ConfigChannel+0x59c>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042f8:	e054      	b.n	80043a4 <HAL_ADC_ConfigChannel+0x654>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a12      	ldr	r2, [pc, #72]	; (8004348 <HAL_ADC_ConfigChannel+0x5f8>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d123      	bne.n	800434c <HAL_ADC_ConfigChannel+0x5fc>
 8004304:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004308:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d11d      	bne.n	800434c <HAL_ADC_ConfigChannel+0x5fc>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a08      	ldr	r2, [pc, #32]	; (8004338 <HAL_ADC_ConfigChannel+0x5e8>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d144      	bne.n	80043a4 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800431a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800431e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004322:	4619      	mov	r1, r3
 8004324:	4803      	ldr	r0, [pc, #12]	; (8004334 <HAL_ADC_ConfigChannel+0x5e4>)
 8004326:	f7ff f90a 	bl	800353e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800432a:	e03b      	b.n	80043a4 <HAL_ADC_ConfigChannel+0x654>
 800432c:	407f0000 	.word	0x407f0000
 8004330:	80080000 	.word	0x80080000
 8004334:	50040300 	.word	0x50040300
 8004338:	50040000 	.word	0x50040000
 800433c:	c7520000 	.word	0xc7520000
 8004340:	20000038 	.word	0x20000038
 8004344:	053e2d63 	.word	0x053e2d63
 8004348:	cb840000 	.word	0xcb840000
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a19      	ldr	r2, [pc, #100]	; (80043b8 <HAL_ADC_ConfigChannel+0x668>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d126      	bne.n	80043a4 <HAL_ADC_ConfigChannel+0x654>
 8004356:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800435a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d120      	bne.n	80043a4 <HAL_ADC_ConfigChannel+0x654>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a15      	ldr	r2, [pc, #84]	; (80043bc <HAL_ADC_ConfigChannel+0x66c>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d11b      	bne.n	80043a4 <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800436c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004370:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004374:	4619      	mov	r1, r3
 8004376:	4812      	ldr	r0, [pc, #72]	; (80043c0 <HAL_ADC_ConfigChannel+0x670>)
 8004378:	f7ff f8e1 	bl	800353e <LL_ADC_SetCommonPathInternalCh>
 800437c:	e012      	b.n	80043a4 <HAL_ADC_ConfigChannel+0x654>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004382:	f043 0220 	orr.w	r2, r3, #32
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8004390:	e008      	b.n	80043a4 <HAL_ADC_ConfigChannel+0x654>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004396:	f043 0220 	orr.w	r2, r3, #32
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80043ac:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3798      	adds	r7, #152	; 0x98
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	80000001 	.word	0x80000001
 80043bc:	50040000 	.word	0x50040000
 80043c0:	50040300 	.word	0x50040300

080043c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7ff fa2f 	bl	8003834 <LL_ADC_IsEnabled>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d146      	bne.n	800446a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689a      	ldr	r2, [r3, #8]
 80043e2:	4b24      	ldr	r3, [pc, #144]	; (8004474 <ADC_Enable+0xb0>)
 80043e4:	4013      	ands	r3, r2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00d      	beq.n	8004406 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ee:	f043 0210 	orr.w	r2, r3, #16
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fa:	f043 0201 	orr.w	r2, r3, #1
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e032      	b.n	800446c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff f9ea 	bl	80037e4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004410:	f7ff f848 	bl	80034a4 <HAL_GetTick>
 8004414:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004416:	e021      	b.n	800445c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff fa09 	bl	8003834 <LL_ADC_IsEnabled>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d104      	bne.n	8004432 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4618      	mov	r0, r3
 800442e:	f7ff f9d9 	bl	80037e4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004432:	f7ff f837 	bl	80034a4 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d90d      	bls.n	800445c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004444:	f043 0210 	orr.w	r2, r3, #16
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004450:	f043 0201 	orr.w	r2, r3, #1
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e007      	b.n	800446c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b01      	cmp	r3, #1
 8004468:	d1d6      	bne.n	8004418 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	8000003f 	.word	0x8000003f

08004478 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff f9e8 	bl	800385a <LL_ADC_IsDisableOngoing>
 800448a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4618      	mov	r0, r3
 8004492:	f7ff f9cf 	bl	8003834 <LL_ADC_IsEnabled>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d040      	beq.n	800451e <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d13d      	bne.n	800451e <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f003 030d 	and.w	r3, r3, #13
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d10c      	bne.n	80044ca <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7ff f9a9 	bl	800380c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2203      	movs	r2, #3
 80044c0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80044c2:	f7fe ffef 	bl	80034a4 <HAL_GetTick>
 80044c6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80044c8:	e022      	b.n	8004510 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ce:	f043 0210 	orr.w	r2, r3, #16
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044da:	f043 0201 	orr.w	r2, r3, #1
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e01c      	b.n	8004520 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80044e6:	f7fe ffdd 	bl	80034a4 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d90d      	bls.n	8004510 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f8:	f043 0210 	orr.w	r2, r3, #16
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004504:	f043 0201 	orr.w	r2, r3, #1
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e007      	b.n	8004520 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1e3      	bne.n	80044e6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <LL_ADC_StartCalibration>:
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800453a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004544:	4313      	orrs	r3, r2
 8004546:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	609a      	str	r2, [r3, #8]
}
 800454e:	bf00      	nop
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <LL_ADC_IsCalibrationOnGoing>:
{
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800456a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800456e:	d101      	bne.n	8004574 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004570:	2301      	movs	r3, #1
 8004572:	e000      	b.n	8004576 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
	...

08004584 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800458e:	2300      	movs	r3, #0
 8004590:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004598:	2b01      	cmp	r3, #1
 800459a:	d101      	bne.n	80045a0 <HAL_ADCEx_Calibration_Start+0x1c>
 800459c:	2302      	movs	r3, #2
 800459e:	e04d      	b.n	800463c <HAL_ADCEx_Calibration_Start+0xb8>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f7ff ff65 	bl	8004478 <ADC_Disable>
 80045ae:	4603      	mov	r3, r0
 80045b0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d136      	bne.n	8004626 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80045c0:	f023 0302 	bic.w	r3, r3, #2
 80045c4:	f043 0202 	orr.w	r2, r3, #2
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6839      	ldr	r1, [r7, #0]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7ff ffa8 	bl	8004528 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80045d8:	e014      	b.n	8004604 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	3301      	adds	r3, #1
 80045de:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	4a18      	ldr	r2, [pc, #96]	; (8004644 <HAL_ADCEx_Calibration_Start+0xc0>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d90d      	bls.n	8004604 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ec:	f023 0312 	bic.w	r3, r3, #18
 80045f0:	f043 0210 	orr.w	r2, r3, #16
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e01b      	b.n	800463c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4618      	mov	r0, r3
 800460a:	f7ff ffa6 	bl	800455a <LL_ADC_IsCalibrationOnGoing>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1e2      	bne.n	80045da <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004618:	f023 0303 	bic.w	r3, r3, #3
 800461c:	f043 0201 	orr.w	r2, r3, #1
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	655a      	str	r2, [r3, #84]	; 0x54
 8004624:	e005      	b.n	8004632 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462a:	f043 0210 	orr.w	r2, r3, #16
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800463a:	7bfb      	ldrb	r3, [r7, #15]
}
 800463c:	4618      	mov	r0, r3
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	00026aaa 	.word	0x00026aaa

08004648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f003 0307 	and.w	r3, r3, #7
 8004656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004658:	4b0c      	ldr	r3, [pc, #48]	; (800468c <__NVIC_SetPriorityGrouping+0x44>)
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004664:	4013      	ands	r3, r2
 8004666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004670:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800467a:	4a04      	ldr	r2, [pc, #16]	; (800468c <__NVIC_SetPriorityGrouping+0x44>)
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	60d3      	str	r3, [r2, #12]
}
 8004680:	bf00      	nop
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	e000ed00 	.word	0xe000ed00

08004690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004690:	b480      	push	{r7}
 8004692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004694:	4b04      	ldr	r3, [pc, #16]	; (80046a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	0a1b      	lsrs	r3, r3, #8
 800469a:	f003 0307 	and.w	r3, r3, #7
}
 800469e:	4618      	mov	r0, r3
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr
 80046a8:	e000ed00 	.word	0xe000ed00

080046ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	4603      	mov	r3, r0
 80046b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	db0b      	blt.n	80046d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046be:	79fb      	ldrb	r3, [r7, #7]
 80046c0:	f003 021f 	and.w	r2, r3, #31
 80046c4:	4907      	ldr	r1, [pc, #28]	; (80046e4 <__NVIC_EnableIRQ+0x38>)
 80046c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ca:	095b      	lsrs	r3, r3, #5
 80046cc:	2001      	movs	r0, #1
 80046ce:	fa00 f202 	lsl.w	r2, r0, r2
 80046d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	e000e100 	.word	0xe000e100

080046e8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	4603      	mov	r3, r0
 80046f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	db10      	blt.n	800471c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046fa:	79fb      	ldrb	r3, [r7, #7]
 80046fc:	f003 021f 	and.w	r2, r3, #31
 8004700:	4909      	ldr	r1, [pc, #36]	; (8004728 <__NVIC_DisableIRQ+0x40>)
 8004702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004706:	095b      	lsrs	r3, r3, #5
 8004708:	2001      	movs	r0, #1
 800470a:	fa00 f202 	lsl.w	r2, r0, r2
 800470e:	3320      	adds	r3, #32
 8004710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004714:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004718:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	e000e100 	.word	0xe000e100

0800472c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	4603      	mov	r3, r0
 8004734:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800473a:	2b00      	cmp	r3, #0
 800473c:	db0c      	blt.n	8004758 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800473e:	79fb      	ldrb	r3, [r7, #7]
 8004740:	f003 021f 	and.w	r2, r3, #31
 8004744:	4907      	ldr	r1, [pc, #28]	; (8004764 <__NVIC_SetPendingIRQ+0x38>)
 8004746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800474a:	095b      	lsrs	r3, r3, #5
 800474c:	2001      	movs	r0, #1
 800474e:	fa00 f202 	lsl.w	r2, r0, r2
 8004752:	3340      	adds	r3, #64	; 0x40
 8004754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr
 8004764:	e000e100 	.word	0xe000e100

08004768 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	4603      	mov	r3, r0
 8004770:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004776:	2b00      	cmp	r3, #0
 8004778:	db0c      	blt.n	8004794 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800477a:	79fb      	ldrb	r3, [r7, #7]
 800477c:	f003 021f 	and.w	r2, r3, #31
 8004780:	4907      	ldr	r1, [pc, #28]	; (80047a0 <__NVIC_ClearPendingIRQ+0x38>)
 8004782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004786:	095b      	lsrs	r3, r3, #5
 8004788:	2001      	movs	r0, #1
 800478a:	fa00 f202 	lsl.w	r2, r0, r2
 800478e:	3360      	adds	r3, #96	; 0x60
 8004790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	e000e100 	.word	0xe000e100

080047a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	4603      	mov	r3, r0
 80047ac:	6039      	str	r1, [r7, #0]
 80047ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	db0a      	blt.n	80047ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	b2da      	uxtb	r2, r3
 80047bc:	490c      	ldr	r1, [pc, #48]	; (80047f0 <__NVIC_SetPriority+0x4c>)
 80047be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047c2:	0112      	lsls	r2, r2, #4
 80047c4:	b2d2      	uxtb	r2, r2
 80047c6:	440b      	add	r3, r1
 80047c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047cc:	e00a      	b.n	80047e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	4908      	ldr	r1, [pc, #32]	; (80047f4 <__NVIC_SetPriority+0x50>)
 80047d4:	79fb      	ldrb	r3, [r7, #7]
 80047d6:	f003 030f 	and.w	r3, r3, #15
 80047da:	3b04      	subs	r3, #4
 80047dc:	0112      	lsls	r2, r2, #4
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	440b      	add	r3, r1
 80047e2:	761a      	strb	r2, [r3, #24]
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	e000e100 	.word	0xe000e100
 80047f4:	e000ed00 	.word	0xe000ed00

080047f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b089      	sub	sp, #36	; 0x24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f003 0307 	and.w	r3, r3, #7
 800480a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	f1c3 0307 	rsb	r3, r3, #7
 8004812:	2b04      	cmp	r3, #4
 8004814:	bf28      	it	cs
 8004816:	2304      	movcs	r3, #4
 8004818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	3304      	adds	r3, #4
 800481e:	2b06      	cmp	r3, #6
 8004820:	d902      	bls.n	8004828 <NVIC_EncodePriority+0x30>
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	3b03      	subs	r3, #3
 8004826:	e000      	b.n	800482a <NVIC_EncodePriority+0x32>
 8004828:	2300      	movs	r3, #0
 800482a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800482c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	fa02 f303 	lsl.w	r3, r2, r3
 8004836:	43da      	mvns	r2, r3
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	401a      	ands	r2, r3
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004840:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	fa01 f303 	lsl.w	r3, r1, r3
 800484a:	43d9      	mvns	r1, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004850:	4313      	orrs	r3, r2
         );
}
 8004852:	4618      	mov	r0, r3
 8004854:	3724      	adds	r7, #36	; 0x24
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
	...

08004860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	3b01      	subs	r3, #1
 800486c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004870:	d301      	bcc.n	8004876 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004872:	2301      	movs	r3, #1
 8004874:	e00f      	b.n	8004896 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004876:	4a0a      	ldr	r2, [pc, #40]	; (80048a0 <SysTick_Config+0x40>)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	3b01      	subs	r3, #1
 800487c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800487e:	210f      	movs	r1, #15
 8004880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004884:	f7ff ff8e 	bl	80047a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004888:	4b05      	ldr	r3, [pc, #20]	; (80048a0 <SysTick_Config+0x40>)
 800488a:	2200      	movs	r2, #0
 800488c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800488e:	4b04      	ldr	r3, [pc, #16]	; (80048a0 <SysTick_Config+0x40>)
 8004890:	2207      	movs	r2, #7
 8004892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	e000e010 	.word	0xe000e010

080048a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f7ff fecb 	bl	8004648 <__NVIC_SetPriorityGrouping>
}
 80048b2:	bf00      	nop
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b086      	sub	sp, #24
 80048be:	af00      	add	r7, sp, #0
 80048c0:	4603      	mov	r3, r0
 80048c2:	60b9      	str	r1, [r7, #8]
 80048c4:	607a      	str	r2, [r7, #4]
 80048c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80048c8:	f7ff fee2 	bl	8004690 <__NVIC_GetPriorityGrouping>
 80048cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	68b9      	ldr	r1, [r7, #8]
 80048d2:	6978      	ldr	r0, [r7, #20]
 80048d4:	f7ff ff90 	bl	80047f8 <NVIC_EncodePriority>
 80048d8:	4602      	mov	r2, r0
 80048da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048de:	4611      	mov	r1, r2
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7ff ff5f 	bl	80047a4 <__NVIC_SetPriority>
}
 80048e6:	bf00      	nop
 80048e8:	3718      	adds	r7, #24
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b082      	sub	sp, #8
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	4603      	mov	r3, r0
 80048f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7ff fed5 	bl	80046ac <__NVIC_EnableIRQ>
}
 8004902:	bf00      	nop
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b082      	sub	sp, #8
 800490e:	af00      	add	r7, sp, #0
 8004910:	4603      	mov	r3, r0
 8004912:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004918:	4618      	mov	r0, r3
 800491a:	f7ff fee5 	bl	80046e8 <__NVIC_DisableIRQ>
}
 800491e:	bf00      	nop
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b082      	sub	sp, #8
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f7ff ff96 	bl	8004860 <SysTick_Config>
 8004934:	4603      	mov	r3, r0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b082      	sub	sp, #8
 8004942:	af00      	add	r7, sp, #0
 8004944:	4603      	mov	r3, r0
 8004946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8004948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800494c:	4618      	mov	r0, r3
 800494e:	f7ff feed 	bl	800472c <__NVIC_SetPendingIRQ>
}
 8004952:	bf00      	nop
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b082      	sub	sp, #8
 800495e:	af00      	add	r7, sp, #0
 8004960:	4603      	mov	r3, r0
 8004962:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004968:	4618      	mov	r0, r3
 800496a:	f7ff fefd 	bl	8004768 <__NVIC_ClearPendingIRQ>
}
 800496e:	bf00      	nop
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
	...

08004978 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004978:	b480      	push	{r7}
 800497a:	b087      	sub	sp, #28
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004982:	2300      	movs	r3, #0
 8004984:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004986:	e14c      	b.n	8004c22 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	2101      	movs	r1, #1
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	fa01 f303 	lsl.w	r3, r1, r3
 8004994:	4013      	ands	r3, r2
 8004996:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 813e 	beq.w	8004c1c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d00b      	beq.n	80049c0 <HAL_GPIO_Init+0x48>
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d007      	beq.n	80049c0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80049b4:	2b11      	cmp	r3, #17
 80049b6:	d003      	beq.n	80049c0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	2b12      	cmp	r3, #18
 80049be:	d130      	bne.n	8004a22 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	005b      	lsls	r3, r3, #1
 80049ca:	2203      	movs	r2, #3
 80049cc:	fa02 f303 	lsl.w	r3, r2, r3
 80049d0:	43db      	mvns	r3, r3
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	4013      	ands	r3, r2
 80049d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	68da      	ldr	r2, [r3, #12]
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	fa02 f303 	lsl.w	r3, r2, r3
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80049f6:	2201      	movs	r2, #1
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	fa02 f303 	lsl.w	r3, r2, r3
 80049fe:	43db      	mvns	r3, r3
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	4013      	ands	r3, r2
 8004a04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	091b      	lsrs	r3, r3, #4
 8004a0c:	f003 0201 	and.w	r2, r3, #1
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	fa02 f303 	lsl.w	r3, r2, r3
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	005b      	lsls	r3, r3, #1
 8004a2c:	2203      	movs	r2, #3
 8004a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a32:	43db      	mvns	r3, r3
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	4013      	ands	r3, r2
 8004a38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	689a      	ldr	r2, [r3, #8]
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	005b      	lsls	r3, r3, #1
 8004a42:	fa02 f303 	lsl.w	r3, r2, r3
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d003      	beq.n	8004a62 <HAL_GPIO_Init+0xea>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	2b12      	cmp	r3, #18
 8004a60:	d123      	bne.n	8004aaa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	08da      	lsrs	r2, r3, #3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	3208      	adds	r2, #8
 8004a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	220f      	movs	r2, #15
 8004a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7e:	43db      	mvns	r3, r3
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	4013      	ands	r3, r2
 8004a84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	691a      	ldr	r2, [r3, #16]
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f003 0307 	and.w	r3, r3, #7
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	fa02 f303 	lsl.w	r3, r2, r3
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	08da      	lsrs	r2, r3, #3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	3208      	adds	r2, #8
 8004aa4:	6939      	ldr	r1, [r7, #16]
 8004aa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	005b      	lsls	r3, r3, #1
 8004ab4:	2203      	movs	r2, #3
 8004ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aba:	43db      	mvns	r3, r3
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	4013      	ands	r3, r2
 8004ac0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f003 0203 	and.w	r2, r3, #3
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f000 8098 	beq.w	8004c1c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004aec:	4a54      	ldr	r2, [pc, #336]	; (8004c40 <HAL_GPIO_Init+0x2c8>)
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	089b      	lsrs	r3, r3, #2
 8004af2:	3302      	adds	r3, #2
 8004af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004af8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	f003 0303 	and.w	r3, r3, #3
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	220f      	movs	r2, #15
 8004b04:	fa02 f303 	lsl.w	r3, r2, r3
 8004b08:	43db      	mvns	r3, r3
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004b16:	d019      	beq.n	8004b4c <HAL_GPIO_Init+0x1d4>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a4a      	ldr	r2, [pc, #296]	; (8004c44 <HAL_GPIO_Init+0x2cc>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d013      	beq.n	8004b48 <HAL_GPIO_Init+0x1d0>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a49      	ldr	r2, [pc, #292]	; (8004c48 <HAL_GPIO_Init+0x2d0>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d00d      	beq.n	8004b44 <HAL_GPIO_Init+0x1cc>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a48      	ldr	r2, [pc, #288]	; (8004c4c <HAL_GPIO_Init+0x2d4>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d007      	beq.n	8004b40 <HAL_GPIO_Init+0x1c8>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a47      	ldr	r2, [pc, #284]	; (8004c50 <HAL_GPIO_Init+0x2d8>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d101      	bne.n	8004b3c <HAL_GPIO_Init+0x1c4>
 8004b38:	2304      	movs	r3, #4
 8004b3a:	e008      	b.n	8004b4e <HAL_GPIO_Init+0x1d6>
 8004b3c:	2307      	movs	r3, #7
 8004b3e:	e006      	b.n	8004b4e <HAL_GPIO_Init+0x1d6>
 8004b40:	2303      	movs	r3, #3
 8004b42:	e004      	b.n	8004b4e <HAL_GPIO_Init+0x1d6>
 8004b44:	2302      	movs	r3, #2
 8004b46:	e002      	b.n	8004b4e <HAL_GPIO_Init+0x1d6>
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e000      	b.n	8004b4e <HAL_GPIO_Init+0x1d6>
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	f002 0203 	and.w	r2, r2, #3
 8004b54:	0092      	lsls	r2, r2, #2
 8004b56:	4093      	lsls	r3, r2
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004b5e:	4938      	ldr	r1, [pc, #224]	; (8004c40 <HAL_GPIO_Init+0x2c8>)
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	089b      	lsrs	r3, r3, #2
 8004b64:	3302      	adds	r3, #2
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004b6c:	4b39      	ldr	r3, [pc, #228]	; (8004c54 <HAL_GPIO_Init+0x2dc>)
 8004b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	43db      	mvns	r3, r3
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d003      	beq.n	8004b92 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004b92:	4a30      	ldr	r2, [pc, #192]	; (8004c54 <HAL_GPIO_Init+0x2dc>)
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004b9a:	4b2e      	ldr	r3, [pc, #184]	; (8004c54 <HAL_GPIO_Init+0x2dc>)
 8004b9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	43db      	mvns	r3, r3
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	4013      	ands	r3, r2
 8004baa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d003      	beq.n	8004bc0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004bc0:	4a24      	ldr	r2, [pc, #144]	; (8004c54 <HAL_GPIO_Init+0x2dc>)
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004bc8:	4b22      	ldr	r3, [pc, #136]	; (8004c54 <HAL_GPIO_Init+0x2dc>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	43db      	mvns	r3, r3
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d003      	beq.n	8004bec <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004bec:	4a19      	ldr	r2, [pc, #100]	; (8004c54 <HAL_GPIO_Init+0x2dc>)
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004bf2:	4b18      	ldr	r3, [pc, #96]	; (8004c54 <HAL_GPIO_Init+0x2dc>)
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	43db      	mvns	r3, r3
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	4013      	ands	r3, r2
 8004c00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c16:	4a0f      	ldr	r2, [pc, #60]	; (8004c54 <HAL_GPIO_Init+0x2dc>)
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	3301      	adds	r3, #1
 8004c20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	fa22 f303 	lsr.w	r3, r2, r3
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f47f aeab 	bne.w	8004988 <HAL_GPIO_Init+0x10>
  }
}
 8004c32:	bf00      	nop
 8004c34:	371c      	adds	r7, #28
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	40010000 	.word	0x40010000
 8004c44:	48000400 	.word	0x48000400
 8004c48:	48000800 	.word	0x48000800
 8004c4c:	48000c00 	.word	0x48000c00
 8004c50:	48001000 	.word	0x48001000
 8004c54:	58000800 	.word	0x58000800

08004c58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	460b      	mov	r3, r1
 8004c62:	807b      	strh	r3, [r7, #2]
 8004c64:	4613      	mov	r3, r2
 8004c66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c68:	787b      	ldrb	r3, [r7, #1]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c6e:	887a      	ldrh	r2, [r7, #2]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004c74:	e002      	b.n	8004c7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004c76:	887a      	ldrh	r2, [r7, #2]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	460b      	mov	r3, r1
 8004c92:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c9a:	887a      	ldrh	r2, [r7, #2]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	041a      	lsls	r2, r3, #16
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	43d9      	mvns	r1, r3
 8004ca6:	887b      	ldrh	r3, [r7, #2]
 8004ca8:	400b      	ands	r3, r1
 8004caa:	431a      	orrs	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	619a      	str	r2, [r3, #24]
}
 8004cb0:	bf00      	nop
 8004cb2:	3714      	adds	r7, #20
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004cc2:	4b0a      	ldr	r3, [pc, #40]	; (8004cec <HAL_HSEM_IRQHandler+0x30>)
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004cc8:	4b08      	ldr	r3, [pc, #32]	; (8004cec <HAL_HSEM_IRQHandler+0x30>)
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	43db      	mvns	r3, r3
 8004cd0:	4906      	ldr	r1, [pc, #24]	; (8004cec <HAL_HSEM_IRQHandler+0x30>)
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004cd6:	4a05      	ldr	r2, [pc, #20]	; (8004cec <HAL_HSEM_IRQHandler+0x30>)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f807 	bl	8004cf0 <HAL_HSEM_FreeCallback>
}
 8004ce2:	bf00      	nop
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	58001500 	.word	0x58001500

08004cf0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e081      	b.n	8004e1a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d106      	bne.n	8004d30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7fc ffaa 	bl	8001c84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2224      	movs	r2, #36	; 0x24
 8004d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 0201 	bic.w	r2, r2, #1
 8004d46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685a      	ldr	r2, [r3, #4]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d54:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	689a      	ldr	r2, [r3, #8]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d64:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d107      	bne.n	8004d7e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	689a      	ldr	r2, [r3, #8]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d7a:	609a      	str	r2, [r3, #8]
 8004d7c:	e006      	b.n	8004d8c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	689a      	ldr	r2, [r3, #8]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004d8a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d104      	bne.n	8004d9e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	6812      	ldr	r2, [r2, #0]
 8004da8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004dac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004db0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68da      	ldr	r2, [r3, #12]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004dc0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	691a      	ldr	r2, [r3, #16]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	ea42 0103 	orr.w	r1, r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	021a      	lsls	r2, r3, #8
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	69d9      	ldr	r1, [r3, #28]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a1a      	ldr	r2, [r3, #32]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f042 0201 	orr.w	r2, r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2220      	movs	r2, #32
 8004e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
	...

08004e24 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b088      	sub	sp, #32
 8004e28:	af02      	add	r7, sp, #8
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	607a      	str	r2, [r7, #4]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	460b      	mov	r3, r1
 8004e32:	817b      	strh	r3, [r7, #10]
 8004e34:	4613      	mov	r3, r2
 8004e36:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b20      	cmp	r3, #32
 8004e42:	f040 80da 	bne.w	8004ffa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d101      	bne.n	8004e54 <HAL_I2C_Master_Transmit+0x30>
 8004e50:	2302      	movs	r3, #2
 8004e52:	e0d3      	b.n	8004ffc <HAL_I2C_Master_Transmit+0x1d8>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004e5c:	f7fe fb22 	bl	80034a4 <HAL_GetTick>
 8004e60:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	2319      	movs	r3, #25
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 f9e6 	bl	8005240 <I2C_WaitOnFlagUntilTimeout>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e0be      	b.n	8004ffc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2221      	movs	r2, #33	; 0x21
 8004e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2210      	movs	r2, #16
 8004e8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	893a      	ldrh	r2, [r7, #8]
 8004e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	2bff      	cmp	r3, #255	; 0xff
 8004eae:	d90e      	bls.n	8004ece <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	22ff      	movs	r2, #255	; 0xff
 8004eb4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eba:	b2da      	uxtb	r2, r3
 8004ebc:	8979      	ldrh	r1, [r7, #10]
 8004ebe:	4b51      	ldr	r3, [pc, #324]	; (8005004 <HAL_I2C_Master_Transmit+0x1e0>)
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f000 fb48 	bl	800555c <I2C_TransferConfig>
 8004ecc:	e06c      	b.n	8004fa8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004edc:	b2da      	uxtb	r2, r3
 8004ede:	8979      	ldrh	r1, [r7, #10]
 8004ee0:	4b48      	ldr	r3, [pc, #288]	; (8005004 <HAL_I2C_Master_Transmit+0x1e0>)
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 fb37 	bl	800555c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8004eee:	e05b      	b.n	8004fa8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	6a39      	ldr	r1, [r7, #32]
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f000 f9e3 	bl	80052c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e07b      	b.n	8004ffc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	781a      	ldrb	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	1c5a      	adds	r2, r3, #1
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	3b01      	subs	r3, #1
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d034      	beq.n	8004fa8 <HAL_I2C_Master_Transmit+0x184>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d130      	bne.n	8004fa8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	6a3b      	ldr	r3, [r7, #32]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	2180      	movs	r1, #128	; 0x80
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f000 f975 	bl	8005240 <I2C_WaitOnFlagUntilTimeout>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e04d      	b.n	8004ffc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	2bff      	cmp	r3, #255	; 0xff
 8004f68:	d90e      	bls.n	8004f88 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	22ff      	movs	r2, #255	; 0xff
 8004f6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f74:	b2da      	uxtb	r2, r3
 8004f76:	8979      	ldrh	r1, [r7, #10]
 8004f78:	2300      	movs	r3, #0
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 faeb 	bl	800555c <I2C_TransferConfig>
 8004f86:	e00f      	b.n	8004fa8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	8979      	ldrh	r1, [r7, #10]
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f000 fada 	bl	800555c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d19e      	bne.n	8004ef0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	6a39      	ldr	r1, [r7, #32]
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f000 f9c2 	bl	8005340 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e01a      	b.n	8004ffc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6859      	ldr	r1, [r3, #4]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	4b0b      	ldr	r3, [pc, #44]	; (8005008 <HAL_I2C_Master_Transmit+0x1e4>)
 8004fda:	400b      	ands	r3, r1
 8004fdc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	e000      	b.n	8004ffc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004ffa:	2302      	movs	r3, #2
  }
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	80002000 	.word	0x80002000
 8005008:	fe00e800 	.word	0xfe00e800

0800500c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b088      	sub	sp, #32
 8005010:	af02      	add	r7, sp, #8
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	607a      	str	r2, [r7, #4]
 8005016:	461a      	mov	r2, r3
 8005018:	460b      	mov	r3, r1
 800501a:	817b      	strh	r3, [r7, #10]
 800501c:	4613      	mov	r3, r2
 800501e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b20      	cmp	r3, #32
 800502a:	f040 80db 	bne.w	80051e4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005034:	2b01      	cmp	r3, #1
 8005036:	d101      	bne.n	800503c <HAL_I2C_Master_Receive+0x30>
 8005038:	2302      	movs	r3, #2
 800503a:	e0d4      	b.n	80051e6 <HAL_I2C_Master_Receive+0x1da>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005044:	f7fe fa2e 	bl	80034a4 <HAL_GetTick>
 8005048:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	2319      	movs	r3, #25
 8005050:	2201      	movs	r2, #1
 8005052:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f000 f8f2 	bl	8005240 <I2C_WaitOnFlagUntilTimeout>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d001      	beq.n	8005066 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e0bf      	b.n	80051e6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2222      	movs	r2, #34	; 0x22
 800506a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2210      	movs	r2, #16
 8005072:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	893a      	ldrh	r2, [r7, #8]
 8005086:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005092:	b29b      	uxth	r3, r3
 8005094:	2bff      	cmp	r3, #255	; 0xff
 8005096:	d90e      	bls.n	80050b6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	22ff      	movs	r2, #255	; 0xff
 800509c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	8979      	ldrh	r1, [r7, #10]
 80050a6:	4b52      	ldr	r3, [pc, #328]	; (80051f0 <HAL_I2C_Master_Receive+0x1e4>)
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f000 fa54 	bl	800555c <I2C_TransferConfig>
 80050b4:	e06d      	b.n	8005192 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c4:	b2da      	uxtb	r2, r3
 80050c6:	8979      	ldrh	r1, [r7, #10]
 80050c8:	4b49      	ldr	r3, [pc, #292]	; (80051f0 <HAL_I2C_Master_Receive+0x1e4>)
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 fa43 	bl	800555c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80050d6:	e05c      	b.n	8005192 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	6a39      	ldr	r1, [r7, #32]
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f000 f96b 	bl	80053b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d001      	beq.n	80050ec <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e07c      	b.n	80051e6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	1c5a      	adds	r2, r3, #1
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005108:	3b01      	subs	r3, #1
 800510a:	b29a      	uxth	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005114:	b29b      	uxth	r3, r3
 8005116:	3b01      	subs	r3, #1
 8005118:	b29a      	uxth	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005122:	b29b      	uxth	r3, r3
 8005124:	2b00      	cmp	r3, #0
 8005126:	d034      	beq.n	8005192 <HAL_I2C_Master_Receive+0x186>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800512c:	2b00      	cmp	r3, #0
 800512e:	d130      	bne.n	8005192 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	6a3b      	ldr	r3, [r7, #32]
 8005136:	2200      	movs	r2, #0
 8005138:	2180      	movs	r1, #128	; 0x80
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f000 f880 	bl	8005240 <I2C_WaitOnFlagUntilTimeout>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e04d      	b.n	80051e6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800514e:	b29b      	uxth	r3, r3
 8005150:	2bff      	cmp	r3, #255	; 0xff
 8005152:	d90e      	bls.n	8005172 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	22ff      	movs	r2, #255	; 0xff
 8005158:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800515e:	b2da      	uxtb	r2, r3
 8005160:	8979      	ldrh	r1, [r7, #10]
 8005162:	2300      	movs	r3, #0
 8005164:	9300      	str	r3, [sp, #0]
 8005166:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 f9f6 	bl	800555c <I2C_TransferConfig>
 8005170:	e00f      	b.n	8005192 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005176:	b29a      	uxth	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005180:	b2da      	uxtb	r2, r3
 8005182:	8979      	ldrh	r1, [r7, #10]
 8005184:	2300      	movs	r3, #0
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 f9e5 	bl	800555c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005196:	b29b      	uxth	r3, r3
 8005198:	2b00      	cmp	r3, #0
 800519a:	d19d      	bne.n	80050d8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	6a39      	ldr	r1, [r7, #32]
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f000 f8cd 	bl	8005340 <I2C_WaitOnSTOPFlagUntilTimeout>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d001      	beq.n	80051b0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e01a      	b.n	80051e6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2220      	movs	r2, #32
 80051b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6859      	ldr	r1, [r3, #4]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	4b0c      	ldr	r3, [pc, #48]	; (80051f4 <HAL_I2C_Master_Receive+0x1e8>)
 80051c4:	400b      	ands	r3, r1
 80051c6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2220      	movs	r2, #32
 80051cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051e0:	2300      	movs	r3, #0
 80051e2:	e000      	b.n	80051e6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80051e4:	2302      	movs	r3, #2
  }
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3718      	adds	r7, #24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	80002400 	.word	0x80002400
 80051f4:	fe00e800 	.word	0xfe00e800

080051f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b02      	cmp	r3, #2
 800520c:	d103      	bne.n	8005216 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2200      	movs	r2, #0
 8005214:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	2b01      	cmp	r3, #1
 8005222:	d007      	beq.n	8005234 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	699a      	ldr	r2, [r3, #24]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f042 0201 	orr.w	r2, r2, #1
 8005232:	619a      	str	r2, [r3, #24]
  }
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	603b      	str	r3, [r7, #0]
 800524c:	4613      	mov	r3, r2
 800524e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005250:	e022      	b.n	8005298 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005258:	d01e      	beq.n	8005298 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800525a:	f7fe f923 	bl	80034a4 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	683a      	ldr	r2, [r7, #0]
 8005266:	429a      	cmp	r2, r3
 8005268:	d302      	bcc.n	8005270 <I2C_WaitOnFlagUntilTimeout+0x30>
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d113      	bne.n	8005298 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005274:	f043 0220 	orr.w	r2, r3, #32
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2220      	movs	r2, #32
 8005280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e00f      	b.n	80052b8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	699a      	ldr	r2, [r3, #24]
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	4013      	ands	r3, r2
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	bf0c      	ite	eq
 80052a8:	2301      	moveq	r3, #1
 80052aa:	2300      	movne	r3, #0
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	461a      	mov	r2, r3
 80052b0:	79fb      	ldrb	r3, [r7, #7]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d0cd      	beq.n	8005252 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052cc:	e02c      	b.n	8005328 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	68b9      	ldr	r1, [r7, #8]
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f000 f8dc 	bl	8005490 <I2C_IsAcknowledgeFailed>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e02a      	b.n	8005338 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052e8:	d01e      	beq.n	8005328 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ea:	f7fe f8db 	bl	80034a4 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d302      	bcc.n	8005300 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d113      	bne.n	8005328 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005304:	f043 0220 	orr.w	r2, r3, #32
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2220      	movs	r2, #32
 8005310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e007      	b.n	8005338 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b02      	cmp	r3, #2
 8005334:	d1cb      	bne.n	80052ce <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800534c:	e028      	b.n	80053a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	68b9      	ldr	r1, [r7, #8]
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f000 f89c 	bl	8005490 <I2C_IsAcknowledgeFailed>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e026      	b.n	80053b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005362:	f7fe f89f 	bl	80034a4 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	429a      	cmp	r2, r3
 8005370:	d302      	bcc.n	8005378 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d113      	bne.n	80053a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800537c:	f043 0220 	orr.w	r2, r3, #32
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2220      	movs	r2, #32
 8005388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e007      	b.n	80053b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	f003 0320 	and.w	r3, r3, #32
 80053aa:	2b20      	cmp	r3, #32
 80053ac:	d1cf      	bne.n	800534e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053c4:	e055      	b.n	8005472 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	68b9      	ldr	r1, [r7, #8]
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f000 f860 	bl	8005490 <I2C_IsAcknowledgeFailed>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d001      	beq.n	80053da <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e053      	b.n	8005482 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	f003 0320 	and.w	r3, r3, #32
 80053e4:	2b20      	cmp	r3, #32
 80053e6:	d129      	bne.n	800543c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	f003 0304 	and.w	r3, r3, #4
 80053f2:	2b04      	cmp	r3, #4
 80053f4:	d105      	bne.n	8005402 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80053fe:	2300      	movs	r3, #0
 8005400:	e03f      	b.n	8005482 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2220      	movs	r2, #32
 8005408:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	6859      	ldr	r1, [r3, #4]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	4b1d      	ldr	r3, [pc, #116]	; (800548c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8005416:	400b      	ands	r3, r1
 8005418:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2220      	movs	r2, #32
 8005424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e022      	b.n	8005482 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800543c:	f7fe f832 	bl	80034a4 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	429a      	cmp	r2, r3
 800544a:	d302      	bcc.n	8005452 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10f      	bne.n	8005472 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005456:	f043 0220 	orr.w	r2, r3, #32
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2220      	movs	r2, #32
 8005462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e007      	b.n	8005482 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	f003 0304 	and.w	r3, r3, #4
 800547c:	2b04      	cmp	r3, #4
 800547e:	d1a2      	bne.n	80053c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	fe00e800 	.word	0xfe00e800

08005490 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	f003 0310 	and.w	r3, r3, #16
 80054a6:	2b10      	cmp	r3, #16
 80054a8:	d151      	bne.n	800554e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054aa:	e022      	b.n	80054f2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054b2:	d01e      	beq.n	80054f2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054b4:	f7fd fff6 	bl	80034a4 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d302      	bcc.n	80054ca <I2C_IsAcknowledgeFailed+0x3a>
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d113      	bne.n	80054f2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ce:	f043 0220 	orr.w	r2, r3, #32
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2220      	movs	r2, #32
 80054da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e02e      	b.n	8005550 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	f003 0320 	and.w	r3, r3, #32
 80054fc:	2b20      	cmp	r3, #32
 80054fe:	d1d5      	bne.n	80054ac <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2210      	movs	r2, #16
 8005506:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2220      	movs	r2, #32
 800550e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f7ff fe71 	bl	80051f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6859      	ldr	r1, [r3, #4]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	4b0d      	ldr	r3, [pc, #52]	; (8005558 <I2C_IsAcknowledgeFailed+0xc8>)
 8005522:	400b      	ands	r3, r1
 8005524:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800552a:	f043 0204 	orr.w	r2, r3, #4
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2220      	movs	r2, #32
 8005536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e000      	b.n	8005550 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	fe00e800 	.word	0xfe00e800

0800555c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	607b      	str	r3, [r7, #4]
 8005566:	460b      	mov	r3, r1
 8005568:	817b      	strh	r3, [r7, #10]
 800556a:	4613      	mov	r3, r2
 800556c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	0d5b      	lsrs	r3, r3, #21
 8005578:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800557c:	4b0d      	ldr	r3, [pc, #52]	; (80055b4 <I2C_TransferConfig+0x58>)
 800557e:	430b      	orrs	r3, r1
 8005580:	43db      	mvns	r3, r3
 8005582:	ea02 0103 	and.w	r1, r2, r3
 8005586:	897b      	ldrh	r3, [r7, #10]
 8005588:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800558c:	7a7b      	ldrb	r3, [r7, #9]
 800558e:	041b      	lsls	r3, r3, #16
 8005590:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005594:	431a      	orrs	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	431a      	orrs	r2, r3
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	431a      	orrs	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80055a6:	bf00      	nop
 80055a8:	3714      	adds	r7, #20
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	03ff63ff 	.word	0x03ff63ff

080055b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b20      	cmp	r3, #32
 80055cc:	d138      	bne.n	8005640 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d101      	bne.n	80055dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80055d8:	2302      	movs	r3, #2
 80055da:	e032      	b.n	8005642 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2224      	movs	r2, #36	; 0x24
 80055e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f022 0201 	bic.w	r2, r2, #1
 80055fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800560a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6819      	ldr	r1, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f042 0201 	orr.w	r2, r2, #1
 800562a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2220      	movs	r2, #32
 8005630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800563c:	2300      	movs	r3, #0
 800563e:	e000      	b.n	8005642 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005640:	2302      	movs	r3, #2
  }
}
 8005642:	4618      	mov	r0, r3
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800564e:	b480      	push	{r7}
 8005650:	b085      	sub	sp, #20
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
 8005656:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800565e:	b2db      	uxtb	r3, r3
 8005660:	2b20      	cmp	r3, #32
 8005662:	d139      	bne.n	80056d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800566a:	2b01      	cmp	r3, #1
 800566c:	d101      	bne.n	8005672 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800566e:	2302      	movs	r3, #2
 8005670:	e033      	b.n	80056da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2224      	movs	r2, #36	; 0x24
 800567e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 0201 	bic.w	r2, r2, #1
 8005690:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80056a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	021b      	lsls	r3, r3, #8
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f042 0201 	orr.w	r2, r2, #1
 80056c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2220      	movs	r2, #32
 80056c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056d4:	2300      	movs	r3, #0
 80056d6:	e000      	b.n	80056da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80056d8:	2302      	movs	r3, #2
  }
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3714      	adds	r7, #20
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80056e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056e8:	b08b      	sub	sp, #44	; 0x2c
 80056ea:	af06      	add	r7, sp, #24
 80056ec:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d101      	bne.n	80056f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e0ad      	b.n	8005854 <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	d106      	bne.n	8005712 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f7fd fdf3 	bl	80032f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2203      	movs	r2, #3
 8005716:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4618      	mov	r0, r3
 8005720:	f003 ff03 	bl	800952a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005724:	2300      	movs	r3, #0
 8005726:	73fb      	strb	r3, [r7, #15]
 8005728:	e035      	b.n	8005796 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800572a:	7bfb      	ldrb	r3, [r7, #15]
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	015b      	lsls	r3, r3, #5
 8005730:	4413      	add	r3, r2
 8005732:	3329      	adds	r3, #41	; 0x29
 8005734:	2201      	movs	r2, #1
 8005736:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005738:	7bfb      	ldrb	r3, [r7, #15]
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	015b      	lsls	r3, r3, #5
 800573e:	4413      	add	r3, r2
 8005740:	3328      	adds	r3, #40	; 0x28
 8005742:	7bfa      	ldrb	r2, [r7, #15]
 8005744:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005746:	7bfb      	ldrb	r3, [r7, #15]
 8005748:	7bfa      	ldrb	r2, [r7, #15]
 800574a:	b291      	uxth	r1, r2
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	015b      	lsls	r3, r3, #5
 8005750:	4413      	add	r3, r2
 8005752:	3336      	adds	r3, #54	; 0x36
 8005754:	460a      	mov	r2, r1
 8005756:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005758:	7bfb      	ldrb	r3, [r7, #15]
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	015b      	lsls	r3, r3, #5
 800575e:	4413      	add	r3, r2
 8005760:	332b      	adds	r3, #43	; 0x2b
 8005762:	2200      	movs	r2, #0
 8005764:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005766:	7bfb      	ldrb	r3, [r7, #15]
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	015b      	lsls	r3, r3, #5
 800576c:	4413      	add	r3, r2
 800576e:	3338      	adds	r3, #56	; 0x38
 8005770:	2200      	movs	r2, #0
 8005772:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005774:	7bfb      	ldrb	r3, [r7, #15]
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	015b      	lsls	r3, r3, #5
 800577a:	4413      	add	r3, r2
 800577c:	333c      	adds	r3, #60	; 0x3c
 800577e:	2200      	movs	r2, #0
 8005780:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005782:	7bfb      	ldrb	r3, [r7, #15]
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	3302      	adds	r3, #2
 8005788:	015b      	lsls	r3, r3, #5
 800578a:	4413      	add	r3, r2
 800578c:	2200      	movs	r2, #0
 800578e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005790:	7bfb      	ldrb	r3, [r7, #15]
 8005792:	3301      	adds	r3, #1
 8005794:	73fb      	strb	r3, [r7, #15]
 8005796:	7bfa      	ldrb	r2, [r7, #15]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	429a      	cmp	r2, r3
 800579e:	d3c4      	bcc.n	800572a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057a0:	2300      	movs	r3, #0
 80057a2:	73fb      	strb	r3, [r7, #15]
 80057a4:	e031      	b.n	800580a <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80057a6:	7bfb      	ldrb	r3, [r7, #15]
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	015b      	lsls	r3, r3, #5
 80057ac:	4413      	add	r3, r2
 80057ae:	f203 1329 	addw	r3, r3, #297	; 0x129
 80057b2:	2200      	movs	r2, #0
 80057b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80057b6:	7bfb      	ldrb	r3, [r7, #15]
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	015b      	lsls	r3, r3, #5
 80057bc:	4413      	add	r3, r2
 80057be:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80057c2:	7bfa      	ldrb	r2, [r7, #15]
 80057c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80057c6:	7bfb      	ldrb	r3, [r7, #15]
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	015b      	lsls	r3, r3, #5
 80057cc:	4413      	add	r3, r2
 80057ce:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80057d2:	2200      	movs	r2, #0
 80057d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80057d6:	7bfb      	ldrb	r3, [r7, #15]
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	015b      	lsls	r3, r3, #5
 80057dc:	4413      	add	r3, r2
 80057de:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80057e2:	2200      	movs	r2, #0
 80057e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80057e6:	7bfb      	ldrb	r3, [r7, #15]
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	015b      	lsls	r3, r3, #5
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80057f2:	2200      	movs	r2, #0
 80057f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80057f6:	7bfb      	ldrb	r3, [r7, #15]
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	330a      	adds	r3, #10
 80057fc:	015b      	lsls	r3, r3, #5
 80057fe:	4413      	add	r3, r2
 8005800:	2200      	movs	r2, #0
 8005802:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005804:	7bfb      	ldrb	r3, [r7, #15]
 8005806:	3301      	adds	r3, #1
 8005808:	73fb      	strb	r3, [r7, #15]
 800580a:	7bfa      	ldrb	r2, [r7, #15]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	429a      	cmp	r2, r3
 8005812:	d3c8      	bcc.n	80057a6 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	603b      	str	r3, [r7, #0]
 800581a:	687e      	ldr	r6, [r7, #4]
 800581c:	466d      	mov	r5, sp
 800581e:	f106 0410 	add.w	r4, r6, #16
 8005822:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005824:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005826:	6823      	ldr	r3, [r4, #0]
 8005828:	602b      	str	r3, [r5, #0]
 800582a:	1d33      	adds	r3, r6, #4
 800582c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800582e:	6838      	ldr	r0, [r7, #0]
 8005830:	f003 fe96 	bl	8009560 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	69db      	ldr	r3, [r3, #28]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d102      	bne.n	8005852 <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 f805 	bl	800585c <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800585c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2201      	movs	r2, #1
 800586e:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005880:	b29b      	uxth	r3, r3
 8005882:	f043 0301 	orr.w	r3, r3, #1
 8005886:	b29a      	uxth	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005894:	b29b      	uxth	r3, r3
 8005896:	f043 0302 	orr.w	r3, r3, #2
 800589a:	b29a      	uxth	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80058b0:	b480      	push	{r7}
 80058b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058b4:	4b05      	ldr	r3, [pc, #20]	; (80058cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a04      	ldr	r2, [pc, #16]	; (80058cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80058ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058be:	6013      	str	r3, [r2, #0]
}
 80058c0:	bf00      	nop
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	58000400 	.word	0x58000400

080058d0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80058d0:	b480      	push	{r7}
 80058d2:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80058d4:	4b04      	ldr	r3, [pc, #16]	; (80058e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80058dc:	4618      	mov	r0, r3
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	58000400 	.word	0x58000400

080058ec <LL_RCC_HSE_IsEnabledDiv2>:
{
 80058ec:	b480      	push	{r7}
 80058ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80058f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058fe:	d101      	bne.n	8005904 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005900:	2301      	movs	r3, #1
 8005902:	e000      	b.n	8005906 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <LL_RCC_HSE_EnableBypass>:
{
 8005910:	b480      	push	{r7}
 8005912:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8005914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800591e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005922:	6013      	str	r3, [r2, #0]
}
 8005924:	bf00      	nop
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <LL_RCC_HSE_DisableBypass>:
{
 800592e:	b480      	push	{r7}
 8005930:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8005932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800593c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005940:	6013      	str	r3, [r2, #0]
}
 8005942:	bf00      	nop
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <LL_RCC_HSE_Enable>:
{
 800594c:	b480      	push	{r7}
 800594e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800595a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800595e:	6013      	str	r3, [r2, #0]
}
 8005960:	bf00      	nop
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <LL_RCC_HSE_Disable>:
{
 800596a:	b480      	push	{r7}
 800596c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800596e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005978:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800597c:	6013      	str	r3, [r2, #0]
}
 800597e:	bf00      	nop
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <LL_RCC_HSE_IsReady>:
{
 8005988:	b480      	push	{r7}
 800598a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800598c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005996:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800599a:	d101      	bne.n	80059a0 <LL_RCC_HSE_IsReady+0x18>
 800599c:	2301      	movs	r3, #1
 800599e:	e000      	b.n	80059a2 <LL_RCC_HSE_IsReady+0x1a>
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <LL_RCC_HSI_Enable>:
{
 80059ac:	b480      	push	{r7}
 80059ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80059b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059be:	6013      	str	r3, [r2, #0]
}
 80059c0:	bf00      	nop
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <LL_RCC_HSI_Disable>:
{
 80059ca:	b480      	push	{r7}
 80059cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80059ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059dc:	6013      	str	r3, [r2, #0]
}
 80059de:	bf00      	nop
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <LL_RCC_HSI_IsReady>:
{
 80059e8:	b480      	push	{r7}
 80059ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80059ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059fa:	d101      	bne.n	8005a00 <LL_RCC_HSI_IsReady+0x18>
 80059fc:	2301      	movs	r3, #1
 80059fe:	e000      	b.n	8005a02 <LL_RCC_HSI_IsReady+0x1a>
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <LL_RCC_HSI_SetCalibTrimming>:
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	061b      	lsls	r3, r3, #24
 8005a22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a26:	4313      	orrs	r3, r2
 8005a28:	604b      	str	r3, [r1, #4]
}
 8005a2a:	bf00      	nop
 8005a2c:	370c      	adds	r7, #12
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <LL_RCC_HSI48_Enable>:
{
 8005a36:	b480      	push	{r7}
 8005a38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a46:	f043 0301 	orr.w	r3, r3, #1
 8005a4a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005a4e:	bf00      	nop
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <LL_RCC_HSI48_Disable>:
{
 8005a58:	b480      	push	{r7}
 8005a5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a68:	f023 0301 	bic.w	r3, r3, #1
 8005a6c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005a70:	bf00      	nop
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <LL_RCC_HSI48_IsReady>:
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8005a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d101      	bne.n	8005a92 <LL_RCC_HSI48_IsReady+0x18>
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e000      	b.n	8005a94 <LL_RCC_HSI48_IsReady+0x1a>
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr

08005a9e <LL_RCC_LSE_Enable>:
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aaa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005aae:	f043 0301 	orr.w	r3, r3, #1
 8005ab2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005ab6:	bf00      	nop
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <LL_RCC_LSE_Disable>:
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005acc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ad0:	f023 0301 	bic.w	r3, r3, #1
 8005ad4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005ad8:	bf00      	nop
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <LL_RCC_LSE_EnableBypass>:
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005ae6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005af2:	f043 0304 	orr.w	r3, r3, #4
 8005af6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005afa:	bf00      	nop
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <LL_RCC_LSE_DisableBypass>:
{
 8005b04:	b480      	push	{r7}
 8005b06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b14:	f023 0304 	bic.w	r3, r3, #4
 8005b18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005b1c:	bf00      	nop
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <LL_RCC_LSE_IsReady>:
{
 8005b26:	b480      	push	{r7}
 8005b28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b32:	f003 0302 	and.w	r3, r3, #2
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d101      	bne.n	8005b3e <LL_RCC_LSE_IsReady+0x18>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e000      	b.n	8005b40 <LL_RCC_LSE_IsReady+0x1a>
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <LL_RCC_LSI1_Enable>:
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b5a:	f043 0301 	orr.w	r3, r3, #1
 8005b5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005b62:	bf00      	nop
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <LL_RCC_LSI1_Disable>:
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b7c:	f023 0301 	bic.w	r3, r3, #1
 8005b80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005b84:	bf00      	nop
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <LL_RCC_LSI1_IsReady>:
{
 8005b8e:	b480      	push	{r7}
 8005b90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d101      	bne.n	8005ba6 <LL_RCC_LSI1_IsReady+0x18>
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e000      	b.n	8005ba8 <LL_RCC_LSI1_IsReady+0x1a>
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <LL_RCC_LSI2_Enable>:
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bc2:	f043 0304 	orr.w	r3, r3, #4
 8005bc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005bca:	bf00      	nop
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <LL_RCC_LSI2_Disable>:
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005be0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005be4:	f023 0304 	bic.w	r3, r3, #4
 8005be8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005bec:	bf00      	nop
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <LL_RCC_LSI2_IsReady>:
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c02:	f003 0308 	and.w	r3, r3, #8
 8005c06:	2b08      	cmp	r3, #8
 8005c08:	d101      	bne.n	8005c0e <LL_RCC_LSI2_IsReady+0x18>
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e000      	b.n	8005c10 <LL_RCC_LSI2_IsReady+0x1a>
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <LL_RCC_LSI2_SetTrimming>:
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b083      	sub	sp, #12
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c2a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	021b      	lsls	r3, r3, #8
 8005c32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c36:	4313      	orrs	r3, r2
 8005c38:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <LL_RCC_MSI_Enable>:
{
 8005c48:	b480      	push	{r7}
 8005c4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c56:	f043 0301 	orr.w	r3, r3, #1
 8005c5a:	6013      	str	r3, [r2, #0]
}
 8005c5c:	bf00      	nop
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr

08005c66 <LL_RCC_MSI_Disable>:
{
 8005c66:	b480      	push	{r7}
 8005c68:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c74:	f023 0301 	bic.w	r3, r3, #1
 8005c78:	6013      	str	r3, [r2, #0]
}
 8005c7a:	bf00      	nop
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <LL_RCC_MSI_IsReady>:
{
 8005c84:	b480      	push	{r7}
 8005c86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0302 	and.w	r3, r3, #2
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d101      	bne.n	8005c9a <LL_RCC_MSI_IsReady+0x16>
 8005c96:	2301      	movs	r3, #1
 8005c98:	e000      	b.n	8005c9c <LL_RCC_MSI_IsReady+0x18>
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <LL_RCC_MSI_SetRange>:
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b083      	sub	sp, #12
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	600b      	str	r3, [r1, #0]
}
 8005cc2:	bf00      	nop
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <LL_RCC_MSI_GetRange>:
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b083      	sub	sp, #12
 8005cd2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cde:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2bb0      	cmp	r3, #176	; 0xb0
 8005ce4:	d901      	bls.n	8005cea <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005ce6:	23b0      	movs	r3, #176	; 0xb0
 8005ce8:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005cea:	687b      	ldr	r3, [r7, #4]
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	021b      	lsls	r3, r3, #8
 8005d0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d12:	4313      	orrs	r3, r2
 8005d14:	604b      	str	r3, [r1, #4]
}
 8005d16:	bf00      	nop
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <LL_RCC_SetSysClkSource>:
{
 8005d22:	b480      	push	{r7}
 8005d24:	b083      	sub	sp, #12
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f023 0203 	bic.w	r2, r3, #3
 8005d34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	608b      	str	r3, [r1, #8]
}
 8005d3e:	bf00      	nop
 8005d40:	370c      	adds	r7, #12
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr

08005d4a <LL_RCC_GetSysClkSource>:
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f003 030c 	and.w	r3, r3, #12
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <LL_RCC_SetAHBPrescaler>:
{
 8005d62:	b480      	push	{r7}
 8005d64:	b083      	sub	sp, #12
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	608b      	str	r3, [r1, #8]
}
 8005d7e:	bf00      	nop
 8005d80:	370c      	adds	r7, #12
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <LL_C2_RCC_SetAHBPrescaler>:
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b083      	sub	sp, #12
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d96:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005d9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005daa:	bf00      	nop
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <LL_RCC_SetAHB4Prescaler>:
{
 8005db6:	b480      	push	{r7}
 8005db8:	b083      	sub	sp, #12
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dc2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005dc6:	f023 020f 	bic.w	r2, r3, #15
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	091b      	lsrs	r3, r3, #4
 8005dce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <LL_RCC_SetAPB1Prescaler>:
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005df6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	608b      	str	r3, [r1, #8]
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <LL_RCC_SetAPB2Prescaler>:
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	608b      	str	r3, [r1, #8]
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <LL_RCC_GetAHBPrescaler>:
{
 8005e34:	b480      	push	{r7}
 8005e36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <LL_RCC_GetAHB4Prescaler>:
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e54:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005e58:	011b      	lsls	r3, r3, #4
 8005e5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <LL_RCC_GetAPB1Prescaler>:
{
 8005e68:	b480      	push	{r7}
 8005e6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <LL_RCC_GetAPB2Prescaler>:
{
 8005e80:	b480      	push	{r7}
 8005e82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005eaa:	6013      	str	r3, [r2, #0]
}
 8005eac:	bf00      	nop
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ec4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ec8:	6013      	str	r3, [r2, #0]
}
 8005eca:	bf00      	nop
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ee2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ee6:	d101      	bne.n	8005eec <LL_RCC_PLL_IsReady+0x18>
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e000      	b.n	8005eee <LL_RCC_PLL_IsReady+0x1a>
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	0a1b      	lsrs	r3, r3, #8
 8005f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr

08005f12 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005f12:	b480      	push	{r7}
 8005f14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005f42:	b480      	push	{r7}
 8005f44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	f003 0303 	and.w	r3, r3, #3
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr

08005f5a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f6c:	d101      	bne.n	8005f72 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e000      	b.n	8005f74 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f86:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f92:	d101      	bne.n	8005f98 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005f94:	2301      	movs	r3, #1
 8005f96:	e000      	b.n	8005f9a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fac:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fb8:	d101      	bne.n	8005fbe <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e000      	b.n	8005fc0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr

08005fca <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fdc:	d101      	bne.n	8005fe2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e000      	b.n	8005fe4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ffc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006000:	d101      	bne.n	8006006 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006002:	2301      	movs	r3, #1
 8006004:	e000      	b.n	8006008 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
	...

08006014 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006014:	b590      	push	{r4, r7, lr}
 8006016:	b08d      	sub	sp, #52	; 0x34
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e386      	b.n	8006734 <HAL_RCC_OscConfig+0x720>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0320 	and.w	r3, r3, #32
 800602e:	2b00      	cmp	r3, #0
 8006030:	f000 808f 	beq.w	8006152 <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006034:	f7ff fe89 	bl	8005d4a <LL_RCC_GetSysClkSource>
 8006038:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800603a:	f7ff ff82 	bl	8005f42 <LL_RCC_PLL_GetMainSource>
 800603e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006042:	2b00      	cmp	r3, #0
 8006044:	d005      	beq.n	8006052 <HAL_RCC_OscConfig+0x3e>
 8006046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006048:	2b0c      	cmp	r3, #12
 800604a:	d149      	bne.n	80060e0 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800604c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604e:	2b01      	cmp	r3, #1
 8006050:	d146      	bne.n	80060e0 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006052:	f7ff fe17 	bl	8005c84 <LL_RCC_MSI_IsReady>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d005      	beq.n	8006068 <HAL_RCC_OscConfig+0x54>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	69db      	ldr	r3, [r3, #28]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d101      	bne.n	8006068 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e365      	b.n	8006734 <HAL_RCC_OscConfig+0x720>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800606c:	f7ff fe2f 	bl	8005cce <LL_RCC_MSI_GetRange>
 8006070:	4603      	mov	r3, r0
 8006072:	429c      	cmp	r4, r3
 8006074:	d914      	bls.n	80060a0 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607a:	4618      	mov	r0, r3
 800607c:	f000 fd44 	bl	8006b08 <RCC_SetFlashLatencyFromMSIRange>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d001      	beq.n	800608a <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e354      	b.n	8006734 <HAL_RCC_OscConfig+0x720>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608e:	4618      	mov	r0, r3
 8006090:	f7ff fe09 	bl	8005ca6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a1b      	ldr	r3, [r3, #32]
 8006098:	4618      	mov	r0, r3
 800609a:	f7ff fe2d 	bl	8005cf8 <LL_RCC_MSI_SetCalibTrimming>
 800609e:	e013      	b.n	80060c8 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7ff fdfe 	bl	8005ca6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7ff fe22 	bl	8005cf8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b8:	4618      	mov	r0, r3
 80060ba:	f000 fd25 	bl	8006b08 <RCC_SetFlashLatencyFromMSIRange>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d001      	beq.n	80060c8 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e335      	b.n	8006734 <HAL_RCC_OscConfig+0x720>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 80060c8:	f7fc ff0e 	bl	8002ee8 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80060cc:	4bb4      	ldr	r3, [pc, #720]	; (80063a0 <HAL_RCC_OscConfig+0x38c>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7fd f999 	bl	8003408 <HAL_InitTick>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d039      	beq.n	8006150 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e329      	b.n	8006734 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	69db      	ldr	r3, [r3, #28]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d01e      	beq.n	8006126 <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80060e8:	f7ff fdae 	bl	8005c48 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80060ec:	f7fd f9da 	bl	80034a4 <HAL_GetTick>
 80060f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80060f2:	e008      	b.n	8006106 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80060f4:	f7fd f9d6 	bl	80034a4 <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d901      	bls.n	8006106 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e316      	b.n	8006734 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006106:	f7ff fdbd 	bl	8005c84 <LL_RCC_MSI_IsReady>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d0f1      	beq.n	80060f4 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006114:	4618      	mov	r0, r3
 8006116:	f7ff fdc6 	bl	8005ca6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	4618      	mov	r0, r3
 8006120:	f7ff fdea 	bl	8005cf8 <LL_RCC_MSI_SetCalibTrimming>
 8006124:	e015      	b.n	8006152 <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006126:	f7ff fd9e 	bl	8005c66 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800612a:	f7fd f9bb 	bl	80034a4 <HAL_GetTick>
 800612e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8006130:	e008      	b.n	8006144 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006132:	f7fd f9b7 	bl	80034a4 <HAL_GetTick>
 8006136:	4602      	mov	r2, r0
 8006138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	2b02      	cmp	r3, #2
 800613e:	d901      	bls.n	8006144 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e2f7      	b.n	8006734 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006144:	f7ff fd9e 	bl	8005c84 <LL_RCC_MSI_IsReady>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1f1      	bne.n	8006132 <HAL_RCC_OscConfig+0x11e>
 800614e:	e000      	b.n	8006152 <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006150:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	2b00      	cmp	r3, #0
 800615c:	d05a      	beq.n	8006214 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800615e:	f7ff fdf4 	bl	8005d4a <LL_RCC_GetSysClkSource>
 8006162:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006164:	f7ff feed 	bl	8005f42 <LL_RCC_PLL_GetMainSource>
 8006168:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800616a:	6a3b      	ldr	r3, [r7, #32]
 800616c:	2b08      	cmp	r3, #8
 800616e:	d005      	beq.n	800617c <HAL_RCC_OscConfig+0x168>
 8006170:	6a3b      	ldr	r3, [r7, #32]
 8006172:	2b0c      	cmp	r3, #12
 8006174:	d10d      	bne.n	8006192 <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	2b03      	cmp	r3, #3
 800617a:	d10a      	bne.n	8006192 <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800617c:	f7ff fc04 	bl	8005988 <LL_RCC_HSE_IsReady>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d045      	beq.n	8006212 <HAL_RCC_OscConfig+0x1fe>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d141      	bne.n	8006212 <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e2d0      	b.n	8006734 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800619a:	d102      	bne.n	80061a2 <HAL_RCC_OscConfig+0x18e>
 800619c:	f7ff fbd6 	bl	800594c <LL_RCC_HSE_Enable>
 80061a0:	e00d      	b.n	80061be <HAL_RCC_OscConfig+0x1aa>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80061aa:	d104      	bne.n	80061b6 <HAL_RCC_OscConfig+0x1a2>
 80061ac:	f7ff fbb0 	bl	8005910 <LL_RCC_HSE_EnableBypass>
 80061b0:	f7ff fbcc 	bl	800594c <LL_RCC_HSE_Enable>
 80061b4:	e003      	b.n	80061be <HAL_RCC_OscConfig+0x1aa>
 80061b6:	f7ff fbd8 	bl	800596a <LL_RCC_HSE_Disable>
 80061ba:	f7ff fbb8 	bl	800592e <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d012      	beq.n	80061ec <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061c6:	f7fd f96d 	bl	80034a4 <HAL_GetTick>
 80061ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80061cc:	e008      	b.n	80061e0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061ce:	f7fd f969 	bl	80034a4 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	2b64      	cmp	r3, #100	; 0x64
 80061da:	d901      	bls.n	80061e0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e2a9      	b.n	8006734 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() == 0U)
 80061e0:	f7ff fbd2 	bl	8005988 <LL_RCC_HSE_IsReady>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d0f1      	beq.n	80061ce <HAL_RCC_OscConfig+0x1ba>
 80061ea:	e013      	b.n	8006214 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ec:	f7fd f95a 	bl	80034a4 <HAL_GetTick>
 80061f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80061f2:	e008      	b.n	8006206 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061f4:	f7fd f956 	bl	80034a4 <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	2b64      	cmp	r3, #100	; 0x64
 8006200:	d901      	bls.n	8006206 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e296      	b.n	8006734 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006206:	f7ff fbbf 	bl	8005988 <LL_RCC_HSE_IsReady>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1f1      	bne.n	80061f4 <HAL_RCC_OscConfig+0x1e0>
 8006210:	e000      	b.n	8006214 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006212:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	2b00      	cmp	r3, #0
 800621e:	d051      	beq.n	80062c4 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006220:	f7ff fd93 	bl	8005d4a <LL_RCC_GetSysClkSource>
 8006224:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006226:	f7ff fe8c 	bl	8005f42 <LL_RCC_PLL_GetMainSource>
 800622a:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	2b04      	cmp	r3, #4
 8006230:	d005      	beq.n	800623e <HAL_RCC_OscConfig+0x22a>
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	2b0c      	cmp	r3, #12
 8006236:	d113      	bne.n	8006260 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	2b02      	cmp	r3, #2
 800623c:	d110      	bne.n	8006260 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800623e:	f7ff fbd3 	bl	80059e8 <LL_RCC_HSI_IsReady>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d005      	beq.n	8006254 <HAL_RCC_OscConfig+0x240>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d101      	bne.n	8006254 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e26f      	b.n	8006734 <HAL_RCC_OscConfig+0x720>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	4618      	mov	r0, r3
 800625a:	f7ff fbd7 	bl	8005a0c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800625e:	e031      	b.n	80062c4 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d019      	beq.n	800629c <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006268:	f7ff fba0 	bl	80059ac <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800626c:	f7fd f91a 	bl	80034a4 <HAL_GetTick>
 8006270:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006272:	e008      	b.n	8006286 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006274:	f7fd f916 	bl	80034a4 <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	2b02      	cmp	r3, #2
 8006280:	d901      	bls.n	8006286 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e256      	b.n	8006734 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006286:	f7ff fbaf 	bl	80059e8 <LL_RCC_HSI_IsReady>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d0f1      	beq.n	8006274 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	4618      	mov	r0, r3
 8006296:	f7ff fbb9 	bl	8005a0c <LL_RCC_HSI_SetCalibTrimming>
 800629a:	e013      	b.n	80062c4 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800629c:	f7ff fb95 	bl	80059ca <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a0:	f7fd f900 	bl	80034a4 <HAL_GetTick>
 80062a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80062a6:	e008      	b.n	80062ba <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062a8:	f7fd f8fc 	bl	80034a4 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d901      	bls.n	80062ba <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e23c      	b.n	8006734 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() != 0U)
 80062ba:	f7ff fb95 	bl	80059e8 <LL_RCC_HSI_IsReady>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1f1      	bne.n	80062a8 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 0308 	and.w	r3, r3, #8
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d106      	bne.n	80062de <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f000 80a2 	beq.w	8006422 <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d075      	beq.n	80063d2 <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0310 	and.w	r3, r3, #16
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d046      	beq.n	8006380 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80062f2:	f7ff fc4c 	bl	8005b8e <LL_RCC_LSI1_IsReady>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d113      	bne.n	8006324 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80062fc:	f7ff fc25 	bl	8005b4a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006300:	f7fd f8d0 	bl	80034a4 <HAL_GetTick>
 8006304:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006306:	e008      	b.n	800631a <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006308:	f7fd f8cc 	bl	80034a4 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	2b02      	cmp	r3, #2
 8006314:	d901      	bls.n	800631a <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e20c      	b.n	8006734 <HAL_RCC_OscConfig+0x720>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800631a:	f7ff fc38 	bl	8005b8e <LL_RCC_LSI1_IsReady>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d0f1      	beq.n	8006308 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8006324:	f7ff fc45 	bl	8005bb2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006328:	f7fd f8bc 	bl	80034a4 <HAL_GetTick>
 800632c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800632e:	e008      	b.n	8006342 <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006330:	f7fd f8b8 	bl	80034a4 <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	2b03      	cmp	r3, #3
 800633c:	d901      	bls.n	8006342 <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e1f8      	b.n	8006734 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006342:	f7ff fc58 	bl	8005bf6 <LL_RCC_LSI2_IsReady>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d0f1      	beq.n	8006330 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	4618      	mov	r0, r3
 8006352:	f7ff fc62 	bl	8005c1a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8006356:	f7ff fc09 	bl	8005b6c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800635a:	f7fd f8a3 	bl	80034a4 <HAL_GetTick>
 800635e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006360:	e008      	b.n	8006374 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006362:	f7fd f89f 	bl	80034a4 <HAL_GetTick>
 8006366:	4602      	mov	r2, r0
 8006368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	2b02      	cmp	r3, #2
 800636e:	d901      	bls.n	8006374 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e1df      	b.n	8006734 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006374:	f7ff fc0b 	bl	8005b8e <LL_RCC_LSI1_IsReady>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1f1      	bne.n	8006362 <HAL_RCC_OscConfig+0x34e>
 800637e:	e050      	b.n	8006422 <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8006380:	f7ff fbe3 	bl	8005b4a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006384:	f7fd f88e 	bl	80034a4 <HAL_GetTick>
 8006388:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800638a:	e00b      	b.n	80063a4 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800638c:	f7fd f88a 	bl	80034a4 <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	2b02      	cmp	r3, #2
 8006398:	d904      	bls.n	80063a4 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e1ca      	b.n	8006734 <HAL_RCC_OscConfig+0x720>
 800639e:	bf00      	nop
 80063a0:	2000003c 	.word	0x2000003c
        while (LL_RCC_LSI1_IsReady() == 0U)
 80063a4:	f7ff fbf3 	bl	8005b8e <LL_RCC_LSI1_IsReady>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d0ee      	beq.n	800638c <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80063ae:	f7ff fc11 	bl	8005bd4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80063b2:	e008      	b.n	80063c6 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80063b4:	f7fd f876 	bl	80034a4 <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	2b03      	cmp	r3, #3
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e1b6      	b.n	8006734 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80063c6:	f7ff fc16 	bl	8005bf6 <LL_RCC_LSI2_IsReady>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1f1      	bne.n	80063b4 <HAL_RCC_OscConfig+0x3a0>
 80063d0:	e027      	b.n	8006422 <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80063d2:	f7ff fbff 	bl	8005bd4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063d6:	f7fd f865 	bl	80034a4 <HAL_GetTick>
 80063da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80063dc:	e008      	b.n	80063f0 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80063de:	f7fd f861 	bl	80034a4 <HAL_GetTick>
 80063e2:	4602      	mov	r2, r0
 80063e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	2b03      	cmp	r3, #3
 80063ea:	d901      	bls.n	80063f0 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e1a1      	b.n	8006734 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80063f0:	f7ff fc01 	bl	8005bf6 <LL_RCC_LSI2_IsReady>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1f1      	bne.n	80063de <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80063fa:	f7ff fbb7 	bl	8005b6c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063fe:	f7fd f851 	bl	80034a4 <HAL_GetTick>
 8006402:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006404:	e008      	b.n	8006418 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006406:	f7fd f84d 	bl	80034a4 <HAL_GetTick>
 800640a:	4602      	mov	r2, r0
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	2b02      	cmp	r3, #2
 8006412:	d901      	bls.n	8006418 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8006414:	2303      	movs	r3, #3
 8006416:	e18d      	b.n	8006734 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006418:	f7ff fbb9 	bl	8005b8e <LL_RCC_LSI1_IsReady>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1f1      	bne.n	8006406 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0304 	and.w	r3, r3, #4
 800642a:	2b00      	cmp	r3, #0
 800642c:	d05b      	beq.n	80064e6 <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800642e:	4bb5      	ldr	r3, [pc, #724]	; (8006704 <HAL_RCC_OscConfig+0x6f0>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006436:	2b00      	cmp	r3, #0
 8006438:	d114      	bne.n	8006464 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800643a:	f7ff fa39 	bl	80058b0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800643e:	f7fd f831 	bl	80034a4 <HAL_GetTick>
 8006442:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006444:	e008      	b.n	8006458 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006446:	f7fd f82d 	bl	80034a4 <HAL_GetTick>
 800644a:	4602      	mov	r2, r0
 800644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	2b02      	cmp	r3, #2
 8006452:	d901      	bls.n	8006458 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8006454:	2303      	movs	r3, #3
 8006456:	e16d      	b.n	8006734 <HAL_RCC_OscConfig+0x720>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006458:	4baa      	ldr	r3, [pc, #680]	; (8006704 <HAL_RCC_OscConfig+0x6f0>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006460:	2b00      	cmp	r3, #0
 8006462:	d0f0      	beq.n	8006446 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d102      	bne.n	8006472 <HAL_RCC_OscConfig+0x45e>
 800646c:	f7ff fb17 	bl	8005a9e <LL_RCC_LSE_Enable>
 8006470:	e00c      	b.n	800648c <HAL_RCC_OscConfig+0x478>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	2b05      	cmp	r3, #5
 8006478:	d104      	bne.n	8006484 <HAL_RCC_OscConfig+0x470>
 800647a:	f7ff fb32 	bl	8005ae2 <LL_RCC_LSE_EnableBypass>
 800647e:	f7ff fb0e 	bl	8005a9e <LL_RCC_LSE_Enable>
 8006482:	e003      	b.n	800648c <HAL_RCC_OscConfig+0x478>
 8006484:	f7ff fb1c 	bl	8005ac0 <LL_RCC_LSE_Disable>
 8006488:	f7ff fb3c 	bl	8005b04 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d014      	beq.n	80064be <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006494:	f7fd f806 	bl	80034a4 <HAL_GetTick>
 8006498:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800649a:	e00a      	b.n	80064b2 <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800649c:	f7fd f802 	bl	80034a4 <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d901      	bls.n	80064b2 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e140      	b.n	8006734 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() == 0U)
 80064b2:	f7ff fb38 	bl	8005b26 <LL_RCC_LSE_IsReady>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d0ef      	beq.n	800649c <HAL_RCC_OscConfig+0x488>
 80064bc:	e013      	b.n	80064e6 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064be:	f7fc fff1 	bl	80034a4 <HAL_GetTick>
 80064c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80064c4:	e00a      	b.n	80064dc <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064c6:	f7fc ffed 	bl	80034a4 <HAL_GetTick>
 80064ca:	4602      	mov	r2, r0
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d901      	bls.n	80064dc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e12b      	b.n	8006734 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() != 0U)
 80064dc:	f7ff fb23 	bl	8005b26 <LL_RCC_LSE_IsReady>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1ef      	bne.n	80064c6 <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d02c      	beq.n	800654c <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d014      	beq.n	8006524 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80064fa:	f7ff fa9c 	bl	8005a36 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064fe:	f7fc ffd1 	bl	80034a4 <HAL_GetTick>
 8006502:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006504:	e008      	b.n	8006518 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006506:	f7fc ffcd 	bl	80034a4 <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	2b02      	cmp	r3, #2
 8006512:	d901      	bls.n	8006518 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	e10d      	b.n	8006734 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006518:	f7ff faaf 	bl	8005a7a <LL_RCC_HSI48_IsReady>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d0f1      	beq.n	8006506 <HAL_RCC_OscConfig+0x4f2>
 8006522:	e013      	b.n	800654c <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006524:	f7ff fa98 	bl	8005a58 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006528:	f7fc ffbc 	bl	80034a4 <HAL_GetTick>
 800652c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800652e:	e008      	b.n	8006542 <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006530:	f7fc ffb8 	bl	80034a4 <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	2b02      	cmp	r3, #2
 800653c:	d901      	bls.n	8006542 <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e0f8      	b.n	8006734 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006542:	f7ff fa9a 	bl	8005a7a <LL_RCC_HSI48_IsReady>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1f1      	bne.n	8006530 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006550:	2b00      	cmp	r3, #0
 8006552:	f000 80ee 	beq.w	8006732 <HAL_RCC_OscConfig+0x71e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006556:	f7ff fbf8 	bl	8005d4a <LL_RCC_GetSysClkSource>
 800655a:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800655c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006568:	2b02      	cmp	r3, #2
 800656a:	f040 80af 	bne.w	80066cc <HAL_RCC_OscConfig+0x6b8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f003 0203 	and.w	r2, r3, #3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006578:	429a      	cmp	r2, r3
 800657a:	d123      	bne.n	80065c4 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006586:	429a      	cmp	r2, r3
 8006588:	d11c      	bne.n	80065c4 <HAL_RCC_OscConfig+0x5b0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	0a1b      	lsrs	r3, r3, #8
 800658e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006596:	429a      	cmp	r2, r3
 8006598:	d114      	bne.n	80065c4 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d10d      	bne.n	80065c4 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d106      	bne.n	80065c4 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d05d      	beq.n	8006680 <HAL_RCC_OscConfig+0x66c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	2b0c      	cmp	r3, #12
 80065c8:	d058      	beq.n	800667c <HAL_RCC_OscConfig+0x668>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80065ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d001      	beq.n	80065dc <HAL_RCC_OscConfig+0x5c8>

          {
            return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e0ab      	b.n	8006734 <HAL_RCC_OscConfig+0x720>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80065dc:	f7ff fc6b 	bl	8005eb6 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80065e0:	f7fc ff60 	bl	80034a4 <HAL_GetTick>
 80065e4:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065e6:	e008      	b.n	80065fa <HAL_RCC_OscConfig+0x5e6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065e8:	f7fc ff5c 	bl	80034a4 <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d901      	bls.n	80065fa <HAL_RCC_OscConfig+0x5e6>
              {
                return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e09c      	b.n	8006734 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d1ef      	bne.n	80065e8 <HAL_RCC_OscConfig+0x5d4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800660c:	68da      	ldr	r2, [r3, #12]
 800660e:	4b3e      	ldr	r3, [pc, #248]	; (8006708 <HAL_RCC_OscConfig+0x6f4>)
 8006610:	4013      	ands	r3, r2
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800661a:	4311      	orrs	r1, r2
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006620:	0212      	lsls	r2, r2, #8
 8006622:	4311      	orrs	r1, r2
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006628:	4311      	orrs	r1, r2
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800662e:	4311      	orrs	r1, r2
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006634:	430a      	orrs	r2, r1
 8006636:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800663a:	4313      	orrs	r3, r2
 800663c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800663e:	f7ff fc2b 	bl	8005e98 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800664c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006650:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006652:	f7fc ff27 	bl	80034a4 <HAL_GetTick>
 8006656:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006658:	e008      	b.n	800666c <HAL_RCC_OscConfig+0x658>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800665a:	f7fc ff23 	bl	80034a4 <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	2b02      	cmp	r3, #2
 8006666:	d901      	bls.n	800666c <HAL_RCC_OscConfig+0x658>
              {
                return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e063      	b.n	8006734 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800666c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006676:	2b00      	cmp	r3, #0
 8006678:	d0ef      	beq.n	800665a <HAL_RCC_OscConfig+0x646>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800667a:	e05a      	b.n	8006732 <HAL_RCC_OscConfig+0x71e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e059      	b.n	8006734 <HAL_RCC_OscConfig+0x720>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d151      	bne.n	8006732 <HAL_RCC_OscConfig+0x71e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800668e:	f7ff fc03 	bl	8005e98 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800669c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066a0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80066a2:	f7fc feff 	bl	80034a4 <HAL_GetTick>
 80066a6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066a8:	e008      	b.n	80066bc <HAL_RCC_OscConfig+0x6a8>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066aa:	f7fc fefb 	bl	80034a4 <HAL_GetTick>
 80066ae:	4602      	mov	r2, r0
 80066b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d901      	bls.n	80066bc <HAL_RCC_OscConfig+0x6a8>
            {
              return HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e03b      	b.n	8006734 <HAL_RCC_OscConfig+0x720>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d0ef      	beq.n	80066aa <HAL_RCC_OscConfig+0x696>
 80066ca:	e032      	b.n	8006732 <HAL_RCC_OscConfig+0x71e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	2b0c      	cmp	r3, #12
 80066d0:	d02d      	beq.n	800672e <HAL_RCC_OscConfig+0x71a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066d2:	f7ff fbf0 	bl	8005eb6 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80066d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066e0:	f023 0303 	bic.w	r3, r3, #3
 80066e4:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80066e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066f0:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80066f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066f8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066fa:	f7fc fed3 	bl	80034a4 <HAL_GetTick>
 80066fe:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006700:	e00d      	b.n	800671e <HAL_RCC_OscConfig+0x70a>
 8006702:	bf00      	nop
 8006704:	58000400 	.word	0x58000400
 8006708:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800670c:	f7fc feca 	bl	80034a4 <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	2b02      	cmp	r3, #2
 8006718:	d901      	bls.n	800671e <HAL_RCC_OscConfig+0x70a>
          {
            return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e00a      	b.n	8006734 <HAL_RCC_OscConfig+0x720>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800671e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1ef      	bne.n	800670c <HAL_RCC_OscConfig+0x6f8>
 800672c:	e001      	b.n	8006732 <HAL_RCC_OscConfig+0x71e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e000      	b.n	8006734 <HAL_RCC_OscConfig+0x720>
      }
    }
  }
  return HAL_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	3734      	adds	r7, #52	; 0x34
 8006738:	46bd      	mov	sp, r7
 800673a:	bd90      	pop	{r4, r7, pc}

0800673c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d101      	bne.n	8006750 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e12a      	b.n	80069a6 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006750:	4b97      	ldr	r3, [pc, #604]	; (80069b0 <HAL_RCC_ClockConfig+0x274>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0307 	and.w	r3, r3, #7
 8006758:	683a      	ldr	r2, [r7, #0]
 800675a:	429a      	cmp	r2, r3
 800675c:	d91b      	bls.n	8006796 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800675e:	4b94      	ldr	r3, [pc, #592]	; (80069b0 <HAL_RCC_ClockConfig+0x274>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f023 0207 	bic.w	r2, r3, #7
 8006766:	4992      	ldr	r1, [pc, #584]	; (80069b0 <HAL_RCC_ClockConfig+0x274>)
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	4313      	orrs	r3, r2
 800676c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800676e:	f7fc fe99 	bl	80034a4 <HAL_GetTick>
 8006772:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006774:	e008      	b.n	8006788 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006776:	f7fc fe95 	bl	80034a4 <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	2b02      	cmp	r3, #2
 8006782:	d901      	bls.n	8006788 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e10e      	b.n	80069a6 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006788:	4b89      	ldr	r3, [pc, #548]	; (80069b0 <HAL_RCC_ClockConfig+0x274>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0307 	and.w	r3, r3, #7
 8006790:	683a      	ldr	r2, [r7, #0]
 8006792:	429a      	cmp	r2, r3
 8006794:	d1ef      	bne.n	8006776 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0302 	and.w	r3, r3, #2
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d016      	beq.n	80067d0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7ff fadb 	bl	8005d62 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80067ac:	f7fc fe7a 	bl	80034a4 <HAL_GetTick>
 80067b0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80067b2:	e008      	b.n	80067c6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80067b4:	f7fc fe76 	bl	80034a4 <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d901      	bls.n	80067c6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e0ef      	b.n	80069a6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80067c6:	f7ff fbc8 	bl	8005f5a <LL_RCC_IsActiveFlag_HPRE>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d0f1      	beq.n	80067b4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0320 	and.w	r3, r3, #32
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d016      	beq.n	800680a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	695b      	ldr	r3, [r3, #20]
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7ff fad2 	bl	8005d8a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80067e6:	f7fc fe5d 	bl	80034a4 <HAL_GetTick>
 80067ea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80067ec:	e008      	b.n	8006800 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80067ee:	f7fc fe59 	bl	80034a4 <HAL_GetTick>
 80067f2:	4602      	mov	r2, r0
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d901      	bls.n	8006800 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e0d2      	b.n	80069a6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006800:	f7ff fbbd 	bl	8005f7e <LL_RCC_IsActiveFlag_C2HPRE>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d0f1      	beq.n	80067ee <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006812:	2b00      	cmp	r3, #0
 8006814:	d016      	beq.n	8006844 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	4618      	mov	r0, r3
 800681c:	f7ff facb 	bl	8005db6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006820:	f7fc fe40 	bl	80034a4 <HAL_GetTick>
 8006824:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006826:	e008      	b.n	800683a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006828:	f7fc fe3c 	bl	80034a4 <HAL_GetTick>
 800682c:	4602      	mov	r2, r0
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	2b02      	cmp	r3, #2
 8006834:	d901      	bls.n	800683a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e0b5      	b.n	80069a6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800683a:	f7ff fbb3 	bl	8005fa4 <LL_RCC_IsActiveFlag_SHDHPRE>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d0f1      	beq.n	8006828 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0304 	and.w	r3, r3, #4
 800684c:	2b00      	cmp	r3, #0
 800684e:	d016      	beq.n	800687e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	4618      	mov	r0, r3
 8006856:	f7ff fac5 	bl	8005de4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800685a:	f7fc fe23 	bl	80034a4 <HAL_GetTick>
 800685e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006860:	e008      	b.n	8006874 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006862:	f7fc fe1f 	bl	80034a4 <HAL_GetTick>
 8006866:	4602      	mov	r2, r0
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	2b02      	cmp	r3, #2
 800686e:	d901      	bls.n	8006874 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	e098      	b.n	80069a6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006874:	f7ff fba9 	bl	8005fca <LL_RCC_IsActiveFlag_PPRE1>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d0f1      	beq.n	8006862 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 0308 	and.w	r3, r3, #8
 8006886:	2b00      	cmp	r3, #0
 8006888:	d017      	beq.n	80068ba <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	00db      	lsls	r3, r3, #3
 8006890:	4618      	mov	r0, r3
 8006892:	f7ff fabb 	bl	8005e0c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006896:	f7fc fe05 	bl	80034a4 <HAL_GetTick>
 800689a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800689c:	e008      	b.n	80068b0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800689e:	f7fc fe01 	bl	80034a4 <HAL_GetTick>
 80068a2:	4602      	mov	r2, r0
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d901      	bls.n	80068b0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e07a      	b.n	80069a6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80068b0:	f7ff fb9d 	bl	8005fee <LL_RCC_IsActiveFlag_PPRE2>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d0f1      	beq.n	800689e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0301 	and.w	r3, r3, #1
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d043      	beq.n	800694e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d106      	bne.n	80068dc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80068ce:	f7ff f85b 	bl	8005988 <LL_RCC_HSE_IsReady>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d11e      	bne.n	8006916 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e064      	b.n	80069a6 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	2b03      	cmp	r3, #3
 80068e2:	d106      	bne.n	80068f2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80068e4:	f7ff faf6 	bl	8005ed4 <LL_RCC_PLL_IsReady>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d113      	bne.n	8006916 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e059      	b.n	80069a6 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d106      	bne.n	8006908 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80068fa:	f7ff f9c3 	bl	8005c84 <LL_RCC_MSI_IsReady>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d108      	bne.n	8006916 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e04e      	b.n	80069a6 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006908:	f7ff f86e 	bl	80059e8 <LL_RCC_HSI_IsReady>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d101      	bne.n	8006916 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e047      	b.n	80069a6 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	4618      	mov	r0, r3
 800691c:	f7ff fa01 	bl	8005d22 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006920:	f7fc fdc0 	bl	80034a4 <HAL_GetTick>
 8006924:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006926:	e00a      	b.n	800693e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006928:	f7fc fdbc 	bl	80034a4 <HAL_GetTick>
 800692c:	4602      	mov	r2, r0
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	f241 3288 	movw	r2, #5000	; 0x1388
 8006936:	4293      	cmp	r3, r2
 8006938:	d901      	bls.n	800693e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e033      	b.n	80069a6 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800693e:	f7ff fa04 	bl	8005d4a <LL_RCC_GetSysClkSource>
 8006942:	4602      	mov	r2, r0
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	429a      	cmp	r2, r3
 800694c:	d1ec      	bne.n	8006928 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800694e:	4b18      	ldr	r3, [pc, #96]	; (80069b0 <HAL_RCC_ClockConfig+0x274>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0307 	and.w	r3, r3, #7
 8006956:	683a      	ldr	r2, [r7, #0]
 8006958:	429a      	cmp	r2, r3
 800695a:	d21b      	bcs.n	8006994 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800695c:	4b14      	ldr	r3, [pc, #80]	; (80069b0 <HAL_RCC_ClockConfig+0x274>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f023 0207 	bic.w	r2, r3, #7
 8006964:	4912      	ldr	r1, [pc, #72]	; (80069b0 <HAL_RCC_ClockConfig+0x274>)
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	4313      	orrs	r3, r2
 800696a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800696c:	f7fc fd9a 	bl	80034a4 <HAL_GetTick>
 8006970:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006972:	e008      	b.n	8006986 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006974:	f7fc fd96 	bl	80034a4 <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	2b02      	cmp	r3, #2
 8006980:	d901      	bls.n	8006986 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e00f      	b.n	80069a6 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006986:	4b0a      	ldr	r3, [pc, #40]	; (80069b0 <HAL_RCC_ClockConfig+0x274>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 0307 	and.w	r3, r3, #7
 800698e:	683a      	ldr	r2, [r7, #0]
 8006990:	429a      	cmp	r2, r3
 8006992:	d1ef      	bne.n	8006974 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 8006994:	f7fc faa8 	bl	8002ee8 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8006998:	f7fc fd90 	bl	80034bc <HAL_GetTickPrio>
 800699c:	4603      	mov	r3, r0
 800699e:	4618      	mov	r0, r3
 80069a0:	f7fc fd32 	bl	8003408 <HAL_InitTick>
 80069a4:	4603      	mov	r3, r0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3710      	adds	r7, #16
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	58004000 	.word	0x58004000

080069b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069b4:	b590      	push	{r4, r7, lr}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069ba:	f7ff f9c6 	bl	8005d4a <LL_RCC_GetSysClkSource>
 80069be:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d10a      	bne.n	80069dc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80069c6:	f7ff f982 	bl	8005cce <LL_RCC_MSI_GetRange>
 80069ca:	4603      	mov	r3, r0
 80069cc:	091b      	lsrs	r3, r3, #4
 80069ce:	f003 030f 	and.w	r3, r3, #15
 80069d2:	4a2a      	ldr	r2, [pc, #168]	; (8006a7c <HAL_RCC_GetSysClockFreq+0xc8>)
 80069d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069d8:	60fb      	str	r3, [r7, #12]
 80069da:	e04a      	b.n	8006a72 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b04      	cmp	r3, #4
 80069e0:	d102      	bne.n	80069e8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80069e2:	4b27      	ldr	r3, [pc, #156]	; (8006a80 <HAL_RCC_GetSysClockFreq+0xcc>)
 80069e4:	60fb      	str	r3, [r7, #12]
 80069e6:	e044      	b.n	8006a72 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2b08      	cmp	r3, #8
 80069ec:	d10a      	bne.n	8006a04 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80069ee:	f7fe ff7d 	bl	80058ec <LL_RCC_HSE_IsEnabledDiv2>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d102      	bne.n	80069fe <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80069f8:	4b21      	ldr	r3, [pc, #132]	; (8006a80 <HAL_RCC_GetSysClockFreq+0xcc>)
 80069fa:	60fb      	str	r3, [r7, #12]
 80069fc:	e039      	b.n	8006a72 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80069fe:	4b21      	ldr	r3, [pc, #132]	; (8006a84 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006a00:	60fb      	str	r3, [r7, #12]
 8006a02:	e036      	b.n	8006a72 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006a04:	f7ff fa9d 	bl	8005f42 <LL_RCC_PLL_GetMainSource>
 8006a08:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d002      	beq.n	8006a16 <HAL_RCC_GetSysClockFreq+0x62>
 8006a10:	2b03      	cmp	r3, #3
 8006a12:	d003      	beq.n	8006a1c <HAL_RCC_GetSysClockFreq+0x68>
 8006a14:	e00d      	b.n	8006a32 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006a16:	4b1a      	ldr	r3, [pc, #104]	; (8006a80 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006a18:	60bb      	str	r3, [r7, #8]
        break;
 8006a1a:	e015      	b.n	8006a48 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006a1c:	f7fe ff66 	bl	80058ec <LL_RCC_HSE_IsEnabledDiv2>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d102      	bne.n	8006a2c <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006a26:	4b16      	ldr	r3, [pc, #88]	; (8006a80 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006a28:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006a2a:	e00d      	b.n	8006a48 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8006a2c:	4b15      	ldr	r3, [pc, #84]	; (8006a84 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006a2e:	60bb      	str	r3, [r7, #8]
        break;
 8006a30:	e00a      	b.n	8006a48 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006a32:	f7ff f94c 	bl	8005cce <LL_RCC_MSI_GetRange>
 8006a36:	4603      	mov	r3, r0
 8006a38:	091b      	lsrs	r3, r3, #4
 8006a3a:	f003 030f 	and.w	r3, r3, #15
 8006a3e:	4a0f      	ldr	r2, [pc, #60]	; (8006a7c <HAL_RCC_GetSysClockFreq+0xc8>)
 8006a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a44:	60bb      	str	r3, [r7, #8]
        break;
 8006a46:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8006a48:	f7ff fa56 	bl	8005ef8 <LL_RCC_PLL_GetN>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	fb03 f402 	mul.w	r4, r3, r2
 8006a54:	f7ff fa69 	bl	8005f2a <LL_RCC_PLL_GetDivider>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	091b      	lsrs	r3, r3, #4
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	fbb4 f4f3 	udiv	r4, r4, r3
 8006a62:	f7ff fa56 	bl	8005f12 <LL_RCC_PLL_GetR>
 8006a66:	4603      	mov	r3, r0
 8006a68:	0f5b      	lsrs	r3, r3, #29
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	fbb4 f3f3 	udiv	r3, r4, r3
 8006a70:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8006a72:	68fb      	ldr	r3, [r7, #12]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3714      	adds	r7, #20
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd90      	pop	{r4, r7, pc}
 8006a7c:	0800c9e8 	.word	0x0800c9e8
 8006a80:	00f42400 	.word	0x00f42400
 8006a84:	01e84800 	.word	0x01e84800

08006a88 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a88:	b598      	push	{r3, r4, r7, lr}
 8006a8a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006a8c:	f7ff ff92 	bl	80069b4 <HAL_RCC_GetSysClockFreq>
 8006a90:	4604      	mov	r4, r0
 8006a92:	f7ff f9cf 	bl	8005e34 <LL_RCC_GetAHBPrescaler>
 8006a96:	4603      	mov	r3, r0
 8006a98:	091b      	lsrs	r3, r3, #4
 8006a9a:	f003 030f 	and.w	r3, r3, #15
 8006a9e:	4a03      	ldr	r2, [pc, #12]	; (8006aac <HAL_RCC_GetHCLKFreq+0x24>)
 8006aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aa4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	bd98      	pop	{r3, r4, r7, pc}
 8006aac:	0800c988 	.word	0x0800c988

08006ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ab0:	b598      	push	{r3, r4, r7, lr}
 8006ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006ab4:	f7ff ffe8 	bl	8006a88 <HAL_RCC_GetHCLKFreq>
 8006ab8:	4604      	mov	r4, r0
 8006aba:	f7ff f9d5 	bl	8005e68 <LL_RCC_GetAPB1Prescaler>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	0a1b      	lsrs	r3, r3, #8
 8006ac2:	f003 0307 	and.w	r3, r3, #7
 8006ac6:	4a04      	ldr	r2, [pc, #16]	; (8006ad8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006acc:	f003 031f 	and.w	r3, r3, #31
 8006ad0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	bd98      	pop	{r3, r4, r7, pc}
 8006ad8:	0800c9c8 	.word	0x0800c9c8

08006adc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006adc:	b598      	push	{r3, r4, r7, lr}
 8006ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006ae0:	f7ff ffd2 	bl	8006a88 <HAL_RCC_GetHCLKFreq>
 8006ae4:	4604      	mov	r4, r0
 8006ae6:	f7ff f9cb 	bl	8005e80 <LL_RCC_GetAPB2Prescaler>
 8006aea:	4603      	mov	r3, r0
 8006aec:	0adb      	lsrs	r3, r3, #11
 8006aee:	f003 0307 	and.w	r3, r3, #7
 8006af2:	4a04      	ldr	r2, [pc, #16]	; (8006b04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006af8:	f003 031f 	and.w	r3, r3, #31
 8006afc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	bd98      	pop	{r3, r4, r7, pc}
 8006b04:	0800c9c8 	.word	0x0800c9c8

08006b08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006b08:	b590      	push	{r4, r7, lr}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2bb0      	cmp	r3, #176	; 0xb0
 8006b14:	d903      	bls.n	8006b1e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006b16:	4b15      	ldr	r3, [pc, #84]	; (8006b6c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1a:	60fb      	str	r3, [r7, #12]
 8006b1c:	e007      	b.n	8006b2e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	091b      	lsrs	r3, r3, #4
 8006b22:	f003 030f 	and.w	r3, r3, #15
 8006b26:	4a11      	ldr	r2, [pc, #68]	; (8006b6c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b2c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8006b2e:	f7ff f98d 	bl	8005e4c <LL_RCC_GetAHB4Prescaler>
 8006b32:	4603      	mov	r3, r0
 8006b34:	091b      	lsrs	r3, r3, #4
 8006b36:	f003 030f 	and.w	r3, r3, #15
 8006b3a:	4a0d      	ldr	r2, [pc, #52]	; (8006b70 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b46:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	4a0a      	ldr	r2, [pc, #40]	; (8006b74 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b50:	0c9c      	lsrs	r4, r3, #18
 8006b52:	f7fe febd 	bl	80058d0 <HAL_PWREx_GetVoltageRange>
 8006b56:	4603      	mov	r3, r0
 8006b58:	4619      	mov	r1, r3
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	f000 f80c 	bl	8006b78 <RCC_SetFlashLatency>
 8006b60:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd90      	pop	{r4, r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	0800c9e8 	.word	0x0800c9e8
 8006b70:	0800c988 	.word	0x0800c988
 8006b74:	431bde83 	.word	0x431bde83

08006b78 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006b78:	b590      	push	{r4, r7, lr}
 8006b7a:	b093      	sub	sp, #76	; 0x4c
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8006b82:	4b39      	ldr	r3, [pc, #228]	; (8006c68 <RCC_SetFlashLatency+0xf0>)
 8006b84:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8006b88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8006b8e:	4a37      	ldr	r2, [pc, #220]	; (8006c6c <RCC_SetFlashLatency+0xf4>)
 8006b90:	f107 031c 	add.w	r3, r7, #28
 8006b94:	ca07      	ldmia	r2, {r0, r1, r2}
 8006b96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8006b9a:	4b35      	ldr	r3, [pc, #212]	; (8006c70 <RCC_SetFlashLatency+0xf8>)
 8006b9c:	f107 040c 	add.w	r4, r7, #12
 8006ba0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006ba2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bb0:	d11c      	bne.n	8006bec <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	643b      	str	r3, [r7, #64]	; 0x40
 8006bb6:	e015      	b.n	8006be4 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006bc0:	4413      	add	r3, r2
 8006bc2:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d808      	bhi.n	8006bde <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006bcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006bda:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006bdc:	e022      	b.n	8006c24 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006bde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006be0:	3301      	adds	r3, #1
 8006be2:	643b      	str	r3, [r7, #64]	; 0x40
 8006be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006be6:	2b03      	cmp	r3, #3
 8006be8:	d9e6      	bls.n	8006bb8 <RCC_SetFlashLatency+0x40>
 8006bea:	e01b      	b.n	8006c24 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006bec:	2300      	movs	r3, #0
 8006bee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bf0:	e015      	b.n	8006c1e <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d808      	bhi.n	8006c18 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006c0e:	4413      	add	r3, r2
 8006c10:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006c14:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006c16:	e005      	b.n	8006c24 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d9e6      	bls.n	8006bf2 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8006c24:	4b13      	ldr	r3, [pc, #76]	; (8006c74 <RCC_SetFlashLatency+0xfc>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f023 0207 	bic.w	r2, r3, #7
 8006c2c:	4911      	ldr	r1, [pc, #68]	; (8006c74 <RCC_SetFlashLatency+0xfc>)
 8006c2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c30:	4313      	orrs	r3, r2
 8006c32:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006c34:	f7fc fc36 	bl	80034a4 <HAL_GetTick>
 8006c38:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006c3a:	e008      	b.n	8006c4e <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006c3c:	f7fc fc32 	bl	80034a4 <HAL_GetTick>
 8006c40:	4602      	mov	r2, r0
 8006c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d901      	bls.n	8006c4e <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e007      	b.n	8006c5e <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006c4e:	4b09      	ldr	r3, [pc, #36]	; (8006c74 <RCC_SetFlashLatency+0xfc>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 0307 	and.w	r3, r3, #7
 8006c56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d1ef      	bne.n	8006c3c <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	374c      	adds	r7, #76	; 0x4c
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd90      	pop	{r4, r7, pc}
 8006c66:	bf00      	nop
 8006c68:	0800c804 	.word	0x0800c804
 8006c6c:	0800c814 	.word	0x0800c814
 8006c70:	0800c820 	.word	0x0800c820
 8006c74:	58004000 	.word	0x58004000

08006c78 <LL_RCC_LSE_IsEnabled>:
{
 8006c78:	b480      	push	{r7}
 8006c7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c84:	f003 0301 	and.w	r3, r3, #1
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d101      	bne.n	8006c90 <LL_RCC_LSE_IsEnabled+0x18>
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e000      	b.n	8006c92 <LL_RCC_LSE_IsEnabled+0x1a>
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <LL_RCC_LSE_IsReady>:
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ca8:	f003 0302 	and.w	r3, r3, #2
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d101      	bne.n	8006cb4 <LL_RCC_LSE_IsReady+0x18>
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e000      	b.n	8006cb6 <LL_RCC_LSE_IsReady+0x1a>
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <LL_RCC_MSI_EnablePLLMode>:
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8006cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006cce:	f043 0304 	orr.w	r3, r3, #4
 8006cd2:	6013      	str	r3, [r2, #0]
}
 8006cd4:	bf00      	nop
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <LL_RCC_SetRFWKPClockSource>:
{
 8006cde:	b480      	push	{r7}
 8006ce0:	b083      	sub	sp, #12
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006cf2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006cfe:	bf00      	nop
 8006d00:	370c      	adds	r7, #12
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr

08006d0a <LL_RCC_SetSMPSClockSource>:
{
 8006d0a:	b480      	push	{r7}
 8006d0c:	b083      	sub	sp, #12
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d18:	f023 0203 	bic.w	r2, r3, #3
 8006d1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006d26:	bf00      	nop
 8006d28:	370c      	adds	r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr

08006d32 <LL_RCC_SetSMPSPrescaler>:
{
 8006d32:	b480      	push	{r7}
 8006d34:	b083      	sub	sp, #12
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d40:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006d44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006d4e:	bf00      	nop
 8006d50:	370c      	adds	r7, #12
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <LL_RCC_SetUSARTClockSource>:
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b083      	sub	sp, #12
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d6a:	f023 0203 	bic.w	r2, r3, #3
 8006d6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006d7a:	bf00      	nop
 8006d7c:	370c      	adds	r7, #12
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr

08006d86 <LL_RCC_SetLPUARTClockSource>:
{
 8006d86:	b480      	push	{r7}
 8006d88:	b083      	sub	sp, #12
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006d9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006da6:	bf00      	nop
 8006da8:	370c      	adds	r7, #12
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr

08006db2 <LL_RCC_SetI2CClockSource>:
{
 8006db2:	b480      	push	{r7}
 8006db4:	b083      	sub	sp, #12
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dbe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	091b      	lsrs	r3, r3, #4
 8006dc6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006dca:	43db      	mvns	r3, r3
 8006dcc:	401a      	ands	r2, r3
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	011b      	lsls	r3, r3, #4
 8006dd2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006dd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <LL_RCC_SetLPTIMClockSource>:
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006df8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	0c1b      	lsrs	r3, r3, #16
 8006e00:	041b      	lsls	r3, r3, #16
 8006e02:	43db      	mvns	r3, r3
 8006e04:	401a      	ands	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	041b      	lsls	r3, r3, #16
 8006e0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006e14:	bf00      	nop
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <LL_RCC_SetSAIClockSource>:
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8006e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006e34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <LL_RCC_SetRNGClockSource>:
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e5c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006e60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006e6c:	bf00      	nop
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <LL_RCC_SetCLK48ClockSource>:
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e88:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006e8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <LL_RCC_SetUSBClockSource>:
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f7ff ffe3 	bl	8006e78 <LL_RCC_SetCLK48ClockSource>
}
 8006eb2:	bf00      	nop
 8006eb4:	3708      	adds	r7, #8
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <LL_RCC_SetADCClockSource>:
{
 8006eba:	b480      	push	{r7}
 8006ebc:	b083      	sub	sp, #12
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006ece:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006eda:	bf00      	nop
 8006edc:	370c      	adds	r7, #12
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr

08006ee6 <LL_RCC_SetRTCClockSource>:
{
 8006ee6:	b480      	push	{r7}
 8006ee8:	b083      	sub	sp, #12
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ef6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006efa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006f06:	bf00      	nop
 8006f08:	370c      	adds	r7, #12
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr

08006f12 <LL_RCC_GetRTCClockSource>:
{
 8006f12:	b480      	push	{r7}
 8006f14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <LL_RCC_ForceBackupDomainReset>:
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006f44:	bf00      	nop
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <LL_RCC_ReleaseBackupDomainReset>:
{
 8006f4e:	b480      	push	{r7}
 8006f50:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006f66:	bf00      	nop
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <LL_RCC_PLLSAI1_Enable>:
{
 8006f70:	b480      	push	{r7}
 8006f72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006f82:	6013      	str	r3, [r2, #0]
}
 8006f84:	bf00      	nop
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr

08006f8e <LL_RCC_PLLSAI1_Disable>:
{
 8006f8e:	b480      	push	{r7}
 8006f90:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f9c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006fa0:	6013      	str	r3, [r2, #0]
}
 8006fa2:	bf00      	nop
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <LL_RCC_PLLSAI1_IsReady>:
{
 8006fac:	b480      	push	{r7}
 8006fae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8006fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fbe:	d101      	bne.n	8006fc4 <LL_RCC_PLLSAI1_IsReady+0x18>
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e000      	b.n	8006fc6 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b088      	sub	sp, #32
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006fd8:	2300      	movs	r3, #0
 8006fda:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006fdc:	2300      	movs	r3, #0
 8006fde:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d033      	beq.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ff4:	d00c      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006ff6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ffa:	d802      	bhi.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d010      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007000:	e017      	b.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8007002:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007006:	d017      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8007008:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800700c:	d016      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800700e:	e010      	b.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8007010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800701a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800701e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8007020:	e00d      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	3304      	adds	r3, #4
 8007026:	4618      	mov	r0, r3
 8007028:	f000 f94d 	bl	80072c6 <RCCEx_PLLSAI1_ConfigNP>
 800702c:	4603      	mov	r3, r0
 800702e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007030:	e005      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	77fb      	strb	r3, [r7, #31]
        break;
 8007036:	e002      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8007038:	bf00      	nop
 800703a:	e000      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800703c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800703e:	7ffb      	ldrb	r3, [r7, #31]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d105      	bne.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007048:	4618      	mov	r0, r3
 800704a:	f7ff fee9 	bl	8006e20 <LL_RCC_SetSAIClockSource>
 800704e:	e001      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007050:	7ffb      	ldrb	r3, [r7, #31]
 8007052:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800705c:	2b00      	cmp	r3, #0
 800705e:	d046      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8007060:	f7ff ff57 	bl	8006f12 <LL_RCC_GetRTCClockSource>
 8007064:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706a:	69ba      	ldr	r2, [r7, #24]
 800706c:	429a      	cmp	r2, r3
 800706e:	d03c      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007070:	f7fe fc1e 	bl	80058b0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d105      	bne.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707e:	4618      	mov	r0, r3
 8007080:	f7ff ff31 	bl	8006ee6 <LL_RCC_SetRTCClockSource>
 8007084:	e02e      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8007086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800708a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800708e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8007090:	f7ff ff4c 	bl	8006f2c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8007094:	f7ff ff5b 	bl	8006f4e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a2:	4313      	orrs	r3, r2
 80070a4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80070a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80070b0:	f7ff fde2 	bl	8006c78 <LL_RCC_LSE_IsEnabled>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d114      	bne.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80070ba:	f7fc f9f3 	bl	80034a4 <HAL_GetTick>
 80070be:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80070c0:	e00b      	b.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070c2:	f7fc f9ef 	bl	80034a4 <HAL_GetTick>
 80070c6:	4602      	mov	r2, r0
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d902      	bls.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 80070d4:	2303      	movs	r3, #3
 80070d6:	77fb      	strb	r3, [r7, #31]
              break;
 80070d8:	e004      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 80070da:	f7ff fddf 	bl	8006c9c <LL_RCC_LSE_IsReady>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d1ee      	bne.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80070e4:	7ffb      	ldrb	r3, [r7, #31]
 80070e6:	77bb      	strb	r3, [r7, #30]
 80070e8:	e001      	b.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070ea:	7ffb      	ldrb	r3, [r7, #31]
 80070ec:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f003 0301 	and.w	r3, r3, #1
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d004      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	699b      	ldr	r3, [r3, #24]
 80070fe:	4618      	mov	r0, r3
 8007100:	f7ff fe2b 	bl	8006d5a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 0302 	and.w	r3, r3, #2
 800710c:	2b00      	cmp	r3, #0
 800710e:	d004      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	69db      	ldr	r3, [r3, #28]
 8007114:	4618      	mov	r0, r3
 8007116:	f7ff fe36 	bl	8006d86 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 0310 	and.w	r3, r3, #16
 8007122:	2b00      	cmp	r3, #0
 8007124:	d004      	beq.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800712a:	4618      	mov	r0, r3
 800712c:	f7ff fe5e 	bl	8006dec <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 0320 	and.w	r3, r3, #32
 8007138:	2b00      	cmp	r3, #0
 800713a:	d004      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007140:	4618      	mov	r0, r3
 8007142:	f7ff fe53 	bl	8006dec <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 0304 	and.w	r3, r3, #4
 800714e:	2b00      	cmp	r3, #0
 8007150:	d004      	beq.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a1b      	ldr	r3, [r3, #32]
 8007156:	4618      	mov	r0, r3
 8007158:	f7ff fe2b 	bl	8006db2 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 0308 	and.w	r3, r3, #8
 8007164:	2b00      	cmp	r3, #0
 8007166:	d004      	beq.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716c:	4618      	mov	r0, r3
 800716e:	f7ff fe20 	bl	8006db2 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800717a:	2b00      	cmp	r3, #0
 800717c:	d022      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007182:	4618      	mov	r0, r3
 8007184:	f7ff fe8e 	bl	8006ea4 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800718c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007190:	d107      	bne.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8007192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800719c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071a0:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071aa:	d10b      	bne.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	3304      	adds	r3, #4
 80071b0:	4618      	mov	r0, r3
 80071b2:	f000 f8e3 	bl	800737c <RCCEx_PLLSAI1_ConfigNQ>
 80071b6:	4603      	mov	r3, r0
 80071b8:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80071ba:	7ffb      	ldrb	r3, [r7, #31]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d001      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 80071c0:	7ffb      	ldrb	r3, [r7, #31]
 80071c2:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d02b      	beq.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071d8:	d008      	beq.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071e2:	d003      	beq.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d105      	bne.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f0:	4618      	mov	r0, r3
 80071f2:	f7ff fe2b 	bl	8006e4c <LL_RCC_SetRNGClockSource>
 80071f6:	e00a      	b.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x23e>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007200:	60fb      	str	r3, [r7, #12]
 8007202:	2000      	movs	r0, #0
 8007204:	f7ff fe22 	bl	8006e4c <LL_RCC_SetRNGClockSource>
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f7ff fe35 	bl	8006e78 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007212:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007216:	d107      	bne.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007222:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007226:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007230:	2b00      	cmp	r3, #0
 8007232:	d022      	beq.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007238:	4618      	mov	r0, r3
 800723a:	f7ff fe3e 	bl	8006eba <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007242:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007246:	d107      	bne.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007256:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800725c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007260:	d10b      	bne.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	3304      	adds	r3, #4
 8007266:	4618      	mov	r0, r3
 8007268:	f000 f8e3 	bl	8007432 <RCCEx_PLLSAI1_ConfigNR>
 800726c:	4603      	mov	r3, r0
 800726e:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8007270:	7ffb      	ldrb	r3, [r7, #31]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d001      	beq.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 8007276:	7ffb      	ldrb	r3, [r7, #31]
 8007278:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d004      	beq.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800728a:	4618      	mov	r0, r3
 800728c:	f7ff fd27 	bl	8006cde <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007298:	2b00      	cmp	r3, #0
 800729a:	d009      	beq.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7ff fd46 	bl	8006d32 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7ff fd2d 	bl	8006d0a <LL_RCC_SetSMPSClockSource>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2SCLK);
    }
  }
#endif

  return status;
 80072b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3720      	adds	r7, #32
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80072ba:	b580      	push	{r7, lr}
 80072bc:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80072be:	f7ff fcff 	bl	8006cc0 <LL_RCC_MSI_EnablePLLMode>
}
 80072c2:	bf00      	nop
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80072c6:	b580      	push	{r7, lr}
 80072c8:	b084      	sub	sp, #16
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80072ce:	2300      	movs	r3, #0
 80072d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80072d2:	f7ff fe5c 	bl	8006f8e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80072d6:	f7fc f8e5 	bl	80034a4 <HAL_GetTick>
 80072da:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80072dc:	e009      	b.n	80072f2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80072de:	f7fc f8e1 	bl	80034a4 <HAL_GetTick>
 80072e2:	4602      	mov	r2, r0
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d902      	bls.n	80072f2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80072ec:	2303      	movs	r3, #3
 80072ee:	73fb      	strb	r3, [r7, #15]
      break;
 80072f0:	e004      	b.n	80072fc <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80072f2:	f7ff fe5b 	bl	8006fac <LL_RCC_PLLSAI1_IsReady>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d1f0      	bne.n	80072de <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80072fc:	7bfb      	ldrb	r3, [r7, #15]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d137      	bne.n	8007372 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	021b      	lsls	r3, r3, #8
 8007312:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007316:	4313      	orrs	r3, r2
 8007318:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800731a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800732c:	4313      	orrs	r3, r2
 800732e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007330:	f7ff fe1e 	bl	8006f70 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007334:	f7fc f8b6 	bl	80034a4 <HAL_GetTick>
 8007338:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800733a:	e009      	b.n	8007350 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800733c:	f7fc f8b2 	bl	80034a4 <HAL_GetTick>
 8007340:	4602      	mov	r2, r0
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	2b02      	cmp	r3, #2
 8007348:	d902      	bls.n	8007350 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800734a:	2303      	movs	r3, #3
 800734c:	73fb      	strb	r3, [r7, #15]
        break;
 800734e:	e004      	b.n	800735a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007350:	f7ff fe2c 	bl	8006fac <LL_RCC_PLLSAI1_IsReady>
 8007354:	4603      	mov	r3, r0
 8007356:	2b01      	cmp	r3, #1
 8007358:	d1f0      	bne.n	800733c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800735a:	7bfb      	ldrb	r3, [r7, #15]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d108      	bne.n	8007372 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007364:	691a      	ldr	r2, [r3, #16]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800736e:	4313      	orrs	r3, r2
 8007370:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007372:	7bfb      	ldrb	r3, [r7, #15]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3710      	adds	r7, #16
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007384:	2300      	movs	r3, #0
 8007386:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007388:	f7ff fe01 	bl	8006f8e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800738c:	f7fc f88a 	bl	80034a4 <HAL_GetTick>
 8007390:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007392:	e009      	b.n	80073a8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007394:	f7fc f886 	bl	80034a4 <HAL_GetTick>
 8007398:	4602      	mov	r2, r0
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d902      	bls.n	80073a8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80073a2:	2303      	movs	r3, #3
 80073a4:	73fb      	strb	r3, [r7, #15]
      break;
 80073a6:	e004      	b.n	80073b2 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80073a8:	f7ff fe00 	bl	8006fac <LL_RCC_PLLSAI1_IsReady>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1f0      	bne.n	8007394 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80073b2:	7bfb      	ldrb	r3, [r7, #15]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d137      	bne.n	8007428 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80073b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	021b      	lsls	r3, r3, #8
 80073c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073cc:	4313      	orrs	r3, r2
 80073ce:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80073d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073e2:	4313      	orrs	r3, r2
 80073e4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80073e6:	f7ff fdc3 	bl	8006f70 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073ea:	f7fc f85b 	bl	80034a4 <HAL_GetTick>
 80073ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80073f0:	e009      	b.n	8007406 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80073f2:	f7fc f857 	bl	80034a4 <HAL_GetTick>
 80073f6:	4602      	mov	r2, r0
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d902      	bls.n	8007406 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8007400:	2303      	movs	r3, #3
 8007402:	73fb      	strb	r3, [r7, #15]
        break;
 8007404:	e004      	b.n	8007410 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007406:	f7ff fdd1 	bl	8006fac <LL_RCC_PLLSAI1_IsReady>
 800740a:	4603      	mov	r3, r0
 800740c:	2b01      	cmp	r3, #1
 800740e:	d1f0      	bne.n	80073f2 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8007410:	7bfb      	ldrb	r3, [r7, #15]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d108      	bne.n	8007428 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800741a:	691a      	ldr	r2, [r3, #16]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007424:	4313      	orrs	r3, r2
 8007426:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007428:	7bfb      	ldrb	r3, [r7, #15]
}
 800742a:	4618      	mov	r0, r3
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007432:	b580      	push	{r7, lr}
 8007434:	b084      	sub	sp, #16
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800743a:	2300      	movs	r3, #0
 800743c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800743e:	f7ff fda6 	bl	8006f8e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007442:	f7fc f82f 	bl	80034a4 <HAL_GetTick>
 8007446:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007448:	e009      	b.n	800745e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800744a:	f7fc f82b 	bl	80034a4 <HAL_GetTick>
 800744e:	4602      	mov	r2, r0
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	2b02      	cmp	r3, #2
 8007456:	d902      	bls.n	800745e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8007458:	2303      	movs	r3, #3
 800745a:	73fb      	strb	r3, [r7, #15]
      break;
 800745c:	e004      	b.n	8007468 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800745e:	f7ff fda5 	bl	8006fac <LL_RCC_PLLSAI1_IsReady>
 8007462:	4603      	mov	r3, r0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1f0      	bne.n	800744a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8007468:	7bfb      	ldrb	r3, [r7, #15]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d137      	bne.n	80074de <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800746e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	021b      	lsls	r3, r3, #8
 800747e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007482:	4313      	orrs	r3, r2
 8007484:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8007486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007498:	4313      	orrs	r3, r2
 800749a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800749c:	f7ff fd68 	bl	8006f70 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074a0:	f7fc f800 	bl	80034a4 <HAL_GetTick>
 80074a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80074a6:	e009      	b.n	80074bc <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80074a8:	f7fb fffc 	bl	80034a4 <HAL_GetTick>
 80074ac:	4602      	mov	r2, r0
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d902      	bls.n	80074bc <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80074b6:	2303      	movs	r3, #3
 80074b8:	73fb      	strb	r3, [r7, #15]
        break;
 80074ba:	e004      	b.n	80074c6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80074bc:	f7ff fd76 	bl	8006fac <LL_RCC_PLLSAI1_IsReady>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d1f0      	bne.n	80074a8 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80074c6:	7bfb      	ldrb	r3, [r7, #15]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d108      	bne.n	80074de <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80074cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074d0:	691a      	ldr	r2, [r3, #16]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80074da:	4313      	orrs	r3, r2
 80074dc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80074de:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d101      	bne.n	80074fa <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e090      	b.n	800761c <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007500:	b2db      	uxtb	r3, r3
 8007502:	2b00      	cmp	r3, #0
 8007504:	d106      	bne.n	8007514 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7fb faa2 	bl	8002a58 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2202      	movs	r2, #2
 8007518:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	22ca      	movs	r2, #202	; 0xca
 8007522:	625a      	str	r2, [r3, #36]	; 0x24
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2253      	movs	r2, #83	; 0x53
 800752a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 f89f 	bl	8007670 <RTC_EnterInitMode>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d009      	beq.n	800754c <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	22ff      	movs	r2, #255	; 0xff
 800753e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2204      	movs	r2, #4
 8007544:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	e067      	b.n	800761c <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	6812      	ldr	r2, [r2, #0]
 8007556:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800755a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800755e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	6899      	ldr	r1, [r3, #8]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	685a      	ldr	r2, [r3, #4]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	431a      	orrs	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	431a      	orrs	r2, r3
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	430a      	orrs	r2, r1
 800757c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	68d2      	ldr	r2, [r2, #12]
 8007586:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6919      	ldr	r1, [r3, #16]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	041a      	lsls	r2, r3, #16
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	430a      	orrs	r2, r1
 800759a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68da      	ldr	r2, [r3, #12]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075aa:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f022 0203 	bic.w	r2, r2, #3
 80075ba:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	69da      	ldr	r2, [r3, #28]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	695b      	ldr	r3, [r3, #20]
 80075ca:	431a      	orrs	r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	430a      	orrs	r2, r1
 80075d2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	f003 0320 	and.w	r3, r3, #32
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d113      	bne.n	800760a <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f81e 	bl	8007624 <HAL_RTC_WaitForSynchro>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00d      	beq.n	800760a <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	22ff      	movs	r2, #255	; 0xff
 80075f4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2204      	movs	r2, #4
 80075fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e008      	b.n	800761c <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	22ff      	movs	r2, #255	; 0xff
 8007610:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2201      	movs	r2, #1
 8007616:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800761a:	2300      	movs	r3, #0
  }
}
 800761c:	4618      	mov	r0, r3
 800761e:	3708      	adds	r7, #8
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68da      	ldr	r2, [r3, #12]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800763a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800763c:	f7fb ff32 	bl	80034a4 <HAL_GetTick>
 8007640:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007642:	e009      	b.n	8007658 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007644:	f7fb ff2e 	bl	80034a4 <HAL_GetTick>
 8007648:	4602      	mov	r2, r0
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007652:	d901      	bls.n	8007658 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007654:	2303      	movs	r3, #3
 8007656:	e007      	b.n	8007668 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	f003 0320 	and.w	r3, r3, #32
 8007662:	2b00      	cmp	r3, #0
 8007664:	d0ee      	beq.n	8007644 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	3710      	adds	r7, #16
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007682:	2b00      	cmp	r3, #0
 8007684:	d119      	bne.n	80076ba <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800768e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007690:	f7fb ff08 	bl	80034a4 <HAL_GetTick>
 8007694:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007696:	e009      	b.n	80076ac <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8007698:	f7fb ff04 	bl	80034a4 <HAL_GetTick>
 800769c:	4602      	mov	r2, r0
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076a6:	d901      	bls.n	80076ac <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e007      	b.n	80076bc <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d0ee      	beq.n	8007698 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <HAL_RTCEx_SetWakeUpTimer>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b086      	sub	sp, #24
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d101      	bne.n	80076de <HAL_RTCEx_SetWakeUpTimer+0x1a>
 80076da:	2302      	movs	r3, #2
 80076dc:	e089      	b.n	80077f2 <HAL_RTCEx_SetWakeUpTimer+0x12e>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2202      	movs	r2, #2
 80076ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	22ca      	movs	r2, #202	; 0xca
 80076f4:	625a      	str	r2, [r3, #36]	; 0x24
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2253      	movs	r2, #83	; 0x53
 80076fc:	625a      	str	r2, [r3, #36]	; 0x24
 
  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != 0U){
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007708:	2b00      	cmp	r3, #0
 800770a:	d020      	beq.n	800774e <HAL_RTCEx_SetWakeUpTimer+0x8a>
    tickstart = HAL_GetTick();
 800770c:	f7fb feca 	bl	80034a4 <HAL_GetTick>
 8007710:	6178      	str	r0, [r7, #20]

   /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8007712:	e015      	b.n	8007740 <HAL_RTCEx_SetWakeUpTimer+0x7c>
   {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007714:	f7fb fec6 	bl	80034a4 <HAL_GetTick>
 8007718:	4602      	mov	r2, r0
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	1ad3      	subs	r3, r2, r3
 800771e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007722:	d90d      	bls.n	8007740 <HAL_RTCEx_SetWakeUpTimer+0x7c>
      {
       /* Enable the write protection for RTC registers */
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	22ff      	movs	r2, #255	; 0xff
 800772a:	625a      	str	r2, [r3, #36]	; 0x24

       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2203      	movs	r2, #3
 8007730:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

       /* Process Unlocked */ 
       __HAL_UNLOCK(hrtc);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 2020 	strb.w	r2, [r3, #32]

       return HAL_TIMEOUT;
 800773c:	2303      	movs	r3, #3
 800773e:	e058      	b.n	80077f2 <HAL_RTCEx_SetWakeUpTimer+0x12e>
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	f003 0304 	and.w	r3, r3, #4
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1e2      	bne.n	8007714 <HAL_RTCEx_SetWakeUpTimer+0x50>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	689a      	ldr	r2, [r3, #8]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800775c:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 800775e:	f7fb fea1 	bl	80034a4 <HAL_GetTick>
 8007762:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007764:	e015      	b.n	8007792 <HAL_RTCEx_SetWakeUpTimer+0xce>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007766:	f7fb fe9d 	bl	80034a4 <HAL_GetTick>
 800776a:	4602      	mov	r2, r0
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007774:	d90d      	bls.n	8007792 <HAL_RTCEx_SetWakeUpTimer+0xce>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	22ff      	movs	r2, #255	; 0xff
 800777c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2203      	movs	r2, #3
 8007782:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */ 
      __HAL_UNLOCK(hrtc);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800778e:	2303      	movs	r3, #3
 8007790:	e02f      	b.n	80077f2 <HAL_RTCEx_SetWakeUpTimer+0x12e>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	f003 0304 	and.w	r3, r3, #4
 800779c:	2b00      	cmp	r3, #0
 800779e:	d0e2      	beq.n	8007766 <HAL_RTCEx_SetWakeUpTimer+0xa2>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	689a      	ldr	r2, [r3, #8]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f022 0207 	bic.w	r2, r2, #7
 80077ae:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	6899      	ldr	r1, [r3, #8]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	430a      	orrs	r2, r1
 80077be:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	615a      	str	r2, [r3, #20]

   /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	689a      	ldr	r2, [r3, #8]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80077d6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	22ff      	movs	r2, #255	; 0xff
 80077de:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3718      	adds	r7, #24
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b084      	sub	sp, #16
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d101      	bne.n	800780c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e095      	b.n	8007938 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007810:	2b00      	cmp	r3, #0
 8007812:	d108      	bne.n	8007826 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800781c:	d009      	beq.n	8007832 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	61da      	str	r2, [r3, #28]
 8007824:	e005      	b.n	8007832 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800783e:	b2db      	uxtb	r3, r3
 8007840:	2b00      	cmp	r3, #0
 8007842:	d106      	bne.n	8007852 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f7fb f9e1 	bl	8002c14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2202      	movs	r2, #2
 8007856:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007868:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007872:	d902      	bls.n	800787a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007874:	2300      	movs	r3, #0
 8007876:	60fb      	str	r3, [r7, #12]
 8007878:	e002      	b.n	8007880 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800787a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800787e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007888:	d007      	beq.n	800789a <HAL_SPI_Init+0xa0>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007892:	d002      	beq.n	800789a <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80078aa:	431a      	orrs	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	691b      	ldr	r3, [r3, #16]
 80078b0:	f003 0302 	and.w	r3, r3, #2
 80078b4:	431a      	orrs	r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	695b      	ldr	r3, [r3, #20]
 80078ba:	f003 0301 	and.w	r3, r3, #1
 80078be:	431a      	orrs	r2, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	699b      	ldr	r3, [r3, #24]
 80078c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078c8:	431a      	orrs	r2, r3
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	69db      	ldr	r3, [r3, #28]
 80078ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078d2:	431a      	orrs	r2, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6a1b      	ldr	r3, [r3, #32]
 80078d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078dc:	ea42 0103 	orr.w	r1, r2, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	430a      	orrs	r2, r1
 80078ee:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	699b      	ldr	r3, [r3, #24]
 80078f4:	0c1b      	lsrs	r3, r3, #16
 80078f6:	f003 0204 	and.w	r2, r3, #4
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fe:	f003 0310 	and.w	r3, r3, #16
 8007902:	431a      	orrs	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007908:	f003 0308 	and.w	r3, r3, #8
 800790c:	431a      	orrs	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007916:	ea42 0103 	orr.w	r1, r2, r3
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	430a      	orrs	r2, r1
 8007926:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2201      	movs	r2, #1
 8007932:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007936:	2300      	movs	r3, #0
}
 8007938:	4618      	mov	r0, r3
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b088      	sub	sp, #32
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	603b      	str	r3, [r7, #0]
 800794c:	4613      	mov	r3, r2
 800794e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007950:	2300      	movs	r3, #0
 8007952:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800795a:	2b01      	cmp	r3, #1
 800795c:	d101      	bne.n	8007962 <HAL_SPI_Transmit+0x22>
 800795e:	2302      	movs	r3, #2
 8007960:	e158      	b.n	8007c14 <HAL_SPI_Transmit+0x2d4>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2201      	movs	r2, #1
 8007966:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800796a:	f7fb fd9b 	bl	80034a4 <HAL_GetTick>
 800796e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007970:	88fb      	ldrh	r3, [r7, #6]
 8007972:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800797a:	b2db      	uxtb	r3, r3
 800797c:	2b01      	cmp	r3, #1
 800797e:	d002      	beq.n	8007986 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007980:	2302      	movs	r3, #2
 8007982:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007984:	e13d      	b.n	8007c02 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d002      	beq.n	8007992 <HAL_SPI_Transmit+0x52>
 800798c:	88fb      	ldrh	r3, [r7, #6]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d102      	bne.n	8007998 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007996:	e134      	b.n	8007c02 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2203      	movs	r2, #3
 800799c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	68ba      	ldr	r2, [r7, #8]
 80079aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	88fa      	ldrh	r2, [r7, #6]
 80079b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	88fa      	ldrh	r2, [r7, #6]
 80079b6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2200      	movs	r2, #0
 80079bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2200      	movs	r2, #0
 80079ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079e2:	d10f      	bne.n	8007a04 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a02:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a0e:	2b40      	cmp	r3, #64	; 0x40
 8007a10:	d007      	beq.n	8007a22 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a2a:	d94b      	bls.n	8007ac4 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d002      	beq.n	8007a3a <HAL_SPI_Transmit+0xfa>
 8007a34:	8afb      	ldrh	r3, [r7, #22]
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d13e      	bne.n	8007ab8 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3e:	881a      	ldrh	r2, [r3, #0]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a4a:	1c9a      	adds	r2, r3, #2
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	3b01      	subs	r3, #1
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007a5e:	e02b      	b.n	8007ab8 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	f003 0302 	and.w	r3, r3, #2
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	d112      	bne.n	8007a94 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a72:	881a      	ldrh	r2, [r3, #0]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7e:	1c9a      	adds	r2, r3, #2
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	b29a      	uxth	r2, r3
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007a92:	e011      	b.n	8007ab8 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a94:	f7fb fd06 	bl	80034a4 <HAL_GetTick>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	69bb      	ldr	r3, [r7, #24]
 8007a9c:	1ad3      	subs	r3, r2, r3
 8007a9e:	683a      	ldr	r2, [r7, #0]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d803      	bhi.n	8007aac <HAL_SPI_Transmit+0x16c>
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007aaa:	d102      	bne.n	8007ab2 <HAL_SPI_Transmit+0x172>
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d102      	bne.n	8007ab8 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007ab6:	e0a4      	b.n	8007c02 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1ce      	bne.n	8007a60 <HAL_SPI_Transmit+0x120>
 8007ac2:	e07c      	b.n	8007bbe <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d002      	beq.n	8007ad2 <HAL_SPI_Transmit+0x192>
 8007acc:	8afb      	ldrh	r3, [r7, #22]
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d170      	bne.n	8007bb4 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d912      	bls.n	8007b02 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae0:	881a      	ldrh	r2, [r3, #0]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aec:	1c9a      	adds	r2, r3, #2
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	3b02      	subs	r3, #2
 8007afa:	b29a      	uxth	r2, r3
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b00:	e058      	b.n	8007bb4 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	330c      	adds	r3, #12
 8007b0c:	7812      	ldrb	r2, [r2, #0]
 8007b0e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b14:	1c5a      	adds	r2, r3, #1
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	3b01      	subs	r3, #1
 8007b22:	b29a      	uxth	r2, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007b28:	e044      	b.n	8007bb4 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	f003 0302 	and.w	r3, r3, #2
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d12b      	bne.n	8007b90 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d912      	bls.n	8007b68 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b46:	881a      	ldrh	r2, [r3, #0]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b52:	1c9a      	adds	r2, r3, #2
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	3b02      	subs	r3, #2
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b66:	e025      	b.n	8007bb4 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	330c      	adds	r3, #12
 8007b72:	7812      	ldrb	r2, [r2, #0]
 8007b74:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7a:	1c5a      	adds	r2, r3, #1
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	3b01      	subs	r3, #1
 8007b88:	b29a      	uxth	r2, r3
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b8e:	e011      	b.n	8007bb4 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b90:	f7fb fc88 	bl	80034a4 <HAL_GetTick>
 8007b94:	4602      	mov	r2, r0
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	683a      	ldr	r2, [r7, #0]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d803      	bhi.n	8007ba8 <HAL_SPI_Transmit+0x268>
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ba6:	d102      	bne.n	8007bae <HAL_SPI_Transmit+0x26e>
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d102      	bne.n	8007bb4 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007bb2:	e026      	b.n	8007c02 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d1b5      	bne.n	8007b2a <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007bbe:	69ba      	ldr	r2, [r7, #24]
 8007bc0:	6839      	ldr	r1, [r7, #0]
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f000 fcdc 	bl	8008580 <SPI_EndRxTxTransaction>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d002      	beq.n	8007bd4 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2220      	movs	r2, #32
 8007bd2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d10a      	bne.n	8007bf2 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bdc:	2300      	movs	r3, #0
 8007bde:	613b      	str	r3, [r7, #16]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	613b      	str	r3, [r7, #16]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	613b      	str	r3, [r7, #16]
 8007bf0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d002      	beq.n	8007c00 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	77fb      	strb	r3, [r7, #31]
 8007bfe:	e000      	b.n	8007c02 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007c00:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2201      	movs	r2, #1
 8007c06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007c12:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3720      	adds	r7, #32
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b088      	sub	sp, #32
 8007c20:	af02      	add	r7, sp, #8
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	603b      	str	r3, [r7, #0]
 8007c28:	4613      	mov	r3, r2
 8007c2a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c38:	d112      	bne.n	8007c60 <HAL_SPI_Receive+0x44>
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d10e      	bne.n	8007c60 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2204      	movs	r2, #4
 8007c46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007c4a:	88fa      	ldrh	r2, [r7, #6]
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	9300      	str	r3, [sp, #0]
 8007c50:	4613      	mov	r3, r2
 8007c52:	68ba      	ldr	r2, [r7, #8]
 8007c54:	68b9      	ldr	r1, [r7, #8]
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	f000 f910 	bl	8007e7c <HAL_SPI_TransmitReceive>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	e109      	b.n	8007e74 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d101      	bne.n	8007c6e <HAL_SPI_Receive+0x52>
 8007c6a:	2302      	movs	r3, #2
 8007c6c:	e102      	b.n	8007e74 <HAL_SPI_Receive+0x258>
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2201      	movs	r2, #1
 8007c72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c76:	f7fb fc15 	bl	80034a4 <HAL_GetTick>
 8007c7a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d002      	beq.n	8007c8e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007c88:	2302      	movs	r3, #2
 8007c8a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007c8c:	e0e9      	b.n	8007e62 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d002      	beq.n	8007c9a <HAL_SPI_Receive+0x7e>
 8007c94:	88fb      	ldrh	r3, [r7, #6]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d102      	bne.n	8007ca0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007c9e:	e0e0      	b.n	8007e62 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2204      	movs	r2, #4
 8007ca4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2200      	movs	r2, #0
 8007cac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	68ba      	ldr	r2, [r7, #8]
 8007cb2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	88fa      	ldrh	r2, [r7, #6]
 8007cb8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	88fa      	ldrh	r2, [r7, #6]
 8007cc0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007cea:	d908      	bls.n	8007cfe <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	685a      	ldr	r2, [r3, #4]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007cfa:	605a      	str	r2, [r3, #4]
 8007cfc:	e007      	b.n	8007d0e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	685a      	ldr	r2, [r3, #4]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d0c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d16:	d10f      	bne.n	8007d38 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d26:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007d36:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d42:	2b40      	cmp	r3, #64	; 0x40
 8007d44:	d007      	beq.n	8007d56 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d54:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007d5e:	d867      	bhi.n	8007e30 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007d60:	e030      	b.n	8007dc4 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	f003 0301 	and.w	r3, r3, #1
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d117      	bne.n	8007da0 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f103 020c 	add.w	r2, r3, #12
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7c:	7812      	ldrb	r2, [r2, #0]
 8007d7e:	b2d2      	uxtb	r2, r2
 8007d80:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d86:	1c5a      	adds	r2, r3, #1
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	3b01      	subs	r3, #1
 8007d96:	b29a      	uxth	r2, r3
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007d9e:	e011      	b.n	8007dc4 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007da0:	f7fb fb80 	bl	80034a4 <HAL_GetTick>
 8007da4:	4602      	mov	r2, r0
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	1ad3      	subs	r3, r2, r3
 8007daa:	683a      	ldr	r2, [r7, #0]
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d803      	bhi.n	8007db8 <HAL_SPI_Receive+0x19c>
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007db6:	d102      	bne.n	8007dbe <HAL_SPI_Receive+0x1a2>
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d102      	bne.n	8007dc4 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007dc2:	e04e      	b.n	8007e62 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d1c8      	bne.n	8007d62 <HAL_SPI_Receive+0x146>
 8007dd0:	e034      	b.n	8007e3c <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	f003 0301 	and.w	r3, r3, #1
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d115      	bne.n	8007e0c <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68da      	ldr	r2, [r3, #12]
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dea:	b292      	uxth	r2, r2
 8007dec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df2:	1c9a      	adds	r2, r3, #2
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	3b01      	subs	r3, #1
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007e0a:	e011      	b.n	8007e30 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e0c:	f7fb fb4a 	bl	80034a4 <HAL_GetTick>
 8007e10:	4602      	mov	r2, r0
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	1ad3      	subs	r3, r2, r3
 8007e16:	683a      	ldr	r2, [r7, #0]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d803      	bhi.n	8007e24 <HAL_SPI_Receive+0x208>
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e22:	d102      	bne.n	8007e2a <HAL_SPI_Receive+0x20e>
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d102      	bne.n	8007e30 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007e2e:	e018      	b.n	8007e62 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1ca      	bne.n	8007dd2 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e3c:	693a      	ldr	r2, [r7, #16]
 8007e3e:	6839      	ldr	r1, [r7, #0]
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f000 fb45 	bl	80084d0 <SPI_EndRxTransaction>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d002      	beq.n	8007e52 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2220      	movs	r2, #32
 8007e50:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d002      	beq.n	8007e60 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	75fb      	strb	r3, [r7, #23]
 8007e5e:	e000      	b.n	8007e62 <HAL_SPI_Receive+0x246>
  }

error :
 8007e60:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2201      	movs	r2, #1
 8007e66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3718      	adds	r7, #24
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b08a      	sub	sp, #40	; 0x28
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	607a      	str	r2, [r7, #4]
 8007e88:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d101      	bne.n	8007ea2 <HAL_SPI_TransmitReceive+0x26>
 8007e9e:	2302      	movs	r3, #2
 8007ea0:	e1fb      	b.n	800829a <HAL_SPI_TransmitReceive+0x41e>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007eaa:	f7fb fafb 	bl	80034a4 <HAL_GetTick>
 8007eae:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007eb6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007ebe:	887b      	ldrh	r3, [r7, #2]
 8007ec0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007ec2:	887b      	ldrh	r3, [r7, #2]
 8007ec4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007ec6:	7efb      	ldrb	r3, [r7, #27]
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d00e      	beq.n	8007eea <HAL_SPI_TransmitReceive+0x6e>
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ed2:	d106      	bne.n	8007ee2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d102      	bne.n	8007ee2 <HAL_SPI_TransmitReceive+0x66>
 8007edc:	7efb      	ldrb	r3, [r7, #27]
 8007ede:	2b04      	cmp	r3, #4
 8007ee0:	d003      	beq.n	8007eea <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007ee2:	2302      	movs	r3, #2
 8007ee4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007ee8:	e1cd      	b.n	8008286 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d005      	beq.n	8007efc <HAL_SPI_TransmitReceive+0x80>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d002      	beq.n	8007efc <HAL_SPI_TransmitReceive+0x80>
 8007ef6:	887b      	ldrh	r3, [r7, #2]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d103      	bne.n	8007f04 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007f02:	e1c0      	b.n	8008286 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	2b04      	cmp	r3, #4
 8007f0e:	d003      	beq.n	8007f18 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2205      	movs	r2, #5
 8007f14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	887a      	ldrh	r2, [r7, #2]
 8007f28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	887a      	ldrh	r2, [r7, #2]
 8007f30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	68ba      	ldr	r2, [r7, #8]
 8007f38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	887a      	ldrh	r2, [r7, #2]
 8007f3e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	887a      	ldrh	r2, [r7, #2]
 8007f44:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f5a:	d802      	bhi.n	8007f62 <HAL_SPI_TransmitReceive+0xe6>
 8007f5c:	8a3b      	ldrh	r3, [r7, #16]
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d908      	bls.n	8007f74 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	685a      	ldr	r2, [r3, #4]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007f70:	605a      	str	r2, [r3, #4]
 8007f72:	e007      	b.n	8007f84 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	685a      	ldr	r2, [r3, #4]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007f82:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f8e:	2b40      	cmp	r3, #64	; 0x40
 8007f90:	d007      	beq.n	8007fa2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fa0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007faa:	d97c      	bls.n	80080a6 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d002      	beq.n	8007fba <HAL_SPI_TransmitReceive+0x13e>
 8007fb4:	8a7b      	ldrh	r3, [r7, #18]
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d169      	bne.n	800808e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fbe:	881a      	ldrh	r2, [r3, #0]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fca:	1c9a      	adds	r2, r3, #2
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	b29a      	uxth	r2, r3
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fde:	e056      	b.n	800808e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	f003 0302 	and.w	r3, r3, #2
 8007fea:	2b02      	cmp	r3, #2
 8007fec:	d11b      	bne.n	8008026 <HAL_SPI_TransmitReceive+0x1aa>
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d016      	beq.n	8008026 <HAL_SPI_TransmitReceive+0x1aa>
 8007ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d113      	bne.n	8008026 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008002:	881a      	ldrh	r2, [r3, #0]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800800e:	1c9a      	adds	r2, r3, #2
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008018:	b29b      	uxth	r3, r3
 800801a:	3b01      	subs	r3, #1
 800801c:	b29a      	uxth	r2, r3
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008022:	2300      	movs	r3, #0
 8008024:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	f003 0301 	and.w	r3, r3, #1
 8008030:	2b01      	cmp	r3, #1
 8008032:	d11c      	bne.n	800806e <HAL_SPI_TransmitReceive+0x1f2>
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800803a:	b29b      	uxth	r3, r3
 800803c:	2b00      	cmp	r3, #0
 800803e:	d016      	beq.n	800806e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	68da      	ldr	r2, [r3, #12]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804a:	b292      	uxth	r2, r2
 800804c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008052:	1c9a      	adds	r2, r3, #2
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800805e:	b29b      	uxth	r3, r3
 8008060:	3b01      	subs	r3, #1
 8008062:	b29a      	uxth	r2, r3
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800806a:	2301      	movs	r3, #1
 800806c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800806e:	f7fb fa19 	bl	80034a4 <HAL_GetTick>
 8008072:	4602      	mov	r2, r0
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	1ad3      	subs	r3, r2, r3
 8008078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800807a:	429a      	cmp	r2, r3
 800807c:	d807      	bhi.n	800808e <HAL_SPI_TransmitReceive+0x212>
 800807e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008080:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008084:	d003      	beq.n	800808e <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800808c:	e0fb      	b.n	8008286 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008092:	b29b      	uxth	r3, r3
 8008094:	2b00      	cmp	r3, #0
 8008096:	d1a3      	bne.n	8007fe0 <HAL_SPI_TransmitReceive+0x164>
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800809e:	b29b      	uxth	r3, r3
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d19d      	bne.n	8007fe0 <HAL_SPI_TransmitReceive+0x164>
 80080a4:	e0df      	b.n	8008266 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d003      	beq.n	80080b6 <HAL_SPI_TransmitReceive+0x23a>
 80080ae:	8a7b      	ldrh	r3, [r7, #18]
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	f040 80cb 	bne.w	800824c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d912      	bls.n	80080e6 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c4:	881a      	ldrh	r2, [r3, #0]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d0:	1c9a      	adds	r2, r3, #2
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080da:	b29b      	uxth	r3, r3
 80080dc:	3b02      	subs	r3, #2
 80080de:	b29a      	uxth	r2, r3
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80080e4:	e0b2      	b.n	800824c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	330c      	adds	r3, #12
 80080f0:	7812      	ldrb	r2, [r2, #0]
 80080f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f8:	1c5a      	adds	r2, r3, #1
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008102:	b29b      	uxth	r3, r3
 8008104:	3b01      	subs	r3, #1
 8008106:	b29a      	uxth	r2, r3
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800810c:	e09e      	b.n	800824c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	f003 0302 	and.w	r3, r3, #2
 8008118:	2b02      	cmp	r3, #2
 800811a:	d134      	bne.n	8008186 <HAL_SPI_TransmitReceive+0x30a>
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008120:	b29b      	uxth	r3, r3
 8008122:	2b00      	cmp	r3, #0
 8008124:	d02f      	beq.n	8008186 <HAL_SPI_TransmitReceive+0x30a>
 8008126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008128:	2b01      	cmp	r3, #1
 800812a:	d12c      	bne.n	8008186 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008130:	b29b      	uxth	r3, r3
 8008132:	2b01      	cmp	r3, #1
 8008134:	d912      	bls.n	800815c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800813a:	881a      	ldrh	r2, [r3, #0]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008146:	1c9a      	adds	r2, r3, #2
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008150:	b29b      	uxth	r3, r3
 8008152:	3b02      	subs	r3, #2
 8008154:	b29a      	uxth	r2, r3
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	87da      	strh	r2, [r3, #62]	; 0x3e
 800815a:	e012      	b.n	8008182 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	330c      	adds	r3, #12
 8008166:	7812      	ldrb	r2, [r2, #0]
 8008168:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800816e:	1c5a      	adds	r2, r3, #1
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008178:	b29b      	uxth	r3, r3
 800817a:	3b01      	subs	r3, #1
 800817c:	b29a      	uxth	r2, r3
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008182:	2300      	movs	r3, #0
 8008184:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	f003 0301 	and.w	r3, r3, #1
 8008190:	2b01      	cmp	r3, #1
 8008192:	d148      	bne.n	8008226 <HAL_SPI_TransmitReceive+0x3aa>
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800819a:	b29b      	uxth	r3, r3
 800819c:	2b00      	cmp	r3, #0
 800819e:	d042      	beq.n	8008226 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d923      	bls.n	80081f4 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	68da      	ldr	r2, [r3, #12]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b6:	b292      	uxth	r2, r2
 80081b8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081be:	1c9a      	adds	r2, r3, #2
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	3b02      	subs	r3, #2
 80081ce:	b29a      	uxth	r2, r3
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081dc:	b29b      	uxth	r3, r3
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d81f      	bhi.n	8008222 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	685a      	ldr	r2, [r3, #4]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80081f0:	605a      	str	r2, [r3, #4]
 80081f2:	e016      	b.n	8008222 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f103 020c 	add.w	r2, r3, #12
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008200:	7812      	ldrb	r2, [r2, #0]
 8008202:	b2d2      	uxtb	r2, r2
 8008204:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820a:	1c5a      	adds	r2, r3, #1
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008216:	b29b      	uxth	r3, r3
 8008218:	3b01      	subs	r3, #1
 800821a:	b29a      	uxth	r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008222:	2301      	movs	r3, #1
 8008224:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008226:	f7fb f93d 	bl	80034a4 <HAL_GetTick>
 800822a:	4602      	mov	r2, r0
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	1ad3      	subs	r3, r2, r3
 8008230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008232:	429a      	cmp	r2, r3
 8008234:	d803      	bhi.n	800823e <HAL_SPI_TransmitReceive+0x3c2>
 8008236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008238:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800823c:	d102      	bne.n	8008244 <HAL_SPI_TransmitReceive+0x3c8>
 800823e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008240:	2b00      	cmp	r3, #0
 8008242:	d103      	bne.n	800824c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008244:	2303      	movs	r3, #3
 8008246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800824a:	e01c      	b.n	8008286 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008250:	b29b      	uxth	r3, r3
 8008252:	2b00      	cmp	r3, #0
 8008254:	f47f af5b 	bne.w	800810e <HAL_SPI_TransmitReceive+0x292>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800825e:	b29b      	uxth	r3, r3
 8008260:	2b00      	cmp	r3, #0
 8008262:	f47f af54 	bne.w	800810e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008266:	69fa      	ldr	r2, [r7, #28]
 8008268:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800826a:	68f8      	ldr	r0, [r7, #12]
 800826c:	f000 f988 	bl	8008580 <SPI_EndRxTxTransaction>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d006      	beq.n	8008284 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2220      	movs	r2, #32
 8008280:	661a      	str	r2, [r3, #96]	; 0x60
 8008282:	e000      	b.n	8008286 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008284:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2201      	movs	r2, #1
 800828a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008296:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800829a:	4618      	mov	r0, r3
 800829c:	3728      	adds	r7, #40	; 0x28
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
	...

080082a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b088      	sub	sp, #32
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	603b      	str	r3, [r7, #0]
 80082b0:	4613      	mov	r3, r2
 80082b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80082b4:	f7fb f8f6 	bl	80034a4 <HAL_GetTick>
 80082b8:	4602      	mov	r2, r0
 80082ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082bc:	1a9b      	subs	r3, r3, r2
 80082be:	683a      	ldr	r2, [r7, #0]
 80082c0:	4413      	add	r3, r2
 80082c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80082c4:	f7fb f8ee 	bl	80034a4 <HAL_GetTick>
 80082c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80082ca:	4b39      	ldr	r3, [pc, #228]	; (80083b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	015b      	lsls	r3, r3, #5
 80082d0:	0d1b      	lsrs	r3, r3, #20
 80082d2:	69fa      	ldr	r2, [r7, #28]
 80082d4:	fb02 f303 	mul.w	r3, r2, r3
 80082d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80082da:	e054      	b.n	8008386 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082e2:	d050      	beq.n	8008386 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80082e4:	f7fb f8de 	bl	80034a4 <HAL_GetTick>
 80082e8:	4602      	mov	r2, r0
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	1ad3      	subs	r3, r2, r3
 80082ee:	69fa      	ldr	r2, [r7, #28]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d902      	bls.n	80082fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d13d      	bne.n	8008376 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	685a      	ldr	r2, [r3, #4]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008308:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008312:	d111      	bne.n	8008338 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800831c:	d004      	beq.n	8008328 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008326:	d107      	bne.n	8008338 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008336:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800833c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008340:	d10f      	bne.n	8008362 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008350:	601a      	str	r2, [r3, #0]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008360:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2201      	movs	r2, #1
 8008366:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008372:	2303      	movs	r3, #3
 8008374:	e017      	b.n	80083a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d101      	bne.n	8008380 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800837c:	2300      	movs	r3, #0
 800837e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	3b01      	subs	r3, #1
 8008384:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	689a      	ldr	r2, [r3, #8]
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	4013      	ands	r3, r2
 8008390:	68ba      	ldr	r2, [r7, #8]
 8008392:	429a      	cmp	r2, r3
 8008394:	bf0c      	ite	eq
 8008396:	2301      	moveq	r3, #1
 8008398:	2300      	movne	r3, #0
 800839a:	b2db      	uxtb	r3, r3
 800839c:	461a      	mov	r2, r3
 800839e:	79fb      	ldrb	r3, [r7, #7]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d19b      	bne.n	80082dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3720      	adds	r7, #32
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	20000038 	.word	0x20000038

080083b4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b088      	sub	sp, #32
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	607a      	str	r2, [r7, #4]
 80083c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80083c2:	f7fb f86f 	bl	80034a4 <HAL_GetTick>
 80083c6:	4602      	mov	r2, r0
 80083c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ca:	1a9b      	subs	r3, r3, r2
 80083cc:	683a      	ldr	r2, [r7, #0]
 80083ce:	4413      	add	r3, r2
 80083d0:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80083d2:	f7fb f867 	bl	80034a4 <HAL_GetTick>
 80083d6:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80083d8:	4b3c      	ldr	r3, [pc, #240]	; (80084cc <SPI_WaitFifoStateUntilTimeout+0x118>)
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	4613      	mov	r3, r2
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	4413      	add	r3, r2
 80083e2:	00da      	lsls	r2, r3, #3
 80083e4:	1ad3      	subs	r3, r2, r3
 80083e6:	0d1b      	lsrs	r3, r3, #20
 80083e8:	69fa      	ldr	r2, [r7, #28]
 80083ea:	fb02 f303 	mul.w	r3, r2, r3
 80083ee:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 80083f0:	e05f      	b.n	80084b2 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80083f8:	d106      	bne.n	8008408 <SPI_WaitFifoStateUntilTimeout+0x54>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d103      	bne.n	8008408 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	330c      	adds	r3, #12
 8008406:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800840e:	d050      	beq.n	80084b2 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008410:	f7fb f848 	bl	80034a4 <HAL_GetTick>
 8008414:	4602      	mov	r2, r0
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	1ad3      	subs	r3, r2, r3
 800841a:	69fa      	ldr	r2, [r7, #28]
 800841c:	429a      	cmp	r2, r3
 800841e:	d902      	bls.n	8008426 <SPI_WaitFifoStateUntilTimeout+0x72>
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d13d      	bne.n	80084a2 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	685a      	ldr	r2, [r3, #4]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008434:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800843e:	d111      	bne.n	8008464 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008448:	d004      	beq.n	8008454 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008452:	d107      	bne.n	8008464 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008462:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008468:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800846c:	d10f      	bne.n	800848e <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800847c:	601a      	str	r2, [r3, #0]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800848c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2201      	movs	r2, #1
 8008492:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2200      	movs	r2, #0
 800849a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800849e:	2303      	movs	r3, #3
 80084a0:	e010      	b.n	80084c4 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d101      	bne.n	80084ac <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 80084a8:	2300      	movs	r3, #0
 80084aa:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	3b01      	subs	r3, #1
 80084b0:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	689a      	ldr	r2, [r3, #8]
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	4013      	ands	r3, r2
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	429a      	cmp	r2, r3
 80084c0:	d197      	bne.n	80083f2 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3720      	adds	r7, #32
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	20000038 	.word	0x20000038

080084d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b086      	sub	sp, #24
 80084d4:	af02      	add	r7, sp, #8
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084e4:	d111      	bne.n	800850a <SPI_EndRxTransaction+0x3a>
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084ee:	d004      	beq.n	80084fa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084f8:	d107      	bne.n	800850a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008508:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	9300      	str	r3, [sp, #0]
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	2200      	movs	r2, #0
 8008512:	2180      	movs	r1, #128	; 0x80
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f7ff fec5 	bl	80082a4 <SPI_WaitFlagStateUntilTimeout>
 800851a:	4603      	mov	r3, r0
 800851c:	2b00      	cmp	r3, #0
 800851e:	d007      	beq.n	8008530 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008524:	f043 0220 	orr.w	r2, r3, #32
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800852c:	2303      	movs	r3, #3
 800852e:	e023      	b.n	8008578 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008538:	d11d      	bne.n	8008576 <SPI_EndRxTransaction+0xa6>
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008542:	d004      	beq.n	800854e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800854c:	d113      	bne.n	8008576 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	9300      	str	r3, [sp, #0]
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	2200      	movs	r2, #0
 8008556:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	f7ff ff2a 	bl	80083b4 <SPI_WaitFifoStateUntilTimeout>
 8008560:	4603      	mov	r3, r0
 8008562:	2b00      	cmp	r3, #0
 8008564:	d007      	beq.n	8008576 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800856a:	f043 0220 	orr.w	r2, r3, #32
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008572:	2303      	movs	r3, #3
 8008574:	e000      	b.n	8008578 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b086      	sub	sp, #24
 8008584:	af02      	add	r7, sp, #8
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	9300      	str	r3, [sp, #0]
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	2200      	movs	r2, #0
 8008594:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008598:	68f8      	ldr	r0, [r7, #12]
 800859a:	f7ff ff0b 	bl	80083b4 <SPI_WaitFifoStateUntilTimeout>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d007      	beq.n	80085b4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085a8:	f043 0220 	orr.w	r2, r3, #32
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80085b0:	2303      	movs	r3, #3
 80085b2:	e027      	b.n	8008604 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	9300      	str	r3, [sp, #0]
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	2200      	movs	r2, #0
 80085bc:	2180      	movs	r1, #128	; 0x80
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f7ff fe70 	bl	80082a4 <SPI_WaitFlagStateUntilTimeout>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d007      	beq.n	80085da <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085ce:	f043 0220 	orr.w	r2, r3, #32
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80085d6:	2303      	movs	r3, #3
 80085d8:	e014      	b.n	8008604 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	9300      	str	r3, [sp, #0]
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	2200      	movs	r2, #0
 80085e2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80085e6:	68f8      	ldr	r0, [r7, #12]
 80085e8:	f7ff fee4 	bl	80083b4 <SPI_WaitFifoStateUntilTimeout>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d007      	beq.n	8008602 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085f6:	f043 0220 	orr.w	r2, r3, #32
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80085fe:	2303      	movs	r3, #3
 8008600:	e000      	b.n	8008604 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008602:	2300      	movs	r3, #0
}
 8008604:	4618      	mov	r0, r3
 8008606:	3710      	adds	r7, #16
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d101      	bne.n	800861e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e049      	b.n	80086b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008624:	b2db      	uxtb	r3, r3
 8008626:	2b00      	cmp	r3, #0
 8008628:	d106      	bne.n	8008638 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2200      	movs	r2, #0
 800862e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f7fa fd3c 	bl	80030b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2202      	movs	r2, #2
 800863c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	3304      	adds	r3, #4
 8008648:	4619      	mov	r1, r3
 800864a:	4610      	mov	r0, r2
 800864c:	f000 f9cc 	bl	80089e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2201      	movs	r2, #1
 8008654:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2201      	movs	r2, #1
 8008664:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2201      	movs	r2, #1
 800867c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2201      	movs	r2, #1
 800868c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3708      	adds	r7, #8
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
	...

080086bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80086bc:	b480      	push	{r7}
 80086be:	b085      	sub	sp, #20
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d001      	beq.n	80086d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80086d0:	2301      	movs	r3, #1
 80086d2:	e036      	b.n	8008742 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2202      	movs	r2, #2
 80086d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	68da      	ldr	r2, [r3, #12]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f042 0201 	orr.w	r2, r2, #1
 80086ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a17      	ldr	r2, [pc, #92]	; (8008750 <HAL_TIM_Base_Start_IT+0x94>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d004      	beq.n	8008700 <HAL_TIM_Base_Start_IT+0x44>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086fe:	d115      	bne.n	800872c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	689a      	ldr	r2, [r3, #8]
 8008706:	4b13      	ldr	r3, [pc, #76]	; (8008754 <HAL_TIM_Base_Start_IT+0x98>)
 8008708:	4013      	ands	r3, r2
 800870a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2b06      	cmp	r3, #6
 8008710:	d015      	beq.n	800873e <HAL_TIM_Base_Start_IT+0x82>
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008718:	d011      	beq.n	800873e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f042 0201 	orr.w	r2, r2, #1
 8008728:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800872a:	e008      	b.n	800873e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f042 0201 	orr.w	r2, r2, #1
 800873a:	601a      	str	r2, [r3, #0]
 800873c:	e000      	b.n	8008740 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800873e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3714      	adds	r7, #20
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr
 800874e:	bf00      	nop
 8008750:	40012c00 	.word	0x40012c00
 8008754:	00010007 	.word	0x00010007

08008758 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	691b      	ldr	r3, [r3, #16]
 8008766:	f003 0302 	and.w	r3, r3, #2
 800876a:	2b02      	cmp	r3, #2
 800876c:	d122      	bne.n	80087b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	f003 0302 	and.w	r3, r3, #2
 8008778:	2b02      	cmp	r3, #2
 800877a:	d11b      	bne.n	80087b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f06f 0202 	mvn.w	r2, #2
 8008784:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2201      	movs	r2, #1
 800878a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	699b      	ldr	r3, [r3, #24]
 8008792:	f003 0303 	and.w	r3, r3, #3
 8008796:	2b00      	cmp	r3, #0
 8008798:	d003      	beq.n	80087a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 f905 	bl	80089aa <HAL_TIM_IC_CaptureCallback>
 80087a0:	e005      	b.n	80087ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 f8f7 	bl	8008996 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 f908 	bl	80089be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	691b      	ldr	r3, [r3, #16]
 80087ba:	f003 0304 	and.w	r3, r3, #4
 80087be:	2b04      	cmp	r3, #4
 80087c0:	d122      	bne.n	8008808 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	f003 0304 	and.w	r3, r3, #4
 80087cc:	2b04      	cmp	r3, #4
 80087ce:	d11b      	bne.n	8008808 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f06f 0204 	mvn.w	r2, #4
 80087d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2202      	movs	r2, #2
 80087de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	699b      	ldr	r3, [r3, #24]
 80087e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d003      	beq.n	80087f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 f8db 	bl	80089aa <HAL_TIM_IC_CaptureCallback>
 80087f4:	e005      	b.n	8008802 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 f8cd 	bl	8008996 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 f8de 	bl	80089be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	691b      	ldr	r3, [r3, #16]
 800880e:	f003 0308 	and.w	r3, r3, #8
 8008812:	2b08      	cmp	r3, #8
 8008814:	d122      	bne.n	800885c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	f003 0308 	and.w	r3, r3, #8
 8008820:	2b08      	cmp	r3, #8
 8008822:	d11b      	bne.n	800885c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f06f 0208 	mvn.w	r2, #8
 800882c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2204      	movs	r2, #4
 8008832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	69db      	ldr	r3, [r3, #28]
 800883a:	f003 0303 	and.w	r3, r3, #3
 800883e:	2b00      	cmp	r3, #0
 8008840:	d003      	beq.n	800884a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 f8b1 	bl	80089aa <HAL_TIM_IC_CaptureCallback>
 8008848:	e005      	b.n	8008856 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 f8a3 	bl	8008996 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 f8b4 	bl	80089be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	691b      	ldr	r3, [r3, #16]
 8008862:	f003 0310 	and.w	r3, r3, #16
 8008866:	2b10      	cmp	r3, #16
 8008868:	d122      	bne.n	80088b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	f003 0310 	and.w	r3, r3, #16
 8008874:	2b10      	cmp	r3, #16
 8008876:	d11b      	bne.n	80088b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f06f 0210 	mvn.w	r2, #16
 8008880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2208      	movs	r2, #8
 8008886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	69db      	ldr	r3, [r3, #28]
 800888e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008892:	2b00      	cmp	r3, #0
 8008894:	d003      	beq.n	800889e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 f887 	bl	80089aa <HAL_TIM_IC_CaptureCallback>
 800889c:	e005      	b.n	80088aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 f879 	bl	8008996 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 f88a 	bl	80089be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	691b      	ldr	r3, [r3, #16]
 80088b6:	f003 0301 	and.w	r3, r3, #1
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d10e      	bne.n	80088dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	f003 0301 	and.w	r3, r3, #1
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d107      	bne.n	80088dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f06f 0201 	mvn.w	r2, #1
 80088d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f7fa f80c 	bl	80028f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088e6:	2b80      	cmp	r3, #128	; 0x80
 80088e8:	d10e      	bne.n	8008908 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088f4:	2b80      	cmp	r3, #128	; 0x80
 80088f6:	d107      	bne.n	8008908 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f000 f8de 	bl	8008ac4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008916:	d10e      	bne.n	8008936 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	68db      	ldr	r3, [r3, #12]
 800891e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008922:	2b80      	cmp	r3, #128	; 0x80
 8008924:	d107      	bne.n	8008936 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800892e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 f8d1 	bl	8008ad8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	691b      	ldr	r3, [r3, #16]
 800893c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008940:	2b40      	cmp	r3, #64	; 0x40
 8008942:	d10e      	bne.n	8008962 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68db      	ldr	r3, [r3, #12]
 800894a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800894e:	2b40      	cmp	r3, #64	; 0x40
 8008950:	d107      	bne.n	8008962 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800895a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 f838 	bl	80089d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	691b      	ldr	r3, [r3, #16]
 8008968:	f003 0320 	and.w	r3, r3, #32
 800896c:	2b20      	cmp	r3, #32
 800896e:	d10e      	bne.n	800898e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	f003 0320 	and.w	r3, r3, #32
 800897a:	2b20      	cmp	r3, #32
 800897c:	d107      	bne.n	800898e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f06f 0220 	mvn.w	r2, #32
 8008986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 f891 	bl	8008ab0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800898e:	bf00      	nop
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008996:	b480      	push	{r7}
 8008998:	b083      	sub	sp, #12
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800899e:	bf00      	nop
 80089a0:	370c      	adds	r7, #12
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr

080089aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80089aa:	b480      	push	{r7}
 80089ac:	b083      	sub	sp, #12
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80089b2:	bf00      	nop
 80089b4:	370c      	adds	r7, #12
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr

080089be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80089be:	b480      	push	{r7}
 80089c0:	b083      	sub	sp, #12
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80089c6:	bf00      	nop
 80089c8:	370c      	adds	r7, #12
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr

080089d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80089d2:	b480      	push	{r7}
 80089d4:	b083      	sub	sp, #12
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80089da:	bf00      	nop
 80089dc:	370c      	adds	r7, #12
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr
	...

080089e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b085      	sub	sp, #20
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4a2a      	ldr	r2, [pc, #168]	; (8008aa4 <TIM_Base_SetConfig+0xbc>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d003      	beq.n	8008a08 <TIM_Base_SetConfig+0x20>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a06:	d108      	bne.n	8008a1a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	68fa      	ldr	r2, [r7, #12]
 8008a16:	4313      	orrs	r3, r2
 8008a18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4a21      	ldr	r2, [pc, #132]	; (8008aa4 <TIM_Base_SetConfig+0xbc>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d00b      	beq.n	8008a3a <TIM_Base_SetConfig+0x52>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a28:	d007      	beq.n	8008a3a <TIM_Base_SetConfig+0x52>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4a1e      	ldr	r2, [pc, #120]	; (8008aa8 <TIM_Base_SetConfig+0xc0>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d003      	beq.n	8008a3a <TIM_Base_SetConfig+0x52>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	4a1d      	ldr	r2, [pc, #116]	; (8008aac <TIM_Base_SetConfig+0xc4>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d108      	bne.n	8008a4c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	695b      	ldr	r3, [r3, #20]
 8008a56:	4313      	orrs	r3, r2
 8008a58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	68fa      	ldr	r2, [r7, #12]
 8008a5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	689a      	ldr	r2, [r3, #8]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4a0c      	ldr	r2, [pc, #48]	; (8008aa4 <TIM_Base_SetConfig+0xbc>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d007      	beq.n	8008a88 <TIM_Base_SetConfig+0xa0>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	4a0b      	ldr	r2, [pc, #44]	; (8008aa8 <TIM_Base_SetConfig+0xc0>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d003      	beq.n	8008a88 <TIM_Base_SetConfig+0xa0>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4a0a      	ldr	r2, [pc, #40]	; (8008aac <TIM_Base_SetConfig+0xc4>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d103      	bne.n	8008a90 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	691a      	ldr	r2, [r3, #16]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2201      	movs	r2, #1
 8008a94:	615a      	str	r2, [r3, #20]
}
 8008a96:	bf00      	nop
 8008a98:	3714      	adds	r7, #20
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr
 8008aa2:	bf00      	nop
 8008aa4:	40012c00 	.word	0x40012c00
 8008aa8:	40014400 	.word	0x40014400
 8008aac:	40014800 	.word	0x40014800

08008ab0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ab8:	bf00      	nop
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008acc:	bf00      	nop
 8008ace:	370c      	adds	r7, #12
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008ae0:	bf00      	nop
 8008ae2:	370c      	adds	r7, #12
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <LL_RCC_GetUSARTClockSource>:
{
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8008af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008af8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	4013      	ands	r3, r2
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <LL_RCC_GetLPUARTClockSource>:
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b18:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	4013      	ands	r3, r2
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d101      	bne.n	8008b3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e042      	b.n	8008bc4 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d106      	bne.n	8008b56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f7fa fb47 	bl	80031e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2224      	movs	r2, #36	; 0x24
 8008b5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f022 0201 	bic.w	r2, r2, #1
 8008b6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 f82c 	bl	8008bcc <UART_SetConfig>
 8008b74:	4603      	mov	r3, r0
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d101      	bne.n	8008b7e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e022      	b.n	8008bc4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d002      	beq.n	8008b8c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 fa2e 	bl	8008fe8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	685a      	ldr	r2, [r3, #4]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	689a      	ldr	r2, [r3, #8]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008baa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f042 0201 	orr.w	r2, r2, #1
 8008bba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 fab5 	bl	800912c <UART_CheckIdleState>
 8008bc2:	4603      	mov	r3, r0
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3708      	adds	r7, #8
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bcc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008bd0:	b088      	sub	sp, #32
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	689a      	ldr	r2, [r3, #8]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	691b      	ldr	r3, [r3, #16]
 8008be2:	431a      	orrs	r2, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	695b      	ldr	r3, [r3, #20]
 8008be8:	431a      	orrs	r2, r3
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	69db      	ldr	r3, [r3, #28]
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bf6:	69fa      	ldr	r2, [r7, #28]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	4ba4      	ldr	r3, [pc, #656]	; (8008e94 <UART_SetConfig+0x2c8>)
 8008c04:	4013      	ands	r3, r2
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	6812      	ldr	r2, [r2, #0]
 8008c0a:	69f9      	ldr	r1, [r7, #28]
 8008c0c:	430b      	orrs	r3, r1
 8008c0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	68da      	ldr	r2, [r3, #12]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	430a      	orrs	r2, r1
 8008c24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	699b      	ldr	r3, [r3, #24]
 8008c2a:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a99      	ldr	r2, [pc, #612]	; (8008e98 <UART_SetConfig+0x2cc>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d004      	beq.n	8008c40 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6a1b      	ldr	r3, [r3, #32]
 8008c3a:	69fa      	ldr	r2, [r7, #28]
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008c4a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	6812      	ldr	r2, [r2, #0]
 8008c52:	69f9      	ldr	r1, [r7, #28]
 8008c54:	430b      	orrs	r3, r1
 8008c56:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c5e:	f023 010f 	bic.w	r1, r3, #15
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	430a      	orrs	r2, r1
 8008c6c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a8a      	ldr	r2, [pc, #552]	; (8008e9c <UART_SetConfig+0x2d0>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d121      	bne.n	8008cbc <UART_SetConfig+0xf0>
 8008c78:	2003      	movs	r0, #3
 8008c7a:	f7ff ff37 	bl	8008aec <LL_RCC_GetUSARTClockSource>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	2b03      	cmp	r3, #3
 8008c82:	d817      	bhi.n	8008cb4 <UART_SetConfig+0xe8>
 8008c84:	a201      	add	r2, pc, #4	; (adr r2, 8008c8c <UART_SetConfig+0xc0>)
 8008c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c8a:	bf00      	nop
 8008c8c:	08008c9d 	.word	0x08008c9d
 8008c90:	08008ca9 	.word	0x08008ca9
 8008c94:	08008ca3 	.word	0x08008ca3
 8008c98:	08008caf 	.word	0x08008caf
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	76fb      	strb	r3, [r7, #27]
 8008ca0:	e038      	b.n	8008d14 <UART_SetConfig+0x148>
 8008ca2:	2302      	movs	r3, #2
 8008ca4:	76fb      	strb	r3, [r7, #27]
 8008ca6:	e035      	b.n	8008d14 <UART_SetConfig+0x148>
 8008ca8:	2304      	movs	r3, #4
 8008caa:	76fb      	strb	r3, [r7, #27]
 8008cac:	e032      	b.n	8008d14 <UART_SetConfig+0x148>
 8008cae:	2308      	movs	r3, #8
 8008cb0:	76fb      	strb	r3, [r7, #27]
 8008cb2:	e02f      	b.n	8008d14 <UART_SetConfig+0x148>
 8008cb4:	2310      	movs	r3, #16
 8008cb6:	76fb      	strb	r3, [r7, #27]
 8008cb8:	bf00      	nop
 8008cba:	e02b      	b.n	8008d14 <UART_SetConfig+0x148>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a75      	ldr	r2, [pc, #468]	; (8008e98 <UART_SetConfig+0x2cc>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d124      	bne.n	8008d10 <UART_SetConfig+0x144>
 8008cc6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008cca:	f7ff ff1f 	bl	8008b0c <LL_RCC_GetLPUARTClockSource>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cd4:	d012      	beq.n	8008cfc <UART_SetConfig+0x130>
 8008cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cda:	d802      	bhi.n	8008ce2 <UART_SetConfig+0x116>
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d007      	beq.n	8008cf0 <UART_SetConfig+0x124>
 8008ce0:	e012      	b.n	8008d08 <UART_SetConfig+0x13c>
 8008ce2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ce6:	d006      	beq.n	8008cf6 <UART_SetConfig+0x12a>
 8008ce8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008cec:	d009      	beq.n	8008d02 <UART_SetConfig+0x136>
 8008cee:	e00b      	b.n	8008d08 <UART_SetConfig+0x13c>
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	76fb      	strb	r3, [r7, #27]
 8008cf4:	e00e      	b.n	8008d14 <UART_SetConfig+0x148>
 8008cf6:	2302      	movs	r3, #2
 8008cf8:	76fb      	strb	r3, [r7, #27]
 8008cfa:	e00b      	b.n	8008d14 <UART_SetConfig+0x148>
 8008cfc:	2304      	movs	r3, #4
 8008cfe:	76fb      	strb	r3, [r7, #27]
 8008d00:	e008      	b.n	8008d14 <UART_SetConfig+0x148>
 8008d02:	2308      	movs	r3, #8
 8008d04:	76fb      	strb	r3, [r7, #27]
 8008d06:	e005      	b.n	8008d14 <UART_SetConfig+0x148>
 8008d08:	2310      	movs	r3, #16
 8008d0a:	76fb      	strb	r3, [r7, #27]
 8008d0c:	bf00      	nop
 8008d0e:	e001      	b.n	8008d14 <UART_SetConfig+0x148>
 8008d10:	2310      	movs	r3, #16
 8008d12:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a5f      	ldr	r2, [pc, #380]	; (8008e98 <UART_SetConfig+0x2cc>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	f040 808e 	bne.w	8008e3c <UART_SetConfig+0x270>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d20:	7efb      	ldrb	r3, [r7, #27]
 8008d22:	2b08      	cmp	r3, #8
 8008d24:	d823      	bhi.n	8008d6e <UART_SetConfig+0x1a2>
 8008d26:	a201      	add	r2, pc, #4	; (adr r2, 8008d2c <UART_SetConfig+0x160>)
 8008d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d2c:	08008d51 	.word	0x08008d51
 8008d30:	08008d6f 	.word	0x08008d6f
 8008d34:	08008d59 	.word	0x08008d59
 8008d38:	08008d6f 	.word	0x08008d6f
 8008d3c:	08008d5f 	.word	0x08008d5f
 8008d40:	08008d6f 	.word	0x08008d6f
 8008d44:	08008d6f 	.word	0x08008d6f
 8008d48:	08008d6f 	.word	0x08008d6f
 8008d4c:	08008d67 	.word	0x08008d67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d50:	f7fd feae 	bl	8006ab0 <HAL_RCC_GetPCLK1Freq>
 8008d54:	6178      	str	r0, [r7, #20]
        break;
 8008d56:	e00f      	b.n	8008d78 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d58:	4b51      	ldr	r3, [pc, #324]	; (8008ea0 <UART_SetConfig+0x2d4>)
 8008d5a:	617b      	str	r3, [r7, #20]
        break;
 8008d5c:	e00c      	b.n	8008d78 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d5e:	f7fd fe29 	bl	80069b4 <HAL_RCC_GetSysClockFreq>
 8008d62:	6178      	str	r0, [r7, #20]
        break;
 8008d64:	e008      	b.n	8008d78 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d6a:	617b      	str	r3, [r7, #20]
        break;
 8008d6c:	e004      	b.n	8008d78 <UART_SetConfig+0x1ac>
      default:
        pclk = 0U;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	76bb      	strb	r3, [r7, #26]
        break;
 8008d76:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	f000 811c 	beq.w	8008fb8 <UART_SetConfig+0x3ec>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d84:	4a47      	ldr	r2, [pc, #284]	; (8008ea4 <UART_SetConfig+0x2d8>)
 8008d86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d92:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	685a      	ldr	r2, [r3, #4]
 8008d98:	4613      	mov	r3, r2
 8008d9a:	005b      	lsls	r3, r3, #1
 8008d9c:	4413      	add	r3, r2
 8008d9e:	68ba      	ldr	r2, [r7, #8]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d305      	bcc.n	8008db0 <UART_SetConfig+0x1e4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008daa:	68ba      	ldr	r2, [r7, #8]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d902      	bls.n	8008db6 <UART_SetConfig+0x1ea>
      {
        ret = HAL_ERROR;
 8008db0:	2301      	movs	r3, #1
 8008db2:	76bb      	strb	r3, [r7, #26]
 8008db4:	e100      	b.n	8008fb8 <UART_SetConfig+0x3ec>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range 
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	4618      	mov	r0, r3
 8008dba:	f04f 0100 	mov.w	r1, #0
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc2:	4a38      	ldr	r2, [pc, #224]	; (8008ea4 <UART_SetConfig+0x2d8>)
 8008dc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	f04f 0400 	mov.w	r4, #0
 8008dce:	461a      	mov	r2, r3
 8008dd0:	4623      	mov	r3, r4
 8008dd2:	f7f7 f9db 	bl	800018c <__aeabi_uldivmod>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	460c      	mov	r4, r1
 8008dda:	4619      	mov	r1, r3
 8008ddc:	4622      	mov	r2, r4
 8008dde:	f04f 0300 	mov.w	r3, #0
 8008de2:	f04f 0400 	mov.w	r4, #0
 8008de6:	0214      	lsls	r4, r2, #8
 8008de8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008dec:	020b      	lsls	r3, r1, #8
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	6852      	ldr	r2, [r2, #4]
 8008df2:	0852      	lsrs	r2, r2, #1
 8008df4:	4611      	mov	r1, r2
 8008df6:	f04f 0200 	mov.w	r2, #0
 8008dfa:	eb13 0b01 	adds.w	fp, r3, r1
 8008dfe:	eb44 0c02 	adc.w	ip, r4, r2
 8008e02:	4658      	mov	r0, fp
 8008e04:	4661      	mov	r1, ip
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	f04f 0400 	mov.w	r4, #0
 8008e0e:	461a      	mov	r2, r3
 8008e10:	4623      	mov	r3, r4
 8008e12:	f7f7 f9bb 	bl	800018c <__aeabi_uldivmod>
 8008e16:	4603      	mov	r3, r0
 8008e18:	460c      	mov	r4, r1
 8008e1a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e22:	d308      	bcc.n	8008e36 <UART_SetConfig+0x26a>
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e2a:	d204      	bcs.n	8008e36 <UART_SetConfig+0x26a>
        {
          huart->Instance->BRR = usartdiv;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	693a      	ldr	r2, [r7, #16]
 8008e32:	60da      	str	r2, [r3, #12]
 8008e34:	e0c0      	b.n	8008fb8 <UART_SetConfig+0x3ec>
        }
        else
        {
          ret = HAL_ERROR;
 8008e36:	2301      	movs	r3, #1
 8008e38:	76bb      	strb	r3, [r7, #26]
 8008e3a:	e0bd      	b.n	8008fb8 <UART_SetConfig+0x3ec>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	69db      	ldr	r3, [r3, #28]
 8008e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e44:	d169      	bne.n	8008f1a <UART_SetConfig+0x34e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8008e46:	7efb      	ldrb	r3, [r7, #27]
 8008e48:	3b01      	subs	r3, #1
 8008e4a:	2b07      	cmp	r3, #7
 8008e4c:	d82c      	bhi.n	8008ea8 <UART_SetConfig+0x2dc>
 8008e4e:	a201      	add	r2, pc, #4	; (adr r2, 8008e54 <UART_SetConfig+0x288>)
 8008e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e54:	08008e75 	.word	0x08008e75
 8008e58:	08008e7d 	.word	0x08008e7d
 8008e5c:	08008ea9 	.word	0x08008ea9
 8008e60:	08008e83 	.word	0x08008e83
 8008e64:	08008ea9 	.word	0x08008ea9
 8008e68:	08008ea9 	.word	0x08008ea9
 8008e6c:	08008ea9 	.word	0x08008ea9
 8008e70:	08008e8b 	.word	0x08008e8b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e74:	f7fd fe32 	bl	8006adc <HAL_RCC_GetPCLK2Freq>
 8008e78:	6178      	str	r0, [r7, #20]
        break;
 8008e7a:	e01a      	b.n	8008eb2 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e7c:	4b08      	ldr	r3, [pc, #32]	; (8008ea0 <UART_SetConfig+0x2d4>)
 8008e7e:	617b      	str	r3, [r7, #20]
        break;
 8008e80:	e017      	b.n	8008eb2 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e82:	f7fd fd97 	bl	80069b4 <HAL_RCC_GetSysClockFreq>
 8008e86:	6178      	str	r0, [r7, #20]
        break;
 8008e88:	e013      	b.n	8008eb2 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e8e:	617b      	str	r3, [r7, #20]
        break;
 8008e90:	e00f      	b.n	8008eb2 <UART_SetConfig+0x2e6>
 8008e92:	bf00      	nop
 8008e94:	cfff69f3 	.word	0xcfff69f3
 8008e98:	40008000 	.word	0x40008000
 8008e9c:	40013800 	.word	0x40013800
 8008ea0:	00f42400 	.word	0x00f42400
 8008ea4:	0800ca28 	.word	0x0800ca28
      default:
        pclk = 0U;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008eac:	2301      	movs	r3, #1
 8008eae:	76bb      	strb	r3, [r7, #26]
        break;
 8008eb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d07f      	beq.n	8008fb8 <UART_SetConfig+0x3ec>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ebc:	4a48      	ldr	r2, [pc, #288]	; (8008fe0 <UART_SetConfig+0x414>)
 8008ebe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	fbb3 f3f2 	udiv	r3, r3, r2
 8008eca:	005a      	lsls	r2, r3, #1
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	085b      	lsrs	r3, r3, #1
 8008ed2:	441a      	add	r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	2b0f      	cmp	r3, #15
 8008ee4:	d916      	bls.n	8008f14 <UART_SetConfig+0x348>
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008eec:	d212      	bcs.n	8008f14 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	f023 030f 	bic.w	r3, r3, #15
 8008ef6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	085b      	lsrs	r3, r3, #1
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	f003 0307 	and.w	r3, r3, #7
 8008f02:	b29a      	uxth	r2, r3
 8008f04:	89fb      	ldrh	r3, [r7, #14]
 8008f06:	4313      	orrs	r3, r2
 8008f08:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	89fa      	ldrh	r2, [r7, #14]
 8008f10:	60da      	str	r2, [r3, #12]
 8008f12:	e051      	b.n	8008fb8 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 8008f14:	2301      	movs	r3, #1
 8008f16:	76bb      	strb	r3, [r7, #26]
 8008f18:	e04e      	b.n	8008fb8 <UART_SetConfig+0x3ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008f1a:	7efb      	ldrb	r3, [r7, #27]
 8008f1c:	3b01      	subs	r3, #1
 8008f1e:	2b07      	cmp	r3, #7
 8008f20:	d821      	bhi.n	8008f66 <UART_SetConfig+0x39a>
 8008f22:	a201      	add	r2, pc, #4	; (adr r2, 8008f28 <UART_SetConfig+0x35c>)
 8008f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f28:	08008f49 	.word	0x08008f49
 8008f2c:	08008f51 	.word	0x08008f51
 8008f30:	08008f67 	.word	0x08008f67
 8008f34:	08008f57 	.word	0x08008f57
 8008f38:	08008f67 	.word	0x08008f67
 8008f3c:	08008f67 	.word	0x08008f67
 8008f40:	08008f67 	.word	0x08008f67
 8008f44:	08008f5f 	.word	0x08008f5f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f48:	f7fd fdc8 	bl	8006adc <HAL_RCC_GetPCLK2Freq>
 8008f4c:	6178      	str	r0, [r7, #20]
        break;
 8008f4e:	e00f      	b.n	8008f70 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f50:	4b24      	ldr	r3, [pc, #144]	; (8008fe4 <UART_SetConfig+0x418>)
 8008f52:	617b      	str	r3, [r7, #20]
        break;
 8008f54:	e00c      	b.n	8008f70 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f56:	f7fd fd2d 	bl	80069b4 <HAL_RCC_GetSysClockFreq>
 8008f5a:	6178      	str	r0, [r7, #20]
        break;
 8008f5c:	e008      	b.n	8008f70 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f62:	617b      	str	r3, [r7, #20]
        break;
 8008f64:	e004      	b.n	8008f70 <UART_SetConfig+0x3a4>
      default:
        pclk = 0U;
 8008f66:	2300      	movs	r3, #0
 8008f68:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	76bb      	strb	r3, [r7, #26]
        break;
 8008f6e:	bf00      	nop
    }

    if (pclk != 0U)
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d020      	beq.n	8008fb8 <UART_SetConfig+0x3ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7a:	4a19      	ldr	r2, [pc, #100]	; (8008fe0 <UART_SetConfig+0x414>)
 8008f7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f80:	461a      	mov	r2, r3
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	fbb3 f2f2 	udiv	r2, r3, r2
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	085b      	lsrs	r3, r3, #1
 8008f8e:	441a      	add	r2, r3
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	2b0f      	cmp	r3, #15
 8008fa0:	d908      	bls.n	8008fb4 <UART_SetConfig+0x3e8>
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fa8:	d204      	bcs.n	8008fb4 <UART_SetConfig+0x3e8>
      {
        huart->Instance->BRR = usartdiv;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	693a      	ldr	r2, [r7, #16]
 8008fb0:	60da      	str	r2, [r3, #12]
 8008fb2:	e001      	b.n	8008fb8 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8008fd4:	7ebb      	ldrb	r3, [r7, #26]
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3720      	adds	r7, #32
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8008fe0:	0800ca28 	.word	0x0800ca28
 8008fe4:	00f42400 	.word	0x00f42400

08008fe8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff4:	f003 0301 	and.w	r3, r3, #1
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d00a      	beq.n	8009012 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	430a      	orrs	r2, r1
 8009010:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009016:	f003 0302 	and.w	r3, r3, #2
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00a      	beq.n	8009034 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	430a      	orrs	r2, r1
 8009032:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009038:	f003 0304 	and.w	r3, r3, #4
 800903c:	2b00      	cmp	r3, #0
 800903e:	d00a      	beq.n	8009056 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	430a      	orrs	r2, r1
 8009054:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800905a:	f003 0308 	and.w	r3, r3, #8
 800905e:	2b00      	cmp	r3, #0
 8009060:	d00a      	beq.n	8009078 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	430a      	orrs	r2, r1
 8009076:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800907c:	f003 0310 	and.w	r3, r3, #16
 8009080:	2b00      	cmp	r3, #0
 8009082:	d00a      	beq.n	800909a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	430a      	orrs	r2, r1
 8009098:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800909e:	f003 0320 	and.w	r3, r3, #32
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00a      	beq.n	80090bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	430a      	orrs	r2, r1
 80090ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d01a      	beq.n	80090fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	430a      	orrs	r2, r1
 80090dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090e6:	d10a      	bne.n	80090fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	430a      	orrs	r2, r1
 80090fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009106:	2b00      	cmp	r3, #0
 8009108:	d00a      	beq.n	8009120 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	430a      	orrs	r2, r1
 800911e:	605a      	str	r2, [r3, #4]
  }
}
 8009120:	bf00      	nop
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b086      	sub	sp, #24
 8009130:	af02      	add	r7, sp, #8
 8009132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800913c:	f7fa f9b2 	bl	80034a4 <HAL_GetTick>
 8009140:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f003 0308 	and.w	r3, r3, #8
 800914c:	2b08      	cmp	r3, #8
 800914e:	d10e      	bne.n	800916e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009150:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009154:	9300      	str	r3, [sp, #0]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2200      	movs	r2, #0
 800915a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 f82c 	bl	80091bc <UART_WaitOnFlagUntilTimeout>
 8009164:	4603      	mov	r3, r0
 8009166:	2b00      	cmp	r3, #0
 8009168:	d001      	beq.n	800916e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800916a:	2303      	movs	r3, #3
 800916c:	e022      	b.n	80091b4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f003 0304 	and.w	r3, r3, #4
 8009178:	2b04      	cmp	r3, #4
 800917a:	d10e      	bne.n	800919a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800917c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009180:	9300      	str	r3, [sp, #0]
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2200      	movs	r2, #0
 8009186:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 f816 	bl	80091bc <UART_WaitOnFlagUntilTimeout>
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d001      	beq.n	800919a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009196:	2303      	movs	r3, #3
 8009198:	e00c      	b.n	80091b4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2220      	movs	r2, #32
 800919e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2220      	movs	r2, #32
 80091a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80091b2:	2300      	movs	r3, #0
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3710      	adds	r7, #16
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	60b9      	str	r1, [r7, #8]
 80091c6:	603b      	str	r3, [r7, #0]
 80091c8:	4613      	mov	r3, r2
 80091ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091cc:	e062      	b.n	8009294 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091d4:	d05e      	beq.n	8009294 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091d6:	f7fa f965 	bl	80034a4 <HAL_GetTick>
 80091da:	4602      	mov	r2, r0
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	1ad3      	subs	r3, r2, r3
 80091e0:	69ba      	ldr	r2, [r7, #24]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d302      	bcc.n	80091ec <UART_WaitOnFlagUntilTimeout+0x30>
 80091e6:	69bb      	ldr	r3, [r7, #24]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d11d      	bne.n	8009228 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	681a      	ldr	r2, [r3, #0]
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80091fa:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	689a      	ldr	r2, [r3, #8]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f022 0201 	bic.w	r2, r2, #1
 800920a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2220      	movs	r2, #32
 8009210:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2220      	movs	r2, #32
 8009218:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2200      	movs	r2, #0
 8009220:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009224:	2303      	movs	r3, #3
 8009226:	e045      	b.n	80092b4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f003 0304 	and.w	r3, r3, #4
 8009232:	2b00      	cmp	r3, #0
 8009234:	d02e      	beq.n	8009294 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	69db      	ldr	r3, [r3, #28]
 800923c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009240:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009244:	d126      	bne.n	8009294 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800924e:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800925e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	689a      	ldr	r2, [r3, #8]
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f022 0201 	bic.w	r2, r2, #1
 800926e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2220      	movs	r2, #32
 8009274:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2220      	movs	r2, #32
 800927c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2220      	movs	r2, #32
 8009284:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2200      	movs	r2, #0
 800928c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8009290:	2303      	movs	r3, #3
 8009292:	e00f      	b.n	80092b4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	69da      	ldr	r2, [r3, #28]
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	4013      	ands	r3, r2
 800929e:	68ba      	ldr	r2, [r7, #8]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	bf0c      	ite	eq
 80092a4:	2301      	moveq	r3, #1
 80092a6:	2300      	movne	r3, #0
 80092a8:	b2db      	uxtb	r3, r3
 80092aa:	461a      	mov	r2, r3
 80092ac:	79fb      	ldrb	r3, [r7, #7]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d08d      	beq.n	80091ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80092b2:	2300      	movs	r3, #0
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3710      	adds	r7, #16
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80092bc:	b480      	push	{r7}
 80092be:	b085      	sub	sp, #20
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d101      	bne.n	80092d2 <HAL_UARTEx_DisableFifoMode+0x16>
 80092ce:	2302      	movs	r3, #2
 80092d0:	e027      	b.n	8009322 <HAL_UARTEx_DisableFifoMode+0x66>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2224      	movs	r2, #36	; 0x24
 80092de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f022 0201 	bic.w	r2, r2, #1
 80092f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009300:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2200      	movs	r2, #0
 8009306:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	68fa      	ldr	r2, [r7, #12]
 800930e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2220      	movs	r2, #32
 8009314:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	3714      	adds	r7, #20
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr

0800932e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800932e:	b580      	push	{r7, lr}
 8009330:	b084      	sub	sp, #16
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
 8009336:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800933e:	2b01      	cmp	r3, #1
 8009340:	d101      	bne.n	8009346 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009342:	2302      	movs	r3, #2
 8009344:	e02d      	b.n	80093a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2201      	movs	r2, #1
 800934a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2224      	movs	r2, #36	; 0x24
 8009352:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f022 0201 	bic.w	r2, r2, #1
 800936c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	683a      	ldr	r2, [r7, #0]
 800937e:	430a      	orrs	r2, r1
 8009380:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 f850 	bl	8009428 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	68fa      	ldr	r2, [r7, #12]
 800938e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2220      	movs	r2, #32
 8009394:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2200      	movs	r2, #0
 800939c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80093a0:	2300      	movs	r3, #0
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3710      	adds	r7, #16
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}

080093aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b084      	sub	sp, #16
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
 80093b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d101      	bne.n	80093c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80093be:	2302      	movs	r3, #2
 80093c0:	e02d      	b.n	800941e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2201      	movs	r2, #1
 80093c6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2224      	movs	r2, #36	; 0x24
 80093ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f022 0201 	bic.w	r2, r2, #1
 80093e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	683a      	ldr	r2, [r7, #0]
 80093fa:	430a      	orrs	r2, r1
 80093fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 f812 	bl	8009428 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	68fa      	ldr	r2, [r7, #12]
 800940a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2220      	movs	r2, #32
 8009410:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800941c:	2300      	movs	r3, #0
}
 800941e:	4618      	mov	r0, r3
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
	...

08009428 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009428:	b480      	push	{r7}
 800942a:	b089      	sub	sp, #36	; 0x24
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009430:	4a2f      	ldr	r2, [pc, #188]	; (80094f0 <UARTEx_SetNbDataToProcess+0xc8>)
 8009432:	f107 0314 	add.w	r3, r7, #20
 8009436:	e892 0003 	ldmia.w	r2, {r0, r1}
 800943a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800943e:	4a2d      	ldr	r2, [pc, #180]	; (80094f4 <UARTEx_SetNbDataToProcess+0xcc>)
 8009440:	f107 030c 	add.w	r3, r7, #12
 8009444:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009448:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009450:	2b00      	cmp	r3, #0
 8009452:	d108      	bne.n	8009466 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2201      	movs	r2, #1
 8009458:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2201      	movs	r2, #1
 8009460:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009464:	e03d      	b.n	80094e2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009466:	2308      	movs	r3, #8
 8009468:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800946a:	2308      	movs	r3, #8
 800946c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	689b      	ldr	r3, [r3, #8]
 8009474:	0e5b      	lsrs	r3, r3, #25
 8009476:	b2db      	uxtb	r3, r3
 8009478:	f003 0307 	and.w	r3, r3, #7
 800947c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	0f5b      	lsrs	r3, r3, #29
 8009486:	b2db      	uxtb	r3, r3
 8009488:	f003 0307 	and.w	r3, r3, #7
 800948c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800948e:	7fbb      	ldrb	r3, [r7, #30]
 8009490:	7f3a      	ldrb	r2, [r7, #28]
 8009492:	f107 0120 	add.w	r1, r7, #32
 8009496:	440a      	add	r2, r1
 8009498:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800949c:	fb02 f303 	mul.w	r3, r2, r3
 80094a0:	7f3a      	ldrb	r2, [r7, #28]
 80094a2:	f107 0120 	add.w	r1, r7, #32
 80094a6:	440a      	add	r2, r1
 80094a8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80094ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80094b0:	b29a      	uxth	r2, r3
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80094b8:	7ffb      	ldrb	r3, [r7, #31]
 80094ba:	7f7a      	ldrb	r2, [r7, #29]
 80094bc:	f107 0120 	add.w	r1, r7, #32
 80094c0:	440a      	add	r2, r1
 80094c2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80094c6:	fb02 f303 	mul.w	r3, r2, r3
 80094ca:	7f7a      	ldrb	r2, [r7, #29]
 80094cc:	f107 0120 	add.w	r1, r7, #32
 80094d0:	440a      	add	r2, r1
 80094d2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80094d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80094da:	b29a      	uxth	r2, r3
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80094e2:	bf00      	nop
 80094e4:	3724      	adds	r7, #36	; 0x24
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr
 80094ee:	bf00      	nop
 80094f0:	0800c830 	.word	0x0800c830
 80094f4:	0800c838 	.word	0x0800c838

080094f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b085      	sub	sp, #20
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009500:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009504:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800950c:	b29a      	uxth	r2, r3
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	b29b      	uxth	r3, r3
 8009512:	4313      	orrs	r3, r2
 8009514:	b29a      	uxth	r2, r3
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800951c:	2300      	movs	r3, #0
}
 800951e:	4618      	mov	r0, r3
 8009520:	3714      	adds	r7, #20
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr

0800952a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800952a:	b480      	push	{r7}
 800952c:	b085      	sub	sp, #20
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009532:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009536:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800953e:	b29a      	uxth	r2, r3
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	b29b      	uxth	r3, r3
 8009544:	43db      	mvns	r3, r3
 8009546:	b29b      	uxth	r3, r3
 8009548:	4013      	ands	r3, r2
 800954a:	b29a      	uxth	r2, r3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009552:	2300      	movs	r3, #0
}
 8009554:	4618      	mov	r0, r3
 8009556:	3714      	adds	r7, #20
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009560:	b084      	sub	sp, #16
 8009562:	b580      	push	{r7, lr}
 8009564:	b082      	sub	sp, #8
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
 800956a:	f107 0014 	add.w	r0, r7, #20
 800956e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2201      	movs	r2, #1
 8009576:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2200      	movs	r2, #0
 800957e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2200      	movs	r2, #0
 800958e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f7ff ffb0 	bl	80094f8 <USB_EnableGlobalInt>

  return HAL_OK;
 8009598:	2300      	movs	r3, #0
}
 800959a:	4618      	mov	r0, r3
 800959c:	3708      	adds	r7, #8
 800959e:	46bd      	mov	sp, r7
 80095a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80095a4:	b004      	add	sp, #16
 80095a6:	4770      	bx	lr

080095a8 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b088      	sub	sp, #32
 80095ac:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80095ae:	2300      	movs	r3, #0
 80095b0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80095b2:	f107 0308 	add.w	r3, r7, #8
 80095b6:	2218      	movs	r2, #24
 80095b8:	2100      	movs	r1, #0
 80095ba:	4618      	mov	r0, r3
 80095bc:	f001 f966 	bl	800a88c <Osal_MemSet>
  rq.ogf = 0x3f;
 80095c0:	233f      	movs	r3, #63	; 0x3f
 80095c2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80095c4:	2381      	movs	r3, #129	; 0x81
 80095c6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80095c8:	1dfb      	adds	r3, r7, #7
 80095ca:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80095cc:	2301      	movs	r3, #1
 80095ce:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80095d0:	f107 0308 	add.w	r3, r7, #8
 80095d4:	2100      	movs	r1, #0
 80095d6:	4618      	mov	r0, r3
 80095d8:	f000 ffe4 	bl	800a5a4 <hci_send_req>
 80095dc:	4603      	mov	r3, r0
 80095de:	2b00      	cmp	r3, #0
 80095e0:	da01      	bge.n	80095e6 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80095e2:	23ff      	movs	r3, #255	; 0xff
 80095e4:	e000      	b.n	80095e8 <aci_gap_set_non_discoverable+0x40>
  return status;
 80095e6:	79fb      	ldrb	r3, [r7, #7]
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3720      	adds	r7, #32
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 80095f0:	b5b0      	push	{r4, r5, r7, lr}
 80095f2:	b0ce      	sub	sp, #312	; 0x138
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	4605      	mov	r5, r0
 80095f8:	460c      	mov	r4, r1
 80095fa:	4610      	mov	r0, r2
 80095fc:	4619      	mov	r1, r3
 80095fe:	1dfb      	adds	r3, r7, #7
 8009600:	462a      	mov	r2, r5
 8009602:	701a      	strb	r2, [r3, #0]
 8009604:	1d3b      	adds	r3, r7, #4
 8009606:	4622      	mov	r2, r4
 8009608:	801a      	strh	r2, [r3, #0]
 800960a:	1cbb      	adds	r3, r7, #2
 800960c:	4602      	mov	r2, r0
 800960e:	801a      	strh	r2, [r3, #0]
 8009610:	1dbb      	adds	r3, r7, #6
 8009612:	460a      	mov	r2, r1
 8009614:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8009616:	f107 0310 	add.w	r3, r7, #16
 800961a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800961e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8009622:	3308      	adds	r3, #8
 8009624:	f107 0210 	add.w	r2, r7, #16
 8009628:	4413      	add	r3, r2
 800962a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800962e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8009632:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8009636:	4413      	add	r3, r2
 8009638:	3309      	adds	r3, #9
 800963a:	f107 0210 	add.w	r2, r7, #16
 800963e:	4413      	add	r3, r2
 8009640:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009644:	f107 030f 	add.w	r3, r7, #15
 8009648:	2200      	movs	r2, #0
 800964a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800964c:	2300      	movs	r3, #0
 800964e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8009652:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009656:	1dfa      	adds	r2, r7, #7
 8009658:	7812      	ldrb	r2, [r2, #0]
 800965a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800965c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009660:	3301      	adds	r3, #1
 8009662:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8009666:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800966a:	1d3a      	adds	r2, r7, #4
 800966c:	8812      	ldrh	r2, [r2, #0]
 800966e:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8009672:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009676:	3302      	adds	r3, #2
 8009678:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800967c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009680:	1cba      	adds	r2, r7, #2
 8009682:	8812      	ldrh	r2, [r2, #0]
 8009684:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8009688:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800968c:	3302      	adds	r3, #2
 800968e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8009692:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009696:	1dba      	adds	r2, r7, #6
 8009698:	7812      	ldrb	r2, [r2, #0]
 800969a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800969c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096a0:	3301      	adds	r3, #1
 80096a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80096a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80096aa:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80096ae:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80096b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096b4:	3301      	adds	r3, #1
 80096b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80096ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80096be:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80096c2:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80096c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096c8:	3301      	adds	r3, #1
 80096ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80096ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80096d2:	3308      	adds	r3, #8
 80096d4:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80096d8:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80096dc:	4618      	mov	r0, r3
 80096de:	f001 f8c5 	bl	800a86c <Osal_MemCpy>
    index_input += Local_Name_Length;
 80096e2:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80096e6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80096ea:	4413      	add	r3, r2
 80096ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80096f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80096f4:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80096f8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80096fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096fe:	3301      	adds	r3, #1
 8009700:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8009704:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009708:	3301      	adds	r3, #1
 800970a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800970e:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8009712:	4618      	mov	r0, r3
 8009714:	f001 f8aa 	bl	800a86c <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8009718:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800971c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009720:	4413      	add	r3, r2
 8009722:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8009726:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800972a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800972e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009730:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009734:	3302      	adds	r3, #2
 8009736:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800973a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800973e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8009742:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8009744:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009748:	3302      	adds	r3, #2
 800974a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800974e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009752:	2218      	movs	r2, #24
 8009754:	2100      	movs	r1, #0
 8009756:	4618      	mov	r0, r3
 8009758:	f001 f898 	bl	800a88c <Osal_MemSet>
  rq.ogf = 0x3f;
 800975c:	233f      	movs	r3, #63	; 0x3f
 800975e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8009762:	2383      	movs	r3, #131	; 0x83
 8009764:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009768:	f107 0310 	add.w	r3, r7, #16
 800976c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009770:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009774:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009778:	f107 030f 	add.w	r3, r7, #15
 800977c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009780:	2301      	movs	r3, #1
 8009782:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009786:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800978a:	2100      	movs	r1, #0
 800978c:	4618      	mov	r0, r3
 800978e:	f000 ff09 	bl	800a5a4 <hci_send_req>
 8009792:	4603      	mov	r3, r0
 8009794:	2b00      	cmp	r3, #0
 8009796:	da01      	bge.n	800979c <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8009798:	23ff      	movs	r3, #255	; 0xff
 800979a:	e002      	b.n	80097a2 <aci_gap_set_discoverable+0x1b2>
  return status;
 800979c:	f107 030f 	add.w	r3, r7, #15
 80097a0:	781b      	ldrb	r3, [r3, #0]
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bdb0      	pop	{r4, r5, r7, pc}

080097ac <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b0cc      	sub	sp, #304	; 0x130
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	4602      	mov	r2, r0
 80097b4:	1dfb      	adds	r3, r7, #7
 80097b6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80097b8:	f107 0310 	add.w	r3, r7, #16
 80097bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80097c0:	f107 030f 	add.w	r3, r7, #15
 80097c4:	2200      	movs	r2, #0
 80097c6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80097c8:	2300      	movs	r3, #0
 80097ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 80097ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097d2:	1dfa      	adds	r2, r7, #7
 80097d4:	7812      	ldrb	r2, [r2, #0]
 80097d6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80097d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097dc:	3301      	adds	r3, #1
 80097de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80097e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80097e6:	2218      	movs	r2, #24
 80097e8:	2100      	movs	r1, #0
 80097ea:	4618      	mov	r0, r3
 80097ec:	f001 f84e 	bl	800a88c <Osal_MemSet>
  rq.ogf = 0x3f;
 80097f0:	233f      	movs	r3, #63	; 0x3f
 80097f2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 80097f6:	2385      	movs	r3, #133	; 0x85
 80097f8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80097fc:	f107 0310 	add.w	r3, r7, #16
 8009800:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009804:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009808:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800980c:	f107 030f 	add.w	r3, r7, #15
 8009810:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009814:	2301      	movs	r3, #1
 8009816:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800981a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800981e:	2100      	movs	r1, #0
 8009820:	4618      	mov	r0, r3
 8009822:	f000 febf 	bl	800a5a4 <hci_send_req>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	da01      	bge.n	8009830 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 800982c:	23ff      	movs	r3, #255	; 0xff
 800982e:	e002      	b.n	8009836 <aci_gap_set_io_capability+0x8a>
  return status;
 8009830:	f107 030f 	add.w	r3, r7, #15
 8009834:	781b      	ldrb	r3, [r3, #0]
}
 8009836:	4618      	mov	r0, r3
 8009838:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8009840:	b5b0      	push	{r4, r5, r7, lr}
 8009842:	b0cc      	sub	sp, #304	; 0x130
 8009844:	af00      	add	r7, sp, #0
 8009846:	4605      	mov	r5, r0
 8009848:	460c      	mov	r4, r1
 800984a:	4610      	mov	r0, r2
 800984c:	4619      	mov	r1, r3
 800984e:	1dfb      	adds	r3, r7, #7
 8009850:	462a      	mov	r2, r5
 8009852:	701a      	strb	r2, [r3, #0]
 8009854:	1dbb      	adds	r3, r7, #6
 8009856:	4622      	mov	r2, r4
 8009858:	701a      	strb	r2, [r3, #0]
 800985a:	1d7b      	adds	r3, r7, #5
 800985c:	4602      	mov	r2, r0
 800985e:	701a      	strb	r2, [r3, #0]
 8009860:	1d3b      	adds	r3, r7, #4
 8009862:	460a      	mov	r2, r1
 8009864:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8009866:	f107 0310 	add.w	r3, r7, #16
 800986a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800986e:	f107 030f 	add.w	r3, r7, #15
 8009872:	2200      	movs	r2, #0
 8009874:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009876:	2300      	movs	r3, #0
 8009878:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800987c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009880:	1dfa      	adds	r2, r7, #7
 8009882:	7812      	ldrb	r2, [r2, #0]
 8009884:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009886:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800988a:	3301      	adds	r3, #1
 800988c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8009890:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009894:	1dba      	adds	r2, r7, #6
 8009896:	7812      	ldrb	r2, [r2, #0]
 8009898:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800989a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800989e:	3301      	adds	r3, #1
 80098a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 80098a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098a8:	1d7a      	adds	r2, r7, #5
 80098aa:	7812      	ldrb	r2, [r2, #0]
 80098ac:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80098ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80098b2:	3301      	adds	r3, #1
 80098b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80098b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098bc:	1d3a      	adds	r2, r7, #4
 80098be:	7812      	ldrb	r2, [r2, #0]
 80098c0:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80098c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80098c6:	3301      	adds	r3, #1
 80098c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80098cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098d0:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80098d4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80098d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80098da:	3301      	adds	r3, #1
 80098dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80098e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098e4:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 80098e8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80098ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80098ee:	3301      	adds	r3, #1
 80098f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80098f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098f8:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80098fc:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80098fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009902:	3301      	adds	r3, #1
 8009904:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8009908:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800990c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8009910:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8009914:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009918:	3304      	adds	r3, #4
 800991a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800991e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009922:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8009926:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8009928:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800992c:	3301      	adds	r3, #1
 800992e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009932:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009936:	2218      	movs	r2, #24
 8009938:	2100      	movs	r1, #0
 800993a:	4618      	mov	r0, r3
 800993c:	f000 ffa6 	bl	800a88c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009940:	233f      	movs	r3, #63	; 0x3f
 8009942:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8009946:	2386      	movs	r3, #134	; 0x86
 8009948:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800994c:	f107 0310 	add.w	r3, r7, #16
 8009950:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009954:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009958:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800995c:	f107 030f 	add.w	r3, r7, #15
 8009960:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009964:	2301      	movs	r3, #1
 8009966:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800996a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800996e:	2100      	movs	r1, #0
 8009970:	4618      	mov	r0, r3
 8009972:	f000 fe17 	bl	800a5a4 <hci_send_req>
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	da01      	bge.n	8009980 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 800997c:	23ff      	movs	r3, #255	; 0xff
 800997e:	e002      	b.n	8009986 <aci_gap_set_authentication_requirement+0x146>
  return status;
 8009980:	f107 030f 	add.w	r3, r7, #15
 8009984:	781b      	ldrb	r3, [r3, #0]
}
 8009986:	4618      	mov	r0, r3
 8009988:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800998c:	46bd      	mov	sp, r7
 800998e:	bdb0      	pop	{r4, r5, r7, pc}

08009990 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8009990:	b590      	push	{r4, r7, lr}
 8009992:	b0cd      	sub	sp, #308	; 0x134
 8009994:	af00      	add	r7, sp, #0
 8009996:	4604      	mov	r4, r0
 8009998:	4608      	mov	r0, r1
 800999a:	4611      	mov	r1, r2
 800999c:	463a      	mov	r2, r7
 800999e:	6013      	str	r3, [r2, #0]
 80099a0:	1dfb      	adds	r3, r7, #7
 80099a2:	4622      	mov	r2, r4
 80099a4:	701a      	strb	r2, [r3, #0]
 80099a6:	1dbb      	adds	r3, r7, #6
 80099a8:	4602      	mov	r2, r0
 80099aa:	701a      	strb	r2, [r3, #0]
 80099ac:	1d7b      	adds	r3, r7, #5
 80099ae:	460a      	mov	r2, r1
 80099b0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80099b2:	f107 0310 	add.w	r3, r7, #16
 80099b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80099ba:	f107 0308 	add.w	r3, r7, #8
 80099be:	2207      	movs	r2, #7
 80099c0:	2100      	movs	r1, #0
 80099c2:	4618      	mov	r0, r3
 80099c4:	f000 ff62 	bl	800a88c <Osal_MemSet>
  int index_input = 0;
 80099c8:	2300      	movs	r3, #0
 80099ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 80099ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099d2:	1dfa      	adds	r2, r7, #7
 80099d4:	7812      	ldrb	r2, [r2, #0]
 80099d6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80099d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80099dc:	3301      	adds	r3, #1
 80099de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 80099e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099e6:	1dba      	adds	r2, r7, #6
 80099e8:	7812      	ldrb	r2, [r2, #0]
 80099ea:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80099ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80099f0:	3301      	adds	r3, #1
 80099f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 80099f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099fa:	1d7a      	adds	r2, r7, #5
 80099fc:	7812      	ldrb	r2, [r2, #0]
 80099fe:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009a00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a04:	3301      	adds	r3, #1
 8009a06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009a0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009a0e:	2218      	movs	r2, #24
 8009a10:	2100      	movs	r1, #0
 8009a12:	4618      	mov	r0, r3
 8009a14:	f000 ff3a 	bl	800a88c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009a18:	233f      	movs	r3, #63	; 0x3f
 8009a1a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8009a1e:	238a      	movs	r3, #138	; 0x8a
 8009a20:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009a24:	f107 0310 	add.w	r3, r7, #16
 8009a28:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009a2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a30:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8009a34:	f107 0308 	add.w	r3, r7, #8
 8009a38:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8009a3c:	2307      	movs	r3, #7
 8009a3e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009a42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009a46:	2100      	movs	r1, #0
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f000 fdab 	bl	800a5a4 <hci_send_req>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	da01      	bge.n	8009a58 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8009a54:	23ff      	movs	r3, #255	; 0xff
 8009a56:	e021      	b.n	8009a9c <aci_gap_init+0x10c>
  if ( resp.Status )
 8009a58:	f107 0308 	add.w	r3, r7, #8
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d003      	beq.n	8009a6a <aci_gap_init+0xda>
    return resp.Status;
 8009a62:	f107 0308 	add.w	r3, r7, #8
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	e018      	b.n	8009a9c <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 8009a6a:	f107 0308 	add.w	r3, r7, #8
 8009a6e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009a72:	b29a      	uxth	r2, r3
 8009a74:	463b      	mov	r3, r7
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8009a7a:	f107 0308 	add.w	r3, r7, #8
 8009a7e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009a82:	b29a      	uxth	r2, r3
 8009a84:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009a88:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8009a8a:	f107 0308 	add.w	r3, r7, #8
 8009a8e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009a92:	b29a      	uxth	r2, r3
 8009a94:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009a98:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009a9a:	2300      	movs	r3, #0
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd90      	pop	{r4, r7, pc}

08009aa6 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8009aa6:	b580      	push	{r7, lr}
 8009aa8:	b0cc      	sub	sp, #304	; 0x130
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	4602      	mov	r2, r0
 8009aae:	463b      	mov	r3, r7
 8009ab0:	6019      	str	r1, [r3, #0]
 8009ab2:	1dfb      	adds	r3, r7, #7
 8009ab4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8009ab6:	f107 0310 	add.w	r3, r7, #16
 8009aba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009abe:	f107 030f 	add.w	r3, r7, #15
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8009acc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ad0:	1dfa      	adds	r2, r7, #7
 8009ad2:	7812      	ldrb	r2, [r2, #0]
 8009ad4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009ad6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ada:	3301      	adds	r3, #1
 8009adc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8009ae0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ae4:	1c58      	adds	r0, r3, #1
 8009ae6:	1dfb      	adds	r3, r7, #7
 8009ae8:	781a      	ldrb	r2, [r3, #0]
 8009aea:	463b      	mov	r3, r7
 8009aec:	6819      	ldr	r1, [r3, #0]
 8009aee:	f000 febd 	bl	800a86c <Osal_MemCpy>
  index_input += AdvDataLen;
 8009af2:	1dfb      	adds	r3, r7, #7
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009afa:	4413      	add	r3, r2
 8009afc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009b00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009b04:	2218      	movs	r2, #24
 8009b06:	2100      	movs	r1, #0
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f000 febf 	bl	800a88c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009b0e:	233f      	movs	r3, #63	; 0x3f
 8009b10:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8009b14:	238e      	movs	r3, #142	; 0x8e
 8009b16:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009b1a:	f107 0310 	add.w	r3, r7, #16
 8009b1e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009b22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009b26:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009b2a:	f107 030f 	add.w	r3, r7, #15
 8009b2e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009b32:	2301      	movs	r3, #1
 8009b34:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009b38:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009b3c:	2100      	movs	r1, #0
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f000 fd30 	bl	800a5a4 <hci_send_req>
 8009b44:	4603      	mov	r3, r0
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	da01      	bge.n	8009b4e <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 8009b4a:	23ff      	movs	r3, #255	; 0xff
 8009b4c:	e002      	b.n	8009b54 <aci_gap_update_adv_data+0xae>
  return status;
 8009b4e:	f107 030f 	add.w	r3, r7, #15
 8009b52:	781b      	ldrb	r3, [r3, #0]
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}

08009b5e <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8009b5e:	b580      	push	{r7, lr}
 8009b60:	b088      	sub	sp, #32
 8009b62:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009b64:	2300      	movs	r3, #0
 8009b66:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009b68:	f107 0308 	add.w	r3, r7, #8
 8009b6c:	2218      	movs	r2, #24
 8009b6e:	2100      	movs	r1, #0
 8009b70:	4618      	mov	r0, r3
 8009b72:	f000 fe8b 	bl	800a88c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009b76:	233f      	movs	r3, #63	; 0x3f
 8009b78:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8009b7a:	2392      	movs	r3, #146	; 0x92
 8009b7c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009b7e:	1dfb      	adds	r3, r7, #7
 8009b80:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009b82:	2301      	movs	r3, #1
 8009b84:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009b86:	f107 0308 	add.w	r3, r7, #8
 8009b8a:	2100      	movs	r1, #0
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f000 fd09 	bl	800a5a4 <hci_send_req>
 8009b92:	4603      	mov	r3, r0
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	da01      	bge.n	8009b9c <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009b98:	23ff      	movs	r3, #255	; 0xff
 8009b9a:	e000      	b.n	8009b9e <aci_gap_configure_whitelist+0x40>
  return status;
 8009b9c:	79fb      	ldrb	r3, [r7, #7]
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3720      	adds	r7, #32
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}

08009ba6 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8009ba6:	b580      	push	{r7, lr}
 8009ba8:	b088      	sub	sp, #32
 8009baa:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009bac:	2300      	movs	r3, #0
 8009bae:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009bb0:	f107 0308 	add.w	r3, r7, #8
 8009bb4:	2218      	movs	r2, #24
 8009bb6:	2100      	movs	r1, #0
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f000 fe67 	bl	800a88c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009bbe:	233f      	movs	r3, #63	; 0x3f
 8009bc0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8009bc2:	f240 1301 	movw	r3, #257	; 0x101
 8009bc6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009bc8:	1dfb      	adds	r3, r7, #7
 8009bca:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009bd0:	f107 0308 	add.w	r3, r7, #8
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f000 fce4 	bl	800a5a4 <hci_send_req>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	da01      	bge.n	8009be6 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8009be2:	23ff      	movs	r3, #255	; 0xff
 8009be4:	e000      	b.n	8009be8 <aci_gatt_init+0x42>
  return status;
 8009be6:	79fb      	ldrb	r3, [r7, #7]
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3720      	adds	r7, #32
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8009bf0:	b590      	push	{r4, r7, lr}
 8009bf2:	b0cf      	sub	sp, #316	; 0x13c
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	4604      	mov	r4, r0
 8009bf8:	4638      	mov	r0, r7
 8009bfa:	6001      	str	r1, [r0, #0]
 8009bfc:	4610      	mov	r0, r2
 8009bfe:	4619      	mov	r1, r3
 8009c00:	1dfb      	adds	r3, r7, #7
 8009c02:	4622      	mov	r2, r4
 8009c04:	701a      	strb	r2, [r3, #0]
 8009c06:	1dbb      	adds	r3, r7, #6
 8009c08:	4602      	mov	r2, r0
 8009c0a:	701a      	strb	r2, [r3, #0]
 8009c0c:	1d7b      	adds	r3, r7, #5
 8009c0e:	460a      	mov	r2, r1
 8009c10:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8009c12:	f107 0310 	add.w	r3, r7, #16
 8009c16:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8009c1a:	1dfb      	adds	r3, r7, #7
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	d007      	beq.n	8009c32 <aci_gatt_add_service+0x42>
 8009c22:	1dfb      	adds	r3, r7, #7
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	2b02      	cmp	r3, #2
 8009c28:	d101      	bne.n	8009c2e <aci_gatt_add_service+0x3e>
 8009c2a:	2311      	movs	r3, #17
 8009c2c:	e002      	b.n	8009c34 <aci_gatt_add_service+0x44>
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e000      	b.n	8009c34 <aci_gatt_add_service+0x44>
 8009c32:	2303      	movs	r3, #3
 8009c34:	f107 0210 	add.w	r2, r7, #16
 8009c38:	4413      	add	r3, r2
 8009c3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009c3e:	f107 030c 	add.w	r3, r7, #12
 8009c42:	2203      	movs	r2, #3
 8009c44:	2100      	movs	r1, #0
 8009c46:	4618      	mov	r0, r3
 8009c48:	f000 fe20 	bl	800a88c <Osal_MemSet>
  int index_input = 0;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8009c52:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009c56:	1dfa      	adds	r2, r7, #7
 8009c58:	7812      	ldrb	r2, [r2, #0]
 8009c5a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009c5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c60:	3301      	adds	r3, #1
 8009c62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8009c66:	1dfb      	adds	r3, r7, #7
 8009c68:	781b      	ldrb	r3, [r3, #0]
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d002      	beq.n	8009c74 <aci_gatt_add_service+0x84>
 8009c6e:	2b02      	cmp	r3, #2
 8009c70:	d004      	beq.n	8009c7c <aci_gatt_add_service+0x8c>
 8009c72:	e007      	b.n	8009c84 <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 8009c74:	2302      	movs	r3, #2
 8009c76:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8009c7a:	e005      	b.n	8009c88 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 8009c7c:	2310      	movs	r3, #16
 8009c7e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8009c82:	e001      	b.n	8009c88 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 8009c84:	2347      	movs	r3, #71	; 0x47
 8009c86:	e05d      	b.n	8009d44 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8009c88:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009c8c:	1c58      	adds	r0, r3, #1
 8009c8e:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8009c92:	463b      	mov	r3, r7
 8009c94:	6819      	ldr	r1, [r3, #0]
 8009c96:	f000 fde9 	bl	800a86c <Osal_MemCpy>
    index_input += size;
 8009c9a:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009c9e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009ca2:	4413      	add	r3, r2
 8009ca4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8009ca8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cac:	1dba      	adds	r2, r7, #6
 8009cae:	7812      	ldrb	r2, [r2, #0]
 8009cb0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009cb2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8009cbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cc0:	1d7a      	adds	r2, r7, #5
 8009cc2:	7812      	ldrb	r2, [r2, #0]
 8009cc4:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8009cc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009cca:	3301      	adds	r3, #1
 8009ccc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009cd0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009cd4:	2218      	movs	r2, #24
 8009cd6:	2100      	movs	r1, #0
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f000 fdd7 	bl	800a88c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009cde:	233f      	movs	r3, #63	; 0x3f
 8009ce0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8009ce4:	f44f 7381 	mov.w	r3, #258	; 0x102
 8009ce8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009cec:	f107 0310 	add.w	r3, r7, #16
 8009cf0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009cf4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009cf8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8009cfc:	f107 030c 	add.w	r3, r7, #12
 8009d00:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8009d04:	2303      	movs	r3, #3
 8009d06:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009d0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009d0e:	2100      	movs	r1, #0
 8009d10:	4618      	mov	r0, r3
 8009d12:	f000 fc47 	bl	800a5a4 <hci_send_req>
 8009d16:	4603      	mov	r3, r0
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	da01      	bge.n	8009d20 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 8009d1c:	23ff      	movs	r3, #255	; 0xff
 8009d1e:	e011      	b.n	8009d44 <aci_gatt_add_service+0x154>
  if ( resp.Status )
 8009d20:	f107 030c 	add.w	r3, r7, #12
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d003      	beq.n	8009d32 <aci_gatt_add_service+0x142>
    return resp.Status;
 8009d2a:	f107 030c 	add.w	r3, r7, #12
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	e008      	b.n	8009d44 <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 8009d32:	f107 030c 	add.w	r3, r7, #12
 8009d36:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009d3a:	b29a      	uxth	r2, r3
 8009d3c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009d40:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009d42:	2300      	movs	r3, #0
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd90      	pop	{r4, r7, pc}

08009d4e <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8009d4e:	b590      	push	{r4, r7, lr}
 8009d50:	b0d1      	sub	sp, #324	; 0x144
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	4604      	mov	r4, r0
 8009d56:	4608      	mov	r0, r1
 8009d58:	f107 0108 	add.w	r1, r7, #8
 8009d5c:	600a      	str	r2, [r1, #0]
 8009d5e:	4619      	mov	r1, r3
 8009d60:	f107 030e 	add.w	r3, r7, #14
 8009d64:	4622      	mov	r2, r4
 8009d66:	801a      	strh	r2, [r3, #0]
 8009d68:	f107 030d 	add.w	r3, r7, #13
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	701a      	strb	r2, [r3, #0]
 8009d70:	1dbb      	adds	r3, r7, #6
 8009d72:	460a      	mov	r2, r1
 8009d74:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8009d76:	f107 0318 	add.w	r3, r7, #24
 8009d7a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8009d7e:	f107 030d 	add.w	r3, r7, #13
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d008      	beq.n	8009d9a <aci_gatt_add_char+0x4c>
 8009d88:	f107 030d 	add.w	r3, r7, #13
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	2b02      	cmp	r3, #2
 8009d90:	d101      	bne.n	8009d96 <aci_gatt_add_char+0x48>
 8009d92:	2313      	movs	r3, #19
 8009d94:	e002      	b.n	8009d9c <aci_gatt_add_char+0x4e>
 8009d96:	2303      	movs	r3, #3
 8009d98:	e000      	b.n	8009d9c <aci_gatt_add_char+0x4e>
 8009d9a:	2305      	movs	r3, #5
 8009d9c:	f107 0218 	add.w	r2, r7, #24
 8009da0:	4413      	add	r3, r2
 8009da2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009da6:	f107 0314 	add.w	r3, r7, #20
 8009daa:	2203      	movs	r2, #3
 8009dac:	2100      	movs	r1, #0
 8009dae:	4618      	mov	r0, r3
 8009db0:	f000 fd6c 	bl	800a88c <Osal_MemSet>
  int index_input = 0;
 8009db4:	2300      	movs	r3, #0
 8009db6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8009dba:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009dbe:	f107 020e 	add.w	r2, r7, #14
 8009dc2:	8812      	ldrh	r2, [r2, #0]
 8009dc4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009dc6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009dca:	3302      	adds	r3, #2
 8009dcc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8009dd0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009dd4:	f107 020d 	add.w	r2, r7, #13
 8009dd8:	7812      	ldrb	r2, [r2, #0]
 8009dda:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009ddc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009de0:	3301      	adds	r3, #1
 8009de2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8009de6:	f107 030d 	add.w	r3, r7, #13
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d002      	beq.n	8009df6 <aci_gatt_add_char+0xa8>
 8009df0:	2b02      	cmp	r3, #2
 8009df2:	d004      	beq.n	8009dfe <aci_gatt_add_char+0xb0>
 8009df4:	e007      	b.n	8009e06 <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 8009df6:	2302      	movs	r3, #2
 8009df8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8009dfc:	e005      	b.n	8009e0a <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 8009dfe:	2310      	movs	r3, #16
 8009e00:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8009e04:	e001      	b.n	8009e0a <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 8009e06:	2347      	movs	r3, #71	; 0x47
 8009e08:	e086      	b.n	8009f18 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8009e0a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009e0e:	1cd8      	adds	r0, r3, #3
 8009e10:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8009e14:	f107 0308 	add.w	r3, r7, #8
 8009e18:	6819      	ldr	r1, [r3, #0]
 8009e1a:	f000 fd27 	bl	800a86c <Osal_MemCpy>
    index_input += size;
 8009e1e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8009e22:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8009e26:	4413      	add	r3, r2
 8009e28:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8009e2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009e30:	1dba      	adds	r2, r7, #6
 8009e32:	8812      	ldrh	r2, [r2, #0]
 8009e34:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009e36:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009e3a:	3302      	adds	r3, #2
 8009e3c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8009e40:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009e44:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8009e48:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8009e4a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009e4e:	3301      	adds	r3, #1
 8009e50:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8009e54:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009e58:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8009e5c:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8009e5e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009e62:	3301      	adds	r3, #1
 8009e64:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8009e68:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009e6c:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8009e70:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8009e72:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009e76:	3301      	adds	r3, #1
 8009e78:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8009e7c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009e80:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8009e84:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8009e86:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8009e90:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009e94:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8009e98:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8009e9a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009e9e:	3301      	adds	r3, #1
 8009ea0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009ea4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009ea8:	2218      	movs	r2, #24
 8009eaa:	2100      	movs	r1, #0
 8009eac:	4618      	mov	r0, r3
 8009eae:	f000 fced 	bl	800a88c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009eb2:	233f      	movs	r3, #63	; 0x3f
 8009eb4:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8009eb8:	f44f 7382 	mov.w	r3, #260	; 0x104
 8009ebc:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8009ec0:	f107 0318 	add.w	r3, r7, #24
 8009ec4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8009ec8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009ecc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8009ed0:	f107 0314 	add.w	r3, r7, #20
 8009ed4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8009ed8:	2303      	movs	r3, #3
 8009eda:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009ede:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009ee2:	2100      	movs	r1, #0
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f000 fb5d 	bl	800a5a4 <hci_send_req>
 8009eea:	4603      	mov	r3, r0
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	da01      	bge.n	8009ef4 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 8009ef0:	23ff      	movs	r3, #255	; 0xff
 8009ef2:	e011      	b.n	8009f18 <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 8009ef4:	f107 0314 	add.w	r3, r7, #20
 8009ef8:	781b      	ldrb	r3, [r3, #0]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d003      	beq.n	8009f06 <aci_gatt_add_char+0x1b8>
    return resp.Status;
 8009efe:	f107 0314 	add.w	r3, r7, #20
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	e008      	b.n	8009f18 <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 8009f06:	f107 0314 	add.w	r3, r7, #20
 8009f0a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009f0e:	b29a      	uxth	r2, r3
 8009f10:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8009f14:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009f16:	2300      	movs	r3, #0
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd90      	pop	{r4, r7, pc}

08009f22 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8009f22:	b5b0      	push	{r4, r5, r7, lr}
 8009f24:	b0cc      	sub	sp, #304	; 0x130
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	4605      	mov	r5, r0
 8009f2a:	460c      	mov	r4, r1
 8009f2c:	4610      	mov	r0, r2
 8009f2e:	4619      	mov	r1, r3
 8009f30:	1dbb      	adds	r3, r7, #6
 8009f32:	462a      	mov	r2, r5
 8009f34:	801a      	strh	r2, [r3, #0]
 8009f36:	1d3b      	adds	r3, r7, #4
 8009f38:	4622      	mov	r2, r4
 8009f3a:	801a      	strh	r2, [r3, #0]
 8009f3c:	1cfb      	adds	r3, r7, #3
 8009f3e:	4602      	mov	r2, r0
 8009f40:	701a      	strb	r2, [r3, #0]
 8009f42:	1cbb      	adds	r3, r7, #2
 8009f44:	460a      	mov	r2, r1
 8009f46:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8009f48:	f107 0310 	add.w	r3, r7, #16
 8009f4c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009f50:	f107 030f 	add.w	r3, r7, #15
 8009f54:	2200      	movs	r2, #0
 8009f56:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8009f5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f62:	1dba      	adds	r2, r7, #6
 8009f64:	8812      	ldrh	r2, [r2, #0]
 8009f66:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009f68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009f6c:	3302      	adds	r3, #2
 8009f6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8009f72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f76:	1d3a      	adds	r2, r7, #4
 8009f78:	8812      	ldrh	r2, [r2, #0]
 8009f7a:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009f7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009f80:	3302      	adds	r3, #2
 8009f82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8009f86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f8a:	1cfa      	adds	r2, r7, #3
 8009f8c:	7812      	ldrb	r2, [r2, #0]
 8009f8e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009f90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009f94:	3301      	adds	r3, #1
 8009f96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8009f9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f9e:	1cba      	adds	r2, r7, #2
 8009fa0:	7812      	ldrb	r2, [r2, #0]
 8009fa2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009fa4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009fa8:	3301      	adds	r3, #1
 8009faa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8009fae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fb2:	1d98      	adds	r0, r3, #6
 8009fb4:	1cbb      	adds	r3, r7, #2
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	461a      	mov	r2, r3
 8009fba:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8009fbe:	f000 fc55 	bl	800a86c <Osal_MemCpy>
  index_input += Char_Value_Length;
 8009fc2:	1cbb      	adds	r3, r7, #2
 8009fc4:	781b      	ldrb	r3, [r3, #0]
 8009fc6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009fca:	4413      	add	r3, r2
 8009fcc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009fd0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009fd4:	2218      	movs	r2, #24
 8009fd6:	2100      	movs	r1, #0
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f000 fc57 	bl	800a88c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009fde:	233f      	movs	r3, #63	; 0x3f
 8009fe0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8009fe4:	f44f 7383 	mov.w	r3, #262	; 0x106
 8009fe8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009fec:	f107 0310 	add.w	r3, r7, #16
 8009ff0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009ff4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ff8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009ffc:	f107 030f 	add.w	r3, r7, #15
 800a000:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a004:	2301      	movs	r3, #1
 800a006:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a00a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a00e:	2100      	movs	r1, #0
 800a010:	4618      	mov	r0, r3
 800a012:	f000 fac7 	bl	800a5a4 <hci_send_req>
 800a016:	4603      	mov	r3, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	da01      	bge.n	800a020 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 800a01c:	23ff      	movs	r3, #255	; 0xff
 800a01e:	e002      	b.n	800a026 <aci_gatt_update_char_value+0x104>
  return status;
 800a020:	f107 030f 	add.w	r3, r7, #15
 800a024:	781b      	ldrb	r3, [r3, #0]
}
 800a026:	4618      	mov	r0, r3
 800a028:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bdb0      	pop	{r4, r5, r7, pc}

0800a030 <aci_gatt_exchange_config>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_exchange_config( uint16_t Connection_Handle )
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b0cc      	sub	sp, #304	; 0x130
 800a034:	af00      	add	r7, sp, #0
 800a036:	4602      	mov	r2, r0
 800a038:	1dbb      	adds	r3, r7, #6
 800a03a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_exchange_config_cp0 *cp0 = (aci_gatt_exchange_config_cp0*)(cmd_buffer);
 800a03c:	f107 0310 	add.w	r3, r7, #16
 800a040:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a044:	f107 030f 	add.w	r3, r7, #15
 800a048:	2200      	movs	r2, #0
 800a04a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a04c:	2300      	movs	r3, #0
 800a04e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800a052:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a056:	1dba      	adds	r2, r7, #6
 800a058:	8812      	ldrh	r2, [r2, #0]
 800a05a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a05c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a060:	3302      	adds	r3, #2
 800a062:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a066:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a06a:	2218      	movs	r2, #24
 800a06c:	2100      	movs	r1, #0
 800a06e:	4618      	mov	r0, r3
 800a070:	f000 fc0c 	bl	800a88c <Osal_MemSet>
  rq.ogf = 0x3f;
 800a074:	233f      	movs	r3, #63	; 0x3f
 800a076:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x10b;
 800a07a:	f240 130b 	movw	r3, #267	; 0x10b
 800a07e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800a082:	230f      	movs	r3, #15
 800a084:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800a088:	f107 0310 	add.w	r3, r7, #16
 800a08c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a090:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a094:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a098:	f107 030f 	add.w	r3, r7, #15
 800a09c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a0a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a0aa:	2100      	movs	r1, #0
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f000 fa79 	bl	800a5a4 <hci_send_req>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	da01      	bge.n	800a0bc <aci_gatt_exchange_config+0x8c>
    return BLE_STATUS_TIMEOUT;
 800a0b8:	23ff      	movs	r3, #255	; 0xff
 800a0ba:	e002      	b.n	800a0c2 <aci_gatt_exchange_config+0x92>
  return status;
 800a0bc:	f107 030f 	add.w	r3, r7, #15
 800a0c0:	781b      	ldrb	r3, [r3, #0]
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b0cc      	sub	sp, #304	; 0x130
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	463b      	mov	r3, r7
 800a0d4:	601a      	str	r2, [r3, #0]
 800a0d6:	1dfb      	adds	r3, r7, #7
 800a0d8:	4602      	mov	r2, r0
 800a0da:	701a      	strb	r2, [r3, #0]
 800a0dc:	1dbb      	adds	r3, r7, #6
 800a0de:	460a      	mov	r2, r1
 800a0e0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800a0e2:	f107 0310 	add.w	r3, r7, #16
 800a0e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a0ea:	f107 030f 	add.w	r3, r7, #15
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800a0f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0fc:	1dfa      	adds	r2, r7, #7
 800a0fe:	7812      	ldrb	r2, [r2, #0]
 800a100:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a102:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a106:	3301      	adds	r3, #1
 800a108:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800a10c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a110:	1dba      	adds	r2, r7, #6
 800a112:	7812      	ldrb	r2, [r2, #0]
 800a114:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a116:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a11a:	3301      	adds	r3, #1
 800a11c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800a120:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a124:	1c98      	adds	r0, r3, #2
 800a126:	1dbb      	adds	r3, r7, #6
 800a128:	781a      	ldrb	r2, [r3, #0]
 800a12a:	463b      	mov	r3, r7
 800a12c:	6819      	ldr	r1, [r3, #0]
 800a12e:	f000 fb9d 	bl	800a86c <Osal_MemCpy>
  index_input += Length;
 800a132:	1dbb      	adds	r3, r7, #6
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a13a:	4413      	add	r3, r2
 800a13c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a140:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a144:	2218      	movs	r2, #24
 800a146:	2100      	movs	r1, #0
 800a148:	4618      	mov	r0, r3
 800a14a:	f000 fb9f 	bl	800a88c <Osal_MemSet>
  rq.ogf = 0x3f;
 800a14e:	233f      	movs	r3, #63	; 0x3f
 800a150:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800a154:	230c      	movs	r3, #12
 800a156:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a15a:	f107 0310 	add.w	r3, r7, #16
 800a15e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a162:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a166:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a16a:	f107 030f 	add.w	r3, r7, #15
 800a16e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a172:	2301      	movs	r3, #1
 800a174:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a178:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a17c:	2100      	movs	r1, #0
 800a17e:	4618      	mov	r0, r3
 800a180:	f000 fa10 	bl	800a5a4 <hci_send_req>
 800a184:	4603      	mov	r3, r0
 800a186:	2b00      	cmp	r3, #0
 800a188:	da01      	bge.n	800a18e <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 800a18a:	23ff      	movs	r3, #255	; 0xff
 800a18c:	e002      	b.n	800a194 <aci_hal_write_config_data+0xc8>
  return status;
 800a18e:	f107 030f 	add.w	r3, r7, #15
 800a192:	781b      	ldrb	r3, [r3, #0]
}
 800a194:	4618      	mov	r0, r3
 800a196:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}

0800a19e <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800a19e:	b580      	push	{r7, lr}
 800a1a0:	b0cc      	sub	sp, #304	; 0x130
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	4602      	mov	r2, r0
 800a1a6:	1dfb      	adds	r3, r7, #7
 800a1a8:	701a      	strb	r2, [r3, #0]
 800a1aa:	1dbb      	adds	r3, r7, #6
 800a1ac:	460a      	mov	r2, r1
 800a1ae:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800a1b0:	f107 0310 	add.w	r3, r7, #16
 800a1b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a1b8:	f107 030f 	add.w	r3, r7, #15
 800a1bc:	2200      	movs	r2, #0
 800a1be:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800a1c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1ca:	1dfa      	adds	r2, r7, #7
 800a1cc:	7812      	ldrb	r2, [r2, #0]
 800a1ce:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a1d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a1d4:	3301      	adds	r3, #1
 800a1d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800a1da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1de:	1dba      	adds	r2, r7, #6
 800a1e0:	7812      	ldrb	r2, [r2, #0]
 800a1e2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a1e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a1ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a1f2:	2218      	movs	r2, #24
 800a1f4:	2100      	movs	r1, #0
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f000 fb48 	bl	800a88c <Osal_MemSet>
  rq.ogf = 0x3f;
 800a1fc:	233f      	movs	r3, #63	; 0x3f
 800a1fe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800a202:	230f      	movs	r3, #15
 800a204:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a208:	f107 0310 	add.w	r3, r7, #16
 800a20c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a210:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a214:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a218:	f107 030f 	add.w	r3, r7, #15
 800a21c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a220:	2301      	movs	r3, #1
 800a222:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a226:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a22a:	2100      	movs	r1, #0
 800a22c:	4618      	mov	r0, r3
 800a22e:	f000 f9b9 	bl	800a5a4 <hci_send_req>
 800a232:	4603      	mov	r3, r0
 800a234:	2b00      	cmp	r3, #0
 800a236:	da01      	bge.n	800a23c <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 800a238:	23ff      	movs	r3, #255	; 0xff
 800a23a:	e002      	b.n	800a242 <aci_hal_set_tx_power_level+0xa4>
  return status;
 800a23c:	f107 030f 	add.w	r3, r7, #15
 800a240:	781b      	ldrb	r3, [r3, #0]
}
 800a242:	4618      	mov	r0, r3
 800a244:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b0cc      	sub	sp, #304	; 0x130
 800a250:	af00      	add	r7, sp, #0
 800a252:	4602      	mov	r2, r0
 800a254:	1dbb      	adds	r3, r7, #6
 800a256:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800a258:	f107 0310 	add.w	r3, r7, #16
 800a25c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a260:	f107 030f 	add.w	r3, r7, #15
 800a264:	2200      	movs	r2, #0
 800a266:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a268:	2300      	movs	r3, #0
 800a26a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800a26e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a272:	1dba      	adds	r2, r7, #6
 800a274:	8812      	ldrh	r2, [r2, #0]
 800a276:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a278:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a27c:	3302      	adds	r3, #2
 800a27e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a282:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a286:	2218      	movs	r2, #24
 800a288:	2100      	movs	r1, #0
 800a28a:	4618      	mov	r0, r3
 800a28c:	f000 fafe 	bl	800a88c <Osal_MemSet>
  rq.ogf = 0x3f;
 800a290:	233f      	movs	r3, #63	; 0x3f
 800a292:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800a296:	2318      	movs	r3, #24
 800a298:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a29c:	f107 0310 	add.w	r3, r7, #16
 800a2a0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a2a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a2a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a2ac:	f107 030f 	add.w	r3, r7, #15
 800a2b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a2ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a2be:	2100      	movs	r1, #0
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f000 f96f 	bl	800a5a4 <hci_send_req>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	da01      	bge.n	800a2d0 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 800a2cc:	23ff      	movs	r3, #255	; 0xff
 800a2ce:	e002      	b.n	800a2d6 <aci_hal_set_radio_activity_mask+0x8a>
  return status;
 800a2d0:	f107 030f 	add.w	r3, r7, #15
 800a2d4:	781b      	ldrb	r3, [r3, #0]
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b088      	sub	sp, #32
 800a2e4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a2ea:	f107 0308 	add.w	r3, r7, #8
 800a2ee:	2218      	movs	r2, #24
 800a2f0:	2100      	movs	r1, #0
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f000 faca 	bl	800a88c <Osal_MemSet>
  rq.ogf = 0x03;
 800a2f8:	2303      	movs	r3, #3
 800a2fa:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800a2fc:	2303      	movs	r3, #3
 800a2fe:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a300:	1dfb      	adds	r3, r7, #7
 800a302:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a304:	2301      	movs	r3, #1
 800a306:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a308:	f107 0308 	add.w	r3, r7, #8
 800a30c:	2100      	movs	r1, #0
 800a30e:	4618      	mov	r0, r3
 800a310:	f000 f948 	bl	800a5a4 <hci_send_req>
 800a314:	4603      	mov	r3, r0
 800a316:	2b00      	cmp	r3, #0
 800a318:	da01      	bge.n	800a31e <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a31a:	23ff      	movs	r3, #255	; 0xff
 800a31c:	e000      	b.n	800a320 <hci_reset+0x40>
  return status;
 800a31e:	79fb      	ldrb	r3, [r7, #7]
}
 800a320:	4618      	mov	r0, r3
 800a322:	3720      	adds	r7, #32
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b0ce      	sub	sp, #312	; 0x138
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	f107 0308 	add.w	r3, r7, #8
 800a332:	6019      	str	r1, [r3, #0]
 800a334:	1d3b      	adds	r3, r7, #4
 800a336:	601a      	str	r2, [r3, #0]
 800a338:	f107 030e 	add.w	r3, r7, #14
 800a33c:	4602      	mov	r2, r0
 800a33e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800a340:	f107 0318 	add.w	r3, r7, #24
 800a344:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800a348:	f107 0310 	add.w	r3, r7, #16
 800a34c:	2205      	movs	r2, #5
 800a34e:	2100      	movs	r1, #0
 800a350:	4618      	mov	r0, r3
 800a352:	f000 fa9b 	bl	800a88c <Osal_MemSet>
  int index_input = 0;
 800a356:	2300      	movs	r3, #0
 800a358:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 800a35c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a360:	f107 020e 	add.w	r2, r7, #14
 800a364:	8812      	ldrh	r2, [r2, #0]
 800a366:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a368:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a36c:	3302      	adds	r3, #2
 800a36e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a372:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a376:	2218      	movs	r2, #24
 800a378:	2100      	movs	r1, #0
 800a37a:	4618      	mov	r0, r3
 800a37c:	f000 fa86 	bl	800a88c <Osal_MemSet>
  rq.ogf = 0x08;
 800a380:	2308      	movs	r3, #8
 800a382:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 800a386:	2330      	movs	r3, #48	; 0x30
 800a388:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800a38c:	f107 0318 	add.w	r3, r7, #24
 800a390:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800a394:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a398:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800a39c:	f107 0310 	add.w	r3, r7, #16
 800a3a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800a3a4:	2305      	movs	r3, #5
 800a3a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a3aa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a3ae:	2100      	movs	r1, #0
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f000 f8f7 	bl	800a5a4 <hci_send_req>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	da01      	bge.n	800a3c0 <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 800a3bc:	23ff      	movs	r3, #255	; 0xff
 800a3be:	e016      	b.n	800a3ee <hci_le_read_phy+0xc6>
  if ( resp.Status )
 800a3c0:	f107 0310 	add.w	r3, r7, #16
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d003      	beq.n	800a3d2 <hci_le_read_phy+0xaa>
    return resp.Status;
 800a3ca:	f107 0310 	add.w	r3, r7, #16
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	e00d      	b.n	800a3ee <hci_le_read_phy+0xc6>
  *TX_PHY = resp.TX_PHY;
 800a3d2:	f107 0310 	add.w	r3, r7, #16
 800a3d6:	78da      	ldrb	r2, [r3, #3]
 800a3d8:	f107 0308 	add.w	r3, r7, #8
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 800a3e0:	f107 0310 	add.w	r3, r7, #16
 800a3e4:	791a      	ldrb	r2, [r3, #4]
 800a3e6:	1d3b      	adds	r3, r7, #4
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a3ec:	2300      	movs	r3, #0
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800a3f8:	b590      	push	{r4, r7, lr}
 800a3fa:	b0cd      	sub	sp, #308	; 0x134
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	4604      	mov	r4, r0
 800a400:	4608      	mov	r0, r1
 800a402:	4611      	mov	r1, r2
 800a404:	1dfb      	adds	r3, r7, #7
 800a406:	4622      	mov	r2, r4
 800a408:	701a      	strb	r2, [r3, #0]
 800a40a:	1dbb      	adds	r3, r7, #6
 800a40c:	4602      	mov	r2, r0
 800a40e:	701a      	strb	r2, [r3, #0]
 800a410:	1d7b      	adds	r3, r7, #5
 800a412:	460a      	mov	r2, r1
 800a414:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800a416:	f107 0310 	add.w	r3, r7, #16
 800a41a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a41e:	f107 030f 	add.w	r3, r7, #15
 800a422:	2200      	movs	r2, #0
 800a424:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a426:	2300      	movs	r3, #0
 800a428:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800a42c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a430:	1dfa      	adds	r2, r7, #7
 800a432:	7812      	ldrb	r2, [r2, #0]
 800a434:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a436:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a43a:	3301      	adds	r3, #1
 800a43c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800a440:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a444:	1dba      	adds	r2, r7, #6
 800a446:	7812      	ldrb	r2, [r2, #0]
 800a448:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a44a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a44e:	3301      	adds	r3, #1
 800a450:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800a454:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a458:	1d7a      	adds	r2, r7, #5
 800a45a:	7812      	ldrb	r2, [r2, #0]
 800a45c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a45e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a462:	3301      	adds	r3, #1
 800a464:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a468:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a46c:	2218      	movs	r2, #24
 800a46e:	2100      	movs	r1, #0
 800a470:	4618      	mov	r0, r3
 800a472:	f000 fa0b 	bl	800a88c <Osal_MemSet>
  rq.ogf = 0x08;
 800a476:	2308      	movs	r3, #8
 800a478:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800a47c:	2331      	movs	r3, #49	; 0x31
 800a47e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a482:	f107 0310 	add.w	r3, r7, #16
 800a486:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a48a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a48e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a492:	f107 030f 	add.w	r3, r7, #15
 800a496:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a49a:	2301      	movs	r3, #1
 800a49c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a4a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a4a4:	2100      	movs	r1, #0
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f000 f87c 	bl	800a5a4 <hci_send_req>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	da01      	bge.n	800a4b6 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 800a4b2:	23ff      	movs	r3, #255	; 0xff
 800a4b4:	e002      	b.n	800a4bc <hci_le_set_default_phy+0xc4>
  return status;
 800a4b6:	f107 030f 	add.w	r3, r7, #15
 800a4ba:	781b      	ldrb	r3, [r3, #0]
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd90      	pop	{r4, r7, pc}
	...

0800a4c8 <hci_init>:
static void OutputRspTrace(TL_EvtPacket_t *hcievt);
static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer);

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	4a08      	ldr	r2, [pc, #32]	; (800a4f8 <hci_init+0x30>)
 800a4d8:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800a4da:	4a08      	ldr	r2, [pc, #32]	; (800a4fc <hci_init+0x34>)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800a4e0:	4806      	ldr	r0, [pc, #24]	; (800a4fc <hci_init+0x34>)
 800a4e2:	f000 f9af 	bl	800a844 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f000 f8dc 	bl	800a6a8 <TlInit>

  return;
 800a4f0:	bf00      	nop
}
 800a4f2:	3708      	adds	r7, #8
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}
 800a4f8:	200005dc 	.word	0x200005dc
 800a4fc:	200005b4 	.word	0x200005b4

0800a500 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800a506:	4824      	ldr	r0, [pc, #144]	; (800a598 <hci_user_evt_proc+0x98>)
 800a508:	f000 fcc4 	bl	800ae94 <LST_is_empty>
 800a50c:	4603      	mov	r3, r0
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d12f      	bne.n	800a572 <hci_user_evt_proc+0x72>
 800a512:	4b22      	ldr	r3, [pc, #136]	; (800a59c <hci_user_evt_proc+0x9c>)
 800a514:	781b      	ldrb	r3, [r3, #0]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d02b      	beq.n	800a572 <hci_user_evt_proc+0x72>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a51a:	f107 030c 	add.w	r3, r7, #12
 800a51e:	4619      	mov	r1, r3
 800a520:	481d      	ldr	r0, [pc, #116]	; (800a598 <hci_user_evt_proc+0x98>)
 800a522:	f000 fd3e 	bl	800afa2 <LST_remove_head>

    OutputEvtTrace(phcievtbuffer);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	4618      	mov	r0, r3
 800a52a:	f000 f97b 	bl	800a824 <OutputEvtTrace>

    if (hciContext.UserEvtRx != NULL)
 800a52e:	4b1c      	ldr	r3, [pc, #112]	; (800a5a0 <hci_user_evt_proc+0xa0>)
 800a530:	69db      	ldr	r3, [r3, #28]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d00c      	beq.n	800a550 <hci_user_evt_proc+0x50>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800a53a:	2301      	movs	r3, #1
 800a53c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a53e:	4b18      	ldr	r3, [pc, #96]	; (800a5a0 <hci_user_evt_proc+0xa0>)
 800a540:	69db      	ldr	r3, [r3, #28]
 800a542:	1d3a      	adds	r2, r7, #4
 800a544:	4610      	mov	r0, r2
 800a546:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800a548:	793a      	ldrb	r2, [r7, #4]
 800a54a:	4b14      	ldr	r3, [pc, #80]	; (800a59c <hci_user_evt_proc+0x9c>)
 800a54c:	701a      	strb	r2, [r3, #0]
 800a54e:	e002      	b.n	800a556 <hci_user_evt_proc+0x56>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800a550:	4b12      	ldr	r3, [pc, #72]	; (800a59c <hci_user_evt_proc+0x9c>)
 800a552:	2201      	movs	r2, #1
 800a554:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800a556:	4b11      	ldr	r3, [pc, #68]	; (800a59c <hci_user_evt_proc+0x9c>)
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d004      	beq.n	800a568 <hci_user_evt_proc+0x68>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	4618      	mov	r0, r3
 800a562:	f000 ff99 	bl	800b498 <TL_MM_EvtDone>
 800a566:	e004      	b.n	800a572 <hci_user_evt_proc+0x72>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	4619      	mov	r1, r3
 800a56c:	480a      	ldr	r0, [pc, #40]	; (800a598 <hci_user_evt_proc+0x98>)
 800a56e:	f000 fcb1 	bl	800aed4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800a572:	4809      	ldr	r0, [pc, #36]	; (800a598 <hci_user_evt_proc+0x98>)
 800a574:	f000 fc8e 	bl	800ae94 <LST_is_empty>
 800a578:	4603      	mov	r3, r0
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d107      	bne.n	800a58e <hci_user_evt_proc+0x8e>
 800a57e:	4b07      	ldr	r3, [pc, #28]	; (800a59c <hci_user_evt_proc+0x9c>)
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d003      	beq.n	800a58e <hci_user_evt_proc+0x8e>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800a586:	4804      	ldr	r0, [pc, #16]	; (800a598 <hci_user_evt_proc+0x98>)
 800a588:	f001 fb35 	bl	800bbf6 <hci_notify_asynch_evt>
  }


  return;
 800a58c:	bf00      	nop
 800a58e:	bf00      	nop
}
 800a590:	3710      	adds	r7, #16
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
 800a596:	bf00      	nop
 800a598:	200000fc 	.word	0x200000fc
 800a59c:	20000108 	.word	0x20000108
 800a5a0:	200005b4 	.word	0x200005b4

0800a5a4 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b088      	sub	sp, #32
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	460b      	mov	r3, r1
 800a5ae:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800a5b0:	2000      	movs	r0, #0
 800a5b2:	f000 f8d5 	bl	800a760 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	885b      	ldrh	r3, [r3, #2]
 800a5be:	b21b      	sxth	r3, r3
 800a5c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a5c4:	b21a      	sxth	r2, r3
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	881b      	ldrh	r3, [r3, #0]
 800a5ca:	029b      	lsls	r3, r3, #10
 800a5cc:	b21b      	sxth	r3, r3
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	b21b      	sxth	r3, r3
 800a5d2:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	b2d9      	uxtb	r1, r3
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	689a      	ldr	r2, [r3, #8]
 800a5de:	8bbb      	ldrh	r3, [r7, #28]
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f000 f891 	bl	800a708 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800a5e6:	e052      	b.n	800a68e <hci_send_req+0xea>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800a5e8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800a5ec:	f001 fb1a 	bl	800bc24 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800a5f0:	e047      	b.n	800a682 <hci_send_req+0xde>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800a5f2:	f107 030c 	add.w	r3, r7, #12
 800a5f6:	4619      	mov	r1, r3
 800a5f8:	482a      	ldr	r0, [pc, #168]	; (800a6a4 <hci_send_req+0x100>)
 800a5fa:	f000 fcd2 	bl	800afa2 <LST_remove_head>

      OutputRspTrace(pevtpacket);
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	4618      	mov	r0, r3
 800a602:	f000 f8fb 	bl	800a7fc <OutputRspTrace>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	7a5b      	ldrb	r3, [r3, #9]
 800a60a:	2b0f      	cmp	r3, #15
 800a60c:	d114      	bne.n	800a638 <hci_send_req+0x94>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	330b      	adds	r3, #11
 800a612:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	885b      	ldrh	r3, [r3, #2]
 800a618:	b29b      	uxth	r3, r3
 800a61a:	8bba      	ldrh	r2, [r7, #28]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d104      	bne.n	800a62a <hci_send_req+0x86>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	691b      	ldr	r3, [r3, #16]
 800a624:	693a      	ldr	r2, [r7, #16]
 800a626:	7812      	ldrb	r2, [r2, #0]
 800a628:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	785b      	ldrb	r3, [r3, #1]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d027      	beq.n	800a682 <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800a632:	2301      	movs	r3, #1
 800a634:	77fb      	strb	r3, [r7, #31]
 800a636:	e024      	b.n	800a682 <hci_send_req+0xde>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	330b      	adds	r3, #11
 800a63c:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800a63e:	69bb      	ldr	r3, [r7, #24]
 800a640:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a644:	b29b      	uxth	r3, r3
 800a646:	8bba      	ldrh	r2, [r7, #28]
 800a648:	429a      	cmp	r2, r3
 800a64a:	d114      	bne.n	800a676 <hci_send_req+0xd2>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	7a9b      	ldrb	r3, [r3, #10]
 800a650:	3b03      	subs	r3, #3
 800a652:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	695a      	ldr	r2, [r3, #20]
 800a658:	7dfb      	ldrb	r3, [r7, #23]
 800a65a:	429a      	cmp	r2, r3
 800a65c:	bfa8      	it	ge
 800a65e:	461a      	movge	r2, r3
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6918      	ldr	r0, [r3, #16]
 800a668:	69bb      	ldr	r3, [r7, #24]
 800a66a:	1cd9      	adds	r1, r3, #3
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	695b      	ldr	r3, [r3, #20]
 800a670:	461a      	mov	r2, r3
 800a672:	f002 f899 	bl	800c7a8 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800a676:	69bb      	ldr	r3, [r7, #24]
 800a678:	781b      	ldrb	r3, [r3, #0]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d001      	beq.n	800a682 <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800a67e:	2301      	movs	r3, #1
 800a680:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800a682:	4808      	ldr	r0, [pc, #32]	; (800a6a4 <hci_send_req+0x100>)
 800a684:	f000 fc06 	bl	800ae94 <LST_is_empty>
 800a688:	4603      	mov	r3, r0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d0b1      	beq.n	800a5f2 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800a68e:	7ffb      	ldrb	r3, [r7, #31]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d0a9      	beq.n	800a5e8 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800a694:	2001      	movs	r0, #1
 800a696:	f000 f863 	bl	800a760 <NotifyCmdStatus>

  return 0;
 800a69a:	2300      	movs	r3, #0
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3720      	adds	r7, #32
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}
 800a6a4:	200005d4 	.word	0x200005d4

0800a6a8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b086      	sub	sp, #24
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800a6b0:	480f      	ldr	r0, [pc, #60]	; (800a6f0 <TlInit+0x48>)
 800a6b2:	f000 fbdf 	bl	800ae74 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800a6b6:	4a0f      	ldr	r2, [pc, #60]	; (800a6f4 <TlInit+0x4c>)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800a6bc:	480e      	ldr	r0, [pc, #56]	; (800a6f8 <TlInit+0x50>)
 800a6be:	f000 fbd9 	bl	800ae74 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800a6c2:	4b0e      	ldr	r3, [pc, #56]	; (800a6fc <TlInit+0x54>)
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800a6c8:	4b0d      	ldr	r3, [pc, #52]	; (800a700 <TlInit+0x58>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d00a      	beq.n	800a6e6 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800a6d4:	4b0b      	ldr	r3, [pc, #44]	; (800a704 <TlInit+0x5c>)
 800a6d6:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800a6d8:	4b09      	ldr	r3, [pc, #36]	; (800a700 <TlInit+0x58>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f107 0208 	add.w	r2, r7, #8
 800a6e0:	4610      	mov	r0, r2
 800a6e2:	4798      	blx	r3
  }

  return;
 800a6e4:	bf00      	nop
 800a6e6:	bf00      	nop
}
 800a6e8:	3718      	adds	r7, #24
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	200005d4 	.word	0x200005d4
 800a6f4:	20000104 	.word	0x20000104
 800a6f8:	200000fc 	.word	0x200000fc
 800a6fc:	20000108 	.word	0x20000108
 800a700:	200005b4 	.word	0x200005b4
 800a704:	0800a7a1 	.word	0x0800a7a1

0800a708 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b082      	sub	sp, #8
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	4603      	mov	r3, r0
 800a710:	603a      	str	r2, [r7, #0]
 800a712:	80fb      	strh	r3, [r7, #6]
 800a714:	460b      	mov	r3, r1
 800a716:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800a718:	4b0f      	ldr	r3, [pc, #60]	; (800a758 <SendCmd+0x50>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	88fa      	ldrh	r2, [r7, #6]
 800a71e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800a722:	4b0d      	ldr	r3, [pc, #52]	; (800a758 <SendCmd+0x50>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	797a      	ldrb	r2, [r7, #5]
 800a728:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800a72a:	4b0b      	ldr	r3, [pc, #44]	; (800a758 <SendCmd+0x50>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	330c      	adds	r3, #12
 800a730:	797a      	ldrb	r2, [r7, #5]
 800a732:	6839      	ldr	r1, [r7, #0]
 800a734:	4618      	mov	r0, r3
 800a736:	f002 f837 	bl	800c7a8 <memcpy>

  OutputCmdTrace(pCmdBuffer);
 800a73a:	4b07      	ldr	r3, [pc, #28]	; (800a758 <SendCmd+0x50>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4618      	mov	r0, r3
 800a740:	f000 f852 	bl	800a7e8 <OutputCmdTrace>

  hciContext.io.Send(0,0);
 800a744:	4b05      	ldr	r3, [pc, #20]	; (800a75c <SendCmd+0x54>)
 800a746:	691b      	ldr	r3, [r3, #16]
 800a748:	2100      	movs	r1, #0
 800a74a:	2000      	movs	r0, #0
 800a74c:	4798      	blx	r3

  return;
 800a74e:	bf00      	nop
}
 800a750:	3708      	adds	r7, #8
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	20000104 	.word	0x20000104
 800a75c:	200005b4 	.word	0x200005b4

0800a760 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b082      	sub	sp, #8
 800a764:	af00      	add	r7, sp, #0
 800a766:	4603      	mov	r3, r0
 800a768:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800a76a:	79fb      	ldrb	r3, [r7, #7]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d108      	bne.n	800a782 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800a770:	4b0a      	ldr	r3, [pc, #40]	; (800a79c <NotifyCmdStatus+0x3c>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d00d      	beq.n	800a794 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800a778:	4b08      	ldr	r3, [pc, #32]	; (800a79c <NotifyCmdStatus+0x3c>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2000      	movs	r0, #0
 800a77e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800a780:	e008      	b.n	800a794 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800a782:	4b06      	ldr	r3, [pc, #24]	; (800a79c <NotifyCmdStatus+0x3c>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d004      	beq.n	800a794 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800a78a:	4b04      	ldr	r3, [pc, #16]	; (800a79c <NotifyCmdStatus+0x3c>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	2001      	movs	r0, #1
 800a790:	4798      	blx	r3
  return;
 800a792:	bf00      	nop
 800a794:	bf00      	nop
}
 800a796:	3708      	adds	r7, #8
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}
 800a79c:	200005dc 	.word	0x200005dc

0800a7a0 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b082      	sub	sp, #8
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	7a5b      	ldrb	r3, [r3, #9]
 800a7ac:	2b0f      	cmp	r3, #15
 800a7ae:	d003      	beq.n	800a7b8 <TlEvtReceived+0x18>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	7a5b      	ldrb	r3, [r3, #9]
 800a7b4:	2b0e      	cmp	r3, #14
 800a7b6:	d107      	bne.n	800a7c8 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800a7b8:	6879      	ldr	r1, [r7, #4]
 800a7ba:	4809      	ldr	r0, [pc, #36]	; (800a7e0 <TlEvtReceived+0x40>)
 800a7bc:	f000 fbae 	bl	800af1c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800a7c0:	2000      	movs	r0, #0
 800a7c2:	f001 fa24 	bl	800bc0e <hci_cmd_resp_release>
 800a7c6:	e006      	b.n	800a7d6 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800a7c8:	6879      	ldr	r1, [r7, #4]
 800a7ca:	4806      	ldr	r0, [pc, #24]	; (800a7e4 <TlEvtReceived+0x44>)
 800a7cc:	f000 fba6 	bl	800af1c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a7d0:	4804      	ldr	r0, [pc, #16]	; (800a7e4 <TlEvtReceived+0x44>)
 800a7d2:	f001 fa10 	bl	800bbf6 <hci_notify_asynch_evt>
  }

  return;
 800a7d6:	bf00      	nop
}
 800a7d8:	3708      	adds	r7, #8
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}
 800a7de:	bf00      	nop
 800a7e0:	200005d4 	.word	0x200005d4
 800a7e4:	200000fc 	.word	0x200000fc

0800a7e8 <OutputCmdTrace>:

static void OutputCmdTrace(TL_CmdPacket_t *pCmdBuffer)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b083      	sub	sp, #12
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
    TL_HCI_CMD_DBG_MSG(" payload:");
    TL_HCI_CMD_DBG_BUF(pCmdBuffer->cmdserial.cmd.payload, pCmdBuffer->cmdserial.cmd.plen, "");
  }
  TL_HCI_CMD_DBG_MSG("\r\n");

  return;
 800a7f0:	bf00      	nop
}
 800a7f2:	370c      	adds	r7, #12
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr

0800a7fc <OutputRspTrace>:

static void OutputRspTrace(TL_EvtPacket_t *hcievt)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  switch(hcievt->evtserial.evt.evtcode)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	7a5b      	ldrb	r3, [r3, #9]
 800a808:	2b0e      	cmp	r3, #14
 800a80a:	d002      	beq.n	800a812 <OutputRspTrace+0x16>
 800a80c:	2b0f      	cmp	r3, #15
 800a80e:	d002      	beq.n	800a816 <OutputRspTrace+0x1a>
      }
      break;

    default:
      TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", hcievt->evtserial.evt.evtcode);
      break;
 800a810:	e002      	b.n	800a818 <OutputRspTrace+0x1c>
      break;
 800a812:	bf00      	nop
 800a814:	e000      	b.n	800a818 <OutputRspTrace+0x1c>
      break;
 800a816:	bf00      	nop
  }

  TL_HCI_CMD_DBG_MSG("\r\n");

  return;
 800a818:	bf00      	nop
}
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <OutputEvtTrace>:

static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer)
{
 800a824:	b480      	push	{r7}
 800a826:	b083      	sub	sp, #12
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  if(phcievtbuffer->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	7a5b      	ldrb	r3, [r3, #9]
 800a830:	2bff      	cmp	r3, #255	; 0xff
 800a832:	d100      	bne.n	800a836 <OutputEvtTrace+0x12>
    }
  }

  TL_HCI_EVT_DBG_MSG("\r\n");

  return;
 800a834:	bf00      	nop
 800a836:	bf00      	nop
}
 800a838:	370c      	adds	r7, #12
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr
	...

0800a844 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800a844:	b480      	push	{r7}
 800a846:	b083      	sub	sp, #12
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	4a05      	ldr	r2, [pc, #20]	; (800a864 <hci_register_io_bus+0x20>)
 800a850:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	4a04      	ldr	r2, [pc, #16]	; (800a868 <hci_register_io_bus+0x24>)
 800a856:	611a      	str	r2, [r3, #16]

  return;
 800a858:	bf00      	nop
}
 800a85a:	370c      	adds	r7, #12
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr
 800a864:	0800b271 	.word	0x0800b271
 800a868:	0800b2d9 	.word	0x0800b2d9

0800a86c <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	60f8      	str	r0, [r7, #12]
 800a874:	60b9      	str	r1, [r7, #8]
 800a876:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800a878:	687a      	ldr	r2, [r7, #4]
 800a87a:	68b9      	ldr	r1, [r7, #8]
 800a87c:	68f8      	ldr	r0, [r7, #12]
 800a87e:	f001 ff93 	bl	800c7a8 <memcpy>
 800a882:	4603      	mov	r3, r0
}
 800a884:	4618      	mov	r0, r3
 800a886:	3710      	adds	r7, #16
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b084      	sub	sp, #16
 800a890:	af00      	add	r7, sp, #0
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800a898:	687a      	ldr	r2, [r7, #4]
 800a89a:	68b9      	ldr	r1, [r7, #8]
 800a89c:	68f8      	ldr	r0, [r7, #12]
 800a89e:	f001 ff8e 	bl	800c7be <memset>
 800a8a2:	4603      	mov	r3, r0
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3710      	adds	r7, #16
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b085      	sub	sp, #20
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800a8b6:	4b0f      	ldr	r3, [pc, #60]	; (800a8f4 <OTP_Read+0x48>)
 800a8b8:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a8ba:	e002      	b.n	800a8c2 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	3b08      	subs	r3, #8
 800a8c0:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	3307      	adds	r3, #7
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	79fa      	ldrb	r2, [r7, #7]
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d003      	beq.n	800a8d6 <OTP_Read+0x2a>
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	4a09      	ldr	r2, [pc, #36]	; (800a8f8 <OTP_Read+0x4c>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d1f2      	bne.n	800a8bc <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	3307      	adds	r3, #7
 800a8da:	781b      	ldrb	r3, [r3, #0]
 800a8dc:	79fa      	ldrb	r2, [r7, #7]
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d001      	beq.n	800a8e6 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3714      	adds	r7, #20
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr
 800a8f4:	1fff73f8 	.word	0x1fff73f8
 800a8f8:	1fff7000 	.word	0x1fff7000

0800a8fc <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b08a      	sub	sp, #40	; 0x28
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800a904:	2300      	movs	r3, #0
 800a906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	3301      	adds	r3, #1
 800a90e:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800a910:	6a3b      	ldr	r3, [r7, #32]
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	2bff      	cmp	r3, #255	; 0xff
 800a916:	d000      	beq.n	800a91a <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800a918:	e04a      	b.n	800a9b0 <PeerToPeer_Event_Handler+0xb4>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 800a91a:	6a3b      	ldr	r3, [r7, #32]
 800a91c:	3302      	adds	r3, #2
 800a91e:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 800a920:	69fb      	ldr	r3, [r7, #28]
 800a922:	881b      	ldrh	r3, [r3, #0]
 800a924:	b29b      	uxth	r3, r3
 800a926:	461a      	mov	r2, r3
 800a928:	f640 4301 	movw	r3, #3073	; 0xc01
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d000      	beq.n	800a932 <PeerToPeer_Event_Handler+0x36>
          break;
 800a930:	e03d      	b.n	800a9ae <PeerToPeer_Event_Handler+0xb2>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 800a932:	69fb      	ldr	r3, [r7, #28]
 800a934:	3302      	adds	r3, #2
 800a936:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800a938:	69bb      	ldr	r3, [r7, #24]
 800a93a:	885b      	ldrh	r3, [r3, #2]
 800a93c:	b29b      	uxth	r3, r3
 800a93e:	461a      	mov	r2, r3
 800a940:	4b1e      	ldr	r3, [pc, #120]	; (800a9bc <PeerToPeer_Event_Handler+0xc0>)
 800a942:	889b      	ldrh	r3, [r3, #4]
 800a944:	3302      	adds	r3, #2
 800a946:	429a      	cmp	r2, r3
 800a948:	d118      	bne.n	800a97c <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 800a94a:	2301      	movs	r3, #1
 800a94c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800a950:	69bb      	ldr	r3, [r7, #24]
 800a952:	7a1b      	ldrb	r3, [r3, #8]
 800a954:	f003 0301 	and.w	r3, r3, #1
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d007      	beq.n	800a96c <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800a95c:	2300      	movs	r3, #0
 800a95e:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800a960:	f107 0308 	add.w	r3, r7, #8
 800a964:	4618      	mov	r0, r3
 800a966:	f001 f9a1 	bl	800bcac <P2PS_STM_App_Notification>
        break;
 800a96a:	e01f      	b.n	800a9ac <PeerToPeer_Event_Handler+0xb0>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800a96c:	2301      	movs	r3, #1
 800a96e:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800a970:	f107 0308 	add.w	r3, r7, #8
 800a974:	4618      	mov	r0, r3
 800a976:	f001 f999 	bl	800bcac <P2PS_STM_App_Notification>
        break;
 800a97a:	e017      	b.n	800a9ac <PeerToPeer_Event_Handler+0xb0>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 800a97c:	69bb      	ldr	r3, [r7, #24]
 800a97e:	885b      	ldrh	r3, [r3, #2]
 800a980:	b29b      	uxth	r3, r3
 800a982:	461a      	mov	r2, r3
 800a984:	4b0d      	ldr	r3, [pc, #52]	; (800a9bc <PeerToPeer_Event_Handler+0xc0>)
 800a986:	885b      	ldrh	r3, [r3, #2]
 800a988:	3301      	adds	r3, #1
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d10e      	bne.n	800a9ac <PeerToPeer_Event_Handler+0xb0>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800a98e:	2303      	movs	r3, #3
 800a990:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800a992:	69bb      	ldr	r3, [r7, #24]
 800a994:	88db      	ldrh	r3, [r3, #6]
 800a996:	b29b      	uxth	r3, r3
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800a99c:	69bb      	ldr	r3, [r7, #24]
 800a99e:	3308      	adds	r3, #8
 800a9a0:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 800a9a2:	f107 0308 	add.w	r3, r7, #8
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f001 f980 	bl	800bcac <P2PS_STM_App_Notification>
        break;
 800a9ac:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 800a9ae:	bf00      	nop
  }

  return(return_value);
 800a9b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3728      	adds	r7, #40	; 0x28
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}
 800a9bc:	2000010c 	.word	0x2000010c

0800a9c0 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b08a      	sub	sp, #40	; 0x28
 800a9c4:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800a9c6:	484a      	ldr	r0, [pc, #296]	; (800aaf0 <P2PS_STM_Init+0x130>)
 800a9c8:	f000 fba6 	bl	800b118 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800a9cc:	238f      	movs	r3, #143	; 0x8f
 800a9ce:	703b      	strb	r3, [r7, #0]
 800a9d0:	23e5      	movs	r3, #229	; 0xe5
 800a9d2:	707b      	strb	r3, [r7, #1]
 800a9d4:	23b3      	movs	r3, #179	; 0xb3
 800a9d6:	70bb      	strb	r3, [r7, #2]
 800a9d8:	23d5      	movs	r3, #213	; 0xd5
 800a9da:	70fb      	strb	r3, [r7, #3]
 800a9dc:	232e      	movs	r3, #46	; 0x2e
 800a9de:	713b      	strb	r3, [r7, #4]
 800a9e0:	237f      	movs	r3, #127	; 0x7f
 800a9e2:	717b      	strb	r3, [r7, #5]
 800a9e4:	234a      	movs	r3, #74	; 0x4a
 800a9e6:	71bb      	strb	r3, [r7, #6]
 800a9e8:	2398      	movs	r3, #152	; 0x98
 800a9ea:	71fb      	strb	r3, [r7, #7]
 800a9ec:	232a      	movs	r3, #42	; 0x2a
 800a9ee:	723b      	strb	r3, [r7, #8]
 800a9f0:	2348      	movs	r3, #72	; 0x48
 800a9f2:	727b      	strb	r3, [r7, #9]
 800a9f4:	237a      	movs	r3, #122	; 0x7a
 800a9f6:	72bb      	strb	r3, [r7, #10]
 800a9f8:	23cc      	movs	r3, #204	; 0xcc
 800a9fa:	72fb      	strb	r3, [r7, #11]
 800a9fc:	2340      	movs	r3, #64	; 0x40
 800a9fe:	733b      	strb	r3, [r7, #12]
 800aa00:	23fe      	movs	r3, #254	; 0xfe
 800aa02:	737b      	strb	r3, [r7, #13]
 800aa04:	2300      	movs	r3, #0
 800aa06:	73bb      	strb	r3, [r7, #14]
 800aa08:	2300      	movs	r3, #0
 800aa0a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800aa0c:	4639      	mov	r1, r7
 800aa0e:	4b39      	ldr	r3, [pc, #228]	; (800aaf4 <P2PS_STM_Init+0x134>)
 800aa10:	9300      	str	r3, [sp, #0]
 800aa12:	2308      	movs	r3, #8
 800aa14:	2201      	movs	r2, #1
 800aa16:	2002      	movs	r0, #2
 800aa18:	f7ff f8ea 	bl	8009bf0 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800aa1c:	2319      	movs	r3, #25
 800aa1e:	703b      	strb	r3, [r7, #0]
 800aa20:	23ed      	movs	r3, #237	; 0xed
 800aa22:	707b      	strb	r3, [r7, #1]
 800aa24:	2382      	movs	r3, #130	; 0x82
 800aa26:	70bb      	strb	r3, [r7, #2]
 800aa28:	23ae      	movs	r3, #174	; 0xae
 800aa2a:	70fb      	strb	r3, [r7, #3]
 800aa2c:	23ed      	movs	r3, #237	; 0xed
 800aa2e:	713b      	strb	r3, [r7, #4]
 800aa30:	2321      	movs	r3, #33	; 0x21
 800aa32:	717b      	strb	r3, [r7, #5]
 800aa34:	234c      	movs	r3, #76	; 0x4c
 800aa36:	71bb      	strb	r3, [r7, #6]
 800aa38:	239d      	movs	r3, #157	; 0x9d
 800aa3a:	71fb      	strb	r3, [r7, #7]
 800aa3c:	2341      	movs	r3, #65	; 0x41
 800aa3e:	723b      	strb	r3, [r7, #8]
 800aa40:	2345      	movs	r3, #69	; 0x45
 800aa42:	727b      	strb	r3, [r7, #9]
 800aa44:	2322      	movs	r3, #34	; 0x22
 800aa46:	72bb      	strb	r3, [r7, #10]
 800aa48:	238e      	movs	r3, #142	; 0x8e
 800aa4a:	72fb      	strb	r3, [r7, #11]
 800aa4c:	2341      	movs	r3, #65	; 0x41
 800aa4e:	733b      	strb	r3, [r7, #12]
 800aa50:	23fe      	movs	r3, #254	; 0xfe
 800aa52:	737b      	strb	r3, [r7, #13]
 800aa54:	2300      	movs	r3, #0
 800aa56:	73bb      	strb	r3, [r7, #14]
 800aa58:	2300      	movs	r3, #0
 800aa5a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800aa5c:	4b25      	ldr	r3, [pc, #148]	; (800aaf4 <P2PS_STM_Init+0x134>)
 800aa5e:	8818      	ldrh	r0, [r3, #0]
 800aa60:	463a      	mov	r2, r7
 800aa62:	4b25      	ldr	r3, [pc, #148]	; (800aaf8 <P2PS_STM_Init+0x138>)
 800aa64:	9305      	str	r3, [sp, #20]
 800aa66:	2301      	movs	r3, #1
 800aa68:	9304      	str	r3, [sp, #16]
 800aa6a:	230a      	movs	r3, #10
 800aa6c:	9303      	str	r3, [sp, #12]
 800aa6e:	2301      	movs	r3, #1
 800aa70:	9302      	str	r3, [sp, #8]
 800aa72:	2300      	movs	r3, #0
 800aa74:	9301      	str	r3, [sp, #4]
 800aa76:	2306      	movs	r3, #6
 800aa78:	9300      	str	r3, [sp, #0]
 800aa7a:	2302      	movs	r3, #2
 800aa7c:	2102      	movs	r1, #2
 800aa7e:	f7ff f966 	bl	8009d4e <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800aa82:	2319      	movs	r3, #25
 800aa84:	703b      	strb	r3, [r7, #0]
 800aa86:	23ed      	movs	r3, #237	; 0xed
 800aa88:	707b      	strb	r3, [r7, #1]
 800aa8a:	2382      	movs	r3, #130	; 0x82
 800aa8c:	70bb      	strb	r3, [r7, #2]
 800aa8e:	23ae      	movs	r3, #174	; 0xae
 800aa90:	70fb      	strb	r3, [r7, #3]
 800aa92:	23ed      	movs	r3, #237	; 0xed
 800aa94:	713b      	strb	r3, [r7, #4]
 800aa96:	2321      	movs	r3, #33	; 0x21
 800aa98:	717b      	strb	r3, [r7, #5]
 800aa9a:	234c      	movs	r3, #76	; 0x4c
 800aa9c:	71bb      	strb	r3, [r7, #6]
 800aa9e:	239d      	movs	r3, #157	; 0x9d
 800aaa0:	71fb      	strb	r3, [r7, #7]
 800aaa2:	2341      	movs	r3, #65	; 0x41
 800aaa4:	723b      	strb	r3, [r7, #8]
 800aaa6:	2345      	movs	r3, #69	; 0x45
 800aaa8:	727b      	strb	r3, [r7, #9]
 800aaaa:	2322      	movs	r3, #34	; 0x22
 800aaac:	72bb      	strb	r3, [r7, #10]
 800aaae:	238e      	movs	r3, #142	; 0x8e
 800aab0:	72fb      	strb	r3, [r7, #11]
 800aab2:	2342      	movs	r3, #66	; 0x42
 800aab4:	733b      	strb	r3, [r7, #12]
 800aab6:	23fe      	movs	r3, #254	; 0xfe
 800aab8:	737b      	strb	r3, [r7, #13]
 800aaba:	2300      	movs	r3, #0
 800aabc:	73bb      	strb	r3, [r7, #14]
 800aabe:	2300      	movs	r3, #0
 800aac0:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800aac2:	4b0c      	ldr	r3, [pc, #48]	; (800aaf4 <P2PS_STM_Init+0x134>)
 800aac4:	8818      	ldrh	r0, [r3, #0]
 800aac6:	463a      	mov	r2, r7
 800aac8:	4b0c      	ldr	r3, [pc, #48]	; (800aafc <P2PS_STM_Init+0x13c>)
 800aaca:	9305      	str	r3, [sp, #20]
 800aacc:	2301      	movs	r3, #1
 800aace:	9304      	str	r3, [sp, #16]
 800aad0:	230a      	movs	r3, #10
 800aad2:	9303      	str	r3, [sp, #12]
 800aad4:	2301      	movs	r3, #1
 800aad6:	9302      	str	r3, [sp, #8]
 800aad8:	2300      	movs	r3, #0
 800aada:	9301      	str	r3, [sp, #4]
 800aadc:	2310      	movs	r3, #16
 800aade:	9300      	str	r3, [sp, #0]
 800aae0:	237b      	movs	r3, #123	; 0x7b
 800aae2:	2102      	movs	r1, #2
 800aae4:	f7ff f933 	bl	8009d4e <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 800aae8:	bf00      	nop
}
 800aaea:	3710      	adds	r7, #16
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}
 800aaf0:	0800a8fd 	.word	0x0800a8fd
 800aaf4:	2000010c 	.word	0x2000010c
 800aaf8:	2000010e 	.word	0x2000010e
 800aafc:	20000110 	.word	0x20000110

0800ab00 <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b086      	sub	sp, #24
 800ab04:	af02      	add	r7, sp, #8
 800ab06:	4603      	mov	r3, r0
 800ab08:	6039      	str	r1, [r7, #0]
 800ab0a:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800ab0c:	2342      	movs	r3, #66	; 0x42
 800ab0e:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800ab10:	88fb      	ldrh	r3, [r7, #6]
 800ab12:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d000      	beq.n	800ab1c <P2PS_STM_App_Update_Char+0x1c>
                             (uint8_t *)  pPayload);
    
      break;

    default:
      break;
 800ab1a:	e00c      	b.n	800ab36 <P2PS_STM_App_Update_Char+0x36>
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 800ab1c:	4b08      	ldr	r3, [pc, #32]	; (800ab40 <P2PS_STM_App_Update_Char+0x40>)
 800ab1e:	8818      	ldrh	r0, [r3, #0]
 800ab20:	4b07      	ldr	r3, [pc, #28]	; (800ab40 <P2PS_STM_App_Update_Char+0x40>)
 800ab22:	8899      	ldrh	r1, [r3, #4]
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	9300      	str	r3, [sp, #0]
 800ab28:	237b      	movs	r3, #123	; 0x7b
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	f7ff f9f9 	bl	8009f22 <aci_gatt_update_char_value>
 800ab30:	4603      	mov	r3, r0
 800ab32:	73fb      	strb	r3, [r7, #15]
      break;
 800ab34:	bf00      	nop
  }

  return result;
 800ab36:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3710      	adds	r7, #16
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}
 800ab40:	2000010c 	.word	0x2000010c

0800ab44 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b088      	sub	sp, #32
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800ab4c:	f107 030c 	add.w	r3, r7, #12
 800ab50:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800ab58:	69fb      	ldr	r3, [r7, #28]
 800ab5a:	2121      	movs	r1, #33	; 0x21
 800ab5c:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800ab60:	f000 f88c 	bl	800ac7c <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800ab64:	69fb      	ldr	r3, [r7, #28]
 800ab66:	330b      	adds	r3, #11
 800ab68:	78db      	ldrb	r3, [r3, #3]
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3720      	adds	r7, #32
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}

0800ab72 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800ab72:	b580      	push	{r7, lr}
 800ab74:	b088      	sub	sp, #32
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800ab7a:	f107 030c 	add.w	r3, r7, #12
 800ab7e:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800ab86:	69fb      	ldr	r3, [r7, #28]
 800ab88:	210f      	movs	r1, #15
 800ab8a:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800ab8e:	f000 f875 	bl	800ac7c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800ab92:	69fb      	ldr	r3, [r7, #28]
 800ab94:	330b      	adds	r3, #11
 800ab96:	78db      	ldrb	r3, [r3, #3]
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3720      	adds	r7, #32
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <shci_init>:
static void OutputRspTrace(TL_EvtPacket_t *p_rsp);
static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer);

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	4a08      	ldr	r2, [pc, #32]	; (800abd0 <shci_init+0x30>)
 800abb0:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800abb2:	4a08      	ldr	r2, [pc, #32]	; (800abd4 <shci_init+0x34>)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800abb8:	4806      	ldr	r0, [pc, #24]	; (800abd4 <shci_init+0x34>)
 800abba:	f000 f947 	bl	800ae4c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	4618      	mov	r0, r3
 800abc4:	f000 f8a0 	bl	800ad08 <TlInit>

  return;
 800abc8:	bf00      	nop
}
 800abca:	3708      	adds	r7, #8
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}
 800abd0:	20000600 	.word	0x20000600
 800abd4:	200005e0 	.word	0x200005e0

0800abd8 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b084      	sub	sp, #16
 800abdc:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800abde:	4824      	ldr	r0, [pc, #144]	; (800ac70 <shci_user_evt_proc+0x98>)
 800abe0:	f000 f958 	bl	800ae94 <LST_is_empty>
 800abe4:	4603      	mov	r3, r0
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d12f      	bne.n	800ac4a <shci_user_evt_proc+0x72>
 800abea:	4b22      	ldr	r3, [pc, #136]	; (800ac74 <shci_user_evt_proc+0x9c>)
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d02b      	beq.n	800ac4a <shci_user_evt_proc+0x72>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800abf2:	f107 030c 	add.w	r3, r7, #12
 800abf6:	4619      	mov	r1, r3
 800abf8:	481d      	ldr	r0, [pc, #116]	; (800ac70 <shci_user_evt_proc+0x98>)
 800abfa:	f000 f9d2 	bl	800afa2 <LST_remove_head>

    OutputEvtTrace(phcievtbuffer);
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	4618      	mov	r0, r3
 800ac02:	f000 f913 	bl	800ae2c <OutputEvtTrace>

    if (shciContext.UserEvtRx != NULL)
 800ac06:	4b1c      	ldr	r3, [pc, #112]	; (800ac78 <shci_user_evt_proc+0xa0>)
 800ac08:	69db      	ldr	r3, [r3, #28]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d00c      	beq.n	800ac28 <shci_user_evt_proc+0x50>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800ac12:	2301      	movs	r3, #1
 800ac14:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800ac16:	4b18      	ldr	r3, [pc, #96]	; (800ac78 <shci_user_evt_proc+0xa0>)
 800ac18:	69db      	ldr	r3, [r3, #28]
 800ac1a:	1d3a      	adds	r2, r7, #4
 800ac1c:	4610      	mov	r0, r2
 800ac1e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800ac20:	793a      	ldrb	r2, [r7, #4]
 800ac22:	4b14      	ldr	r3, [pc, #80]	; (800ac74 <shci_user_evt_proc+0x9c>)
 800ac24:	701a      	strb	r2, [r3, #0]
 800ac26:	e002      	b.n	800ac2e <shci_user_evt_proc+0x56>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800ac28:	4b12      	ldr	r3, [pc, #72]	; (800ac74 <shci_user_evt_proc+0x9c>)
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800ac2e:	4b11      	ldr	r3, [pc, #68]	; (800ac74 <shci_user_evt_proc+0x9c>)
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d004      	beq.n	800ac40 <shci_user_evt_proc+0x68>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f000 fc2d 	bl	800b498 <TL_MM_EvtDone>
 800ac3e:	e004      	b.n	800ac4a <shci_user_evt_proc+0x72>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	4619      	mov	r1, r3
 800ac44:	480a      	ldr	r0, [pc, #40]	; (800ac70 <shci_user_evt_proc+0x98>)
 800ac46:	f000 f945 	bl	800aed4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800ac4a:	4809      	ldr	r0, [pc, #36]	; (800ac70 <shci_user_evt_proc+0x98>)
 800ac4c:	f000 f922 	bl	800ae94 <LST_is_empty>
 800ac50:	4603      	mov	r3, r0
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d107      	bne.n	800ac66 <shci_user_evt_proc+0x8e>
 800ac56:	4b07      	ldr	r3, [pc, #28]	; (800ac74 <shci_user_evt_proc+0x9c>)
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d003      	beq.n	800ac66 <shci_user_evt_proc+0x8e>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800ac5e:	4804      	ldr	r0, [pc, #16]	; (800ac70 <shci_user_evt_proc+0x98>)
 800ac60:	f7f6 f803 	bl	8000c6a <shci_notify_asynch_evt>
  }


  return;
 800ac64:	bf00      	nop
 800ac66:	bf00      	nop
}
 800ac68:	3710      	adds	r7, #16
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
 800ac6e:	bf00      	nop
 800ac70:	20000138 	.word	0x20000138
 800ac74:	20000148 	.word	0x20000148
 800ac78:	200005e0 	.word	0x200005e0

0800ac7c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	60ba      	str	r2, [r7, #8]
 800ac84:	607b      	str	r3, [r7, #4]
 800ac86:	4603      	mov	r3, r0
 800ac88:	81fb      	strh	r3, [r7, #14]
 800ac8a:	460b      	mov	r3, r1
 800ac8c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800ac8e:	2000      	movs	r0, #0
 800ac90:	f000 f86c 	bl	800ad6c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800ac94:	4b1a      	ldr	r3, [pc, #104]	; (800ad00 <shci_send+0x84>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	89fa      	ldrh	r2, [r7, #14]
 800ac9a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800ac9e:	4b18      	ldr	r3, [pc, #96]	; (800ad00 <shci_send+0x84>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	7b7a      	ldrb	r2, [r7, #13]
 800aca4:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800aca6:	4b16      	ldr	r3, [pc, #88]	; (800ad00 <shci_send+0x84>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	330c      	adds	r3, #12
 800acac:	7b7a      	ldrb	r2, [r7, #13]
 800acae:	68b9      	ldr	r1, [r7, #8]
 800acb0:	4618      	mov	r0, r3
 800acb2:	f001 fd79 	bl	800c7a8 <memcpy>

  OutputCmdTrace(pCmdBuffer);
 800acb6:	4b12      	ldr	r3, [pc, #72]	; (800ad00 <shci_send+0x84>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4618      	mov	r0, r3
 800acbc:	f000 f89c 	bl	800adf8 <OutputCmdTrace>

  shciContext.io.Send(0,0);
 800acc0:	4b10      	ldr	r3, [pc, #64]	; (800ad04 <shci_send+0x88>)
 800acc2:	691b      	ldr	r3, [r3, #16]
 800acc4:	2100      	movs	r1, #0
 800acc6:	2000      	movs	r0, #0
 800acc8:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800acca:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800acce:	f7f5 ffe4 	bl	8000c9a <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f103 0008 	add.w	r0, r3, #8
 800acd8:	4b09      	ldr	r3, [pc, #36]	; (800ad00 <shci_send+0x84>)
 800acda:	6819      	ldr	r1, [r3, #0]
 800acdc:	4b08      	ldr	r3, [pc, #32]	; (800ad00 <shci_send+0x84>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	789b      	ldrb	r3, [r3, #2]
 800ace2:	3303      	adds	r3, #3
 800ace4:	461a      	mov	r2, r3
 800ace6:	f001 fd5f 	bl	800c7a8 <memcpy>

  OutputRspTrace(p_rsp);
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 f88e 	bl	800ae0c <OutputRspTrace>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800acf0:	2001      	movs	r0, #1
 800acf2:	f000 f83b 	bl	800ad6c <Cmd_SetStatus>

  return;
 800acf6:	bf00      	nop
}
 800acf8:	3710      	adds	r7, #16
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop
 800ad00:	20000144 	.word	0x20000144
 800ad04:	200005e0 	.word	0x200005e0

0800ad08 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b086      	sub	sp, #24
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800ad10:	4a10      	ldr	r2, [pc, #64]	; (800ad54 <TlInit+0x4c>)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800ad16:	4810      	ldr	r0, [pc, #64]	; (800ad58 <TlInit+0x50>)
 800ad18:	f000 f8ac 	bl	800ae74 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800ad1c:	2001      	movs	r0, #1
 800ad1e:	f000 f825 	bl	800ad6c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800ad22:	4b0e      	ldr	r3, [pc, #56]	; (800ad5c <TlInit+0x54>)
 800ad24:	2201      	movs	r2, #1
 800ad26:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800ad28:	4b0d      	ldr	r3, [pc, #52]	; (800ad60 <TlInit+0x58>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d00c      	beq.n	800ad4a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800ad34:	4b0b      	ldr	r3, [pc, #44]	; (800ad64 <TlInit+0x5c>)
 800ad36:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800ad38:	4b0b      	ldr	r3, [pc, #44]	; (800ad68 <TlInit+0x60>)
 800ad3a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800ad3c:	4b08      	ldr	r3, [pc, #32]	; (800ad60 <TlInit+0x58>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f107 020c 	add.w	r2, r7, #12
 800ad44:	4610      	mov	r0, r2
 800ad46:	4798      	blx	r3
  }

  return;
 800ad48:	bf00      	nop
 800ad4a:	bf00      	nop
}
 800ad4c:	3718      	adds	r7, #24
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
 800ad52:	bf00      	nop
 800ad54:	20000144 	.word	0x20000144
 800ad58:	20000138 	.word	0x20000138
 800ad5c:	20000148 	.word	0x20000148
 800ad60:	200005e0 	.word	0x200005e0
 800ad64:	0800adbd 	.word	0x0800adbd
 800ad68:	0800add5 	.word	0x0800add5

0800ad6c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b082      	sub	sp, #8
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	4603      	mov	r3, r0
 800ad74:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800ad76:	79fb      	ldrb	r3, [r7, #7]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d10b      	bne.n	800ad94 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800ad7c:	4b0d      	ldr	r3, [pc, #52]	; (800adb4 <Cmd_SetStatus+0x48>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d003      	beq.n	800ad8c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800ad84:	4b0b      	ldr	r3, [pc, #44]	; (800adb4 <Cmd_SetStatus+0x48>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	2000      	movs	r0, #0
 800ad8a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800ad8c:	4b0a      	ldr	r3, [pc, #40]	; (800adb8 <Cmd_SetStatus+0x4c>)
 800ad8e:	2200      	movs	r2, #0
 800ad90:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800ad92:	e00b      	b.n	800adac <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800ad94:	4b08      	ldr	r3, [pc, #32]	; (800adb8 <Cmd_SetStatus+0x4c>)
 800ad96:	2201      	movs	r2, #1
 800ad98:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800ad9a:	4b06      	ldr	r3, [pc, #24]	; (800adb4 <Cmd_SetStatus+0x48>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d004      	beq.n	800adac <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800ada2:	4b04      	ldr	r3, [pc, #16]	; (800adb4 <Cmd_SetStatus+0x48>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	2001      	movs	r0, #1
 800ada8:	4798      	blx	r3
  return;
 800adaa:	bf00      	nop
 800adac:	bf00      	nop
}
 800adae:	3708      	adds	r7, #8
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}
 800adb4:	20000600 	.word	0x20000600
 800adb8:	20000140 	.word	0x20000140

0800adbc <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b082      	sub	sp, #8
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800adc4:	2000      	movs	r0, #0
 800adc6:	f7f5 ff5d 	bl	8000c84 <shci_cmd_resp_release>

  return;
 800adca:	bf00      	nop
}
 800adcc:	3708      	adds	r7, #8
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
	...

0800add4 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b082      	sub	sp, #8
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800addc:	6879      	ldr	r1, [r7, #4]
 800adde:	4805      	ldr	r0, [pc, #20]	; (800adf4 <TlUserEvtReceived+0x20>)
 800ade0:	f000 f89c 	bl	800af1c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800ade4:	4803      	ldr	r0, [pc, #12]	; (800adf4 <TlUserEvtReceived+0x20>)
 800ade6:	f7f5 ff40 	bl	8000c6a <shci_notify_asynch_evt>

  return;
 800adea:	bf00      	nop
}
 800adec:	3708      	adds	r7, #8
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop
 800adf4:	20000138 	.word	0x20000138

0800adf8 <OutputCmdTrace>:

static void OutputCmdTrace(TL_CmdPacket_t *pCmdBuffer)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b083      	sub	sp, #12
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
    TL_SHCI_CMD_DBG_MSG(" payload:");
    TL_SHCI_CMD_DBG_BUF(pCmdBuffer->cmdserial.cmd.payload, pCmdBuffer->cmdserial.cmd.plen, "");
  }
  TL_SHCI_CMD_DBG_MSG("\r\n");

  return;
 800ae00:	bf00      	nop
}
 800ae02:	370c      	adds	r7, #12
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr

0800ae0c <OutputRspTrace>:

static void OutputRspTrace(TL_EvtPacket_t *p_rsp)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b083      	sub	sp, #12
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  switch(p_rsp->evtserial.evt.evtcode)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	7a5b      	ldrb	r3, [r3, #9]
 800ae18:	2b0e      	cmp	r3, #14
 800ae1a:	d000      	beq.n	800ae1e <OutputRspTrace+0x12>
      }
      break;

    default:
      TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_rsp->evtserial.evt.evtcode);
      break;
 800ae1c:	e000      	b.n	800ae20 <OutputRspTrace+0x14>
      break;
 800ae1e:	bf00      	nop
  }

  TL_SHCI_CMD_DBG_MSG("\r\n");

  return;
 800ae20:	bf00      	nop
}
 800ae22:	370c      	adds	r7, #12
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr

0800ae2c <OutputEvtTrace>:

static void OutputEvtTrace(TL_EvtPacket_t *phcievtbuffer)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b083      	sub	sp, #12
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  if(phcievtbuffer->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	7a5b      	ldrb	r3, [r3, #9]
 800ae38:	2bff      	cmp	r3, #255	; 0xff
 800ae3a:	d100      	bne.n	800ae3e <OutputEvtTrace+0x12>
    }
  }

  TL_SHCI_EVT_DBG_MSG("\r\n");

  return;
 800ae3c:	bf00      	nop
 800ae3e:	bf00      	nop
}
 800ae40:	370c      	adds	r7, #12
 800ae42:	46bd      	mov	sp, r7
 800ae44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae48:	4770      	bx	lr
	...

0800ae4c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b083      	sub	sp, #12
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	4a05      	ldr	r2, [pc, #20]	; (800ae6c <shci_register_io_bus+0x20>)
 800ae58:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	4a04      	ldr	r2, [pc, #16]	; (800ae70 <shci_register_io_bus+0x24>)
 800ae5e:	611a      	str	r2, [r3, #16]

  return;
 800ae60:	bf00      	nop
}
 800ae62:	370c      	adds	r7, #12
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr
 800ae6c:	0800b34d 	.word	0x0800b34d
 800ae70:	0800b3a1 	.word	0x0800b3a1

0800ae74 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b083      	sub	sp, #12
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	687a      	ldr	r2, [r7, #4]
 800ae80:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	687a      	ldr	r2, [r7, #4]
 800ae86:	605a      	str	r2, [r3, #4]
}
 800ae88:	bf00      	nop
 800ae8a:	370c      	adds	r7, #12
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr

0800ae94 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b087      	sub	sp, #28
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae9c:	f3ef 8310 	mrs	r3, PRIMASK
 800aea0:	60fb      	str	r3, [r7, #12]
  return(result);
 800aea2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800aea4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800aea6:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	687a      	ldr	r2, [r7, #4]
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	d102      	bne.n	800aeb8 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	75fb      	strb	r3, [r7, #23]
 800aeb6:	e001      	b.n	800aebc <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	75fb      	strb	r3, [r7, #23]
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800aec6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	371c      	adds	r7, #28
 800aecc:	46bd      	mov	sp, r7
 800aece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed2:	4770      	bx	lr

0800aed4 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b087      	sub	sp, #28
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aede:	f3ef 8310 	mrs	r3, PRIMASK
 800aee2:	60fb      	str	r3, [r7, #12]
  return(result);
 800aee4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800aee6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aee8:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681a      	ldr	r2, [r3, #0]
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	687a      	ldr	r2, [r7, #4]
 800aef6:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	683a      	ldr	r2, [r7, #0]
 800aefc:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	683a      	ldr	r2, [r7, #0]
 800af04:	605a      	str	r2, [r3, #4]
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af0a:	693b      	ldr	r3, [r7, #16]
 800af0c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800af10:	bf00      	nop
 800af12:	371c      	adds	r7, #28
 800af14:	46bd      	mov	sp, r7
 800af16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1a:	4770      	bx	lr

0800af1c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b087      	sub	sp, #28
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af26:	f3ef 8310 	mrs	r3, PRIMASK
 800af2a:	60fb      	str	r3, [r7, #12]
  return(result);
 800af2c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800af2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800af30:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	687a      	ldr	r2, [r7, #4]
 800af36:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	685a      	ldr	r2, [r3, #4]
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	683a      	ldr	r2, [r7, #0]
 800af44:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	685b      	ldr	r3, [r3, #4]
 800af4a:	683a      	ldr	r2, [r7, #0]
 800af4c:	601a      	str	r2, [r3, #0]
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800af58:	bf00      	nop
 800af5a:	371c      	adds	r7, #28
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr

0800af64 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800af64:	b480      	push	{r7}
 800af66:	b087      	sub	sp, #28
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af6c:	f3ef 8310 	mrs	r3, PRIMASK
 800af70:	60fb      	str	r3, [r7, #12]
  return(result);
 800af72:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800af74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800af76:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	685b      	ldr	r3, [r3, #4]
 800af7c:	687a      	ldr	r2, [r7, #4]
 800af7e:	6812      	ldr	r2, [r2, #0]
 800af80:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	687a      	ldr	r2, [r7, #4]
 800af88:	6852      	ldr	r2, [r2, #4]
 800af8a:	605a      	str	r2, [r3, #4]
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800af96:	bf00      	nop
 800af98:	371c      	adds	r7, #28
 800af9a:	46bd      	mov	sp, r7
 800af9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa0:	4770      	bx	lr

0800afa2 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800afa2:	b580      	push	{r7, lr}
 800afa4:	b086      	sub	sp, #24
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	6078      	str	r0, [r7, #4]
 800afaa:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afac:	f3ef 8310 	mrs	r3, PRIMASK
 800afb0:	60fb      	str	r3, [r7, #12]
  return(result);
 800afb2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800afb4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800afb6:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681a      	ldr	r2, [r3, #0]
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	4618      	mov	r0, r3
 800afc6:	f7ff ffcd 	bl	800af64 <LST_remove_node>
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800afd4:	bf00      	nop
 800afd6:	3718      	adds	r7, #24
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 800afdc:	b480      	push	{r7}
 800afde:	af00      	add	r7, sp, #0
  return;
 800afe0:	bf00      	nop
}
 800afe2:	46bd      	mov	sp, r7
 800afe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe8:	4770      	bx	lr

0800afea <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 800afea:	b480      	push	{r7}
 800afec:	af00      	add	r7, sp, #0
  return;
 800afee:	bf00      	nop
}
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr

0800aff8 <DIS_Init>:
__weak void DIS_Init( void )
{
 800aff8:	b480      	push	{r7}
 800affa:	af00      	add	r7, sp, #0
  return;
 800affc:	bf00      	nop
}
 800affe:	46bd      	mov	sp, r7
 800b000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b004:	4770      	bx	lr

0800b006 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 800b006:	b480      	push	{r7}
 800b008:	af00      	add	r7, sp, #0
  return;
 800b00a:	bf00      	nop
}
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr

0800b014 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 800b014:	b480      	push	{r7}
 800b016:	af00      	add	r7, sp, #0
  return;
 800b018:	bf00      	nop
}
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr

0800b022 <HRS_Init>:
__weak void HRS_Init( void )
{
 800b022:	b480      	push	{r7}
 800b024:	af00      	add	r7, sp, #0
  return;
 800b026:	bf00      	nop
}
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr

0800b030 <HTS_Init>:
__weak void HTS_Init( void )
{
 800b030:	b480      	push	{r7}
 800b032:	af00      	add	r7, sp, #0
  return;
 800b034:	bf00      	nop
}
 800b036:	46bd      	mov	sp, r7
 800b038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03c:	4770      	bx	lr

0800b03e <IAS_Init>:
__weak void IAS_Init( void )
{
 800b03e:	b480      	push	{r7}
 800b040:	af00      	add	r7, sp, #0
  return;
 800b042:	bf00      	nop
}
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	4770      	bx	lr

0800b04c <LLS_Init>:
__weak void LLS_Init( void )
{
 800b04c:	b480      	push	{r7}
 800b04e:	af00      	add	r7, sp, #0
  return;
 800b050:	bf00      	nop
}
 800b052:	46bd      	mov	sp, r7
 800b054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b058:	4770      	bx	lr

0800b05a <TPS_Init>:
__weak void TPS_Init( void )
{
 800b05a:	b480      	push	{r7}
 800b05c:	af00      	add	r7, sp, #0
  return;
 800b05e:	bf00      	nop
}
 800b060:	46bd      	mov	sp, r7
 800b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b066:	4770      	bx	lr

0800b068 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 800b068:	b480      	push	{r7}
 800b06a:	af00      	add	r7, sp, #0
  return;
 800b06c:	bf00      	nop
}
 800b06e:	46bd      	mov	sp, r7
 800b070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b074:	4770      	bx	lr

0800b076 <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 800b076:	b480      	push	{r7}
 800b078:	af00      	add	r7, sp, #0
  return;
 800b07a:	bf00      	nop
}
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr

0800b084 <MESH_Init>:
__weak void MESH_Init( void )
{
 800b084:	b480      	push	{r7}
 800b086:	af00      	add	r7, sp, #0
  return;
 800b088:	bf00      	nop
}
 800b08a:	46bd      	mov	sp, r7
 800b08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b090:	4770      	bx	lr

0800b092 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 800b092:	b480      	push	{r7}
 800b094:	af00      	add	r7, sp, #0
  return;
 800b096:	bf00      	nop
}
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr

0800b0a0 <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	af00      	add	r7, sp, #0
  return;
 800b0a4:	bf00      	nop
}
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ac:	4770      	bx	lr
	...

0800b0b0 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800b0b4:	4b04      	ldr	r3, [pc, #16]	; (800b0c8 <SVCCTL_Init+0x18>)
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800b0ba:	4b04      	ldr	r3, [pc, #16]	; (800b0cc <SVCCTL_Init+0x1c>)
 800b0bc:	2200      	movs	r2, #0
 800b0be:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800b0c0:	f000 f806 	bl	800b0d0 <SVCCTL_SvcInit>

  return;
 800b0c4:	bf00      	nop
}
 800b0c6:	bd80      	pop	{r7, pc}
 800b0c8:	20000114 	.word	0x20000114
 800b0cc:	20000134 	.word	0x20000134

0800b0d0 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	af00      	add	r7, sp, #0
  BLS_Init();
 800b0d4:	f7ff ff82 	bl	800afdc <BLS_Init>

  CRS_STM_Init();
 800b0d8:	f7ff ff87 	bl	800afea <CRS_STM_Init>

  DIS_Init();
 800b0dc:	f7ff ff8c 	bl	800aff8 <DIS_Init>

  EDS_STM_Init();
 800b0e0:	f7ff ff91 	bl	800b006 <EDS_STM_Init>

  HIDS_Init();
 800b0e4:	f7ff ff96 	bl	800b014 <HIDS_Init>

  HRS_Init();
 800b0e8:	f7ff ff9b 	bl	800b022 <HRS_Init>

  HTS_Init();
 800b0ec:	f7ff ffa0 	bl	800b030 <HTS_Init>

  IAS_Init();
 800b0f0:	f7ff ffa5 	bl	800b03e <IAS_Init>

  LLS_Init();
 800b0f4:	f7ff ffaa 	bl	800b04c <LLS_Init>

  TPS_Init();
 800b0f8:	f7ff ffaf 	bl	800b05a <TPS_Init>

  MOTENV_STM_Init();
 800b0fc:	f7ff ffb4 	bl	800b068 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800b100:	f7ff fc5e 	bl	800a9c0 <P2PS_STM_Init>

  OTAS_STM_Init();
 800b104:	f7ff ffb7 	bl	800b076 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800b108:	f7ff ffc3 	bl	800b092 <BVOPUS_STM_Init>

  MESH_Init();
 800b10c:	f7ff ffba 	bl	800b084 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800b110:	f7ff ffc6 	bl	800b0a0 <SVCCTL_InitCustomSvc>
  
  return;
 800b114:	bf00      	nop
}
 800b116:	bd80      	pop	{r7, pc}

0800b118 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800b118:	b480      	push	{r7}
 800b11a:	b083      	sub	sp, #12
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800b120:	4b09      	ldr	r3, [pc, #36]	; (800b148 <SVCCTL_RegisterSvcHandler+0x30>)
 800b122:	7f1b      	ldrb	r3, [r3, #28]
 800b124:	4619      	mov	r1, r3
 800b126:	4a08      	ldr	r2, [pc, #32]	; (800b148 <SVCCTL_RegisterSvcHandler+0x30>)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800b12e:	4b06      	ldr	r3, [pc, #24]	; (800b148 <SVCCTL_RegisterSvcHandler+0x30>)
 800b130:	7f1b      	ldrb	r3, [r3, #28]
 800b132:	3301      	adds	r3, #1
 800b134:	b2da      	uxtb	r2, r3
 800b136:	4b04      	ldr	r3, [pc, #16]	; (800b148 <SVCCTL_RegisterSvcHandler+0x30>)
 800b138:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800b13a:	bf00      	nop
}
 800b13c:	370c      	adds	r7, #12
 800b13e:	46bd      	mov	sp, r7
 800b140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b144:	4770      	bx	lr
 800b146:	bf00      	nop
 800b148:	20000114 	.word	0x20000114

0800b14c <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b086      	sub	sp, #24
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	3301      	adds	r3, #1
 800b158:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800b15a:	2300      	movs	r3, #0
 800b15c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	781b      	ldrb	r3, [r3, #0]
 800b162:	2bff      	cmp	r3, #255	; 0xff
 800b164:	d000      	beq.n	800b168 <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800b166:	e025      	b.n	800b1b4 <SVCCTL_UserEvtRx+0x68>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	3302      	adds	r3, #2
 800b16c:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	881b      	ldrh	r3, [r3, #0]
 800b172:	b29b      	uxth	r3, r3
 800b174:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b178:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b17c:	d000      	beq.n	800b180 <SVCCTL_UserEvtRx+0x34>
          break;
 800b17e:	e018      	b.n	800b1b2 <SVCCTL_UserEvtRx+0x66>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800b180:	2300      	movs	r3, #0
 800b182:	757b      	strb	r3, [r7, #21]
 800b184:	e00d      	b.n	800b1a2 <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800b186:	7d7b      	ldrb	r3, [r7, #21]
 800b188:	4a18      	ldr	r2, [pc, #96]	; (800b1ec <SVCCTL_UserEvtRx+0xa0>)
 800b18a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	4798      	blx	r3
 800b192:	4603      	mov	r3, r0
 800b194:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 800b196:	7dfb      	ldrb	r3, [r7, #23]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d108      	bne.n	800b1ae <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800b19c:	7d7b      	ldrb	r3, [r7, #21]
 800b19e:	3301      	adds	r3, #1
 800b1a0:	757b      	strb	r3, [r7, #21]
 800b1a2:	4b12      	ldr	r3, [pc, #72]	; (800b1ec <SVCCTL_UserEvtRx+0xa0>)
 800b1a4:	7f1b      	ldrb	r3, [r3, #28]
 800b1a6:	7d7a      	ldrb	r2, [r7, #21]
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d3ec      	bcc.n	800b186 <SVCCTL_UserEvtRx+0x3a>
          break;
 800b1ac:	e000      	b.n	800b1b0 <SVCCTL_UserEvtRx+0x64>
              break;
 800b1ae:	bf00      	nop
          break;
 800b1b0:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 800b1b2:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800b1b4:	7dfb      	ldrb	r3, [r7, #23]
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d009      	beq.n	800b1ce <SVCCTL_UserEvtRx+0x82>
 800b1ba:	2b02      	cmp	r3, #2
 800b1bc:	d00a      	beq.n	800b1d4 <SVCCTL_UserEvtRx+0x88>
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d10b      	bne.n	800b1da <SVCCTL_UserEvtRx+0x8e>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f000 fa80 	bl	800b6c8 <SVCCTL_App_Notification>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	75bb      	strb	r3, [r7, #22]
      break;
 800b1cc:	e008      	b.n	800b1e0 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	75bb      	strb	r3, [r7, #22]
      break;
 800b1d2:	e005      	b.n	800b1e0 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	75bb      	strb	r3, [r7, #22]
      break;
 800b1d8:	e002      	b.n	800b1e0 <SVCCTL_UserEvtRx+0x94>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800b1da:	2301      	movs	r3, #1
 800b1dc:	75bb      	strb	r3, [r7, #22]
      break;
 800b1de:	bf00      	nop
  }

  return (return_status);
 800b1e0:	7dbb      	ldrb	r3, [r7, #22]
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3718      	adds	r7, #24
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	20000114 	.word	0x20000114

0800b1f0 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800b1f4:	f000 ff98 	bl	800c128 <HW_IPCC_Enable>

  return;
 800b1f8:	bf00      	nop
}
 800b1fa:	bd80      	pop	{r7, pc}

0800b1fc <TL_Init>:


void TL_Init( void )
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800b200:	4b10      	ldr	r3, [pc, #64]	; (800b244 <TL_Init+0x48>)
 800b202:	4a11      	ldr	r2, [pc, #68]	; (800b248 <TL_Init+0x4c>)
 800b204:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800b206:	4b0f      	ldr	r3, [pc, #60]	; (800b244 <TL_Init+0x48>)
 800b208:	4a10      	ldr	r2, [pc, #64]	; (800b24c <TL_Init+0x50>)
 800b20a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800b20c:	4b0d      	ldr	r3, [pc, #52]	; (800b244 <TL_Init+0x48>)
 800b20e:	4a10      	ldr	r2, [pc, #64]	; (800b250 <TL_Init+0x54>)
 800b210:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800b212:	4b0c      	ldr	r3, [pc, #48]	; (800b244 <TL_Init+0x48>)
 800b214:	4a0f      	ldr	r2, [pc, #60]	; (800b254 <TL_Init+0x58>)
 800b216:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 800b218:	4b0a      	ldr	r3, [pc, #40]	; (800b244 <TL_Init+0x48>)
 800b21a:	4a0f      	ldr	r2, [pc, #60]	; (800b258 <TL_Init+0x5c>)
 800b21c:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800b21e:	4b09      	ldr	r3, [pc, #36]	; (800b244 <TL_Init+0x48>)
 800b220:	4a0e      	ldr	r2, [pc, #56]	; (800b25c <TL_Init+0x60>)
 800b222:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800b224:	4b07      	ldr	r3, [pc, #28]	; (800b244 <TL_Init+0x48>)
 800b226:	4a0e      	ldr	r2, [pc, #56]	; (800b260 <TL_Init+0x64>)
 800b228:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800b22a:	4b06      	ldr	r3, [pc, #24]	; (800b244 <TL_Init+0x48>)
 800b22c:	4a0d      	ldr	r2, [pc, #52]	; (800b264 <TL_Init+0x68>)
 800b22e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800b230:	4b04      	ldr	r3, [pc, #16]	; (800b244 <TL_Init+0x48>)
 800b232:	4a0d      	ldr	r2, [pc, #52]	; (800b268 <TL_Init+0x6c>)
 800b234:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800b236:	4b03      	ldr	r3, [pc, #12]	; (800b244 <TL_Init+0x48>)
 800b238:	4a0c      	ldr	r2, [pc, #48]	; (800b26c <TL_Init+0x70>)
 800b23a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800b23c:	f000 ff84 	bl	800c148 <HW_IPCC_Init>

  return;
 800b240:	bf00      	nop
}
 800b242:	bd80      	pop	{r7, pc}
 800b244:	20030000 	.word	0x20030000
 800b248:	20030028 	.word	0x20030028
 800b24c:	20030048 	.word	0x20030048
 800b250:	20030058 	.word	0x20030058
 800b254:	20030064 	.word	0x20030064
 800b258:	2003006c 	.word	0x2003006c
 800b25c:	20030074 	.word	0x20030074
 800b260:	2003007c 	.word	0x2003007c
 800b264:	20030098 	.word	0x20030098
 800b268:	2003009c 	.word	0x2003009c
 800b26c:	200300a8 	.word	0x200300a8

0800b270 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b084      	sub	sp, #16
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800b27c:	4811      	ldr	r0, [pc, #68]	; (800b2c4 <TL_BLE_Init+0x54>)
 800b27e:	f7ff fdf9 	bl	800ae74 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800b282:	4b11      	ldr	r3, [pc, #68]	; (800b2c8 <TL_BLE_Init+0x58>)
 800b284:	685b      	ldr	r3, [r3, #4]
 800b286:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	689a      	ldr	r2, [r3, #8]
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	68da      	ldr	r2, [r3, #12]
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	4a0c      	ldr	r2, [pc, #48]	; (800b2cc <TL_BLE_Init+0x5c>)
 800b29c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	4a08      	ldr	r2, [pc, #32]	; (800b2c4 <TL_BLE_Init+0x54>)
 800b2a2:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800b2a4:	f000 ff66 	bl	800c174 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	4a08      	ldr	r2, [pc, #32]	; (800b2d0 <TL_BLE_Init+0x60>)
 800b2ae:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	4a07      	ldr	r2, [pc, #28]	; (800b2d4 <TL_BLE_Init+0x64>)
 800b2b6:	6013      	str	r3, [r2, #0]

  return 0;
 800b2b8:	2300      	movs	r3, #0
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3710      	adds	r7, #16
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	bf00      	nop
 800b2c4:	200300c4 	.word	0x200300c4
 800b2c8:	20030000 	.word	0x20030000
 800b2cc:	20030a48 	.word	0x20030a48
 800b2d0:	2000060c 	.word	0x2000060c
 800b2d4:	20000610 	.word	0x20000610

0800b2d8 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b082      	sub	sp, #8
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	460b      	mov	r3, r1
 800b2e2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800b2e4:	4b05      	ldr	r3, [pc, #20]	; (800b2fc <TL_BLE_SendCmd+0x24>)
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	721a      	strb	r2, [r3, #8]

  HW_IPCC_BLE_SendCmd();
 800b2ee:	f000 ff4b 	bl	800c188 <HW_IPCC_BLE_SendCmd>

  return 0;
 800b2f2:	2300      	movs	r3, #0
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3708      	adds	r7, #8
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}
 800b2fc:	20030000 	.word	0x20030000

0800b300 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b082      	sub	sp, #8
 800b304:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800b306:	e009      	b.n	800b31c <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800b308:	1d3b      	adds	r3, r7, #4
 800b30a:	4619      	mov	r1, r3
 800b30c:	4808      	ldr	r0, [pc, #32]	; (800b330 <HW_IPCC_BLE_RxEvtNot+0x30>)
 800b30e:	f7ff fe48 	bl	800afa2 <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 800b312:	4b08      	ldr	r3, [pc, #32]	; (800b334 <HW_IPCC_BLE_RxEvtNot+0x34>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	687a      	ldr	r2, [r7, #4]
 800b318:	4610      	mov	r0, r2
 800b31a:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800b31c:	4804      	ldr	r0, [pc, #16]	; (800b330 <HW_IPCC_BLE_RxEvtNot+0x30>)
 800b31e:	f7ff fdb9 	bl	800ae94 <LST_is_empty>
 800b322:	4603      	mov	r3, r0
 800b324:	2b00      	cmp	r3, #0
 800b326:	d0ef      	beq.n	800b308 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800b328:	bf00      	nop
}
 800b32a:	3708      	adds	r7, #8
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}
 800b330:	200300c4 	.word	0x200300c4
 800b334:	2000060c 	.word	0x2000060c

0800b338 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800b33c:	4b02      	ldr	r3, [pc, #8]	; (800b348 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4798      	blx	r3

  return;
 800b342:	bf00      	nop
}
 800b344:	bd80      	pop	{r7, pc}
 800b346:	bf00      	nop
 800b348:	20000610 	.word	0x20000610

0800b34c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800b358:	480d      	ldr	r0, [pc, #52]	; (800b390 <TL_SYS_Init+0x44>)
 800b35a:	f7ff fd8b 	bl	800ae74 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800b35e:	4b0d      	ldr	r3, [pc, #52]	; (800b394 <TL_SYS_Init+0x48>)
 800b360:	68db      	ldr	r3, [r3, #12]
 800b362:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	689a      	ldr	r2, [r3, #8]
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	4a08      	ldr	r2, [pc, #32]	; (800b390 <TL_SYS_Init+0x44>)
 800b370:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800b372:	f000 ff2b 	bl	800c1cc <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	4a07      	ldr	r2, [pc, #28]	; (800b398 <TL_SYS_Init+0x4c>)
 800b37c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	685b      	ldr	r3, [r3, #4]
 800b382:	4a06      	ldr	r2, [pc, #24]	; (800b39c <TL_SYS_Init+0x50>)
 800b384:	6013      	str	r3, [r2, #0]

  return 0;
 800b386:	2300      	movs	r3, #0
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3710      	adds	r7, #16
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}
 800b390:	200300cc 	.word	0x200300cc
 800b394:	20030000 	.word	0x20030000
 800b398:	20000614 	.word	0x20000614
 800b39c:	20000618 	.word	0x20000618

0800b3a0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b082      	sub	sp, #8
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	460b      	mov	r3, r1
 800b3aa:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800b3ac:	4b05      	ldr	r3, [pc, #20]	; (800b3c4 <TL_SYS_SendCmd+0x24>)
 800b3ae:	68db      	ldr	r3, [r3, #12]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	2210      	movs	r2, #16
 800b3b4:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 800b3b6:	f000 ff13 	bl	800c1e0 <HW_IPCC_SYS_SendCmd>

  return 0;
 800b3ba:	2300      	movs	r3, #0
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3708      	adds	r7, #8
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}
 800b3c4:	20030000 	.word	0x20030000

0800b3c8 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800b3cc:	4b04      	ldr	r3, [pc, #16]	; (800b3e0 <HW_IPCC_SYS_CmdEvtNot+0x18>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4a04      	ldr	r2, [pc, #16]	; (800b3e4 <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 800b3d2:	68d2      	ldr	r2, [r2, #12]
 800b3d4:	6812      	ldr	r2, [r2, #0]
 800b3d6:	4610      	mov	r0, r2
 800b3d8:	4798      	blx	r3

  return;
 800b3da:	bf00      	nop
}
 800b3dc:	bd80      	pop	{r7, pc}
 800b3de:	bf00      	nop
 800b3e0:	20000614 	.word	0x20000614
 800b3e4:	20030000 	.word	0x20030000

0800b3e8 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b082      	sub	sp, #8
 800b3ec:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b3ee:	e009      	b.n	800b404 <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800b3f0:	1d3b      	adds	r3, r7, #4
 800b3f2:	4619      	mov	r1, r3
 800b3f4:	4808      	ldr	r0, [pc, #32]	; (800b418 <HW_IPCC_SYS_EvtNot+0x30>)
 800b3f6:	f7ff fdd4 	bl	800afa2 <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 800b3fa:	4b08      	ldr	r3, [pc, #32]	; (800b41c <HW_IPCC_SYS_EvtNot+0x34>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	687a      	ldr	r2, [r7, #4]
 800b400:	4610      	mov	r0, r2
 800b402:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b404:	4804      	ldr	r0, [pc, #16]	; (800b418 <HW_IPCC_SYS_EvtNot+0x30>)
 800b406:	f7ff fd45 	bl	800ae94 <LST_is_empty>
 800b40a:	4603      	mov	r3, r0
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d0ef      	beq.n	800b3f0 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800b410:	bf00      	nop
}
 800b412:	3708      	adds	r7, #8
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}
 800b418:	200300cc 	.word	0x200300cc
 800b41c:	20000618 	.word	0x20000618

0800b420 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b082      	sub	sp, #8
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800b428:	4817      	ldr	r0, [pc, #92]	; (800b488 <TL_MM_Init+0x68>)
 800b42a:	f7ff fd23 	bl	800ae74 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800b42e:	4817      	ldr	r0, [pc, #92]	; (800b48c <TL_MM_Init+0x6c>)
 800b430:	f7ff fd20 	bl	800ae74 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800b434:	4b16      	ldr	r3, [pc, #88]	; (800b490 <TL_MM_Init+0x70>)
 800b436:	691b      	ldr	r3, [r3, #16]
 800b438:	4a16      	ldr	r2, [pc, #88]	; (800b494 <TL_MM_Init+0x74>)
 800b43a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800b43c:	4b15      	ldr	r3, [pc, #84]	; (800b494 <TL_MM_Init+0x74>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	687a      	ldr	r2, [r7, #4]
 800b442:	6892      	ldr	r2, [r2, #8]
 800b444:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800b446:	4b13      	ldr	r3, [pc, #76]	; (800b494 <TL_MM_Init+0x74>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	687a      	ldr	r2, [r7, #4]
 800b44c:	68d2      	ldr	r2, [r2, #12]
 800b44e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800b450:	4b10      	ldr	r3, [pc, #64]	; (800b494 <TL_MM_Init+0x74>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	4a0c      	ldr	r2, [pc, #48]	; (800b488 <TL_MM_Init+0x68>)
 800b456:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800b458:	4b0e      	ldr	r3, [pc, #56]	; (800b494 <TL_MM_Init+0x74>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	687a      	ldr	r2, [r7, #4]
 800b45e:	6812      	ldr	r2, [r2, #0]
 800b460:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800b462:	4b0c      	ldr	r3, [pc, #48]	; (800b494 <TL_MM_Init+0x74>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	687a      	ldr	r2, [r7, #4]
 800b468:	6852      	ldr	r2, [r2, #4]
 800b46a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800b46c:	4b09      	ldr	r3, [pc, #36]	; (800b494 <TL_MM_Init+0x74>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	6912      	ldr	r2, [r2, #16]
 800b474:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800b476:	4b07      	ldr	r3, [pc, #28]	; (800b494 <TL_MM_Init+0x74>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	687a      	ldr	r2, [r7, #4]
 800b47c:	6952      	ldr	r2, [r2, #20]
 800b47e:	619a      	str	r2, [r3, #24]

  return;
 800b480:	bf00      	nop
}
 800b482:	3708      	adds	r7, #8
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}
 800b488:	200300b4 	.word	0x200300b4
 800b48c:	20000604 	.word	0x20000604
 800b490:	20030000 	.word	0x20030000
 800b494:	2000061c 	.word	0x2000061c

0800b498 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b082      	sub	sp, #8
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800b4a0:	6879      	ldr	r1, [r7, #4]
 800b4a2:	4806      	ldr	r0, [pc, #24]	; (800b4bc <TL_MM_EvtDone+0x24>)
 800b4a4:	f7ff fd3a 	bl	800af1c <LST_insert_tail>

  OutputMemReleaseTrace(phcievt);
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f000 f82b 	bl	800b504 <OutputMemReleaseTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800b4ae:	4804      	ldr	r0, [pc, #16]	; (800b4c0 <TL_MM_EvtDone+0x28>)
 800b4b0:	f000 febc 	bl	800c22c <HW_IPCC_MM_SendFreeBuf>

  return;
 800b4b4:	bf00      	nop
}
 800b4b6:	3708      	adds	r7, #8
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	20000604 	.word	0x20000604
 800b4c0:	0800b4c5 	.word	0x0800b4c5

0800b4c4 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b082      	sub	sp, #8
 800b4c8:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b4ca:	e00c      	b.n	800b4e6 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800b4cc:	1d3b      	adds	r3, r7, #4
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	480a      	ldr	r0, [pc, #40]	; (800b4fc <SendFreeBuf+0x38>)
 800b4d2:	f7ff fd66 	bl	800afa2 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800b4d6:	4b0a      	ldr	r3, [pc, #40]	; (800b500 <SendFreeBuf+0x3c>)
 800b4d8:	691b      	ldr	r3, [r3, #16]
 800b4da:	691b      	ldr	r3, [r3, #16]
 800b4dc:	687a      	ldr	r2, [r7, #4]
 800b4de:	4611      	mov	r1, r2
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f7ff fd1b 	bl	800af1c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b4e6:	4805      	ldr	r0, [pc, #20]	; (800b4fc <SendFreeBuf+0x38>)
 800b4e8:	f7ff fcd4 	bl	800ae94 <LST_is_empty>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d0ec      	beq.n	800b4cc <SendFreeBuf+0x8>
  }

  return;
 800b4f2:	bf00      	nop
}
 800b4f4:	3708      	adds	r7, #8
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}
 800b4fa:	bf00      	nop
 800b4fc:	20000604 	.word	0x20000604
 800b500:	20030000 	.word	0x20030000

0800b504 <OutputMemReleaseTrace>:

static void OutputMemReleaseTrace(TL_EvtPacket_t * phcievt)
{
 800b504:	b480      	push	{r7}
 800b506:	b083      	sub	sp, #12
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
  switch(phcievt->evtserial.evt.evtcode)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	7a5b      	ldrb	r3, [r3, #9]
 800b510:	2b0f      	cmp	r3, #15
 800b512:	d004      	beq.n	800b51e <OutputMemReleaseTrace+0x1a>
 800b514:	2bff      	cmp	r3, #255	; 0xff
 800b516:	d004      	beq.n	800b522 <OutputMemReleaseTrace+0x1e>
 800b518:	2b0e      	cmp	r3, #14
 800b51a:	d004      	beq.n	800b526 <OutputMemReleaseTrace+0x22>
      break;

    default:
      TL_MM_DBG__MSG("mm evt released: 0x%02X", phcievt->evtserial.evt.evtcode);
      TL_MM_DBG__MSG(" buffer addr: 0x%08X", phcievt);
      break;
 800b51c:	e004      	b.n	800b528 <OutputMemReleaseTrace+0x24>
      break;
 800b51e:	bf00      	nop
 800b520:	e002      	b.n	800b528 <OutputMemReleaseTrace+0x24>
      break;
 800b522:	bf00      	nop
 800b524:	e000      	b.n	800b528 <OutputMemReleaseTrace+0x24>
      break;
 800b526:	bf00      	nop
  }

  TL_MM_DBG__MSG("\r\n");

  return;
 800b528:	bf00      	nop
}
 800b52a:	370c      	adds	r7, #12
 800b52c:	46bd      	mov	sp, r7
 800b52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b532:	4770      	bx	lr

0800b534 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800b534:	b580      	push	{r7, lr}
 800b536:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800b538:	4805      	ldr	r0, [pc, #20]	; (800b550 <TL_TRACES_Init+0x1c>)
 800b53a:	f7ff fc9b 	bl	800ae74 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800b53e:	4b05      	ldr	r3, [pc, #20]	; (800b554 <TL_TRACES_Init+0x20>)
 800b540:	695b      	ldr	r3, [r3, #20]
 800b542:	4a03      	ldr	r2, [pc, #12]	; (800b550 <TL_TRACES_Init+0x1c>)
 800b544:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800b546:	f000 fea7 	bl	800c298 <HW_IPCC_TRACES_Init>

  return;
 800b54a:	bf00      	nop
}
 800b54c:	bd80      	pop	{r7, pc}
 800b54e:	bf00      	nop
 800b550:	200300bc 	.word	0x200300bc
 800b554:	20030000 	.word	0x20030000

0800b558 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b082      	sub	sp, #8
 800b55c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b55e:	e008      	b.n	800b572 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800b560:	1d3b      	adds	r3, r7, #4
 800b562:	4619      	mov	r1, r3
 800b564:	4808      	ldr	r0, [pc, #32]	; (800b588 <HW_IPCC_TRACES_EvtNot+0x30>)
 800b566:	f7ff fd1c 	bl	800afa2 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	4618      	mov	r0, r3
 800b56e:	f000 f80d 	bl	800b58c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b572:	4805      	ldr	r0, [pc, #20]	; (800b588 <HW_IPCC_TRACES_EvtNot+0x30>)
 800b574:	f7ff fc8e 	bl	800ae94 <LST_is_empty>
 800b578:	4603      	mov	r3, r0
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d0f0      	beq.n	800b560 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800b57e:	bf00      	nop
}
 800b580:	3708      	adds	r7, #8
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
 800b586:	bf00      	nop
 800b588:	200300bc 	.word	0x200300bc

0800b58c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800b58c:	b480      	push	{r7}
 800b58e:	b083      	sub	sp, #12
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800b594:	bf00      	nop
 800b596:	370c      	adds	r7, #12
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr

0800b5a0 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800b5a4:	4b03      	ldr	r3, [pc, #12]	; (800b5b4 <LL_FLASH_GetUDN+0x14>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b0:	4770      	bx	lr
 800b5b2:	bf00      	nop
 800b5b4:	1fff7580 	.word	0x1fff7580

0800b5b8 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800b5bc:	4b03      	ldr	r3, [pc, #12]	; (800b5cc <LL_FLASH_GetDeviceID+0x14>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	b2db      	uxtb	r3, r3
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr
 800b5cc:	1fff7584 	.word	0x1fff7584

0800b5d0 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800b5d4:	4b03      	ldr	r3, [pc, #12]	; (800b5e4 <LL_FLASH_GetSTCompanyID+0x14>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	0a1b      	lsrs	r3, r3, #8
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr
 800b5e4:	1fff7584 	.word	0x1fff7584

0800b5e8 <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 800b5e8:	b5b0      	push	{r4, r5, r7, lr}
 800b5ea:	b08c      	sub	sp, #48	; 0x30
 800b5ec:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800b5ee:	4b2b      	ldr	r3, [pc, #172]	; (800b69c <APP_BLE_Init+0xb4>)
 800b5f0:	463c      	mov	r4, r7
 800b5f2:	461d      	mov	r5, r3
 800b5f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b5f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b5f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b5fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b5fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800b600:	c407      	stmia	r4!, {r0, r1, r2}
 800b602:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 800b604:	f000 f928 	bl	800b858 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800b608:	2101      	movs	r1, #1
 800b60a:	2002      	movs	r0, #2
 800b60c:	f000 fe6c 	bl	800c2e8 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800b610:	4a23      	ldr	r2, [pc, #140]	; (800b6a0 <APP_BLE_Init+0xb8>)
 800b612:	2100      	movs	r1, #0
 800b614:	2004      	movs	r0, #4
 800b616:	f000 ff75 	bl	800c504 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 800b61a:	463b      	mov	r3, r7
 800b61c:	4618      	mov	r0, r3
 800b61e:	f7ff fa91 	bl	800ab44 <SHCI_C2_BLE_Init>

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800b622:	f000 f92f 	bl	800b884 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800b626:	f7ff fd43 	bl	800b0b0 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b62a:	4b1e      	ldr	r3, [pc, #120]	; (800b6a4 <APP_BLE_Init+0xbc>)
 800b62c:	2200      	movs	r2, #0
 800b62e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800b632:	4b1c      	ldr	r3, [pc, #112]	; (800b6a4 <APP_BLE_Init+0xbc>)
 800b634:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b638:	84da      	strh	r2, [r3, #38]	; 0x26
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800b63a:	4a1b      	ldr	r2, [pc, #108]	; (800b6a8 <APP_BLE_Init+0xc0>)
 800b63c:	2100      	movs	r1, #0
 800b63e:	2001      	movs	r0, #1
 800b640:	f000 ff60 	bl	800c504 <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)
  manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 800b644:	2006      	movs	r0, #6
 800b646:	f7fe fe01 	bl	800a24c <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 800b64a:	f000 fb65 	bl	800bd18 <P2PS_APP_Init>

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 800b64e:	4b17      	ldr	r3, [pc, #92]	; (800b6ac <APP_BLE_Init+0xc4>)
 800b650:	2200      	movs	r2, #0
 800b652:	4917      	ldr	r1, [pc, #92]	; (800b6b0 <APP_BLE_Init+0xc8>)
 800b654:	2000      	movs	r0, #0
 800b656:	f7f6 f8d1 	bl	80017fc <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800b65a:	4b16      	ldr	r3, [pc, #88]	; (800b6b4 <APP_BLE_Init+0xcc>)
 800b65c:	2200      	movs	r2, #0
 800b65e:	4916      	ldr	r1, [pc, #88]	; (800b6b8 <APP_BLE_Init+0xd0>)
 800b660:	2000      	movs	r0, #0
 800b662:	f7f6 f8cb 	bl	80017fc <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800b666:	4b0f      	ldr	r3, [pc, #60]	; (800b6a4 <APP_BLE_Init+0xbc>)
 800b668:	2200      	movs	r2, #0
 800b66a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800b66e:	4b0d      	ldr	r3, [pc, #52]	; (800b6a4 <APP_BLE_Init+0xbc>)
 800b670:	2200      	movs	r2, #0
 800b672:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800b676:	4b11      	ldr	r3, [pc, #68]	; (800b6bc <APP_BLE_Init+0xd4>)
 800b678:	2280      	movs	r2, #128	; 0x80
 800b67a:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800b67c:	4b10      	ldr	r3, [pc, #64]	; (800b6c0 <APP_BLE_Init+0xd8>)
 800b67e:	22a0      	movs	r2, #160	; 0xa0
 800b680:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 800b682:	2001      	movs	r0, #1
 800b684:	f000 f9d8 	bl	800ba38 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */
   HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 800b688:	2201      	movs	r2, #1
 800b68a:	2120      	movs	r1, #32
 800b68c:	480d      	ldr	r0, [pc, #52]	; (800b6c4 <APP_BLE_Init+0xdc>)
 800b68e:	f7f9 fae3 	bl	8004c58 <HAL_GPIO_WritePin>
/* USER CODE END APP_BLE_Init_2 */
  return;
 800b692:	bf00      	nop
}
 800b694:	3730      	adds	r7, #48	; 0x30
 800b696:	46bd      	mov	sp, r7
 800b698:	bdb0      	pop	{r4, r5, r7, pc}
 800b69a:	bf00      	nop
 800b69c:	0800c840 	.word	0x0800c840
 800b6a0:	0800a501 	.word	0x0800a501
 800b6a4:	2000014c 	.word	0x2000014c
 800b6a8:	0800bba5 	.word	0x0800bba5
 800b6ac:	0800bbd9 	.word	0x0800bbd9
 800b6b0:	200001dd 	.word	0x200001dd
 800b6b4:	0800bbe9 	.word	0x0800bbe9
 800b6b8:	200001de 	.word	0x200001de
 800b6bc:	200001e0 	.word	0x200001e0
 800b6c0:	200001e2 	.word	0x200001e2
 800b6c4:	48000400 	.word	0x48000400

0800b6c8 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b08a      	sub	sp, #40	; 0x28
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blue_aci *blue_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b6d0:	2342      	movs	r3, #66	; 0x42
 800b6d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	3301      	adds	r3, #1
 800b6da:	623b      	str	r3, [r7, #32]

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 800b6dc:	6a3b      	ldr	r3, [r7, #32]
 800b6de:	781b      	ldrb	r3, [r3, #0]
 800b6e0:	2b3e      	cmp	r3, #62	; 0x3e
 800b6e2:	d02f      	beq.n	800b744 <SVCCTL_App_Notification+0x7c>
 800b6e4:	2bff      	cmp	r3, #255	; 0xff
 800b6e6:	f000 808c 	beq.w	800b802 <SVCCTL_App_Notification+0x13a>
 800b6ea:	2b05      	cmp	r3, #5
 800b6ec:	d000      	beq.n	800b6f0 <SVCCTL_App_Notification+0x28>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
        break;
 800b6ee:	e09b      	b.n	800b828 <SVCCTL_App_Notification+0x160>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 800b6f0:	6a3b      	ldr	r3, [r7, #32]
 800b6f2:	3302      	adds	r3, #2
 800b6f4:	60fb      	str	r3, [r7, #12]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b6fc:	b29a      	uxth	r2, r3
 800b6fe:	4b4d      	ldr	r3, [pc, #308]	; (800b834 <SVCCTL_App_Notification+0x16c>)
 800b700:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b702:	429a      	cmp	r2, r3
 800b704:	d106      	bne.n	800b714 <SVCCTL_App_Notification+0x4c>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800b706:	4b4b      	ldr	r3, [pc, #300]	; (800b834 <SVCCTL_App_Notification+0x16c>)
 800b708:	2200      	movs	r2, #0
 800b70a:	84da      	strh	r2, [r3, #38]	; 0x26
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b70c:	4b49      	ldr	r3, [pc, #292]	; (800b834 <SVCCTL_App_Notification+0x16c>)
 800b70e:	2200      	movs	r2, #0
 800b710:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      Adv_Request(APP_BLE_FAST_ADV);
 800b714:	2001      	movs	r0, #1
 800b716:	f000 f98f 	bl	800ba38 <Adv_Request>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800b71a:	4b47      	ldr	r3, [pc, #284]	; (800b838 <SVCCTL_App_Notification+0x170>)
 800b71c:	2201      	movs	r2, #1
 800b71e:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800b720:	4b44      	ldr	r3, [pc, #272]	; (800b834 <SVCCTL_App_Notification+0x16c>)
 800b722:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800b724:	4b44      	ldr	r3, [pc, #272]	; (800b838 <SVCCTL_App_Notification+0x170>)
 800b726:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&handleNotification);
 800b728:	4843      	ldr	r0, [pc, #268]	; (800b838 <SVCCTL_App_Notification+0x170>)
 800b72a:	f000 fae1 	bl	800bcf0 <P2PS_APP_Notification>
        HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800b72e:	2200      	movs	r2, #0
 800b730:	2101      	movs	r1, #1
 800b732:	4842      	ldr	r0, [pc, #264]	; (800b83c <SVCCTL_App_Notification+0x174>)
 800b734:	f7f9 fa90 	bl	8004c58 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 800b738:	2201      	movs	r2, #1
 800b73a:	2120      	movs	r1, #32
 800b73c:	483f      	ldr	r0, [pc, #252]	; (800b83c <SVCCTL_App_Notification+0x174>)
 800b73e:	f7f9 fa8b 	bl	8004c58 <HAL_GPIO_WritePin>
    break; /* EVT_DISCONN_COMPLETE */
 800b742:	e071      	b.n	800b828 <SVCCTL_App_Notification+0x160>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 800b744:	6a3b      	ldr	r3, [r7, #32]
 800b746:	3302      	adds	r3, #2
 800b748:	61bb      	str	r3, [r7, #24]
      switch (meta_evt->subevent)
 800b74a:	69bb      	ldr	r3, [r7, #24]
 800b74c:	781b      	ldrb	r3, [r3, #0]
 800b74e:	2b03      	cmp	r3, #3
 800b750:	d053      	beq.n	800b7fa <SVCCTL_App_Notification+0x132>
 800b752:	2b0c      	cmp	r3, #12
 800b754:	d002      	beq.n	800b75c <SVCCTL_App_Notification+0x94>
 800b756:	2b01      	cmp	r3, #1
 800b758:	d016      	beq.n	800b788 <SVCCTL_App_Notification+0xc0>
          break;
 800b75a:	e051      	b.n	800b800 <SVCCTL_App_Notification+0x138>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 800b75c:	69bb      	ldr	r3, [r7, #24]
 800b75e:	3301      	adds	r3, #1
 800b760:	617b      	str	r3, [r7, #20]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 800b762:	4b34      	ldr	r3, [pc, #208]	; (800b834 <SVCCTL_App_Notification+0x16c>)
 800b764:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b766:	f107 020a 	add.w	r2, r7, #10
 800b76a:	f107 010b 	add.w	r1, r7, #11
 800b76e:	4618      	mov	r0, r3
 800b770:	f7fe fdda 	bl	800a328 <hci_le_read_phy>
 800b774:	4603      	mov	r3, r0
 800b776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret == BLE_STATUS_SUCCESS)
 800b77a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d13d      	bne.n	800b7fe <SVCCTL_App_Notification+0x136>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 800b782:	7afb      	ldrb	r3, [r7, #11]
 800b784:	2b02      	cmp	r3, #2
          break;
 800b786:	e03a      	b.n	800b7fe <SVCCTL_App_Notification+0x136>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 800b788:	69bb      	ldr	r3, [r7, #24]
 800b78a:	3301      	adds	r3, #1
 800b78c:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800b78e:	4b29      	ldr	r3, [pc, #164]	; (800b834 <SVCCTL_App_Notification+0x16c>)
 800b790:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800b794:	4618      	mov	r0, r3
 800b796:	f7f6 f8a7 	bl	80018e8 <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800b79a:	4b26      	ldr	r3, [pc, #152]	; (800b834 <SVCCTL_App_Notification+0x16c>)
 800b79c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800b7a0:	2b04      	cmp	r3, #4
 800b7a2:	d104      	bne.n	800b7ae <SVCCTL_App_Notification+0xe6>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800b7a4:	4b23      	ldr	r3, [pc, #140]	; (800b834 <SVCCTL_App_Notification+0x16c>)
 800b7a6:	2206      	movs	r2, #6
 800b7a8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 800b7ac:	e003      	b.n	800b7b6 <SVCCTL_App_Notification+0xee>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800b7ae:	4b21      	ldr	r3, [pc, #132]	; (800b834 <SVCCTL_App_Notification+0x16c>)
 800b7b0:	2205      	movs	r2, #5
 800b7b2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b7bc:	b29a      	uxth	r2, r3
 800b7be:	4b1d      	ldr	r3, [pc, #116]	; (800b834 <SVCCTL_App_Notification+0x16c>)
 800b7c0:	84da      	strh	r2, [r3, #38]	; 0x26
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800b7c2:	4b1d      	ldr	r3, [pc, #116]	; (800b838 <SVCCTL_App_Notification+0x170>)
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800b7c8:	4b1a      	ldr	r3, [pc, #104]	; (800b834 <SVCCTL_App_Notification+0x16c>)
 800b7ca:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800b7cc:	4b1a      	ldr	r3, [pc, #104]	; (800b838 <SVCCTL_App_Notification+0x170>)
 800b7ce:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 800b7d0:	4819      	ldr	r0, [pc, #100]	; (800b838 <SVCCTL_App_Notification+0x170>)
 800b7d2:	f000 fa8d 	bl	800bcf0 <P2PS_APP_Notification>
          HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	2101      	movs	r1, #1
 800b7da:	4818      	ldr	r0, [pc, #96]	; (800b83c <SVCCTL_App_Notification+0x174>)
 800b7dc:	f7f9 fa3c 	bl	8004c58 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	2120      	movs	r1, #32
 800b7e4:	4815      	ldr	r0, [pc, #84]	; (800b83c <SVCCTL_App_Notification+0x174>)
 800b7e6:	f7f9 fa37 	bl	8004c58 <HAL_GPIO_WritePin>
          aci_gatt_exchange_config(connection_complete_event->Connection_Handle);
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b7f0:	b29b      	uxth	r3, r3
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f7fe fc1c 	bl	800a030 <aci_gatt_exchange_config>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 800b7f8:	e002      	b.n	800b800 <SVCCTL_App_Notification+0x138>
          break;
 800b7fa:	bf00      	nop
 800b7fc:	e014      	b.n	800b828 <SVCCTL_App_Notification+0x160>
          break;
 800b7fe:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 800b800:	e012      	b.n	800b828 <SVCCTL_App_Notification+0x160>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800b802:	6a3b      	ldr	r3, [r7, #32]
 800b804:	3302      	adds	r3, #2
 800b806:	61fb      	str	r3, [r7, #28]
      switch (blue_evt->ecode)
 800b808:	69fb      	ldr	r3, [r7, #28]
 800b80a:	881b      	ldrh	r3, [r3, #0]
 800b80c:	b29b      	uxth	r3, r3
 800b80e:	f240 4207 	movw	r2, #1031	; 0x407
 800b812:	4293      	cmp	r3, r2
 800b814:	d004      	beq.n	800b820 <SVCCTL_App_Notification+0x158>
 800b816:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b81a:	d003      	beq.n	800b824 <SVCCTL_App_Notification+0x15c>
 800b81c:	2b04      	cmp	r3, #4
          break; /* RADIO_ACTIVITY_EVENT */
 800b81e:	e002      	b.n	800b826 <SVCCTL_App_Notification+0x15e>
          break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 800b820:	bf00      	nop
 800b822:	e000      	b.n	800b826 <SVCCTL_App_Notification+0x15e>
      break;
 800b824:	bf00      	nop
      break; /* EVT_VENDOR */
 800b826:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800b828:	2301      	movs	r3, #1
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3728      	adds	r7, #40	; 0x28
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}
 800b832:	bf00      	nop
 800b834:	2000014c 	.word	0x2000014c
 800b838:	20000c28 	.word	0x20000c28
 800b83c:	48000400 	.word	0x48000400

0800b840 <APP_BLE_Get_Server_Connection_Status>:

APP_BLE_ConnStatus_t APP_BLE_Get_Server_Connection_Status(void)
{
 800b840:	b480      	push	{r7}
 800b842:	af00      	add	r7, sp, #0
    return BleApplicationContext.Device_Connection_Status;
 800b844:	4b03      	ldr	r3, [pc, #12]	; (800b854 <APP_BLE_Get_Server_Connection_Status+0x14>)
 800b846:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	46bd      	mov	sp, r7
 800b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b852:	4770      	bx	lr
 800b854:	2000014c 	.word	0x2000014c

0800b858 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b082      	sub	sp, #8
 800b85c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800b85e:	4b06      	ldr	r3, [pc, #24]	; (800b878 <Ble_Tl_Init+0x20>)
 800b860:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800b862:	4b06      	ldr	r3, [pc, #24]	; (800b87c <Ble_Tl_Init+0x24>)
 800b864:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800b866:	463b      	mov	r3, r7
 800b868:	4619      	mov	r1, r3
 800b86a:	4805      	ldr	r0, [pc, #20]	; (800b880 <Ble_Tl_Init+0x28>)
 800b86c:	f7fe fe2c 	bl	800a4c8 <hci_init>

  return;
 800b870:	bf00      	nop
}
 800b872:	3708      	adds	r7, #8
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}
 800b878:	200300d4 	.word	0x200300d4
 800b87c:	0800bc73 	.word	0x0800bc73
 800b880:	0800bc3b 	.word	0x0800bc3b

0800b884 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 800b884:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b886:	b091      	sub	sp, #68	; 0x44
 800b888:	af06      	add	r7, sp, #24
  uint8_t role;
  uint8_t index;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 800b88a:	2300      	movs	r3, #0
 800b88c:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 800b88e:	f7fe fd27 	bl	800a2e0 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 800b892:	f000 f943 	bl	800bb1c <BleGetBdAddress>
 800b896:	6238      	str	r0, [r7, #32]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800b898:	6a3a      	ldr	r2, [r7, #32]
 800b89a:	2106      	movs	r1, #6
 800b89c:	2000      	movs	r0, #0
 800b89e:	f7fe fc15 	bl	800a0cc <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 800b8a2:	6a3b      	ldr	r3, [r7, #32]
 800b8a4:	795a      	ldrb	r2, [r3, #5]
 800b8a6:	4b5e      	ldr	r3, [pc, #376]	; (800ba20 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800b8a8:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 800b8aa:	6a3b      	ldr	r3, [r7, #32]
 800b8ac:	791a      	ldrb	r2, [r3, #4]
 800b8ae:	4b5c      	ldr	r3, [pc, #368]	; (800ba20 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800b8b0:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 800b8b2:	6a3b      	ldr	r3, [r7, #32]
 800b8b4:	78da      	ldrb	r2, [r3, #3]
 800b8b6:	4b5a      	ldr	r3, [pc, #360]	; (800ba20 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800b8b8:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 800b8ba:	6a3b      	ldr	r3, [r7, #32]
 800b8bc:	789a      	ldrb	r2, [r3, #2]
 800b8be:	4b58      	ldr	r3, [pc, #352]	; (800ba20 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800b8c0:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 800b8c2:	6a3b      	ldr	r3, [r7, #32]
 800b8c4:	785a      	ldrb	r2, [r3, #1]
 800b8c6:	4b56      	ldr	r3, [pc, #344]	; (800ba20 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800b8c8:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 800b8ca:	6a3b      	ldr	r3, [r7, #32]
 800b8cc:	781a      	ldrb	r2, [r3, #0]
 800b8ce:	4b54      	ldr	r3, [pc, #336]	; (800ba20 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800b8d0:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 800b8d2:	f64e 536e 	movw	r3, #60782	; 0xed6e
 800b8d6:	60fb      	str	r3, [r7, #12]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 800b8d8:	f7ff fe62 	bl	800b5a0 <LL_FLASH_GetUDN>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	60bb      	str	r3, [r7, #8]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 800b8e0:	f107 0308 	add.w	r3, r7, #8
 800b8e4:	461a      	mov	r2, r3
 800b8e6:	2106      	movs	r1, #6
 800b8e8:	202e      	movs	r0, #46	; 0x2e
 800b8ea:	f7fe fbef 	bl	800a0cc <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800b8ee:	4a4d      	ldr	r2, [pc, #308]	; (800ba24 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 800b8f0:	2110      	movs	r1, #16
 800b8f2:	2018      	movs	r0, #24
 800b8f4:	f7fe fbea 	bl	800a0cc <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 800b8f8:	4a4b      	ldr	r2, [pc, #300]	; (800ba28 <Ble_Hci_Gap_Gatt_Init+0x1a4>)
 800b8fa:	2110      	movs	r1, #16
 800b8fc:	2008      	movs	r0, #8
 800b8fe:	f7fe fbe5 	bl	800a0cc <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800b902:	2118      	movs	r1, #24
 800b904:	2001      	movs	r0, #1
 800b906:	f7fe fc4a 	bl	800a19e <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 800b90a:	f7fe f94c 	bl	8009ba6 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 800b90e:	2300      	movs	r3, #0
 800b910:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800b912:	7ffb      	ldrb	r3, [r7, #31]
 800b914:	f043 0301 	orr.w	r3, r3, #1
 800b918:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 800b91a:	7ffb      	ldrb	r3, [r7, #31]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d01e      	beq.n	800b95e <Ble_Hci_Gap_Gatt_Init+0xda>
  {
    const char *name = "P2PSRV1";
 800b920:	4b42      	ldr	r3, [pc, #264]	; (800ba2c <Ble_Hci_Gap_Gatt_Init+0x1a8>)
 800b922:	61bb      	str	r3, [r7, #24]
    aci_gap_init(role, 0,
 800b924:	f107 0216 	add.w	r2, r7, #22
 800b928:	7ff8      	ldrb	r0, [r7, #31]
 800b92a:	f107 0312 	add.w	r3, r7, #18
 800b92e:	9301      	str	r3, [sp, #4]
 800b930:	f107 0314 	add.w	r3, r7, #20
 800b934:	9300      	str	r3, [sp, #0]
 800b936:	4613      	mov	r3, r2
 800b938:	2207      	movs	r2, #7
 800b93a:	2100      	movs	r1, #0
 800b93c:	f7fe f828 	bl	8009990 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800b940:	8afc      	ldrh	r4, [r7, #22]
 800b942:	8abd      	ldrh	r5, [r7, #20]
 800b944:	69b8      	ldr	r0, [r7, #24]
 800b946:	f7f4 fc19 	bl	800017c <strlen>
 800b94a:	4603      	mov	r3, r0
 800b94c:	b2da      	uxtb	r2, r3
 800b94e:	69bb      	ldr	r3, [r7, #24]
 800b950:	9300      	str	r3, [sp, #0]
 800b952:	4613      	mov	r3, r2
 800b954:	2200      	movs	r2, #0
 800b956:	4629      	mov	r1, r5
 800b958:	4620      	mov	r0, r4
 800b95a:	f7fe fae2 	bl	8009f22 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 800b95e:	8af8      	ldrh	r0, [r7, #22]
 800b960:	8a79      	ldrh	r1, [r7, #18]
 800b962:	1d3b      	adds	r3, r7, #4
 800b964:	9300      	str	r3, [sp, #0]
 800b966:	2302      	movs	r3, #2
 800b968:	2200      	movs	r2, #0
 800b96a:	f7fe fada 	bl	8009f22 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800b96e:	2202      	movs	r2, #2
 800b970:	2102      	movs	r1, #2
 800b972:	2000      	movs	r0, #0
 800b974:	f7fe fd40 	bl	800a3f8 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800b978:	4b2d      	ldr	r3, [pc, #180]	; (800ba30 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800b97a:	2201      	movs	r2, #1
 800b97c:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800b97e:	4b2c      	ldr	r3, [pc, #176]	; (800ba30 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800b980:	781b      	ldrb	r3, [r3, #0]
 800b982:	4618      	mov	r0, r3
 800b984:	f7fd ff12 	bl	80097ac <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800b988:	4b29      	ldr	r3, [pc, #164]	; (800ba30 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800b98a:	2201      	movs	r2, #1
 800b98c:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 800b98e:	4b28      	ldr	r3, [pc, #160]	; (800ba30 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800b990:	2200      	movs	r2, #0
 800b992:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800b994:	4b26      	ldr	r3, [pc, #152]	; (800ba30 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800b996:	2208      	movs	r2, #8
 800b998:	755a      	strb	r2, [r3, #21]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800b99a:	4b25      	ldr	r3, [pc, #148]	; (800ba30 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800b99c:	2210      	movs	r2, #16
 800b99e:	759a      	strb	r2, [r3, #22]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800b9a0:	4b23      	ldr	r3, [pc, #140]	; (800ba30 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	751a      	strb	r2, [r3, #20]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800b9a6:	4b22      	ldr	r3, [pc, #136]	; (800ba30 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800b9a8:	4a22      	ldr	r2, [pc, #136]	; (800ba34 <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800b9aa:	619a      	str	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800b9ac:	4b20      	ldr	r3, [pc, #128]	; (800ba30 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	709a      	strb	r2, [r3, #2]
  for (index = 0; index < 16; index++)
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b9b8:	e00b      	b.n	800b9d2 <Ble_Hci_Gap_Gatt_Init+0x14e>
  {
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 800b9ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9be:	4a1c      	ldr	r2, [pc, #112]	; (800ba30 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800b9c0:	4413      	add	r3, r2
 800b9c2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b9c6:	711a      	strb	r2, [r3, #4]
  for (index = 0; index < 16; index++)
 800b9c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9cc:	3301      	adds	r3, #1
 800b9ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b9d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9d6:	2b0f      	cmp	r3, #15
 800b9d8:	d9ef      	bls.n	800b9ba <Ble_Hci_Gap_Gatt_Init+0x136>
  }

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800b9da:	4b15      	ldr	r3, [pc, #84]	; (800ba30 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800b9dc:	789d      	ldrb	r5, [r3, #2]
 800b9de:	4b14      	ldr	r3, [pc, #80]	; (800ba30 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800b9e0:	785e      	ldrb	r6, [r3, #1]
 800b9e2:	4b13      	ldr	r3, [pc, #76]	; (800ba30 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800b9e4:	7d5b      	ldrb	r3, [r3, #21]
 800b9e6:	4a12      	ldr	r2, [pc, #72]	; (800ba30 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800b9e8:	7d92      	ldrb	r2, [r2, #22]
 800b9ea:	4911      	ldr	r1, [pc, #68]	; (800ba30 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800b9ec:	7d09      	ldrb	r1, [r1, #20]
 800b9ee:	4810      	ldr	r0, [pc, #64]	; (800ba30 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800b9f0:	6980      	ldr	r0, [r0, #24]
 800b9f2:	2400      	movs	r4, #0
 800b9f4:	9404      	str	r4, [sp, #16]
 800b9f6:	9003      	str	r0, [sp, #12]
 800b9f8:	9102      	str	r1, [sp, #8]
 800b9fa:	9201      	str	r2, [sp, #4]
 800b9fc:	9300      	str	r3, [sp, #0]
 800b9fe:	2300      	movs	r3, #0
 800ba00:	2201      	movs	r2, #1
 800ba02:	4631      	mov	r1, r6
 800ba04:	4628      	mov	r0, r5
 800ba06:	f7fd ff1b 	bl	8009840 <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800ba0a:	4b09      	ldr	r3, [pc, #36]	; (800ba30 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800ba0c:	789b      	ldrb	r3, [r3, #2]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d001      	beq.n	800ba16 <Ble_Hci_Gap_Gatt_Init+0x192>
   {
     aci_gap_configure_whitelist();
 800ba12:	f7fe f8a4 	bl	8009b5e <aci_gap_configure_whitelist>
   }
}
 800ba16:	bf00      	nop
 800ba18:	372c      	adds	r7, #44	; 0x2c
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba1e:	bf00      	nop
 800ba20:	20000044 	.word	0x20000044
 800ba24:	0800ca48 	.word	0x0800ca48
 800ba28:	0800ca58 	.word	0x0800ca58
 800ba2c:	0800c870 	.word	0x0800c870
 800ba30:	2000014c 	.word	0x2000014c
 800ba34:	0001b207 	.word	0x0001b207

0800ba38 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b08c      	sub	sp, #48	; 0x30
 800ba3c:	af08      	add	r7, sp, #32
 800ba3e:	4603      	mov	r3, r0
 800ba40:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ba42:	2342      	movs	r3, #66	; 0x42
 800ba44:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 800ba46:	79fb      	ldrb	r3, [r7, #7]
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	d106      	bne.n	800ba5a <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800ba4c:	4b2c      	ldr	r3, [pc, #176]	; (800bb00 <Adv_Request+0xc8>)
 800ba4e:	881b      	ldrh	r3, [r3, #0]
 800ba50:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800ba52:	4b2c      	ldr	r3, [pc, #176]	; (800bb04 <Adv_Request+0xcc>)
 800ba54:	881b      	ldrh	r3, [r3, #0]
 800ba56:	81bb      	strh	r3, [r7, #12]
 800ba58:	e005      	b.n	800ba66 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800ba5a:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800ba5e:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800ba60:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800ba64:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800ba66:	4b28      	ldr	r3, [pc, #160]	; (800bb08 <Adv_Request+0xd0>)
 800ba68:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f7f5 ff3b 	bl	80018e8 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);

    if ((New_Status == APP_BLE_LP_ADV)
 800ba72:	79fb      	ldrb	r3, [r7, #7]
 800ba74:	2b02      	cmp	r3, #2
 800ba76:	d10d      	bne.n	800ba94 <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800ba78:	4b23      	ldr	r3, [pc, #140]	; (800bb08 <Adv_Request+0xd0>)
 800ba7a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800ba7e:	2b01      	cmp	r3, #1
 800ba80:	d004      	beq.n	800ba8c <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800ba82:	4b21      	ldr	r3, [pc, #132]	; (800bb08 <Adv_Request+0xd0>)
 800ba84:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800ba88:	2b02      	cmp	r3, #2
 800ba8a:	d103      	bne.n	800ba94 <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 800ba8c:	f7fd fd8c 	bl	80095a8 <aci_gap_set_non_discoverable>
 800ba90:	4603      	mov	r3, r0
 800ba92:	72fb      	strb	r3, [r7, #11]
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 800ba94:	4a1c      	ldr	r2, [pc, #112]	; (800bb08 <Adv_Request+0xd0>)
 800ba96:	79fb      	ldrb	r3, [r7, #7]
 800ba98:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 800ba9c:	4b1a      	ldr	r3, [pc, #104]	; (800bb08 <Adv_Request+0xd0>)
 800ba9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800baa2:	89b8      	ldrh	r0, [r7, #12]
 800baa4:	89f9      	ldrh	r1, [r7, #14]
 800baa6:	2200      	movs	r2, #0
 800baa8:	9206      	str	r2, [sp, #24]
 800baaa:	2200      	movs	r2, #0
 800baac:	9205      	str	r2, [sp, #20]
 800baae:	4a17      	ldr	r2, [pc, #92]	; (800bb0c <Adv_Request+0xd4>)
 800bab0:	9204      	str	r2, [sp, #16]
 800bab2:	9303      	str	r3, [sp, #12]
 800bab4:	4b16      	ldr	r3, [pc, #88]	; (800bb10 <Adv_Request+0xd8>)
 800bab6:	9302      	str	r3, [sp, #8]
 800bab8:	2308      	movs	r3, #8
 800baba:	9301      	str	r3, [sp, #4]
 800babc:	2300      	movs	r3, #0
 800babe:	9300      	str	r3, [sp, #0]
 800bac0:	2300      	movs	r3, #0
 800bac2:	4602      	mov	r2, r0
 800bac4:	2000      	movs	r0, #0
 800bac6:	f7fd fd93 	bl	80095f0 <aci_gap_set_discoverable>
 800baca:	4603      	mov	r3, r0
 800bacc:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 800bace:	4911      	ldr	r1, [pc, #68]	; (800bb14 <Adv_Request+0xdc>)
 800bad0:	200e      	movs	r0, #14
 800bad2:	f7fd ffe8 	bl	8009aa6 <aci_gap_update_adv_data>
 800bad6:	4603      	mov	r3, r0
 800bad8:	72fb      	strb	r3, [r7, #11]
    if (ret == BLE_STATUS_SUCCESS)
 800bada:	7afb      	ldrb	r3, [r7, #11]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d10a      	bne.n	800baf6 <Adv_Request+0xbe>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 800bae0:	79fb      	ldrb	r3, [r7, #7]
 800bae2:	2b01      	cmp	r3, #1
 800bae4:	d107      	bne.n	800baf6 <Adv_Request+0xbe>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800bae6:	4b08      	ldr	r3, [pc, #32]	; (800bb08 <Adv_Request+0xd0>)
 800bae8:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800baec:	490a      	ldr	r1, [pc, #40]	; (800bb18 <Adv_Request+0xe0>)
 800baee:	4618      	mov	r0, r3
 800baf0:	f7f5 ff84 	bl	80019fc <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 800baf4:	bf00      	nop
 800baf6:	bf00      	nop
}
 800baf8:	3710      	adds	r7, #16
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop
 800bb00:	200001e0 	.word	0x200001e0
 800bb04:	200001e2 	.word	0x200001e2
 800bb08:	2000014c 	.word	0x2000014c
 800bb0c:	20000175 	.word	0x20000175
 800bb10:	0800ca68 	.word	0x0800ca68
 800bb14:	20000044 	.word	0x20000044
 800bb18:	0001e046 	.word	0x0001e046

0800bb1c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b086      	sub	sp, #24
 800bb20:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800bb22:	f7ff fd3d 	bl	800b5a0 <LL_FLASH_GetUDN>
 800bb26:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb2e:	d023      	beq.n	800bb78 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800bb30:	f7ff fd4e 	bl	800b5d0 <LL_FLASH_GetSTCompanyID>
 800bb34:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800bb36:	f7ff fd3f 	bl	800b5b8 <LL_FLASH_GetDeviceID>
 800bb3a:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 800bb3c:	693b      	ldr	r3, [r7, #16]
 800bb3e:	b2da      	uxtb	r2, r3
 800bb40:	4b16      	ldr	r3, [pc, #88]	; (800bb9c <BleGetBdAddress+0x80>)
 800bb42:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	0a1b      	lsrs	r3, r3, #8
 800bb48:	b2da      	uxtb	r2, r3
 800bb4a:	4b14      	ldr	r3, [pc, #80]	; (800bb9c <BleGetBdAddress+0x80>)
 800bb4c:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	0c1b      	lsrs	r3, r3, #16
 800bb52:	b2da      	uxtb	r2, r3
 800bb54:	4b11      	ldr	r3, [pc, #68]	; (800bb9c <BleGetBdAddress+0x80>)
 800bb56:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	b2da      	uxtb	r2, r3
 800bb5c:	4b0f      	ldr	r3, [pc, #60]	; (800bb9c <BleGetBdAddress+0x80>)
 800bb5e:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	b2da      	uxtb	r2, r3
 800bb64:	4b0d      	ldr	r3, [pc, #52]	; (800bb9c <BleGetBdAddress+0x80>)
 800bb66:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	0a1b      	lsrs	r3, r3, #8
 800bb6c:	b2da      	uxtb	r2, r3
 800bb6e:	4b0b      	ldr	r3, [pc, #44]	; (800bb9c <BleGetBdAddress+0x80>)
 800bb70:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 800bb72:	4b0a      	ldr	r3, [pc, #40]	; (800bb9c <BleGetBdAddress+0x80>)
 800bb74:	617b      	str	r3, [r7, #20]
 800bb76:	e00b      	b.n	800bb90 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800bb78:	2000      	movs	r0, #0
 800bb7a:	f7fe fe97 	bl	800a8ac <OTP_Read>
 800bb7e:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d002      	beq.n	800bb8c <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	617b      	str	r3, [r7, #20]
 800bb8a:	e001      	b.n	800bb90 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 800bb8c:	4b04      	ldr	r3, [pc, #16]	; (800bba0 <BleGetBdAddress+0x84>)
 800bb8e:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 800bb90:	697b      	ldr	r3, [r7, #20]
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3718      	adds	r7, #24
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}
 800bb9a:	bf00      	nop
 800bb9c:	20000620 	.word	0x20000620
 800bba0:	0800ca40 	.word	0x0800ca40

0800bba4 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b082      	sub	sp, #8
 800bba8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800bbaa:	4b0a      	ldr	r3, [pc, #40]	; (800bbd4 <Adv_Cancel+0x30>)
 800bbac:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800bbb0:	2b05      	cmp	r3, #5
 800bbb2:	d00a      	beq.n	800bbca <Adv_Cancel+0x26>

  {

    tBleStatus result = 0x00;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 800bbb8:	f7fd fcf6 	bl	80095a8 <aci_gap_set_non_discoverable>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800bbc0:	4b04      	ldr	r3, [pc, #16]	; (800bbd4 <Adv_Cancel+0x30>)
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 800bbc8:	bf00      	nop
 800bbca:	bf00      	nop
}
 800bbcc:	3708      	adds	r7, #8
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}
 800bbd2:	bf00      	nop
 800bbd4:	2000014c 	.word	0x2000014c

0800bbd8 <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 800bbdc:	2100      	movs	r1, #0
 800bbde:	2001      	movs	r0, #1
 800bbe0:	f000 fcb0 	bl	800c544 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 800bbe4:	bf00      	nop
}
 800bbe6:	bd80      	pop	{r7, pc}

0800bbe8 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 800bbe8:	b480      	push	{r7}
 800bbea:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */

/* USER CODE END Switch_OFF_GPIO */
}
 800bbec:	bf00      	nop
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf4:	4770      	bx	lr

0800bbf6 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800bbf6:	b580      	push	{r7, lr}
 800bbf8:	b082      	sub	sp, #8
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800bbfe:	2100      	movs	r1, #0
 800bc00:	2004      	movs	r0, #4
 800bc02:	f000 fc9f 	bl	800c544 <UTIL_SEQ_SetTask>
  return;
 800bc06:	bf00      	nop
}
 800bc08:	3708      	adds	r7, #8
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}

0800bc0e <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800bc0e:	b580      	push	{r7, lr}
 800bc10:	b082      	sub	sp, #8
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800bc16:	2001      	movs	r0, #1
 800bc18:	f000 fcfa 	bl	800c610 <UTIL_SEQ_SetEvt>
  return;
 800bc1c:	bf00      	nop
}
 800bc1e:	3708      	adds	r7, #8
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b082      	sub	sp, #8
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800bc2c:	2001      	movs	r0, #1
 800bc2e:	f000 fd0d 	bl	800c64c <UTIL_SEQ_WaitEvt>
  return;
 800bc32:	bf00      	nop
}
 800bc34:	3708      	adds	r7, #8
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}

0800bc3a <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 800bc3a:	b580      	push	{r7, lr}
 800bc3c:	b084      	sub	sp, #16
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	685b      	ldr	r3, [r3, #4]
 800bc4a:	3308      	adds	r3, #8
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f7ff fa7d 	bl	800b14c <SVCCTL_UserEvtRx>
 800bc52:	4603      	mov	r3, r0
 800bc54:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800bc56:	7afb      	ldrb	r3, [r7, #11]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d003      	beq.n	800bc64 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	2201      	movs	r2, #1
 800bc60:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 800bc62:	e002      	b.n	800bc6a <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2200      	movs	r2, #0
 800bc68:	701a      	strb	r2, [r3, #0]
}
 800bc6a:	bf00      	nop
 800bc6c:	3710      	adds	r7, #16
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}

0800bc72 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 800bc72:	b580      	push	{r7, lr}
 800bc74:	b084      	sub	sp, #16
 800bc76:	af00      	add	r7, sp, #0
 800bc78:	4603      	mov	r3, r0
 800bc7a:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 800bc7c:	79fb      	ldrb	r3, [r7, #7]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d002      	beq.n	800bc88 <BLE_StatusNot+0x16>
 800bc82:	2b01      	cmp	r3, #1
 800bc84:	d007      	beq.n	800bc96 <BLE_StatusNot+0x24>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 800bc86:	e00d      	b.n	800bca4 <BLE_StatusNot+0x32>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800bc88:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800bc8c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800bc8e:	68f8      	ldr	r0, [r7, #12]
 800bc90:	f000 fc82 	bl	800c598 <UTIL_SEQ_PauseTask>
      break;
 800bc94:	e006      	b.n	800bca4 <BLE_StatusNot+0x32>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800bc96:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800bc9a:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800bc9c:	68f8      	ldr	r0, [r7, #12]
 800bc9e:	f000 fc99 	bl	800c5d4 <UTIL_SEQ_ResumeTask>
      break;
 800bca2:	bf00      	nop
  }
  return;
 800bca4:	bf00      	nop
}
 800bca6:	3710      	adds	r7, #16
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}

0800bcac <P2PS_STM_App_Notification>:
static void P2PS_DataChange_Timer_Callback(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b082      	sub	sp, #8
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	781b      	ldrb	r3, [r3, #0]
 800bcb8:	2b01      	cmp	r3, #1
 800bcba:	d00b      	beq.n	800bcd4 <P2PS_STM_App_Notification+0x28>
 800bcbc:	2b03      	cmp	r3, #3
 800bcbe:	d00d      	beq.n	800bcdc <P2PS_STM_App_Notification+0x30>
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d000      	beq.n	800bcc6 <P2PS_STM_App_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 800bcc4:	e00b      	b.n	800bcde <P2PS_STM_App_Notification+0x32>
    	P2P_Server_App_Context.NotificationStatus = 1;
 800bcc6:	4b08      	ldr	r3, [pc, #32]	; (800bce8 <P2PS_STM_App_Notification+0x3c>)
 800bcc8:	2201      	movs	r2, #1
 800bcca:	701a      	strb	r2, [r3, #0]
    	HAL_TIM_Base_Start_IT(&htim16);
 800bccc:	4807      	ldr	r0, [pc, #28]	; (800bcec <P2PS_STM_App_Notification+0x40>)
 800bcce:	f7fc fcf5 	bl	80086bc <HAL_TIM_Base_Start_IT>
      break;
 800bcd2:	e004      	b.n	800bcde <P2PS_STM_App_Notification+0x32>
    	P2P_Server_App_Context.NotificationStatus = 0;
 800bcd4:	4b04      	ldr	r3, [pc, #16]	; (800bce8 <P2PS_STM_App_Notification+0x3c>)
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	701a      	strb	r2, [r3, #0]
      break;
 800bcda:	e000      	b.n	800bcde <P2PS_STM_App_Notification+0x32>
      break;
 800bcdc:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800bcde:	bf00      	nop
}
 800bce0:	3708      	adds	r7, #8
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
 800bce6:	bf00      	nop
 800bce8:	200001e4 	.word	0x200001e4
 800bcec:	200008d8 	.word	0x200008d8

0800bcf0 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b083      	sub	sp, #12
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	781b      	ldrb	r3, [r3, #0]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d002      	beq.n	800bd06 <P2PS_APP_Notification+0x16>
 800bd00:	2b01      	cmp	r3, #1
 800bd02:	d002      	beq.n	800bd0a <P2PS_APP_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800bd04:	e002      	b.n	800bd0c <P2PS_APP_Notification+0x1c>
    break;
 800bd06:	bf00      	nop
 800bd08:	e000      	b.n	800bd0c <P2PS_APP_Notification+0x1c>
    break;
 800bd0a:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 800bd0c:	bf00      	nop
}
 800bd0e:	370c      	adds	r7, #12
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */
	/* Register task used to update the characteristic (send the notification) */
		//UTIL_SEQ_RegTask(1 << CFG_MY_TASK_NOTIFY_DATA ,UTIL_SEQ_RFU, P2PS_Send_Notification_Task);
		UTIL_SEQ_RegTask(1 << SEND_FSR_DATA_BLE_TASK, UTIL_SEQ_RFU, P2PS_Send_Notification_Task_FSR);
 800bd1c:	4a0b      	ldr	r2, [pc, #44]	; (800bd4c <P2PS_APP_Init+0x34>)
 800bd1e:	2100      	movs	r1, #0
 800bd20:	f44f 7080 	mov.w	r0, #256	; 0x100
 800bd24:	f000 fbee 	bl	800c504 <UTIL_SEQ_RegTask>
		UTIL_SEQ_RegTask(1 << SEND_ACC_DATA_BLE_TASK, UTIL_SEQ_RFU, P2PS_Send_Notification_Task_ACC);
 800bd28:	4a09      	ldr	r2, [pc, #36]	; (800bd50 <P2PS_APP_Init+0x38>)
 800bd2a:	2100      	movs	r1, #0
 800bd2c:	2080      	movs	r0, #128	; 0x80
 800bd2e:	f000 fbe9 	bl	800c504 <UTIL_SEQ_RegTask>
		UTIL_SEQ_RegTask(1 << SEND_PPG_DATA_BLE_TASK, UTIL_SEQ_RFU, P2PS_Send_Notification_Task_PPG);
 800bd32:	4a08      	ldr	r2, [pc, #32]	; (800bd54 <P2PS_APP_Init+0x3c>)
 800bd34:	2100      	movs	r1, #0
 800bd36:	f44f 7000 	mov.w	r0, #512	; 0x200
 800bd3a:	f000 fbe3 	bl	800c504 <UTIL_SEQ_RegTask>
//				P2PS_DataChange_Timer_Callback);

	  /**
	   * Initialize Template application context
	   */
	  P2P_Server_App_Context.NotificationStatus=0;
 800bd3e:	4b06      	ldr	r3, [pc, #24]	; (800bd58 <P2PS_APP_Init+0x40>)
 800bd40:	2200      	movs	r2, #0
 800bd42:	701a      	strb	r2, [r3, #0]
	  P2PS_APP_context_Init();
 800bd44:	f000 f864 	bl	800be10 <P2PS_APP_context_Init>
/* USER CODE END P2PS_APP_Init */
  return;
 800bd48:	bf00      	nop
}
 800bd4a:	bd80      	pop	{r7, pc}
 800bd4c:	0800bd5d 	.word	0x0800bd5d
 800bd50:	0800bd99 	.word	0x0800bd99
 800bd54:	0800bdd5 	.word	0x0800bdd5
 800bd58:	200001e4 	.word	0x200001e4

0800bd5c <P2PS_Send_Notification_Task_FSR>:

/* USER CODE BEGIN FD */

static void P2PS_Send_Notification_Task_FSR(void)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b0a0      	sub	sp, #128	; 0x80
 800bd60:	af00      	add	r7, sp, #0
  /* Update P2P_NOTIFY characteristic */
	uint8_t value[PAYLOAD_LENGTH] = {0};
 800bd62:	1d3b      	adds	r3, r7, #4
 800bd64:	227b      	movs	r2, #123	; 0x7b
 800bd66:	2100      	movs	r1, #0
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f000 fd28 	bl	800c7be <memset>

	if(P2P_Server_App_Context.NotificationStatus)
 800bd6e:	4b09      	ldr	r3, [pc, #36]	; (800bd94 <P2PS_Send_Notification_Task_FSR+0x38>)
 800bd70:	781b      	ldrb	r3, [r3, #0]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d00a      	beq.n	800bd8c <P2PS_Send_Notification_Task_FSR+0x30>
	{
		prepare_fsr_ble_pack(&value[0]);
 800bd76:	1d3b      	adds	r3, r7, #4
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f7f6 fb21 	bl	80023c0 <prepare_fsr_ble_pack>
//		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
		P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID,&value[0]);
 800bd7e:	1d3b      	adds	r3, r7, #4
 800bd80:	4619      	mov	r1, r3
 800bd82:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800bd86:	f7fe febb 	bl	800ab00 <P2PS_STM_App_Update_Char>
	else
	{

	}

  return;
 800bd8a:	bf00      	nop
 800bd8c:	bf00      	nop
}
 800bd8e:	3780      	adds	r7, #128	; 0x80
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}
 800bd94:	200001e4 	.word	0x200001e4

0800bd98 <P2PS_Send_Notification_Task_ACC>:
static void P2PS_Send_Notification_Task_ACC(void)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b0a0      	sub	sp, #128	; 0x80
 800bd9c:	af00      	add	r7, sp, #0
  /* Update P2P_NOTIFY characteristic */
	uint8_t value[PAYLOAD_LENGTH] = {0};
 800bd9e:	1d3b      	adds	r3, r7, #4
 800bda0:	227b      	movs	r2, #123	; 0x7b
 800bda2:	2100      	movs	r1, #0
 800bda4:	4618      	mov	r0, r3
 800bda6:	f000 fd0a 	bl	800c7be <memset>

	if(P2P_Server_App_Context.NotificationStatus)
 800bdaa:	4b09      	ldr	r3, [pc, #36]	; (800bdd0 <P2PS_Send_Notification_Task_ACC+0x38>)
 800bdac:	781b      	ldrb	r3, [r3, #0]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d00a      	beq.n	800bdc8 <P2PS_Send_Notification_Task_ACC+0x30>
	{
		prepare_acc_ble_pack(&value[0]);
 800bdb2:	1d3b      	adds	r3, r7, #4
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f7f6 fb2b 	bl	8002410 <prepare_acc_ble_pack>
//		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
		P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID,&value[0]);
 800bdba:	1d3b      	adds	r3, r7, #4
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800bdc2:	f7fe fe9d 	bl	800ab00 <P2PS_STM_App_Update_Char>
	else
	{

	}

  return;
 800bdc6:	bf00      	nop
 800bdc8:	bf00      	nop
}
 800bdca:	3780      	adds	r7, #128	; 0x80
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}
 800bdd0:	200001e4 	.word	0x200001e4

0800bdd4 <P2PS_Send_Notification_Task_PPG>:
static void P2PS_Send_Notification_Task_PPG(void)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b0a0      	sub	sp, #128	; 0x80
 800bdd8:	af00      	add	r7, sp, #0
  /* Update P2P_NOTIFY characteristic */
	uint8_t value[PAYLOAD_LENGTH] = {0};
 800bdda:	1d3b      	adds	r3, r7, #4
 800bddc:	227b      	movs	r2, #123	; 0x7b
 800bdde:	2100      	movs	r1, #0
 800bde0:	4618      	mov	r0, r3
 800bde2:	f000 fcec 	bl	800c7be <memset>

	if(P2P_Server_App_Context.NotificationStatus)
 800bde6:	4b09      	ldr	r3, [pc, #36]	; (800be0c <P2PS_Send_Notification_Task_PPG+0x38>)
 800bde8:	781b      	ldrb	r3, [r3, #0]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d00a      	beq.n	800be04 <P2PS_Send_Notification_Task_PPG+0x30>
	{
		prepare_ppg_ble_pack(&value[0]);
 800bdee:	1d3b      	adds	r3, r7, #4
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	f7f6 fc8b 	bl	800270c <prepare_ppg_ble_pack>
//		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
		P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID,&value[0]);
 800bdf6:	1d3b      	adds	r3, r7, #4
 800bdf8:	4619      	mov	r1, r3
 800bdfa:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800bdfe:	f7fe fe7f 	bl	800ab00 <P2PS_STM_App_Update_Char>
	else
	{

	}

  return;
 800be02:	bf00      	nop
 800be04:	bf00      	nop
}
 800be06:	3780      	adds	r7, #128	; 0x80
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}
 800be0c:	200001e4 	.word	0x200001e4

0800be10 <P2PS_APP_context_Init>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
static void P2PS_APP_context_Init(void)
{
 800be10:	b480      	push	{r7}
 800be12:	af00      	add	r7, sp, #0
  P2P_Server_App_Context.Parameter = 0;
 800be14:	4b0b      	ldr	r3, [pc, #44]	; (800be44 <P2PS_APP_context_Init+0x34>)
 800be16:	2200      	movs	r2, #0
 800be18:	805a      	strh	r2, [r3, #2]
  P2P_Server_App_Context.ACC.X = 0;
 800be1a:	4b0a      	ldr	r3, [pc, #40]	; (800be44 <P2PS_APP_context_Init+0x34>)
 800be1c:	2200      	movs	r2, #0
 800be1e:	809a      	strh	r2, [r3, #4]
  P2P_Server_App_Context.ACC.Y = 0;
 800be20:	4b08      	ldr	r3, [pc, #32]	; (800be44 <P2PS_APP_context_Init+0x34>)
 800be22:	2200      	movs	r2, #0
 800be24:	80da      	strh	r2, [r3, #6]
  P2P_Server_App_Context.ACC.Z = 0;
 800be26:	4b07      	ldr	r3, [pc, #28]	; (800be44 <P2PS_APP_context_Init+0x34>)
 800be28:	2200      	movs	r2, #0
 800be2a:	811a      	strh	r2, [r3, #8]
  P2P_Server_App_Context.ECG.ecg_value = 0;
 800be2c:	4b05      	ldr	r3, [pc, #20]	; (800be44 <P2PS_APP_context_Init+0x34>)
 800be2e:	2200      	movs	r2, #0
 800be30:	815a      	strh	r2, [r3, #10]
  P2P_Server_App_Context.PPG.ppg_value = 0;
 800be32:	4b04      	ldr	r3, [pc, #16]	; (800be44 <P2PS_APP_context_Init+0x34>)
 800be34:	2200      	movs	r2, #0
 800be36:	819a      	strh	r2, [r3, #12]
}
 800be38:	bf00      	nop
 800be3a:	46bd      	mov	sp, r7
 800be3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be40:	4770      	bx	lr
 800be42:	bf00      	nop
 800be44:	200001e4 	.word	0x200001e4

0800be48 <LL_PWR_EnableBootC2>:
{
 800be48:	b480      	push	{r7}
 800be4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800be4c:	4b05      	ldr	r3, [pc, #20]	; (800be64 <LL_PWR_EnableBootC2+0x1c>)
 800be4e:	68db      	ldr	r3, [r3, #12]
 800be50:	4a04      	ldr	r2, [pc, #16]	; (800be64 <LL_PWR_EnableBootC2+0x1c>)
 800be52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be56:	60d3      	str	r3, [r2, #12]
}
 800be58:	bf00      	nop
 800be5a:	46bd      	mov	sp, r7
 800be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be60:	4770      	bx	lr
 800be62:	bf00      	nop
 800be64:	58000400 	.word	0x58000400

0800be68 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800be68:	b480      	push	{r7}
 800be6a:	b083      	sub	sp, #12
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800be70:	4b06      	ldr	r3, [pc, #24]	; (800be8c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800be72:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800be76:	4905      	ldr	r1, [pc, #20]	; (800be8c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	4313      	orrs	r3, r2
 800be7c:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800be80:	bf00      	nop
 800be82:	370c      	adds	r7, #12
 800be84:	46bd      	mov	sp, r7
 800be86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8a:	4770      	bx	lr
 800be8c:	58000800 	.word	0x58000800

0800be90 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800be90:	b480      	push	{r7}
 800be92:	b083      	sub	sp, #12
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800be98:	4b05      	ldr	r3, [pc, #20]	; (800beb0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800be9a:	6a1a      	ldr	r2, [r3, #32]
 800be9c:	4904      	ldr	r1, [pc, #16]	; (800beb0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	4313      	orrs	r3, r2
 800bea2:	620b      	str	r3, [r1, #32]
}
 800bea4:	bf00      	nop
 800bea6:	370c      	adds	r7, #12
 800bea8:	46bd      	mov	sp, r7
 800beaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beae:	4770      	bx	lr
 800beb0:	58000800 	.word	0x58000800

0800beb4 <LL_AHB3_GRP1_EnableClock>:
{
 800beb4:	b480      	push	{r7}
 800beb6:	b085      	sub	sp, #20
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800bebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bec0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bec2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	4313      	orrs	r3, r2
 800beca:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800becc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bed0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	4013      	ands	r3, r2
 800bed6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800bed8:	68fb      	ldr	r3, [r7, #12]
}
 800beda:	bf00      	nop
 800bedc:	3714      	adds	r7, #20
 800bede:	46bd      	mov	sp, r7
 800bee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee4:	4770      	bx	lr

0800bee6 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800bee6:	b480      	push	{r7}
 800bee8:	b083      	sub	sp, #12
 800beea:	af00      	add	r7, sp, #0
 800beec:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	601a      	str	r2, [r3, #0]
}
 800befa:	bf00      	nop
 800befc:	370c      	adds	r7, #12
 800befe:	46bd      	mov	sp, r7
 800bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf04:	4770      	bx	lr

0800bf06 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800bf06:	b480      	push	{r7}
 800bf08:	b083      	sub	sp, #12
 800bf0a:	af00      	add	r7, sp, #0
 800bf0c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	f043 0201 	orr.w	r2, r3, #1
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	601a      	str	r2, [r3, #0]
}
 800bf1a:	bf00      	nop
 800bf1c:	370c      	adds	r7, #12
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf24:	4770      	bx	lr

0800bf26 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800bf26:	b480      	push	{r7}
 800bf28:	b083      	sub	sp, #12
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	6078      	str	r0, [r7, #4]
 800bf2e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	685a      	ldr	r2, [r3, #4]
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	041b      	lsls	r3, r3, #16
 800bf38:	43db      	mvns	r3, r3
 800bf3a:	401a      	ands	r2, r3
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	605a      	str	r2, [r3, #4]
}
 800bf40:	bf00      	nop
 800bf42:	370c      	adds	r7, #12
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr

0800bf4c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b083      	sub	sp, #12
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
 800bf54:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	685a      	ldr	r2, [r3, #4]
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	041b      	lsls	r3, r3, #16
 800bf5e:	431a      	orrs	r2, r3
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	605a      	str	r2, [r3, #4]
}
 800bf64:	bf00      	nop
 800bf66:	370c      	adds	r7, #12
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6e:	4770      	bx	lr

0800bf70 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b083      	sub	sp, #12
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	685a      	ldr	r2, [r3, #4]
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	43db      	mvns	r3, r3
 800bf82:	401a      	ands	r2, r3
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	605a      	str	r2, [r3, #4]
}
 800bf88:	bf00      	nop
 800bf8a:	370c      	adds	r7, #12
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr

0800bf94 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800bf94:	b480      	push	{r7}
 800bf96:	b083      	sub	sp, #12
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	683a      	ldr	r2, [r7, #0]
 800bfa2:	609a      	str	r2, [r3, #8]
}
 800bfa4:	bf00      	nop
 800bfa6:	370c      	adds	r7, #12
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfae:	4770      	bx	lr

0800bfb0 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b083      	sub	sp, #12
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
 800bfb8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	041a      	lsls	r2, r3, #16
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	609a      	str	r2, [r3, #8]
}
 800bfc2:	bf00      	nop
 800bfc4:	370c      	adds	r7, #12
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfcc:	4770      	bx	lr

0800bfce <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800bfce:	b480      	push	{r7}
 800bfd0:	b083      	sub	sp, #12
 800bfd2:	af00      	add	r7, sp, #0
 800bfd4:	6078      	str	r0, [r7, #4]
 800bfd6:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	68da      	ldr	r2, [r3, #12]
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	4013      	ands	r3, r2
 800bfe0:	683a      	ldr	r2, [r7, #0]
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	d101      	bne.n	800bfea <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	e000      	b.n	800bfec <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800bfea:	2300      	movs	r3, #0
}
 800bfec:	4618      	mov	r0, r3
 800bfee:	370c      	adds	r7, #12
 800bff0:	46bd      	mov	sp, r7
 800bff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff6:	4770      	bx	lr

0800bff8 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800bff8:	b480      	push	{r7}
 800bffa:	b083      	sub	sp, #12
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
 800c000:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	69da      	ldr	r2, [r3, #28]
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	4013      	ands	r3, r2
 800c00a:	683a      	ldr	r2, [r7, #0]
 800c00c:	429a      	cmp	r2, r3
 800c00e:	d101      	bne.n	800c014 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800c010:	2301      	movs	r3, #1
 800c012:	e000      	b.n	800c016 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800c014:	2300      	movs	r3, #0
}
 800c016:	4618      	mov	r0, r3
 800c018:	370c      	adds	r7, #12
 800c01a:	46bd      	mov	sp, r7
 800c01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c020:	4770      	bx	lr
	...

0800c024 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800c024:	b580      	push	{r7, lr}
 800c026:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800c028:	2102      	movs	r1, #2
 800c02a:	4819      	ldr	r0, [pc, #100]	; (800c090 <HW_IPCC_Rx_Handler+0x6c>)
 800c02c:	f7ff ffe4 	bl	800bff8 <LL_C2_IPCC_IsActiveFlag_CHx>
 800c030:	4603      	mov	r3, r0
 800c032:	2b00      	cmp	r3, #0
 800c034:	d009      	beq.n	800c04a <HW_IPCC_Rx_Handler+0x26>
 800c036:	4b16      	ldr	r3, [pc, #88]	; (800c090 <HW_IPCC_Rx_Handler+0x6c>)
 800c038:	685b      	ldr	r3, [r3, #4]
 800c03a:	43db      	mvns	r3, r3
 800c03c:	f003 0302 	and.w	r3, r3, #2
 800c040:	2b00      	cmp	r3, #0
 800c042:	d002      	beq.n	800c04a <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800c044:	f000 f8e6 	bl	800c214 <HW_IPCC_SYS_EvtHandler>
 800c048:	e01f      	b.n	800c08a <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800c04a:	2101      	movs	r1, #1
 800c04c:	4810      	ldr	r0, [pc, #64]	; (800c090 <HW_IPCC_Rx_Handler+0x6c>)
 800c04e:	f7ff ffd3 	bl	800bff8 <LL_C2_IPCC_IsActiveFlag_CHx>
 800c052:	4603      	mov	r3, r0
 800c054:	2b00      	cmp	r3, #0
 800c056:	d008      	beq.n	800c06a <HW_IPCC_Rx_Handler+0x46>
 800c058:	4b0d      	ldr	r3, [pc, #52]	; (800c090 <HW_IPCC_Rx_Handler+0x6c>)
 800c05a:	685b      	ldr	r3, [r3, #4]
 800c05c:	f003 0301 	and.w	r3, r3, #1
 800c060:	2b00      	cmp	r3, #0
 800c062:	d102      	bne.n	800c06a <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800c064:	f000 f89a 	bl	800c19c <HW_IPCC_BLE_EvtHandler>
 800c068:	e00f      	b.n	800c08a <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800c06a:	2108      	movs	r1, #8
 800c06c:	4808      	ldr	r0, [pc, #32]	; (800c090 <HW_IPCC_Rx_Handler+0x6c>)
 800c06e:	f7ff ffc3 	bl	800bff8 <LL_C2_IPCC_IsActiveFlag_CHx>
 800c072:	4603      	mov	r3, r0
 800c074:	2b00      	cmp	r3, #0
 800c076:	d009      	beq.n	800c08c <HW_IPCC_Rx_Handler+0x68>
 800c078:	4b05      	ldr	r3, [pc, #20]	; (800c090 <HW_IPCC_Rx_Handler+0x6c>)
 800c07a:	685b      	ldr	r3, [r3, #4]
 800c07c:	43db      	mvns	r3, r3
 800c07e:	f003 0308 	and.w	r3, r3, #8
 800c082:	2b00      	cmp	r3, #0
 800c084:	d002      	beq.n	800c08c <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800c086:	f000 f911 	bl	800c2ac <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800c08a:	bf00      	nop
 800c08c:	bf00      	nop
}
 800c08e:	bd80      	pop	{r7, pc}
 800c090:	58000c00 	.word	0x58000c00

0800c094 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800c094:	b580      	push	{r7, lr}
 800c096:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800c098:	2102      	movs	r1, #2
 800c09a:	4822      	ldr	r0, [pc, #136]	; (800c124 <HW_IPCC_Tx_Handler+0x90>)
 800c09c:	f7ff ff97 	bl	800bfce <LL_C1_IPCC_IsActiveFlag_CHx>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d109      	bne.n	800c0ba <HW_IPCC_Tx_Handler+0x26>
 800c0a6:	4b1f      	ldr	r3, [pc, #124]	; (800c124 <HW_IPCC_Tx_Handler+0x90>)
 800c0a8:	685b      	ldr	r3, [r3, #4]
 800c0aa:	43db      	mvns	r3, r3
 800c0ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d002      	beq.n	800c0ba <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800c0b4:	f000 f8a2 	bl	800c1fc <HW_IPCC_SYS_CmdEvtHandler>
 800c0b8:	e031      	b.n	800c11e <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800c0ba:	2102      	movs	r1, #2
 800c0bc:	4819      	ldr	r0, [pc, #100]	; (800c124 <HW_IPCC_Tx_Handler+0x90>)
 800c0be:	f7ff ff86 	bl	800bfce <LL_C1_IPCC_IsActiveFlag_CHx>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d109      	bne.n	800c0dc <HW_IPCC_Tx_Handler+0x48>
 800c0c8:	4b16      	ldr	r3, [pc, #88]	; (800c124 <HW_IPCC_Tx_Handler+0x90>)
 800c0ca:	685b      	ldr	r3, [r3, #4]
 800c0cc:	43db      	mvns	r3, r3
 800c0ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d002      	beq.n	800c0dc <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800c0d6:	f000 f891 	bl	800c1fc <HW_IPCC_SYS_CmdEvtHandler>
 800c0da:	e020      	b.n	800c11e <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800c0dc:	2108      	movs	r1, #8
 800c0de:	4811      	ldr	r0, [pc, #68]	; (800c124 <HW_IPCC_Tx_Handler+0x90>)
 800c0e0:	f7ff ff75 	bl	800bfce <LL_C1_IPCC_IsActiveFlag_CHx>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d109      	bne.n	800c0fe <HW_IPCC_Tx_Handler+0x6a>
 800c0ea:	4b0e      	ldr	r3, [pc, #56]	; (800c124 <HW_IPCC_Tx_Handler+0x90>)
 800c0ec:	685b      	ldr	r3, [r3, #4]
 800c0ee:	43db      	mvns	r3, r3
 800c0f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d002      	beq.n	800c0fe <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 800c0f8:	f000 f8ba 	bl	800c270 <HW_IPCC_MM_FreeBufHandler>
 800c0fc:	e00f      	b.n	800c11e <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800c0fe:	2120      	movs	r1, #32
 800c100:	4808      	ldr	r0, [pc, #32]	; (800c124 <HW_IPCC_Tx_Handler+0x90>)
 800c102:	f7ff ff64 	bl	800bfce <LL_C1_IPCC_IsActiveFlag_CHx>
 800c106:	4603      	mov	r3, r0
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d109      	bne.n	800c120 <HW_IPCC_Tx_Handler+0x8c>
 800c10c:	4b05      	ldr	r3, [pc, #20]	; (800c124 <HW_IPCC_Tx_Handler+0x90>)
 800c10e:	685b      	ldr	r3, [r3, #4]
 800c110:	43db      	mvns	r3, r3
 800c112:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c116:	2b00      	cmp	r3, #0
 800c118:	d002      	beq.n	800c120 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800c11a:	f000 f84b 	bl	800c1b4 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800c11e:	bf00      	nop
 800c120:	bf00      	nop
}
 800c122:	bd80      	pop	{r7, pc}
 800c124:	58000c00 	.word	0x58000c00

0800c128 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	af00      	add	r7, sp, #0
  /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800c12c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c130:	f7ff fe9a 	bl	800be68 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800c134:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c138:	f7ff feaa 	bl	800be90 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800c13c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800c13e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800c140:	f7ff fe82 	bl	800be48 <LL_PWR_EnableBootC2>

  return;
 800c144:	bf00      	nop
}
 800c146:	bd80      	pop	{r7, pc}

0800c148 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800c14c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c150:	f7ff feb0 	bl	800beb4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800c154:	4806      	ldr	r0, [pc, #24]	; (800c170 <HW_IPCC_Init+0x28>)
 800c156:	f7ff fed6 	bl	800bf06 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800c15a:	4805      	ldr	r0, [pc, #20]	; (800c170 <HW_IPCC_Init+0x28>)
 800c15c:	f7ff fec3 	bl	800bee6 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800c160:	202c      	movs	r0, #44	; 0x2c
 800c162:	f7f8 fbc4 	bl	80048ee <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800c166:	202d      	movs	r0, #45	; 0x2d
 800c168:	f7f8 fbc1 	bl	80048ee <HAL_NVIC_EnableIRQ>

  return;
 800c16c:	bf00      	nop
}
 800c16e:	bd80      	pop	{r7, pc}
 800c170:	58000c00 	.word	0x58000c00

0800c174 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800c174:	b580      	push	{r7, lr}
 800c176:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800c178:	2101      	movs	r1, #1
 800c17a:	4802      	ldr	r0, [pc, #8]	; (800c184 <HW_IPCC_BLE_Init+0x10>)
 800c17c:	f7ff fef8 	bl	800bf70 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c180:	bf00      	nop
}
 800c182:	bd80      	pop	{r7, pc}
 800c184:	58000c00 	.word	0x58000c00

0800c188 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800c18c:	2101      	movs	r1, #1
 800c18e:	4802      	ldr	r0, [pc, #8]	; (800c198 <HW_IPCC_BLE_SendCmd+0x10>)
 800c190:	f7ff ff0e 	bl	800bfb0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800c194:	bf00      	nop
}
 800c196:	bd80      	pop	{r7, pc}
 800c198:	58000c00 	.word	0x58000c00

0800c19c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800c1a0:	f7ff f8ae 	bl	800b300 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800c1a4:	2101      	movs	r1, #1
 800c1a6:	4802      	ldr	r0, [pc, #8]	; (800c1b0 <HW_IPCC_BLE_EvtHandler+0x14>)
 800c1a8:	f7ff fef4 	bl	800bf94 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c1ac:	bf00      	nop
}
 800c1ae:	bd80      	pop	{r7, pc}
 800c1b0:	58000c00 	.word	0x58000c00

0800c1b4 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800c1b8:	2120      	movs	r1, #32
 800c1ba:	4803      	ldr	r0, [pc, #12]	; (800c1c8 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800c1bc:	f7ff fec6 	bl	800bf4c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800c1c0:	f7ff f8ba 	bl	800b338 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800c1c4:	bf00      	nop
}
 800c1c6:	bd80      	pop	{r7, pc}
 800c1c8:	58000c00 	.word	0x58000c00

0800c1cc <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800c1d0:	2102      	movs	r1, #2
 800c1d2:	4802      	ldr	r0, [pc, #8]	; (800c1dc <HW_IPCC_SYS_Init+0x10>)
 800c1d4:	f7ff fecc 	bl	800bf70 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c1d8:	bf00      	nop
}
 800c1da:	bd80      	pop	{r7, pc}
 800c1dc:	58000c00 	.word	0x58000c00

0800c1e0 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c1e4:	2102      	movs	r1, #2
 800c1e6:	4804      	ldr	r0, [pc, #16]	; (800c1f8 <HW_IPCC_SYS_SendCmd+0x18>)
 800c1e8:	f7ff fee2 	bl	800bfb0 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c1ec:	2102      	movs	r1, #2
 800c1ee:	4802      	ldr	r0, [pc, #8]	; (800c1f8 <HW_IPCC_SYS_SendCmd+0x18>)
 800c1f0:	f7ff fe99 	bl	800bf26 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800c1f4:	bf00      	nop
}
 800c1f6:	bd80      	pop	{r7, pc}
 800c1f8:	58000c00 	.word	0x58000c00

0800c1fc <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c200:	2102      	movs	r1, #2
 800c202:	4803      	ldr	r0, [pc, #12]	; (800c210 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800c204:	f7ff fea2 	bl	800bf4c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800c208:	f7ff f8de 	bl	800b3c8 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800c20c:	bf00      	nop
}
 800c20e:	bd80      	pop	{r7, pc}
 800c210:	58000c00 	.word	0x58000c00

0800c214 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800c214:	b580      	push	{r7, lr}
 800c216:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800c218:	f7ff f8e6 	bl	800b3e8 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800c21c:	2102      	movs	r1, #2
 800c21e:	4802      	ldr	r0, [pc, #8]	; (800c228 <HW_IPCC_SYS_EvtHandler+0x14>)
 800c220:	f7ff feb8 	bl	800bf94 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c224:	bf00      	nop
}
 800c226:	bd80      	pop	{r7, pc}
 800c228:	58000c00 	.word	0x58000c00

0800c22c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b082      	sub	sp, #8
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800c234:	2108      	movs	r1, #8
 800c236:	480c      	ldr	r0, [pc, #48]	; (800c268 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c238:	f7ff fec9 	bl	800bfce <LL_C1_IPCC_IsActiveFlag_CHx>
 800c23c:	4603      	mov	r3, r0
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d007      	beq.n	800c252 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800c242:	4a0a      	ldr	r2, [pc, #40]	; (800c26c <HW_IPCC_MM_SendFreeBuf+0x40>)
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c248:	2108      	movs	r1, #8
 800c24a:	4807      	ldr	r0, [pc, #28]	; (800c268 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c24c:	f7ff fe6b 	bl	800bf26 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800c250:	e006      	b.n	800c260 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c256:	2108      	movs	r1, #8
 800c258:	4803      	ldr	r0, [pc, #12]	; (800c268 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c25a:	f7ff fea9 	bl	800bfb0 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800c25e:	bf00      	nop
}
 800c260:	3708      	adds	r7, #8
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
 800c266:	bf00      	nop
 800c268:	58000c00 	.word	0x58000c00
 800c26c:	20000628 	.word	0x20000628

0800c270 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800c270:	b580      	push	{r7, lr}
 800c272:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c274:	2108      	movs	r1, #8
 800c276:	4806      	ldr	r0, [pc, #24]	; (800c290 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800c278:	f7ff fe68 	bl	800bf4c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800c27c:	4b05      	ldr	r3, [pc, #20]	; (800c294 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c282:	2108      	movs	r1, #8
 800c284:	4802      	ldr	r0, [pc, #8]	; (800c290 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800c286:	f7ff fe93 	bl	800bfb0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800c28a:	bf00      	nop
}
 800c28c:	bd80      	pop	{r7, pc}
 800c28e:	bf00      	nop
 800c290:	58000c00 	.word	0x58000c00
 800c294:	20000628 	.word	0x20000628

0800c298 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800c29c:	2108      	movs	r1, #8
 800c29e:	4802      	ldr	r0, [pc, #8]	; (800c2a8 <HW_IPCC_TRACES_Init+0x10>)
 800c2a0:	f7ff fe66 	bl	800bf70 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c2a4:	bf00      	nop
}
 800c2a6:	bd80      	pop	{r7, pc}
 800c2a8:	58000c00 	.word	0x58000c00

0800c2ac <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800c2b0:	f7ff f952 	bl	800b558 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800c2b4:	2108      	movs	r1, #8
 800c2b6:	4802      	ldr	r0, [pc, #8]	; (800c2c0 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800c2b8:	f7ff fe6c 	bl	800bf94 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c2bc:	bf00      	nop
}
 800c2be:	bd80      	pop	{r7, pc}
 800c2c0:	58000c00 	.word	0x58000c00

0800c2c4 <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800c2c8:	4b05      	ldr	r3, [pc, #20]	; (800c2e0 <UTIL_LPM_Init+0x1c>)
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800c2ce:	4b05      	ldr	r3, [pc, #20]	; (800c2e4 <UTIL_LPM_Init+0x20>)
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800c2d4:	bf00      	nop
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2dc:	4770      	bx	lr
 800c2de:	bf00      	nop
 800c2e0:	2000062c 	.word	0x2000062c
 800c2e4:	20000630 	.word	0x20000630

0800c2e8 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b087      	sub	sp, #28
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
 800c2f0:	460b      	mov	r3, r1
 800c2f2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c2f4:	f3ef 8310 	mrs	r3, PRIMASK
 800c2f8:	613b      	str	r3, [r7, #16]
  return(result);
 800c2fa:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800c2fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c2fe:	b672      	cpsid	i
  
  switch(state)
 800c300:	78fb      	ldrb	r3, [r7, #3]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d009      	beq.n	800c31a <UTIL_LPM_SetOffMode+0x32>
 800c306:	2b01      	cmp	r3, #1
 800c308:	d000      	beq.n	800c30c <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 800c30a:	e00e      	b.n	800c32a <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 800c30c:	4b0c      	ldr	r3, [pc, #48]	; (800c340 <UTIL_LPM_SetOffMode+0x58>)
 800c30e:	681a      	ldr	r2, [r3, #0]
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	4313      	orrs	r3, r2
 800c314:	4a0a      	ldr	r2, [pc, #40]	; (800c340 <UTIL_LPM_SetOffMode+0x58>)
 800c316:	6013      	str	r3, [r2, #0]
      break;
 800c318:	e007      	b.n	800c32a <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	43da      	mvns	r2, r3
 800c31e:	4b08      	ldr	r3, [pc, #32]	; (800c340 <UTIL_LPM_SetOffMode+0x58>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	4013      	ands	r3, r2
 800c324:	4a06      	ldr	r2, [pc, #24]	; (800c340 <UTIL_LPM_SetOffMode+0x58>)
 800c326:	6013      	str	r3, [r2, #0]
      break;
 800c328:	bf00      	nop
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800c334:	bf00      	nop
 800c336:	371c      	adds	r7, #28
 800c338:	46bd      	mov	sp, r7
 800c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33e:	4770      	bx	lr
 800c340:	20000630 	.word	0x20000630

0800c344 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b08c      	sub	sp, #48	; 0x30
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800c34c:	4b65      	ldr	r3, [pc, #404]	; (800c4e4 <UTIL_SEQ_Run+0x1a0>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800c352:	4b64      	ldr	r3, [pc, #400]	; (800c4e4 <UTIL_SEQ_Run+0x1a0>)
 800c354:	681a      	ldr	r2, [r3, #0]
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	4013      	ands	r3, r2
 800c35a:	4a62      	ldr	r2, [pc, #392]	; (800c4e4 <UTIL_SEQ_Run+0x1a0>)
 800c35c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800c35e:	e081      	b.n	800c464 <UTIL_SEQ_Run+0x120>
  {
    counter = 0U;
 800c360:	2300      	movs	r3, #0
 800c362:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800c364:	e002      	b.n	800c36c <UTIL_SEQ_Run+0x28>
    {
      counter++;
 800c366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c368:	3301      	adds	r3, #1
 800c36a:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800c36c:	4a5e      	ldr	r2, [pc, #376]	; (800c4e8 <UTIL_SEQ_Run+0x1a4>)
 800c36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c370:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c374:	4b5d      	ldr	r3, [pc, #372]	; (800c4ec <UTIL_SEQ_Run+0x1a8>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	401a      	ands	r2, r3
 800c37a:	4b5a      	ldr	r3, [pc, #360]	; (800c4e4 <UTIL_SEQ_Run+0x1a0>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	4013      	ands	r3, r2
 800c380:	2b00      	cmp	r3, #0
 800c382:	d0f0      	beq.n	800c366 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800c384:	4a58      	ldr	r2, [pc, #352]	; (800c4e8 <UTIL_SEQ_Run+0x1a4>)
 800c386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c388:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c38c:	4b57      	ldr	r3, [pc, #348]	; (800c4ec <UTIL_SEQ_Run+0x1a8>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	401a      	ands	r2, r3
 800c392:	4b54      	ldr	r3, [pc, #336]	; (800c4e4 <UTIL_SEQ_Run+0x1a0>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	4013      	ands	r3, r2
 800c398:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800c39a:	4a53      	ldr	r2, [pc, #332]	; (800c4e8 <UTIL_SEQ_Run+0x1a4>)
 800c39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c39e:	00db      	lsls	r3, r3, #3
 800c3a0:	4413      	add	r3, r2
 800c3a2:	685a      	ldr	r2, [r3, #4]
 800c3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a6:	4013      	ands	r3, r2
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d106      	bne.n	800c3ba <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800c3ac:	4a4e      	ldr	r2, [pc, #312]	; (800c4e8 <UTIL_SEQ_Run+0x1a4>)
 800c3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3b0:	00db      	lsls	r3, r3, #3
 800c3b2:	4413      	add	r3, r2
 800c3b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c3b8:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800c3ba:	4a4b      	ldr	r2, [pc, #300]	; (800c4e8 <UTIL_SEQ_Run+0x1a4>)
 800c3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3be:	00db      	lsls	r3, r3, #3
 800c3c0:	4413      	add	r3, r2
 800c3c2:	685a      	ldr	r2, [r3, #4]
 800c3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3c6:	4013      	ands	r3, r2
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f000 f98f 	bl	800c6ec <SEQ_BitPosition>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	4b47      	ldr	r3, [pc, #284]	; (800c4f0 <UTIL_SEQ_Run+0x1ac>)
 800c3d4:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800c3d6:	4a44      	ldr	r2, [pc, #272]	; (800c4e8 <UTIL_SEQ_Run+0x1a4>)
 800c3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3da:	00db      	lsls	r3, r3, #3
 800c3dc:	4413      	add	r3, r2
 800c3de:	685a      	ldr	r2, [r3, #4]
 800c3e0:	4b43      	ldr	r3, [pc, #268]	; (800c4f0 <UTIL_SEQ_Run+0x1ac>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	2101      	movs	r1, #1
 800c3e6:	fa01 f303 	lsl.w	r3, r1, r3
 800c3ea:	43db      	mvns	r3, r3
 800c3ec:	401a      	ands	r2, r3
 800c3ee:	493e      	ldr	r1, [pc, #248]	; (800c4e8 <UTIL_SEQ_Run+0x1a4>)
 800c3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f2:	00db      	lsls	r3, r3, #3
 800c3f4:	440b      	add	r3, r1
 800c3f6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c3f8:	f3ef 8310 	mrs	r3, PRIMASK
 800c3fc:	61bb      	str	r3, [r7, #24]
  return(result);
 800c3fe:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c400:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800c402:	b672      	cpsid	i
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800c404:	4b3a      	ldr	r3, [pc, #232]	; (800c4f0 <UTIL_SEQ_Run+0x1ac>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	2201      	movs	r2, #1
 800c40a:	fa02 f303 	lsl.w	r3, r2, r3
 800c40e:	43da      	mvns	r2, r3
 800c410:	4b38      	ldr	r3, [pc, #224]	; (800c4f4 <UTIL_SEQ_Run+0x1b0>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	4013      	ands	r3, r2
 800c416:	4a37      	ldr	r2, [pc, #220]	; (800c4f4 <UTIL_SEQ_Run+0x1b0>)
 800c418:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c41a:	2302      	movs	r3, #2
 800c41c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c41e:	e013      	b.n	800c448 <UTIL_SEQ_Run+0x104>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800c420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c422:	3b01      	subs	r3, #1
 800c424:	4a30      	ldr	r2, [pc, #192]	; (800c4e8 <UTIL_SEQ_Run+0x1a4>)
 800c426:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800c42a:	4b31      	ldr	r3, [pc, #196]	; (800c4f0 <UTIL_SEQ_Run+0x1ac>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	2201      	movs	r2, #1
 800c430:	fa02 f303 	lsl.w	r3, r2, r3
 800c434:	43da      	mvns	r2, r3
 800c436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c438:	3b01      	subs	r3, #1
 800c43a:	400a      	ands	r2, r1
 800c43c:	492a      	ldr	r1, [pc, #168]	; (800c4e8 <UTIL_SEQ_Run+0x1a4>)
 800c43e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c444:	3b01      	subs	r3, #1
 800c446:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d1e8      	bne.n	800c420 <UTIL_SEQ_Run+0xdc>
 800c44e:	6a3b      	ldr	r3, [r7, #32]
 800c450:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	f383 8810 	msr	PRIMASK, r3
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800c458:	4b25      	ldr	r3, [pc, #148]	; (800c4f0 <UTIL_SEQ_Run+0x1ac>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	4a26      	ldr	r2, [pc, #152]	; (800c4f8 <UTIL_SEQ_Run+0x1b4>)
 800c45e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c462:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800c464:	4b23      	ldr	r3, [pc, #140]	; (800c4f4 <UTIL_SEQ_Run+0x1b0>)
 800c466:	681a      	ldr	r2, [r3, #0]
 800c468:	4b20      	ldr	r3, [pc, #128]	; (800c4ec <UTIL_SEQ_Run+0x1a8>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	401a      	ands	r2, r3
 800c46e:	4b1d      	ldr	r3, [pc, #116]	; (800c4e4 <UTIL_SEQ_Run+0x1a0>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	4013      	ands	r3, r2
 800c474:	2b00      	cmp	r3, #0
 800c476:	d007      	beq.n	800c488 <UTIL_SEQ_Run+0x144>
 800c478:	4b20      	ldr	r3, [pc, #128]	; (800c4fc <UTIL_SEQ_Run+0x1b8>)
 800c47a:	681a      	ldr	r2, [r3, #0]
 800c47c:	4b20      	ldr	r3, [pc, #128]	; (800c500 <UTIL_SEQ_Run+0x1bc>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	4013      	ands	r3, r2
 800c482:	2b00      	cmp	r3, #0
 800c484:	f43f af6c 	beq.w	800c360 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800c488:	4b19      	ldr	r3, [pc, #100]	; (800c4f0 <UTIL_SEQ_Run+0x1ac>)
 800c48a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c48e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800c490:	f000 f91e 	bl	800c6d0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c494:	f3ef 8310 	mrs	r3, PRIMASK
 800c498:	613b      	str	r3, [r7, #16]
  return(result);
 800c49a:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c49c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c49e:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800c4a0:	4b14      	ldr	r3, [pc, #80]	; (800c4f4 <UTIL_SEQ_Run+0x1b0>)
 800c4a2:	681a      	ldr	r2, [r3, #0]
 800c4a4:	4b11      	ldr	r3, [pc, #68]	; (800c4ec <UTIL_SEQ_Run+0x1a8>)
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	401a      	ands	r2, r3
 800c4aa:	4b0e      	ldr	r3, [pc, #56]	; (800c4e4 <UTIL_SEQ_Run+0x1a0>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	4013      	ands	r3, r2
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d108      	bne.n	800c4c6 <UTIL_SEQ_Run+0x182>
 800c4b4:	4b11      	ldr	r3, [pc, #68]	; (800c4fc <UTIL_SEQ_Run+0x1b8>)
 800c4b6:	681a      	ldr	r2, [r3, #0]
 800c4b8:	4b11      	ldr	r3, [pc, #68]	; (800c500 <UTIL_SEQ_Run+0x1bc>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4013      	ands	r3, r2
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d101      	bne.n	800c4c6 <UTIL_SEQ_Run+0x182>
  {
	UTIL_SEQ_Idle( );
 800c4c2:	f7f4 fbbe 	bl	8000c42 <UTIL_SEQ_Idle>
 800c4c6:	69fb      	ldr	r3, [r7, #28]
 800c4c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	f383 8810 	msr	PRIMASK, r3
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  
  UTIL_SEQ_PostIdle( );
 800c4d0:	f000 f905 	bl	800c6de <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800c4d4:	4a03      	ldr	r2, [pc, #12]	; (800c4e4 <UTIL_SEQ_Run+0x1a0>)
 800c4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d8:	6013      	str	r3, [r2, #0]

  return;
 800c4da:	bf00      	nop
}
 800c4dc:	3730      	adds	r7, #48	; 0x30
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}
 800c4e2:	bf00      	nop
 800c4e4:	20000058 	.word	0x20000058
 800c4e8:	200006c4 	.word	0x200006c4
 800c4ec:	20000054 	.word	0x20000054
 800c4f0:	20000640 	.word	0x20000640
 800c4f4:	20000634 	.word	0x20000634
 800c4f8:	20000644 	.word	0x20000644
 800c4fc:	20000638 	.word	0x20000638
 800c500:	2000063c 	.word	0x2000063c

0800c504 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b088      	sub	sp, #32
 800c508:	af00      	add	r7, sp, #0
 800c50a:	60f8      	str	r0, [r7, #12]
 800c50c:	60b9      	str	r1, [r7, #8]
 800c50e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c510:	f3ef 8310 	mrs	r3, PRIMASK
 800c514:	617b      	str	r3, [r7, #20]
  return(result);
 800c516:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800c518:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c51a:	b672      	cpsid	i

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800c51c:	68f8      	ldr	r0, [r7, #12]
 800c51e:	f000 f8e5 	bl	800c6ec <SEQ_BitPosition>
 800c522:	4603      	mov	r3, r0
 800c524:	4619      	mov	r1, r3
 800c526:	4a06      	ldr	r2, [pc, #24]	; (800c540 <UTIL_SEQ_RegTask+0x3c>)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c52e:	69fb      	ldr	r3, [r7, #28]
 800c530:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c532:	69bb      	ldr	r3, [r7, #24]
 800c534:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800c538:	bf00      	nop
}
 800c53a:	3720      	adds	r7, #32
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}
 800c540:	20000644 	.word	0x20000644

0800c544 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800c544:	b480      	push	{r7}
 800c546:	b087      	sub	sp, #28
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c54e:	f3ef 8310 	mrs	r3, PRIMASK
 800c552:	60fb      	str	r3, [r7, #12]
  return(result);
 800c554:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c556:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c558:	b672      	cpsid	i

  TaskSet |= TaskId_bm;
 800c55a:	4b0d      	ldr	r3, [pc, #52]	; (800c590 <UTIL_SEQ_SetTask+0x4c>)
 800c55c:	681a      	ldr	r2, [r3, #0]
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	4313      	orrs	r3, r2
 800c562:	4a0b      	ldr	r2, [pc, #44]	; (800c590 <UTIL_SEQ_SetTask+0x4c>)
 800c564:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800c566:	4a0b      	ldr	r2, [pc, #44]	; (800c594 <UTIL_SEQ_SetTask+0x50>)
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	431a      	orrs	r2, r3
 800c572:	4908      	ldr	r1, [pc, #32]	; (800c594 <UTIL_SEQ_SetTask+0x50>)
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c584:	bf00      	nop
}
 800c586:	371c      	adds	r7, #28
 800c588:	46bd      	mov	sp, r7
 800c58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58e:	4770      	bx	lr
 800c590:	20000634 	.word	0x20000634
 800c594:	200006c4 	.word	0x200006c4

0800c598 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800c598:	b480      	push	{r7}
 800c59a:	b087      	sub	sp, #28
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c5a0:	f3ef 8310 	mrs	r3, PRIMASK
 800c5a4:	60fb      	str	r3, [r7, #12]
  return(result);
 800c5a6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c5a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c5aa:	b672      	cpsid	i

  TaskMask &= (~TaskId_bm);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	43da      	mvns	r2, r3
 800c5b0:	4b07      	ldr	r3, [pc, #28]	; (800c5d0 <UTIL_SEQ_PauseTask+0x38>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	4013      	ands	r3, r2
 800c5b6:	4a06      	ldr	r2, [pc, #24]	; (800c5d0 <UTIL_SEQ_PauseTask+0x38>)
 800c5b8:	6013      	str	r3, [r2, #0]
 800c5ba:	697b      	ldr	r3, [r7, #20]
 800c5bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c5c4:	bf00      	nop
}
 800c5c6:	371c      	adds	r7, #28
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ce:	4770      	bx	lr
 800c5d0:	20000054 	.word	0x20000054

0800c5d4 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b087      	sub	sp, #28
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c5dc:	f3ef 8310 	mrs	r3, PRIMASK
 800c5e0:	60fb      	str	r3, [r7, #12]
  return(result);
 800c5e2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c5e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c5e6:	b672      	cpsid	i

  TaskMask |= TaskId_bm;
 800c5e8:	4b08      	ldr	r3, [pc, #32]	; (800c60c <UTIL_SEQ_ResumeTask+0x38>)
 800c5ea:	681a      	ldr	r2, [r3, #0]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	4313      	orrs	r3, r2
 800c5f0:	4a06      	ldr	r2, [pc, #24]	; (800c60c <UTIL_SEQ_ResumeTask+0x38>)
 800c5f2:	6013      	str	r3, [r2, #0]
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c5fe:	bf00      	nop
}
 800c600:	371c      	adds	r7, #28
 800c602:	46bd      	mov	sp, r7
 800c604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c608:	4770      	bx	lr
 800c60a:	bf00      	nop
 800c60c:	20000054 	.word	0x20000054

0800c610 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800c610:	b480      	push	{r7}
 800c612:	b087      	sub	sp, #28
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c618:	f3ef 8310 	mrs	r3, PRIMASK
 800c61c:	60fb      	str	r3, [r7, #12]
  return(result);
 800c61e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c620:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c622:	b672      	cpsid	i

  EvtSet |= EvtId_bm;
 800c624:	4b08      	ldr	r3, [pc, #32]	; (800c648 <UTIL_SEQ_SetEvt+0x38>)
 800c626:	681a      	ldr	r2, [r3, #0]
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	4313      	orrs	r3, r2
 800c62c:	4a06      	ldr	r2, [pc, #24]	; (800c648 <UTIL_SEQ_SetEvt+0x38>)
 800c62e:	6013      	str	r3, [r2, #0]
 800c630:	697b      	ldr	r3, [r7, #20]
 800c632:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c63a:	bf00      	nop
}
 800c63c:	371c      	adds	r7, #28
 800c63e:	46bd      	mov	sp, r7
 800c640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c644:	4770      	bx	lr
 800c646:	bf00      	nop
 800c648:	20000638 	.word	0x20000638

0800c64c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b086      	sub	sp, #24
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800c654:	4b1b      	ldr	r3, [pc, #108]	; (800c6c4 <UTIL_SEQ_WaitEvt+0x78>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	613b      	str	r3, [r7, #16]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800c65a:	4b1a      	ldr	r3, [pc, #104]	; (800c6c4 <UTIL_SEQ_WaitEvt+0x78>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c662:	d102      	bne.n	800c66a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 800c664:	2300      	movs	r3, #0
 800c666:	617b      	str	r3, [r7, #20]
 800c668:	e005      	b.n	800c676 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 800c66a:	4b16      	ldr	r3, [pc, #88]	; (800c6c4 <UTIL_SEQ_WaitEvt+0x78>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	2201      	movs	r2, #1
 800c670:	fa02 f303 	lsl.w	r3, r2, r3
 800c674:	617b      	str	r3, [r7, #20]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800c676:	4b14      	ldr	r3, [pc, #80]	; (800c6c8 <UTIL_SEQ_WaitEvt+0x7c>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	60fb      	str	r3, [r7, #12]
  EvtWaited = EvtId_bm;
 800c67c:	4a12      	ldr	r2, [pc, #72]	; (800c6c8 <UTIL_SEQ_WaitEvt+0x7c>)
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 800c682:	e005      	b.n	800c690 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 800c684:	4b10      	ldr	r3, [pc, #64]	; (800c6c8 <UTIL_SEQ_WaitEvt+0x7c>)
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	4619      	mov	r1, r3
 800c68a:	6978      	ldr	r0, [r7, #20]
 800c68c:	f7f4 fae0 	bl	8000c50 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 800c690:	4b0e      	ldr	r3, [pc, #56]	; (800c6cc <UTIL_SEQ_WaitEvt+0x80>)
 800c692:	681a      	ldr	r2, [r3, #0]
 800c694:	4b0c      	ldr	r3, [pc, #48]	; (800c6c8 <UTIL_SEQ_WaitEvt+0x7c>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	4013      	ands	r3, r2
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d0f2      	beq.n	800c684 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800c69e:	4a09      	ldr	r2, [pc, #36]	; (800c6c4 <UTIL_SEQ_WaitEvt+0x78>)
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	6013      	str	r3, [r2, #0]

  EvtSet &= (~EvtWaited);
 800c6a4:	4b08      	ldr	r3, [pc, #32]	; (800c6c8 <UTIL_SEQ_WaitEvt+0x7c>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	43da      	mvns	r2, r3
 800c6aa:	4b08      	ldr	r3, [pc, #32]	; (800c6cc <UTIL_SEQ_WaitEvt+0x80>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	4013      	ands	r3, r2
 800c6b0:	4a06      	ldr	r2, [pc, #24]	; (800c6cc <UTIL_SEQ_WaitEvt+0x80>)
 800c6b2:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 800c6b4:	4a04      	ldr	r2, [pc, #16]	; (800c6c8 <UTIL_SEQ_WaitEvt+0x7c>)
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	6013      	str	r3, [r2, #0]

  return;
 800c6ba:	bf00      	nop
}
 800c6bc:	3718      	adds	r7, #24
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
 800c6c2:	bf00      	nop
 800c6c4:	20000640 	.word	0x20000640
 800c6c8:	2000063c 	.word	0x2000063c
 800c6cc:	20000638 	.word	0x20000638

0800c6d0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800c6d0:	b480      	push	{r7}
 800c6d2:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c6d4:	bf00      	nop
}
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6dc:	4770      	bx	lr

0800c6de <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800c6de:	b480      	push	{r7}
 800c6e0:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c6e2:	bf00      	nop
}
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ea:	4770      	bx	lr

0800c6ec <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b085      	sub	sp, #20
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	0c1b      	lsrs	r3, r3, #16
 800c6fc:	041b      	lsls	r3, r3, #16
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d104      	bne.n	800c70c <SEQ_BitPosition+0x20>
 800c702:	2310      	movs	r3, #16
 800c704:	73fb      	strb	r3, [r7, #15]
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	041b      	lsls	r3, r3, #16
 800c70a:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c712:	2b00      	cmp	r3, #0
 800c714:	d105      	bne.n	800c722 <SEQ_BitPosition+0x36>
 800c716:	7bfb      	ldrb	r3, [r7, #15]
 800c718:	3308      	adds	r3, #8
 800c71a:	73fb      	strb	r3, [r7, #15]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	021b      	lsls	r3, r3, #8
 800c720:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d105      	bne.n	800c738 <SEQ_BitPosition+0x4c>
 800c72c:	7bfb      	ldrb	r3, [r7, #15]
 800c72e:	3304      	adds	r3, #4
 800c730:	73fb      	strb	r3, [r7, #15]
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	011b      	lsls	r3, r3, #4
 800c736:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	0f1b      	lsrs	r3, r3, #28
 800c73c:	4a07      	ldr	r2, [pc, #28]	; (800c75c <SEQ_BitPosition+0x70>)
 800c73e:	5cd2      	ldrb	r2, [r2, r3]
 800c740:	7bfb      	ldrb	r3, [r7, #15]
 800c742:	4413      	add	r3, r2
 800c744:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800c746:	7bfb      	ldrb	r3, [r7, #15]
 800c748:	f1c3 031f 	rsb	r3, r3, #31
 800c74c:	b2db      	uxtb	r3, r3
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3714      	adds	r7, #20
 800c752:	46bd      	mov	sp, r7
 800c754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c758:	4770      	bx	lr
 800c75a:	bf00      	nop
 800c75c:	0800ca70 	.word	0x0800ca70

0800c760 <__libc_init_array>:
 800c760:	b570      	push	{r4, r5, r6, lr}
 800c762:	4e0d      	ldr	r6, [pc, #52]	; (800c798 <__libc_init_array+0x38>)
 800c764:	4c0d      	ldr	r4, [pc, #52]	; (800c79c <__libc_init_array+0x3c>)
 800c766:	1ba4      	subs	r4, r4, r6
 800c768:	10a4      	asrs	r4, r4, #2
 800c76a:	2500      	movs	r5, #0
 800c76c:	42a5      	cmp	r5, r4
 800c76e:	d109      	bne.n	800c784 <__libc_init_array+0x24>
 800c770:	4e0b      	ldr	r6, [pc, #44]	; (800c7a0 <__libc_init_array+0x40>)
 800c772:	4c0c      	ldr	r4, [pc, #48]	; (800c7a4 <__libc_init_array+0x44>)
 800c774:	f000 f82c 	bl	800c7d0 <_init>
 800c778:	1ba4      	subs	r4, r4, r6
 800c77a:	10a4      	asrs	r4, r4, #2
 800c77c:	2500      	movs	r5, #0
 800c77e:	42a5      	cmp	r5, r4
 800c780:	d105      	bne.n	800c78e <__libc_init_array+0x2e>
 800c782:	bd70      	pop	{r4, r5, r6, pc}
 800c784:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c788:	4798      	blx	r3
 800c78a:	3501      	adds	r5, #1
 800c78c:	e7ee      	b.n	800c76c <__libc_init_array+0xc>
 800c78e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c792:	4798      	blx	r3
 800c794:	3501      	adds	r5, #1
 800c796:	e7f2      	b.n	800c77e <__libc_init_array+0x1e>
 800c798:	0800ca88 	.word	0x0800ca88
 800c79c:	0800ca88 	.word	0x0800ca88
 800c7a0:	0800ca88 	.word	0x0800ca88
 800c7a4:	0800ca8c 	.word	0x0800ca8c

0800c7a8 <memcpy>:
 800c7a8:	b510      	push	{r4, lr}
 800c7aa:	1e43      	subs	r3, r0, #1
 800c7ac:	440a      	add	r2, r1
 800c7ae:	4291      	cmp	r1, r2
 800c7b0:	d100      	bne.n	800c7b4 <memcpy+0xc>
 800c7b2:	bd10      	pop	{r4, pc}
 800c7b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c7bc:	e7f7      	b.n	800c7ae <memcpy+0x6>

0800c7be <memset>:
 800c7be:	4402      	add	r2, r0
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	d100      	bne.n	800c7c8 <memset+0xa>
 800c7c6:	4770      	bx	lr
 800c7c8:	f803 1b01 	strb.w	r1, [r3], #1
 800c7cc:	e7f9      	b.n	800c7c2 <memset+0x4>
	...

0800c7d0 <_init>:
 800c7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7d2:	bf00      	nop
 800c7d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7d6:	bc08      	pop	{r3}
 800c7d8:	469e      	mov	lr, r3
 800c7da:	4770      	bx	lr

0800c7dc <_fini>:
 800c7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7de:	bf00      	nop
 800c7e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7e2:	bc08      	pop	{r3}
 800c7e4:	469e      	mov	lr, r3
 800c7e6:	4770      	bx	lr
