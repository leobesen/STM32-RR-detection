
SERVER_NUCLEO_LB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3d4  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  0800b514  0800b514  0001b514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b680  0800b680  0001b680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b688  0800b688  0001b688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b68c  0800b68c  0001b68c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000028  20000004  0800b690  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  2000002c  0800b6b8  0002002c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000003d  200000c8  0800b751  000200c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000108  0800b78e  00020108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 000000a8  2000011c  0800b79f  0002011c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000604  200001c4  0800b847  000201c4  2**2
                  ALLOC
 12 ._user_heap_stack 00000c00  200007c8  0800b847  000207c8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000024  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       0000019f  20030024  20030024  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000880  200301c4  200301c4  00030000  2**2
                  ALLOC
 17 .debug_info   000437a9  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 00007c3a  00000000  00000000  0006399d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 00003170  00000000  00000000  0006b5d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 00002dd8  00000000  00000000  0006e748  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_macro  0000e6dd  00000000  00000000  00071520  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   000329d8  00000000  00000000  0007fbfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    00103746  00000000  00000000  000b25d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  001b5d1b  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000ce54  00000000  00000000  001b5d98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001c4 	.word	0x200001c4
 800015c:	00000000 	.word	0x00000000
 8000160:	0800b4fc 	.word	0x0800b4fc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001c8 	.word	0x200001c8
 800017c:	0800b4fc 	.word	0x0800b4fc

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_uldivmod>:
 8000190:	b953      	cbnz	r3, 80001a8 <__aeabi_uldivmod+0x18>
 8000192:	b94a      	cbnz	r2, 80001a8 <__aeabi_uldivmod+0x18>
 8000194:	2900      	cmp	r1, #0
 8000196:	bf08      	it	eq
 8000198:	2800      	cmpeq	r0, #0
 800019a:	bf1c      	itt	ne
 800019c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001a4:	f000 b972 	b.w	800048c <__aeabi_idiv0>
 80001a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b0:	f000 f806 	bl	80001c0 <__udivmoddi4>
 80001b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001bc:	b004      	add	sp, #16
 80001be:	4770      	bx	lr

080001c0 <__udivmoddi4>:
 80001c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c4:	9e08      	ldr	r6, [sp, #32]
 80001c6:	4604      	mov	r4, r0
 80001c8:	4688      	mov	r8, r1
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d14b      	bne.n	8000266 <__udivmoddi4+0xa6>
 80001ce:	428a      	cmp	r2, r1
 80001d0:	4615      	mov	r5, r2
 80001d2:	d967      	bls.n	80002a4 <__udivmoddi4+0xe4>
 80001d4:	fab2 f282 	clz	r2, r2
 80001d8:	b14a      	cbz	r2, 80001ee <__udivmoddi4+0x2e>
 80001da:	f1c2 0720 	rsb	r7, r2, #32
 80001de:	fa01 f302 	lsl.w	r3, r1, r2
 80001e2:	fa20 f707 	lsr.w	r7, r0, r7
 80001e6:	4095      	lsls	r5, r2
 80001e8:	ea47 0803 	orr.w	r8, r7, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80001f8:	fa1f fc85 	uxth.w	ip, r5
 80001fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000200:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000204:	fb07 f10c 	mul.w	r1, r7, ip
 8000208:	4299      	cmp	r1, r3
 800020a:	d909      	bls.n	8000220 <__udivmoddi4+0x60>
 800020c:	18eb      	adds	r3, r5, r3
 800020e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000212:	f080 811b 	bcs.w	800044c <__udivmoddi4+0x28c>
 8000216:	4299      	cmp	r1, r3
 8000218:	f240 8118 	bls.w	800044c <__udivmoddi4+0x28c>
 800021c:	3f02      	subs	r7, #2
 800021e:	442b      	add	r3, r5
 8000220:	1a5b      	subs	r3, r3, r1
 8000222:	b2a4      	uxth	r4, r4
 8000224:	fbb3 f0fe 	udiv	r0, r3, lr
 8000228:	fb0e 3310 	mls	r3, lr, r0, r3
 800022c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000230:	fb00 fc0c 	mul.w	ip, r0, ip
 8000234:	45a4      	cmp	ip, r4
 8000236:	d909      	bls.n	800024c <__udivmoddi4+0x8c>
 8000238:	192c      	adds	r4, r5, r4
 800023a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800023e:	f080 8107 	bcs.w	8000450 <__udivmoddi4+0x290>
 8000242:	45a4      	cmp	ip, r4
 8000244:	f240 8104 	bls.w	8000450 <__udivmoddi4+0x290>
 8000248:	3802      	subs	r0, #2
 800024a:	442c      	add	r4, r5
 800024c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000250:	eba4 040c 	sub.w	r4, r4, ip
 8000254:	2700      	movs	r7, #0
 8000256:	b11e      	cbz	r6, 8000260 <__udivmoddi4+0xa0>
 8000258:	40d4      	lsrs	r4, r2
 800025a:	2300      	movs	r3, #0
 800025c:	e9c6 4300 	strd	r4, r3, [r6]
 8000260:	4639      	mov	r1, r7
 8000262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000266:	428b      	cmp	r3, r1
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0xbe>
 800026a:	2e00      	cmp	r6, #0
 800026c:	f000 80eb 	beq.w	8000446 <__udivmoddi4+0x286>
 8000270:	2700      	movs	r7, #0
 8000272:	e9c6 0100 	strd	r0, r1, [r6]
 8000276:	4638      	mov	r0, r7
 8000278:	4639      	mov	r1, r7
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f783 	clz	r7, r3
 8000282:	2f00      	cmp	r7, #0
 8000284:	d147      	bne.n	8000316 <__udivmoddi4+0x156>
 8000286:	428b      	cmp	r3, r1
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd0>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fa 	bhi.w	8000484 <__udivmoddi4+0x2c4>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb61 0303 	sbc.w	r3, r1, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e0      	beq.n	8000260 <__udivmoddi4+0xa0>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7dd      	b.n	8000260 <__udivmoddi4+0xa0>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xe8>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 808f 	bne.w	80003d0 <__udivmoddi4+0x210>
 80002b2:	1b49      	subs	r1, r1, r5
 80002b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002b8:	fa1f f885 	uxth.w	r8, r5
 80002bc:	2701      	movs	r7, #1
 80002be:	fbb1 fcfe 	udiv	ip, r1, lr
 80002c2:	0c23      	lsrs	r3, r4, #16
 80002c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80002c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002cc:	fb08 f10c 	mul.w	r1, r8, ip
 80002d0:	4299      	cmp	r1, r3
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0x124>
 80002d4:	18eb      	adds	r3, r5, r3
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0x122>
 80002dc:	4299      	cmp	r1, r3
 80002de:	f200 80cd 	bhi.w	800047c <__udivmoddi4+0x2bc>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1a59      	subs	r1, r3, r1
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80002f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x14c>
 80002fc:	192c      	adds	r4, r5, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x14a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80b6 	bhi.w	8000476 <__udivmoddi4+0x2b6>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e79f      	b.n	8000256 <__udivmoddi4+0x96>
 8000316:	f1c7 0c20 	rsb	ip, r7, #32
 800031a:	40bb      	lsls	r3, r7
 800031c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000320:	ea4e 0e03 	orr.w	lr, lr, r3
 8000324:	fa01 f407 	lsl.w	r4, r1, r7
 8000328:	fa20 f50c 	lsr.w	r5, r0, ip
 800032c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000330:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000334:	4325      	orrs	r5, r4
 8000336:	fbb3 f9f8 	udiv	r9, r3, r8
 800033a:	0c2c      	lsrs	r4, r5, #16
 800033c:	fb08 3319 	mls	r3, r8, r9, r3
 8000340:	fa1f fa8e 	uxth.w	sl, lr
 8000344:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000348:	fb09 f40a 	mul.w	r4, r9, sl
 800034c:	429c      	cmp	r4, r3
 800034e:	fa02 f207 	lsl.w	r2, r2, r7
 8000352:	fa00 f107 	lsl.w	r1, r0, r7
 8000356:	d90b      	bls.n	8000370 <__udivmoddi4+0x1b0>
 8000358:	eb1e 0303 	adds.w	r3, lr, r3
 800035c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000360:	f080 8087 	bcs.w	8000472 <__udivmoddi4+0x2b2>
 8000364:	429c      	cmp	r4, r3
 8000366:	f240 8084 	bls.w	8000472 <__udivmoddi4+0x2b2>
 800036a:	f1a9 0902 	sub.w	r9, r9, #2
 800036e:	4473      	add	r3, lr
 8000370:	1b1b      	subs	r3, r3, r4
 8000372:	b2ad      	uxth	r5, r5
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000380:	fb00 fa0a 	mul.w	sl, r0, sl
 8000384:	45a2      	cmp	sl, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x1da>
 8000388:	eb1e 0404 	adds.w	r4, lr, r4
 800038c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000390:	d26b      	bcs.n	800046a <__udivmoddi4+0x2aa>
 8000392:	45a2      	cmp	sl, r4
 8000394:	d969      	bls.n	800046a <__udivmoddi4+0x2aa>
 8000396:	3802      	subs	r0, #2
 8000398:	4474      	add	r4, lr
 800039a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800039e:	fba0 8902 	umull	r8, r9, r0, r2
 80003a2:	eba4 040a 	sub.w	r4, r4, sl
 80003a6:	454c      	cmp	r4, r9
 80003a8:	46c2      	mov	sl, r8
 80003aa:	464b      	mov	r3, r9
 80003ac:	d354      	bcc.n	8000458 <__udivmoddi4+0x298>
 80003ae:	d051      	beq.n	8000454 <__udivmoddi4+0x294>
 80003b0:	2e00      	cmp	r6, #0
 80003b2:	d069      	beq.n	8000488 <__udivmoddi4+0x2c8>
 80003b4:	ebb1 050a 	subs.w	r5, r1, sl
 80003b8:	eb64 0403 	sbc.w	r4, r4, r3
 80003bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003c0:	40fd      	lsrs	r5, r7
 80003c2:	40fc      	lsrs	r4, r7
 80003c4:	ea4c 0505 	orr.w	r5, ip, r5
 80003c8:	e9c6 5400 	strd	r5, r4, [r6]
 80003cc:	2700      	movs	r7, #0
 80003ce:	e747      	b.n	8000260 <__udivmoddi4+0xa0>
 80003d0:	f1c2 0320 	rsb	r3, r2, #32
 80003d4:	fa20 f703 	lsr.w	r7, r0, r3
 80003d8:	4095      	lsls	r5, r2
 80003da:	fa01 f002 	lsl.w	r0, r1, r2
 80003de:	fa21 f303 	lsr.w	r3, r1, r3
 80003e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e6:	4338      	orrs	r0, r7
 80003e8:	0c01      	lsrs	r1, r0, #16
 80003ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80003ee:	fa1f f885 	uxth.w	r8, r5
 80003f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80003f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fa:	fb07 f308 	mul.w	r3, r7, r8
 80003fe:	428b      	cmp	r3, r1
 8000400:	fa04 f402 	lsl.w	r4, r4, r2
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x256>
 8000406:	1869      	adds	r1, r5, r1
 8000408:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800040c:	d22f      	bcs.n	800046e <__udivmoddi4+0x2ae>
 800040e:	428b      	cmp	r3, r1
 8000410:	d92d      	bls.n	800046e <__udivmoddi4+0x2ae>
 8000412:	3f02      	subs	r7, #2
 8000414:	4429      	add	r1, r5
 8000416:	1acb      	subs	r3, r1, r3
 8000418:	b281      	uxth	r1, r0
 800041a:	fbb3 f0fe 	udiv	r0, r3, lr
 800041e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000422:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000426:	fb00 f308 	mul.w	r3, r0, r8
 800042a:	428b      	cmp	r3, r1
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x27e>
 800042e:	1869      	adds	r1, r5, r1
 8000430:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000434:	d217      	bcs.n	8000466 <__udivmoddi4+0x2a6>
 8000436:	428b      	cmp	r3, r1
 8000438:	d915      	bls.n	8000466 <__udivmoddi4+0x2a6>
 800043a:	3802      	subs	r0, #2
 800043c:	4429      	add	r1, r5
 800043e:	1ac9      	subs	r1, r1, r3
 8000440:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000444:	e73b      	b.n	80002be <__udivmoddi4+0xfe>
 8000446:	4637      	mov	r7, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e709      	b.n	8000260 <__udivmoddi4+0xa0>
 800044c:	4607      	mov	r7, r0
 800044e:	e6e7      	b.n	8000220 <__udivmoddi4+0x60>
 8000450:	4618      	mov	r0, r3
 8000452:	e6fb      	b.n	800024c <__udivmoddi4+0x8c>
 8000454:	4541      	cmp	r1, r8
 8000456:	d2ab      	bcs.n	80003b0 <__udivmoddi4+0x1f0>
 8000458:	ebb8 0a02 	subs.w	sl, r8, r2
 800045c:	eb69 020e 	sbc.w	r2, r9, lr
 8000460:	3801      	subs	r0, #1
 8000462:	4613      	mov	r3, r2
 8000464:	e7a4      	b.n	80003b0 <__udivmoddi4+0x1f0>
 8000466:	4660      	mov	r0, ip
 8000468:	e7e9      	b.n	800043e <__udivmoddi4+0x27e>
 800046a:	4618      	mov	r0, r3
 800046c:	e795      	b.n	800039a <__udivmoddi4+0x1da>
 800046e:	4667      	mov	r7, ip
 8000470:	e7d1      	b.n	8000416 <__udivmoddi4+0x256>
 8000472:	4681      	mov	r9, r0
 8000474:	e77c      	b.n	8000370 <__udivmoddi4+0x1b0>
 8000476:	3802      	subs	r0, #2
 8000478:	442c      	add	r4, r5
 800047a:	e747      	b.n	800030c <__udivmoddi4+0x14c>
 800047c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000480:	442b      	add	r3, r5
 8000482:	e72f      	b.n	80002e4 <__udivmoddi4+0x124>
 8000484:	4638      	mov	r0, r7
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xda>
 8000488:	4637      	mov	r7, r6
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0xa0>

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop

08000490 <begin>:


float temperature;
//uint16_t IR, RED;

void begin(void){
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0

	  uint8_t temp = 0;
 8000496:	2300      	movs	r3, #0
 8000498:	717b      	strb	r3, [r7, #5]
	  uint8_t mode = 0x03; // [0,7]
 800049a:	2303      	movs	r3, #3
 800049c:	73fb      	strb	r3, [r7, #15]
	  bool temperature = true;
 800049e:	2301      	movs	r3, #1
 80004a0:	73bb      	strb	r3, [r7, #14]
	  bool spo2_hs = true;
 80004a2:	2301      	movs	r3, #1
 80004a4:	737b      	strb	r3, [r7, #13]
	  uint8_t spo2_sr = 6; // [0,7]
 80004a6:	2306      	movs	r3, #6
 80004a8:	733b      	strb	r3, [r7, #12]
	  uint8_t pulse_width = 3; // [0,3]
 80004aa:	2303      	movs	r3, #3
 80004ac:	72fb      	strb	r3, [r7, #11]
	  uint8_t red_level = 0x0F; // 0b00001111; // [0,15]
 80004ae:	230f      	movs	r3, #15
 80004b0:	72bb      	strb	r3, [r7, #10]
	  uint8_t ir_level = 0x0F; // [0,15]
 80004b2:	230f      	movs	r3, #15
 80004b4:	727b      	strb	r3, [r7, #9]
	  uint8_t hr_ready_int = true;
 80004b6:	2301      	movs	r3, #1
 80004b8:	723b      	strb	r3, [r7, #8]
	  uint8_t spo2_ready_int = true;
 80004ba:	2301      	movs	r3, #1
 80004bc:	71fb      	strb	r3, [r7, #7]
	  uint8_t temp_ready_int = true;
 80004be:	2301      	movs	r3, #1
 80004c0:	71bb      	strb	r3, [r7, #6]


	  //Reset
	  read_byte( MAX30100_MODE_CONFIG, &temp );
 80004c2:	1d7b      	adds	r3, r7, #5
 80004c4:	4619      	mov	r1, r3
 80004c6:	2006      	movs	r0, #6
 80004c8:	f000 f976 	bl	80007b8 <read_byte>

	  temp |= (1<<6);
 80004cc:	797b      	ldrb	r3, [r7, #5]
 80004ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	717b      	strb	r3, [r7, #5]
	  write_byte(MAX30100_MODE_CONFIG, temp);
 80004d6:	797b      	ldrb	r3, [r7, #5]
 80004d8:	4619      	mov	r1, r3
 80004da:	2006      	movs	r0, #6
 80004dc:	f000 f950 	bl	8000780 <write_byte>

	  //Wait for the end of reset state/process
	  do
	  {
		read_byte(MAX30100_MODE_CONFIG, &temp);
 80004e0:	1d7b      	adds	r3, r7, #5
 80004e2:	4619      	mov	r1, r3
 80004e4:	2006      	movs	r0, #6
 80004e6:	f000 f967 	bl	80007b8 <read_byte>
	    temp &= (1<<6);
 80004ea:	797b      	ldrb	r3, [r7, #5]
 80004ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	717b      	strb	r3, [r7, #5]
	  }
	  while (temp != 0);
 80004f4:	797b      	ldrb	r3, [r7, #5]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d1f2      	bne.n	80004e0 <begin+0x50>

	  //Mode Configuration
	  read_byte( MAX30100_MODE_CONFIG, &temp );
 80004fa:	1d7b      	adds	r3, r7, #5
 80004fc:	4619      	mov	r1, r3
 80004fe:	2006      	movs	r0, #6
 8000500:	f000 f95a 	bl	80007b8 <read_byte>

	  temp |= mode;
 8000504:	797a      	ldrb	r2, [r7, #5]
 8000506:	7bfb      	ldrb	r3, [r7, #15]
 8000508:	4313      	orrs	r3, r2
 800050a:	b2db      	uxtb	r3, r3
 800050c:	717b      	strb	r3, [r7, #5]
	  write_byte(MAX30100_MODE_CONFIG, temp);
 800050e:	797b      	ldrb	r3, [r7, #5]
 8000510:	4619      	mov	r1, r3
 8000512:	2006      	movs	r0, #6
 8000514:	f000 f934 	bl	8000780 <write_byte>
	  temp = 0;
 8000518:	2300      	movs	r3, #0
 800051a:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_MODE_CONFIG, &temp ); //check
 800051c:	1d7b      	adds	r3, r7, #5
 800051e:	4619      	mov	r1, r3
 8000520:	2006      	movs	r0, #6
 8000522:	f000 f949 	bl	80007b8 <read_byte>

	  //Temperature sensor activation
	  read_byte( MAX30100_MODE_CONFIG, &temp );
 8000526:	1d7b      	adds	r3, r7, #5
 8000528:	4619      	mov	r1, r3
 800052a:	2006      	movs	r0, #6
 800052c:	f000 f944 	bl	80007b8 <read_byte>

	  if ( temperature == true )
 8000530:	7bbb      	ldrb	r3, [r7, #14]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d005      	beq.n	8000542 <begin+0xb2>
	    temp |= (1<<3);
 8000536:	797b      	ldrb	r3, [r7, #5]
 8000538:	f043 0308 	orr.w	r3, r3, #8
 800053c:	b2db      	uxtb	r3, r3
 800053e:	717b      	strb	r3, [r7, #5]
 8000540:	e004      	b.n	800054c <begin+0xbc>
	  else
	    temp &= ~(1<<3);
 8000542:	797b      	ldrb	r3, [r7, #5]
 8000544:	f023 0308 	bic.w	r3, r3, #8
 8000548:	b2db      	uxtb	r3, r3
 800054a:	717b      	strb	r3, [r7, #5]

	  write_byte(MAX30100_MODE_CONFIG, temp);
 800054c:	797b      	ldrb	r3, [r7, #5]
 800054e:	4619      	mov	r1, r3
 8000550:	2006      	movs	r0, #6
 8000552:	f000 f915 	bl	8000780 <write_byte>
	  temp = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_MODE_CONFIG, &temp ); //check
 800055a:	1d7b      	adds	r3, r7, #5
 800055c:	4619      	mov	r1, r3
 800055e:	2006      	movs	r0, #6
 8000560:	f000 f92a 	bl	80007b8 <read_byte>

	  //SPO2 high resolution activation
	  read_byte( MAX30100_SPO2_CONFIG, &temp );
 8000564:	1d7b      	adds	r3, r7, #5
 8000566:	4619      	mov	r1, r3
 8000568:	2007      	movs	r0, #7
 800056a:	f000 f925 	bl	80007b8 <read_byte>

	  if (spo2_hs == true)
 800056e:	7b7b      	ldrb	r3, [r7, #13]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d005      	beq.n	8000580 <begin+0xf0>
	    temp |= (1<<6);
 8000574:	797b      	ldrb	r3, [r7, #5]
 8000576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800057a:	b2db      	uxtb	r3, r3
 800057c:	717b      	strb	r3, [r7, #5]
 800057e:	e004      	b.n	800058a <begin+0xfa>

	  else
	    temp &= ~(1<<6);
 8000580:	797b      	ldrb	r3, [r7, #5]
 8000582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000586:	b2db      	uxtb	r3, r3
 8000588:	717b      	strb	r3, [r7, #5]
	  write_byte(MAX30100_SPO2_CONFIG, temp);
 800058a:	797b      	ldrb	r3, [r7, #5]
 800058c:	4619      	mov	r1, r3
 800058e:	2007      	movs	r0, #7
 8000590:	f000 f8f6 	bl	8000780 <write_byte>

	  //SPO2 sample rate configuration
	  read_byte( MAX30100_SPO2_CONFIG, &temp );
 8000594:	1d7b      	adds	r3, r7, #5
 8000596:	4619      	mov	r1, r3
 8000598:	2007      	movs	r0, #7
 800059a:	f000 f90d 	bl	80007b8 <read_byte>
	  temp |= (spo2_sr << 2);
 800059e:	7b3b      	ldrb	r3, [r7, #12]
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	b25a      	sxtb	r2, r3
 80005a4:	797b      	ldrb	r3, [r7, #5]
 80005a6:	b25b      	sxtb	r3, r3
 80005a8:	4313      	orrs	r3, r2
 80005aa:	b25b      	sxtb	r3, r3
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	717b      	strb	r3, [r7, #5]

	  write_byte( MAX30100_SPO2_CONFIG, temp );
 80005b0:	797b      	ldrb	r3, [r7, #5]
 80005b2:	4619      	mov	r1, r3
 80005b4:	2007      	movs	r0, #7
 80005b6:	f000 f8e3 	bl	8000780 <write_byte>
	  temp = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_SPO2_CONFIG, &temp ); //check
 80005be:	1d7b      	adds	r3, r7, #5
 80005c0:	4619      	mov	r1, r3
 80005c2:	2007      	movs	r0, #7
 80005c4:	f000 f8f8 	bl	80007b8 <read_byte>

	  //LED pulse width configuration
	  read_byte( MAX30100_SPO2_CONFIG, &temp );
 80005c8:	1d7b      	adds	r3, r7, #5
 80005ca:	4619      	mov	r1, r3
 80005cc:	2007      	movs	r0, #7
 80005ce:	f000 f8f3 	bl	80007b8 <read_byte>

	  temp |= pulse_width;
 80005d2:	797a      	ldrb	r2, [r7, #5]
 80005d4:	7afb      	ldrb	r3, [r7, #11]
 80005d6:	4313      	orrs	r3, r2
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	717b      	strb	r3, [r7, #5]
	  write_byte(MAX30100_SPO2_CONFIG, temp);
 80005dc:	797b      	ldrb	r3, [r7, #5]
 80005de:	4619      	mov	r1, r3
 80005e0:	2007      	movs	r0, #7
 80005e2:	f000 f8cd 	bl	8000780 <write_byte>
	  temp = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_SPO2_CONFIG, &temp ); //check
 80005ea:	1d7b      	adds	r3, r7, #5
 80005ec:	4619      	mov	r1, r3
 80005ee:	2007      	movs	r0, #7
 80005f0:	f000 f8e2 	bl	80007b8 <read_byte>

	  //LED red current level
	  read_byte( MAX30100_LED_CONFIG, &temp );
 80005f4:	1d7b      	adds	r3, r7, #5
 80005f6:	4619      	mov	r1, r3
 80005f8:	2009      	movs	r0, #9
 80005fa:	f000 f8dd 	bl	80007b8 <read_byte>

	  temp |= (red_level << 4);
 80005fe:	7abb      	ldrb	r3, [r7, #10]
 8000600:	011b      	lsls	r3, r3, #4
 8000602:	b25a      	sxtb	r2, r3
 8000604:	797b      	ldrb	r3, [r7, #5]
 8000606:	b25b      	sxtb	r3, r3
 8000608:	4313      	orrs	r3, r2
 800060a:	b25b      	sxtb	r3, r3
 800060c:	b2db      	uxtb	r3, r3
 800060e:	717b      	strb	r3, [r7, #5]
	  write_byte(MAX30100_LED_CONFIG, temp);
 8000610:	797b      	ldrb	r3, [r7, #5]
 8000612:	4619      	mov	r1, r3
 8000614:	2009      	movs	r0, #9
 8000616:	f000 f8b3 	bl	8000780 <write_byte>
	  temp = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_LED_CONFIG, &temp ); //check
 800061e:	1d7b      	adds	r3, r7, #5
 8000620:	4619      	mov	r1, r3
 8000622:	2009      	movs	r0, #9
 8000624:	f000 f8c8 	bl	80007b8 <read_byte>

	  //LED ir current level
	  read_byte( MAX30100_LED_CONFIG, &temp );
 8000628:	1d7b      	adds	r3, r7, #5
 800062a:	4619      	mov	r1, r3
 800062c:	2009      	movs	r0, #9
 800062e:	f000 f8c3 	bl	80007b8 <read_byte>

	  temp |= ir_level;
 8000632:	797a      	ldrb	r2, [r7, #5]
 8000634:	7a7b      	ldrb	r3, [r7, #9]
 8000636:	4313      	orrs	r3, r2
 8000638:	b2db      	uxtb	r3, r3
 800063a:	717b      	strb	r3, [r7, #5]
	  write_byte(MAX30100_LED_CONFIG, temp);
 800063c:	797b      	ldrb	r3, [r7, #5]
 800063e:	4619      	mov	r1, r3
 8000640:	2009      	movs	r0, #9
 8000642:	f000 f89d 	bl	8000780 <write_byte>
	  temp = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_LED_CONFIG, &temp ); //check
 800064a:	1d7b      	adds	r3, r7, #5
 800064c:	4619      	mov	r1, r3
 800064e:	2009      	movs	r0, #9
 8000650:	f000 f8b2 	bl	80007b8 <read_byte>

	  //Heart rate data ready interruption
	  read_byte( MAX30100_INT_ENABLE, &temp );
 8000654:	1d7b      	adds	r3, r7, #5
 8000656:	4619      	mov	r1, r3
 8000658:	2001      	movs	r0, #1
 800065a:	f000 f8ad 	bl	80007b8 <read_byte>
	  if (hr_ready_int == true)
 800065e:	7a3b      	ldrb	r3, [r7, #8]
 8000660:	2b01      	cmp	r3, #1
 8000662:	d105      	bne.n	8000670 <begin+0x1e0>
	    temp |= (1<<5);
 8000664:	797b      	ldrb	r3, [r7, #5]
 8000666:	f043 0320 	orr.w	r3, r3, #32
 800066a:	b2db      	uxtb	r3, r3
 800066c:	717b      	strb	r3, [r7, #5]
 800066e:	e004      	b.n	800067a <begin+0x1ea>
	  else
	    temp &= ~(1<<5);
 8000670:	797b      	ldrb	r3, [r7, #5]
 8000672:	f023 0320 	bic.w	r3, r3, #32
 8000676:	b2db      	uxtb	r3, r3
 8000678:	717b      	strb	r3, [r7, #5]

	  write_byte(MAX30100_INT_ENABLE, temp);
 800067a:	797b      	ldrb	r3, [r7, #5]
 800067c:	4619      	mov	r1, r3
 800067e:	2001      	movs	r0, #1
 8000680:	f000 f87e 	bl	8000780 <write_byte>
	  temp = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_INT_ENABLE, &temp ); //check
 8000688:	1d7b      	adds	r3, r7, #5
 800068a:	4619      	mov	r1, r3
 800068c:	2001      	movs	r0, #1
 800068e:	f000 f893 	bl	80007b8 <read_byte>

	  //SPO2 data ready interruption
	  read_byte( MAX30100_INT_ENABLE, &temp );
 8000692:	1d7b      	adds	r3, r7, #5
 8000694:	4619      	mov	r1, r3
 8000696:	2001      	movs	r0, #1
 8000698:	f000 f88e 	bl	80007b8 <read_byte>
	  if (spo2_ready_int == true)
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d105      	bne.n	80006ae <begin+0x21e>
	    temp |= (1<<4);
 80006a2:	797b      	ldrb	r3, [r7, #5]
 80006a4:	f043 0310 	orr.w	r3, r3, #16
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	717b      	strb	r3, [r7, #5]
 80006ac:	e004      	b.n	80006b8 <begin+0x228>
	  else
	    temp &= ~(1<<4);
 80006ae:	797b      	ldrb	r3, [r7, #5]
 80006b0:	f023 0310 	bic.w	r3, r3, #16
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	717b      	strb	r3, [r7, #5]

	  write_byte(MAX30100_INT_ENABLE, temp);
 80006b8:	797b      	ldrb	r3, [r7, #5]
 80006ba:	4619      	mov	r1, r3
 80006bc:	2001      	movs	r0, #1
 80006be:	f000 f85f 	bl	8000780 <write_byte>
	  temp = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_INT_ENABLE, &temp ); //check
 80006c6:	1d7b      	adds	r3, r7, #5
 80006c8:	4619      	mov	r1, r3
 80006ca:	2001      	movs	r0, #1
 80006cc:	f000 f874 	bl	80007b8 <read_byte>

	  //Temperature data ready interruption
	  read_byte(MAX30100_INT_ENABLE, &temp );
 80006d0:	1d7b      	adds	r3, r7, #5
 80006d2:	4619      	mov	r1, r3
 80006d4:	2001      	movs	r0, #1
 80006d6:	f000 f86f 	bl	80007b8 <read_byte>
	  if (temp_ready_int == true)
 80006da:	79bb      	ldrb	r3, [r7, #6]
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d105      	bne.n	80006ec <begin+0x25c>
	    temp |= (1<<6);
 80006e0:	797b      	ldrb	r3, [r7, #5]
 80006e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	717b      	strb	r3, [r7, #5]
 80006ea:	e004      	b.n	80006f6 <begin+0x266>
	  else
	    temp &= ~(1<<6);
 80006ec:	797b      	ldrb	r3, [r7, #5]
 80006ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	717b      	strb	r3, [r7, #5]

	  write_byte(MAX30100_INT_ENABLE, temp);
 80006f6:	797b      	ldrb	r3, [r7, #5]
 80006f8:	4619      	mov	r1, r3
 80006fa:	2001      	movs	r0, #1
 80006fc:	f000 f840 	bl	8000780 <write_byte>
	  temp = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	717b      	strb	r3, [r7, #5]
	  read_byte( MAX30100_INT_ENABLE, &temp ); //check
 8000704:	1d7b      	adds	r3, r7, #5
 8000706:	4619      	mov	r1, r3
 8000708:	2001      	movs	r0, #1
 800070a:	f000 f855 	bl	80007b8 <read_byte>
}
 800070e:	bf00      	nop
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <readFIFO>:


void readFIFO(uint16_t* RED, uint16_t* IR){
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af02      	add	r7, sp, #8
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6039      	str	r1, [r7, #0]
   /* Burst read four bytes from the FIFO
    * to obtain 16-bit ADC values for IR
    * and RED reflectance.
    */
	uint8_t data[4];
   data[0] = MAX30100_FIFO_DATA;
 8000722:	2305      	movs	r3, #5
 8000724:	733b      	strb	r3, [r7, #12]
   HAL_I2C_Master_Transmit(&hi2c3, MAX30100_ADDR, data, 1, 100);
 8000726:	f107 020c 	add.w	r2, r7, #12
 800072a:	2364      	movs	r3, #100	; 0x64
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	2301      	movs	r3, #1
 8000730:	21ae      	movs	r1, #174	; 0xae
 8000732:	4812      	ldr	r0, [pc, #72]	; (800077c <readFIFO+0x64>)
 8000734:	f002 ffc4 	bl	80036c0 <HAL_I2C_Master_Transmit>
   HAL_I2C_Master_Receive(&hi2c3, MAX30100_ADDR, data, 4, 1000); // Read four times from the FIFO
 8000738:	f107 020c 	add.w	r2, r7, #12
 800073c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	2304      	movs	r3, #4
 8000744:	21ae      	movs	r1, #174	; 0xae
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <readFIFO+0x64>)
 8000748:	f003 f8ae 	bl	80038a8 <HAL_I2C_Master_Receive>

   // Combine bytes to get the actual number
   IR[0] = (data[0]<<8) | data[1];
 800074c:	7b3b      	ldrb	r3, [r7, #12]
 800074e:	021b      	lsls	r3, r3, #8
 8000750:	b21a      	sxth	r2, r3
 8000752:	7b7b      	ldrb	r3, [r7, #13]
 8000754:	b21b      	sxth	r3, r3
 8000756:	4313      	orrs	r3, r2
 8000758:	b21b      	sxth	r3, r3
 800075a:	b29a      	uxth	r2, r3
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	801a      	strh	r2, [r3, #0]
   RED[0] = (data[2]<<8) | data[3];
 8000760:	7bbb      	ldrb	r3, [r7, #14]
 8000762:	021b      	lsls	r3, r3, #8
 8000764:	b21a      	sxth	r2, r3
 8000766:	7bfb      	ldrb	r3, [r7, #15]
 8000768:	b21b      	sxth	r3, r3
 800076a:	4313      	orrs	r3, r2
 800076c:	b21b      	sxth	r3, r3
 800076e:	b29a      	uxth	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	801a      	strh	r2, [r3, #0]
}
 8000774:	bf00      	nop
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000348 	.word	0x20000348

08000780 <write_byte>:
   HAL_I2C_Master_Receive(&hi2c3, MAX30100_ADDR, &tempFrac, 1, 100);

   temperature  = (float) tempFrac * 0.0625 + (int8_t) tempInt;
}

void write_byte(uint8_t reg, uint8_t data){
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af02      	add	r7, sp, #8
 8000786:	4603      	mov	r3, r0
 8000788:	460a      	mov	r2, r1
 800078a:	71fb      	strb	r3, [r7, #7]
 800078c:	4613      	mov	r3, r2
 800078e:	71bb      	strb	r3, [r7, #6]
   /*  Write to the register of a device. Note the char
    *  type must be used due to the MBED i2c functions
    */
   uint8_t transfer[2] = {reg, data};
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	733b      	strb	r3, [r7, #12]
 8000794:	79bb      	ldrb	r3, [r7, #6]
 8000796:	737b      	strb	r3, [r7, #13]
   HAL_I2C_Master_Transmit(&hi2c3, MAX30100_ADDR, transfer, 2, 100);
 8000798:	f107 020c 	add.w	r2, r7, #12
 800079c:	2364      	movs	r3, #100	; 0x64
 800079e:	9300      	str	r3, [sp, #0]
 80007a0:	2302      	movs	r3, #2
 80007a2:	21ae      	movs	r1, #174	; 0xae
 80007a4:	4803      	ldr	r0, [pc, #12]	; (80007b4 <write_byte+0x34>)
 80007a6:	f002 ff8b 	bl	80036c0 <HAL_I2C_Master_Transmit>
}
 80007aa:	bf00      	nop
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000348 	.word	0x20000348

080007b8 <read_byte>:

void read_byte(uint8_t reg, uint8_t* data){
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af02      	add	r7, sp, #8
 80007be:	4603      	mov	r3, r0
 80007c0:	6039      	str	r1, [r7, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]

	   HAL_I2C_Master_Transmit(&hi2c3, MAX30100_ADDR, &reg, 1, 100);
 80007c4:	1dfa      	adds	r2, r7, #7
 80007c6:	2364      	movs	r3, #100	; 0x64
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	2301      	movs	r3, #1
 80007cc:	21ae      	movs	r1, #174	; 0xae
 80007ce:	4807      	ldr	r0, [pc, #28]	; (80007ec <read_byte+0x34>)
 80007d0:	f002 ff76 	bl	80036c0 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c3, MAX30100_ADDR, data, 1, 100);
 80007d4:	2364      	movs	r3, #100	; 0x64
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	2301      	movs	r3, #1
 80007da:	683a      	ldr	r2, [r7, #0]
 80007dc:	21ae      	movs	r1, #174	; 0xae
 80007de:	4803      	ldr	r0, [pc, #12]	; (80007ec <read_byte+0x34>)
 80007e0:	f003 f862 	bl	80038a8 <HAL_I2C_Master_Receive>
}
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000348 	.word	0x20000348

080007f0 <writeByte>:
float q[4] = {1.0f, 0.0f, 0.0f, 0.0f};           // vector to hold quaternion
float eInt[3] = {0.0f, 0.0f, 0.0f};              // vector to hold integral error for Mahony method


void writeByte(uint8_t reg, uint8_t data)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	460a      	mov	r2, r1
 80007fa:	71fb      	strb	r3, [r7, #7]
 80007fc:	4613      	mov	r3, r2
 80007fe:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	73fb      	strb	r3, [r7, #15]
	//Enable CS
	_MPU9050_CS_ENBALE;
 8000804:	2200      	movs	r2, #0
 8000806:	2101      	movs	r1, #1
 8000808:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080c:	f002 fe8c 	bl	8003528 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&hspi1, &spiReg, 1, 100);
 8000810:	f107 010f 	add.w	r1, r7, #15
 8000814:	2364      	movs	r3, #100	; 0x64
 8000816:	2201      	movs	r2, #1
 8000818:	4809      	ldr	r0, [pc, #36]	; (8000840 <writeByte+0x50>)
 800081a:	f005 fc90 	bl	800613e <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 800081e:	1db9      	adds	r1, r7, #6
 8000820:	2364      	movs	r3, #100	; 0x64
 8000822:	2201      	movs	r2, #1
 8000824:	4806      	ldr	r0, [pc, #24]	; (8000840 <writeByte+0x50>)
 8000826:	f005 fc8a 	bl	800613e <HAL_SPI_Transmit>
	//Disable CS
	_MPU9050_CS_DISABLE;
 800082a:	2201      	movs	r2, #1
 800082c:	2101      	movs	r1, #1
 800082e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000832:	f002 fe79 	bl	8003528 <HAL_GPIO_WritePin>
}
 8000836:	bf00      	nop
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	2000041c 	.word	0x2000041c

08000844 <readByte>:

void readByte(uint8_t reg, uint8_t *dataR, uint8_t size)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	6039      	str	r1, [r7, #0]
 800084e:	71fb      	strb	r3, [r7, #7]
 8000850:	4613      	mov	r3, r2
 8000852:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800085a:	b2db      	uxtb	r3, r3
 800085c:	733b      	strb	r3, [r7, #12]
	//Enable CS
	_MPU9050_CS_ENBALE;
 800085e:	2200      	movs	r2, #0
 8000860:	2101      	movs	r1, #1
 8000862:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000866:	f002 fe5f 	bl	8003528 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&hspi1, spiBuf, 1, 100);
 800086a:	f107 010c 	add.w	r1, r7, #12
 800086e:	2364      	movs	r3, #100	; 0x64
 8000870:	2201      	movs	r2, #1
 8000872:	480a      	ldr	r0, [pc, #40]	; (800089c <readByte+0x58>)
 8000874:	f005 fc63 	bl	800613e <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Receive(&hspi1, dataR, size, 10000);
 8000878:	79bb      	ldrb	r3, [r7, #6]
 800087a:	b29a      	uxth	r2, r3
 800087c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000880:	6839      	ldr	r1, [r7, #0]
 8000882:	4806      	ldr	r0, [pc, #24]	; (800089c <readByte+0x58>)
 8000884:	f005 fdc1 	bl	800640a <HAL_SPI_Receive>
	//Disable CS
	_MPU9050_CS_DISABLE;
 8000888:	2201      	movs	r2, #1
 800088a:	2101      	movs	r1, #1
 800088c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000890:	f002 fe4a 	bl	8003528 <HAL_GPIO_WritePin>

}
 8000894:	bf00      	nop
 8000896:	3710      	adds	r7, #16
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	2000041c 	.word	0x2000041c

080008a0 <readAccelData>:
  }
}


void readAccelData(int16_t * destination)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  uint8_t rawData[6];  // x/y/z accel register data stored here

  readByte(ACCEL_XOUT_H, &rawData[0], 6);  // Read the six raw data registers into data array
 80008a8:	f107 0308 	add.w	r3, r7, #8
 80008ac:	2206      	movs	r2, #6
 80008ae:	4619      	mov	r1, r3
 80008b0:	203b      	movs	r0, #59	; 0x3b
 80008b2:	f7ff ffc7 	bl	8000844 <readByte>
  destination[0] = (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80008b6:	7a3b      	ldrb	r3, [r7, #8]
 80008b8:	021b      	lsls	r3, r3, #8
 80008ba:	b21a      	sxth	r2, r3
 80008bc:	7a7b      	ldrb	r3, [r7, #9]
 80008be:	b21b      	sxth	r3, r3
 80008c0:	4313      	orrs	r3, r2
 80008c2:	b21a      	sxth	r2, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	801a      	strh	r2, [r3, #0]
  destination[1] = (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;  
 80008c8:	7abb      	ldrb	r3, [r7, #10]
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	b219      	sxth	r1, r3
 80008ce:	7afb      	ldrb	r3, [r7, #11]
 80008d0:	b21a      	sxth	r2, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	3302      	adds	r3, #2
 80008d6:	430a      	orrs	r2, r1
 80008d8:	b212      	sxth	r2, r2
 80008da:	801a      	strh	r2, [r3, #0]
  destination[2] = (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ; 
 80008dc:	7b3b      	ldrb	r3, [r7, #12]
 80008de:	021b      	lsls	r3, r3, #8
 80008e0:	b219      	sxth	r1, r3
 80008e2:	7b7b      	ldrb	r3, [r7, #13]
 80008e4:	b21a      	sxth	r2, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	3304      	adds	r3, #4
 80008ea:	430a      	orrs	r2, r1
 80008ec:	b212      	sxth	r2, r2
 80008ee:	801a      	strh	r2, [r3, #0]
}
 80008f0:	bf00      	nop
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <initMPU9250>:
	writeByte( I2C_SLV0_CTRL, 0x81);
}


void initMPU9250()
{  
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
  // Initialize MPU9250 device
  // wake up device
  writeByte(PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 80008fe:	2100      	movs	r1, #0
 8000900:	206b      	movs	r0, #107	; 0x6b
 8000902:	f7ff ff75 	bl	80007f0 <writeByte>
  HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 8000906:	2064      	movs	r0, #100	; 0x64
 8000908:	f002 fae4 	bl	8002ed4 <HAL_Delay>

  // get stable time source
  writeByte(PWR_MGMT_1, 0x01);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 800090c:	2101      	movs	r1, #1
 800090e:	206b      	movs	r0, #107	; 0x6b
 8000910:	f7ff ff6e 	bl	80007f0 <writeByte>

  // Configure Gyro and Accelerometer
  // Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively; 
  // DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
  // Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
  writeByte(CONFIG, 0x03);
 8000914:	2103      	movs	r1, #3
 8000916:	201a      	movs	r0, #26
 8000918:	f7ff ff6a 	bl	80007f0 <writeByte>

  // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
  writeByte(SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
 800091c:	2104      	movs	r1, #4
 800091e:	2019      	movs	r0, #25
 8000920:	f7ff ff66 	bl	80007f0 <writeByte>
  //writeByte(GYRO_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
  //writeByte(GYRO_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
  //writeByte(GYRO_CONFIG, c | Gscale << 3); // Set full scale range for the gyro

  // Set accelerometer configuration
  readByte(ACCEL_CONFIG, &c, 1);
 8000924:	1dfb      	adds	r3, r7, #7
 8000926:	2201      	movs	r2, #1
 8000928:	4619      	mov	r1, r3
 800092a:	201c      	movs	r0, #28
 800092c:	f7ff ff8a 	bl	8000844 <readByte>
  writeByte(ACCEL_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	f003 031f 	and.w	r3, r3, #31
 8000936:	b2db      	uxtb	r3, r3
 8000938:	4619      	mov	r1, r3
 800093a:	201c      	movs	r0, #28
 800093c:	f7ff ff58 	bl	80007f0 <writeByte>
  writeByte(ACCEL_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	f023 0318 	bic.w	r3, r3, #24
 8000946:	b2db      	uxtb	r3, r3
 8000948:	4619      	mov	r1, r3
 800094a:	201c      	movs	r0, #28
 800094c:	f7ff ff50 	bl	80007f0 <writeByte>
  writeByte(ACCEL_CONFIG, c | Ascale << 3); // Set full scale range for the accelerometer
 8000950:	4b29      	ldr	r3, [pc, #164]	; (80009f8 <initMPU9250+0x100>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	b25a      	sxtb	r2, r3
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	b25b      	sxtb	r3, r3
 800095c:	4313      	orrs	r3, r2
 800095e:	b25b      	sxtb	r3, r3
 8000960:	b2db      	uxtb	r3, r3
 8000962:	4619      	mov	r1, r3
 8000964:	201c      	movs	r0, #28
 8000966:	f7ff ff43 	bl	80007f0 <writeByte>

  // Set accelerometer sample rate configuration
  // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
  // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
  readByte(ACCEL_CONFIG2, &c, 1);
 800096a:	1dfb      	adds	r3, r7, #7
 800096c:	2201      	movs	r2, #1
 800096e:	4619      	mov	r1, r3
 8000970:	201d      	movs	r0, #29
 8000972:	f7ff ff67 	bl	8000844 <readByte>
  writeByte(ACCEL_CONFIG2, c & ~0x0F); // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	f023 030f 	bic.w	r3, r3, #15
 800097c:	b2db      	uxtb	r3, r3
 800097e:	4619      	mov	r1, r3
 8000980:	201d      	movs	r0, #29
 8000982:	f7ff ff35 	bl	80007f0 <writeByte>
  //writeByte(ACCEL_CONFIG2, c | 0x03); // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
  writeByte(ACCEL_CONFIG2, c | 0x0B); // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	f043 030b 	orr.w	r3, r3, #11
 800098c:	b2db      	uxtb	r3, r3
 800098e:	4619      	mov	r1, r3
 8000990:	201d      	movs	r0, #29
 8000992:	f7ff ff2d 	bl	80007f0 <writeByte>
  // but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

  // Configure Interrupts and Bypass Enable
  // Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips 
  // can join the I2C bus and all can be controlled by the Arduino as master
  writeByte(INT_PIN_CFG, 0x22);
 8000996:	2122      	movs	r1, #34	; 0x22
 8000998:	2037      	movs	r0, #55	; 0x37
 800099a:	f7ff ff29 	bl	80007f0 <writeByte>
  writeByte(INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 800099e:	2101      	movs	r1, #1
 80009a0:	2038      	movs	r0, #56	; 0x38
 80009a2:	f7ff ff25 	bl	80007f0 <writeByte>

  // Power off gyro
  readByte(PWR_MGMT_2, &c, 1);
 80009a6:	1dfb      	adds	r3, r7, #7
 80009a8:	2201      	movs	r2, #1
 80009aa:	4619      	mov	r1, r3
 80009ac:	206c      	movs	r0, #108	; 0x6c
 80009ae:	f7ff ff49 	bl	8000844 <readByte>
  c |= 0x07;
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	f043 0307 	orr.w	r3, r3, #7
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	71fb      	strb	r3, [r7, #7]
  c &= 0xC7;
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	71fb      	strb	r3, [r7, #7]
  writeByte(PWR_MGMT_2, c); // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	4619      	mov	r1, r3
 80009ca:	206c      	movs	r0, #108	; 0x6c
 80009cc:	f7ff ff10 	bl	80007f0 <writeByte>

  //Power off temperature
  readByte(PWR_MGMT_1, &c, 1);
 80009d0:	1dfb      	adds	r3, r7, #7
 80009d2:	2201      	movs	r2, #1
 80009d4:	4619      	mov	r1, r3
 80009d6:	206b      	movs	r0, #107	; 0x6b
 80009d8:	f7ff ff34 	bl	8000844 <readByte>
  c |= 0x08;
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	f043 0308 	orr.w	r3, r3, #8
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	71fb      	strb	r3, [r7, #7]
  writeByte(PWR_MGMT_1, c); // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	4619      	mov	r1, r3
 80009ea:	206b      	movs	r0, #107	; 0x6b
 80009ec:	f7ff ff00 	bl	80007f0 <writeByte>

}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	200001e0 	.word	0x200001e0

080009fc <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a08:	689b      	ldr	r3, [r3, #8]
 8000a0a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000a0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	608b      	str	r3, [r1, #8]
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000a28:	f000 f80a 	bl	8000a40 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000a2c:	4903      	ldr	r1, [pc, #12]	; (8000a3c <APPE_Init+0x18>)
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f000 fd78 	bl	8001524 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000a34:	f000 f80e 	bl	8000a54 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000a38:	bf00      	nop
}
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000394 	.word	0x20000394

08000a40 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000a44:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000a48:	f7ff ffd8 	bl	80009fc <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 8000a4c:	f001 fbb8 	bl	80021c0 <UTIL_LPM_Init>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8000a50:	bf00      	nop
}
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b088      	sub	sp, #32
 8000a58:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000a5a:	f009 fd4d 	bl	800a4f8 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 8000a5e:	4a11      	ldr	r2, [pc, #68]	; (8000aa4 <appe_Tl_Init+0x50>)
 8000a60:	2100      	movs	r1, #0
 8000a62:	2080      	movs	r0, #128	; 0x80
 8000a64:	f001 fd26 	bl	80024b4 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <appe_Tl_Init+0x54>)
 8000a6a:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <appe_Tl_Init+0x58>)
 8000a6e:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000a70:	463b      	mov	r3, r7
 8000a72:	4619      	mov	r1, r3
 8000a74:	480e      	ldr	r0, [pc, #56]	; (8000ab0 <appe_Tl_Init+0x5c>)
 8000a76:	f009 fa4b 	bl	8009f10 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <appe_Tl_Init+0x60>)
 8000a7c:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <appe_Tl_Init+0x64>)
 8000a80:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <appe_Tl_Init+0x68>)
 8000a84:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000a86:	f240 533c 	movw	r3, #1340	; 0x53c
 8000a8a:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000a8c:	f107 0308 	add.w	r3, r7, #8
 8000a90:	4618      	mov	r0, r3
 8000a92:	f009 fe3f 	bl	800a714 <TL_MM_Init>

  TL_Enable();
 8000a96:	f009 fd29 	bl	800a4ec <TL_Enable>

  return;
 8000a9a:	bf00      	nop
}
 8000a9c:	3720      	adds	r7, #32
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	08009f49 	.word	0x08009f49
 8000aa8:	20030700 	.word	0x20030700
 8000aac:	08000ac1 	.word	0x08000ac1
 8000ab0:	08000ad7 	.word	0x08000ad7
 8000ab4:	20030918 	.word	0x20030918
 8000ab8:	2003080c 	.word	0x2003080c
 8000abc:	200301c4 	.word	0x200301c4

08000ac0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000aca:	bf00      	nop
}
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <APPE_SysUserEvtRx>:

static void APPE_SysUserEvtRx( void * pPayload )
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b082      	sub	sp, #8
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8000ade:	f009 fe89 	bl	800a7f4 <TL_TRACES_Init>

  APP_BLE_Init( );
 8000ae2:	f009 fee1 	bl	800a8a8 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	2001      	movs	r0, #1
 8000aea:	f001 fb7b 	bl	80021e4 <UTIL_LPM_SetOffMode>
  return;
 8000aee:	bf00      	nop
}
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
 8000afa:	f001 fba1 	bl	8002240 <UTIL_LPM_EnterLowPower>
#endif
  return;
 8000afe:	bf00      	nop
}
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b082      	sub	sp, #8
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
 8000b0a:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000b0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b10:	f001 fbf4 	bl	80022fc <UTIL_SEQ_Run>
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000b24:	2100      	movs	r1, #0
 8000b26:	2080      	movs	r0, #128	; 0x80
 8000b28:	f001 fce4 	bl	80024f4 <UTIL_SEQ_SetTask>
  return;
 8000b2c:	bf00      	nop
}
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000b3c:	2002      	movs	r0, #2
 8000b3e:	f001 fd3f 	bl	80025c0 <UTIL_SEQ_SetEvt>
  return;
 8000b42:	bf00      	nop
}
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000b52:	2002      	movs	r0, #2
 8000b54:	f001 fd52 	bl	80025fc <UTIL_SEQ_WaitEvt>
  return;
 8000b58:	bf00      	nop
}
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4013      	ands	r3, r2
 8000b82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b84:	68fb      	ldr	r3, [r7, #12]
}
 8000b86:	bf00      	nop
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
	...

08000b94 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba8:	2004      	movs	r0, #4
 8000baa:	f7ff ffd9 	bl	8000b60 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bae:	2080      	movs	r0, #128	; 0x80
 8000bb0:	f7ff ffd6 	bl	8000b60 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb4:	2002      	movs	r0, #2
 8000bb6:	f7ff ffd3 	bl	8000b60 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	2001      	movs	r0, #1
 8000bbc:	f7ff ffd0 	bl	8000b60 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bc0:	2010      	movs	r0, #16
 8000bc2:	f7ff ffcd 	bl	8000b60 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc6:	2008      	movs	r0, #8
 8000bc8:	f7ff ffca 	bl	8000b60 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MPU9050_CS_Pin|LIS3DH_CS_Pin, GPIO_PIN_SET);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	2105      	movs	r1, #5
 8000bd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd4:	f002 fca8 	bl	8003528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2123      	movs	r1, #35	; 0x23
 8000bdc:	4839      	ldr	r0, [pc, #228]	; (8000cc4 <MX_GPIO_Init+0x130>)
 8000bde:	f002 fca3 	bl	8003528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000be2:	2308      	movs	r3, #8
 8000be4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000be6:	2303      	movs	r3, #3
 8000be8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4835      	ldr	r0, [pc, #212]	; (8000cc8 <MX_GPIO_Init+0x134>)
 8000bf4:	f002 fb28 	bl	8003248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 PB2 PB10 
                           PB11 PB12 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_2|GPIO_PIN_10 
 8000bf8:	f641 7314 	movw	r3, #7956	; 0x1f14
 8000bfc:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	4619      	mov	r1, r3
 8000c0a:	482e      	ldr	r0, [pc, #184]	; (8000cc4 <MX_GPIO_Init+0x130>)
 8000c0c:	f002 fb1c 	bl	8003248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 PC5 PC6 
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6 
 8000c10:	f641 436c 	movw	r3, #7276	; 0x1c6c
 8000c14:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c16:	2303      	movs	r3, #3
 8000c18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	4619      	mov	r1, r3
 8000c22:	482a      	ldr	r0, [pc, #168]	; (8000ccc <MX_GPIO_Init+0x138>)
 8000c24:	f002 fb10 	bl	8003248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MPU9050_CS_Pin|LIS3DH_CS_Pin;
 8000c28:	2305      	movs	r3, #5
 8000c2a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c34:	2303      	movs	r3, #3
 8000c36:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c40:	f002 fb02 	bl	8003248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA8 
                           PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8 
 8000c44:	f248 7338 	movw	r3, #34616	; 0x8738
 8000c48:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	4619      	mov	r1, r3
 8000c56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5a:	f002 faf5 	bl	8003248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c5e:	2310      	movs	r3, #16
 8000c60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4817      	ldr	r0, [pc, #92]	; (8000ccc <MX_GPIO_Init+0x138>)
 8000c70:	f002 faea 	bl	8003248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin;
 8000c74:	2323      	movs	r3, #35	; 0x23
 8000c76:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	4619      	mov	r1, r3
 8000c88:	480e      	ldr	r0, [pc, #56]	; (8000cc4 <MX_GPIO_Init+0x130>)
 8000c8a:	f002 fadd 	bl	8003248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c8e:	2310      	movs	r3, #16
 8000c90:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c92:	2303      	movs	r3, #3
 8000c94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480c      	ldr	r0, [pc, #48]	; (8000cd0 <MX_GPIO_Init+0x13c>)
 8000ca0:	f002 fad2 	bl	8003248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4807      	ldr	r0, [pc, #28]	; (8000cd4 <MX_GPIO_Init+0x140>)
 8000cb6:	f002 fac7 	bl	8003248 <HAL_GPIO_Init>

}
 8000cba:	bf00      	nop
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	48000400 	.word	0x48000400
 8000cc8:	48001c00 	.word	0x48001c00
 8000ccc:	48000800 	.word	0x48000800
 8000cd0:	48001000 	.word	0x48001000
 8000cd4:	48000c00 	.word	0x48000c00

08000cd8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <LL_EXTI_EnableIT_0_31+0x24>)
 8000ce2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000ce6:	4905      	ldr	r1, [pc, #20]	; (8000cfc <LL_EXTI_EnableIT_0_31+0x24>)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	58000800 	.word	0x58000800

08000d00 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4904      	ldr	r1, [pc, #16]	; (8000d20 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	600b      	str	r3, [r1, #0]

}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	58000800 	.word	0x58000800

08000d24 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000d2a:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <ReadRtcSsrValue+0x3c>)
 8000d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <ReadRtcSsrValue+0x3c>)
 8000d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000d3a:	e005      	b.n	8000d48 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <ReadRtcSsrValue+0x3c>)
 8000d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d1f5      	bne.n	8000d3c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000d50:	683b      	ldr	r3, [r7, #0]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	40002800 	.word	0x40002800

08000d64 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	460a      	mov	r2, r1
 8000d6e:	71fb      	strb	r3, [r7, #7]
 8000d70:	4613      	mov	r3, r2
 8000d72:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000d74:	79ba      	ldrb	r2, [r7, #6]
 8000d76:	491d      	ldr	r1, [pc, #116]	; (8000dec <LinkTimerAfter+0x88>)
 8000d78:	4613      	mov	r3, r2
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	4413      	add	r3, r2
 8000d7e:	00db      	lsls	r3, r3, #3
 8000d80:	440b      	add	r3, r1
 8000d82:	3315      	adds	r3, #21
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
 8000d8a:	2b06      	cmp	r3, #6
 8000d8c:	d009      	beq.n	8000da2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000d8e:	7bfa      	ldrb	r2, [r7, #15]
 8000d90:	4916      	ldr	r1, [pc, #88]	; (8000dec <LinkTimerAfter+0x88>)
 8000d92:	4613      	mov	r3, r2
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	4413      	add	r3, r2
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	440b      	add	r3, r1
 8000d9c:	3314      	adds	r3, #20
 8000d9e:	79fa      	ldrb	r2, [r7, #7]
 8000da0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000da2:	79fa      	ldrb	r2, [r7, #7]
 8000da4:	4911      	ldr	r1, [pc, #68]	; (8000dec <LinkTimerAfter+0x88>)
 8000da6:	4613      	mov	r3, r2
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	4413      	add	r3, r2
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	440b      	add	r3, r1
 8000db0:	3315      	adds	r3, #21
 8000db2:	7bfa      	ldrb	r2, [r7, #15]
 8000db4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000db6:	79fa      	ldrb	r2, [r7, #7]
 8000db8:	490c      	ldr	r1, [pc, #48]	; (8000dec <LinkTimerAfter+0x88>)
 8000dba:	4613      	mov	r3, r2
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	4413      	add	r3, r2
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	440b      	add	r3, r1
 8000dc4:	3314      	adds	r3, #20
 8000dc6:	79ba      	ldrb	r2, [r7, #6]
 8000dc8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000dca:	79ba      	ldrb	r2, [r7, #6]
 8000dcc:	4907      	ldr	r1, [pc, #28]	; (8000dec <LinkTimerAfter+0x88>)
 8000dce:	4613      	mov	r3, r2
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	4413      	add	r3, r2
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	440b      	add	r3, r1
 8000dd8:	3315      	adds	r3, #21
 8000dda:	79fa      	ldrb	r2, [r7, #7]
 8000ddc:	701a      	strb	r2, [r3, #0]

  return;
 8000dde:	bf00      	nop
}
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	2000002c 	.word	0x2000002c

08000df0 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	460a      	mov	r2, r1
 8000dfa:	71fb      	strb	r3, [r7, #7]
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000e00:	4b29      	ldr	r3, [pc, #164]	; (8000ea8 <LinkTimerBefore+0xb8>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	79ba      	ldrb	r2, [r7, #6]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d032      	beq.n	8000e72 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000e0c:	79ba      	ldrb	r2, [r7, #6]
 8000e0e:	4927      	ldr	r1, [pc, #156]	; (8000eac <LinkTimerBefore+0xbc>)
 8000e10:	4613      	mov	r3, r2
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	4413      	add	r3, r2
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	440b      	add	r3, r1
 8000e1a:	3314      	adds	r3, #20
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000e20:	7bfa      	ldrb	r2, [r7, #15]
 8000e22:	4922      	ldr	r1, [pc, #136]	; (8000eac <LinkTimerBefore+0xbc>)
 8000e24:	4613      	mov	r3, r2
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	4413      	add	r3, r2
 8000e2a:	00db      	lsls	r3, r3, #3
 8000e2c:	440b      	add	r3, r1
 8000e2e:	3315      	adds	r3, #21
 8000e30:	79fa      	ldrb	r2, [r7, #7]
 8000e32:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000e34:	79fa      	ldrb	r2, [r7, #7]
 8000e36:	491d      	ldr	r1, [pc, #116]	; (8000eac <LinkTimerBefore+0xbc>)
 8000e38:	4613      	mov	r3, r2
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	4413      	add	r3, r2
 8000e3e:	00db      	lsls	r3, r3, #3
 8000e40:	440b      	add	r3, r1
 8000e42:	3315      	adds	r3, #21
 8000e44:	79ba      	ldrb	r2, [r7, #6]
 8000e46:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000e48:	79fa      	ldrb	r2, [r7, #7]
 8000e4a:	4918      	ldr	r1, [pc, #96]	; (8000eac <LinkTimerBefore+0xbc>)
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	4413      	add	r3, r2
 8000e52:	00db      	lsls	r3, r3, #3
 8000e54:	440b      	add	r3, r1
 8000e56:	3314      	adds	r3, #20
 8000e58:	7bfa      	ldrb	r2, [r7, #15]
 8000e5a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000e5c:	79ba      	ldrb	r2, [r7, #6]
 8000e5e:	4913      	ldr	r1, [pc, #76]	; (8000eac <LinkTimerBefore+0xbc>)
 8000e60:	4613      	mov	r3, r2
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	4413      	add	r3, r2
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	440b      	add	r3, r1
 8000e6a:	3314      	adds	r3, #20
 8000e6c:	79fa      	ldrb	r2, [r7, #7]
 8000e6e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000e70:	e014      	b.n	8000e9c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000e72:	79fa      	ldrb	r2, [r7, #7]
 8000e74:	490d      	ldr	r1, [pc, #52]	; (8000eac <LinkTimerBefore+0xbc>)
 8000e76:	4613      	mov	r3, r2
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	4413      	add	r3, r2
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	440b      	add	r3, r1
 8000e80:	3315      	adds	r3, #21
 8000e82:	79ba      	ldrb	r2, [r7, #6]
 8000e84:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000e86:	79ba      	ldrb	r2, [r7, #6]
 8000e88:	4908      	ldr	r1, [pc, #32]	; (8000eac <LinkTimerBefore+0xbc>)
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	4413      	add	r3, r2
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	440b      	add	r3, r1
 8000e94:	3314      	adds	r3, #20
 8000e96:	79fa      	ldrb	r2, [r7, #7]
 8000e98:	701a      	strb	r2, [r3, #0]
  return;
 8000e9a:	bf00      	nop
}
 8000e9c:	3714      	adds	r7, #20
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	200000bc 	.word	0x200000bc
 8000eac:	2000002c 	.word	0x2000002c

08000eb0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000eba:	4b4e      	ldr	r3, [pc, #312]	; (8000ff4 <linkTimer+0x144>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	2b06      	cmp	r3, #6
 8000ec2:	d118      	bne.n	8000ef6 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000ec4:	4b4b      	ldr	r3, [pc, #300]	; (8000ff4 <linkTimer+0x144>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4b4b      	ldr	r3, [pc, #300]	; (8000ff8 <linkTimer+0x148>)
 8000ecc:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000ece:	4a49      	ldr	r2, [pc, #292]	; (8000ff4 <linkTimer+0x144>)
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000ed4:	79fa      	ldrb	r2, [r7, #7]
 8000ed6:	4949      	ldr	r1, [pc, #292]	; (8000ffc <linkTimer+0x14c>)
 8000ed8:	4613      	mov	r3, r2
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	4413      	add	r3, r2
 8000ede:	00db      	lsls	r3, r3, #3
 8000ee0:	440b      	add	r3, r1
 8000ee2:	3315      	adds	r3, #21
 8000ee4:	2206      	movs	r2, #6
 8000ee6:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000ee8:	4b45      	ldr	r3, [pc, #276]	; (8001000 <linkTimer+0x150>)
 8000eea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000eee:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	81fb      	strh	r3, [r7, #14]
 8000ef4:	e078      	b.n	8000fe8 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000ef6:	f000 f909 	bl	800110c <ReturnTimeElapsed>
 8000efa:	4603      	mov	r3, r0
 8000efc:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000efe:	79fa      	ldrb	r2, [r7, #7]
 8000f00:	493e      	ldr	r1, [pc, #248]	; (8000ffc <linkTimer+0x14c>)
 8000f02:	4613      	mov	r3, r2
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	4413      	add	r3, r2
 8000f08:	00db      	lsls	r3, r3, #3
 8000f0a:	440b      	add	r3, r1
 8000f0c:	3308      	adds	r3, #8
 8000f0e:	6819      	ldr	r1, [r3, #0]
 8000f10:	89fb      	ldrh	r3, [r7, #14]
 8000f12:	79fa      	ldrb	r2, [r7, #7]
 8000f14:	4419      	add	r1, r3
 8000f16:	4839      	ldr	r0, [pc, #228]	; (8000ffc <linkTimer+0x14c>)
 8000f18:	4613      	mov	r3, r2
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	4413      	add	r3, r2
 8000f1e:	00db      	lsls	r3, r3, #3
 8000f20:	4403      	add	r3, r0
 8000f22:	3308      	adds	r3, #8
 8000f24:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000f26:	79fa      	ldrb	r2, [r7, #7]
 8000f28:	4934      	ldr	r1, [pc, #208]	; (8000ffc <linkTimer+0x14c>)
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	4413      	add	r3, r2
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	440b      	add	r3, r1
 8000f34:	3308      	adds	r3, #8
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000f3a:	4b2e      	ldr	r3, [pc, #184]	; (8000ff4 <linkTimer+0x144>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	4619      	mov	r1, r3
 8000f42:	4a2e      	ldr	r2, [pc, #184]	; (8000ffc <linkTimer+0x14c>)
 8000f44:	460b      	mov	r3, r1
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	440b      	add	r3, r1
 8000f4a:	00db      	lsls	r3, r3, #3
 8000f4c:	4413      	add	r3, r2
 8000f4e:	3308      	adds	r3, #8
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d337      	bcc.n	8000fc8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000f58:	4b26      	ldr	r3, [pc, #152]	; (8000ff4 <linkTimer+0x144>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000f5e:	7b7a      	ldrb	r2, [r7, #13]
 8000f60:	4926      	ldr	r1, [pc, #152]	; (8000ffc <linkTimer+0x14c>)
 8000f62:	4613      	mov	r3, r2
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	4413      	add	r3, r2
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	440b      	add	r3, r1
 8000f6c:	3315      	adds	r3, #21
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000f72:	e013      	b.n	8000f9c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000f74:	7b7a      	ldrb	r2, [r7, #13]
 8000f76:	4921      	ldr	r1, [pc, #132]	; (8000ffc <linkTimer+0x14c>)
 8000f78:	4613      	mov	r3, r2
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	4413      	add	r3, r2
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	440b      	add	r3, r1
 8000f82:	3315      	adds	r3, #21
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000f88:	7b7a      	ldrb	r2, [r7, #13]
 8000f8a:	491c      	ldr	r1, [pc, #112]	; (8000ffc <linkTimer+0x14c>)
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	4413      	add	r3, r2
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	440b      	add	r3, r1
 8000f96:	3315      	adds	r3, #21
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000f9c:	7b3b      	ldrb	r3, [r7, #12]
 8000f9e:	2b06      	cmp	r3, #6
 8000fa0:	d00b      	beq.n	8000fba <linkTimer+0x10a>
 8000fa2:	7b3a      	ldrb	r2, [r7, #12]
 8000fa4:	4915      	ldr	r1, [pc, #84]	; (8000ffc <linkTimer+0x14c>)
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	4413      	add	r3, r2
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	440b      	add	r3, r1
 8000fb0:	3308      	adds	r3, #8
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	68ba      	ldr	r2, [r7, #8]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d2dc      	bcs.n	8000f74 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000fba:	7b7a      	ldrb	r2, [r7, #13]
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fecf 	bl	8000d64 <LinkTimerAfter>
 8000fc6:	e00f      	b.n	8000fe8 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <linkTimer+0x144>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	4611      	mov	r1, r2
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff ff0c 	bl	8000df0 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <linkTimer+0x144>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <linkTimer+0x148>)
 8000fe0:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000fe2:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <linkTimer+0x144>)
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000fe8:	89fb      	ldrh	r3, [r7, #14]
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200000bc 	.word	0x200000bc
 8000ff8:	200000bd 	.word	0x200000bd
 8000ffc:	2000002c 	.word	0x2000002c
 8001000:	200000c0 	.word	0x200000c0

08001004 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	460a      	mov	r2, r1
 800100e:	71fb      	strb	r3, [r7, #7]
 8001010:	4613      	mov	r3, r2
 8001012:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001014:	4b39      	ldr	r3, [pc, #228]	; (80010fc <UnlinkTimer+0xf8>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	79fa      	ldrb	r2, [r7, #7]
 800101c:	429a      	cmp	r2, r3
 800101e:	d111      	bne.n	8001044 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001020:	4b36      	ldr	r3, [pc, #216]	; (80010fc <UnlinkTimer+0xf8>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4b36      	ldr	r3, [pc, #216]	; (8001100 <UnlinkTimer+0xfc>)
 8001028:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800102a:	79fa      	ldrb	r2, [r7, #7]
 800102c:	4935      	ldr	r1, [pc, #212]	; (8001104 <UnlinkTimer+0x100>)
 800102e:	4613      	mov	r3, r2
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	4413      	add	r3, r2
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	440b      	add	r3, r1
 8001038:	3315      	adds	r3, #21
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4b2f      	ldr	r3, [pc, #188]	; (80010fc <UnlinkTimer+0xf8>)
 8001040:	701a      	strb	r2, [r3, #0]
 8001042:	e03e      	b.n	80010c2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001044:	79fa      	ldrb	r2, [r7, #7]
 8001046:	492f      	ldr	r1, [pc, #188]	; (8001104 <UnlinkTimer+0x100>)
 8001048:	4613      	mov	r3, r2
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	4413      	add	r3, r2
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	440b      	add	r3, r1
 8001052:	3314      	adds	r3, #20
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001058:	79fa      	ldrb	r2, [r7, #7]
 800105a:	492a      	ldr	r1, [pc, #168]	; (8001104 <UnlinkTimer+0x100>)
 800105c:	4613      	mov	r3, r2
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	4413      	add	r3, r2
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	440b      	add	r3, r1
 8001066:	3315      	adds	r3, #21
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800106c:	79f9      	ldrb	r1, [r7, #7]
 800106e:	7bfa      	ldrb	r2, [r7, #15]
 8001070:	4824      	ldr	r0, [pc, #144]	; (8001104 <UnlinkTimer+0x100>)
 8001072:	460b      	mov	r3, r1
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	440b      	add	r3, r1
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	4403      	add	r3, r0
 800107c:	3315      	adds	r3, #21
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	b2d8      	uxtb	r0, r3
 8001082:	4920      	ldr	r1, [pc, #128]	; (8001104 <UnlinkTimer+0x100>)
 8001084:	4613      	mov	r3, r2
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	4413      	add	r3, r2
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	440b      	add	r3, r1
 800108e:	3315      	adds	r3, #21
 8001090:	4602      	mov	r2, r0
 8001092:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001094:	7bbb      	ldrb	r3, [r7, #14]
 8001096:	2b06      	cmp	r3, #6
 8001098:	d013      	beq.n	80010c2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800109a:	79f9      	ldrb	r1, [r7, #7]
 800109c:	7bba      	ldrb	r2, [r7, #14]
 800109e:	4819      	ldr	r0, [pc, #100]	; (8001104 <UnlinkTimer+0x100>)
 80010a0:	460b      	mov	r3, r1
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	440b      	add	r3, r1
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	4403      	add	r3, r0
 80010aa:	3314      	adds	r3, #20
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	b2d8      	uxtb	r0, r3
 80010b0:	4914      	ldr	r1, [pc, #80]	; (8001104 <UnlinkTimer+0x100>)
 80010b2:	4613      	mov	r3, r2
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	4413      	add	r3, r2
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	440b      	add	r3, r1
 80010bc:	3314      	adds	r3, #20
 80010be:	4602      	mov	r2, r0
 80010c0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80010c2:	79fa      	ldrb	r2, [r7, #7]
 80010c4:	490f      	ldr	r1, [pc, #60]	; (8001104 <UnlinkTimer+0x100>)
 80010c6:	4613      	mov	r3, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	4413      	add	r3, r2
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	440b      	add	r3, r1
 80010d0:	330c      	adds	r3, #12
 80010d2:	2201      	movs	r2, #1
 80010d4:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <UnlinkTimer+0xf8>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	2b06      	cmp	r3, #6
 80010de:	d107      	bne.n	80010f0 <UnlinkTimer+0xec>
 80010e0:	79bb      	ldrb	r3, [r7, #6]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d104      	bne.n	80010f0 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80010e6:	4b08      	ldr	r3, [pc, #32]	; (8001108 <UnlinkTimer+0x104>)
 80010e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010ec:	601a      	str	r2, [r3, #0]
  }

  return;
 80010ee:	bf00      	nop
 80010f0:	bf00      	nop
}
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	200000bc 	.word	0x200000bc
 8001100:	200000bd 	.word	0x200000bd
 8001104:	2000002c 	.word	0x2000002c
 8001108:	200000c0 	.word	0x200000c0

0800110c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001112:	4b1a      	ldr	r3, [pc, #104]	; (800117c <ReturnTimeElapsed+0x70>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800111a:	d026      	beq.n	800116a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 800111c:	f7ff fe02 	bl	8000d24 <ReadRtcSsrValue>
 8001120:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001122:	4b16      	ldr	r3, [pc, #88]	; (800117c <ReturnTimeElapsed+0x70>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	429a      	cmp	r2, r3
 800112a:	d805      	bhi.n	8001138 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 800112c:	4b13      	ldr	r3, [pc, #76]	; (800117c <ReturnTimeElapsed+0x70>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	e00a      	b.n	800114e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <ReturnTimeElapsed+0x74>)
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001144:	4b0d      	ldr	r3, [pc, #52]	; (800117c <ReturnTimeElapsed+0x70>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	4413      	add	r3, r2
 800114c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800114e:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <ReturnTimeElapsed+0x78>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	461a      	mov	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	fb02 f303 	mul.w	r3, r2, r3
 800115a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 800115c:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <ReturnTimeElapsed+0x7c>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	40d3      	lsrs	r3, r2
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	e001      	b.n	800116e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	b29b      	uxth	r3, r3
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200000c0 	.word	0x200000c0
 8001180:	200001ea 	.word	0x200001ea
 8001184:	200001e9 	.word	0x200001e9
 8001188:	200001e8 	.word	0x200001e8

0800118c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8001196:	88fb      	ldrh	r3, [r7, #6]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d108      	bne.n	80011ae <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800119c:	f7ff fdc2 	bl	8000d24 <ReadRtcSsrValue>
 80011a0:	4602      	mov	r2, r0
 80011a2:	4b24      	ldr	r3, [pc, #144]	; (8001234 <RestartWakeupCounter+0xa8>)
 80011a4:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80011a6:	2003      	movs	r0, #3
 80011a8:	f002 f831 	bl	800320e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80011ac:	e03e      	b.n	800122c <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80011ae:	88fb      	ldrh	r3, [r7, #6]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d803      	bhi.n	80011bc <RestartWakeupCounter+0x30>
 80011b4:	4b20      	ldr	r3, [pc, #128]	; (8001238 <RestartWakeupCounter+0xac>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d002      	beq.n	80011c2 <RestartWakeupCounter+0x36>
      Value -= 1;
 80011bc:	88fb      	ldrh	r3, [r7, #6]
 80011be:	3b01      	subs	r3, #1
 80011c0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80011c2:	bf00      	nop
 80011c4:	4b1d      	ldr	r3, [pc, #116]	; (800123c <RestartWakeupCounter+0xb0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0f7      	beq.n	80011c4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80011d4:	4b19      	ldr	r3, [pc, #100]	; (800123c <RestartWakeupCounter+0xb0>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	4b17      	ldr	r3, [pc, #92]	; (800123c <RestartWakeupCounter+0xb0>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80011e8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <RestartWakeupCounter+0xb4>)
 80011ec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011f0:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80011f2:	2003      	movs	r0, #3
 80011f4:	f002 f819 	bl	800322a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <RestartWakeupCounter+0xb8>)
 80011fa:	695b      	ldr	r3, [r3, #20]
 80011fc:	0c1b      	lsrs	r3, r3, #16
 80011fe:	041b      	lsls	r3, r3, #16
 8001200:	88fa      	ldrh	r2, [r7, #6]
 8001202:	4910      	ldr	r1, [pc, #64]	; (8001244 <RestartWakeupCounter+0xb8>)
 8001204:	4313      	orrs	r3, r2
 8001206:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001208:	f7ff fd8c 	bl	8000d24 <ReadRtcSsrValue>
 800120c:	4602      	mov	r2, r0
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <RestartWakeupCounter+0xa8>)
 8001210:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8001212:	4b0a      	ldr	r3, [pc, #40]	; (800123c <RestartWakeupCounter+0xb0>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	689a      	ldr	r2, [r3, #8]
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <RestartWakeupCounter+0xb0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001224:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001226:	f3af 8000 	nop.w
  return ;
 800122a:	bf00      	nop
}
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	200000c0 	.word	0x200000c0
 8001238:	200001e8 	.word	0x200001e8
 800123c:	200001e4 	.word	0x200001e4
 8001240:	58000800 	.word	0x58000800
 8001244:	40002800 	.word	0x40002800

08001248 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800124e:	4b47      	ldr	r3, [pc, #284]	; (800136c <RescheduleTimerList+0x124>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800125a:	d108      	bne.n	800126e <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 800125c:	bf00      	nop
 800125e:	4b44      	ldr	r3, [pc, #272]	; (8001370 <RescheduleTimerList+0x128>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1f7      	bne.n	800125e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800126e:	4b40      	ldr	r3, [pc, #256]	; (8001370 <RescheduleTimerList+0x128>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	689a      	ldr	r2, [r3, #8]
 8001276:	4b3e      	ldr	r3, [pc, #248]	; (8001370 <RescheduleTimerList+0x128>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001280:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001282:	4b3c      	ldr	r3, [pc, #240]	; (8001374 <RescheduleTimerList+0x12c>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001288:	7bfa      	ldrb	r2, [r7, #15]
 800128a:	493b      	ldr	r1, [pc, #236]	; (8001378 <RescheduleTimerList+0x130>)
 800128c:	4613      	mov	r3, r2
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	4413      	add	r3, r2
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	440b      	add	r3, r1
 8001296:	3308      	adds	r3, #8
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 800129c:	f7ff ff36 	bl	800110c <ReturnTimeElapsed>
 80012a0:	4603      	mov	r3, r0
 80012a2:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80012a4:	88fb      	ldrh	r3, [r7, #6]
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d205      	bcs.n	80012b8 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80012b0:	4b32      	ldr	r3, [pc, #200]	; (800137c <RescheduleTimerList+0x134>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	701a      	strb	r2, [r3, #0]
 80012b6:	e04d      	b.n	8001354 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	4a31      	ldr	r2, [pc, #196]	; (8001380 <RescheduleTimerList+0x138>)
 80012bc:	8812      	ldrh	r2, [r2, #0]
 80012be:	b292      	uxth	r2, r2
 80012c0:	4413      	add	r3, r2
 80012c2:	461a      	mov	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d906      	bls.n	80012d8 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80012ca:	4b2d      	ldr	r3, [pc, #180]	; (8001380 <RescheduleTimerList+0x138>)
 80012cc:	881b      	ldrh	r3, [r3, #0]
 80012ce:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80012d0:	4b2a      	ldr	r3, [pc, #168]	; (800137c <RescheduleTimerList+0x134>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	701a      	strb	r2, [r3, #0]
 80012d6:	e03d      	b.n	8001354 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	b29a      	uxth	r2, r3
 80012dc:	88fb      	ldrh	r3, [r7, #6]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80012e2:	4b26      	ldr	r3, [pc, #152]	; (800137c <RescheduleTimerList+0x134>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80012e8:	e034      	b.n	8001354 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80012ea:	7bfa      	ldrb	r2, [r7, #15]
 80012ec:	4922      	ldr	r1, [pc, #136]	; (8001378 <RescheduleTimerList+0x130>)
 80012ee:	4613      	mov	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	4413      	add	r3, r2
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	440b      	add	r3, r1
 80012f8:	3308      	adds	r3, #8
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	88fb      	ldrh	r3, [r7, #6]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d20a      	bcs.n	8001318 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001302:	7bfa      	ldrb	r2, [r7, #15]
 8001304:	491c      	ldr	r1, [pc, #112]	; (8001378 <RescheduleTimerList+0x130>)
 8001306:	4613      	mov	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	4413      	add	r3, r2
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	440b      	add	r3, r1
 8001310:	3308      	adds	r3, #8
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	e013      	b.n	8001340 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001318:	7bfa      	ldrb	r2, [r7, #15]
 800131a:	4917      	ldr	r1, [pc, #92]	; (8001378 <RescheduleTimerList+0x130>)
 800131c:	4613      	mov	r3, r2
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	4413      	add	r3, r2
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	440b      	add	r3, r1
 8001326:	3308      	adds	r3, #8
 8001328:	6819      	ldr	r1, [r3, #0]
 800132a:	88fb      	ldrh	r3, [r7, #6]
 800132c:	7bfa      	ldrb	r2, [r7, #15]
 800132e:	1ac9      	subs	r1, r1, r3
 8001330:	4811      	ldr	r0, [pc, #68]	; (8001378 <RescheduleTimerList+0x130>)
 8001332:	4613      	mov	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	4413      	add	r3, r2
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	4403      	add	r3, r0
 800133c:	3308      	adds	r3, #8
 800133e:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001340:	7bfa      	ldrb	r2, [r7, #15]
 8001342:	490d      	ldr	r1, [pc, #52]	; (8001378 <RescheduleTimerList+0x130>)
 8001344:	4613      	mov	r3, r2
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	4413      	add	r3, r2
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	440b      	add	r3, r1
 800134e:	3315      	adds	r3, #21
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	2b06      	cmp	r3, #6
 8001358:	d1c7      	bne.n	80012ea <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800135a:	89bb      	ldrh	r3, [r7, #12]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff15 	bl	800118c <RestartWakeupCounter>

  return ;
 8001362:	bf00      	nop
}
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40002800 	.word	0x40002800
 8001370:	200001e4 	.word	0x200001e4
 8001374:	200000bc 	.word	0x200000bc
 8001378:	2000002c 	.word	0x2000002c
 800137c:	200000c4 	.word	0x200000c4
 8001380:	200001ec 	.word	0x200001ec

08001384 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08a      	sub	sp, #40	; 0x28
 8001388:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800138a:	f3ef 8310 	mrs	r3, PRIMASK
 800138e:	617b      	str	r3, [r7, #20]
  return(result);
 8001390:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001394:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001396:	4b5e      	ldr	r3, [pc, #376]	; (8001510 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	22ca      	movs	r2, #202	; 0xca
 800139e:	625a      	str	r2, [r3, #36]	; 0x24
 80013a0:	4b5b      	ldr	r3, [pc, #364]	; (8001510 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2253      	movs	r2, #83	; 0x53
 80013a8:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 80013aa:	4b59      	ldr	r3, [pc, #356]	; (8001510 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	4b57      	ldr	r3, [pc, #348]	; (8001510 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013bc:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80013be:	4b55      	ldr	r3, [pc, #340]	; (8001514 <HW_TS_RTC_Wakeup_Handler+0x190>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80013c6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80013ca:	4953      	ldr	r1, [pc, #332]	; (8001518 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80013cc:	4613      	mov	r3, r2
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	4413      	add	r3, r2
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	440b      	add	r3, r1
 80013d6:	330c      	adds	r3, #12
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d170      	bne.n	80014c2 <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80013e0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80013e4:	494c      	ldr	r1, [pc, #304]	; (8001518 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80013e6:	4613      	mov	r3, r2
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	4413      	add	r3, r2
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	440b      	add	r3, r1
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80013f4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80013f8:	4947      	ldr	r1, [pc, #284]	; (8001518 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80013fa:	4613      	mov	r3, r2
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	4413      	add	r3, r2
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	440b      	add	r3, r1
 8001404:	3310      	adds	r3, #16
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 800140a:	4b44      	ldr	r3, [pc, #272]	; (800151c <HW_TS_RTC_Wakeup_Handler+0x198>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	b2db      	uxtb	r3, r3
 8001410:	2b00      	cmp	r3, #0
 8001412:	d04e      	beq.n	80014b2 <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001414:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001418:	493f      	ldr	r1, [pc, #252]	; (8001518 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800141a:	4613      	mov	r3, r2
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4413      	add	r3, r2
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	440b      	add	r3, r1
 8001424:	330d      	adds	r3, #13
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b01      	cmp	r3, #1
 800142c:	d125      	bne.n	800147a <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 800142e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001432:	2101      	movs	r1, #1
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fde5 	bl	8001004 <UnlinkTimer>
 800143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143c:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001444:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001448:	4933      	ldr	r1, [pc, #204]	; (8001518 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800144a:	4613      	mov	r3, r2
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	4413      	add	r3, r2
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	440b      	add	r3, r1
 8001454:	3304      	adds	r3, #4
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800145c:	4611      	mov	r1, r2
 800145e:	4618      	mov	r0, r3
 8001460:	f000 fa40 	bl	80018e4 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001464:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	22ca      	movs	r2, #202	; 0xca
 800146c:	625a      	str	r2, [r3, #36]	; 0x24
 800146e:	4b28      	ldr	r3, [pc, #160]	; (8001510 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2253      	movs	r2, #83	; 0x53
 8001476:	625a      	str	r2, [r3, #36]	; 0x24
 8001478:	e013      	b.n	80014a2 <HW_TS_RTC_Wakeup_Handler+0x11e>
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001484:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001488:	4618      	mov	r0, r3
 800148a:	f000 f9a1 	bl	80017d0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800148e:	4b20      	ldr	r3, [pc, #128]	; (8001510 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	22ca      	movs	r2, #202	; 0xca
 8001496:	625a      	str	r2, [r3, #36]	; 0x24
 8001498:	4b1d      	ldr	r3, [pc, #116]	; (8001510 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2253      	movs	r2, #83	; 0x53
 80014a0:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80014a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80014a6:	69fa      	ldr	r2, [r7, #28]
 80014a8:	4619      	mov	r1, r3
 80014aa:	69b8      	ldr	r0, [r7, #24]
 80014ac:	f000 faa0 	bl	80019f0 <HW_TS_RTC_Int_AppNot>
 80014b0:	e024      	b.n	80014fc <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 80014b2:	f7ff fec9 	bl	8001248 <RescheduleTimerList>
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	f383 8810 	msr	PRIMASK, r3
 80014c0:	e01c      	b.n	80014fc <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80014c2:	bf00      	nop
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0f7      	beq.n	80014c4 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80014d4:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80014e8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80014ea:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80014ec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	607b      	str	r3, [r7, #4]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	22ff      	movs	r2, #255	; 0xff
 8001504:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001506:	bf00      	nop
}
 8001508:	3728      	adds	r7, #40	; 0x28
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200001e4 	.word	0x200001e4
 8001514:	200000bc 	.word	0x200000bc
 8001518:	2000002c 	.word	0x2000002c
 800151c:	200000c4 	.word	0x200000c4
 8001520:	58000800 	.word	0x58000800

08001524 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	6039      	str	r1, [r7, #0]
 800152e:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8001530:	4a61      	ldr	r2, [pc, #388]	; (80016b8 <HW_TS_Init+0x194>)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001536:	4b60      	ldr	r3, [pc, #384]	; (80016b8 <HW_TS_Init+0x194>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	22ca      	movs	r2, #202	; 0xca
 800153e:	625a      	str	r2, [r3, #36]	; 0x24
 8001540:	4b5d      	ldr	r3, [pc, #372]	; (80016b8 <HW_TS_Init+0x194>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2253      	movs	r2, #83	; 0x53
 8001548:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800154a:	4b5c      	ldr	r3, [pc, #368]	; (80016bc <HW_TS_Init+0x198>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	4a5b      	ldr	r2, [pc, #364]	; (80016bc <HW_TS_Init+0x198>)
 8001550:	f043 0320 	orr.w	r3, r3, #32
 8001554:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001556:	4b59      	ldr	r3, [pc, #356]	; (80016bc <HW_TS_Init+0x198>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	b2db      	uxtb	r3, r3
 800155c:	f003 0307 	and.w	r3, r3, #7
 8001560:	b2db      	uxtb	r3, r3
 8001562:	f1c3 0304 	rsb	r3, r3, #4
 8001566:	b2da      	uxtb	r2, r3
 8001568:	4b55      	ldr	r3, [pc, #340]	; (80016c0 <HW_TS_Init+0x19c>)
 800156a:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800156c:	4b53      	ldr	r3, [pc, #332]	; (80016bc <HW_TS_Init+0x198>)
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001574:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001578:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	fa92 f2a2 	rbit	r2, r2
 8001580:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	fab2 f282 	clz	r2, r2
 8001588:	b2d2      	uxtb	r2, r2
 800158a:	40d3      	lsrs	r3, r2
 800158c:	b2db      	uxtb	r3, r3
 800158e:	3301      	adds	r3, #1
 8001590:	b2da      	uxtb	r2, r3
 8001592:	4b4c      	ldr	r3, [pc, #304]	; (80016c4 <HW_TS_Init+0x1a0>)
 8001594:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001596:	4b49      	ldr	r3, [pc, #292]	; (80016bc <HW_TS_Init+0x198>)
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	b29b      	uxth	r3, r3
 800159c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	3301      	adds	r3, #1
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	4b48      	ldr	r3, [pc, #288]	; (80016c8 <HW_TS_Init+0x1a4>)
 80015a8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80015aa:	4b47      	ldr	r3, [pc, #284]	; (80016c8 <HW_TS_Init+0x1a4>)
 80015ac:	881b      	ldrh	r3, [r3, #0]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	4a44      	ldr	r2, [pc, #272]	; (80016c4 <HW_TS_Init+0x1a0>)
 80015b2:	7812      	ldrb	r2, [r2, #0]
 80015b4:	fb02 f303 	mul.w	r3, r2, r3
 80015b8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80015bc:	4a40      	ldr	r2, [pc, #256]	; (80016c0 <HW_TS_Init+0x19c>)
 80015be:	7812      	ldrb	r2, [r2, #0]
 80015c0:	40d3      	lsrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d904      	bls.n	80015d8 <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80015ce:	4b3f      	ldr	r3, [pc, #252]	; (80016cc <HW_TS_Init+0x1a8>)
 80015d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015d4:	801a      	strh	r2, [r3, #0]
 80015d6:	e003      	b.n	80015e0 <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	b29a      	uxth	r2, r3
 80015dc:	4b3b      	ldr	r3, [pc, #236]	; (80016cc <HW_TS_Init+0x1a8>)
 80015de:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80015e0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80015e4:	f7ff fb8c 	bl	8000d00 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80015e8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80015ec:	f7ff fb74 	bl	8000cd8 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d143      	bne.n	800167e <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80015f6:	4b36      	ldr	r3, [pc, #216]	; (80016d0 <HW_TS_Init+0x1ac>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80015fc:	4b35      	ldr	r3, [pc, #212]	; (80016d4 <HW_TS_Init+0x1b0>)
 80015fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001602:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001604:	2300      	movs	r3, #0
 8001606:	75fb      	strb	r3, [r7, #23]
 8001608:	e00c      	b.n	8001624 <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800160a:	7dfa      	ldrb	r2, [r7, #23]
 800160c:	4932      	ldr	r1, [pc, #200]	; (80016d8 <HW_TS_Init+0x1b4>)
 800160e:	4613      	mov	r3, r2
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	4413      	add	r3, r2
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	440b      	add	r3, r1
 8001618:	330c      	adds	r3, #12
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800161e:	7dfb      	ldrb	r3, [r7, #23]
 8001620:	3301      	adds	r3, #1
 8001622:	75fb      	strb	r3, [r7, #23]
 8001624:	7dfb      	ldrb	r3, [r7, #23]
 8001626:	2b05      	cmp	r3, #5
 8001628:	d9ef      	bls.n	800160a <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800162a:	4b2c      	ldr	r3, [pc, #176]	; (80016dc <HW_TS_Init+0x1b8>)
 800162c:	2206      	movs	r2, #6
 800162e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8001630:	4b21      	ldr	r3, [pc, #132]	; (80016b8 <HW_TS_Init+0x194>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	4b1f      	ldr	r3, [pc, #124]	; (80016b8 <HW_TS_Init+0x194>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001642:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001644:	4b1c      	ldr	r3, [pc, #112]	; (80016b8 <HW_TS_Init+0x194>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	b2da      	uxtb	r2, r3
 800164e:	4b1a      	ldr	r3, [pc, #104]	; (80016b8 <HW_TS_Init+0x194>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001658:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800165a:	4b21      	ldr	r3, [pc, #132]	; (80016e0 <HW_TS_Init+0x1bc>)
 800165c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001660:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001662:	2003      	movs	r0, #3
 8001664:	f001 fde1 	bl	800322a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001668:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <HW_TS_Init+0x194>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <HW_TS_Init+0x194>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	e00a      	b.n	8001694 <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 800167e:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <HW_TS_Init+0x194>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800168a:	2b00      	cmp	r3, #0
 800168c:	d002      	beq.n	8001694 <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800168e:	2003      	movs	r0, #3
 8001690:	f001 fdbd 	bl	800320e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001694:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <HW_TS_Init+0x194>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	22ff      	movs	r2, #255	; 0xff
 800169c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800169e:	2200      	movs	r2, #0
 80016a0:	2103      	movs	r1, #3
 80016a2:	2003      	movs	r0, #3
 80016a4:	f001 fd71 	bl	800318a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80016a8:	2003      	movs	r0, #3
 80016aa:	f001 fd88 	bl	80031be <HAL_NVIC_EnableIRQ>

  return;
 80016ae:	bf00      	nop
}
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	200001e4 	.word	0x200001e4
 80016bc:	40002800 	.word	0x40002800
 80016c0:	200001e8 	.word	0x200001e8
 80016c4:	200001e9 	.word	0x200001e9
 80016c8:	200001ea 	.word	0x200001ea
 80016cc:	200001ec 	.word	0x200001ec
 80016d0:	200000c4 	.word	0x200000c4
 80016d4:	200000c0 	.word	0x200000c0
 80016d8:	2000002c 	.word	0x2000002c
 80016dc:	200000bc 	.word	0x200000bc
 80016e0:	58000800 	.word	0x58000800

080016e4 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b08b      	sub	sp, #44	; 0x2c
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	4613      	mov	r3, r2
 80016f2:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016fa:	f3ef 8310 	mrs	r3, PRIMASK
 80016fe:	61fb      	str	r3, [r7, #28]
  return(result);
 8001700:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001702:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001704:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001706:	e004      	b.n	8001712 <HW_TS_Create+0x2e>
  {
    loop++;
 8001708:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800170c:	3301      	adds	r3, #1
 800170e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001712:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001716:	2b05      	cmp	r3, #5
 8001718:	d80c      	bhi.n	8001734 <HW_TS_Create+0x50>
 800171a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800171e:	492b      	ldr	r1, [pc, #172]	; (80017cc <HW_TS_Create+0xe8>)
 8001720:	4613      	mov	r3, r2
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	4413      	add	r3, r2
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	440b      	add	r3, r1
 800172a:	330c      	adds	r3, #12
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1e9      	bne.n	8001708 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001734:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001738:	2b06      	cmp	r3, #6
 800173a:	d037      	beq.n	80017ac <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800173c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001740:	4922      	ldr	r1, [pc, #136]	; (80017cc <HW_TS_Create+0xe8>)
 8001742:	4613      	mov	r3, r2
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	4413      	add	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	440b      	add	r3, r1
 800174c:	330c      	adds	r3, #12
 800174e:	2201      	movs	r2, #1
 8001750:	701a      	strb	r2, [r3, #0]
 8001752:	6a3b      	ldr	r3, [r7, #32]
 8001754:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 800175c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001760:	491a      	ldr	r1, [pc, #104]	; (80017cc <HW_TS_Create+0xe8>)
 8001762:	4613      	mov	r3, r2
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	4413      	add	r3, r2
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	440b      	add	r3, r1
 800176c:	3310      	adds	r3, #16
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001772:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001776:	4915      	ldr	r1, [pc, #84]	; (80017cc <HW_TS_Create+0xe8>)
 8001778:	4613      	mov	r3, r2
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	4413      	add	r3, r2
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	440b      	add	r3, r1
 8001782:	330d      	adds	r3, #13
 8001784:	79fa      	ldrb	r2, [r7, #7]
 8001786:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001788:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800178c:	490f      	ldr	r1, [pc, #60]	; (80017cc <HW_TS_Create+0xe8>)
 800178e:	4613      	mov	r3, r2
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	4413      	add	r3, r2
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	440b      	add	r3, r1
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80017a2:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80017a4:	2300      	movs	r3, #0
 80017a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80017aa:	e007      	b.n	80017bc <HW_TS_Create+0xd8>
 80017ac:	6a3b      	ldr	r3, [r7, #32]
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80017b6:	2301      	movs	r3, #1
 80017b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80017bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	372c      	adds	r7, #44	; 0x2c
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	2000002c 	.word	0x2000002c

080017d0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017da:	f3ef 8310 	mrs	r3, PRIMASK
 80017de:	60fb      	str	r3, [r7, #12]
  return(result);
 80017e0:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80017e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80017e4:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80017e6:	2003      	movs	r0, #3
 80017e8:	f001 fcf7 	bl	80031da <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80017ec:	4b37      	ldr	r3, [pc, #220]	; (80018cc <HW_TS_Stop+0xfc>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	22ca      	movs	r2, #202	; 0xca
 80017f4:	625a      	str	r2, [r3, #36]	; 0x24
 80017f6:	4b35      	ldr	r3, [pc, #212]	; (80018cc <HW_TS_Stop+0xfc>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2253      	movs	r2, #83	; 0x53
 80017fe:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001800:	79fa      	ldrb	r2, [r7, #7]
 8001802:	4933      	ldr	r1, [pc, #204]	; (80018d0 <HW_TS_Stop+0x100>)
 8001804:	4613      	mov	r3, r2
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4413      	add	r3, r2
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	440b      	add	r3, r1
 800180e:	330c      	adds	r3, #12
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d148      	bne.n	80018aa <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	2100      	movs	r1, #0
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fbf1 	bl	8001004 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001822:	4b2c      	ldr	r3, [pc, #176]	; (80018d4 <HW_TS_Stop+0x104>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001828:	7cfb      	ldrb	r3, [r7, #19]
 800182a:	2b06      	cmp	r3, #6
 800182c:	d135      	bne.n	800189a <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800182e:	4b2a      	ldr	r3, [pc, #168]	; (80018d8 <HW_TS_Stop+0x108>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800183a:	d108      	bne.n	800184e <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 800183c:	bf00      	nop
 800183e:	4b23      	ldr	r3, [pc, #140]	; (80018cc <HW_TS_Stop+0xfc>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f7      	bne.n	800183e <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800184e:	4b1f      	ldr	r3, [pc, #124]	; (80018cc <HW_TS_Stop+0xfc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	689a      	ldr	r2, [r3, #8]
 8001856:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <HW_TS_Stop+0xfc>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001860:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001862:	bf00      	nop
 8001864:	4b19      	ldr	r3, [pc, #100]	; (80018cc <HW_TS_Stop+0xfc>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0f7      	beq.n	8001864 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001874:	4b15      	ldr	r3, [pc, #84]	; (80018cc <HW_TS_Stop+0xfc>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4b13      	ldr	r3, [pc, #76]	; (80018cc <HW_TS_Stop+0xfc>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001888:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800188a:	4b14      	ldr	r3, [pc, #80]	; (80018dc <HW_TS_Stop+0x10c>)
 800188c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001890:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001892:	2003      	movs	r0, #3
 8001894:	f001 fcc9 	bl	800322a <HAL_NVIC_ClearPendingIRQ>
 8001898:	e007      	b.n	80018aa <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800189a:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <HW_TS_Stop+0x110>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	7cfa      	ldrb	r2, [r7, #19]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d001      	beq.n	80018aa <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 80018a6:	f7ff fccf 	bl	8001248 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80018aa:	4b08      	ldr	r3, [pc, #32]	; (80018cc <HW_TS_Stop+0xfc>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	22ff      	movs	r2, #255	; 0xff
 80018b2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80018b4:	2003      	movs	r0, #3
 80018b6:	f001 fc82 	bl	80031be <HAL_NVIC_EnableIRQ>
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80018c4:	bf00      	nop
}
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	200001e4 	.word	0x200001e4
 80018d0:	2000002c 	.word	0x2000002c
 80018d4:	200000bc 	.word	0x200000bc
 80018d8:	40002800 	.word	0x40002800
 80018dc:	58000800 	.word	0x58000800
 80018e0:	200000bd 	.word	0x200000bd

080018e4 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	6039      	str	r1, [r7, #0]
 80018ee:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80018f0:	79fa      	ldrb	r2, [r7, #7]
 80018f2:	493b      	ldr	r1, [pc, #236]	; (80019e0 <HW_TS_Start+0xfc>)
 80018f4:	4613      	mov	r3, r2
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	4413      	add	r3, r2
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	440b      	add	r3, r1
 80018fe:	330c      	adds	r3, #12
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d103      	bne.n	8001910 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff ff60 	bl	80017d0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001910:	f3ef 8310 	mrs	r3, PRIMASK
 8001914:	60fb      	str	r3, [r7, #12]
  return(result);
 8001916:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001918:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800191a:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800191c:	2003      	movs	r0, #3
 800191e:	f001 fc5c 	bl	80031da <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001922:	4b30      	ldr	r3, [pc, #192]	; (80019e4 <HW_TS_Start+0x100>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	22ca      	movs	r2, #202	; 0xca
 800192a:	625a      	str	r2, [r3, #36]	; 0x24
 800192c:	4b2d      	ldr	r3, [pc, #180]	; (80019e4 <HW_TS_Start+0x100>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2253      	movs	r2, #83	; 0x53
 8001934:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001936:	79fa      	ldrb	r2, [r7, #7]
 8001938:	4929      	ldr	r1, [pc, #164]	; (80019e0 <HW_TS_Start+0xfc>)
 800193a:	4613      	mov	r3, r2
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	4413      	add	r3, r2
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	440b      	add	r3, r1
 8001944:	330c      	adds	r3, #12
 8001946:	2202      	movs	r2, #2
 8001948:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800194a:	79fa      	ldrb	r2, [r7, #7]
 800194c:	4924      	ldr	r1, [pc, #144]	; (80019e0 <HW_TS_Start+0xfc>)
 800194e:	4613      	mov	r3, r2
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	4413      	add	r3, r2
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	440b      	add	r3, r1
 8001958:	3308      	adds	r3, #8
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800195e:	79fa      	ldrb	r2, [r7, #7]
 8001960:	491f      	ldr	r1, [pc, #124]	; (80019e0 <HW_TS_Start+0xfc>)
 8001962:	4613      	mov	r3, r2
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	4413      	add	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	440b      	add	r3, r1
 800196c:	3304      	adds	r3, #4
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff fa9b 	bl	8000eb0 <linkTimer>
 800197a:	4603      	mov	r3, r0
 800197c:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800197e:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <HW_TS_Start+0x104>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001984:	4b19      	ldr	r3, [pc, #100]	; (80019ec <HW_TS_Start+0x108>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	b2db      	uxtb	r3, r3
 800198a:	7c7a      	ldrb	r2, [r7, #17]
 800198c:	429a      	cmp	r2, r3
 800198e:	d002      	beq.n	8001996 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 8001990:	f7ff fc5a 	bl	8001248 <RescheduleTimerList>
 8001994:	e013      	b.n	80019be <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001996:	79fa      	ldrb	r2, [r7, #7]
 8001998:	4911      	ldr	r1, [pc, #68]	; (80019e0 <HW_TS_Start+0xfc>)
 800199a:	4613      	mov	r3, r2
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	4413      	add	r3, r2
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	440b      	add	r3, r1
 80019a4:	3308      	adds	r3, #8
 80019a6:	6819      	ldr	r1, [r3, #0]
 80019a8:	8a7b      	ldrh	r3, [r7, #18]
 80019aa:	79fa      	ldrb	r2, [r7, #7]
 80019ac:	1ac9      	subs	r1, r1, r3
 80019ae:	480c      	ldr	r0, [pc, #48]	; (80019e0 <HW_TS_Start+0xfc>)
 80019b0:	4613      	mov	r3, r2
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	4413      	add	r3, r2
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	4403      	add	r3, r0
 80019ba:	3308      	adds	r3, #8
 80019bc:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <HW_TS_Start+0x100>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	22ff      	movs	r2, #255	; 0xff
 80019c6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80019c8:	2003      	movs	r0, #3
 80019ca:	f001 fbf8 	bl	80031be <HAL_NVIC_EnableIRQ>
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80019d8:	bf00      	nop
}
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	2000002c 	.word	0x2000002c
 80019e4:	200001e4 	.word	0x200001e4
 80019e8:	200000bc 	.word	0x200000bc
 80019ec:	200000bd 	.word	0x200000bd

080019f0 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	460b      	mov	r3, r1
 80019fa:	607a      	str	r2, [r7, #4]
 80019fc:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4798      	blx	r3

  return;
 8001a02:	bf00      	nop
}
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <LL_AHB2_GRP1_EnableClock>:
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b085      	sub	sp, #20
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
}
 8001a30:	bf00      	nop
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a60:	68fb      	ldr	r3, [r7, #12]
}
 8001a62:	bf00      	nop
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
	...

08001a70 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8001a74:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <MX_I2C3_Init+0x74>)
 8001a76:	4a1c      	ldr	r2, [pc, #112]	; (8001ae8 <MX_I2C3_Init+0x78>)
 8001a78:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00300F38;
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <MX_I2C3_Init+0x74>)
 8001a7c:	4a1b      	ldr	r2, [pc, #108]	; (8001aec <MX_I2C3_Init+0x7c>)
 8001a7e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001a80:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <MX_I2C3_Init+0x74>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a86:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <MX_I2C3_Init+0x74>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a8c:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <MX_I2C3_Init+0x74>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001a92:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <MX_I2C3_Init+0x74>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a98:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <MX_I2C3_Init+0x74>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a9e:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <MX_I2C3_Init+0x74>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001aa4:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <MX_I2C3_Init+0x74>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001aaa:	480e      	ldr	r0, [pc, #56]	; (8001ae4 <MX_I2C3_Init+0x74>)
 8001aac:	f001 fd78 	bl	80035a0 <HAL_I2C_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001ab6:	f000 fa0f 	bl	8001ed8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001aba:	2100      	movs	r1, #0
 8001abc:	4809      	ldr	r0, [pc, #36]	; (8001ae4 <MX_I2C3_Init+0x74>)
 8001abe:	f002 f9c9 	bl	8003e54 <HAL_I2CEx_ConfigAnalogFilter>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001ac8:	f000 fa06 	bl	8001ed8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001acc:	2100      	movs	r1, #0
 8001ace:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <MX_I2C3_Init+0x74>)
 8001ad0:	f002 fa0b 	bl	8003eea <HAL_I2CEx_ConfigDigitalFilter>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001ada:	f000 f9fd 	bl	8001ed8 <Error_Handler>
  }

}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000348 	.word	0x20000348
 8001ae8:	40005c00 	.word	0x40005c00
 8001aec:	00300f38 	.word	0x00300f38

08001af0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b088      	sub	sp, #32
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af8:	f107 030c 	add.w	r3, r7, #12
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a0e      	ldr	r2, [pc, #56]	; (8001b48 <HAL_I2C_MspInit+0x58>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d116      	bne.n	8001b40 <HAL_I2C_MspInit+0x50>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b12:	2004      	movs	r0, #4
 8001b14:	f7ff ff79 	bl	8001a0a <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration    
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b1c:	2312      	movs	r3, #18
 8001b1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b20:	2301      	movs	r3, #1
 8001b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b24:	2300      	movs	r3, #0
 8001b26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b28:	2304      	movs	r3, #4
 8001b2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b2c:	f107 030c 	add.w	r3, r7, #12
 8001b30:	4619      	mov	r1, r3
 8001b32:	4806      	ldr	r0, [pc, #24]	; (8001b4c <HAL_I2C_MspInit+0x5c>)
 8001b34:	f001 fb88 	bl	8003248 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001b38:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001b3c:	f7ff ff7e 	bl	8001a3c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001b40:	bf00      	nop
 8001b42:	3720      	adds	r7, #32
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40005c00 	.word	0x40005c00
 8001b4c:	48000800 	.word	0x48000800

08001b50 <LL_RCC_LSE_SetDriveCapability>:
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b60:	f023 0218 	bic.w	r2, r3, #24
 8001b64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b80:	f001 f924 	bl	8002dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b84:	f000 f82e 	bl	8001be4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b88:	f7ff f804 	bl	8000b94 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001b8c:	f000 ffe0 	bl	8002b50 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8001b90:	f001 f88c 	bl	8002cac <MX_USB_PCD_Init>
  MX_RF_Init();
 8001b94:	f000 f9a7 	bl	8001ee6 <MX_RF_Init>
  MX_RTC_Init();
 8001b98:	f000 f9be 	bl	8001f18 <MX_RTC_Init>
  MX_I2C3_Init();
 8001b9c:	f7ff ff68 	bl	8001a70 <MX_I2C3_Init>
  MX_SPI1_Init();
 8001ba0:	f000 fa40 	bl	8002024 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001ba4:	f000 fa7c 	bl	80020a0 <MX_SPI2_Init>
  MX_TIM16_Init();
 8001ba8:	f000 ff5c 	bl	8002a64 <MX_TIM16_Init>

  /*
   * MPU9250
   * */

   readByte(WHO_AM_I_MPU9250, &WAI_MPU9250, 1);
 8001bac:	2201      	movs	r2, #1
 8001bae:	490a      	ldr	r1, [pc, #40]	; (8001bd8 <main+0x5c>)
 8001bb0:	2075      	movs	r0, #117	; 0x75
 8001bb2:	f7fe fe47 	bl	8000844 <readByte>

   initMPU9250();
 8001bb6:	f7fe fe9f 	bl	80008f8 <initMPU9250>

  /*
   * MAX30100
   * */

   read_byte(reg, &ID_MAX30100);
 8001bba:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <main+0x60>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	4908      	ldr	r1, [pc, #32]	; (8001be0 <main+0x64>)
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe fdf9 	bl	80007b8 <read_byte>

   begin();
 8001bc6:	f7fe fc63 	bl	8000490 <begin>


  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */  
  APPE_Init();
 8001bca:	f7fe ff2b 	bl	8000a24 <APPE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001bce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bd2:	f000 fb93 	bl	80022fc <UTIL_SEQ_Run>
 8001bd6:	e7fa      	b.n	8001bce <main+0x52>
 8001bd8:	200001ee 	.word	0x200001ee
 8001bdc:	20000004 	.word	0x20000004
 8001be0:	200001ef 	.word	0x200001ef

08001be4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b0ae      	sub	sp, #184	; 0xb8
 8001be8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001bee:	2248      	movs	r2, #72	; 0x48
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f009 fc79 	bl	800b4ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bf8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
 8001c08:	615a      	str	r2, [r3, #20]
 8001c0a:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c0c:	1d3b      	adds	r3, r7, #4
 8001c0e:	2250      	movs	r2, #80	; 0x50
 8001c10:	2100      	movs	r1, #0
 8001c12:	4618      	mov	r0, r3
 8001c14:	f009 fc69 	bl	800b4ea <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8001c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c26:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8001c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	f023 0303 	bic.w	r3, r3, #3
 8001c32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c36:	f043 0301 	orr.w	r3, r3, #1
 8001c3a:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	f7ff ff87 	bl	8001b50 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c42:	4b3e      	ldr	r3, [pc, #248]	; (8001d3c <SystemClock_Config+0x158>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c4a:	4a3c      	ldr	r2, [pc, #240]	; (8001d3c <SystemClock_Config+0x158>)
 8001c4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	4b3a      	ldr	r3, [pc, #232]	; (8001d3c <SystemClock_Config+0x158>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c5a:	603b      	str	r3, [r7, #0]
 8001c5c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001c5e:	2327      	movs	r3, #39	; 0x27
 8001c60:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c66:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c70:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001c72:	2301      	movs	r3, #1
 8001c74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c78:	2340      	movs	r3, #64	; 0x40
 8001c7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001c84:	2360      	movs	r3, #96	; 0x60
 8001c86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c90:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c94:	4618      	mov	r0, r3
 8001c96:	f002 fe0b 	bl	80048b0 <HAL_RCC_OscConfig>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001ca0:	f000 f91a 	bl	8001ed8 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001ca4:	236f      	movs	r3, #111	; 0x6f
 8001ca6:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cac:	2300      	movs	r3, #0
 8001cae:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001cc0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f003 f950 	bl	8004f6c <HAL_RCC_ClockConfig>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001cd2:	f000 f901 	bl	8001ed8 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8001cd6:	f643 1309 	movw	r3, #14601	; 0x3909
 8001cda:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8001cdc:	2318      	movs	r3, #24
 8001cde:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001ce0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ce4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001ce6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cea:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001cec:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001cf0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8001cf2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cf6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001cfc:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8001d00:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001d02:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001d06:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001d08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d0c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001d0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d12:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8001d14:	2302      	movs	r3, #2
 8001d16:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d1c:	1d3b      	adds	r3, r7, #4
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f003 fd6e 	bl	8005800 <HAL_RCCEx_PeriphCLKConfig>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8001d2a:	f000 f8d5 	bl	8001ed8 <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001d2e:	f003 fedc 	bl	8005aea <HAL_RCCEx_EnableMSIPLLMode>
}
 8001d32:	bf00      	nop
 8001d34:	37b8      	adds	r7, #184	; 0xb8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	58000400 	.word	0x58000400

08001d40 <read_sensors>:

/* USER CODE BEGIN 4 */

void read_sensors(void){
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0

	if(flag_buffer_full == 0x00){
 8001d44:	4b42      	ldr	r3, [pc, #264]	; (8001e50 <read_sensors+0x110>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d17e      	bne.n	8001e4a <read_sensors+0x10a>
		/*
		 * MPU9250
		 * */
		readAccelData(rawData_MPU9250);
 8001d4c:	4841      	ldr	r0, [pc, #260]	; (8001e54 <read_sensors+0x114>)
 8001d4e:	f7fe fda7 	bl	80008a0 <readAccelData>

		ble_buffer[0 + buff_counter] = (rawData_MPU9250[0] & 0x00FF);
 8001d52:	4b40      	ldr	r3, [pc, #256]	; (8001e54 <read_sensors+0x114>)
 8001d54:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001d58:	4b3f      	ldr	r3, [pc, #252]	; (8001e58 <read_sensors+0x118>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	b2c9      	uxtb	r1, r1
 8001d60:	4b3e      	ldr	r3, [pc, #248]	; (8001e5c <read_sensors+0x11c>)
 8001d62:	5499      	strb	r1, [r3, r2]
		ble_buffer[1 + buff_counter] = ((rawData_MPU9250[0] >> 8) & 0x00FF);
 8001d64:	4b3b      	ldr	r3, [pc, #236]	; (8001e54 <read_sensors+0x114>)
 8001d66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d6a:	121b      	asrs	r3, r3, #8
 8001d6c:	b21a      	sxth	r2, r3
 8001d6e:	4b3a      	ldr	r3, [pc, #232]	; (8001e58 <read_sensors+0x118>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	3301      	adds	r3, #1
 8001d74:	b2d1      	uxtb	r1, r2
 8001d76:	4a39      	ldr	r2, [pc, #228]	; (8001e5c <read_sensors+0x11c>)
 8001d78:	54d1      	strb	r1, [r2, r3]
		ble_buffer[2 + buff_counter] = (rawData_MPU9250[1] & 0x00FF);
 8001d7a:	4b36      	ldr	r3, [pc, #216]	; (8001e54 <read_sensors+0x114>)
 8001d7c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001d80:	4b35      	ldr	r3, [pc, #212]	; (8001e58 <read_sensors+0x118>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	3302      	adds	r3, #2
 8001d86:	b2d1      	uxtb	r1, r2
 8001d88:	4a34      	ldr	r2, [pc, #208]	; (8001e5c <read_sensors+0x11c>)
 8001d8a:	54d1      	strb	r1, [r2, r3]
		ble_buffer[3 + buff_counter] = ((rawData_MPU9250[1] >> 8) & 0x00FF);
 8001d8c:	4b31      	ldr	r3, [pc, #196]	; (8001e54 <read_sensors+0x114>)
 8001d8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d92:	121b      	asrs	r3, r3, #8
 8001d94:	b21a      	sxth	r2, r3
 8001d96:	4b30      	ldr	r3, [pc, #192]	; (8001e58 <read_sensors+0x118>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	3303      	adds	r3, #3
 8001d9c:	b2d1      	uxtb	r1, r2
 8001d9e:	4a2f      	ldr	r2, [pc, #188]	; (8001e5c <read_sensors+0x11c>)
 8001da0:	54d1      	strb	r1, [r2, r3]
		ble_buffer[4 + buff_counter] = (rawData_MPU9250[2] & 0x00FF);
 8001da2:	4b2c      	ldr	r3, [pc, #176]	; (8001e54 <read_sensors+0x114>)
 8001da4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001da8:	4b2b      	ldr	r3, [pc, #172]	; (8001e58 <read_sensors+0x118>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	3304      	adds	r3, #4
 8001dae:	b2d1      	uxtb	r1, r2
 8001db0:	4a2a      	ldr	r2, [pc, #168]	; (8001e5c <read_sensors+0x11c>)
 8001db2:	54d1      	strb	r1, [r2, r3]
		ble_buffer[5 + buff_counter] = ((rawData_MPU9250[2] >> 8) & 0x00FF);
 8001db4:	4b27      	ldr	r3, [pc, #156]	; (8001e54 <read_sensors+0x114>)
 8001db6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001dba:	121b      	asrs	r3, r3, #8
 8001dbc:	b21a      	sxth	r2, r3
 8001dbe:	4b26      	ldr	r3, [pc, #152]	; (8001e58 <read_sensors+0x118>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	3305      	adds	r3, #5
 8001dc4:	b2d1      	uxtb	r1, r2
 8001dc6:	4a25      	ldr	r2, [pc, #148]	; (8001e5c <read_sensors+0x11c>)
 8001dc8:	54d1      	strb	r1, [r2, r3]

		/*
		 * MAX30100
		 * */
		//read_diodes(&IR, &RED);
		readFIFO(&RED, &IR);
 8001dca:	4925      	ldr	r1, [pc, #148]	; (8001e60 <read_sensors+0x120>)
 8001dcc:	4825      	ldr	r0, [pc, #148]	; (8001e64 <read_sensors+0x124>)
 8001dce:	f7fe fca3 	bl	8000718 <readFIFO>

		ble_buffer[6 + buff_counter] = (RED & 0x00FF);
 8001dd2:	4b24      	ldr	r3, [pc, #144]	; (8001e64 <read_sensors+0x124>)
 8001dd4:	881a      	ldrh	r2, [r3, #0]
 8001dd6:	4b20      	ldr	r3, [pc, #128]	; (8001e58 <read_sensors+0x118>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	3306      	adds	r3, #6
 8001ddc:	b2d1      	uxtb	r1, r2
 8001dde:	4a1f      	ldr	r2, [pc, #124]	; (8001e5c <read_sensors+0x11c>)
 8001de0:	54d1      	strb	r1, [r2, r3]
		ble_buffer[7 + buff_counter] = ((RED >> 8) & 0x00FF);
 8001de2:	4b20      	ldr	r3, [pc, #128]	; (8001e64 <read_sensors+0x124>)
 8001de4:	881b      	ldrh	r3, [r3, #0]
 8001de6:	0a1b      	lsrs	r3, r3, #8
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	4b1b      	ldr	r3, [pc, #108]	; (8001e58 <read_sensors+0x118>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	3307      	adds	r3, #7
 8001df0:	b2d1      	uxtb	r1, r2
 8001df2:	4a1a      	ldr	r2, [pc, #104]	; (8001e5c <read_sensors+0x11c>)
 8001df4:	54d1      	strb	r1, [r2, r3]
		ble_buffer[8 + buff_counter] = (IR & 0x00FF);
 8001df6:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <read_sensors+0x120>)
 8001df8:	881a      	ldrh	r2, [r3, #0]
 8001dfa:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <read_sensors+0x118>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	3308      	adds	r3, #8
 8001e00:	b2d1      	uxtb	r1, r2
 8001e02:	4a16      	ldr	r2, [pc, #88]	; (8001e5c <read_sensors+0x11c>)
 8001e04:	54d1      	strb	r1, [r2, r3]
		ble_buffer[9 + buff_counter] = ((IR >> 8) & 0x00FF);
 8001e06:	4b16      	ldr	r3, [pc, #88]	; (8001e60 <read_sensors+0x120>)
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	0a1b      	lsrs	r3, r3, #8
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <read_sensors+0x118>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	3309      	adds	r3, #9
 8001e14:	b2d1      	uxtb	r1, r2
 8001e16:	4a11      	ldr	r2, [pc, #68]	; (8001e5c <read_sensors+0x11c>)
 8001e18:	54d1      	strb	r1, [r2, r3]


		if(buff_counter == 30){
 8001e1a:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <read_sensors+0x118>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b1e      	cmp	r3, #30
 8001e20:	d10a      	bne.n	8001e38 <read_sensors+0xf8>
			buff_counter = 0;
 8001e22:	4b0d      	ldr	r3, [pc, #52]	; (8001e58 <read_sensors+0x118>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]
			flag_buffer_full = 0x01;
 8001e28:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <read_sensors+0x110>)
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	701a      	strb	r2, [r3, #0]
			//HAL_TIM_Base_Stop_IT(&htim16);
			UTIL_SEQ_SetTask(1 << CFG_MY_TASK_NOTIFY_DATA, CFG_SCH_PRIO_0);
 8001e2e:	2100      	movs	r1, #0
 8001e30:	2008      	movs	r0, #8
 8001e32:	f000 fb5f 	bl	80024f4 <UTIL_SEQ_SetTask>
		}else{
			buff_counter+=10;
			flag_buffer_full = 0x00;
		}
	}
}
 8001e36:	e008      	b.n	8001e4a <read_sensors+0x10a>
			buff_counter+=10;
 8001e38:	4b07      	ldr	r3, [pc, #28]	; (8001e58 <read_sensors+0x118>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	330a      	adds	r3, #10
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <read_sensors+0x118>)
 8001e42:	701a      	strb	r2, [r3, #0]
			flag_buffer_full = 0x00;
 8001e44:	4b02      	ldr	r3, [pc, #8]	; (8001e50 <read_sensors+0x110>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	701a      	strb	r2, [r3, #0]
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000225 	.word	0x20000225
 8001e54:	200001f0 	.word	0x200001f0
 8001e58:	20000224 	.word	0x20000224
 8001e5c:	200001fc 	.word	0x200001fc
 8001e60:	200001f6 	.word	0x200001f6
 8001e64:	200001f8 	.word	0x200001f8

08001e68 <get_buffer_values>:

void get_buffer_values(uint8_t* buff){
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 40; i++)
 8001e70:	2300      	movs	r3, #0
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	e00a      	b.n	8001e8c <get_buffer_values+0x24>
		buff[i] = ble_buffer[i];
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	4909      	ldr	r1, [pc, #36]	; (8001ea4 <get_buffer_values+0x3c>)
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	440a      	add	r2, r1
 8001e82:	7812      	ldrb	r2, [r2, #0]
 8001e84:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 40; i++)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2b27      	cmp	r3, #39	; 0x27
 8001e90:	ddf1      	ble.n	8001e76 <get_buffer_values+0xe>
	flag_buffer_full = 0x00;
 8001e92:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <get_buffer_values+0x40>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	701a      	strb	r2, [r3, #0]
	//HAL_TIM_Base_Start_IT(&htim16);
}
 8001e98:	bf00      	nop
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	200001fc 	.word	0x200001fc
 8001ea8:	20000225 	.word	0x20000225

08001eac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  if(htim == &htim16){
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a07      	ldr	r2, [pc, #28]	; (8001ed4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d106      	bne.n	8001eca <HAL_TIM_PeriodElapsedCallback+0x1e>
	  if(APP_BLE_Get_Server_Connection_Status() == APP_BLE_CONNECTED_SERVER)
 8001ebc:	f008 fe20 	bl	800ab00 <APP_BLE_Get_Server_Connection_Status>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b05      	cmp	r3, #5
 8001ec4:	d101      	bne.n	8001eca <HAL_TIM_PeriodElapsedCallback+0x1e>
		  read_sensors();
 8001ec6:	f7ff ff3b 	bl	8001d40 <read_sensors>
  }

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000480 	.word	0x20000480

08001ed8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0

}
 8001eea:	bf00      	nop
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
	...

08001f18 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001f1c:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <MX_RTC_Init+0x48>)
 8001f1e:	4a11      	ldr	r2, [pc, #68]	; (8001f64 <MX_RTC_Init+0x4c>)
 8001f20:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001f22:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <MX_RTC_Init+0x48>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001f28:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <MX_RTC_Init+0x48>)
 8001f2a:	220f      	movs	r2, #15
 8001f2c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001f2e:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <MX_RTC_Init+0x48>)
 8001f30:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001f34:	60da      	str	r2, [r3, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001f36:	480a      	ldr	r0, [pc, #40]	; (8001f60 <MX_RTC_Init+0x48>)
 8001f38:	f003 feee 	bl	8005d18 <HAL_RTC_Init>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_RTC_Init+0x2e>
  {
    Error_Handler();
 8001f42:	f7ff ffc9 	bl	8001ed8 <Error_Handler>
  }
  /** Enable the WakeUp 
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001f46:	2200      	movs	r2, #0
 8001f48:	2100      	movs	r1, #0
 8001f4a:	4805      	ldr	r0, [pc, #20]	; (8001f60 <MX_RTC_Init+0x48>)
 8001f4c:	f003 ffd2 	bl	8005ef4 <HAL_RTCEx_SetWakeUpTimer>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_RTC_Init+0x42>
  {
    Error_Handler();
 8001f56:	f7ff ffbf 	bl	8001ed8 <Error_Handler>
  }

}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000394 	.word	0x20000394
 8001f64:	40002800 	.word	0x40002800

08001f68 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a04      	ldr	r2, [pc, #16]	; (8001f88 <HAL_RTC_MspInit+0x20>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d101      	bne.n	8001f7e <HAL_RTC_MspInit+0x16>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f7a:	f7ff ffbb 	bl	8001ef4 <LL_RCC_EnableRTC>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40002800 	.word	0x40002800

08001f8c <LL_AHB2_GRP1_EnableClock>:
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4013      	ands	r3, r2
 8001fae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
}
 8001fb2:	bf00      	nop
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <LL_APB1_GRP1_EnableClock>:
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b085      	sub	sp, #20
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fda:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
}
 8001fe4:	bf00      	nop
 8001fe6:	3714      	adds	r7, #20
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ffc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ffe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4313      	orrs	r3, r2
 8002006:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800200c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4013      	ands	r3, r2
 8002012:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002014:	68fb      	ldr	r3, [r7, #12]
}
 8002016:	bf00      	nop
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
	...

08002024 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002028:	4b1b      	ldr	r3, [pc, #108]	; (8002098 <MX_SPI1_Init+0x74>)
 800202a:	4a1c      	ldr	r2, [pc, #112]	; (800209c <MX_SPI1_Init+0x78>)
 800202c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800202e:	4b1a      	ldr	r3, [pc, #104]	; (8002098 <MX_SPI1_Init+0x74>)
 8002030:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002034:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002036:	4b18      	ldr	r3, [pc, #96]	; (8002098 <MX_SPI1_Init+0x74>)
 8002038:	2200      	movs	r2, #0
 800203a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800203c:	4b16      	ldr	r3, [pc, #88]	; (8002098 <MX_SPI1_Init+0x74>)
 800203e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002042:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002044:	4b14      	ldr	r3, [pc, #80]	; (8002098 <MX_SPI1_Init+0x74>)
 8002046:	2202      	movs	r2, #2
 8002048:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800204a:	4b13      	ldr	r3, [pc, #76]	; (8002098 <MX_SPI1_Init+0x74>)
 800204c:	2201      	movs	r2, #1
 800204e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002050:	4b11      	ldr	r3, [pc, #68]	; (8002098 <MX_SPI1_Init+0x74>)
 8002052:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002056:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002058:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <MX_SPI1_Init+0x74>)
 800205a:	2228      	movs	r2, #40	; 0x28
 800205c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800205e:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <MX_SPI1_Init+0x74>)
 8002060:	2200      	movs	r2, #0
 8002062:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002064:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <MX_SPI1_Init+0x74>)
 8002066:	2200      	movs	r2, #0
 8002068:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800206a:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <MX_SPI1_Init+0x74>)
 800206c:	2200      	movs	r2, #0
 800206e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002070:	4b09      	ldr	r3, [pc, #36]	; (8002098 <MX_SPI1_Init+0x74>)
 8002072:	2207      	movs	r2, #7
 8002074:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002076:	4b08      	ldr	r3, [pc, #32]	; (8002098 <MX_SPI1_Init+0x74>)
 8002078:	2200      	movs	r2, #0
 800207a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800207c:	4b06      	ldr	r3, [pc, #24]	; (8002098 <MX_SPI1_Init+0x74>)
 800207e:	2200      	movs	r2, #0
 8002080:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002082:	4805      	ldr	r0, [pc, #20]	; (8002098 <MX_SPI1_Init+0x74>)
 8002084:	f003 ffd1 	bl	800602a <HAL_SPI_Init>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800208e:	f7ff ff23 	bl	8001ed8 <Error_Handler>
  }

}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	2000041c 	.word	0x2000041c
 800209c:	40013000 	.word	0x40013000

080020a0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80020a4:	4b1b      	ldr	r3, [pc, #108]	; (8002114 <MX_SPI2_Init+0x74>)
 80020a6:	4a1c      	ldr	r2, [pc, #112]	; (8002118 <MX_SPI2_Init+0x78>)
 80020a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80020aa:	4b1a      	ldr	r3, [pc, #104]	; (8002114 <MX_SPI2_Init+0x74>)
 80020ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80020b2:	4b18      	ldr	r3, [pc, #96]	; (8002114 <MX_SPI2_Init+0x74>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80020b8:	4b16      	ldr	r3, [pc, #88]	; (8002114 <MX_SPI2_Init+0x74>)
 80020ba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80020be:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80020c0:	4b14      	ldr	r3, [pc, #80]	; (8002114 <MX_SPI2_Init+0x74>)
 80020c2:	2202      	movs	r2, #2
 80020c4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80020c6:	4b13      	ldr	r3, [pc, #76]	; (8002114 <MX_SPI2_Init+0x74>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80020cc:	4b11      	ldr	r3, [pc, #68]	; (8002114 <MX_SPI2_Init+0x74>)
 80020ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020d2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80020d4:	4b0f      	ldr	r3, [pc, #60]	; (8002114 <MX_SPI2_Init+0x74>)
 80020d6:	2228      	movs	r2, #40	; 0x28
 80020d8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020da:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <MX_SPI2_Init+0x74>)
 80020dc:	2200      	movs	r2, #0
 80020de:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80020e0:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <MX_SPI2_Init+0x74>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020e6:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <MX_SPI2_Init+0x74>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80020ec:	4b09      	ldr	r3, [pc, #36]	; (8002114 <MX_SPI2_Init+0x74>)
 80020ee:	2207      	movs	r2, #7
 80020f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80020f2:	4b08      	ldr	r3, [pc, #32]	; (8002114 <MX_SPI2_Init+0x74>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80020f8:	4b06      	ldr	r3, [pc, #24]	; (8002114 <MX_SPI2_Init+0x74>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80020fe:	4805      	ldr	r0, [pc, #20]	; (8002114 <MX_SPI2_Init+0x74>)
 8002100:	f003 ff93 	bl	800602a <HAL_SPI_Init>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800210a:	f7ff fee5 	bl	8001ed8 <Error_Handler>
  }

}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	200003b8 	.word	0x200003b8
 8002118:	40003800 	.word	0x40003800

0800211c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002124:	f107 030c 	add.w	r3, r7, #12
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	609a      	str	r2, [r3, #8]
 8002130:	60da      	str	r2, [r3, #12]
 8002132:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a1e      	ldr	r2, [pc, #120]	; (80021b4 <HAL_SPI_MspInit+0x98>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d118      	bne.n	8002170 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800213e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002142:	f7ff ff55 	bl	8001ff0 <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002146:	2001      	movs	r0, #1
 8002148:	f7ff ff20 	bl	8001f8c <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration    
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800214c:	23c2      	movs	r3, #194	; 0xc2
 800214e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002150:	2302      	movs	r3, #2
 8002152:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002154:	2301      	movs	r3, #1
 8002156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002158:	2302      	movs	r3, #2
 800215a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800215c:	2305      	movs	r3, #5
 800215e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002160:	f107 030c 	add.w	r3, r7, #12
 8002164:	4619      	mov	r1, r3
 8002166:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800216a:	f001 f86d 	bl	8003248 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800216e:	e01c      	b.n	80021aa <HAL_SPI_MspInit+0x8e>
  else if(spiHandle->Instance==SPI2)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a10      	ldr	r2, [pc, #64]	; (80021b8 <HAL_SPI_MspInit+0x9c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d117      	bne.n	80021aa <HAL_SPI_MspInit+0x8e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800217a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800217e:	f7ff ff1e 	bl	8001fbe <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002182:	2002      	movs	r0, #2
 8002184:	f7ff ff02 	bl	8001f8c <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002188:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800218c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218e:	2302      	movs	r3, #2
 8002190:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002196:	2300      	movs	r3, #0
 8002198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800219a:	2305      	movs	r3, #5
 800219c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800219e:	f107 030c 	add.w	r3, r7, #12
 80021a2:	4619      	mov	r1, r3
 80021a4:	4805      	ldr	r0, [pc, #20]	; (80021bc <HAL_SPI_MspInit+0xa0>)
 80021a6:	f001 f84f 	bl	8003248 <HAL_GPIO_Init>
}
 80021aa:	bf00      	nop
 80021ac:	3720      	adds	r7, #32
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40013000 	.word	0x40013000
 80021b8:	40003800 	.word	0x40003800
 80021bc:	48000400 	.word	0x48000400

080021c0 <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80021c4:	4b05      	ldr	r3, [pc, #20]	; (80021dc <UTIL_LPM_Init+0x1c>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80021ca:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <UTIL_LPM_Init+0x20>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	20000228 	.word	0x20000228
 80021e0:	2000022c 	.word	0x2000022c

080021e4 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80021e4:	b480      	push	{r7}
 80021e6:	b087      	sub	sp, #28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	460b      	mov	r3, r1
 80021ee:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021f0:	f3ef 8310 	mrs	r3, PRIMASK
 80021f4:	613b      	str	r3, [r7, #16]
  return(result);
 80021f6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80021f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80021fa:	b672      	cpsid	i
  
  switch(state)
 80021fc:	78fb      	ldrb	r3, [r7, #3]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d009      	beq.n	8002216 <UTIL_LPM_SetOffMode+0x32>
 8002202:	2b01      	cmp	r3, #1
 8002204:	d000      	beq.n	8002208 <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 8002206:	e00e      	b.n	8002226 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 8002208:	4b0c      	ldr	r3, [pc, #48]	; (800223c <UTIL_LPM_SetOffMode+0x58>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4313      	orrs	r3, r2
 8002210:	4a0a      	ldr	r2, [pc, #40]	; (800223c <UTIL_LPM_SetOffMode+0x58>)
 8002212:	6013      	str	r3, [r2, #0]
      break;
 8002214:	e007      	b.n	8002226 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	43da      	mvns	r2, r3
 800221a:	4b08      	ldr	r3, [pc, #32]	; (800223c <UTIL_LPM_SetOffMode+0x58>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4013      	ands	r3, r2
 8002220:	4a06      	ldr	r2, [pc, #24]	; (800223c <UTIL_LPM_SetOffMode+0x58>)
 8002222:	6013      	str	r3, [r2, #0]
      break;
 8002224:	bf00      	nop
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8002230:	bf00      	nop
 8002232:	371c      	adds	r7, #28
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	2000022c 	.word	0x2000022c

08002240 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002246:	f3ef 8310 	mrs	r3, PRIMASK
 800224a:	60bb      	str	r3, [r7, #8]
  return(result);
 800224c:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800224e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8002250:	b672      	cpsid	i

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8002252:	4b12      	ldr	r3, [pc, #72]	; (800229c <UTIL_LPM_EnterLowPower+0x5c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d006      	beq.n	8002268 <UTIL_LPM_EnterLowPower+0x28>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800225a:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <UTIL_LPM_EnterLowPower+0x60>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8002260:	4b0f      	ldr	r3, [pc, #60]	; (80022a0 <UTIL_LPM_EnterLowPower+0x60>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	4798      	blx	r3
 8002266:	e010      	b.n	800228a <UTIL_LPM_EnterLowPower+0x4a>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8002268:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <UTIL_LPM_EnterLowPower+0x64>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d006      	beq.n	800227e <UTIL_LPM_EnterLowPower+0x3e>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <UTIL_LPM_EnterLowPower+0x60>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8002276:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <UTIL_LPM_EnterLowPower+0x60>)
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	4798      	blx	r3
 800227c:	e005      	b.n	800228a <UTIL_LPM_EnterLowPower+0x4a>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 800227e:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <UTIL_LPM_EnterLowPower+0x60>)
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8002284:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <UTIL_LPM_EnterLowPower+0x60>)
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	4798      	blx	r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8002294:	bf00      	nop
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20000228 	.word	0x20000228
 80022a0:	0800b588 	.word	0x0800b588
 80022a4:	2000022c 	.word	0x2000022c

080022a8 <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode( void )
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterOffMode */

/* USER CODE END PWR_EnterOffMode */
}
 80022ac:	bf00      	nop
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode( void )
{
 80022b6:	b480      	push	{r7}
 80022b8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitOffMode */

/* USER CODE END PWR_ExitOffMode */
}
 80022ba:	bf00      	nop
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode( void )
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterStopMode */

/* USER CODE END PWR_EnterStopMode */
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode( void )
{
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitStopMode */

/* USER CODE END PWR_ExitStopMode */
}
 80022d6:	bf00      	nop
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode( void )
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode */

/* USER CODE END PWR_EnterSleepMode */
}
 80022e4:	bf00      	nop
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode( void )
{
 80022ee:	b480      	push	{r7}
 80022f0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode */

/* USER CODE END PWR_ExitSleepMode */
}
 80022f2:	bf00      	nop
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t mask_bm )
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08c      	sub	sp, #48	; 0x30
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8002304:	4b63      	ldr	r3, [pc, #396]	; (8002494 <UTIL_SEQ_Run+0x198>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= mask_bm;
 800230a:	4b62      	ldr	r3, [pc, #392]	; (8002494 <UTIL_SEQ_Run+0x198>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4013      	ands	r3, r2
 8002312:	4a60      	ldr	r2, [pc, #384]	; (8002494 <UTIL_SEQ_Run+0x198>)
 8002314:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 8002316:	e082      	b.n	800241e <UTIL_SEQ_Run+0x122>
  {
    counter = 0;
 8002318:	2300      	movs	r3, #0
 800231a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 800231c:	e002      	b.n	8002324 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 800231e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002320:	3301      	adds	r3, #1
 8002322:	62fb      	str	r3, [r7, #44]	; 0x2c
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 8002324:	4a5c      	ldr	r2, [pc, #368]	; (8002498 <UTIL_SEQ_Run+0x19c>)
 8002326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002328:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800232c:	4b5b      	ldr	r3, [pc, #364]	; (800249c <UTIL_SEQ_Run+0x1a0>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	401a      	ands	r2, r3
 8002332:	4b58      	ldr	r3, [pc, #352]	; (8002494 <UTIL_SEQ_Run+0x198>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4013      	ands	r3, r2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0f0      	beq.n	800231e <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800233c:	4a56      	ldr	r2, [pc, #344]	; (8002498 <UTIL_SEQ_Run+0x19c>)
 800233e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002340:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002344:	4b55      	ldr	r3, [pc, #340]	; (800249c <UTIL_SEQ_Run+0x1a0>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	401a      	ands	r2, r3
 800234a:	4b52      	ldr	r3, [pc, #328]	; (8002494 <UTIL_SEQ_Run+0x198>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4013      	ands	r3, r2
 8002350:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if (!(TaskPrio[counter].round_robin & current_task_set))
 8002352:	4a51      	ldr	r2, [pc, #324]	; (8002498 <UTIL_SEQ_Run+0x19c>)
 8002354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	4413      	add	r3, r2
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	4013      	ands	r3, r2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d106      	bne.n	8002372 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8002364:	4a4c      	ldr	r2, [pc, #304]	; (8002498 <UTIL_SEQ_Run+0x19c>)
 8002366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4413      	add	r3, r2
 800236c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002370:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = bit_position(current_task_set & TaskPrio[counter].round_robin);
 8002372:	4a49      	ldr	r2, [pc, #292]	; (8002498 <UTIL_SEQ_Run+0x19c>)
 8002374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	4413      	add	r3, r2
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	4013      	ands	r3, r2
 8002380:	4618      	mov	r0, r3
 8002382:	f000 f97d 	bl	8002680 <bit_position>
 8002386:	4602      	mov	r2, r0
 8002388:	4b45      	ldr	r3, [pc, #276]	; (80024a0 <UTIL_SEQ_Run+0x1a4>)
 800238a:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1 << (CurrentTaskIdx));
 800238c:	4a42      	ldr	r2, [pc, #264]	; (8002498 <UTIL_SEQ_Run+0x19c>)
 800238e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	4413      	add	r3, r2
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	4a42      	ldr	r2, [pc, #264]	; (80024a0 <UTIL_SEQ_Run+0x1a4>)
 8002398:	6812      	ldr	r2, [r2, #0]
 800239a:	2101      	movs	r1, #1
 800239c:	fa01 f202 	lsl.w	r2, r1, r2
 80023a0:	43d2      	mvns	r2, r2
 80023a2:	401a      	ands	r2, r3
 80023a4:	493c      	ldr	r1, [pc, #240]	; (8002498 <UTIL_SEQ_Run+0x19c>)
 80023a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	440b      	add	r3, r1
 80023ac:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023ae:	f3ef 8310 	mrs	r3, PRIMASK
 80023b2:	61bb      	str	r3, [r7, #24]
  return(result);
 80023b4:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80023b6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80023b8:	b672      	cpsid	i
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1 << (CurrentTaskIdx));
 80023ba:	4b39      	ldr	r3, [pc, #228]	; (80024a0 <UTIL_SEQ_Run+0x1a4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2201      	movs	r2, #1
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	43db      	mvns	r3, r3
 80023c6:	461a      	mov	r2, r3
 80023c8:	4b36      	ldr	r3, [pc, #216]	; (80024a4 <UTIL_SEQ_Run+0x1a8>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4013      	ands	r3, r2
 80023ce:	4a35      	ldr	r2, [pc, #212]	; (80024a4 <UTIL_SEQ_Run+0x1a8>)
 80023d0:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter; counter--)
 80023d2:	2302      	movs	r3, #2
 80023d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023d6:	e014      	b.n	8002402 <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1].priority &= ~(1 << (CurrentTaskIdx));
 80023d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023da:	3b01      	subs	r3, #1
 80023dc:	4a2e      	ldr	r2, [pc, #184]	; (8002498 <UTIL_SEQ_Run+0x19c>)
 80023de:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80023e2:	4b2f      	ldr	r3, [pc, #188]	; (80024a0 <UTIL_SEQ_Run+0x1a4>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2101      	movs	r1, #1
 80023e8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	4619      	mov	r1, r3
 80023f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f2:	3b01      	subs	r3, #1
 80023f4:	400a      	ands	r2, r1
 80023f6:	4928      	ldr	r1, [pc, #160]	; (8002498 <UTIL_SEQ_Run+0x19c>)
 80023f8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter; counter--)
 80023fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fe:	3b01      	subs	r3, #1
 8002400:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1e7      	bne.n	80023d8 <UTIL_SEQ_Run+0xdc>
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	f383 8810 	msr	PRIMASK, r3
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8002412:	4b23      	ldr	r3, [pc, #140]	; (80024a0 <UTIL_SEQ_Run+0x1a4>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a24      	ldr	r2, [pc, #144]	; (80024a8 <UTIL_SEQ_Run+0x1ac>)
 8002418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800241c:	4798      	blx	r3
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 800241e:	4b21      	ldr	r3, [pc, #132]	; (80024a4 <UTIL_SEQ_Run+0x1a8>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	4b1e      	ldr	r3, [pc, #120]	; (800249c <UTIL_SEQ_Run+0x1a0>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	401a      	ands	r2, r3
 8002428:	4b1a      	ldr	r3, [pc, #104]	; (8002494 <UTIL_SEQ_Run+0x198>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4013      	ands	r3, r2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d007      	beq.n	8002442 <UTIL_SEQ_Run+0x146>
 8002432:	4b1e      	ldr	r3, [pc, #120]	; (80024ac <UTIL_SEQ_Run+0x1b0>)
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	4b1e      	ldr	r3, [pc, #120]	; (80024b0 <UTIL_SEQ_Run+0x1b4>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4013      	ands	r3, r2
 800243c:	2b00      	cmp	r3, #0
 800243e:	f43f af6b 	beq.w	8002318 <UTIL_SEQ_Run+0x1c>
  }

  UTIL_SEQ_PreIdle( );
 8002442:	f000 f90f 	bl	8002664 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002446:	f3ef 8310 	mrs	r3, PRIMASK
 800244a:	613b      	str	r3, [r7, #16]
  return(result);
 800244c:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800244e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8002450:	b672      	cpsid	i
  if (!((TaskSet & TaskMask & SuperMask) || (EvtSet & EvtWaited)))
 8002452:	4b14      	ldr	r3, [pc, #80]	; (80024a4 <UTIL_SEQ_Run+0x1a8>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	4b11      	ldr	r3, [pc, #68]	; (800249c <UTIL_SEQ_Run+0x1a0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	401a      	ands	r2, r3
 800245c:	4b0d      	ldr	r3, [pc, #52]	; (8002494 <UTIL_SEQ_Run+0x198>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4013      	ands	r3, r2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d108      	bne.n	8002478 <UTIL_SEQ_Run+0x17c>
 8002466:	4b11      	ldr	r3, [pc, #68]	; (80024ac <UTIL_SEQ_Run+0x1b0>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <UTIL_SEQ_Run+0x1b4>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4013      	ands	r3, r2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <UTIL_SEQ_Run+0x17c>
  {
    UTIL_SEQ_Idle( );
 8002474:	f7fe fb3f 	bl	8000af6 <UTIL_SEQ_Idle>
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f383 8810 	msr	PRIMASK, r3
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  
  UTIL_SEQ_PostIdle( );
 8002482:	f000 f8f6 	bl	8002672 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8002486:	4a03      	ldr	r2, [pc, #12]	; (8002494 <UTIL_SEQ_Run+0x198>)
 8002488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800248a:	6013      	str	r3, [r2, #0]

  return;
 800248c:	bf00      	nop
}
 800248e:	3730      	adds	r7, #48	; 0x30
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	2000000c 	.word	0x2000000c
 8002498:	200002c0 	.word	0x200002c0
 800249c:	20000008 	.word	0x20000008
 80024a0:	2000023c 	.word	0x2000023c
 80024a4:	20000230 	.word	0x20000230
 80024a8:	20000240 	.word	0x20000240
 80024ac:	20000234 	.word	0x20000234
 80024b0:	20000238 	.word	0x20000238

080024b4 <UTIL_SEQ_RegTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_RegTask( UTIL_SEQ_bm_t task_id_bm , uint32_t flags, void (*task)( void ) )
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b088      	sub	sp, #32
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024c0:	f3ef 8310 	mrs	r3, PRIMASK
 80024c4:	617b      	str	r3, [r7, #20]
  return(result);
 80024c6:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80024c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80024ca:	b672      	cpsid	i

  TaskCb[bit_position(task_id_bm)] = task;
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f000 f8d7 	bl	8002680 <bit_position>
 80024d2:	4601      	mov	r1, r0
 80024d4:	4a06      	ldr	r2, [pc, #24]	; (80024f0 <UTIL_SEQ_RegTask+0x3c>)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80024e6:	bf00      	nop
}
 80024e8:	3720      	adds	r7, #32
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000240 	.word	0x20000240

080024f4 <UTIL_SEQ_SetTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t task_id_bm , uint32_t task_prio )
{
 80024f4:	b480      	push	{r7}
 80024f6:	b087      	sub	sp, #28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024fe:	f3ef 8310 	mrs	r3, PRIMASK
 8002502:	60fb      	str	r3, [r7, #12]
  return(result);
 8002504:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8002506:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002508:	b672      	cpsid	i

  TaskSet |= task_id_bm;
 800250a:	4b0d      	ldr	r3, [pc, #52]	; (8002540 <UTIL_SEQ_SetTask+0x4c>)
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4313      	orrs	r3, r2
 8002512:	4a0b      	ldr	r2, [pc, #44]	; (8002540 <UTIL_SEQ_SetTask+0x4c>)
 8002514:	6013      	str	r3, [r2, #0]
  TaskPrio[task_prio].priority |= task_id_bm;
 8002516:	4a0b      	ldr	r2, [pc, #44]	; (8002544 <UTIL_SEQ_SetTask+0x50>)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	431a      	orrs	r2, r3
 8002522:	4908      	ldr	r1, [pc, #32]	; (8002544 <UTIL_SEQ_SetTask+0x50>)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8002534:	bf00      	nop
}
 8002536:	371c      	adds	r7, #28
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	20000230 	.word	0x20000230
 8002544:	200002c0 	.word	0x200002c0

08002548 <UTIL_SEQ_PauseTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t task_id_bm )
{
 8002548:	b480      	push	{r7}
 800254a:	b087      	sub	sp, #28
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002550:	f3ef 8310 	mrs	r3, PRIMASK
 8002554:	60fb      	str	r3, [r7, #12]
  return(result);
 8002556:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8002558:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800255a:	b672      	cpsid	i

  TaskMask &= (~task_id_bm);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	43da      	mvns	r2, r3
 8002560:	4b07      	ldr	r3, [pc, #28]	; (8002580 <UTIL_SEQ_PauseTask+0x38>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4013      	ands	r3, r2
 8002566:	4a06      	ldr	r2, [pc, #24]	; (8002580 <UTIL_SEQ_PauseTask+0x38>)
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8002574:	bf00      	nop
}
 8002576:	371c      	adds	r7, #28
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	20000008 	.word	0x20000008

08002584 <UTIL_SEQ_ResumeTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t task_id_bm )
{
 8002584:	b480      	push	{r7}
 8002586:	b087      	sub	sp, #28
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800258c:	f3ef 8310 	mrs	r3, PRIMASK
 8002590:	60fb      	str	r3, [r7, #12]
  return(result);
 8002592:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8002594:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002596:	b672      	cpsid	i

  TaskMask |= task_id_bm;
 8002598:	4b08      	ldr	r3, [pc, #32]	; (80025bc <UTIL_SEQ_ResumeTask+0x38>)
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4313      	orrs	r3, r2
 80025a0:	4a06      	ldr	r2, [pc, #24]	; (80025bc <UTIL_SEQ_ResumeTask+0x38>)
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80025ae:	bf00      	nop
}
 80025b0:	371c      	adds	r7, #28
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	20000008 	.word	0x20000008

080025c0 <UTIL_SEQ_SetEvt>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t evt_id_bm )
{
 80025c0:	b480      	push	{r7}
 80025c2:	b087      	sub	sp, #28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025c8:	f3ef 8310 	mrs	r3, PRIMASK
 80025cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80025ce:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80025d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80025d2:	b672      	cpsid	i

  EvtSet |= evt_id_bm;
 80025d4:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <UTIL_SEQ_SetEvt+0x38>)
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4313      	orrs	r3, r2
 80025dc:	4a06      	ldr	r2, [pc, #24]	; (80025f8 <UTIL_SEQ_SetEvt+0x38>)
 80025de:	6013      	str	r3, [r2, #0]
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80025ea:	bf00      	nop
}
 80025ec:	371c      	adds	r7, #28
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	20000234 	.word	0x20000234

080025fc <UTIL_SEQ_WaitEvt>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_WaitEvt( UTIL_SEQ_bm_t evt_id_bm )
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_id_bm;

  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_id_bm = (1 << CurrentTaskIdx);
 8002604:	4b14      	ldr	r3, [pc, #80]	; (8002658 <UTIL_SEQ_WaitEvt+0x5c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2201      	movs	r2, #1
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	60fb      	str	r3, [r7, #12]

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8002610:	4b12      	ldr	r3, [pc, #72]	; (800265c <UTIL_SEQ_WaitEvt+0x60>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	60bb      	str	r3, [r7, #8]
  EvtWaited = evt_id_bm;
 8002616:	4a11      	ldr	r2, [pc, #68]	; (800265c <UTIL_SEQ_WaitEvt+0x60>)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again fro the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while((EvtSet & EvtWaited) == 0)
 800261c:	e005      	b.n	800262a <UTIL_SEQ_WaitEvt+0x2e>
  {
    UTIL_SEQ_EvtIdle(current_task_id_bm, EvtWaited);
 800261e:	4b0f      	ldr	r3, [pc, #60]	; (800265c <UTIL_SEQ_WaitEvt+0x60>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4619      	mov	r1, r3
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f7fe fa6c 	bl	8000b02 <UTIL_SEQ_EvtIdle>
  while((EvtSet & EvtWaited) == 0)
 800262a:	4b0d      	ldr	r3, [pc, #52]	; (8002660 <UTIL_SEQ_WaitEvt+0x64>)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	4b0b      	ldr	r3, [pc, #44]	; (800265c <UTIL_SEQ_WaitEvt+0x60>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4013      	ands	r3, r2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0f2      	beq.n	800261e <UTIL_SEQ_WaitEvt+0x22>
  }
  EvtSet &= (~EvtWaited);
 8002638:	4b08      	ldr	r3, [pc, #32]	; (800265c <UTIL_SEQ_WaitEvt+0x60>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	43da      	mvns	r2, r3
 800263e:	4b08      	ldr	r3, [pc, #32]	; (8002660 <UTIL_SEQ_WaitEvt+0x64>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4013      	ands	r3, r2
 8002644:	4a06      	ldr	r2, [pc, #24]	; (8002660 <UTIL_SEQ_WaitEvt+0x64>)
 8002646:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 8002648:	4a04      	ldr	r2, [pc, #16]	; (800265c <UTIL_SEQ_WaitEvt+0x60>)
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	6013      	str	r3, [r2, #0]

  return;
 800264e:	bf00      	nop
}
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	2000023c 	.word	0x2000023c
 800265c:	20000238 	.word	0x20000238
 8002660:	20000234 	.word	0x20000234

08002664 <UTIL_SEQ_PreIdle>:
   */
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8002668:	bf00      	nop
}
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8002672:	b480      	push	{r7}
 8002674:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8002676:	bf00      	nop
}
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <bit_position>:

#if( __CORTEX_M == 0)
static const uint8_t clz_table_4bit[16] = { 4, 3, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 };	
static uint32_t bit_position(uint32_t value)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]

  uint32_t n = 0;
 8002688:	2300      	movs	r3, #0
 800268a:	60fb      	str	r3, [r7, #12]

  if ((value & 0xFFFF0000) == 0)  { n  = 16; value <<= 16;  }
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	0c1b      	lsrs	r3, r3, #16
 8002690:	041b      	lsls	r3, r3, #16
 8002692:	2b00      	cmp	r3, #0
 8002694:	d104      	bne.n	80026a0 <bit_position+0x20>
 8002696:	2310      	movs	r3, #16
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	041b      	lsls	r3, r3, #16
 800269e:	607b      	str	r3, [r7, #4]
  if ((value & 0xFF000000) == 0)  { n +=  8; value <<=  8;  }
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d105      	bne.n	80026b6 <bit_position+0x36>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	3308      	adds	r3, #8
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	021b      	lsls	r3, r3, #8
 80026b4:	607b      	str	r3, [r7, #4]
  if ((value & 0xF0000000) == 0)  { n +=  4; value <<=  4;  }
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d105      	bne.n	80026cc <bit_position+0x4c>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	3304      	adds	r3, #4
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	011b      	lsls	r3, r3, #4
 80026ca:	607b      	str	r3, [r7, #4]

  n += (uint32_t)clz_table_4bit[value >> (32-4)];
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	0f1b      	lsrs	r3, r3, #28
 80026d0:	4a07      	ldr	r2, [pc, #28]	; (80026f0 <bit_position+0x70>)
 80026d2:	5cd3      	ldrb	r3, [r2, r3]
 80026d4:	461a      	mov	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4413      	add	r3, r2
 80026da:	60fb      	str	r3, [r7, #12]

  return (31-n);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f1c3 031f 	rsb	r3, r3, #31
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	0800b5a0 	.word	0x0800b5a0

080026f4 <LL_RCC_HSE_SetCapacitorTuning>:
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80026fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002700:	4a0a      	ldr	r2, [pc, #40]	; (800272c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8002702:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8002706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800270a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800270e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	021b      	lsls	r3, r3, #8
 8002716:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800271a:	4313      	orrs	r3, r2
 800271c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	cafecafe 	.word	0xcafecafe

08002730 <LL_AHB3_GRP1_EnableClock>:
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800273c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800273e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4313      	orrs	r3, r2
 8002746:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800274c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4013      	ands	r3, r2
 8002752:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002754:	68fb      	ldr	r3, [r7, #12]
}
 8002756:	bf00      	nop
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0

	OTP_ID0_t * p_otp;
	/**
	* Read HSE_Tuning from OTP
	*/
	p_otp = (OTP_ID0_t *) OTP_Read(0);
 8002768:	2000      	movs	r0, #0
 800276a:	f007 fa6d 	bl	8009c48 <OTP_Read>
 800276e:	6078      	str	r0, [r7, #4]
	if (p_otp)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d004      	beq.n	8002780 <HAL_MspInit+0x1e>
	{
		LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	799b      	ldrb	r3, [r3, #6]
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff ffba 	bl	80026f4 <LL_RCC_HSE_SetCapacitorTuning>
	}
  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002780:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002784:	f7ff ffd4 	bl	8002730 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002788:	2200      	movs	r2, #0
 800278a:	2100      	movs	r1, #0
 800278c:	202e      	movs	r0, #46	; 0x2e
 800278e:	f000 fcfc 	bl	800318a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002792:	202e      	movs	r0, #46	; 0x2e
 8002794:	f000 fd13 	bl	80031be <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002798:	bf00      	nop
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80027a4:	bf00      	nop
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ae:	b480      	push	{r7}
 80027b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027b2:	e7fe      	b.n	80027b2 <HardFault_Handler+0x4>

080027b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027b8:	e7fe      	b.n	80027b8 <MemManage_Handler+0x4>

080027ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027ba:	b480      	push	{r7}
 80027bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027be:	e7fe      	b.n	80027be <BusFault_Handler+0x4>

080027c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027c4:	e7fe      	b.n	80027c4 <UsageFault_Handler+0x4>

080027c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027c6:	b480      	push	{r7}
 80027c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027ca:	bf00      	nop
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027e2:	b480      	push	{r7}
 80027e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027f4:	f000 fb44 	bl	8002e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027f8:	bf00      	nop
 80027fa:	bd80      	pop	{r7, pc}

080027fc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002800:	4802      	ldr	r0, [pc, #8]	; (800280c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002802:	f004 fb07 	bl	8006e14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20000480 	.word	0x20000480

08002810 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002814:	f000 fea0 	bl	8003558 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002818:	bf00      	nop
 800281a:	bd80      	pop	{r7, pc}

0800281c <RTC_WKUP_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
* @brief This function handles RTC wake-up interrupt through EXTI line 19.
*/
void RTC_WKUP_IRQHandler(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
	HW_TS_RTC_Wakeup_Handler();
 8002820:	f7fe fdb0 	bl	8001384 <HW_TS_RTC_Wakeup_Handler>
}
 8002824:	bf00      	nop
 8002826:	bd80      	pop	{r7, pc}

08002828 <IPCC_C1_RX_IRQHandler>:
/**
* @brief This function handles IPCC RX occupied interrupt.
*/
void IPCC_C1_RX_IRQHandler(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
	HW_IPCC_Rx_Handler();
 800282c:	f008 fce6 	bl	800b1fc <HW_IPCC_Rx_Handler>
}
 8002830:	bf00      	nop
 8002832:	bd80      	pop	{r7, pc}

08002834 <IPCC_C1_TX_IRQHandler>:
/**
* @brief This function handles IPCC TX free interrupt.
*/
void IPCC_C1_TX_IRQHandler(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
	HW_IPCC_Tx_Handler();
 8002838:	f008 fd18 	bl	800b26c <HW_IPCC_Tx_Handler>
}
 800283c:	bf00      	nop
 800283e:	bd80      	pop	{r7, pc}

08002840 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8002844:	4b26      	ldr	r3, [pc, #152]	; (80028e0 <SystemInit+0xa0>)
 8002846:	2200      	movs	r2, #0
 8002848:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800284a:	4b25      	ldr	r3, [pc, #148]	; (80028e0 <SystemInit+0xa0>)
 800284c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002850:	4a23      	ldr	r2, [pc, #140]	; (80028e0 <SystemInit+0xa0>)
 8002852:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002856:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800285a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800286a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800286e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002872:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800287e:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <SystemInit+0xa4>)
 8002880:	4013      	ands	r3, r2
 8002882:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002888:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800288c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002890:	f023 0305 	bic.w	r3, r3, #5
 8002894:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800289c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028a4:	f023 0301 	bic.w	r3, r3, #1
 80028a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80028ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028b0:	4a0d      	ldr	r2, [pc, #52]	; (80028e8 <SystemInit+0xa8>)
 80028b2:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80028b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028b8:	4a0b      	ldr	r2, [pc, #44]	; (80028e8 <SystemInit+0xa8>)
 80028ba:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80028bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80028cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d0:	2200      	movs	r2, #0
 80028d2:	619a      	str	r2, [r3, #24]
}
 80028d4:	bf00      	nop
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	e000ed00 	.word	0xe000ed00
 80028e4:	faf6fefb 	.word	0xfaf6fefb
 80028e8:	22041000 	.word	0x22041000

080028ec <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b087      	sub	sp, #28
 80028f0:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 80028f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	091b      	lsrs	r3, r3, #4
 80028fa:	f003 030f 	and.w	r3, r3, #15
 80028fe:	4a47      	ldr	r2, [pc, #284]	; (8002a1c <SystemCoreClockUpdate+0x130>)
 8002900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002904:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 030c 	and.w	r3, r3, #12
 8002910:	2b0c      	cmp	r3, #12
 8002912:	d867      	bhi.n	80029e4 <SystemCoreClockUpdate+0xf8>
 8002914:	a201      	add	r2, pc, #4	; (adr r2, 800291c <SystemCoreClockUpdate+0x30>)
 8002916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800291a:	bf00      	nop
 800291c:	08002951 	.word	0x08002951
 8002920:	080029e5 	.word	0x080029e5
 8002924:	080029e5 	.word	0x080029e5
 8002928:	080029e5 	.word	0x080029e5
 800292c:	08002959 	.word	0x08002959
 8002930:	080029e5 	.word	0x080029e5
 8002934:	080029e5 	.word	0x080029e5
 8002938:	080029e5 	.word	0x080029e5
 800293c:	08002961 	.word	0x08002961
 8002940:	080029e5 	.word	0x080029e5
 8002944:	080029e5 	.word	0x080029e5
 8002948:	080029e5 	.word	0x080029e5
 800294c:	08002969 	.word	0x08002969
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8002950:	4a33      	ldr	r2, [pc, #204]	; (8002a20 <SystemCoreClockUpdate+0x134>)
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	6013      	str	r3, [r2, #0]
      break;
 8002956:	e049      	b.n	80029ec <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8002958:	4b31      	ldr	r3, [pc, #196]	; (8002a20 <SystemCoreClockUpdate+0x134>)
 800295a:	4a32      	ldr	r2, [pc, #200]	; (8002a24 <SystemCoreClockUpdate+0x138>)
 800295c:	601a      	str	r2, [r3, #0]
      break;
 800295e:	e045      	b.n	80029ec <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002960:	4b2f      	ldr	r3, [pc, #188]	; (8002a20 <SystemCoreClockUpdate+0x134>)
 8002962:	4a31      	ldr	r2, [pc, #196]	; (8002a28 <SystemCoreClockUpdate+0x13c>)
 8002964:	601a      	str	r2, [r3, #0]
      break;
 8002966:	e041      	b.n	80029ec <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8002974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	091b      	lsrs	r3, r3, #4
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	3301      	adds	r3, #1
 8002982:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2b02      	cmp	r3, #2
 8002988:	d105      	bne.n	8002996 <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 800298a:	4a26      	ldr	r2, [pc, #152]	; (8002a24 <SystemCoreClockUpdate+0x138>)
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002992:	617b      	str	r3, [r7, #20]
 8002994:	e00d      	b.n	80029b2 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2b03      	cmp	r3, #3
 800299a:	d105      	bne.n	80029a8 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 800299c:	4a22      	ldr	r2, [pc, #136]	; (8002a28 <SystemCoreClockUpdate+0x13c>)
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a4:	617b      	str	r3, [r7, #20]
 80029a6:	e004      	b.n	80029b2 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b0:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	0a1b      	lsrs	r3, r3, #8
 80029ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	fb02 f303 	mul.w	r3, r2, r3
 80029c4:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 80029c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	0f5b      	lsrs	r3, r3, #29
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	3301      	adds	r3, #1
 80029d4:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	fbb2 f3f3 	udiv	r3, r2, r3
 80029de:	4a10      	ldr	r2, [pc, #64]	; (8002a20 <SystemCoreClockUpdate+0x134>)
 80029e0:	6013      	str	r3, [r2, #0]
      break;
 80029e2:	e003      	b.n	80029ec <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 80029e4:	4a0e      	ldr	r2, [pc, #56]	; (8002a20 <SystemCoreClockUpdate+0x134>)
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	6013      	str	r3, [r2, #0]
      break;
 80029ea:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80029ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	091b      	lsrs	r3, r3, #4
 80029f4:	f003 030f 	and.w	r3, r3, #15
 80029f8:	4a0c      	ldr	r2, [pc, #48]	; (8002a2c <SystemCoreClockUpdate+0x140>)
 80029fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029fe:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8002a00:	4b07      	ldr	r3, [pc, #28]	; (8002a20 <SystemCoreClockUpdate+0x134>)
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0a:	4a05      	ldr	r2, [pc, #20]	; (8002a20 <SystemCoreClockUpdate+0x134>)
 8002a0c:	6013      	str	r3, [r2, #0]

}
 8002a0e:	bf00      	nop
 8002a10:	371c      	adds	r7, #28
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	0800b610 	.word	0x0800b610
 8002a20:	20000010 	.word	0x20000010
 8002a24:	00f42400 	.word	0x00f42400
 8002a28:	01e84800 	.word	0x01e84800
 8002a2c:	0800b5b0 	.word	0x0800b5b0

08002a30 <LL_APB2_GRP1_EnableClock>:
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a4c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4013      	ands	r3, r2
 8002a52:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a54:	68fb      	ldr	r3, [r7, #12]
}
 8002a56:	bf00      	nop
 8002a58:	3714      	adds	r7, #20
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
	...

08002a64 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8002a68:	4b10      	ldr	r3, [pc, #64]	; (8002aac <MX_TIM16_Init+0x48>)
 8002a6a:	4a11      	ldr	r2, [pc, #68]	; (8002ab0 <MX_TIM16_Init+0x4c>)
 8002a6c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1000;
 8002a6e:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <MX_TIM16_Init+0x48>)
 8002a70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a74:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a76:	4b0d      	ldr	r3, [pc, #52]	; (8002aac <MX_TIM16_Init+0x48>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 800;
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <MX_TIM16_Init+0x48>)
 8002a7e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002a82:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a84:	4b09      	ldr	r3, [pc, #36]	; (8002aac <MX_TIM16_Init+0x48>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002a8a:	4b08      	ldr	r3, [pc, #32]	; (8002aac <MX_TIM16_Init+0x48>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a90:	4b06      	ldr	r3, [pc, #24]	; (8002aac <MX_TIM16_Init+0x48>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002a96:	4805      	ldr	r0, [pc, #20]	; (8002aac <MX_TIM16_Init+0x48>)
 8002a98:	f004 f967 	bl	8006d6a <HAL_TIM_Base_Init>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8002aa2:	f7ff fa19 	bl	8001ed8 <Error_Handler>
  }

}
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20000480 	.word	0x20000480
 8002ab0:	40014400 	.word	0x40014400

08002ab4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a09      	ldr	r2, [pc, #36]	; (8002ae8 <HAL_TIM_Base_MspInit+0x34>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d10b      	bne.n	8002ade <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002ac6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002aca:	f7ff ffb1 	bl	8002a30 <LL_APB2_GRP1_EnableClock>

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	2019      	movs	r0, #25
 8002ad4:	f000 fb59 	bl	800318a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002ad8:	2019      	movs	r0, #25
 8002ada:	f000 fb70 	bl	80031be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8002ade:	bf00      	nop
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40014400 	.word	0x40014400

08002aec <LL_AHB2_GRP1_EnableClock>:
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002af8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002afa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b10:	68fb      	ldr	r3, [r7, #12]
}
 8002b12:	bf00      	nop
 8002b14:	3714      	adds	r7, #20
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <LL_APB2_GRP1_EnableClock>:
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b085      	sub	sp, #20
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b2a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b3a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b42:	68fb      	ldr	r3, [r7, #12]
}
 8002b44:	bf00      	nop
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002b54:	4b22      	ldr	r3, [pc, #136]	; (8002be0 <MX_USART1_UART_Init+0x90>)
 8002b56:	4a23      	ldr	r2, [pc, #140]	; (8002be4 <MX_USART1_UART_Init+0x94>)
 8002b58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b5a:	4b21      	ldr	r3, [pc, #132]	; (8002be0 <MX_USART1_UART_Init+0x90>)
 8002b5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b62:	4b1f      	ldr	r3, [pc, #124]	; (8002be0 <MX_USART1_UART_Init+0x90>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b68:	4b1d      	ldr	r3, [pc, #116]	; (8002be0 <MX_USART1_UART_Init+0x90>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b6e:	4b1c      	ldr	r3, [pc, #112]	; (8002be0 <MX_USART1_UART_Init+0x90>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b74:	4b1a      	ldr	r3, [pc, #104]	; (8002be0 <MX_USART1_UART_Init+0x90>)
 8002b76:	220c      	movs	r2, #12
 8002b78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b7a:	4b19      	ldr	r3, [pc, #100]	; (8002be0 <MX_USART1_UART_Init+0x90>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b80:	4b17      	ldr	r3, [pc, #92]	; (8002be0 <MX_USART1_UART_Init+0x90>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b86:	4b16      	ldr	r3, [pc, #88]	; (8002be0 <MX_USART1_UART_Init+0x90>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b8c:	4b14      	ldr	r3, [pc, #80]	; (8002be0 <MX_USART1_UART_Init+0x90>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b92:	4b13      	ldr	r3, [pc, #76]	; (8002be0 <MX_USART1_UART_Init+0x90>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b98:	4811      	ldr	r0, [pc, #68]	; (8002be0 <MX_USART1_UART_Init+0x90>)
 8002b9a:	f004 fb25 	bl	80071e8 <HAL_UART_Init>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002ba4:	f7ff f998 	bl	8001ed8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ba8:	2100      	movs	r1, #0
 8002baa:	480d      	ldr	r0, [pc, #52]	; (8002be0 <MX_USART1_UART_Init+0x90>)
 8002bac:	f005 fd73 	bl	8008696 <HAL_UARTEx_SetTxFifoThreshold>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002bb6:	f7ff f98f 	bl	8001ed8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bba:	2100      	movs	r1, #0
 8002bbc:	4808      	ldr	r0, [pc, #32]	; (8002be0 <MX_USART1_UART_Init+0x90>)
 8002bbe:	f005 fda8 	bl	8008712 <HAL_UARTEx_SetRxFifoThreshold>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002bc8:	f7ff f986 	bl	8001ed8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002bcc:	4804      	ldr	r0, [pc, #16]	; (8002be0 <MX_USART1_UART_Init+0x90>)
 8002bce:	f005 fd29 	bl	8008624 <HAL_UARTEx_DisableFifoMode>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002bd8:	f7ff f97e 	bl	8001ed8 <Error_Handler>
  }

}
 8002bdc:	bf00      	nop
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	200004c0 	.word	0x200004c0
 8002be4:	40013800 	.word	0x40013800

08002be8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf0:	f107 030c 	add.w	r3, r7, #12
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	60da      	str	r2, [r3, #12]
 8002bfe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a0e      	ldr	r2, [pc, #56]	; (8002c40 <HAL_UART_MspInit+0x58>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d116      	bne.n	8002c38 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c0a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002c0e:	f7ff ff86 	bl	8002b1e <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c12:	2002      	movs	r0, #2
 8002c14:	f7ff ff6a 	bl	8002aec <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002c18:	23c0      	movs	r3, #192	; 0xc0
 8002c1a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c20:	2300      	movs	r3, #0
 8002c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c24:	2300      	movs	r3, #0
 8002c26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c28:	2307      	movs	r3, #7
 8002c2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c2c:	f107 030c 	add.w	r3, r7, #12
 8002c30:	4619      	mov	r1, r3
 8002c32:	4804      	ldr	r0, [pc, #16]	; (8002c44 <HAL_UART_MspInit+0x5c>)
 8002c34:	f000 fb08 	bl	8003248 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002c38:	bf00      	nop
 8002c3a:	3720      	adds	r7, #32
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40013800 	.word	0x40013800
 8002c44:	48000400 	.word	0x48000400

08002c48 <LL_AHB2_GRP1_EnableClock>:
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
}
 8002c6e:	bf00      	nop
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <LL_APB1_GRP1_EnableClock>:
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b085      	sub	sp, #20
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c86:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c96:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ca0:	bf00      	nop
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0

  hpcd_USB_FS.Instance = USB;
 8002cb0:	4b10      	ldr	r3, [pc, #64]	; (8002cf4 <MX_USB_PCD_Init+0x48>)
 8002cb2:	4a11      	ldr	r2, [pc, #68]	; (8002cf8 <MX_USB_PCD_Init+0x4c>)
 8002cb4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002cb6:	4b0f      	ldr	r3, [pc, #60]	; (8002cf4 <MX_USB_PCD_Init+0x48>)
 8002cb8:	2208      	movs	r2, #8
 8002cba:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002cbc:	4b0d      	ldr	r3, [pc, #52]	; (8002cf4 <MX_USB_PCD_Init+0x48>)
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002cc2:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <MX_USB_PCD_Init+0x48>)
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8002cc8:	4b0a      	ldr	r3, [pc, #40]	; (8002cf4 <MX_USB_PCD_Init+0x48>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002cce:	4b09      	ldr	r3, [pc, #36]	; (8002cf4 <MX_USB_PCD_Init+0x48>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002cd4:	4b07      	ldr	r3, [pc, #28]	; (8002cf4 <MX_USB_PCD_Init+0x48>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002cda:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <MX_USB_PCD_Init+0x48>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002ce0:	4804      	ldr	r0, [pc, #16]	; (8002cf4 <MX_USB_PCD_Init+0x48>)
 8002ce2:	f001 f94e 	bl	8003f82 <HAL_PCD_Init>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8002cec:	f7ff f8f4 	bl	8001ed8 <Error_Handler>
  }

}
 8002cf0:	bf00      	nop
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	2000054c 	.word	0x2000054c
 8002cf8:	40006800 	.word	0x40006800

08002cfc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b088      	sub	sp, #32
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d04:	f107 030c 	add.w	r3, r7, #12
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	605a      	str	r2, [r3, #4]
 8002d0e:	609a      	str	r2, [r3, #8]
 8002d10:	60da      	str	r2, [r3, #12]
 8002d12:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a0f      	ldr	r2, [pc, #60]	; (8002d58 <HAL_PCD_MspInit+0x5c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d118      	bne.n	8002d50 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d1e:	2001      	movs	r0, #1
 8002d20:	f7ff ff92 	bl	8002c48 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002d24:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002d28:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d32:	2300      	movs	r3, #0
 8002d34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002d36:	230a      	movs	r3, #10
 8002d38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d3a:	f107 030c 	add.w	r3, r7, #12
 8002d3e:	4619      	mov	r1, r3
 8002d40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d44:	f000 fa80 	bl	8003248 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002d48:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002d4c:	f7ff ff95 	bl	8002c7a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8002d50:	bf00      	nop
 8002d52:	3720      	adds	r7, #32
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40006800 	.word	0x40006800

08002d5c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002d5c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d5e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d60:	3304      	adds	r3, #4

08002d62 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d62:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d64:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002d66:	d3f9      	bcc.n	8002d5c <CopyDataInit>
  bx lr
 8002d68:	4770      	bx	lr

08002d6a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002d6a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002d6c:	3004      	adds	r0, #4

08002d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002d6e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002d70:	d3fb      	bcc.n	8002d6a <FillZerobss>
  bx lr
 8002d72:	4770      	bx	lr

08002d74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d74:	480c      	ldr	r0, [pc, #48]	; (8002da8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002d76:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002d78:	480c      	ldr	r0, [pc, #48]	; (8002dac <LoopForever+0x8>)
 8002d7a:	490d      	ldr	r1, [pc, #52]	; (8002db0 <LoopForever+0xc>)
 8002d7c:	4a0d      	ldr	r2, [pc, #52]	; (8002db4 <LoopForever+0x10>)
 8002d7e:	2300      	movs	r3, #0
 8002d80:	f7ff ffef 	bl	8002d62 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002d84:	480c      	ldr	r0, [pc, #48]	; (8002db8 <LoopForever+0x14>)
 8002d86:	490d      	ldr	r1, [pc, #52]	; (8002dbc <LoopForever+0x18>)
 8002d88:	2300      	movs	r3, #0
 8002d8a:	f7ff fff0 	bl	8002d6e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002d8e:	480c      	ldr	r0, [pc, #48]	; (8002dc0 <LoopForever+0x1c>)
 8002d90:	490c      	ldr	r1, [pc, #48]	; (8002dc4 <LoopForever+0x20>)
 8002d92:	2300      	movs	r3, #0
 8002d94:	f7ff ffeb 	bl	8002d6e <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002d98:	f7ff fd52 	bl	8002840 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002d9c:	f008 fb76 	bl	800b48c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002da0:	f7fe feec 	bl	8001b7c <main>

08002da4 <LoopForever>:

LoopForever:
  b LoopForever
 8002da4:	e7fe      	b.n	8002da4 <LoopForever>
 8002da6:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002da8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002dac:	20000004 	.word	0x20000004
 8002db0:	2000002c 	.word	0x2000002c
 8002db4:	0800b690 	.word	0x0800b690
  INIT_BSS _sbss, _ebss
 8002db8:	200001c4 	.word	0x200001c4
 8002dbc:	200007c8 	.word	0x200007c8
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002dc0:	200301c4 	.word	0x200301c4
 8002dc4:	20030a44 	.word	0x20030a44

08002dc8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002dc8:	e7fe      	b.n	8002dc8 <ADC1_IRQHandler>
	...

08002dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dd6:	4b0c      	ldr	r3, [pc, #48]	; (8002e08 <HAL_Init+0x3c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a0b      	ldr	r2, [pc, #44]	; (8002e08 <HAL_Init+0x3c>)
 8002ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002de2:	2003      	movs	r0, #3
 8002de4:	f000 f9c6 	bl	8003174 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002de8:	2000      	movs	r0, #0
 8002dea:	f000 f80f 	bl	8002e0c <HAL_InitTick>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d002      	beq.n	8002dfa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	71fb      	strb	r3, [r7, #7]
 8002df8:	e001      	b.n	8002dfe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002dfa:	f7ff fcb2 	bl	8002762 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002dfe:	79fb      	ldrb	r3, [r7, #7]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	58004000 	.word	0x58004000

08002e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e14:	2300      	movs	r3, #0
 8002e16:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002e18:	4b17      	ldr	r3, [pc, #92]	; (8002e78 <HAL_InitTick+0x6c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d023      	beq.n	8002e68 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 8002e20:	f002 fa4a 	bl	80052b8 <HAL_RCC_GetHCLKFreq>
 8002e24:	4601      	mov	r1, r0
 8002e26:	4b14      	ldr	r3, [pc, #80]	; (8002e78 <HAL_InitTick+0x6c>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e32:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 f9dd 	bl	80031f6 <HAL_SYSTICK_Config>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10f      	bne.n	8002e62 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b0f      	cmp	r3, #15
 8002e46:	d809      	bhi.n	8002e5c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e48:	2200      	movs	r2, #0
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e50:	f000 f99b 	bl	800318a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e54:	4a09      	ldr	r2, [pc, #36]	; (8002e7c <HAL_InitTick+0x70>)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	e007      	b.n	8002e6c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	73fb      	strb	r3, [r7, #15]
 8002e60:	e004      	b.n	8002e6c <HAL_InitTick+0x60>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	73fb      	strb	r3, [r7, #15]
 8002e66:	e001      	b.n	8002e6c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20000018 	.word	0x20000018
 8002e7c:	20000014 	.word	0x20000014

08002e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e84:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <HAL_IncTick+0x1c>)
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <HAL_IncTick+0x20>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	4a03      	ldr	r2, [pc, #12]	; (8002e9c <HAL_IncTick+0x1c>)
 8002e90:	6013      	str	r3, [r2, #0]
}
 8002e92:	bf00      	nop
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	200007c0 	.word	0x200007c0
 8002ea0:	20000018 	.word	0x20000018

08002ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ea8:	4b03      	ldr	r3, [pc, #12]	; (8002eb8 <HAL_GetTick+0x14>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	200007c0 	.word	0x200007c0

08002ebc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002ec0:	4b03      	ldr	r3, [pc, #12]	; (8002ed0 <HAL_GetTickPrio+0x14>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	20000014 	.word	0x20000014

08002ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8002edc:	f7ff ffe2 	bl	8002ea4 <HAL_GetTick>
 8002ee0:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002eec:	d004      	beq.n	8002ef8 <HAL_Delay+0x24>
    {
      wait += (uint32_t)(uwTickFreq);
 8002eee:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <HAL_Delay+0x40>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8002ef8:	bf00      	nop
 8002efa:	f7ff ffd3 	bl	8002ea4 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d8f7      	bhi.n	8002efa <HAL_Delay+0x26>
    {
    }
  }
 8002f0a:	bf00      	nop
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	20000018 	.word	0x20000018

08002f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f28:	4b0c      	ldr	r3, [pc, #48]	; (8002f5c <__NVIC_SetPriorityGrouping+0x44>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f34:	4013      	ands	r3, r2
 8002f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f4a:	4a04      	ldr	r2, [pc, #16]	; (8002f5c <__NVIC_SetPriorityGrouping+0x44>)
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	60d3      	str	r3, [r2, #12]
}
 8002f50:	bf00      	nop
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	e000ed00 	.word	0xe000ed00

08002f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f64:	4b04      	ldr	r3, [pc, #16]	; (8002f78 <__NVIC_GetPriorityGrouping+0x18>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	0a1b      	lsrs	r3, r3, #8
 8002f6a:	f003 0307 	and.w	r3, r3, #7
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	e000ed00 	.word	0xe000ed00

08002f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	db0b      	blt.n	8002fa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f8e:	79fb      	ldrb	r3, [r7, #7]
 8002f90:	f003 021f 	and.w	r2, r3, #31
 8002f94:	4907      	ldr	r1, [pc, #28]	; (8002fb4 <__NVIC_EnableIRQ+0x38>)
 8002f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9a:	095b      	lsrs	r3, r3, #5
 8002f9c:	2001      	movs	r0, #1
 8002f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	e000e100 	.word	0xe000e100

08002fb8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	db10      	blt.n	8002fec <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fca:	79fb      	ldrb	r3, [r7, #7]
 8002fcc:	f003 021f 	and.w	r2, r3, #31
 8002fd0:	4909      	ldr	r1, [pc, #36]	; (8002ff8 <__NVIC_DisableIRQ+0x40>)
 8002fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd6:	095b      	lsrs	r3, r3, #5
 8002fd8:	2001      	movs	r0, #1
 8002fda:	fa00 f202 	lsl.w	r2, r0, r2
 8002fde:	3320      	adds	r3, #32
 8002fe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002fe4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002fe8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	e000e100 	.word	0xe000e100

08002ffc <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	4603      	mov	r3, r0
 8003004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300a:	2b00      	cmp	r3, #0
 800300c:	db0c      	blt.n	8003028 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800300e:	79fb      	ldrb	r3, [r7, #7]
 8003010:	f003 021f 	and.w	r2, r3, #31
 8003014:	4907      	ldr	r1, [pc, #28]	; (8003034 <__NVIC_SetPendingIRQ+0x38>)
 8003016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301a:	095b      	lsrs	r3, r3, #5
 800301c:	2001      	movs	r0, #1
 800301e:	fa00 f202 	lsl.w	r2, r0, r2
 8003022:	3340      	adds	r3, #64	; 0x40
 8003024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	e000e100 	.word	0xe000e100

08003038 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	4603      	mov	r3, r0
 8003040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003046:	2b00      	cmp	r3, #0
 8003048:	db0c      	blt.n	8003064 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800304a:	79fb      	ldrb	r3, [r7, #7]
 800304c:	f003 021f 	and.w	r2, r3, #31
 8003050:	4907      	ldr	r1, [pc, #28]	; (8003070 <__NVIC_ClearPendingIRQ+0x38>)
 8003052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003056:	095b      	lsrs	r3, r3, #5
 8003058:	2001      	movs	r0, #1
 800305a:	fa00 f202 	lsl.w	r2, r0, r2
 800305e:	3360      	adds	r3, #96	; 0x60
 8003060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	e000e100 	.word	0xe000e100

08003074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	6039      	str	r1, [r7, #0]
 800307e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003084:	2b00      	cmp	r3, #0
 8003086:	db0a      	blt.n	800309e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	b2da      	uxtb	r2, r3
 800308c:	490c      	ldr	r1, [pc, #48]	; (80030c0 <__NVIC_SetPriority+0x4c>)
 800308e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003092:	0112      	lsls	r2, r2, #4
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	440b      	add	r3, r1
 8003098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800309c:	e00a      	b.n	80030b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	4908      	ldr	r1, [pc, #32]	; (80030c4 <__NVIC_SetPriority+0x50>)
 80030a4:	79fb      	ldrb	r3, [r7, #7]
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	3b04      	subs	r3, #4
 80030ac:	0112      	lsls	r2, r2, #4
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	440b      	add	r3, r1
 80030b2:	761a      	strb	r2, [r3, #24]
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	e000e100 	.word	0xe000e100
 80030c4:	e000ed00 	.word	0xe000ed00

080030c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b089      	sub	sp, #36	; 0x24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f1c3 0307 	rsb	r3, r3, #7
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	bf28      	it	cs
 80030e6:	2304      	movcs	r3, #4
 80030e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	3304      	adds	r3, #4
 80030ee:	2b06      	cmp	r3, #6
 80030f0:	d902      	bls.n	80030f8 <NVIC_EncodePriority+0x30>
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	3b03      	subs	r3, #3
 80030f6:	e000      	b.n	80030fa <NVIC_EncodePriority+0x32>
 80030f8:	2300      	movs	r3, #0
 80030fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43da      	mvns	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	401a      	ands	r2, r3
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003110:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	fa01 f303 	lsl.w	r3, r1, r3
 800311a:	43d9      	mvns	r1, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003120:	4313      	orrs	r3, r2
         );
}
 8003122:	4618      	mov	r0, r3
 8003124:	3724      	adds	r7, #36	; 0x24
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
	...

08003130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3b01      	subs	r3, #1
 800313c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003140:	d301      	bcc.n	8003146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003142:	2301      	movs	r3, #1
 8003144:	e00f      	b.n	8003166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003146:	4a0a      	ldr	r2, [pc, #40]	; (8003170 <SysTick_Config+0x40>)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3b01      	subs	r3, #1
 800314c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800314e:	210f      	movs	r1, #15
 8003150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003154:	f7ff ff8e 	bl	8003074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003158:	4b05      	ldr	r3, [pc, #20]	; (8003170 <SysTick_Config+0x40>)
 800315a:	2200      	movs	r2, #0
 800315c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800315e:	4b04      	ldr	r3, [pc, #16]	; (8003170 <SysTick_Config+0x40>)
 8003160:	2207      	movs	r2, #7
 8003162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	e000e010 	.word	0xe000e010

08003174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7ff fecb 	bl	8002f18 <__NVIC_SetPriorityGrouping>
}
 8003182:	bf00      	nop
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b086      	sub	sp, #24
 800318e:	af00      	add	r7, sp, #0
 8003190:	4603      	mov	r3, r0
 8003192:	60b9      	str	r1, [r7, #8]
 8003194:	607a      	str	r2, [r7, #4]
 8003196:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003198:	f7ff fee2 	bl	8002f60 <__NVIC_GetPriorityGrouping>
 800319c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	68b9      	ldr	r1, [r7, #8]
 80031a2:	6978      	ldr	r0, [r7, #20]
 80031a4:	f7ff ff90 	bl	80030c8 <NVIC_EncodePriority>
 80031a8:	4602      	mov	r2, r0
 80031aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ae:	4611      	mov	r1, r2
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff ff5f 	bl	8003074 <__NVIC_SetPriority>
}
 80031b6:	bf00      	nop
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b082      	sub	sp, #8
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	4603      	mov	r3, r0
 80031c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff fed5 	bl	8002f7c <__NVIC_EnableIRQ>
}
 80031d2:	bf00      	nop
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b082      	sub	sp, #8
 80031de:	af00      	add	r7, sp, #0
 80031e0:	4603      	mov	r3, r0
 80031e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80031e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff fee5 	bl	8002fb8 <__NVIC_DisableIRQ>
}
 80031ee:	bf00      	nop
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b082      	sub	sp, #8
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7ff ff96 	bl	8003130 <SysTick_Config>
 8003204:	4603      	mov	r3, r0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b082      	sub	sp, #8
 8003212:	af00      	add	r7, sp, #0
 8003214:	4603      	mov	r3, r0
 8003216:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff feed 	bl	8002ffc <__NVIC_SetPendingIRQ>
}
 8003222:	bf00      	nop
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b082      	sub	sp, #8
 800322e:	af00      	add	r7, sp, #0
 8003230:	4603      	mov	r3, r0
 8003232:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff fefd 	bl	8003038 <__NVIC_ClearPendingIRQ>
}
 800323e:	bf00      	nop
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003248:	b480      	push	{r7}
 800324a:	b087      	sub	sp, #28
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003252:	2300      	movs	r3, #0
 8003254:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003256:	e14c      	b.n	80034f2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	2101      	movs	r1, #1
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	fa01 f303 	lsl.w	r3, r1, r3
 8003264:	4013      	ands	r3, r2
 8003266:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 813e 	beq.w	80034ec <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2b02      	cmp	r3, #2
 8003276:	d003      	beq.n	8003280 <HAL_GPIO_Init+0x38>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b12      	cmp	r3, #18
 800327e:	d123      	bne.n	80032c8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	08da      	lsrs	r2, r3, #3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3208      	adds	r2, #8
 8003288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800328c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	220f      	movs	r2, #15
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	43db      	mvns	r3, r3
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	4013      	ands	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	691a      	ldr	r2, [r3, #16]
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	f003 0307 	and.w	r3, r3, #7
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	08da      	lsrs	r2, r3, #3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	3208      	adds	r2, #8
 80032c2:	6939      	ldr	r1, [r7, #16]
 80032c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	2203      	movs	r2, #3
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	43db      	mvns	r3, r3
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	4013      	ands	r3, r2
 80032de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f003 0203 	and.w	r2, r3, #3
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d00b      	beq.n	800331c <HAL_GPIO_Init+0xd4>
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2b02      	cmp	r3, #2
 800330a:	d007      	beq.n	800331c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003310:	2b11      	cmp	r3, #17
 8003312:	d003      	beq.n	800331c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b12      	cmp	r3, #18
 800331a:	d130      	bne.n	800337e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	2203      	movs	r2, #3
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	43db      	mvns	r3, r3
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	4013      	ands	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	68da      	ldr	r2, [r3, #12]
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003352:	2201      	movs	r2, #1
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	43db      	mvns	r3, r3
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	4013      	ands	r3, r2
 8003360:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	091b      	lsrs	r3, r3, #4
 8003368:	f003 0201 	and.w	r2, r3, #1
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	4313      	orrs	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	2203      	movs	r2, #3
 800338a:	fa02 f303 	lsl.w	r3, r2, r3
 800338e:	43db      	mvns	r3, r3
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	4013      	ands	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 8098 	beq.w	80034ec <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80033bc:	4a54      	ldr	r2, [pc, #336]	; (8003510 <HAL_GPIO_Init+0x2c8>)
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	089b      	lsrs	r3, r3, #2
 80033c2:	3302      	adds	r3, #2
 80033c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f003 0303 	and.w	r3, r3, #3
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	220f      	movs	r2, #15
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	43db      	mvns	r3, r3
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	4013      	ands	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80033e6:	d019      	beq.n	800341c <HAL_GPIO_Init+0x1d4>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a4a      	ldr	r2, [pc, #296]	; (8003514 <HAL_GPIO_Init+0x2cc>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d013      	beq.n	8003418 <HAL_GPIO_Init+0x1d0>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a49      	ldr	r2, [pc, #292]	; (8003518 <HAL_GPIO_Init+0x2d0>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d00d      	beq.n	8003414 <HAL_GPIO_Init+0x1cc>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a48      	ldr	r2, [pc, #288]	; (800351c <HAL_GPIO_Init+0x2d4>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d007      	beq.n	8003410 <HAL_GPIO_Init+0x1c8>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a47      	ldr	r2, [pc, #284]	; (8003520 <HAL_GPIO_Init+0x2d8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d101      	bne.n	800340c <HAL_GPIO_Init+0x1c4>
 8003408:	2304      	movs	r3, #4
 800340a:	e008      	b.n	800341e <HAL_GPIO_Init+0x1d6>
 800340c:	2307      	movs	r3, #7
 800340e:	e006      	b.n	800341e <HAL_GPIO_Init+0x1d6>
 8003410:	2303      	movs	r3, #3
 8003412:	e004      	b.n	800341e <HAL_GPIO_Init+0x1d6>
 8003414:	2302      	movs	r3, #2
 8003416:	e002      	b.n	800341e <HAL_GPIO_Init+0x1d6>
 8003418:	2301      	movs	r3, #1
 800341a:	e000      	b.n	800341e <HAL_GPIO_Init+0x1d6>
 800341c:	2300      	movs	r3, #0
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	f002 0203 	and.w	r2, r2, #3
 8003424:	0092      	lsls	r2, r2, #2
 8003426:	4093      	lsls	r3, r2
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4313      	orrs	r3, r2
 800342c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800342e:	4938      	ldr	r1, [pc, #224]	; (8003510 <HAL_GPIO_Init+0x2c8>)
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	089b      	lsrs	r3, r3, #2
 8003434:	3302      	adds	r3, #2
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800343c:	4b39      	ldr	r3, [pc, #228]	; (8003524 <HAL_GPIO_Init+0x2dc>)
 800343e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003442:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	43db      	mvns	r3, r3
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	4013      	ands	r3, r2
 800344c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	4313      	orrs	r3, r2
 8003460:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003462:	4a30      	ldr	r2, [pc, #192]	; (8003524 <HAL_GPIO_Init+0x2dc>)
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800346a:	4b2e      	ldr	r3, [pc, #184]	; (8003524 <HAL_GPIO_Init+0x2dc>)
 800346c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003470:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	43db      	mvns	r3, r3
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	4013      	ands	r3, r2
 800347a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	4313      	orrs	r3, r2
 800348e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003490:	4a24      	ldr	r2, [pc, #144]	; (8003524 <HAL_GPIO_Init+0x2dc>)
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003498:	4b22      	ldr	r3, [pc, #136]	; (8003524 <HAL_GPIO_Init+0x2dc>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	43db      	mvns	r3, r3
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	4013      	ands	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d003      	beq.n	80034bc <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034bc:	4a19      	ldr	r2, [pc, #100]	; (8003524 <HAL_GPIO_Init+0x2dc>)
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80034c2:	4b18      	ldr	r3, [pc, #96]	; (8003524 <HAL_GPIO_Init+0x2dc>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	43db      	mvns	r3, r3
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	4013      	ands	r3, r2
 80034d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034e6:	4a0f      	ldr	r2, [pc, #60]	; (8003524 <HAL_GPIO_Init+0x2dc>)
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	3301      	adds	r3, #1
 80034f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	fa22 f303 	lsr.w	r3, r2, r3
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f47f aeab 	bne.w	8003258 <HAL_GPIO_Init+0x10>
  }
}
 8003502:	bf00      	nop
 8003504:	371c      	adds	r7, #28
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	40010000 	.word	0x40010000
 8003514:	48000400 	.word	0x48000400
 8003518:	48000800 	.word	0x48000800
 800351c:	48000c00 	.word	0x48000c00
 8003520:	48001000 	.word	0x48001000
 8003524:	58000800 	.word	0x58000800

08003528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	460b      	mov	r3, r1
 8003532:	807b      	strh	r3, [r7, #2]
 8003534:	4613      	mov	r3, r2
 8003536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003538:	787b      	ldrb	r3, [r7, #1]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800353e:	887a      	ldrh	r2, [r7, #2]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003544:	e002      	b.n	800354c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003546:	887a      	ldrh	r2, [r7, #2]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800355e:	4b0a      	ldr	r3, [pc, #40]	; (8003588 <HAL_HSEM_IRQHandler+0x30>)
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003564:	4b08      	ldr	r3, [pc, #32]	; (8003588 <HAL_HSEM_IRQHandler+0x30>)
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	43db      	mvns	r3, r3
 800356c:	4906      	ldr	r1, [pc, #24]	; (8003588 <HAL_HSEM_IRQHandler+0x30>)
 800356e:	4013      	ands	r3, r2
 8003570:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003572:	4a05      	ldr	r2, [pc, #20]	; (8003588 <HAL_HSEM_IRQHandler+0x30>)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 f807 	bl	800358c <HAL_HSEM_FreeCallback>
}
 800357e:	bf00      	nop
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	58001500 	.word	0x58001500

0800358c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e081      	b.n	80036b6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d106      	bne.n	80035cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7fe fa92 	bl	8001af0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2224      	movs	r2, #36	; 0x24
 80035d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 0201 	bic.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003600:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d107      	bne.n	800361a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003616:	609a      	str	r2, [r3, #8]
 8003618:	e006      	b.n	8003628 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689a      	ldr	r2, [r3, #8]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003626:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	2b02      	cmp	r3, #2
 800362e:	d104      	bne.n	800363a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003638:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6812      	ldr	r2, [r2, #0]
 8003644:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003648:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800364c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68da      	ldr	r2, [r3, #12]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800365c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	691a      	ldr	r2, [r3, #16]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	ea42 0103 	orr.w	r1, r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	021a      	lsls	r2, r3, #8
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69d9      	ldr	r1, [r3, #28]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a1a      	ldr	r2, [r3, #32]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f042 0201 	orr.w	r2, r2, #1
 8003696:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2220      	movs	r2, #32
 80036a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
	...

080036c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b088      	sub	sp, #32
 80036c4:	af02      	add	r7, sp, #8
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	607a      	str	r2, [r7, #4]
 80036ca:	461a      	mov	r2, r3
 80036cc:	460b      	mov	r3, r1
 80036ce:	817b      	strh	r3, [r7, #10]
 80036d0:	4613      	mov	r3, r2
 80036d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b20      	cmp	r3, #32
 80036de:	f040 80da 	bne.w	8003896 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d101      	bne.n	80036f0 <HAL_I2C_Master_Transmit+0x30>
 80036ec:	2302      	movs	r3, #2
 80036ee:	e0d3      	b.n	8003898 <HAL_I2C_Master_Transmit+0x1d8>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036f8:	f7ff fbd4 	bl	8002ea4 <HAL_GetTick>
 80036fc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	2319      	movs	r3, #25
 8003704:	2201      	movs	r2, #1
 8003706:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 f9e6 	bl	8003adc <I2C_WaitOnFlagUntilTimeout>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e0be      	b.n	8003898 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2221      	movs	r2, #33	; 0x21
 800371e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2210      	movs	r2, #16
 8003726:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	893a      	ldrh	r2, [r7, #8]
 800373a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003746:	b29b      	uxth	r3, r3
 8003748:	2bff      	cmp	r3, #255	; 0xff
 800374a:	d90e      	bls.n	800376a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	22ff      	movs	r2, #255	; 0xff
 8003750:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003756:	b2da      	uxtb	r2, r3
 8003758:	8979      	ldrh	r1, [r7, #10]
 800375a:	4b51      	ldr	r3, [pc, #324]	; (80038a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 fb48 	bl	8003df8 <I2C_TransferConfig>
 8003768:	e06c      	b.n	8003844 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376e:	b29a      	uxth	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003778:	b2da      	uxtb	r2, r3
 800377a:	8979      	ldrh	r1, [r7, #10]
 800377c:	4b48      	ldr	r3, [pc, #288]	; (80038a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f000 fb37 	bl	8003df8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800378a:	e05b      	b.n	8003844 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	6a39      	ldr	r1, [r7, #32]
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f000 f9e3 	bl	8003b5c <I2C_WaitOnTXISFlagUntilTimeout>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e07b      	b.n	8003898 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	781a      	ldrb	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c8:	3b01      	subs	r3, #1
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d034      	beq.n	8003844 <HAL_I2C_Master_Transmit+0x184>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d130      	bne.n	8003844 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	2200      	movs	r2, #0
 80037ea:	2180      	movs	r1, #128	; 0x80
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 f975 	bl	8003adc <I2C_WaitOnFlagUntilTimeout>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e04d      	b.n	8003898 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003800:	b29b      	uxth	r3, r3
 8003802:	2bff      	cmp	r3, #255	; 0xff
 8003804:	d90e      	bls.n	8003824 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	22ff      	movs	r2, #255	; 0xff
 800380a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003810:	b2da      	uxtb	r2, r3
 8003812:	8979      	ldrh	r1, [r7, #10]
 8003814:	2300      	movs	r3, #0
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 faeb 	bl	8003df8 <I2C_TransferConfig>
 8003822:	e00f      	b.n	8003844 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003828:	b29a      	uxth	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003832:	b2da      	uxtb	r2, r3
 8003834:	8979      	ldrh	r1, [r7, #10]
 8003836:	2300      	movs	r3, #0
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 fada 	bl	8003df8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003848:	b29b      	uxth	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d19e      	bne.n	800378c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	6a39      	ldr	r1, [r7, #32]
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 f9c2 	bl	8003bdc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e01a      	b.n	8003898 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2220      	movs	r2, #32
 8003868:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6859      	ldr	r1, [r3, #4]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	4b0b      	ldr	r3, [pc, #44]	; (80038a4 <HAL_I2C_Master_Transmit+0x1e4>)
 8003876:	400b      	ands	r3, r1
 8003878:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2220      	movs	r2, #32
 800387e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003892:	2300      	movs	r3, #0
 8003894:	e000      	b.n	8003898 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003896:	2302      	movs	r3, #2
  }
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	80002000 	.word	0x80002000
 80038a4:	fe00e800 	.word	0xfe00e800

080038a8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b088      	sub	sp, #32
 80038ac:	af02      	add	r7, sp, #8
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	607a      	str	r2, [r7, #4]
 80038b2:	461a      	mov	r2, r3
 80038b4:	460b      	mov	r3, r1
 80038b6:	817b      	strh	r3, [r7, #10]
 80038b8:	4613      	mov	r3, r2
 80038ba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b20      	cmp	r3, #32
 80038c6:	f040 80db 	bne.w	8003a80 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d101      	bne.n	80038d8 <HAL_I2C_Master_Receive+0x30>
 80038d4:	2302      	movs	r3, #2
 80038d6:	e0d4      	b.n	8003a82 <HAL_I2C_Master_Receive+0x1da>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038e0:	f7ff fae0 	bl	8002ea4 <HAL_GetTick>
 80038e4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	2319      	movs	r3, #25
 80038ec:	2201      	movs	r2, #1
 80038ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f000 f8f2 	bl	8003adc <I2C_WaitOnFlagUntilTimeout>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e0bf      	b.n	8003a82 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2222      	movs	r2, #34	; 0x22
 8003906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2210      	movs	r2, #16
 800390e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	893a      	ldrh	r2, [r7, #8]
 8003922:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392e:	b29b      	uxth	r3, r3
 8003930:	2bff      	cmp	r3, #255	; 0xff
 8003932:	d90e      	bls.n	8003952 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	22ff      	movs	r2, #255	; 0xff
 8003938:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393e:	b2da      	uxtb	r2, r3
 8003940:	8979      	ldrh	r1, [r7, #10]
 8003942:	4b52      	ldr	r3, [pc, #328]	; (8003a8c <HAL_I2C_Master_Receive+0x1e4>)
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 fa54 	bl	8003df8 <I2C_TransferConfig>
 8003950:	e06d      	b.n	8003a2e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003956:	b29a      	uxth	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003960:	b2da      	uxtb	r2, r3
 8003962:	8979      	ldrh	r1, [r7, #10]
 8003964:	4b49      	ldr	r3, [pc, #292]	; (8003a8c <HAL_I2C_Master_Receive+0x1e4>)
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 fa43 	bl	8003df8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003972:	e05c      	b.n	8003a2e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	6a39      	ldr	r1, [r7, #32]
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 f96b 	bl	8003c54 <I2C_WaitOnRXNEFlagUntilTimeout>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e07c      	b.n	8003a82 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399a:	1c5a      	adds	r2, r3, #1
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a4:	3b01      	subs	r3, #1
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	3b01      	subs	r3, #1
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039be:	b29b      	uxth	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d034      	beq.n	8003a2e <HAL_I2C_Master_Receive+0x186>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d130      	bne.n	8003a2e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	9300      	str	r3, [sp, #0]
 80039d0:	6a3b      	ldr	r3, [r7, #32]
 80039d2:	2200      	movs	r2, #0
 80039d4:	2180      	movs	r1, #128	; 0x80
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 f880 	bl	8003adc <I2C_WaitOnFlagUntilTimeout>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e04d      	b.n	8003a82 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	2bff      	cmp	r3, #255	; 0xff
 80039ee:	d90e      	bls.n	8003a0e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	22ff      	movs	r2, #255	; 0xff
 80039f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	8979      	ldrh	r1, [r7, #10]
 80039fe:	2300      	movs	r3, #0
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 f9f6 	bl	8003df8 <I2C_TransferConfig>
 8003a0c:	e00f      	b.n	8003a2e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	8979      	ldrh	r1, [r7, #10]
 8003a20:	2300      	movs	r3, #0
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f000 f9e5 	bl	8003df8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d19d      	bne.n	8003974 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	6a39      	ldr	r1, [r7, #32]
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 f8cd 	bl	8003bdc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e01a      	b.n	8003a82 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2220      	movs	r2, #32
 8003a52:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6859      	ldr	r1, [r3, #4]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	4b0c      	ldr	r3, [pc, #48]	; (8003a90 <HAL_I2C_Master_Receive+0x1e8>)
 8003a60:	400b      	ands	r3, r1
 8003a62:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2220      	movs	r2, #32
 8003a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	e000      	b.n	8003a82 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003a80:	2302      	movs	r3, #2
  }
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3718      	adds	r7, #24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	80002400 	.word	0x80002400
 8003a90:	fe00e800 	.word	0xfe00e800

08003a94 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d103      	bne.n	8003ab2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d007      	beq.n	8003ad0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699a      	ldr	r2, [r3, #24]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0201 	orr.w	r2, r2, #1
 8003ace:	619a      	str	r2, [r3, #24]
  }
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	603b      	str	r3, [r7, #0]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003aec:	e022      	b.n	8003b34 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003af4:	d01e      	beq.n	8003b34 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af6:	f7ff f9d5 	bl	8002ea4 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d302      	bcc.n	8003b0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d113      	bne.n	8003b34 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b10:	f043 0220 	orr.w	r2, r3, #32
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e00f      	b.n	8003b54 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	699a      	ldr	r2, [r3, #24]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	bf0c      	ite	eq
 8003b44:	2301      	moveq	r3, #1
 8003b46:	2300      	movne	r3, #0
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	79fb      	ldrb	r3, [r7, #7]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d0cd      	beq.n	8003aee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b68:	e02c      	b.n	8003bc4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	68b9      	ldr	r1, [r7, #8]
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 f8dc 	bl	8003d2c <I2C_IsAcknowledgeFailed>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e02a      	b.n	8003bd4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b84:	d01e      	beq.n	8003bc4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b86:	f7ff f98d 	bl	8002ea4 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d302      	bcc.n	8003b9c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d113      	bne.n	8003bc4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba0:	f043 0220 	orr.w	r2, r3, #32
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2220      	movs	r2, #32
 8003bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e007      	b.n	8003bd4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d1cb      	bne.n	8003b6a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003be8:	e028      	b.n	8003c3c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	68b9      	ldr	r1, [r7, #8]
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f000 f89c 	bl	8003d2c <I2C_IsAcknowledgeFailed>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e026      	b.n	8003c4c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bfe:	f7ff f951 	bl	8002ea4 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d302      	bcc.n	8003c14 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d113      	bne.n	8003c3c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c18:	f043 0220 	orr.w	r2, r3, #32
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e007      	b.n	8003c4c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	f003 0320 	and.w	r3, r3, #32
 8003c46:	2b20      	cmp	r3, #32
 8003c48:	d1cf      	bne.n	8003bea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c60:	e055      	b.n	8003d0e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	68b9      	ldr	r1, [r7, #8]
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 f860 	bl	8003d2c <I2C_IsAcknowledgeFailed>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e053      	b.n	8003d1e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	f003 0320 	and.w	r3, r3, #32
 8003c80:	2b20      	cmp	r3, #32
 8003c82:	d129      	bne.n	8003cd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	f003 0304 	and.w	r3, r3, #4
 8003c8e:	2b04      	cmp	r3, #4
 8003c90:	d105      	bne.n	8003c9e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	e03f      	b.n	8003d1e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6859      	ldr	r1, [r3, #4]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	4b1d      	ldr	r3, [pc, #116]	; (8003d28 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003cb2:	400b      	ands	r3, r1
 8003cb4:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e022      	b.n	8003d1e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd8:	f7ff f8e4 	bl	8002ea4 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d302      	bcc.n	8003cee <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10f      	bne.n	8003d0e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf2:	f043 0220 	orr.w	r2, r3, #32
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e007      	b.n	8003d1e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	d1a2      	bne.n	8003c62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	fe00e800 	.word	0xfe00e800

08003d2c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	f003 0310 	and.w	r3, r3, #16
 8003d42:	2b10      	cmp	r3, #16
 8003d44:	d151      	bne.n	8003dea <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d46:	e022      	b.n	8003d8e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d4e:	d01e      	beq.n	8003d8e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d50:	f7ff f8a8 	bl	8002ea4 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	68ba      	ldr	r2, [r7, #8]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d302      	bcc.n	8003d66 <I2C_IsAcknowledgeFailed+0x3a>
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d113      	bne.n	8003d8e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6a:	f043 0220 	orr.w	r2, r3, #32
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2220      	movs	r2, #32
 8003d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e02e      	b.n	8003dec <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	f003 0320 	and.w	r3, r3, #32
 8003d98:	2b20      	cmp	r3, #32
 8003d9a:	d1d5      	bne.n	8003d48 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2210      	movs	r2, #16
 8003da2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2220      	movs	r2, #32
 8003daa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f7ff fe71 	bl	8003a94 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6859      	ldr	r1, [r3, #4]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	4b0d      	ldr	r3, [pc, #52]	; (8003df4 <I2C_IsAcknowledgeFailed+0xc8>)
 8003dbe:	400b      	ands	r3, r1
 8003dc0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc6:	f043 0204 	orr.w	r2, r3, #4
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e000      	b.n	8003dec <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	fe00e800 	.word	0xfe00e800

08003df8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	607b      	str	r3, [r7, #4]
 8003e02:	460b      	mov	r3, r1
 8003e04:	817b      	strh	r3, [r7, #10]
 8003e06:	4613      	mov	r3, r2
 8003e08:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	0d5b      	lsrs	r3, r3, #21
 8003e14:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003e18:	4b0d      	ldr	r3, [pc, #52]	; (8003e50 <I2C_TransferConfig+0x58>)
 8003e1a:	430b      	orrs	r3, r1
 8003e1c:	43db      	mvns	r3, r3
 8003e1e:	ea02 0103 	and.w	r1, r2, r3
 8003e22:	897b      	ldrh	r3, [r7, #10]
 8003e24:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e28:	7a7b      	ldrb	r3, [r7, #9]
 8003e2a:	041b      	lsls	r3, r3, #16
 8003e2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003e30:	431a      	orrs	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	431a      	orrs	r2, r3
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003e42:	bf00      	nop
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	03ff63ff 	.word	0x03ff63ff

08003e54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b20      	cmp	r3, #32
 8003e68:	d138      	bne.n	8003edc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d101      	bne.n	8003e78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e74:	2302      	movs	r3, #2
 8003e76:	e032      	b.n	8003ede <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2224      	movs	r2, #36	; 0x24
 8003e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0201 	bic.w	r2, r2, #1
 8003e96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ea6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6819      	ldr	r1, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f042 0201 	orr.w	r2, r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	e000      	b.n	8003ede <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003edc:	2302      	movs	r3, #2
  }
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b085      	sub	sp, #20
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
 8003ef2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b20      	cmp	r3, #32
 8003efe:	d139      	bne.n	8003f74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d101      	bne.n	8003f0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	e033      	b.n	8003f76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2224      	movs	r2, #36	; 0x24
 8003f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0201 	bic.w	r2, r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	021b      	lsls	r3, r3, #8
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0201 	orr.w	r2, r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	e000      	b.n	8003f76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f74:	2302      	movs	r3, #2
  }
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f84:	b08b      	sub	sp, #44	; 0x2c
 8003f86:	af06      	add	r7, sp, #24
 8003f88:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e0ad      	b.n	80040f0 <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d106      	bne.n	8003fae <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f7fe fea7 	bl	8002cfc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2203      	movs	r2, #3
 8003fb2:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f004 fc68 	bl	8008890 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	73fb      	strb	r3, [r7, #15]
 8003fc4:	e035      	b.n	8004032 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003fc6:	7bfb      	ldrb	r3, [r7, #15]
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	015b      	lsls	r3, r3, #5
 8003fcc:	4413      	add	r3, r2
 8003fce:	3329      	adds	r3, #41	; 0x29
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003fd4:	7bfb      	ldrb	r3, [r7, #15]
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	015b      	lsls	r3, r3, #5
 8003fda:	4413      	add	r3, r2
 8003fdc:	3328      	adds	r3, #40	; 0x28
 8003fde:	7bfa      	ldrb	r2, [r7, #15]
 8003fe0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003fe2:	7bfb      	ldrb	r3, [r7, #15]
 8003fe4:	7bfa      	ldrb	r2, [r7, #15]
 8003fe6:	b291      	uxth	r1, r2
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	015b      	lsls	r3, r3, #5
 8003fec:	4413      	add	r3, r2
 8003fee:	3336      	adds	r3, #54	; 0x36
 8003ff0:	460a      	mov	r2, r1
 8003ff2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ff4:	7bfb      	ldrb	r3, [r7, #15]
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	015b      	lsls	r3, r3, #5
 8003ffa:	4413      	add	r3, r2
 8003ffc:	332b      	adds	r3, #43	; 0x2b
 8003ffe:	2200      	movs	r2, #0
 8004000:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004002:	7bfb      	ldrb	r3, [r7, #15]
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	015b      	lsls	r3, r3, #5
 8004008:	4413      	add	r3, r2
 800400a:	3338      	adds	r3, #56	; 0x38
 800400c:	2200      	movs	r2, #0
 800400e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004010:	7bfb      	ldrb	r3, [r7, #15]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	015b      	lsls	r3, r3, #5
 8004016:	4413      	add	r3, r2
 8004018:	333c      	adds	r3, #60	; 0x3c
 800401a:	2200      	movs	r2, #0
 800401c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800401e:	7bfb      	ldrb	r3, [r7, #15]
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	3302      	adds	r3, #2
 8004024:	015b      	lsls	r3, r3, #5
 8004026:	4413      	add	r3, r2
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800402c:	7bfb      	ldrb	r3, [r7, #15]
 800402e:	3301      	adds	r3, #1
 8004030:	73fb      	strb	r3, [r7, #15]
 8004032:	7bfa      	ldrb	r2, [r7, #15]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	429a      	cmp	r2, r3
 800403a:	d3c4      	bcc.n	8003fc6 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800403c:	2300      	movs	r3, #0
 800403e:	73fb      	strb	r3, [r7, #15]
 8004040:	e031      	b.n	80040a6 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004042:	7bfb      	ldrb	r3, [r7, #15]
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	015b      	lsls	r3, r3, #5
 8004048:	4413      	add	r3, r2
 800404a:	f203 1329 	addw	r3, r3, #297	; 0x129
 800404e:	2200      	movs	r2, #0
 8004050:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004052:	7bfb      	ldrb	r3, [r7, #15]
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	015b      	lsls	r3, r3, #5
 8004058:	4413      	add	r3, r2
 800405a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800405e:	7bfa      	ldrb	r2, [r7, #15]
 8004060:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004062:	7bfb      	ldrb	r3, [r7, #15]
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	015b      	lsls	r3, r3, #5
 8004068:	4413      	add	r3, r2
 800406a:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800406e:	2200      	movs	r2, #0
 8004070:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004072:	7bfb      	ldrb	r3, [r7, #15]
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	015b      	lsls	r3, r3, #5
 8004078:	4413      	add	r3, r2
 800407a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800407e:	2200      	movs	r2, #0
 8004080:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004082:	7bfb      	ldrb	r3, [r7, #15]
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	015b      	lsls	r3, r3, #5
 8004088:	4413      	add	r3, r2
 800408a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800408e:	2200      	movs	r2, #0
 8004090:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004092:	7bfb      	ldrb	r3, [r7, #15]
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	330a      	adds	r3, #10
 8004098:	015b      	lsls	r3, r3, #5
 800409a:	4413      	add	r3, r2
 800409c:	2200      	movs	r2, #0
 800409e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
 80040a2:	3301      	adds	r3, #1
 80040a4:	73fb      	strb	r3, [r7, #15]
 80040a6:	7bfa      	ldrb	r2, [r7, #15]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d3c8      	bcc.n	8004042 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	603b      	str	r3, [r7, #0]
 80040b6:	687e      	ldr	r6, [r7, #4]
 80040b8:	466d      	mov	r5, sp
 80040ba:	f106 0410 	add.w	r4, r6, #16
 80040be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040c2:	6823      	ldr	r3, [r4, #0]
 80040c4:	602b      	str	r3, [r5, #0]
 80040c6:	1d33      	adds	r3, r6, #4
 80040c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040ca:	6838      	ldr	r0, [r7, #0]
 80040cc:	f004 fbfd 	bl	80088ca <USB_DevInit>

  hpcd->USB_Address = 0U;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d102      	bne.n	80040ee <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f805 	bl	80040f8 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040f8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800411c:	b29b      	uxth	r3, r3
 800411e:	f043 0301 	orr.w	r3, r3, #1
 8004122:	b29a      	uxth	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004130:	b29b      	uxth	r3, r3
 8004132:	f043 0302 	orr.w	r3, r3, #2
 8004136:	b29a      	uxth	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004150:	4b05      	ldr	r3, [pc, #20]	; (8004168 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a04      	ldr	r2, [pc, #16]	; (8004168 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800415a:	6013      	str	r3, [r2, #0]
}
 800415c:	bf00      	nop
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	58000400 	.word	0x58000400

0800416c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004170:	4b04      	ldr	r3, [pc, #16]	; (8004184 <HAL_PWREx_GetVoltageRange+0x18>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004178:	4618      	mov	r0, r3
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	58000400 	.word	0x58000400

08004188 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004188:	b480      	push	{r7}
 800418a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800418c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004196:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800419a:	d101      	bne.n	80041a0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800419c:	2301      	movs	r3, #1
 800419e:	e000      	b.n	80041a2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <LL_RCC_HSE_EnableBypass>:
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80041b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041be:	6013      	str	r3, [r2, #0]
}
 80041c0:	bf00      	nop
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <LL_RCC_HSE_DisableBypass>:
{
 80041ca:	b480      	push	{r7}
 80041cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80041ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041dc:	6013      	str	r3, [r2, #0]
}
 80041de:	bf00      	nop
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <LL_RCC_HSE_Enable>:
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80041ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041fa:	6013      	str	r3, [r2, #0]
}
 80041fc:	bf00      	nop
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <LL_RCC_HSE_Disable>:
{
 8004206:	b480      	push	{r7}
 8004208:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800420a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004218:	6013      	str	r3, [r2, #0]
}
 800421a:	bf00      	nop
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <LL_RCC_HSE_IsReady>:
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004232:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004236:	d101      	bne.n	800423c <LL_RCC_HSE_IsReady+0x18>
 8004238:	2301      	movs	r3, #1
 800423a:	e000      	b.n	800423e <LL_RCC_HSE_IsReady+0x1a>
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <LL_RCC_HSI_Enable>:
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800424c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800425a:	6013      	str	r3, [r2, #0]
}
 800425c:	bf00      	nop
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <LL_RCC_HSI_Disable>:
{
 8004266:	b480      	push	{r7}
 8004268:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800426a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004278:	6013      	str	r3, [r2, #0]
}
 800427a:	bf00      	nop
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <LL_RCC_HSI_IsReady>:
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004296:	d101      	bne.n	800429c <LL_RCC_HSI_IsReady+0x18>
 8004298:	2301      	movs	r3, #1
 800429a:	e000      	b.n	800429e <LL_RCC_HSI_IsReady+0x1a>
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <LL_RCC_HSI_SetCalibTrimming>:
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80042b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	061b      	lsls	r3, r3, #24
 80042be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042c2:	4313      	orrs	r3, r2
 80042c4:	604b      	str	r3, [r1, #4]
}
 80042c6:	bf00      	nop
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <LL_RCC_HSI48_Enable>:
{
 80042d2:	b480      	push	{r7}
 80042d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80042d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042e2:	f043 0301 	orr.w	r3, r3, #1
 80042e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80042ea:	bf00      	nop
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <LL_RCC_HSI48_Disable>:
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80042f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004300:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004304:	f023 0301 	bic.w	r3, r3, #1
 8004308:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800430c:	bf00      	nop
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <LL_RCC_HSI48_IsReady>:
{
 8004316:	b480      	push	{r7}
 8004318:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800431a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800431e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b02      	cmp	r3, #2
 8004328:	d101      	bne.n	800432e <LL_RCC_HSI48_IsReady+0x18>
 800432a:	2301      	movs	r3, #1
 800432c:	e000      	b.n	8004330 <LL_RCC_HSI48_IsReady+0x1a>
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <LL_RCC_LSE_Enable>:
{
 800433a:	b480      	push	{r7}
 800433c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800433e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004346:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800434a:	f043 0301 	orr.w	r3, r3, #1
 800434e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004352:	bf00      	nop
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <LL_RCC_LSE_Disable>:
{
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004368:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800436c:	f023 0301 	bic.w	r3, r3, #1
 8004370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004374:	bf00      	nop
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <LL_RCC_LSE_EnableBypass>:
{
 800437e:	b480      	push	{r7}
 8004380:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800438e:	f043 0304 	orr.w	r3, r3, #4
 8004392:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004396:	bf00      	nop
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <LL_RCC_LSE_DisableBypass>:
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80043a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043b0:	f023 0304 	bic.w	r3, r3, #4
 80043b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80043b8:	bf00      	nop
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <LL_RCC_LSE_IsReady>:
{
 80043c2:	b480      	push	{r7}
 80043c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80043c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d101      	bne.n	80043da <LL_RCC_LSE_IsReady+0x18>
 80043d6:	2301      	movs	r3, #1
 80043d8:	e000      	b.n	80043dc <LL_RCC_LSE_IsReady+0x1a>
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <LL_RCC_LSI1_Enable>:
{
 80043e6:	b480      	push	{r7}
 80043e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80043ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043f6:	f043 0301 	orr.w	r3, r3, #1
 80043fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80043fe:	bf00      	nop
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <LL_RCC_LSI1_Disable>:
{
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800440c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004410:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004414:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004418:	f023 0301 	bic.w	r3, r3, #1
 800441c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004420:	bf00      	nop
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <LL_RCC_LSI1_IsReady>:
{
 800442a:	b480      	push	{r7}
 800442c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800442e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b02      	cmp	r3, #2
 800443c:	d101      	bne.n	8004442 <LL_RCC_LSI1_IsReady+0x18>
 800443e:	2301      	movs	r3, #1
 8004440:	e000      	b.n	8004444 <LL_RCC_LSI1_IsReady+0x1a>
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <LL_RCC_LSI2_Enable>:
{
 800444e:	b480      	push	{r7}
 8004450:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004456:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800445a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800445e:	f043 0304 	orr.w	r3, r3, #4
 8004462:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004466:	bf00      	nop
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <LL_RCC_LSI2_Disable>:
{
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004478:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800447c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004480:	f023 0304 	bic.w	r3, r3, #4
 8004484:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004488:	bf00      	nop
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <LL_RCC_LSI2_IsReady>:
{
 8004492:	b480      	push	{r7}
 8004494:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800449a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b08      	cmp	r3, #8
 80044a4:	d101      	bne.n	80044aa <LL_RCC_LSI2_IsReady+0x18>
 80044a6:	2301      	movs	r3, #1
 80044a8:	e000      	b.n	80044ac <LL_RCC_LSI2_IsReady+0x1a>
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <LL_RCC_LSI2_SetTrimming>:
{
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80044be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044c6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	021b      	lsls	r3, r3, #8
 80044ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044d2:	4313      	orrs	r3, r2
 80044d4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <LL_RCC_MSI_Enable>:
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80044e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044f2:	f043 0301 	orr.w	r3, r3, #1
 80044f6:	6013      	str	r3, [r2, #0]
}
 80044f8:	bf00      	nop
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <LL_RCC_MSI_Disable>:
{
 8004502:	b480      	push	{r7}
 8004504:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004510:	f023 0301 	bic.w	r3, r3, #1
 8004514:	6013      	str	r3, [r2, #0]
}
 8004516:	bf00      	nop
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <LL_RCC_MSI_IsReady>:
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b02      	cmp	r3, #2
 8004530:	d101      	bne.n	8004536 <LL_RCC_MSI_IsReady+0x16>
 8004532:	2301      	movs	r3, #1
 8004534:	e000      	b.n	8004538 <LL_RCC_MSI_IsReady+0x18>
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <LL_RCC_MSI_SetRange>:
{
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800454a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004554:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4313      	orrs	r3, r2
 800455c:	600b      	str	r3, [r1, #0]
}
 800455e:	bf00      	nop
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <LL_RCC_MSI_GetRange>:
{
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800457a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2bb0      	cmp	r3, #176	; 0xb0
 8004580:	d901      	bls.n	8004586 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004582:	23b0      	movs	r3, #176	; 0xb0
 8004584:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004586:	687b      	ldr	r3, [r7, #4]
}
 8004588:	4618      	mov	r0, r3
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800459c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	021b      	lsls	r3, r3, #8
 80045aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045ae:	4313      	orrs	r3, r2
 80045b0:	604b      	str	r3, [r1, #4]
}
 80045b2:	bf00      	nop
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <LL_RCC_SetSysClkSource>:
{
 80045be:	b480      	push	{r7}
 80045c0:	b083      	sub	sp, #12
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80045c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f023 0203 	bic.w	r2, r3, #3
 80045d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	608b      	str	r3, [r1, #8]
}
 80045da:	bf00      	nop
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <LL_RCC_GetSysClkSource>:
{
 80045e6:	b480      	push	{r7}
 80045e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80045ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f003 030c 	and.w	r3, r3, #12
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <LL_RCC_SetAHBPrescaler>:
{
 80045fe:	b480      	push	{r7}
 8004600:	b083      	sub	sp, #12
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004610:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4313      	orrs	r3, r2
 8004618:	608b      	str	r3, [r1, #8]
}
 800461a:	bf00      	nop
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr

08004626 <LL_C2_RCC_SetAHBPrescaler>:
{
 8004626:	b480      	push	{r7}
 8004628:	b083      	sub	sp, #12
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800462e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004632:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004636:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800463a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4313      	orrs	r3, r2
 8004642:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <LL_RCC_SetAHB4Prescaler>:
{
 8004652:	b480      	push	{r7}
 8004654:	b083      	sub	sp, #12
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800465a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800465e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004662:	f023 020f 	bic.w	r2, r3, #15
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	091b      	lsrs	r3, r3, #4
 800466a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800466e:	4313      	orrs	r3, r2
 8004670:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <LL_RCC_SetAPB1Prescaler>:
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004692:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4313      	orrs	r3, r2
 800469a:	608b      	str	r3, [r1, #8]
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <LL_RCC_SetAPB2Prescaler>:
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80046b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	608b      	str	r3, [r1, #8]
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <LL_RCC_GetAHBPrescaler>:
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80046d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <LL_RCC_GetAHB4Prescaler>:
{
 80046e8:	b480      	push	{r7}
 80046ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80046ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046f0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80046f4:	011b      	lsls	r3, r3, #4
 80046f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <LL_RCC_GetAPB1Prescaler>:
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004712:	4618      	mov	r0, r3
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <LL_RCC_GetAPB2Prescaler>:
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800472a:	4618      	mov	r0, r3
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004734:	b480      	push	{r7}
 8004736:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004746:	6013      	str	r3, [r2, #0]
}
 8004748:	bf00      	nop
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004752:	b480      	push	{r7}
 8004754:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004756:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004760:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004764:	6013      	str	r3, [r2, #0]
}
 8004766:	bf00      	nop
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004770:	b480      	push	{r7}
 8004772:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004782:	d101      	bne.n	8004788 <LL_RCC_PLL_IsReady+0x18>
 8004784:	2301      	movs	r3, #1
 8004786:	e000      	b.n	800478a <LL_RCC_PLL_IsReady+0x1a>
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	0a1b      	lsrs	r3, r3, #8
 80047a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80047ae:	b480      	push	{r7}
 80047b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80047b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80047bc:	4618      	mov	r0, r3
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80047c6:	b480      	push	{r7}
 80047c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80047ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80047de:	b480      	push	{r7}
 80047e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80047e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	f003 0303 	and.w	r3, r3, #3
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80047f6:	b480      	push	{r7}
 80047f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80047fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004808:	d101      	bne.n	800480e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800480a:	2301      	movs	r3, #1
 800480c:	e000      	b.n	8004810 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800481a:	b480      	push	{r7}
 800481c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800481e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004822:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800482e:	d101      	bne.n	8004834 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004830:	2301      	movs	r3, #1
 8004832:	e000      	b.n	8004836 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004840:	b480      	push	{r7}
 8004842:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004848:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800484c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004854:	d101      	bne.n	800485a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004856:	2301      	movs	r3, #1
 8004858:	e000      	b.n	800485c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004866:	b480      	push	{r7}
 8004868:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800486a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004874:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004878:	d101      	bne.n	800487e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800487a:	2301      	movs	r3, #1
 800487c:	e000      	b.n	8004880 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800488a:	b480      	push	{r7}
 800488c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800488e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004898:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800489c:	d101      	bne.n	80048a2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800489e:	2301      	movs	r3, #1
 80048a0:	e000      	b.n	80048a4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
	...

080048b0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048b0:	b590      	push	{r4, r7, lr}
 80048b2:	b08b      	sub	sp, #44	; 0x2c
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e34b      	b.n	8004f5a <HAL_RCC_OscConfig+0x6aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0320 	and.w	r3, r3, #32
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f000 808f 	beq.w	80049ee <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048d0:	f7ff fe89 	bl	80045e6 <LL_RCC_GetSysClkSource>
 80048d4:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048d6:	f7ff ff82 	bl	80047de <LL_RCC_PLL_GetMainSource>
 80048da:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d005      	beq.n	80048ee <HAL_RCC_OscConfig+0x3e>
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	2b0c      	cmp	r3, #12
 80048e6:	d149      	bne.n	800497c <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d146      	bne.n	800497c <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80048ee:	f7ff fe17 	bl	8004520 <LL_RCC_MSI_IsReady>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d005      	beq.n	8004904 <HAL_RCC_OscConfig+0x54>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	69db      	ldr	r3, [r3, #28]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d101      	bne.n	8004904 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e32a      	b.n	8004f5a <HAL_RCC_OscConfig+0x6aa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004908:	f7ff fe2f 	bl	800456a <LL_RCC_MSI_GetRange>
 800490c:	4603      	mov	r3, r0
 800490e:	429c      	cmp	r4, r3
 8004910:	d914      	bls.n	800493c <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	4618      	mov	r0, r3
 8004918:	f000 fd0e 	bl	8005338 <RCC_SetFlashLatencyFromMSIRange>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e319      	b.n	8004f5a <HAL_RCC_OscConfig+0x6aa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492a:	4618      	mov	r0, r3
 800492c:	f7ff fe09 	bl	8004542 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	4618      	mov	r0, r3
 8004936:	f7ff fe2d 	bl	8004594 <LL_RCC_MSI_SetCalibTrimming>
 800493a:	e013      	b.n	8004964 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004940:	4618      	mov	r0, r3
 8004942:	f7ff fdfe 	bl	8004542 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	4618      	mov	r0, r3
 800494c:	f7ff fe22 	bl	8004594 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	4618      	mov	r0, r3
 8004956:	f000 fcef 	bl	8005338 <RCC_SetFlashLatencyFromMSIRange>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e2fa      	b.n	8004f5a <HAL_RCC_OscConfig+0x6aa>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 8004964:	f7fd ffc2 	bl	80028ec <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004968:	4bb4      	ldr	r3, [pc, #720]	; (8004c3c <HAL_RCC_OscConfig+0x38c>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4618      	mov	r0, r3
 800496e:	f7fe fa4d 	bl	8002e0c <HAL_InitTick>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d039      	beq.n	80049ec <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e2ee      	b.n	8004f5a <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d01e      	beq.n	80049c2 <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004984:	f7ff fdae 	bl	80044e4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004988:	f7fe fa8c 	bl	8002ea4 <HAL_GetTick>
 800498c:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004990:	f7fe fa88 	bl	8002ea4 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e2db      	b.n	8004f5a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() == 0U)
 80049a2:	f7ff fdbd 	bl	8004520 <LL_RCC_MSI_IsReady>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d0f1      	beq.n	8004990 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7ff fdc6 	bl	8004542 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff fdea 	bl	8004594 <LL_RCC_MSI_SetCalibTrimming>
 80049c0:	e015      	b.n	80049ee <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80049c2:	f7ff fd9e 	bl	8004502 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049c6:	f7fe fa6d 	bl	8002ea4 <HAL_GetTick>
 80049ca:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80049cc:	e008      	b.n	80049e0 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049ce:	f7fe fa69 	bl	8002ea4 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d901      	bls.n	80049e0 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e2bc      	b.n	8004f5a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() != 0U)
 80049e0:	f7ff fd9e 	bl	8004520 <LL_RCC_MSI_IsReady>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1f1      	bne.n	80049ce <HAL_RCC_OscConfig+0x11e>
 80049ea:	e000      	b.n	80049ee <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80049ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d05a      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049fa:	f7ff fdf4 	bl	80045e6 <LL_RCC_GetSysClkSource>
 80049fe:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a00:	f7ff feed 	bl	80047de <LL_RCC_PLL_GetMainSource>
 8004a04:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	2b08      	cmp	r3, #8
 8004a0a:	d005      	beq.n	8004a18 <HAL_RCC_OscConfig+0x168>
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	2b0c      	cmp	r3, #12
 8004a10:	d10d      	bne.n	8004a2e <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	2b03      	cmp	r3, #3
 8004a16:	d10a      	bne.n	8004a2e <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a18:	f7ff fc04 	bl	8004224 <LL_RCC_HSE_IsReady>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d045      	beq.n	8004aae <HAL_RCC_OscConfig+0x1fe>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d141      	bne.n	8004aae <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e295      	b.n	8004f5a <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a36:	d102      	bne.n	8004a3e <HAL_RCC_OscConfig+0x18e>
 8004a38:	f7ff fbd6 	bl	80041e8 <LL_RCC_HSE_Enable>
 8004a3c:	e00d      	b.n	8004a5a <HAL_RCC_OscConfig+0x1aa>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a46:	d104      	bne.n	8004a52 <HAL_RCC_OscConfig+0x1a2>
 8004a48:	f7ff fbb0 	bl	80041ac <LL_RCC_HSE_EnableBypass>
 8004a4c:	f7ff fbcc 	bl	80041e8 <LL_RCC_HSE_Enable>
 8004a50:	e003      	b.n	8004a5a <HAL_RCC_OscConfig+0x1aa>
 8004a52:	f7ff fbd8 	bl	8004206 <LL_RCC_HSE_Disable>
 8004a56:	f7ff fbb8 	bl	80041ca <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d012      	beq.n	8004a88 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a62:	f7fe fa1f 	bl	8002ea4 <HAL_GetTick>
 8004a66:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004a68:	e008      	b.n	8004a7c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a6a:	f7fe fa1b 	bl	8002ea4 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b64      	cmp	r3, #100	; 0x64
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e26e      	b.n	8004f5a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004a7c:	f7ff fbd2 	bl	8004224 <LL_RCC_HSE_IsReady>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d0f1      	beq.n	8004a6a <HAL_RCC_OscConfig+0x1ba>
 8004a86:	e013      	b.n	8004ab0 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a88:	f7fe fa0c 	bl	8002ea4 <HAL_GetTick>
 8004a8c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004a8e:	e008      	b.n	8004aa2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a90:	f7fe fa08 	bl	8002ea4 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b64      	cmp	r3, #100	; 0x64
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e25b      	b.n	8004f5a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004aa2:	f7ff fbbf 	bl	8004224 <LL_RCC_HSE_IsReady>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1f1      	bne.n	8004a90 <HAL_RCC_OscConfig+0x1e0>
 8004aac:	e000      	b.n	8004ab0 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aae:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0302 	and.w	r3, r3, #2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d051      	beq.n	8004b60 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004abc:	f7ff fd93 	bl	80045e6 <LL_RCC_GetSysClkSource>
 8004ac0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ac2:	f7ff fe8c 	bl	80047de <LL_RCC_PLL_GetMainSource>
 8004ac6:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	d005      	beq.n	8004ada <HAL_RCC_OscConfig+0x22a>
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	2b0c      	cmp	r3, #12
 8004ad2:	d113      	bne.n	8004afc <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d110      	bne.n	8004afc <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ada:	f7ff fbd3 	bl	8004284 <LL_RCC_HSI_IsReady>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d005      	beq.n	8004af0 <HAL_RCC_OscConfig+0x240>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d101      	bne.n	8004af0 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e234      	b.n	8004f5a <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7ff fbd7 	bl	80042a8 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004afa:	e031      	b.n	8004b60 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d019      	beq.n	8004b38 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b04:	f7ff fba0 	bl	8004248 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b08:	f7fe f9cc 	bl	8002ea4 <HAL_GetTick>
 8004b0c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b10:	f7fe f9c8 	bl	8002ea4 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e21b      	b.n	8004f5a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004b22:	f7ff fbaf 	bl	8004284 <LL_RCC_HSI_IsReady>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d0f1      	beq.n	8004b10 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7ff fbb9 	bl	80042a8 <LL_RCC_HSI_SetCalibTrimming>
 8004b36:	e013      	b.n	8004b60 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b38:	f7ff fb95 	bl	8004266 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3c:	f7fe f9b2 	bl	8002ea4 <HAL_GetTick>
 8004b40:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004b42:	e008      	b.n	8004b56 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b44:	f7fe f9ae 	bl	8002ea4 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e201      	b.n	8004f5a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004b56:	f7ff fb95 	bl	8004284 <LL_RCC_HSI_IsReady>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1f1      	bne.n	8004b44 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0308 	and.w	r3, r3, #8
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d106      	bne.n	8004b7a <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f000 80a2 	beq.w	8004cbe <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d075      	beq.n	8004c6e <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0310 	and.w	r3, r3, #16
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d046      	beq.n	8004c1c <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004b8e:	f7ff fc4c 	bl	800442a <LL_RCC_LSI1_IsReady>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d113      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004b98:	f7ff fc25 	bl	80043e6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b9c:	f7fe f982 	bl	8002ea4 <HAL_GetTick>
 8004ba0:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004ba4:	f7fe f97e 	bl	8002ea4 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e1d1      	b.n	8004f5a <HAL_RCC_OscConfig+0x6aa>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004bb6:	f7ff fc38 	bl	800442a <LL_RCC_LSI1_IsReady>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d0f1      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004bc0:	f7ff fc45 	bl	800444e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc4:	f7fe f96e 	bl	8002ea4 <HAL_GetTick>
 8004bc8:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004bca:	e008      	b.n	8004bde <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004bcc:	f7fe f96a 	bl	8002ea4 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b03      	cmp	r3, #3
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e1bd      	b.n	8004f5a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004bde:	f7ff fc58 	bl	8004492 <LL_RCC_LSI2_IsReady>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0f1      	beq.n	8004bcc <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7ff fc62 	bl	80044b6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004bf2:	f7ff fc09 	bl	8004408 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf6:	f7fe f955 	bl	8002ea4 <HAL_GetTick>
 8004bfa:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004bfc:	e008      	b.n	8004c10 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004bfe:	f7fe f951 	bl	8002ea4 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d901      	bls.n	8004c10 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e1a4      	b.n	8004f5a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004c10:	f7ff fc0b 	bl	800442a <LL_RCC_LSI1_IsReady>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1f1      	bne.n	8004bfe <HAL_RCC_OscConfig+0x34e>
 8004c1a:	e050      	b.n	8004cbe <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004c1c:	f7ff fbe3 	bl	80043e6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c20:	f7fe f940 	bl	8002ea4 <HAL_GetTick>
 8004c24:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004c26:	e00b      	b.n	8004c40 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004c28:	f7fe f93c 	bl	8002ea4 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d904      	bls.n	8004c40 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e18f      	b.n	8004f5a <HAL_RCC_OscConfig+0x6aa>
 8004c3a:	bf00      	nop
 8004c3c:	20000014 	.word	0x20000014
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004c40:	f7ff fbf3 	bl	800442a <LL_RCC_LSI1_IsReady>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d0ee      	beq.n	8004c28 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004c4a:	f7ff fc11 	bl	8004470 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004c50:	f7fe f928 	bl	8002ea4 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b03      	cmp	r3, #3
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e17b      	b.n	8004f5a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004c62:	f7ff fc16 	bl	8004492 <LL_RCC_LSI2_IsReady>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1f1      	bne.n	8004c50 <HAL_RCC_OscConfig+0x3a0>
 8004c6c:	e027      	b.n	8004cbe <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004c6e:	f7ff fbff 	bl	8004470 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c72:	f7fe f917 	bl	8002ea4 <HAL_GetTick>
 8004c76:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004c78:	e008      	b.n	8004c8c <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004c7a:	f7fe f913 	bl	8002ea4 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b03      	cmp	r3, #3
 8004c86:	d901      	bls.n	8004c8c <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e166      	b.n	8004f5a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004c8c:	f7ff fc01 	bl	8004492 <LL_RCC_LSI2_IsReady>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1f1      	bne.n	8004c7a <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004c96:	f7ff fbb7 	bl	8004408 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c9a:	f7fe f903 	bl	8002ea4 <HAL_GetTick>
 8004c9e:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004ca2:	f7fe f8ff 	bl	8002ea4 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e152      	b.n	8004f5a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004cb4:	f7ff fbb9 	bl	800442a <LL_RCC_LSI1_IsReady>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1f1      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0304 	and.w	r3, r3, #4
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d05b      	beq.n	8004d82 <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cca:	4ba6      	ldr	r3, [pc, #664]	; (8004f64 <HAL_RCC_OscConfig+0x6b4>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d114      	bne.n	8004d00 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004cd6:	f7ff fa39 	bl	800414c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cda:	f7fe f8e3 	bl	8002ea4 <HAL_GetTick>
 8004cde:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ce0:	e008      	b.n	8004cf4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ce2:	f7fe f8df 	bl	8002ea4 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e132      	b.n	8004f5a <HAL_RCC_OscConfig+0x6aa>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cf4:	4b9b      	ldr	r3, [pc, #620]	; (8004f64 <HAL_RCC_OscConfig+0x6b4>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0f0      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d102      	bne.n	8004d0e <HAL_RCC_OscConfig+0x45e>
 8004d08:	f7ff fb17 	bl	800433a <LL_RCC_LSE_Enable>
 8004d0c:	e00c      	b.n	8004d28 <HAL_RCC_OscConfig+0x478>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	2b05      	cmp	r3, #5
 8004d14:	d104      	bne.n	8004d20 <HAL_RCC_OscConfig+0x470>
 8004d16:	f7ff fb32 	bl	800437e <LL_RCC_LSE_EnableBypass>
 8004d1a:	f7ff fb0e 	bl	800433a <LL_RCC_LSE_Enable>
 8004d1e:	e003      	b.n	8004d28 <HAL_RCC_OscConfig+0x478>
 8004d20:	f7ff fb1c 	bl	800435c <LL_RCC_LSE_Disable>
 8004d24:	f7ff fb3c 	bl	80043a0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d014      	beq.n	8004d5a <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d30:	f7fe f8b8 	bl	8002ea4 <HAL_GetTick>
 8004d34:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004d36:	e00a      	b.n	8004d4e <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d38:	f7fe f8b4 	bl	8002ea4 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e105      	b.n	8004f5a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004d4e:	f7ff fb38 	bl	80043c2 <LL_RCC_LSE_IsReady>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0ef      	beq.n	8004d38 <HAL_RCC_OscConfig+0x488>
 8004d58:	e013      	b.n	8004d82 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d5a:	f7fe f8a3 	bl	8002ea4 <HAL_GetTick>
 8004d5e:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004d60:	e00a      	b.n	8004d78 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d62:	f7fe f89f 	bl	8002ea4 <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e0f0      	b.n	8004f5a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004d78:	f7ff fb23 	bl	80043c2 <LL_RCC_LSE_IsReady>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1ef      	bne.n	8004d62 <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d02c      	beq.n	8004de8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d014      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d96:	f7ff fa9c 	bl	80042d2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d9a:	f7fe f883 	bl	8002ea4 <HAL_GetTick>
 8004d9e:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004da0:	e008      	b.n	8004db4 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004da2:	f7fe f87f 	bl	8002ea4 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d901      	bls.n	8004db4 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e0d2      	b.n	8004f5a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004db4:	f7ff faaf 	bl	8004316 <LL_RCC_HSI48_IsReady>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0f1      	beq.n	8004da2 <HAL_RCC_OscConfig+0x4f2>
 8004dbe:	e013      	b.n	8004de8 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004dc0:	f7ff fa98 	bl	80042f4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc4:	f7fe f86e 	bl	8002ea4 <HAL_GetTick>
 8004dc8:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004dca:	e008      	b.n	8004dde <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dcc:	f7fe f86a 	bl	8002ea4 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e0bd      	b.n	8004f5a <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004dde:	f7ff fa9a 	bl	8004316 <LL_RCC_HSI48_IsReady>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1f1      	bne.n	8004dcc <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 80b3 	beq.w	8004f58 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004df2:	f7ff fbf8 	bl	80045e6 <LL_RCC_GetSysClkSource>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b0c      	cmp	r3, #12
 8004dfa:	d076      	beq.n	8004eea <HAL_RCC_OscConfig+0x63a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d14b      	bne.n	8004e9c <HAL_RCC_OscConfig+0x5ec>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e04:	f7ff fca5 	bl	8004752 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e08:	f7fe f84c 	bl	8002ea4 <HAL_GetTick>
 8004e0c:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004e0e:	e008      	b.n	8004e22 <HAL_RCC_OscConfig+0x572>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e10:	f7fe f848 	bl	8002ea4 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_OscConfig+0x572>
          {
            return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e09b      	b.n	8004f5a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004e22:	f7ff fca5 	bl	8004770 <LL_RCC_PLL_IsReady>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1f1      	bne.n	8004e10 <HAL_RCC_OscConfig+0x560>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e30:	68da      	ldr	r2, [r3, #12]
 8004e32:	4b4d      	ldr	r3, [pc, #308]	; (8004f68 <HAL_RCC_OscConfig+0x6b8>)
 8004e34:	4013      	ands	r3, r2
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e3e:	4311      	orrs	r1, r2
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e44:	0212      	lsls	r2, r2, #8
 8004e46:	4311      	orrs	r1, r2
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004e4c:	4311      	orrs	r1, r2
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004e52:	4311      	orrs	r1, r2
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e62:	f7ff fc67 	bl	8004734 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e74:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e76:	f7fe f815 	bl	8002ea4 <HAL_GetTick>
 8004e7a:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8004e7c:	e008      	b.n	8004e90 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e7e:	f7fe f811 	bl	8002ea4 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e064      	b.n	8004f5a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() == 0U)
 8004e90:	f7ff fc6e 	bl	8004770 <LL_RCC_PLL_IsReady>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d0f1      	beq.n	8004e7e <HAL_RCC_OscConfig+0x5ce>
 8004e9a:	e05d      	b.n	8004f58 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e9c:	f7ff fc59 	bl	8004752 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004eaa:	f023 0303 	bic.w	r3, r3, #3
 8004eae:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8004eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004eba:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8004ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ec2:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec4:	f7fd ffee 	bl	8002ea4 <HAL_GetTick>
 8004ec8:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004eca:	e008      	b.n	8004ede <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ecc:	f7fd ffea 	bl	8002ea4 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e03d      	b.n	8004f5a <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004ede:	f7ff fc47 	bl	8004770 <LL_RCC_PLL_IsReady>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1f1      	bne.n	8004ecc <HAL_RCC_OscConfig+0x61c>
 8004ee8:	e036      	b.n	8004f58 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d101      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x646>
      {
        return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e031      	b.n	8004f5a <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8004ef6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	f003 0203 	and.w	r2, r3, #3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d123      	bne.n	8004f54 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d11c      	bne.n	8004f54 <HAL_RCC_OscConfig+0x6a4>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	0a1b      	lsrs	r3, r3, #8
 8004f1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d114      	bne.n	8004f54 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d10d      	bne.n	8004f54 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d106      	bne.n	8004f54 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d001      	beq.n	8004f58 <HAL_RCC_OscConfig+0x6a8>
        {
          return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e000      	b.n	8004f5a <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	372c      	adds	r7, #44	; 0x2c
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd90      	pop	{r4, r7, pc}
 8004f62:	bf00      	nop
 8004f64:	58000400 	.word	0x58000400
 8004f68:	11c1808c 	.word	0x11c1808c

08004f6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d101      	bne.n	8004f80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e12a      	b.n	80051d6 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f80:	4b97      	ldr	r3, [pc, #604]	; (80051e0 <HAL_RCC_ClockConfig+0x274>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0307 	and.w	r3, r3, #7
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d91b      	bls.n	8004fc6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f8e:	4b94      	ldr	r3, [pc, #592]	; (80051e0 <HAL_RCC_ClockConfig+0x274>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f023 0207 	bic.w	r2, r3, #7
 8004f96:	4992      	ldr	r1, [pc, #584]	; (80051e0 <HAL_RCC_ClockConfig+0x274>)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f9e:	f7fd ff81 	bl	8002ea4 <HAL_GetTick>
 8004fa2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fa4:	e008      	b.n	8004fb8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004fa6:	f7fd ff7d 	bl	8002ea4 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e10e      	b.n	80051d6 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fb8:	4b89      	ldr	r3, [pc, #548]	; (80051e0 <HAL_RCC_ClockConfig+0x274>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0307 	and.w	r3, r3, #7
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d1ef      	bne.n	8004fa6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d016      	beq.n	8005000 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7ff fb11 	bl	80045fe <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004fdc:	f7fd ff62 	bl	8002ea4 <HAL_GetTick>
 8004fe0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004fe4:	f7fd ff5e 	bl	8002ea4 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e0ef      	b.n	80051d6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004ff6:	f7ff fbfe 	bl	80047f6 <LL_RCC_IsActiveFlag_HPRE>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d0f1      	beq.n	8004fe4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0320 	and.w	r3, r3, #32
 8005008:	2b00      	cmp	r3, #0
 800500a:	d016      	beq.n	800503a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	4618      	mov	r0, r3
 8005012:	f7ff fb08 	bl	8004626 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005016:	f7fd ff45 	bl	8002ea4 <HAL_GetTick>
 800501a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800501c:	e008      	b.n	8005030 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800501e:	f7fd ff41 	bl	8002ea4 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d901      	bls.n	8005030 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e0d2      	b.n	80051d6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005030:	f7ff fbf3 	bl	800481a <LL_RCC_IsActiveFlag_C2HPRE>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d0f1      	beq.n	800501e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005042:	2b00      	cmp	r3, #0
 8005044:	d016      	beq.n	8005074 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	4618      	mov	r0, r3
 800504c:	f7ff fb01 	bl	8004652 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005050:	f7fd ff28 	bl	8002ea4 <HAL_GetTick>
 8005054:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005056:	e008      	b.n	800506a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005058:	f7fd ff24 	bl	8002ea4 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b02      	cmp	r3, #2
 8005064:	d901      	bls.n	800506a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e0b5      	b.n	80051d6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800506a:	f7ff fbe9 	bl	8004840 <LL_RCC_IsActiveFlag_SHDHPRE>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d0f1      	beq.n	8005058 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0304 	and.w	r3, r3, #4
 800507c:	2b00      	cmp	r3, #0
 800507e:	d016      	beq.n	80050ae <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	4618      	mov	r0, r3
 8005086:	f7ff fafb 	bl	8004680 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800508a:	f7fd ff0b 	bl	8002ea4 <HAL_GetTick>
 800508e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005090:	e008      	b.n	80050a4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005092:	f7fd ff07 	bl	8002ea4 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	2b02      	cmp	r3, #2
 800509e:	d901      	bls.n	80050a4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e098      	b.n	80051d6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80050a4:	f7ff fbdf 	bl	8004866 <LL_RCC_IsActiveFlag_PPRE1>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0f1      	beq.n	8005092 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0308 	and.w	r3, r3, #8
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d017      	beq.n	80050ea <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7ff faf1 	bl	80046a8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80050c6:	f7fd feed 	bl	8002ea4 <HAL_GetTick>
 80050ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80050cc:	e008      	b.n	80050e0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80050ce:	f7fd fee9 	bl	8002ea4 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d901      	bls.n	80050e0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e07a      	b.n	80051d6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80050e0:	f7ff fbd3 	bl	800488a <LL_RCC_IsActiveFlag_PPRE2>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d0f1      	beq.n	80050ce <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d043      	beq.n	800517e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d106      	bne.n	800510c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80050fe:	f7ff f891 	bl	8004224 <LL_RCC_HSE_IsReady>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d11e      	bne.n	8005146 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e064      	b.n	80051d6 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	2b03      	cmp	r3, #3
 8005112:	d106      	bne.n	8005122 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005114:	f7ff fb2c 	bl	8004770 <LL_RCC_PLL_IsReady>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d113      	bne.n	8005146 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e059      	b.n	80051d6 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d106      	bne.n	8005138 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800512a:	f7ff f9f9 	bl	8004520 <LL_RCC_MSI_IsReady>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d108      	bne.n	8005146 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e04e      	b.n	80051d6 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005138:	f7ff f8a4 	bl	8004284 <LL_RCC_HSI_IsReady>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e047      	b.n	80051d6 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	4618      	mov	r0, r3
 800514c:	f7ff fa37 	bl	80045be <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005150:	f7fd fea8 	bl	8002ea4 <HAL_GetTick>
 8005154:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005156:	e00a      	b.n	800516e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005158:	f7fd fea4 	bl	8002ea4 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	f241 3288 	movw	r2, #5000	; 0x1388
 8005166:	4293      	cmp	r3, r2
 8005168:	d901      	bls.n	800516e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e033      	b.n	80051d6 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800516e:	f7ff fa3a 	bl	80045e6 <LL_RCC_GetSysClkSource>
 8005172:	4602      	mov	r2, r0
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	429a      	cmp	r2, r3
 800517c:	d1ec      	bne.n	8005158 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800517e:	4b18      	ldr	r3, [pc, #96]	; (80051e0 <HAL_RCC_ClockConfig+0x274>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0307 	and.w	r3, r3, #7
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	429a      	cmp	r2, r3
 800518a:	d21b      	bcs.n	80051c4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800518c:	4b14      	ldr	r3, [pc, #80]	; (80051e0 <HAL_RCC_ClockConfig+0x274>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f023 0207 	bic.w	r2, r3, #7
 8005194:	4912      	ldr	r1, [pc, #72]	; (80051e0 <HAL_RCC_ClockConfig+0x274>)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	4313      	orrs	r3, r2
 800519a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800519c:	f7fd fe82 	bl	8002ea4 <HAL_GetTick>
 80051a0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a2:	e008      	b.n	80051b6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80051a4:	f7fd fe7e 	bl	8002ea4 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e00f      	b.n	80051d6 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051b6:	4b0a      	ldr	r3, [pc, #40]	; (80051e0 <HAL_RCC_ClockConfig+0x274>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0307 	and.w	r3, r3, #7
 80051be:	683a      	ldr	r2, [r7, #0]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d1ef      	bne.n	80051a4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 80051c4:	f7fd fb92 	bl	80028ec <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80051c8:	f7fd fe78 	bl	8002ebc <HAL_GetTickPrio>
 80051cc:	4603      	mov	r3, r0
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fd fe1c 	bl	8002e0c <HAL_InitTick>
 80051d4:	4603      	mov	r3, r0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	58004000 	.word	0x58004000

080051e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051e4:	b590      	push	{r4, r7, lr}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051ea:	f7ff f9fc 	bl	80045e6 <LL_RCC_GetSysClkSource>
 80051ee:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d10a      	bne.n	800520c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80051f6:	f7ff f9b8 	bl	800456a <LL_RCC_MSI_GetRange>
 80051fa:	4603      	mov	r3, r0
 80051fc:	091b      	lsrs	r3, r3, #4
 80051fe:	f003 030f 	and.w	r3, r3, #15
 8005202:	4a2a      	ldr	r2, [pc, #168]	; (80052ac <HAL_RCC_GetSysClockFreq+0xc8>)
 8005204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005208:	60fb      	str	r3, [r7, #12]
 800520a:	e04a      	b.n	80052a2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b04      	cmp	r3, #4
 8005210:	d102      	bne.n	8005218 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005212:	4b27      	ldr	r3, [pc, #156]	; (80052b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005214:	60fb      	str	r3, [r7, #12]
 8005216:	e044      	b.n	80052a2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b08      	cmp	r3, #8
 800521c:	d10a      	bne.n	8005234 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800521e:	f7fe ffb3 	bl	8004188 <LL_RCC_HSE_IsEnabledDiv2>
 8005222:	4603      	mov	r3, r0
 8005224:	2b01      	cmp	r3, #1
 8005226:	d102      	bne.n	800522e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005228:	4b21      	ldr	r3, [pc, #132]	; (80052b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800522a:	60fb      	str	r3, [r7, #12]
 800522c:	e039      	b.n	80052a2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800522e:	4b21      	ldr	r3, [pc, #132]	; (80052b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005230:	60fb      	str	r3, [r7, #12]
 8005232:	e036      	b.n	80052a2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005234:	f7ff fad3 	bl	80047de <LL_RCC_PLL_GetMainSource>
 8005238:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	2b02      	cmp	r3, #2
 800523e:	d002      	beq.n	8005246 <HAL_RCC_GetSysClockFreq+0x62>
 8005240:	2b03      	cmp	r3, #3
 8005242:	d003      	beq.n	800524c <HAL_RCC_GetSysClockFreq+0x68>
 8005244:	e00d      	b.n	8005262 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005246:	4b1a      	ldr	r3, [pc, #104]	; (80052b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005248:	60bb      	str	r3, [r7, #8]
        break;
 800524a:	e015      	b.n	8005278 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800524c:	f7fe ff9c 	bl	8004188 <LL_RCC_HSE_IsEnabledDiv2>
 8005250:	4603      	mov	r3, r0
 8005252:	2b01      	cmp	r3, #1
 8005254:	d102      	bne.n	800525c <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005256:	4b16      	ldr	r3, [pc, #88]	; (80052b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005258:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800525a:	e00d      	b.n	8005278 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 800525c:	4b15      	ldr	r3, [pc, #84]	; (80052b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800525e:	60bb      	str	r3, [r7, #8]
        break;
 8005260:	e00a      	b.n	8005278 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005262:	f7ff f982 	bl	800456a <LL_RCC_MSI_GetRange>
 8005266:	4603      	mov	r3, r0
 8005268:	091b      	lsrs	r3, r3, #4
 800526a:	f003 030f 	and.w	r3, r3, #15
 800526e:	4a0f      	ldr	r2, [pc, #60]	; (80052ac <HAL_RCC_GetSysClockFreq+0xc8>)
 8005270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005274:	60bb      	str	r3, [r7, #8]
        break;
 8005276:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8005278:	f7ff fa8c 	bl	8004794 <LL_RCC_PLL_GetN>
 800527c:	4602      	mov	r2, r0
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	fb03 f402 	mul.w	r4, r3, r2
 8005284:	f7ff fa9f 	bl	80047c6 <LL_RCC_PLL_GetDivider>
 8005288:	4603      	mov	r3, r0
 800528a:	091b      	lsrs	r3, r3, #4
 800528c:	3301      	adds	r3, #1
 800528e:	fbb4 f4f3 	udiv	r4, r4, r3
 8005292:	f7ff fa8c 	bl	80047ae <LL_RCC_PLL_GetR>
 8005296:	4603      	mov	r3, r0
 8005298:	0f5b      	lsrs	r3, r3, #29
 800529a:	3301      	adds	r3, #1
 800529c:	fbb4 f3f3 	udiv	r3, r4, r3
 80052a0:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80052a2:	68fb      	ldr	r3, [r7, #12]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3714      	adds	r7, #20
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd90      	pop	{r4, r7, pc}
 80052ac:	0800b610 	.word	0x0800b610
 80052b0:	00f42400 	.word	0x00f42400
 80052b4:	01e84800 	.word	0x01e84800

080052b8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052b8:	b598      	push	{r3, r4, r7, lr}
 80052ba:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80052bc:	f7ff ff92 	bl	80051e4 <HAL_RCC_GetSysClockFreq>
 80052c0:	4604      	mov	r4, r0
 80052c2:	f7ff fa05 	bl	80046d0 <LL_RCC_GetAHBPrescaler>
 80052c6:	4603      	mov	r3, r0
 80052c8:	091b      	lsrs	r3, r3, #4
 80052ca:	f003 030f 	and.w	r3, r3, #15
 80052ce:	4a03      	ldr	r2, [pc, #12]	; (80052dc <HAL_RCC_GetHCLKFreq+0x24>)
 80052d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052d4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80052d8:	4618      	mov	r0, r3
 80052da:	bd98      	pop	{r3, r4, r7, pc}
 80052dc:	0800b5b0 	.word	0x0800b5b0

080052e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052e0:	b598      	push	{r3, r4, r7, lr}
 80052e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80052e4:	f7ff ffe8 	bl	80052b8 <HAL_RCC_GetHCLKFreq>
 80052e8:	4604      	mov	r4, r0
 80052ea:	f7ff fa0b 	bl	8004704 <LL_RCC_GetAPB1Prescaler>
 80052ee:	4603      	mov	r3, r0
 80052f0:	0a1b      	lsrs	r3, r3, #8
 80052f2:	f003 0307 	and.w	r3, r3, #7
 80052f6:	4a04      	ldr	r2, [pc, #16]	; (8005308 <HAL_RCC_GetPCLK1Freq+0x28>)
 80052f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052fc:	f003 031f 	and.w	r3, r3, #31
 8005300:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005304:	4618      	mov	r0, r3
 8005306:	bd98      	pop	{r3, r4, r7, pc}
 8005308:	0800b5f0 	.word	0x0800b5f0

0800530c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800530c:	b598      	push	{r3, r4, r7, lr}
 800530e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005310:	f7ff ffd2 	bl	80052b8 <HAL_RCC_GetHCLKFreq>
 8005314:	4604      	mov	r4, r0
 8005316:	f7ff fa01 	bl	800471c <LL_RCC_GetAPB2Prescaler>
 800531a:	4603      	mov	r3, r0
 800531c:	0adb      	lsrs	r3, r3, #11
 800531e:	f003 0307 	and.w	r3, r3, #7
 8005322:	4a04      	ldr	r2, [pc, #16]	; (8005334 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005328:	f003 031f 	and.w	r3, r3, #31
 800532c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005330:	4618      	mov	r0, r3
 8005332:	bd98      	pop	{r3, r4, r7, pc}
 8005334:	0800b5f0 	.word	0x0800b5f0

08005338 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005338:	b590      	push	{r4, r7, lr}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2bb0      	cmp	r3, #176	; 0xb0
 8005344:	d903      	bls.n	800534e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005346:	4b15      	ldr	r3, [pc, #84]	; (800539c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534a:	60fb      	str	r3, [r7, #12]
 800534c:	e007      	b.n	800535e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	091b      	lsrs	r3, r3, #4
 8005352:	f003 030f 	and.w	r3, r3, #15
 8005356:	4a11      	ldr	r2, [pc, #68]	; (800539c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800535c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800535e:	f7ff f9c3 	bl	80046e8 <LL_RCC_GetAHB4Prescaler>
 8005362:	4603      	mov	r3, r0
 8005364:	091b      	lsrs	r3, r3, #4
 8005366:	f003 030f 	and.w	r3, r3, #15
 800536a:	4a0d      	ldr	r2, [pc, #52]	; (80053a0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800536c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	fbb2 f3f3 	udiv	r3, r2, r3
 8005376:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	4a0a      	ldr	r2, [pc, #40]	; (80053a4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800537c:	fba2 2303 	umull	r2, r3, r2, r3
 8005380:	0c9c      	lsrs	r4, r3, #18
 8005382:	f7fe fef3 	bl	800416c <HAL_PWREx_GetVoltageRange>
 8005386:	4603      	mov	r3, r0
 8005388:	4619      	mov	r1, r3
 800538a:	4620      	mov	r0, r4
 800538c:	f000 f80c 	bl	80053a8 <RCC_SetFlashLatency>
 8005390:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8005392:	4618      	mov	r0, r3
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	bd90      	pop	{r4, r7, pc}
 800539a:	bf00      	nop
 800539c:	0800b610 	.word	0x0800b610
 80053a0:	0800b5b0 	.word	0x0800b5b0
 80053a4:	431bde83 	.word	0x431bde83

080053a8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80053a8:	b590      	push	{r4, r7, lr}
 80053aa:	b093      	sub	sp, #76	; 0x4c
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80053b2:	4b39      	ldr	r3, [pc, #228]	; (8005498 <RCC_SetFlashLatency+0xf0>)
 80053b4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80053b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80053ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80053be:	4a37      	ldr	r2, [pc, #220]	; (800549c <RCC_SetFlashLatency+0xf4>)
 80053c0:	f107 031c 	add.w	r3, r7, #28
 80053c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80053c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80053ca:	4b35      	ldr	r3, [pc, #212]	; (80054a0 <RCC_SetFlashLatency+0xf8>)
 80053cc:	f107 040c 	add.w	r4, r7, #12
 80053d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80053d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80053d6:	2300      	movs	r3, #0
 80053d8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053e0:	d11c      	bne.n	800541c <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80053e2:	2300      	movs	r3, #0
 80053e4:	643b      	str	r3, [r7, #64]	; 0x40
 80053e6:	e015      	b.n	8005414 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80053e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80053f0:	4413      	add	r3, r2
 80053f2:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d808      	bhi.n	800540e <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80053fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005404:	4413      	add	r3, r2
 8005406:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800540a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800540c:	e022      	b.n	8005454 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800540e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005410:	3301      	adds	r3, #1
 8005412:	643b      	str	r3, [r7, #64]	; 0x40
 8005414:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005416:	2b03      	cmp	r3, #3
 8005418:	d9e6      	bls.n	80053e8 <RCC_SetFlashLatency+0x40>
 800541a:	e01b      	b.n	8005454 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800541c:	2300      	movs	r3, #0
 800541e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005420:	e015      	b.n	800544e <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800542a:	4413      	add	r3, r2
 800542c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	429a      	cmp	r2, r3
 8005434:	d808      	bhi.n	8005448 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800543e:	4413      	add	r3, r2
 8005440:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005444:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005446:	e005      	b.n	8005454 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800544a:	3301      	adds	r3, #1
 800544c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800544e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005450:	2b02      	cmp	r3, #2
 8005452:	d9e6      	bls.n	8005422 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8005454:	4b13      	ldr	r3, [pc, #76]	; (80054a4 <RCC_SetFlashLatency+0xfc>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f023 0207 	bic.w	r2, r3, #7
 800545c:	4911      	ldr	r1, [pc, #68]	; (80054a4 <RCC_SetFlashLatency+0xfc>)
 800545e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005460:	4313      	orrs	r3, r2
 8005462:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005464:	f7fd fd1e 	bl	8002ea4 <HAL_GetTick>
 8005468:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800546a:	e008      	b.n	800547e <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800546c:	f7fd fd1a 	bl	8002ea4 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b02      	cmp	r3, #2
 8005478:	d901      	bls.n	800547e <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e007      	b.n	800548e <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800547e:	4b09      	ldr	r3, [pc, #36]	; (80054a4 <RCC_SetFlashLatency+0xfc>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0307 	and.w	r3, r3, #7
 8005486:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005488:	429a      	cmp	r2, r3
 800548a:	d1ef      	bne.n	800546c <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	374c      	adds	r7, #76	; 0x4c
 8005492:	46bd      	mov	sp, r7
 8005494:	bd90      	pop	{r4, r7, pc}
 8005496:	bf00      	nop
 8005498:	0800b514 	.word	0x0800b514
 800549c:	0800b524 	.word	0x0800b524
 80054a0:	0800b530 	.word	0x0800b530
 80054a4:	58004000 	.word	0x58004000

080054a8 <LL_RCC_LSE_IsEnabled>:
{
 80054a8:	b480      	push	{r7}
 80054aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80054ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d101      	bne.n	80054c0 <LL_RCC_LSE_IsEnabled+0x18>
 80054bc:	2301      	movs	r3, #1
 80054be:	e000      	b.n	80054c2 <LL_RCC_LSE_IsEnabled+0x1a>
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <LL_RCC_LSE_IsReady>:
{
 80054cc:	b480      	push	{r7}
 80054ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80054d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d8:	f003 0302 	and.w	r3, r3, #2
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d101      	bne.n	80054e4 <LL_RCC_LSE_IsReady+0x18>
 80054e0:	2301      	movs	r3, #1
 80054e2:	e000      	b.n	80054e6 <LL_RCC_LSE_IsReady+0x1a>
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <LL_RCC_MSI_EnablePLLMode>:
{
 80054f0:	b480      	push	{r7}
 80054f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80054f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054fe:	f043 0304 	orr.w	r3, r3, #4
 8005502:	6013      	str	r3, [r2, #0]
}
 8005504:	bf00      	nop
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <LL_RCC_SetRFWKPClockSource>:
{
 800550e:	b480      	push	{r7}
 8005510:	b083      	sub	sp, #12
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800551a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800551e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005522:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4313      	orrs	r3, r2
 800552a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800552e:	bf00      	nop
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <LL_RCC_SetSMPSClockSource>:
{
 800553a:	b480      	push	{r7}
 800553c:	b083      	sub	sp, #12
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005548:	f023 0203 	bic.w	r2, r3, #3
 800554c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4313      	orrs	r3, r2
 8005554:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005556:	bf00      	nop
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr

08005562 <LL_RCC_SetSMPSPrescaler>:
{
 8005562:	b480      	push	{r7}
 8005564:	b083      	sub	sp, #12
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800556a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800556e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005570:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005574:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4313      	orrs	r3, r2
 800557c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800557e:	bf00      	nop
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <LL_RCC_SetUSARTClockSource>:
{
 800558a:	b480      	push	{r7}
 800558c:	b083      	sub	sp, #12
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800559a:	f023 0203 	bic.w	r2, r3, #3
 800559e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80055aa:	bf00      	nop
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr

080055b6 <LL_RCC_SetLPUARTClockSource>:
{
 80055b6:	b480      	push	{r7}
 80055b8:	b083      	sub	sp, #12
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80055be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80055ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80055d6:	bf00      	nop
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <LL_RCC_SetI2CClockSource>:
{
 80055e2:	b480      	push	{r7}
 80055e4:	b083      	sub	sp, #12
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80055ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	091b      	lsrs	r3, r3, #4
 80055f6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80055fa:	43db      	mvns	r3, r3
 80055fc:	401a      	ands	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	011b      	lsls	r3, r3, #4
 8005602:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005606:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800560a:	4313      	orrs	r3, r2
 800560c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <LL_RCC_SetLPTIMClockSource>:
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005628:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	0c1b      	lsrs	r3, r3, #16
 8005630:	041b      	lsls	r3, r3, #16
 8005632:	43db      	mvns	r3, r3
 8005634:	401a      	ands	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	041b      	lsls	r3, r3, #16
 800563a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800563e:	4313      	orrs	r3, r2
 8005640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <LL_RCC_SetSAIClockSource>:
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005658:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800565c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005660:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005664:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4313      	orrs	r3, r2
 800566c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <LL_RCC_SetRNGClockSource>:
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005684:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800568c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005690:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4313      	orrs	r3, r2
 8005698:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <LL_RCC_SetCLK48ClockSource>:
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80056b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <LL_RCC_SetUSBClockSource>:
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f7ff ffe3 	bl	80056a8 <LL_RCC_SetCLK48ClockSource>
}
 80056e2:	bf00      	nop
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <LL_RCC_SetADCClockSource>:
{
 80056ea:	b480      	push	{r7}
 80056ec:	b083      	sub	sp, #12
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80056f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80056fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4313      	orrs	r3, r2
 8005706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800570a:	bf00      	nop
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <LL_RCC_SetRTCClockSource>:
{
 8005716:	b480      	push	{r7}
 8005718:	b083      	sub	sp, #12
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800571e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005726:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800572a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4313      	orrs	r3, r2
 8005732:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005736:	bf00      	nop
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr

08005742 <LL_RCC_GetRTCClockSource>:
{
 8005742:	b480      	push	{r7}
 8005744:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800574a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800574e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005752:	4618      	mov	r0, r3
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <LL_RCC_ForceBackupDomainReset>:
{
 800575c:	b480      	push	{r7}
 800575e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005768:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800576c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005774:	bf00      	nop
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <LL_RCC_ReleaseBackupDomainReset>:
{
 800577e:	b480      	push	{r7}
 8005780:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800578a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800578e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005792:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005796:	bf00      	nop
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <LL_RCC_PLLSAI1_Enable>:
{
 80057a0:	b480      	push	{r7}
 80057a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80057a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057b2:	6013      	str	r3, [r2, #0]
}
 80057b4:	bf00      	nop
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <LL_RCC_PLLSAI1_Disable>:
{
 80057be:	b480      	push	{r7}
 80057c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80057c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80057d0:	6013      	str	r3, [r2, #0]
}
 80057d2:	bf00      	nop
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <LL_RCC_PLLSAI1_IsReady>:
{
 80057dc:	b480      	push	{r7}
 80057de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80057e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057ee:	d101      	bne.n	80057f4 <LL_RCC_PLLSAI1_IsReady+0x18>
 80057f0:	2301      	movs	r3, #1
 80057f2:	e000      	b.n	80057f6 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b088      	sub	sp, #32
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005808:	2300      	movs	r3, #0
 800580a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800580c:	2300      	movs	r3, #0
 800580e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005818:	2b00      	cmp	r3, #0
 800581a:	d033      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005820:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005824:	d00c      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005826:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800582a:	d802      	bhi.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800582c:	2b00      	cmp	r3, #0
 800582e:	d010      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005830:	e017      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005832:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005836:	d017      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8005838:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800583c:	d016      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800583e:	e010      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800584a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800584e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005850:	e00d      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x6e>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	3304      	adds	r3, #4
 8005856:	4618      	mov	r0, r3
 8005858:	f000 f94d 	bl	8005af6 <RCCEx_PLLSAI1_ConfigNP>
 800585c:	4603      	mov	r3, r0
 800585e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005860:	e005      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	77fb      	strb	r3, [r7, #31]
        break;
 8005866:	e002      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8005868:	bf00      	nop
 800586a:	e000      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800586c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800586e:	7ffb      	ldrb	r3, [r7, #31]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d105      	bne.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005878:	4618      	mov	r0, r3
 800587a:	f7ff fee9 	bl	8005650 <LL_RCC_SetSAIClockSource>
 800587e:	e001      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005880:	7ffb      	ldrb	r3, [r7, #31]
 8005882:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800588c:	2b00      	cmp	r3, #0
 800588e:	d046      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005890:	f7ff ff57 	bl	8005742 <LL_RCC_GetRTCClockSource>
 8005894:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589a:	69ba      	ldr	r2, [r7, #24]
 800589c:	429a      	cmp	r2, r3
 800589e:	d03c      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80058a0:	f7fe fc54 	bl	800414c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d105      	bne.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7ff ff31 	bl	8005716 <LL_RCC_SetRTCClockSource>
 80058b4:	e02e      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80058b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058be:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80058c0:	f7ff ff4c 	bl	800575c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80058c4:	f7ff ff5b 	bl	800577e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d2:	4313      	orrs	r3, r2
 80058d4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80058d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80058e0:	f7ff fde2 	bl	80054a8 <LL_RCC_LSE_IsEnabled>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d114      	bne.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80058ea:	f7fd fadb 	bl	8002ea4 <HAL_GetTick>
 80058ee:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80058f0:	e00b      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058f2:	f7fd fad7 	bl	8002ea4 <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005900:	4293      	cmp	r3, r2
 8005902:	d902      	bls.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	77fb      	strb	r3, [r7, #31]
              break;
 8005908:	e004      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 800590a:	f7ff fddf 	bl	80054cc <LL_RCC_LSE_IsReady>
 800590e:	4603      	mov	r3, r0
 8005910:	2b01      	cmp	r3, #1
 8005912:	d1ee      	bne.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005914:	7ffb      	ldrb	r3, [r7, #31]
 8005916:	77bb      	strb	r3, [r7, #30]
 8005918:	e001      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800591a:	7ffb      	ldrb	r3, [r7, #31]
 800591c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	2b00      	cmp	r3, #0
 8005928:	d004      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	4618      	mov	r0, r3
 8005930:	f7ff fe2b 	bl	800558a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d004      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	69db      	ldr	r3, [r3, #28]
 8005944:	4618      	mov	r0, r3
 8005946:	f7ff fe36 	bl	80055b6 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0310 	and.w	r3, r3, #16
 8005952:	2b00      	cmp	r3, #0
 8005954:	d004      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595a:	4618      	mov	r0, r3
 800595c:	f7ff fe5e 	bl	800561c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0320 	and.w	r3, r3, #32
 8005968:	2b00      	cmp	r3, #0
 800596a:	d004      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005970:	4618      	mov	r0, r3
 8005972:	f7ff fe53 	bl	800561c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0304 	and.w	r3, r3, #4
 800597e:	2b00      	cmp	r3, #0
 8005980:	d004      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	4618      	mov	r0, r3
 8005988:	f7ff fe2b 	bl	80055e2 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0308 	and.w	r3, r3, #8
 8005994:	2b00      	cmp	r3, #0
 8005996:	d004      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599c:	4618      	mov	r0, r3
 800599e:	f7ff fe20 	bl	80055e2 <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d022      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7ff fe8e 	bl	80056d4 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059c0:	d107      	bne.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80059c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059d0:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059da:	d10b      	bne.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	3304      	adds	r3, #4
 80059e0:	4618      	mov	r0, r3
 80059e2:	f000 f8e3 	bl	8005bac <RCCEx_PLLSAI1_ConfigNQ>
 80059e6:	4603      	mov	r3, r0
 80059e8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80059ea:	7ffb      	ldrb	r3, [r7, #31]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d001      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      {
        /* set overall return value */
        status = ret;
 80059f0:	7ffb      	ldrb	r3, [r7, #31]
 80059f2:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d02b      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a08:	d008      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a12:	d003      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d105      	bne.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7ff fe2b 	bl	800567c <LL_RCC_SetRNGClockSource>
 8005a26:	e00a      	b.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a30:	60fb      	str	r3, [r7, #12]
 8005a32:	2000      	movs	r0, #0
 8005a34:	f7ff fe22 	bl	800567c <LL_RCC_SetRNGClockSource>
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f7ff fe35 	bl	80056a8 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a42:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005a46:	d107      	bne.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a56:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d022      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7ff fe3e 	bl	80056ea <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a76:	d107      	bne.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a86:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a90:	d10b      	bne.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	3304      	adds	r3, #4
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 f8e3 	bl	8005c62 <RCCEx_PLLSAI1_ConfigNR>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005aa0:	7ffb      	ldrb	r3, [r7, #31]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d001      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      {
        /* set overall return value */
        status = ret;
 8005aa6:	7ffb      	ldrb	r3, [r7, #31]
 8005aa8:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d004      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7ff fd27 	bl	800550e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d009      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f7ff fd46 	bl	8005562 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7ff fd2d 	bl	800553a <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 8005ae0:	7fbb      	ldrb	r3, [r7, #30]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3720      	adds	r7, #32
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8005aee:	f7ff fcff 	bl	80054f0 <LL_RCC_MSI_EnablePLLMode>
}
 8005af2:	bf00      	nop
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b084      	sub	sp, #16
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005afe:	2300      	movs	r3, #0
 8005b00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005b02:	f7ff fe5c 	bl	80057be <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005b06:	f7fd f9cd 	bl	8002ea4 <HAL_GetTick>
 8005b0a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005b0c:	e009      	b.n	8005b22 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b0e:	f7fd f9c9 	bl	8002ea4 <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d902      	bls.n	8005b22 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b20:	e004      	b.n	8005b2c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005b22:	f7ff fe5b 	bl	80057dc <LL_RCC_PLLSAI1_IsReady>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1f0      	bne.n	8005b0e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005b2c:	7bfb      	ldrb	r3, [r7, #15]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d137      	bne.n	8005ba2 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	021b      	lsls	r3, r3, #8
 8005b42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b46:	4313      	orrs	r3, r2
 8005b48:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005b60:	f7ff fe1e 	bl	80057a0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b64:	f7fd f99e 	bl	8002ea4 <HAL_GetTick>
 8005b68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005b6a:	e009      	b.n	8005b80 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b6c:	f7fd f99a 	bl	8002ea4 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d902      	bls.n	8005b80 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	73fb      	strb	r3, [r7, #15]
        break;
 8005b7e:	e004      	b.n	8005b8a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005b80:	f7ff fe2c 	bl	80057dc <LL_RCC_PLLSAI1_IsReady>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d1f0      	bne.n	8005b6c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005b8a:	7bfb      	ldrb	r3, [r7, #15]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d108      	bne.n	8005ba2 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b94:	691a      	ldr	r2, [r3, #16]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005bb8:	f7ff fe01 	bl	80057be <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005bbc:	f7fd f972 	bl	8002ea4 <HAL_GetTick>
 8005bc0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005bc2:	e009      	b.n	8005bd8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005bc4:	f7fd f96e 	bl	8002ea4 <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d902      	bls.n	8005bd8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	73fb      	strb	r3, [r7, #15]
      break;
 8005bd6:	e004      	b.n	8005be2 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005bd8:	f7ff fe00 	bl	80057dc <LL_RCC_PLLSAI1_IsReady>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1f0      	bne.n	8005bc4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005be2:	7bfb      	ldrb	r3, [r7, #15]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d137      	bne.n	8005c58 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	021b      	lsls	r3, r3, #8
 8005bf8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c12:	4313      	orrs	r3, r2
 8005c14:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005c16:	f7ff fdc3 	bl	80057a0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c1a:	f7fd f943 	bl	8002ea4 <HAL_GetTick>
 8005c1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005c20:	e009      	b.n	8005c36 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c22:	f7fd f93f 	bl	8002ea4 <HAL_GetTick>
 8005c26:	4602      	mov	r2, r0
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d902      	bls.n	8005c36 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	73fb      	strb	r3, [r7, #15]
        break;
 8005c34:	e004      	b.n	8005c40 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005c36:	f7ff fdd1 	bl	80057dc <LL_RCC_PLLSAI1_IsReady>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d1f0      	bne.n	8005c22 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005c40:	7bfb      	ldrb	r3, [r7, #15]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d108      	bne.n	8005c58 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c4a:	691a      	ldr	r2, [r3, #16]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c54:	4313      	orrs	r3, r2
 8005c56:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b084      	sub	sp, #16
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005c6e:	f7ff fda6 	bl	80057be <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005c72:	f7fd f917 	bl	8002ea4 <HAL_GetTick>
 8005c76:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005c78:	e009      	b.n	8005c8e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c7a:	f7fd f913 	bl	8002ea4 <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d902      	bls.n	8005c8e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c8c:	e004      	b.n	8005c98 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005c8e:	f7ff fda5 	bl	80057dc <LL_RCC_PLLSAI1_IsReady>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1f0      	bne.n	8005c7a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005c98:	7bfb      	ldrb	r3, [r7, #15]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d137      	bne.n	8005d0e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	021b      	lsls	r3, r3, #8
 8005cae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005ccc:	f7ff fd68 	bl	80057a0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cd0:	f7fd f8e8 	bl	8002ea4 <HAL_GetTick>
 8005cd4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005cd6:	e009      	b.n	8005cec <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005cd8:	f7fd f8e4 	bl	8002ea4 <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d902      	bls.n	8005cec <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	73fb      	strb	r3, [r7, #15]
        break;
 8005cea:	e004      	b.n	8005cf6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005cec:	f7ff fd76 	bl	80057dc <LL_RCC_PLLSAI1_IsReady>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d1f0      	bne.n	8005cd8 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005cf6:	7bfb      	ldrb	r3, [r7, #15]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d108      	bne.n	8005d0e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d00:	691a      	ldr	r2, [r3, #16]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d101      	bne.n	8005d2a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e090      	b.n	8005e4c <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d106      	bne.n	8005d44 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f7fc f912 	bl	8001f68 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2202      	movs	r2, #2
 8005d48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	22ca      	movs	r2, #202	; 0xca
 8005d52:	625a      	str	r2, [r3, #36]	; 0x24
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2253      	movs	r2, #83	; 0x53
 8005d5a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 f89f 	bl	8005ea0 <RTC_EnterInitMode>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d009      	beq.n	8005d7c <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	22ff      	movs	r2, #255	; 0xff
 8005d6e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2204      	movs	r2, #4
 8005d74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e067      	b.n	8005e4c <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	6812      	ldr	r2, [r2, #0]
 8005d86:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005d8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d8e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6899      	ldr	r1, [r3, #8]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685a      	ldr	r2, [r3, #4]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	431a      	orrs	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	68d2      	ldr	r2, [r2, #12]
 8005db6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6919      	ldr	r1, [r3, #16]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	041a      	lsls	r2, r3, #16
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68da      	ldr	r2, [r3, #12]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dda:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f022 0203 	bic.w	r2, r2, #3
 8005dea:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	69da      	ldr	r2, [r3, #28]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	431a      	orrs	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	430a      	orrs	r2, r1
 8005e02:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f003 0320 	and.w	r3, r3, #32
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d113      	bne.n	8005e3a <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f81e 	bl	8005e54 <HAL_RTC_WaitForSynchro>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00d      	beq.n	8005e3a <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	22ff      	movs	r2, #255	; 0xff
 8005e24:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2204      	movs	r2, #4
 8005e2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e008      	b.n	8005e4c <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	22ff      	movs	r2, #255	; 0xff
 8005e40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
  }
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3708      	adds	r7, #8
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68da      	ldr	r2, [r3, #12]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e6a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005e6c:	f7fd f81a 	bl	8002ea4 <HAL_GetTick>
 8005e70:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e72:	e009      	b.n	8005e88 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005e74:	f7fd f816 	bl	8002ea4 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e82:	d901      	bls.n	8005e88 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e007      	b.n	8005e98 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	f003 0320 	and.w	r3, r3, #32
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d0ee      	beq.n	8005e74 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d119      	bne.n	8005eea <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ebe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005ec0:	f7fc fff0 	bl	8002ea4 <HAL_GetTick>
 8005ec4:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005ec6:	e009      	b.n	8005edc <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005ec8:	f7fc ffec 	bl	8002ea4 <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ed6:	d901      	bls.n	8005edc <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e007      	b.n	8005eec <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d0ee      	beq.n	8005ec8 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3710      	adds	r7, #16
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <HAL_RTCEx_SetWakeUpTimer>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d101      	bne.n	8005f0e <HAL_RTCEx_SetWakeUpTimer+0x1a>
 8005f0a:	2302      	movs	r3, #2
 8005f0c:	e089      	b.n	8006022 <HAL_RTCEx_SetWakeUpTimer+0x12e>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2202      	movs	r2, #2
 8005f1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	22ca      	movs	r2, #202	; 0xca
 8005f24:	625a      	str	r2, [r3, #36]	; 0x24
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2253      	movs	r2, #83	; 0x53
 8005f2c:	625a      	str	r2, [r3, #36]	; 0x24
 
  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != 0U){
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d020      	beq.n	8005f7e <HAL_RTCEx_SetWakeUpTimer+0x8a>
    tickstart = HAL_GetTick();
 8005f3c:	f7fc ffb2 	bl	8002ea4 <HAL_GetTick>
 8005f40:	6178      	str	r0, [r7, #20]

   /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005f42:	e015      	b.n	8005f70 <HAL_RTCEx_SetWakeUpTimer+0x7c>
   {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005f44:	f7fc ffae 	bl	8002ea4 <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f52:	d90d      	bls.n	8005f70 <HAL_RTCEx_SetWakeUpTimer+0x7c>
      {
       /* Enable the write protection for RTC registers */
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	22ff      	movs	r2, #255	; 0xff
 8005f5a:	625a      	str	r2, [r3, #36]	; 0x24

       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2203      	movs	r2, #3
 8005f60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

       /* Process Unlocked */ 
       __HAL_UNLOCK(hrtc);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 2020 	strb.w	r2, [r3, #32]

       return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e058      	b.n	8006022 <HAL_RTCEx_SetWakeUpTimer+0x12e>
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	f003 0304 	and.w	r3, r3, #4
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1e2      	bne.n	8005f44 <HAL_RTCEx_SetWakeUpTimer+0x50>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	689a      	ldr	r2, [r3, #8]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f8c:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8005f8e:	f7fc ff89 	bl	8002ea4 <HAL_GetTick>
 8005f92:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005f94:	e015      	b.n	8005fc2 <HAL_RTCEx_SetWakeUpTimer+0xce>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005f96:	f7fc ff85 	bl	8002ea4 <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fa4:	d90d      	bls.n	8005fc2 <HAL_RTCEx_SetWakeUpTimer+0xce>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	22ff      	movs	r2, #255	; 0xff
 8005fac:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2203      	movs	r2, #3
 8005fb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */ 
      __HAL_UNLOCK(hrtc);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e02f      	b.n	8006022 <HAL_RTCEx_SetWakeUpTimer+0x12e>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	f003 0304 	and.w	r3, r3, #4
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d0e2      	beq.n	8005f96 <HAL_RTCEx_SetWakeUpTimer+0xa2>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	689a      	ldr	r2, [r3, #8]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f022 0207 	bic.w	r2, r2, #7
 8005fde:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6899      	ldr	r1, [r3, #8]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	430a      	orrs	r2, r1
 8005fee:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68ba      	ldr	r2, [r7, #8]
 8005ff6:	615a      	str	r2, [r3, #20]

   /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	689a      	ldr	r2, [r3, #8]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006006:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	22ff      	movs	r2, #255	; 0xff
 800600e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3718      	adds	r7, #24
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b084      	sub	sp, #16
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d101      	bne.n	800603c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e07c      	b.n	8006136 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d106      	bne.n	800605c <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7fc f860 	bl	800211c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2202      	movs	r2, #2
 8006060:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006072:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800607c:	d902      	bls.n	8006084 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800607e:	2300      	movs	r3, #0
 8006080:	60fb      	str	r3, [r7, #12]
 8006082:	e002      	b.n	800608a <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006084:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006088:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006092:	d007      	beq.n	80060a4 <HAL_SPI_Init+0x7a>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800609c:	d002      	beq.n	80060a4 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d10b      	bne.n	80060c4 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060b4:	d903      	bls.n	80060be <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2202      	movs	r2, #2
 80060ba:	631a      	str	r2, [r3, #48]	; 0x30
 80060bc:	e002      	b.n	80060c4 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	431a      	orrs	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	431a      	orrs	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	695b      	ldr	r3, [r3, #20]
 80060d8:	431a      	orrs	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060e2:	431a      	orrs	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	69db      	ldr	r3, [r3, #28]
 80060e8:	431a      	orrs	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	ea42 0103 	orr.w	r1, r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	430a      	orrs	r2, r1
 80060fc:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	0c1b      	lsrs	r3, r3, #16
 8006104:	f003 0204 	and.w	r2, r3, #4
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610c:	431a      	orrs	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006112:	431a      	orrs	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	ea42 0103 	orr.w	r1, r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	430a      	orrs	r2, r1
 8006124:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800613e:	b580      	push	{r7, lr}
 8006140:	b088      	sub	sp, #32
 8006142:	af00      	add	r7, sp, #0
 8006144:	60f8      	str	r0, [r7, #12]
 8006146:	60b9      	str	r1, [r7, #8]
 8006148:	603b      	str	r3, [r7, #0]
 800614a:	4613      	mov	r3, r2
 800614c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800614e:	2300      	movs	r3, #0
 8006150:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006158:	2b01      	cmp	r3, #1
 800615a:	d101      	bne.n	8006160 <HAL_SPI_Transmit+0x22>
 800615c:	2302      	movs	r3, #2
 800615e:	e150      	b.n	8006402 <HAL_SPI_Transmit+0x2c4>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006168:	f7fc fe9c 	bl	8002ea4 <HAL_GetTick>
 800616c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800616e:	88fb      	ldrh	r3, [r7, #6]
 8006170:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b01      	cmp	r3, #1
 800617c:	d002      	beq.n	8006184 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800617e:	2302      	movs	r3, #2
 8006180:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006182:	e135      	b.n	80063f0 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d002      	beq.n	8006190 <HAL_SPI_Transmit+0x52>
 800618a:	88fb      	ldrh	r3, [r7, #6]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d102      	bne.n	8006196 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006194:	e12c      	b.n	80063f0 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2203      	movs	r2, #3
 800619a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	88fa      	ldrh	r2, [r7, #6]
 80061ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	88fa      	ldrh	r2, [r7, #6]
 80061b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061e0:	d107      	bne.n	80061f2 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061fc:	2b40      	cmp	r3, #64	; 0x40
 80061fe:	d007      	beq.n	8006210 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800620e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006218:	d94b      	bls.n	80062b2 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d002      	beq.n	8006228 <HAL_SPI_Transmit+0xea>
 8006222:	8afb      	ldrh	r3, [r7, #22]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d13e      	bne.n	80062a6 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622c:	881a      	ldrh	r2, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006238:	1c9a      	adds	r2, r3, #2
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006242:	b29b      	uxth	r3, r3
 8006244:	3b01      	subs	r3, #1
 8006246:	b29a      	uxth	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800624c:	e02b      	b.n	80062a6 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	f003 0302 	and.w	r3, r3, #2
 8006258:	2b02      	cmp	r3, #2
 800625a:	d112      	bne.n	8006282 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006260:	881a      	ldrh	r2, [r3, #0]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626c:	1c9a      	adds	r2, r3, #2
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006276:	b29b      	uxth	r3, r3
 8006278:	3b01      	subs	r3, #1
 800627a:	b29a      	uxth	r2, r3
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006280:	e011      	b.n	80062a6 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006282:	f7fc fe0f 	bl	8002ea4 <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	683a      	ldr	r2, [r7, #0]
 800628e:	429a      	cmp	r2, r3
 8006290:	d803      	bhi.n	800629a <HAL_SPI_Transmit+0x15c>
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006298:	d102      	bne.n	80062a0 <HAL_SPI_Transmit+0x162>
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d102      	bne.n	80062a6 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80062a4:	e0a4      	b.n	80063f0 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1ce      	bne.n	800624e <HAL_SPI_Transmit+0x110>
 80062b0:	e07c      	b.n	80063ac <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d002      	beq.n	80062c0 <HAL_SPI_Transmit+0x182>
 80062ba:	8afb      	ldrh	r3, [r7, #22]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d170      	bne.n	80063a2 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d912      	bls.n	80062f0 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ce:	881a      	ldrh	r2, [r3, #0]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062da:	1c9a      	adds	r2, r3, #2
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	3b02      	subs	r3, #2
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80062ee:	e058      	b.n	80063a2 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	330c      	adds	r3, #12
 80062fa:	7812      	ldrb	r2, [r2, #0]
 80062fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006302:	1c5a      	adds	r2, r3, #1
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800630c:	b29b      	uxth	r3, r3
 800630e:	3b01      	subs	r3, #1
 8006310:	b29a      	uxth	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006316:	e044      	b.n	80063a2 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f003 0302 	and.w	r3, r3, #2
 8006322:	2b02      	cmp	r3, #2
 8006324:	d12b      	bne.n	800637e <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800632a:	b29b      	uxth	r3, r3
 800632c:	2b01      	cmp	r3, #1
 800632e:	d912      	bls.n	8006356 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006334:	881a      	ldrh	r2, [r3, #0]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006340:	1c9a      	adds	r2, r3, #2
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800634a:	b29b      	uxth	r3, r3
 800634c:	3b02      	subs	r3, #2
 800634e:	b29a      	uxth	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006354:	e025      	b.n	80063a2 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	330c      	adds	r3, #12
 8006360:	7812      	ldrb	r2, [r2, #0]
 8006362:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006368:	1c5a      	adds	r2, r3, #1
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006372:	b29b      	uxth	r3, r3
 8006374:	3b01      	subs	r3, #1
 8006376:	b29a      	uxth	r2, r3
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800637c:	e011      	b.n	80063a2 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800637e:	f7fc fd91 	bl	8002ea4 <HAL_GetTick>
 8006382:	4602      	mov	r2, r0
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	683a      	ldr	r2, [r7, #0]
 800638a:	429a      	cmp	r2, r3
 800638c:	d803      	bhi.n	8006396 <HAL_SPI_Transmit+0x258>
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006394:	d102      	bne.n	800639c <HAL_SPI_Transmit+0x25e>
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d102      	bne.n	80063a2 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80063a0:	e026      	b.n	80063f0 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1b5      	bne.n	8006318 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063ac:	69ba      	ldr	r2, [r7, #24]
 80063ae:	6839      	ldr	r1, [r7, #0]
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f000 fc94 	bl	8006cde <SPI_EndRxTxTransaction>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d002      	beq.n	80063c2 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2220      	movs	r2, #32
 80063c0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d10a      	bne.n	80063e0 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063ca:	2300      	movs	r3, #0
 80063cc:	613b      	str	r3, [r7, #16]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	613b      	str	r3, [r7, #16]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	613b      	str	r3, [r7, #16]
 80063de:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d002      	beq.n	80063ee <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	77fb      	strb	r3, [r7, #31]
 80063ec:	e000      	b.n	80063f0 <HAL_SPI_Transmit+0x2b2>
  }

error:
 80063ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006400:	7ffb      	ldrb	r3, [r7, #31]
}
 8006402:	4618      	mov	r0, r3
 8006404:	3720      	adds	r7, #32
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b088      	sub	sp, #32
 800640e:	af02      	add	r7, sp, #8
 8006410:	60f8      	str	r0, [r7, #12]
 8006412:	60b9      	str	r1, [r7, #8]
 8006414:	603b      	str	r3, [r7, #0]
 8006416:	4613      	mov	r3, r2
 8006418:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800641a:	2300      	movs	r3, #0
 800641c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006426:	d112      	bne.n	800644e <HAL_SPI_Receive+0x44>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d10e      	bne.n	800644e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2204      	movs	r2, #4
 8006434:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006438:	88fa      	ldrh	r2, [r7, #6]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	4613      	mov	r3, r2
 8006440:	68ba      	ldr	r2, [r7, #8]
 8006442:	68b9      	ldr	r1, [r7, #8]
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f000 f908 	bl	800665a <HAL_SPI_TransmitReceive>
 800644a:	4603      	mov	r3, r0
 800644c:	e101      	b.n	8006652 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006454:	2b01      	cmp	r3, #1
 8006456:	d101      	bne.n	800645c <HAL_SPI_Receive+0x52>
 8006458:	2302      	movs	r3, #2
 800645a:	e0fa      	b.n	8006652 <HAL_SPI_Receive+0x248>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006464:	f7fc fd1e 	bl	8002ea4 <HAL_GetTick>
 8006468:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b01      	cmp	r3, #1
 8006474:	d002      	beq.n	800647c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006476:	2302      	movs	r3, #2
 8006478:	75fb      	strb	r3, [r7, #23]
    goto error;
 800647a:	e0e1      	b.n	8006640 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d002      	beq.n	8006488 <HAL_SPI_Receive+0x7e>
 8006482:	88fb      	ldrh	r3, [r7, #6]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d102      	bne.n	800648e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800648c:	e0d8      	b.n	8006640 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2204      	movs	r2, #4
 8006492:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	88fa      	ldrh	r2, [r7, #6]
 80064a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	88fa      	ldrh	r2, [r7, #6]
 80064ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064d8:	d908      	bls.n	80064ec <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	685a      	ldr	r2, [r3, #4]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80064e8:	605a      	str	r2, [r3, #4]
 80064ea:	e007      	b.n	80064fc <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	685a      	ldr	r2, [r3, #4]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80064fa:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006504:	d107      	bne.n	8006516 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006514:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006520:	2b40      	cmp	r3, #64	; 0x40
 8006522:	d007      	beq.n	8006534 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006532:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800653c:	d867      	bhi.n	800660e <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800653e:	e030      	b.n	80065a2 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f003 0301 	and.w	r3, r3, #1
 800654a:	2b01      	cmp	r3, #1
 800654c:	d117      	bne.n	800657e <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f103 020c 	add.w	r2, r3, #12
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655a:	7812      	ldrb	r2, [r2, #0]
 800655c:	b2d2      	uxtb	r2, r2
 800655e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006564:	1c5a      	adds	r2, r3, #1
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006570:	b29b      	uxth	r3, r3
 8006572:	3b01      	subs	r3, #1
 8006574:	b29a      	uxth	r2, r3
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800657c:	e011      	b.n	80065a2 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800657e:	f7fc fc91 	bl	8002ea4 <HAL_GetTick>
 8006582:	4602      	mov	r2, r0
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	683a      	ldr	r2, [r7, #0]
 800658a:	429a      	cmp	r2, r3
 800658c:	d803      	bhi.n	8006596 <HAL_SPI_Receive+0x18c>
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006594:	d102      	bne.n	800659c <HAL_SPI_Receive+0x192>
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d102      	bne.n	80065a2 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	75fb      	strb	r3, [r7, #23]
          goto error;
 80065a0:	e04e      	b.n	8006640 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1c8      	bne.n	8006540 <HAL_SPI_Receive+0x136>
 80065ae:	e034      	b.n	800661a <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d115      	bne.n	80065ea <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68da      	ldr	r2, [r3, #12]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c8:	b292      	uxth	r2, r2
 80065ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d0:	1c9a      	adds	r2, r3, #2
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065dc:	b29b      	uxth	r3, r3
 80065de:	3b01      	subs	r3, #1
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80065e8:	e011      	b.n	800660e <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065ea:	f7fc fc5b 	bl	8002ea4 <HAL_GetTick>
 80065ee:	4602      	mov	r2, r0
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	683a      	ldr	r2, [r7, #0]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d803      	bhi.n	8006602 <HAL_SPI_Receive+0x1f8>
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006600:	d102      	bne.n	8006608 <HAL_SPI_Receive+0x1fe>
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d102      	bne.n	800660e <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800660c:	e018      	b.n	8006640 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006614:	b29b      	uxth	r3, r3
 8006616:	2b00      	cmp	r3, #0
 8006618:	d1ca      	bne.n	80065b0 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800661a:	693a      	ldr	r2, [r7, #16]
 800661c:	6839      	ldr	r1, [r7, #0]
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f000 fb05 	bl	8006c2e <SPI_EndRxTransaction>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d002      	beq.n	8006630 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2220      	movs	r2, #32
 800662e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006634:	2b00      	cmp	r3, #0
 8006636:	d002      	beq.n	800663e <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	75fb      	strb	r3, [r7, #23]
 800663c:	e000      	b.n	8006640 <HAL_SPI_Receive+0x236>
  }

error :
 800663e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006650:	7dfb      	ldrb	r3, [r7, #23]
}
 8006652:	4618      	mov	r0, r3
 8006654:	3718      	adds	r7, #24
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b08a      	sub	sp, #40	; 0x28
 800665e:	af00      	add	r7, sp, #0
 8006660:	60f8      	str	r0, [r7, #12]
 8006662:	60b9      	str	r1, [r7, #8]
 8006664:	607a      	str	r2, [r7, #4]
 8006666:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006668:	2301      	movs	r3, #1
 800666a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800666c:	2300      	movs	r3, #0
 800666e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006678:	2b01      	cmp	r3, #1
 800667a:	d101      	bne.n	8006680 <HAL_SPI_TransmitReceive+0x26>
 800667c:	2302      	movs	r3, #2
 800667e:	e1fb      	b.n	8006a78 <HAL_SPI_TransmitReceive+0x41e>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006688:	f7fc fc0c 	bl	8002ea4 <HAL_GetTick>
 800668c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006694:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800669c:	887b      	ldrh	r3, [r7, #2]
 800669e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80066a0:	887b      	ldrh	r3, [r7, #2]
 80066a2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80066a4:	7efb      	ldrb	r3, [r7, #27]
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d00e      	beq.n	80066c8 <HAL_SPI_TransmitReceive+0x6e>
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066b0:	d106      	bne.n	80066c0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d102      	bne.n	80066c0 <HAL_SPI_TransmitReceive+0x66>
 80066ba:	7efb      	ldrb	r3, [r7, #27]
 80066bc:	2b04      	cmp	r3, #4
 80066be:	d003      	beq.n	80066c8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80066c0:	2302      	movs	r3, #2
 80066c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80066c6:	e1cd      	b.n	8006a64 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d005      	beq.n	80066da <HAL_SPI_TransmitReceive+0x80>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d002      	beq.n	80066da <HAL_SPI_TransmitReceive+0x80>
 80066d4:	887b      	ldrh	r3, [r7, #2]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d103      	bne.n	80066e2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80066e0:	e1c0      	b.n	8006a64 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b04      	cmp	r3, #4
 80066ec:	d003      	beq.n	80066f6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2205      	movs	r2, #5
 80066f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	887a      	ldrh	r2, [r7, #2]
 8006706:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	887a      	ldrh	r2, [r7, #2]
 800670e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	68ba      	ldr	r2, [r7, #8]
 8006716:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	887a      	ldrh	r2, [r7, #2]
 800671c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	887a      	ldrh	r2, [r7, #2]
 8006722:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006738:	d802      	bhi.n	8006740 <HAL_SPI_TransmitReceive+0xe6>
 800673a:	8a3b      	ldrh	r3, [r7, #16]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d908      	bls.n	8006752 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	685a      	ldr	r2, [r3, #4]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800674e:	605a      	str	r2, [r3, #4]
 8006750:	e007      	b.n	8006762 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	685a      	ldr	r2, [r3, #4]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006760:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800676c:	2b40      	cmp	r3, #64	; 0x40
 800676e:	d007      	beq.n	8006780 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800677e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006788:	d97c      	bls.n	8006884 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d002      	beq.n	8006798 <HAL_SPI_TransmitReceive+0x13e>
 8006792:	8a7b      	ldrh	r3, [r7, #18]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d169      	bne.n	800686c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679c:	881a      	ldrh	r2, [r3, #0]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a8:	1c9a      	adds	r2, r3, #2
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	3b01      	subs	r3, #1
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067bc:	e056      	b.n	800686c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	f003 0302 	and.w	r3, r3, #2
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d11b      	bne.n	8006804 <HAL_SPI_TransmitReceive+0x1aa>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d016      	beq.n	8006804 <HAL_SPI_TransmitReceive+0x1aa>
 80067d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d113      	bne.n	8006804 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e0:	881a      	ldrh	r2, [r3, #0]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ec:	1c9a      	adds	r2, r3, #2
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	3b01      	subs	r3, #1
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006800:	2300      	movs	r3, #0
 8006802:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	2b01      	cmp	r3, #1
 8006810:	d11c      	bne.n	800684c <HAL_SPI_TransmitReceive+0x1f2>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006818:	b29b      	uxth	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d016      	beq.n	800684c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68da      	ldr	r2, [r3, #12]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006828:	b292      	uxth	r2, r2
 800682a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006830:	1c9a      	adds	r2, r3, #2
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800683c:	b29b      	uxth	r3, r3
 800683e:	3b01      	subs	r3, #1
 8006840:	b29a      	uxth	r2, r3
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006848:	2301      	movs	r3, #1
 800684a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800684c:	f7fc fb2a 	bl	8002ea4 <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006858:	429a      	cmp	r2, r3
 800685a:	d807      	bhi.n	800686c <HAL_SPI_TransmitReceive+0x212>
 800685c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006862:	d003      	beq.n	800686c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800686a:	e0fb      	b.n	8006a64 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006870:	b29b      	uxth	r3, r3
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1a3      	bne.n	80067be <HAL_SPI_TransmitReceive+0x164>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800687c:	b29b      	uxth	r3, r3
 800687e:	2b00      	cmp	r3, #0
 8006880:	d19d      	bne.n	80067be <HAL_SPI_TransmitReceive+0x164>
 8006882:	e0df      	b.n	8006a44 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d003      	beq.n	8006894 <HAL_SPI_TransmitReceive+0x23a>
 800688c:	8a7b      	ldrh	r3, [r7, #18]
 800688e:	2b01      	cmp	r3, #1
 8006890:	f040 80cb 	bne.w	8006a2a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006898:	b29b      	uxth	r3, r3
 800689a:	2b01      	cmp	r3, #1
 800689c:	d912      	bls.n	80068c4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a2:	881a      	ldrh	r2, [r3, #0]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ae:	1c9a      	adds	r2, r3, #2
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	3b02      	subs	r3, #2
 80068bc:	b29a      	uxth	r2, r3
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80068c2:	e0b2      	b.n	8006a2a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	330c      	adds	r3, #12
 80068ce:	7812      	ldrb	r2, [r2, #0]
 80068d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d6:	1c5a      	adds	r2, r3, #1
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	3b01      	subs	r3, #1
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068ea:	e09e      	b.n	8006a2a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	f003 0302 	and.w	r3, r3, #2
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d134      	bne.n	8006964 <HAL_SPI_TransmitReceive+0x30a>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068fe:	b29b      	uxth	r3, r3
 8006900:	2b00      	cmp	r3, #0
 8006902:	d02f      	beq.n	8006964 <HAL_SPI_TransmitReceive+0x30a>
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	2b01      	cmp	r3, #1
 8006908:	d12c      	bne.n	8006964 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800690e:	b29b      	uxth	r3, r3
 8006910:	2b01      	cmp	r3, #1
 8006912:	d912      	bls.n	800693a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006918:	881a      	ldrh	r2, [r3, #0]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006924:	1c9a      	adds	r2, r3, #2
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800692e:	b29b      	uxth	r3, r3
 8006930:	3b02      	subs	r3, #2
 8006932:	b29a      	uxth	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006938:	e012      	b.n	8006960 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	330c      	adds	r3, #12
 8006944:	7812      	ldrb	r2, [r2, #0]
 8006946:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694c:	1c5a      	adds	r2, r3, #1
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006956:	b29b      	uxth	r3, r3
 8006958:	3b01      	subs	r3, #1
 800695a:	b29a      	uxth	r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006960:	2300      	movs	r3, #0
 8006962:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	2b01      	cmp	r3, #1
 8006970:	d148      	bne.n	8006a04 <HAL_SPI_TransmitReceive+0x3aa>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006978:	b29b      	uxth	r3, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	d042      	beq.n	8006a04 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006984:	b29b      	uxth	r3, r3
 8006986:	2b01      	cmp	r3, #1
 8006988:	d923      	bls.n	80069d2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68da      	ldr	r2, [r3, #12]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006994:	b292      	uxth	r2, r2
 8006996:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699c:	1c9a      	adds	r2, r3, #2
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	3b02      	subs	r3, #2
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d81f      	bhi.n	8006a00 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80069ce:	605a      	str	r2, [r3, #4]
 80069d0:	e016      	b.n	8006a00 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f103 020c 	add.w	r2, r3, #12
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069de:	7812      	ldrb	r2, [r2, #0]
 80069e0:	b2d2      	uxtb	r2, r2
 80069e2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e8:	1c5a      	adds	r2, r3, #1
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	3b01      	subs	r3, #1
 80069f8:	b29a      	uxth	r2, r3
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a00:	2301      	movs	r3, #1
 8006a02:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006a04:	f7fc fa4e 	bl	8002ea4 <HAL_GetTick>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d803      	bhi.n	8006a1c <HAL_SPI_TransmitReceive+0x3c2>
 8006a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a1a:	d102      	bne.n	8006a22 <HAL_SPI_TransmitReceive+0x3c8>
 8006a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d103      	bne.n	8006a2a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006a28:	e01c      	b.n	8006a64 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f47f af5b 	bne.w	80068ec <HAL_SPI_TransmitReceive+0x292>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	f47f af54 	bne.w	80068ec <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a44:	69fa      	ldr	r2, [r7, #28]
 8006a46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f000 f948 	bl	8006cde <SPI_EndRxTxTransaction>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d006      	beq.n	8006a62 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2220      	movs	r2, #32
 8006a5e:	661a      	str	r2, [r3, #96]	; 0x60
 8006a60:	e000      	b.n	8006a64 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006a62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006a74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3728      	adds	r7, #40	; 0x28
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	603b      	str	r3, [r7, #0]
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a90:	e04c      	b.n	8006b2c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a98:	d048      	beq.n	8006b2c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006a9a:	f7fc fa03 	bl	8002ea4 <HAL_GetTick>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	683a      	ldr	r2, [r7, #0]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d902      	bls.n	8006ab0 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d13d      	bne.n	8006b2c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	685a      	ldr	r2, [r3, #4]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006abe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ac8:	d111      	bne.n	8006aee <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ad2:	d004      	beq.n	8006ade <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006adc:	d107      	bne.n	8006aee <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006aec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006af6:	d10f      	bne.n	8006b18 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b06:	601a      	str	r2, [r3, #0]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b16:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	e00f      	b.n	8006b4c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	689a      	ldr	r2, [r3, #8]
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	4013      	ands	r3, r2
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	bf0c      	ite	eq
 8006b3c:	2301      	moveq	r3, #1
 8006b3e:	2300      	movne	r3, #0
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	461a      	mov	r2, r3
 8006b44:	79fb      	ldrb	r3, [r7, #7]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d1a3      	bne.n	8006a92 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3710      	adds	r7, #16
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
 8006b60:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8006b62:	e057      	b.n	8006c14 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006b6a:	d106      	bne.n	8006b7a <SPI_WaitFifoStateUntilTimeout+0x26>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d103      	bne.n	8006b7a <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	330c      	adds	r3, #12
 8006b78:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b80:	d048      	beq.n	8006c14 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006b82:	f7fc f98f 	bl	8002ea4 <HAL_GetTick>
 8006b86:	4602      	mov	r2, r0
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	683a      	ldr	r2, [r7, #0]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d902      	bls.n	8006b98 <SPI_WaitFifoStateUntilTimeout+0x44>
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d13d      	bne.n	8006c14 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	685a      	ldr	r2, [r3, #4]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ba6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bb0:	d111      	bne.n	8006bd6 <SPI_WaitFifoStateUntilTimeout+0x82>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bba:	d004      	beq.n	8006bc6 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bc4:	d107      	bne.n	8006bd6 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bd4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bde:	d10f      	bne.n	8006c00 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006bee:	601a      	str	r2, [r3, #0]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bfe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e008      	b.n	8006c26 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	689a      	ldr	r2, [r3, #8]
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d19f      	bne.n	8006b64 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b086      	sub	sp, #24
 8006c32:	af02      	add	r7, sp, #8
 8006c34:	60f8      	str	r0, [r7, #12]
 8006c36:	60b9      	str	r1, [r7, #8]
 8006c38:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c42:	d111      	bne.n	8006c68 <SPI_EndRxTransaction+0x3a>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c4c:	d004      	beq.n	8006c58 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c56:	d107      	bne.n	8006c68 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c66:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	9300      	str	r3, [sp, #0]
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	2180      	movs	r1, #128	; 0x80
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f7ff ff04 	bl	8006a80 <SPI_WaitFlagStateUntilTimeout>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d007      	beq.n	8006c8e <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c82:	f043 0220 	orr.w	r2, r3, #32
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	e023      	b.n	8006cd6 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c96:	d11d      	bne.n	8006cd4 <SPI_EndRxTransaction+0xa6>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ca0:	d004      	beq.n	8006cac <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006caa:	d113      	bne.n	8006cd4 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	9300      	str	r3, [sp, #0]
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f7ff ff4b 	bl	8006b54 <SPI_WaitFifoStateUntilTimeout>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d007      	beq.n	8006cd4 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cc8:	f043 0220 	orr.w	r2, r3, #32
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e000      	b.n	8006cd6 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3710      	adds	r7, #16
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}

08006cde <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b086      	sub	sp, #24
 8006ce2:	af02      	add	r7, sp, #8
 8006ce4:	60f8      	str	r0, [r7, #12]
 8006ce6:	60b9      	str	r1, [r7, #8]
 8006ce8:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	9300      	str	r3, [sp, #0]
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f7ff ff2c 	bl	8006b54 <SPI_WaitFifoStateUntilTimeout>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d007      	beq.n	8006d12 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d06:	f043 0220 	orr.w	r2, r3, #32
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	e027      	b.n	8006d62 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	9300      	str	r3, [sp, #0]
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	2180      	movs	r1, #128	; 0x80
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f7ff feaf 	bl	8006a80 <SPI_WaitFlagStateUntilTimeout>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d007      	beq.n	8006d38 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d2c:	f043 0220 	orr.w	r2, r3, #32
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006d34:	2303      	movs	r3, #3
 8006d36:	e014      	b.n	8006d62 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	9300      	str	r3, [sp, #0]
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f7ff ff05 	bl	8006b54 <SPI_WaitFifoStateUntilTimeout>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d007      	beq.n	8006d60 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d54:	f043 0220 	orr.w	r2, r3, #32
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e000      	b.n	8006d62 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b082      	sub	sp, #8
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d101      	bne.n	8006d7c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e01d      	b.n	8006db8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d106      	bne.n	8006d96 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f7fb fe8f 	bl	8002ab4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2202      	movs	r2, #2
 8006d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	3304      	adds	r3, #4
 8006da6:	4619      	mov	r1, r3
 8006da8:	4610      	mov	r0, r2
 8006daa:	f000 f97b 	bl	80070a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3708      	adds	r7, #8
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68da      	ldr	r2, [r3, #12]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f042 0201 	orr.w	r2, r2, #1
 8006dd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689a      	ldr	r2, [r3, #8]
 8006dde:	4b0c      	ldr	r3, [pc, #48]	; (8006e10 <HAL_TIM_Base_Start_IT+0x50>)
 8006de0:	4013      	ands	r3, r2
 8006de2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2b06      	cmp	r3, #6
 8006de8:	d00b      	beq.n	8006e02 <HAL_TIM_Base_Start_IT+0x42>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006df0:	d007      	beq.n	8006e02 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f042 0201 	orr.w	r2, r2, #1
 8006e00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3714      	adds	r7, #20
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr
 8006e10:	00010007 	.word	0x00010007

08006e14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	f003 0302 	and.w	r3, r3, #2
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d122      	bne.n	8006e70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	f003 0302 	and.w	r3, r3, #2
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d11b      	bne.n	8006e70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f06f 0202 	mvn.w	r2, #2
 8006e40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2201      	movs	r2, #1
 8006e46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	699b      	ldr	r3, [r3, #24]
 8006e4e:	f003 0303 	and.w	r3, r3, #3
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d003      	beq.n	8006e5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f905 	bl	8007066 <HAL_TIM_IC_CaptureCallback>
 8006e5c:	e005      	b.n	8006e6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f8f7 	bl	8007052 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 f908 	bl	800707a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	f003 0304 	and.w	r3, r3, #4
 8006e7a:	2b04      	cmp	r3, #4
 8006e7c:	d122      	bne.n	8006ec4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	f003 0304 	and.w	r3, r3, #4
 8006e88:	2b04      	cmp	r3, #4
 8006e8a:	d11b      	bne.n	8006ec4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f06f 0204 	mvn.w	r2, #4
 8006e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2202      	movs	r2, #2
 8006e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	699b      	ldr	r3, [r3, #24]
 8006ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d003      	beq.n	8006eb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 f8db 	bl	8007066 <HAL_TIM_IC_CaptureCallback>
 8006eb0:	e005      	b.n	8006ebe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f8cd 	bl	8007052 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 f8de 	bl	800707a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	f003 0308 	and.w	r3, r3, #8
 8006ece:	2b08      	cmp	r3, #8
 8006ed0:	d122      	bne.n	8006f18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	f003 0308 	and.w	r3, r3, #8
 8006edc:	2b08      	cmp	r3, #8
 8006ede:	d11b      	bne.n	8006f18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f06f 0208 	mvn.w	r2, #8
 8006ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2204      	movs	r2, #4
 8006eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	69db      	ldr	r3, [r3, #28]
 8006ef6:	f003 0303 	and.w	r3, r3, #3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d003      	beq.n	8006f06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f8b1 	bl	8007066 <HAL_TIM_IC_CaptureCallback>
 8006f04:	e005      	b.n	8006f12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f8a3 	bl	8007052 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 f8b4 	bl	800707a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	f003 0310 	and.w	r3, r3, #16
 8006f22:	2b10      	cmp	r3, #16
 8006f24:	d122      	bne.n	8006f6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	f003 0310 	and.w	r3, r3, #16
 8006f30:	2b10      	cmp	r3, #16
 8006f32:	d11b      	bne.n	8006f6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f06f 0210 	mvn.w	r2, #16
 8006f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2208      	movs	r2, #8
 8006f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	69db      	ldr	r3, [r3, #28]
 8006f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d003      	beq.n	8006f5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 f887 	bl	8007066 <HAL_TIM_IC_CaptureCallback>
 8006f58:	e005      	b.n	8006f66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f879 	bl	8007052 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f88a 	bl	800707a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d10e      	bne.n	8006f98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	f003 0301 	and.w	r3, r3, #1
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d107      	bne.n	8006f98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f06f 0201 	mvn.w	r2, #1
 8006f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f7fa ff8a 	bl	8001eac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fa2:	2b80      	cmp	r3, #128	; 0x80
 8006fa4:	d10e      	bne.n	8006fc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fb0:	2b80      	cmp	r3, #128	; 0x80
 8006fb2:	d107      	bne.n	8006fc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 f8de 	bl	8007180 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fd2:	d10e      	bne.n	8006ff2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fde:	2b80      	cmp	r3, #128	; 0x80
 8006fe0:	d107      	bne.n	8006ff2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006fea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 f8d1 	bl	8007194 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ffc:	2b40      	cmp	r3, #64	; 0x40
 8006ffe:	d10e      	bne.n	800701e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800700a:	2b40      	cmp	r3, #64	; 0x40
 800700c:	d107      	bne.n	800701e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 f838 	bl	800708e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	f003 0320 	and.w	r3, r3, #32
 8007028:	2b20      	cmp	r3, #32
 800702a:	d10e      	bne.n	800704a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	f003 0320 	and.w	r3, r3, #32
 8007036:	2b20      	cmp	r3, #32
 8007038:	d107      	bne.n	800704a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f06f 0220 	mvn.w	r2, #32
 8007042:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 f891 	bl	800716c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800704a:	bf00      	nop
 800704c:	3708      	adds	r7, #8
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007052:	b480      	push	{r7}
 8007054:	b083      	sub	sp, #12
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800705a:	bf00      	nop
 800705c:	370c      	adds	r7, #12
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr

08007066 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007066:	b480      	push	{r7}
 8007068:	b083      	sub	sp, #12
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800706e:	bf00      	nop
 8007070:	370c      	adds	r7, #12
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr

0800707a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800707a:	b480      	push	{r7}
 800707c:	b083      	sub	sp, #12
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007082:	bf00      	nop
 8007084:	370c      	adds	r7, #12
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr

0800708e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800708e:	b480      	push	{r7}
 8007090:	b083      	sub	sp, #12
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007096:	bf00      	nop
 8007098:	370c      	adds	r7, #12
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
	...

080070a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a2a      	ldr	r2, [pc, #168]	; (8007160 <TIM_Base_SetConfig+0xbc>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d003      	beq.n	80070c4 <TIM_Base_SetConfig+0x20>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070c2:	d108      	bne.n	80070d6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a21      	ldr	r2, [pc, #132]	; (8007160 <TIM_Base_SetConfig+0xbc>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d00b      	beq.n	80070f6 <TIM_Base_SetConfig+0x52>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070e4:	d007      	beq.n	80070f6 <TIM_Base_SetConfig+0x52>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a1e      	ldr	r2, [pc, #120]	; (8007164 <TIM_Base_SetConfig+0xc0>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d003      	beq.n	80070f6 <TIM_Base_SetConfig+0x52>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a1d      	ldr	r2, [pc, #116]	; (8007168 <TIM_Base_SetConfig+0xc4>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d108      	bne.n	8007108 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	68fa      	ldr	r2, [r7, #12]
 8007104:	4313      	orrs	r3, r2
 8007106:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	4313      	orrs	r3, r2
 8007114:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	689a      	ldr	r2, [r3, #8]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a0c      	ldr	r2, [pc, #48]	; (8007160 <TIM_Base_SetConfig+0xbc>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d007      	beq.n	8007144 <TIM_Base_SetConfig+0xa0>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a0b      	ldr	r2, [pc, #44]	; (8007164 <TIM_Base_SetConfig+0xc0>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d003      	beq.n	8007144 <TIM_Base_SetConfig+0xa0>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a0a      	ldr	r2, [pc, #40]	; (8007168 <TIM_Base_SetConfig+0xc4>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d103      	bne.n	800714c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	691a      	ldr	r2, [r3, #16]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	615a      	str	r2, [r3, #20]
}
 8007152:	bf00      	nop
 8007154:	3714      	adds	r7, #20
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	40012c00 	.word	0x40012c00
 8007164:	40014400 	.word	0x40014400
 8007168:	40014800 	.word	0x40014800

0800716c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007174:	bf00      	nop
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007188:	bf00      	nop
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800719c:	bf00      	nop
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <LL_RCC_GetUSARTClockSource>:
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80071b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4013      	ands	r3, r2
}
 80071bc:	4618      	mov	r0, r3
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <LL_RCC_GetLPUARTClockSource>:
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80071d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4013      	ands	r3, r2
}
 80071dc:	4618      	mov	r0, r3
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d101      	bne.n	80071fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e042      	b.n	8007280 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007200:	2b00      	cmp	r3, #0
 8007202:	d106      	bne.n	8007212 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f7fb fceb 	bl	8002be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2224      	movs	r2, #36	; 0x24
 8007216:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f022 0201 	bic.w	r2, r2, #1
 8007228:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 f82c 	bl	8007288 <UART_SetConfig>
 8007230:	4603      	mov	r3, r0
 8007232:	2b01      	cmp	r3, #1
 8007234:	d101      	bne.n	800723a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e022      	b.n	8007280 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800723e:	2b00      	cmp	r3, #0
 8007240:	d002      	beq.n	8007248 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f001 f884 	bl	8008350 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	685a      	ldr	r2, [r3, #4]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007256:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	689a      	ldr	r2, [r3, #8]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007266:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f042 0201 	orr.w	r2, r2, #1
 8007276:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f001 f90b 	bl	8008494 <UART_CheckIdleState>
 800727e:	4603      	mov	r3, r0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007288:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800728c:	b08a      	sub	sp, #40	; 0x28
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007292:	2300      	movs	r3, #0
 8007294:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007296:	2300      	movs	r3, #0
 8007298:	76fb      	strb	r3, [r7, #27]
#if defined(LPUART1)
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800729a:	2300      	movs	r3, #0
 800729c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	689a      	ldr	r2, [r3, #8]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	431a      	orrs	r2, r3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	695b      	ldr	r3, [r3, #20]
 80072ac:	431a      	orrs	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	69db      	ldr	r3, [r3, #28]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072bc:	4313      	orrs	r3, r2
 80072be:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	4ba4      	ldr	r3, [pc, #656]	; (8007558 <UART_SetConfig+0x2d0>)
 80072c8:	4013      	ands	r3, r2
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	6812      	ldr	r2, [r2, #0]
 80072ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072d0:	430b      	orrs	r3, r1
 80072d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	68da      	ldr	r2, [r3, #12]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	430a      	orrs	r2, r1
 80072e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a99      	ldr	r2, [pc, #612]	; (800755c <UART_SetConfig+0x2d4>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d004      	beq.n	8007304 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a1b      	ldr	r3, [r3, #32]
 80072fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007300:	4313      	orrs	r3, r2
 8007302:	627b      	str	r3, [r7, #36]	; 0x24
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800730e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	6812      	ldr	r2, [r2, #0]
 8007316:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007318:	430b      	orrs	r3, r1
 800731a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007322:	f023 010f 	bic.w	r1, r3, #15
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	430a      	orrs	r2, r1
 8007330:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a8a      	ldr	r2, [pc, #552]	; (8007560 <UART_SetConfig+0x2d8>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d126      	bne.n	800738a <UART_SetConfig+0x102>
 800733c:	2003      	movs	r0, #3
 800733e:	f7ff ff33 	bl	80071a8 <LL_RCC_GetUSARTClockSource>
 8007342:	4603      	mov	r3, r0
 8007344:	2b03      	cmp	r3, #3
 8007346:	d81b      	bhi.n	8007380 <UART_SetConfig+0xf8>
 8007348:	a201      	add	r2, pc, #4	; (adr r2, 8007350 <UART_SetConfig+0xc8>)
 800734a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800734e:	bf00      	nop
 8007350:	08007361 	.word	0x08007361
 8007354:	08007371 	.word	0x08007371
 8007358:	08007369 	.word	0x08007369
 800735c:	08007379 	.word	0x08007379
 8007360:	2301      	movs	r3, #1
 8007362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007366:	e042      	b.n	80073ee <UART_SetConfig+0x166>
 8007368:	2302      	movs	r3, #2
 800736a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800736e:	e03e      	b.n	80073ee <UART_SetConfig+0x166>
 8007370:	2304      	movs	r3, #4
 8007372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007376:	e03a      	b.n	80073ee <UART_SetConfig+0x166>
 8007378:	2308      	movs	r3, #8
 800737a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800737e:	e036      	b.n	80073ee <UART_SetConfig+0x166>
 8007380:	2310      	movs	r3, #16
 8007382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007386:	bf00      	nop
 8007388:	e031      	b.n	80073ee <UART_SetConfig+0x166>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a73      	ldr	r2, [pc, #460]	; (800755c <UART_SetConfig+0x2d4>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d129      	bne.n	80073e8 <UART_SetConfig+0x160>
 8007394:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007398:	f7ff ff16 	bl	80071c8 <LL_RCC_GetLPUARTClockSource>
 800739c:	4603      	mov	r3, r0
 800739e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073a2:	d014      	beq.n	80073ce <UART_SetConfig+0x146>
 80073a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073a8:	d802      	bhi.n	80073b0 <UART_SetConfig+0x128>
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d007      	beq.n	80073be <UART_SetConfig+0x136>
 80073ae:	e016      	b.n	80073de <UART_SetConfig+0x156>
 80073b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073b4:	d007      	beq.n	80073c6 <UART_SetConfig+0x13e>
 80073b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073ba:	d00c      	beq.n	80073d6 <UART_SetConfig+0x14e>
 80073bc:	e00f      	b.n	80073de <UART_SetConfig+0x156>
 80073be:	2300      	movs	r3, #0
 80073c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073c4:	e013      	b.n	80073ee <UART_SetConfig+0x166>
 80073c6:	2302      	movs	r3, #2
 80073c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073cc:	e00f      	b.n	80073ee <UART_SetConfig+0x166>
 80073ce:	2304      	movs	r3, #4
 80073d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073d4:	e00b      	b.n	80073ee <UART_SetConfig+0x166>
 80073d6:	2308      	movs	r3, #8
 80073d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073dc:	e007      	b.n	80073ee <UART_SetConfig+0x166>
 80073de:	2310      	movs	r3, #16
 80073e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073e4:	bf00      	nop
 80073e6:	e002      	b.n	80073ee <UART_SetConfig+0x166>
 80073e8:	2310      	movs	r3, #16
 80073ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a5a      	ldr	r2, [pc, #360]	; (800755c <UART_SetConfig+0x2d4>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	f040 8428 	bne.w	8007c4a <UART_SetConfig+0x9c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80073fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073fe:	2b08      	cmp	r3, #8
 8007400:	f200 8171 	bhi.w	80076e6 <UART_SetConfig+0x45e>
 8007404:	a201      	add	r2, pc, #4	; (adr r2, 800740c <UART_SetConfig+0x184>)
 8007406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740a:	bf00      	nop
 800740c:	08007431 	.word	0x08007431
 8007410:	080076e7 	.word	0x080076e7
 8007414:	080074d3 	.word	0x080074d3
 8007418:	080076e7 	.word	0x080076e7
 800741c:	08007597 	.word	0x08007597
 8007420:	080076e7 	.word	0x080076e7
 8007424:	080076e7 	.word	0x080076e7
 8007428:	080076e7 	.word	0x080076e7
 800742c:	08007639 	.word	0x08007639
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007430:	f7fd ff56 	bl	80052e0 <HAL_RCC_GetPCLK1Freq>
 8007434:	4602      	mov	r2, r0
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743a:	2b00      	cmp	r3, #0
 800743c:	d044      	beq.n	80074c8 <UART_SetConfig+0x240>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007442:	2b01      	cmp	r3, #1
 8007444:	d03e      	beq.n	80074c4 <UART_SetConfig+0x23c>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744a:	2b02      	cmp	r3, #2
 800744c:	d038      	beq.n	80074c0 <UART_SetConfig+0x238>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007452:	2b03      	cmp	r3, #3
 8007454:	d032      	beq.n	80074bc <UART_SetConfig+0x234>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745a:	2b04      	cmp	r3, #4
 800745c:	d02c      	beq.n	80074b8 <UART_SetConfig+0x230>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007462:	2b05      	cmp	r3, #5
 8007464:	d026      	beq.n	80074b4 <UART_SetConfig+0x22c>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746a:	2b06      	cmp	r3, #6
 800746c:	d020      	beq.n	80074b0 <UART_SetConfig+0x228>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007472:	2b07      	cmp	r3, #7
 8007474:	d01a      	beq.n	80074ac <UART_SetConfig+0x224>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747a:	2b08      	cmp	r3, #8
 800747c:	d014      	beq.n	80074a8 <UART_SetConfig+0x220>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007482:	2b09      	cmp	r3, #9
 8007484:	d00e      	beq.n	80074a4 <UART_SetConfig+0x21c>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748a:	2b0a      	cmp	r3, #10
 800748c:	d008      	beq.n	80074a0 <UART_SetConfig+0x218>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007492:	2b0b      	cmp	r3, #11
 8007494:	d102      	bne.n	800749c <UART_SetConfig+0x214>
 8007496:	f44f 7380 	mov.w	r3, #256	; 0x100
 800749a:	e016      	b.n	80074ca <UART_SetConfig+0x242>
 800749c:	2301      	movs	r3, #1
 800749e:	e014      	b.n	80074ca <UART_SetConfig+0x242>
 80074a0:	2380      	movs	r3, #128	; 0x80
 80074a2:	e012      	b.n	80074ca <UART_SetConfig+0x242>
 80074a4:	2340      	movs	r3, #64	; 0x40
 80074a6:	e010      	b.n	80074ca <UART_SetConfig+0x242>
 80074a8:	2320      	movs	r3, #32
 80074aa:	e00e      	b.n	80074ca <UART_SetConfig+0x242>
 80074ac:	2310      	movs	r3, #16
 80074ae:	e00c      	b.n	80074ca <UART_SetConfig+0x242>
 80074b0:	230c      	movs	r3, #12
 80074b2:	e00a      	b.n	80074ca <UART_SetConfig+0x242>
 80074b4:	230a      	movs	r3, #10
 80074b6:	e008      	b.n	80074ca <UART_SetConfig+0x242>
 80074b8:	2308      	movs	r3, #8
 80074ba:	e006      	b.n	80074ca <UART_SetConfig+0x242>
 80074bc:	2306      	movs	r3, #6
 80074be:	e004      	b.n	80074ca <UART_SetConfig+0x242>
 80074c0:	2304      	movs	r3, #4
 80074c2:	e002      	b.n	80074ca <UART_SetConfig+0x242>
 80074c4:	2302      	movs	r3, #2
 80074c6:	e000      	b.n	80074ca <UART_SetConfig+0x242>
 80074c8:	2301      	movs	r3, #1
 80074ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ce:	617b      	str	r3, [r7, #20]
        break;
 80074d0:	e10c      	b.n	80076ec <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d05a      	beq.n	8007590 <UART_SetConfig+0x308>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d054      	beq.n	800758c <UART_SetConfig+0x304>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d04e      	beq.n	8007588 <UART_SetConfig+0x300>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ee:	2b03      	cmp	r3, #3
 80074f0:	d048      	beq.n	8007584 <UART_SetConfig+0x2fc>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f6:	2b04      	cmp	r3, #4
 80074f8:	d02c      	beq.n	8007554 <UART_SetConfig+0x2cc>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fe:	2b05      	cmp	r3, #5
 8007500:	d026      	beq.n	8007550 <UART_SetConfig+0x2c8>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007506:	2b06      	cmp	r3, #6
 8007508:	d020      	beq.n	800754c <UART_SetConfig+0x2c4>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750e:	2b07      	cmp	r3, #7
 8007510:	d01a      	beq.n	8007548 <UART_SetConfig+0x2c0>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007516:	2b08      	cmp	r3, #8
 8007518:	d014      	beq.n	8007544 <UART_SetConfig+0x2bc>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751e:	2b09      	cmp	r3, #9
 8007520:	d00e      	beq.n	8007540 <UART_SetConfig+0x2b8>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007526:	2b0a      	cmp	r3, #10
 8007528:	d008      	beq.n	800753c <UART_SetConfig+0x2b4>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752e:	2b0b      	cmp	r3, #11
 8007530:	d102      	bne.n	8007538 <UART_SetConfig+0x2b0>
 8007532:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007536:	e02c      	b.n	8007592 <UART_SetConfig+0x30a>
 8007538:	4b0a      	ldr	r3, [pc, #40]	; (8007564 <UART_SetConfig+0x2dc>)
 800753a:	e02a      	b.n	8007592 <UART_SetConfig+0x30a>
 800753c:	4b0a      	ldr	r3, [pc, #40]	; (8007568 <UART_SetConfig+0x2e0>)
 800753e:	e028      	b.n	8007592 <UART_SetConfig+0x30a>
 8007540:	4b0a      	ldr	r3, [pc, #40]	; (800756c <UART_SetConfig+0x2e4>)
 8007542:	e026      	b.n	8007592 <UART_SetConfig+0x30a>
 8007544:	4b0a      	ldr	r3, [pc, #40]	; (8007570 <UART_SetConfig+0x2e8>)
 8007546:	e024      	b.n	8007592 <UART_SetConfig+0x30a>
 8007548:	4b0a      	ldr	r3, [pc, #40]	; (8007574 <UART_SetConfig+0x2ec>)
 800754a:	e022      	b.n	8007592 <UART_SetConfig+0x30a>
 800754c:	4b0a      	ldr	r3, [pc, #40]	; (8007578 <UART_SetConfig+0x2f0>)
 800754e:	e020      	b.n	8007592 <UART_SetConfig+0x30a>
 8007550:	4b0a      	ldr	r3, [pc, #40]	; (800757c <UART_SetConfig+0x2f4>)
 8007552:	e01e      	b.n	8007592 <UART_SetConfig+0x30a>
 8007554:	4b0a      	ldr	r3, [pc, #40]	; (8007580 <UART_SetConfig+0x2f8>)
 8007556:	e01c      	b.n	8007592 <UART_SetConfig+0x30a>
 8007558:	cfff69f3 	.word	0xcfff69f3
 800755c:	40008000 	.word	0x40008000
 8007560:	40013800 	.word	0x40013800
 8007564:	00f42400 	.word	0x00f42400
 8007568:	0001e848 	.word	0x0001e848
 800756c:	0003d090 	.word	0x0003d090
 8007570:	0007a120 	.word	0x0007a120
 8007574:	000f4240 	.word	0x000f4240
 8007578:	00145855 	.word	0x00145855
 800757c:	00186a00 	.word	0x00186a00
 8007580:	001e8480 	.word	0x001e8480
 8007584:	4ba6      	ldr	r3, [pc, #664]	; (8007820 <UART_SetConfig+0x598>)
 8007586:	e004      	b.n	8007592 <UART_SetConfig+0x30a>
 8007588:	4ba6      	ldr	r3, [pc, #664]	; (8007824 <UART_SetConfig+0x59c>)
 800758a:	e002      	b.n	8007592 <UART_SetConfig+0x30a>
 800758c:	4ba6      	ldr	r3, [pc, #664]	; (8007828 <UART_SetConfig+0x5a0>)
 800758e:	e000      	b.n	8007592 <UART_SetConfig+0x30a>
 8007590:	4ba6      	ldr	r3, [pc, #664]	; (800782c <UART_SetConfig+0x5a4>)
 8007592:	617b      	str	r3, [r7, #20]
        break;
 8007594:	e0aa      	b.n	80076ec <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007596:	f7fd fe25 	bl	80051e4 <HAL_RCC_GetSysClockFreq>
 800759a:	4602      	mov	r2, r0
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d044      	beq.n	800762e <UART_SetConfig+0x3a6>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d03e      	beq.n	800762a <UART_SetConfig+0x3a2>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b0:	2b02      	cmp	r3, #2
 80075b2:	d038      	beq.n	8007626 <UART_SetConfig+0x39e>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b8:	2b03      	cmp	r3, #3
 80075ba:	d032      	beq.n	8007622 <UART_SetConfig+0x39a>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c0:	2b04      	cmp	r3, #4
 80075c2:	d02c      	beq.n	800761e <UART_SetConfig+0x396>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c8:	2b05      	cmp	r3, #5
 80075ca:	d026      	beq.n	800761a <UART_SetConfig+0x392>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d0:	2b06      	cmp	r3, #6
 80075d2:	d020      	beq.n	8007616 <UART_SetConfig+0x38e>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d8:	2b07      	cmp	r3, #7
 80075da:	d01a      	beq.n	8007612 <UART_SetConfig+0x38a>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e0:	2b08      	cmp	r3, #8
 80075e2:	d014      	beq.n	800760e <UART_SetConfig+0x386>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e8:	2b09      	cmp	r3, #9
 80075ea:	d00e      	beq.n	800760a <UART_SetConfig+0x382>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f0:	2b0a      	cmp	r3, #10
 80075f2:	d008      	beq.n	8007606 <UART_SetConfig+0x37e>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f8:	2b0b      	cmp	r3, #11
 80075fa:	d102      	bne.n	8007602 <UART_SetConfig+0x37a>
 80075fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007600:	e016      	b.n	8007630 <UART_SetConfig+0x3a8>
 8007602:	2301      	movs	r3, #1
 8007604:	e014      	b.n	8007630 <UART_SetConfig+0x3a8>
 8007606:	2380      	movs	r3, #128	; 0x80
 8007608:	e012      	b.n	8007630 <UART_SetConfig+0x3a8>
 800760a:	2340      	movs	r3, #64	; 0x40
 800760c:	e010      	b.n	8007630 <UART_SetConfig+0x3a8>
 800760e:	2320      	movs	r3, #32
 8007610:	e00e      	b.n	8007630 <UART_SetConfig+0x3a8>
 8007612:	2310      	movs	r3, #16
 8007614:	e00c      	b.n	8007630 <UART_SetConfig+0x3a8>
 8007616:	230c      	movs	r3, #12
 8007618:	e00a      	b.n	8007630 <UART_SetConfig+0x3a8>
 800761a:	230a      	movs	r3, #10
 800761c:	e008      	b.n	8007630 <UART_SetConfig+0x3a8>
 800761e:	2308      	movs	r3, #8
 8007620:	e006      	b.n	8007630 <UART_SetConfig+0x3a8>
 8007622:	2306      	movs	r3, #6
 8007624:	e004      	b.n	8007630 <UART_SetConfig+0x3a8>
 8007626:	2304      	movs	r3, #4
 8007628:	e002      	b.n	8007630 <UART_SetConfig+0x3a8>
 800762a:	2302      	movs	r3, #2
 800762c:	e000      	b.n	8007630 <UART_SetConfig+0x3a8>
 800762e:	2301      	movs	r3, #1
 8007630:	fbb2 f3f3 	udiv	r3, r2, r3
 8007634:	617b      	str	r3, [r7, #20]
        break;
 8007636:	e059      	b.n	80076ec <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763c:	2b00      	cmp	r3, #0
 800763e:	d04e      	beq.n	80076de <UART_SetConfig+0x456>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007644:	2b01      	cmp	r3, #1
 8007646:	d047      	beq.n	80076d8 <UART_SetConfig+0x450>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764c:	2b02      	cmp	r3, #2
 800764e:	d040      	beq.n	80076d2 <UART_SetConfig+0x44a>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007654:	2b03      	cmp	r3, #3
 8007656:	d039      	beq.n	80076cc <UART_SetConfig+0x444>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765c:	2b04      	cmp	r3, #4
 800765e:	d032      	beq.n	80076c6 <UART_SetConfig+0x43e>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007664:	2b05      	cmp	r3, #5
 8007666:	d02b      	beq.n	80076c0 <UART_SetConfig+0x438>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766c:	2b06      	cmp	r3, #6
 800766e:	d024      	beq.n	80076ba <UART_SetConfig+0x432>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007674:	2b07      	cmp	r3, #7
 8007676:	d01d      	beq.n	80076b4 <UART_SetConfig+0x42c>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767c:	2b08      	cmp	r3, #8
 800767e:	d016      	beq.n	80076ae <UART_SetConfig+0x426>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007684:	2b09      	cmp	r3, #9
 8007686:	d00f      	beq.n	80076a8 <UART_SetConfig+0x420>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768c:	2b0a      	cmp	r3, #10
 800768e:	d008      	beq.n	80076a2 <UART_SetConfig+0x41a>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007694:	2b0b      	cmp	r3, #11
 8007696:	d101      	bne.n	800769c <UART_SetConfig+0x414>
 8007698:	2380      	movs	r3, #128	; 0x80
 800769a:	e022      	b.n	80076e2 <UART_SetConfig+0x45a>
 800769c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076a0:	e01f      	b.n	80076e2 <UART_SetConfig+0x45a>
 80076a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076a6:	e01c      	b.n	80076e2 <UART_SetConfig+0x45a>
 80076a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076ac:	e019      	b.n	80076e2 <UART_SetConfig+0x45a>
 80076ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076b2:	e016      	b.n	80076e2 <UART_SetConfig+0x45a>
 80076b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80076b8:	e013      	b.n	80076e2 <UART_SetConfig+0x45a>
 80076ba:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80076be:	e010      	b.n	80076e2 <UART_SetConfig+0x45a>
 80076c0:	f640 43cc 	movw	r3, #3276	; 0xccc
 80076c4:	e00d      	b.n	80076e2 <UART_SetConfig+0x45a>
 80076c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076ca:	e00a      	b.n	80076e2 <UART_SetConfig+0x45a>
 80076cc:	f241 5355 	movw	r3, #5461	; 0x1555
 80076d0:	e007      	b.n	80076e2 <UART_SetConfig+0x45a>
 80076d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80076d6:	e004      	b.n	80076e2 <UART_SetConfig+0x45a>
 80076d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80076dc:	e001      	b.n	80076e2 <UART_SetConfig+0x45a>
 80076de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076e2:	617b      	str	r3, [r7, #20]
        break;
 80076e4:	e002      	b.n	80076ec <UART_SetConfig+0x464>
      default:
        ret = HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	76fb      	strb	r3, [r7, #27]
        break;
 80076ea:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	f000 8604 	beq.w	80082fc <UART_SetConfig+0x1074>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685a      	ldr	r2, [r3, #4]
 80076f8:	4613      	mov	r3, r2
 80076fa:	005b      	lsls	r3, r3, #1
 80076fc:	4413      	add	r3, r2
 80076fe:	697a      	ldr	r2, [r7, #20]
 8007700:	429a      	cmp	r2, r3
 8007702:	d305      	bcc.n	8007710 <UART_SetConfig+0x488>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800770a:	697a      	ldr	r2, [r7, #20]
 800770c:	429a      	cmp	r2, r3
 800770e:	d903      	bls.n	8007718 <UART_SetConfig+0x490>
      {
        ret = HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	76fb      	strb	r3, [r7, #27]
 8007714:	f000 bdf2 	b.w	80082fc <UART_SetConfig+0x1074>
      }
      else
      {
        switch (clocksource)
 8007718:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800771c:	2b08      	cmp	r3, #8
 800771e:	f200 8281 	bhi.w	8007c24 <UART_SetConfig+0x99c>
 8007722:	a201      	add	r2, pc, #4	; (adr r2, 8007728 <UART_SetConfig+0x4a0>)
 8007724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007728:	0800774d 	.word	0x0800774d
 800772c:	08007c25 	.word	0x08007c25
 8007730:	0800789d 	.word	0x0800789d
 8007734:	08007c25 	.word	0x08007c25
 8007738:	08007993 	.word	0x08007993
 800773c:	08007c25 	.word	0x08007c25
 8007740:	08007c25 	.word	0x08007c25
 8007744:	08007c25 	.word	0x08007c25
 8007748:	08007ad1 	.word	0x08007ad1
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800774c:	f7fd fdc8 	bl	80052e0 <HAL_RCC_GetPCLK1Freq>
 8007750:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	4618      	mov	r0, r3
 8007756:	f04f 0100 	mov.w	r1, #0
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775e:	2b00      	cmp	r3, #0
 8007760:	d070      	beq.n	8007844 <UART_SetConfig+0x5bc>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007766:	2b01      	cmp	r3, #1
 8007768:	d067      	beq.n	800783a <UART_SetConfig+0x5b2>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776e:	2b02      	cmp	r3, #2
 8007770:	d05e      	beq.n	8007830 <UART_SetConfig+0x5a8>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007776:	2b03      	cmp	r3, #3
 8007778:	d04c      	beq.n	8007814 <UART_SetConfig+0x58c>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777e:	2b04      	cmp	r3, #4
 8007780:	d043      	beq.n	800780a <UART_SetConfig+0x582>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007786:	2b05      	cmp	r3, #5
 8007788:	d03a      	beq.n	8007800 <UART_SetConfig+0x578>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778e:	2b06      	cmp	r3, #6
 8007790:	d031      	beq.n	80077f6 <UART_SetConfig+0x56e>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007796:	2b07      	cmp	r3, #7
 8007798:	d028      	beq.n	80077ec <UART_SetConfig+0x564>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779e:	2b08      	cmp	r3, #8
 80077a0:	d01f      	beq.n	80077e2 <UART_SetConfig+0x55a>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a6:	2b09      	cmp	r3, #9
 80077a8:	d016      	beq.n	80077d8 <UART_SetConfig+0x550>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ae:	2b0a      	cmp	r3, #10
 80077b0:	d00d      	beq.n	80077ce <UART_SetConfig+0x546>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b6:	2b0b      	cmp	r3, #11
 80077b8:	d104      	bne.n	80077c4 <UART_SetConfig+0x53c>
 80077ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077be:	f04f 0400 	mov.w	r4, #0
 80077c2:	e043      	b.n	800784c <UART_SetConfig+0x5c4>
 80077c4:	f04f 0301 	mov.w	r3, #1
 80077c8:	f04f 0400 	mov.w	r4, #0
 80077cc:	e03e      	b.n	800784c <UART_SetConfig+0x5c4>
 80077ce:	f04f 0380 	mov.w	r3, #128	; 0x80
 80077d2:	f04f 0400 	mov.w	r4, #0
 80077d6:	e039      	b.n	800784c <UART_SetConfig+0x5c4>
 80077d8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80077dc:	f04f 0400 	mov.w	r4, #0
 80077e0:	e034      	b.n	800784c <UART_SetConfig+0x5c4>
 80077e2:	f04f 0320 	mov.w	r3, #32
 80077e6:	f04f 0400 	mov.w	r4, #0
 80077ea:	e02f      	b.n	800784c <UART_SetConfig+0x5c4>
 80077ec:	f04f 0310 	mov.w	r3, #16
 80077f0:	f04f 0400 	mov.w	r4, #0
 80077f4:	e02a      	b.n	800784c <UART_SetConfig+0x5c4>
 80077f6:	f04f 030c 	mov.w	r3, #12
 80077fa:	f04f 0400 	mov.w	r4, #0
 80077fe:	e025      	b.n	800784c <UART_SetConfig+0x5c4>
 8007800:	f04f 030a 	mov.w	r3, #10
 8007804:	f04f 0400 	mov.w	r4, #0
 8007808:	e020      	b.n	800784c <UART_SetConfig+0x5c4>
 800780a:	f04f 0308 	mov.w	r3, #8
 800780e:	f04f 0400 	mov.w	r4, #0
 8007812:	e01b      	b.n	800784c <UART_SetConfig+0x5c4>
 8007814:	f04f 0306 	mov.w	r3, #6
 8007818:	f04f 0400 	mov.w	r4, #0
 800781c:	e016      	b.n	800784c <UART_SetConfig+0x5c4>
 800781e:	bf00      	nop
 8007820:	0028b0aa 	.word	0x0028b0aa
 8007824:	003d0900 	.word	0x003d0900
 8007828:	007a1200 	.word	0x007a1200
 800782c:	00f42400 	.word	0x00f42400
 8007830:	f04f 0304 	mov.w	r3, #4
 8007834:	f04f 0400 	mov.w	r4, #0
 8007838:	e008      	b.n	800784c <UART_SetConfig+0x5c4>
 800783a:	f04f 0302 	mov.w	r3, #2
 800783e:	f04f 0400 	mov.w	r4, #0
 8007842:	e003      	b.n	800784c <UART_SetConfig+0x5c4>
 8007844:	f04f 0301 	mov.w	r3, #1
 8007848:	f04f 0400 	mov.w	r4, #0
 800784c:	461a      	mov	r2, r3
 800784e:	4623      	mov	r3, r4
 8007850:	f7f8 fc9e 	bl	8000190 <__aeabi_uldivmod>
 8007854:	4603      	mov	r3, r0
 8007856:	460c      	mov	r4, r1
 8007858:	4619      	mov	r1, r3
 800785a:	4622      	mov	r2, r4
 800785c:	f04f 0300 	mov.w	r3, #0
 8007860:	f04f 0400 	mov.w	r4, #0
 8007864:	0214      	lsls	r4, r2, #8
 8007866:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800786a:	020b      	lsls	r3, r1, #8
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	6852      	ldr	r2, [r2, #4]
 8007870:	0852      	lsrs	r2, r2, #1
 8007872:	4611      	mov	r1, r2
 8007874:	f04f 0200 	mov.w	r2, #0
 8007878:	eb13 0b01 	adds.w	fp, r3, r1
 800787c:	eb44 0c02 	adc.w	ip, r4, r2
 8007880:	4658      	mov	r0, fp
 8007882:	4661      	mov	r1, ip
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	f04f 0400 	mov.w	r4, #0
 800788c:	461a      	mov	r2, r3
 800788e:	4623      	mov	r3, r4
 8007890:	f7f8 fc7e 	bl	8000190 <__aeabi_uldivmod>
 8007894:	4603      	mov	r3, r0
 8007896:	460c      	mov	r4, r1
 8007898:	61fb      	str	r3, [r7, #28]
            break;
 800789a:	e1c6      	b.n	8007c2a <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d05b      	beq.n	800795c <UART_SetConfig+0x6d4>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d053      	beq.n	8007954 <UART_SetConfig+0x6cc>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	d04b      	beq.n	800794c <UART_SetConfig+0x6c4>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b8:	2b03      	cmp	r3, #3
 80078ba:	d043      	beq.n	8007944 <UART_SetConfig+0x6bc>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c0:	2b04      	cmp	r3, #4
 80078c2:	d03b      	beq.n	800793c <UART_SetConfig+0x6b4>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c8:	2b05      	cmp	r3, #5
 80078ca:	d033      	beq.n	8007934 <UART_SetConfig+0x6ac>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d0:	2b06      	cmp	r3, #6
 80078d2:	d02b      	beq.n	800792c <UART_SetConfig+0x6a4>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d8:	2b07      	cmp	r3, #7
 80078da:	d023      	beq.n	8007924 <UART_SetConfig+0x69c>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e0:	2b08      	cmp	r3, #8
 80078e2:	d01b      	beq.n	800791c <UART_SetConfig+0x694>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e8:	2b09      	cmp	r3, #9
 80078ea:	d013      	beq.n	8007914 <UART_SetConfig+0x68c>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f0:	2b0a      	cmp	r3, #10
 80078f2:	d00b      	beq.n	800790c <UART_SetConfig+0x684>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f8:	2b0b      	cmp	r3, #11
 80078fa:	d103      	bne.n	8007904 <UART_SetConfig+0x67c>
 80078fc:	4bae      	ldr	r3, [pc, #696]	; (8007bb8 <UART_SetConfig+0x930>)
 80078fe:	f04f 0400 	mov.w	r4, #0
 8007902:	e02e      	b.n	8007962 <UART_SetConfig+0x6da>
 8007904:	4bad      	ldr	r3, [pc, #692]	; (8007bbc <UART_SetConfig+0x934>)
 8007906:	f04f 0400 	mov.w	r4, #0
 800790a:	e02a      	b.n	8007962 <UART_SetConfig+0x6da>
 800790c:	4bac      	ldr	r3, [pc, #688]	; (8007bc0 <UART_SetConfig+0x938>)
 800790e:	f04f 0400 	mov.w	r4, #0
 8007912:	e026      	b.n	8007962 <UART_SetConfig+0x6da>
 8007914:	4bab      	ldr	r3, [pc, #684]	; (8007bc4 <UART_SetConfig+0x93c>)
 8007916:	f04f 0400 	mov.w	r4, #0
 800791a:	e022      	b.n	8007962 <UART_SetConfig+0x6da>
 800791c:	4baa      	ldr	r3, [pc, #680]	; (8007bc8 <UART_SetConfig+0x940>)
 800791e:	f04f 0400 	mov.w	r4, #0
 8007922:	e01e      	b.n	8007962 <UART_SetConfig+0x6da>
 8007924:	4ba9      	ldr	r3, [pc, #676]	; (8007bcc <UART_SetConfig+0x944>)
 8007926:	f04f 0400 	mov.w	r4, #0
 800792a:	e01a      	b.n	8007962 <UART_SetConfig+0x6da>
 800792c:	a49e      	add	r4, pc, #632	; (adr r4, 8007ba8 <UART_SetConfig+0x920>)
 800792e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007932:	e016      	b.n	8007962 <UART_SetConfig+0x6da>
 8007934:	4ba6      	ldr	r3, [pc, #664]	; (8007bd0 <UART_SetConfig+0x948>)
 8007936:	f04f 0400 	mov.w	r4, #0
 800793a:	e012      	b.n	8007962 <UART_SetConfig+0x6da>
 800793c:	4ba5      	ldr	r3, [pc, #660]	; (8007bd4 <UART_SetConfig+0x94c>)
 800793e:	f04f 0400 	mov.w	r4, #0
 8007942:	e00e      	b.n	8007962 <UART_SetConfig+0x6da>
 8007944:	a49a      	add	r4, pc, #616	; (adr r4, 8007bb0 <UART_SetConfig+0x928>)
 8007946:	e9d4 3400 	ldrd	r3, r4, [r4]
 800794a:	e00a      	b.n	8007962 <UART_SetConfig+0x6da>
 800794c:	4ba2      	ldr	r3, [pc, #648]	; (8007bd8 <UART_SetConfig+0x950>)
 800794e:	f04f 0400 	mov.w	r4, #0
 8007952:	e006      	b.n	8007962 <UART_SetConfig+0x6da>
 8007954:	4ba1      	ldr	r3, [pc, #644]	; (8007bdc <UART_SetConfig+0x954>)
 8007956:	f04f 0400 	mov.w	r4, #0
 800795a:	e002      	b.n	8007962 <UART_SetConfig+0x6da>
 800795c:	4b97      	ldr	r3, [pc, #604]	; (8007bbc <UART_SetConfig+0x934>)
 800795e:	f04f 0400 	mov.w	r4, #0
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	6852      	ldr	r2, [r2, #4]
 8007966:	0852      	lsrs	r2, r2, #1
 8007968:	4611      	mov	r1, r2
 800796a:	f04f 0200 	mov.w	r2, #0
 800796e:	eb13 0b01 	adds.w	fp, r3, r1
 8007972:	eb44 0c02 	adc.w	ip, r4, r2
 8007976:	4658      	mov	r0, fp
 8007978:	4661      	mov	r1, ip
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	f04f 0400 	mov.w	r4, #0
 8007982:	461a      	mov	r2, r3
 8007984:	4623      	mov	r3, r4
 8007986:	f7f8 fc03 	bl	8000190 <__aeabi_uldivmod>
 800798a:	4603      	mov	r3, r0
 800798c:	460c      	mov	r4, r1
 800798e:	61fb      	str	r3, [r7, #28]
            break;
 8007990:	e14b      	b.n	8007c2a <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8007992:	f7fd fc27 	bl	80051e4 <HAL_RCC_GetSysClockFreq>
 8007996:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	4618      	mov	r0, r3
 800799c:	f04f 0100 	mov.w	r1, #0
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d067      	beq.n	8007a78 <UART_SetConfig+0x7f0>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d05e      	beq.n	8007a6e <UART_SetConfig+0x7e6>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b4:	2b02      	cmp	r3, #2
 80079b6:	d055      	beq.n	8007a64 <UART_SetConfig+0x7dc>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079bc:	2b03      	cmp	r3, #3
 80079be:	d04c      	beq.n	8007a5a <UART_SetConfig+0x7d2>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c4:	2b04      	cmp	r3, #4
 80079c6:	d043      	beq.n	8007a50 <UART_SetConfig+0x7c8>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079cc:	2b05      	cmp	r3, #5
 80079ce:	d03a      	beq.n	8007a46 <UART_SetConfig+0x7be>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d4:	2b06      	cmp	r3, #6
 80079d6:	d031      	beq.n	8007a3c <UART_SetConfig+0x7b4>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079dc:	2b07      	cmp	r3, #7
 80079de:	d028      	beq.n	8007a32 <UART_SetConfig+0x7aa>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e4:	2b08      	cmp	r3, #8
 80079e6:	d01f      	beq.n	8007a28 <UART_SetConfig+0x7a0>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ec:	2b09      	cmp	r3, #9
 80079ee:	d016      	beq.n	8007a1e <UART_SetConfig+0x796>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f4:	2b0a      	cmp	r3, #10
 80079f6:	d00d      	beq.n	8007a14 <UART_SetConfig+0x78c>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fc:	2b0b      	cmp	r3, #11
 80079fe:	d104      	bne.n	8007a0a <UART_SetConfig+0x782>
 8007a00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a04:	f04f 0400 	mov.w	r4, #0
 8007a08:	e03a      	b.n	8007a80 <UART_SetConfig+0x7f8>
 8007a0a:	f04f 0301 	mov.w	r3, #1
 8007a0e:	f04f 0400 	mov.w	r4, #0
 8007a12:	e035      	b.n	8007a80 <UART_SetConfig+0x7f8>
 8007a14:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007a18:	f04f 0400 	mov.w	r4, #0
 8007a1c:	e030      	b.n	8007a80 <UART_SetConfig+0x7f8>
 8007a1e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007a22:	f04f 0400 	mov.w	r4, #0
 8007a26:	e02b      	b.n	8007a80 <UART_SetConfig+0x7f8>
 8007a28:	f04f 0320 	mov.w	r3, #32
 8007a2c:	f04f 0400 	mov.w	r4, #0
 8007a30:	e026      	b.n	8007a80 <UART_SetConfig+0x7f8>
 8007a32:	f04f 0310 	mov.w	r3, #16
 8007a36:	f04f 0400 	mov.w	r4, #0
 8007a3a:	e021      	b.n	8007a80 <UART_SetConfig+0x7f8>
 8007a3c:	f04f 030c 	mov.w	r3, #12
 8007a40:	f04f 0400 	mov.w	r4, #0
 8007a44:	e01c      	b.n	8007a80 <UART_SetConfig+0x7f8>
 8007a46:	f04f 030a 	mov.w	r3, #10
 8007a4a:	f04f 0400 	mov.w	r4, #0
 8007a4e:	e017      	b.n	8007a80 <UART_SetConfig+0x7f8>
 8007a50:	f04f 0308 	mov.w	r3, #8
 8007a54:	f04f 0400 	mov.w	r4, #0
 8007a58:	e012      	b.n	8007a80 <UART_SetConfig+0x7f8>
 8007a5a:	f04f 0306 	mov.w	r3, #6
 8007a5e:	f04f 0400 	mov.w	r4, #0
 8007a62:	e00d      	b.n	8007a80 <UART_SetConfig+0x7f8>
 8007a64:	f04f 0304 	mov.w	r3, #4
 8007a68:	f04f 0400 	mov.w	r4, #0
 8007a6c:	e008      	b.n	8007a80 <UART_SetConfig+0x7f8>
 8007a6e:	f04f 0302 	mov.w	r3, #2
 8007a72:	f04f 0400 	mov.w	r4, #0
 8007a76:	e003      	b.n	8007a80 <UART_SetConfig+0x7f8>
 8007a78:	f04f 0301 	mov.w	r3, #1
 8007a7c:	f04f 0400 	mov.w	r4, #0
 8007a80:	461a      	mov	r2, r3
 8007a82:	4623      	mov	r3, r4
 8007a84:	f7f8 fb84 	bl	8000190 <__aeabi_uldivmod>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	460c      	mov	r4, r1
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	4622      	mov	r2, r4
 8007a90:	f04f 0300 	mov.w	r3, #0
 8007a94:	f04f 0400 	mov.w	r4, #0
 8007a98:	0214      	lsls	r4, r2, #8
 8007a9a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007a9e:	020b      	lsls	r3, r1, #8
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	6852      	ldr	r2, [r2, #4]
 8007aa4:	0852      	lsrs	r2, r2, #1
 8007aa6:	4611      	mov	r1, r2
 8007aa8:	f04f 0200 	mov.w	r2, #0
 8007aac:	eb13 0b01 	adds.w	fp, r3, r1
 8007ab0:	eb44 0c02 	adc.w	ip, r4, r2
 8007ab4:	4658      	mov	r0, fp
 8007ab6:	4661      	mov	r1, ip
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	f04f 0400 	mov.w	r4, #0
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	4623      	mov	r3, r4
 8007ac4:	f7f8 fb64 	bl	8000190 <__aeabi_uldivmod>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	460c      	mov	r4, r1
 8007acc:	61fb      	str	r3, [r7, #28]
            break;
 8007ace:	e0ac      	b.n	8007c2a <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	f000 8089 	beq.w	8007bec <UART_SetConfig+0x964>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d05b      	beq.n	8007b9a <UART_SetConfig+0x912>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d052      	beq.n	8007b90 <UART_SetConfig+0x908>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aee:	2b03      	cmp	r3, #3
 8007af0:	d04a      	beq.n	8007b88 <UART_SetConfig+0x900>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af6:	2b04      	cmp	r3, #4
 8007af8:	d041      	beq.n	8007b7e <UART_SetConfig+0x8f6>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afe:	2b05      	cmp	r3, #5
 8007b00:	d039      	beq.n	8007b76 <UART_SetConfig+0x8ee>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b06:	2b06      	cmp	r3, #6
 8007b08:	d031      	beq.n	8007b6e <UART_SetConfig+0x8e6>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0e:	2b07      	cmp	r3, #7
 8007b10:	d028      	beq.n	8007b64 <UART_SetConfig+0x8dc>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b16:	2b08      	cmp	r3, #8
 8007b18:	d01f      	beq.n	8007b5a <UART_SetConfig+0x8d2>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1e:	2b09      	cmp	r3, #9
 8007b20:	d016      	beq.n	8007b50 <UART_SetConfig+0x8c8>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b26:	2b0a      	cmp	r3, #10
 8007b28:	d00d      	beq.n	8007b46 <UART_SetConfig+0x8be>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2e:	2b0b      	cmp	r3, #11
 8007b30:	d104      	bne.n	8007b3c <UART_SetConfig+0x8b4>
 8007b32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b36:	f04f 0400 	mov.w	r4, #0
 8007b3a:	e05b      	b.n	8007bf4 <UART_SetConfig+0x96c>
 8007b3c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007b40:	f04f 0400 	mov.w	r4, #0
 8007b44:	e056      	b.n	8007bf4 <UART_SetConfig+0x96c>
 8007b46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007b4a:	f04f 0400 	mov.w	r4, #0
 8007b4e:	e051      	b.n	8007bf4 <UART_SetConfig+0x96c>
 8007b50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007b54:	f04f 0400 	mov.w	r4, #0
 8007b58:	e04c      	b.n	8007bf4 <UART_SetConfig+0x96c>
 8007b5a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007b5e:	f04f 0400 	mov.w	r4, #0
 8007b62:	e047      	b.n	8007bf4 <UART_SetConfig+0x96c>
 8007b64:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007b68:	f04f 0400 	mov.w	r4, #0
 8007b6c:	e042      	b.n	8007bf4 <UART_SetConfig+0x96c>
 8007b6e:	4b1c      	ldr	r3, [pc, #112]	; (8007be0 <UART_SetConfig+0x958>)
 8007b70:	f04f 0400 	mov.w	r4, #0
 8007b74:	e03e      	b.n	8007bf4 <UART_SetConfig+0x96c>
 8007b76:	4b1b      	ldr	r3, [pc, #108]	; (8007be4 <UART_SetConfig+0x95c>)
 8007b78:	f04f 0400 	mov.w	r4, #0
 8007b7c:	e03a      	b.n	8007bf4 <UART_SetConfig+0x96c>
 8007b7e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007b82:	f04f 0400 	mov.w	r4, #0
 8007b86:	e035      	b.n	8007bf4 <UART_SetConfig+0x96c>
 8007b88:	4b17      	ldr	r3, [pc, #92]	; (8007be8 <UART_SetConfig+0x960>)
 8007b8a:	f04f 0400 	mov.w	r4, #0
 8007b8e:	e031      	b.n	8007bf4 <UART_SetConfig+0x96c>
 8007b90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007b94:	f04f 0400 	mov.w	r4, #0
 8007b98:	e02c      	b.n	8007bf4 <UART_SetConfig+0x96c>
 8007b9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007b9e:	f04f 0400 	mov.w	r4, #0
 8007ba2:	e027      	b.n	8007bf4 <UART_SetConfig+0x96c>
 8007ba4:	f3af 8000 	nop.w
 8007ba8:	14585500 	.word	0x14585500
 8007bac:	00000000 	.word	0x00000000
 8007bb0:	28b0aa00 	.word	0x28b0aa00
 8007bb4:	00000000 	.word	0x00000000
 8007bb8:	00f42400 	.word	0x00f42400
 8007bbc:	f4240000 	.word	0xf4240000
 8007bc0:	01e84800 	.word	0x01e84800
 8007bc4:	03d09000 	.word	0x03d09000
 8007bc8:	07a12000 	.word	0x07a12000
 8007bcc:	0f424000 	.word	0x0f424000
 8007bd0:	186a0000 	.word	0x186a0000
 8007bd4:	1e848000 	.word	0x1e848000
 8007bd8:	3d090000 	.word	0x3d090000
 8007bdc:	7a120000 	.word	0x7a120000
 8007be0:	000aaa00 	.word	0x000aaa00
 8007be4:	000ccc00 	.word	0x000ccc00
 8007be8:	00155500 	.word	0x00155500
 8007bec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007bf0:	f04f 0400 	mov.w	r4, #0
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	6852      	ldr	r2, [r2, #4]
 8007bf8:	0852      	lsrs	r2, r2, #1
 8007bfa:	4611      	mov	r1, r2
 8007bfc:	f04f 0200 	mov.w	r2, #0
 8007c00:	eb13 0b01 	adds.w	fp, r3, r1
 8007c04:	eb44 0c02 	adc.w	ip, r4, r2
 8007c08:	4658      	mov	r0, fp
 8007c0a:	4661      	mov	r1, ip
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	f04f 0400 	mov.w	r4, #0
 8007c14:	461a      	mov	r2, r3
 8007c16:	4623      	mov	r3, r4
 8007c18:	f7f8 faba 	bl	8000190 <__aeabi_uldivmod>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	460c      	mov	r4, r1
 8007c20:	61fb      	str	r3, [r7, #28]
            break;
 8007c22:	e002      	b.n	8007c2a <UART_SetConfig+0x9a2>
          default:
            ret = HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	76fb      	strb	r3, [r7, #27]
            break;
 8007c28:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c30:	d308      	bcc.n	8007c44 <UART_SetConfig+0x9bc>
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c38:	d204      	bcs.n	8007c44 <UART_SetConfig+0x9bc>
        {
          huart->Instance->BRR = usartdiv;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	69fa      	ldr	r2, [r7, #28]
 8007c40:	60da      	str	r2, [r3, #12]
 8007c42:	e35b      	b.n	80082fc <UART_SetConfig+0x1074>
        }
        else
        {
          ret = HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	76fb      	strb	r3, [r7, #27]
 8007c48:	e358      	b.n	80082fc <UART_SetConfig+0x1074>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	69db      	ldr	r3, [r3, #28]
 8007c4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c52:	f040 81a6 	bne.w	8007fa2 <UART_SetConfig+0xd1a>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007c56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	2b07      	cmp	r3, #7
 8007c5e:	f200 8180 	bhi.w	8007f62 <UART_SetConfig+0xcda>
 8007c62:	a201      	add	r2, pc, #4	; (adr r2, 8007c68 <UART_SetConfig+0x9e0>)
 8007c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c68:	08007c89 	.word	0x08007c89
 8007c6c:	08007d41 	.word	0x08007d41
 8007c70:	08007f63 	.word	0x08007f63
 8007c74:	08007de9 	.word	0x08007de9
 8007c78:	08007f63 	.word	0x08007f63
 8007c7c:	08007f63 	.word	0x08007f63
 8007c80:	08007f63 	.word	0x08007f63
 8007c84:	08007ea1 	.word	0x08007ea1
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c88:	f7fd fb40 	bl	800530c <HAL_RCC_GetPCLK2Freq>
 8007c8c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d044      	beq.n	8007d20 <UART_SetConfig+0xa98>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d03e      	beq.n	8007d1c <UART_SetConfig+0xa94>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca2:	2b02      	cmp	r3, #2
 8007ca4:	d038      	beq.n	8007d18 <UART_SetConfig+0xa90>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007caa:	2b03      	cmp	r3, #3
 8007cac:	d032      	beq.n	8007d14 <UART_SetConfig+0xa8c>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb2:	2b04      	cmp	r3, #4
 8007cb4:	d02c      	beq.n	8007d10 <UART_SetConfig+0xa88>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cba:	2b05      	cmp	r3, #5
 8007cbc:	d026      	beq.n	8007d0c <UART_SetConfig+0xa84>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc2:	2b06      	cmp	r3, #6
 8007cc4:	d020      	beq.n	8007d08 <UART_SetConfig+0xa80>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cca:	2b07      	cmp	r3, #7
 8007ccc:	d01a      	beq.n	8007d04 <UART_SetConfig+0xa7c>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd2:	2b08      	cmp	r3, #8
 8007cd4:	d014      	beq.n	8007d00 <UART_SetConfig+0xa78>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cda:	2b09      	cmp	r3, #9
 8007cdc:	d00e      	beq.n	8007cfc <UART_SetConfig+0xa74>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce2:	2b0a      	cmp	r3, #10
 8007ce4:	d008      	beq.n	8007cf8 <UART_SetConfig+0xa70>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cea:	2b0b      	cmp	r3, #11
 8007cec:	d102      	bne.n	8007cf4 <UART_SetConfig+0xa6c>
 8007cee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cf2:	e016      	b.n	8007d22 <UART_SetConfig+0xa9a>
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e014      	b.n	8007d22 <UART_SetConfig+0xa9a>
 8007cf8:	2380      	movs	r3, #128	; 0x80
 8007cfa:	e012      	b.n	8007d22 <UART_SetConfig+0xa9a>
 8007cfc:	2340      	movs	r3, #64	; 0x40
 8007cfe:	e010      	b.n	8007d22 <UART_SetConfig+0xa9a>
 8007d00:	2320      	movs	r3, #32
 8007d02:	e00e      	b.n	8007d22 <UART_SetConfig+0xa9a>
 8007d04:	2310      	movs	r3, #16
 8007d06:	e00c      	b.n	8007d22 <UART_SetConfig+0xa9a>
 8007d08:	230c      	movs	r3, #12
 8007d0a:	e00a      	b.n	8007d22 <UART_SetConfig+0xa9a>
 8007d0c:	230a      	movs	r3, #10
 8007d0e:	e008      	b.n	8007d22 <UART_SetConfig+0xa9a>
 8007d10:	2308      	movs	r3, #8
 8007d12:	e006      	b.n	8007d22 <UART_SetConfig+0xa9a>
 8007d14:	2306      	movs	r3, #6
 8007d16:	e004      	b.n	8007d22 <UART_SetConfig+0xa9a>
 8007d18:	2304      	movs	r3, #4
 8007d1a:	e002      	b.n	8007d22 <UART_SetConfig+0xa9a>
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	e000      	b.n	8007d22 <UART_SetConfig+0xa9a>
 8007d20:	2301      	movs	r3, #1
 8007d22:	693a      	ldr	r2, [r7, #16]
 8007d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d28:	005a      	lsls	r2, r3, #1
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	085b      	lsrs	r3, r3, #1
 8007d30:	441a      	add	r2, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	61fb      	str	r3, [r7, #28]
        break;
 8007d3e:	e113      	b.n	8007f68 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d043      	beq.n	8007dd0 <UART_SetConfig+0xb48>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d03d      	beq.n	8007dcc <UART_SetConfig+0xb44>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d54:	2b02      	cmp	r3, #2
 8007d56:	d037      	beq.n	8007dc8 <UART_SetConfig+0xb40>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5c:	2b03      	cmp	r3, #3
 8007d5e:	d031      	beq.n	8007dc4 <UART_SetConfig+0xb3c>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d64:	2b04      	cmp	r3, #4
 8007d66:	d02b      	beq.n	8007dc0 <UART_SetConfig+0xb38>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6c:	2b05      	cmp	r3, #5
 8007d6e:	d025      	beq.n	8007dbc <UART_SetConfig+0xb34>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d74:	2b06      	cmp	r3, #6
 8007d76:	d01f      	beq.n	8007db8 <UART_SetConfig+0xb30>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7c:	2b07      	cmp	r3, #7
 8007d7e:	d019      	beq.n	8007db4 <UART_SetConfig+0xb2c>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d84:	2b08      	cmp	r3, #8
 8007d86:	d013      	beq.n	8007db0 <UART_SetConfig+0xb28>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8c:	2b09      	cmp	r3, #9
 8007d8e:	d00d      	beq.n	8007dac <UART_SetConfig+0xb24>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d94:	2b0a      	cmp	r3, #10
 8007d96:	d007      	beq.n	8007da8 <UART_SetConfig+0xb20>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9c:	2b0b      	cmp	r3, #11
 8007d9e:	d101      	bne.n	8007da4 <UART_SetConfig+0xb1c>
 8007da0:	4b8c      	ldr	r3, [pc, #560]	; (8007fd4 <UART_SetConfig+0xd4c>)
 8007da2:	e016      	b.n	8007dd2 <UART_SetConfig+0xb4a>
 8007da4:	4b8c      	ldr	r3, [pc, #560]	; (8007fd8 <UART_SetConfig+0xd50>)
 8007da6:	e014      	b.n	8007dd2 <UART_SetConfig+0xb4a>
 8007da8:	4b8c      	ldr	r3, [pc, #560]	; (8007fdc <UART_SetConfig+0xd54>)
 8007daa:	e012      	b.n	8007dd2 <UART_SetConfig+0xb4a>
 8007dac:	4b8c      	ldr	r3, [pc, #560]	; (8007fe0 <UART_SetConfig+0xd58>)
 8007dae:	e010      	b.n	8007dd2 <UART_SetConfig+0xb4a>
 8007db0:	4b8c      	ldr	r3, [pc, #560]	; (8007fe4 <UART_SetConfig+0xd5c>)
 8007db2:	e00e      	b.n	8007dd2 <UART_SetConfig+0xb4a>
 8007db4:	4b8c      	ldr	r3, [pc, #560]	; (8007fe8 <UART_SetConfig+0xd60>)
 8007db6:	e00c      	b.n	8007dd2 <UART_SetConfig+0xb4a>
 8007db8:	4b8c      	ldr	r3, [pc, #560]	; (8007fec <UART_SetConfig+0xd64>)
 8007dba:	e00a      	b.n	8007dd2 <UART_SetConfig+0xb4a>
 8007dbc:	4b8c      	ldr	r3, [pc, #560]	; (8007ff0 <UART_SetConfig+0xd68>)
 8007dbe:	e008      	b.n	8007dd2 <UART_SetConfig+0xb4a>
 8007dc0:	4b8c      	ldr	r3, [pc, #560]	; (8007ff4 <UART_SetConfig+0xd6c>)
 8007dc2:	e006      	b.n	8007dd2 <UART_SetConfig+0xb4a>
 8007dc4:	4b8c      	ldr	r3, [pc, #560]	; (8007ff8 <UART_SetConfig+0xd70>)
 8007dc6:	e004      	b.n	8007dd2 <UART_SetConfig+0xb4a>
 8007dc8:	4b8c      	ldr	r3, [pc, #560]	; (8007ffc <UART_SetConfig+0xd74>)
 8007dca:	e002      	b.n	8007dd2 <UART_SetConfig+0xb4a>
 8007dcc:	4b8c      	ldr	r3, [pc, #560]	; (8008000 <UART_SetConfig+0xd78>)
 8007dce:	e000      	b.n	8007dd2 <UART_SetConfig+0xb4a>
 8007dd0:	4b81      	ldr	r3, [pc, #516]	; (8007fd8 <UART_SetConfig+0xd50>)
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	6852      	ldr	r2, [r2, #4]
 8007dd6:	0852      	lsrs	r2, r2, #1
 8007dd8:	441a      	add	r2, r3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	61fb      	str	r3, [r7, #28]
        break;
 8007de6:	e0bf      	b.n	8007f68 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007de8:	f7fd f9fc 	bl	80051e4 <HAL_RCC_GetSysClockFreq>
 8007dec:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d044      	beq.n	8007e80 <UART_SetConfig+0xbf8>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d03e      	beq.n	8007e7c <UART_SetConfig+0xbf4>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d038      	beq.n	8007e78 <UART_SetConfig+0xbf0>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0a:	2b03      	cmp	r3, #3
 8007e0c:	d032      	beq.n	8007e74 <UART_SetConfig+0xbec>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e12:	2b04      	cmp	r3, #4
 8007e14:	d02c      	beq.n	8007e70 <UART_SetConfig+0xbe8>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1a:	2b05      	cmp	r3, #5
 8007e1c:	d026      	beq.n	8007e6c <UART_SetConfig+0xbe4>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e22:	2b06      	cmp	r3, #6
 8007e24:	d020      	beq.n	8007e68 <UART_SetConfig+0xbe0>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2a:	2b07      	cmp	r3, #7
 8007e2c:	d01a      	beq.n	8007e64 <UART_SetConfig+0xbdc>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e32:	2b08      	cmp	r3, #8
 8007e34:	d014      	beq.n	8007e60 <UART_SetConfig+0xbd8>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3a:	2b09      	cmp	r3, #9
 8007e3c:	d00e      	beq.n	8007e5c <UART_SetConfig+0xbd4>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e42:	2b0a      	cmp	r3, #10
 8007e44:	d008      	beq.n	8007e58 <UART_SetConfig+0xbd0>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4a:	2b0b      	cmp	r3, #11
 8007e4c:	d102      	bne.n	8007e54 <UART_SetConfig+0xbcc>
 8007e4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e52:	e016      	b.n	8007e82 <UART_SetConfig+0xbfa>
 8007e54:	2301      	movs	r3, #1
 8007e56:	e014      	b.n	8007e82 <UART_SetConfig+0xbfa>
 8007e58:	2380      	movs	r3, #128	; 0x80
 8007e5a:	e012      	b.n	8007e82 <UART_SetConfig+0xbfa>
 8007e5c:	2340      	movs	r3, #64	; 0x40
 8007e5e:	e010      	b.n	8007e82 <UART_SetConfig+0xbfa>
 8007e60:	2320      	movs	r3, #32
 8007e62:	e00e      	b.n	8007e82 <UART_SetConfig+0xbfa>
 8007e64:	2310      	movs	r3, #16
 8007e66:	e00c      	b.n	8007e82 <UART_SetConfig+0xbfa>
 8007e68:	230c      	movs	r3, #12
 8007e6a:	e00a      	b.n	8007e82 <UART_SetConfig+0xbfa>
 8007e6c:	230a      	movs	r3, #10
 8007e6e:	e008      	b.n	8007e82 <UART_SetConfig+0xbfa>
 8007e70:	2308      	movs	r3, #8
 8007e72:	e006      	b.n	8007e82 <UART_SetConfig+0xbfa>
 8007e74:	2306      	movs	r3, #6
 8007e76:	e004      	b.n	8007e82 <UART_SetConfig+0xbfa>
 8007e78:	2304      	movs	r3, #4
 8007e7a:	e002      	b.n	8007e82 <UART_SetConfig+0xbfa>
 8007e7c:	2302      	movs	r3, #2
 8007e7e:	e000      	b.n	8007e82 <UART_SetConfig+0xbfa>
 8007e80:	2301      	movs	r3, #1
 8007e82:	693a      	ldr	r2, [r7, #16]
 8007e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e88:	005a      	lsls	r2, r3, #1
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	085b      	lsrs	r3, r3, #1
 8007e90:	441a      	add	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	61fb      	str	r3, [r7, #28]
        break;
 8007e9e:	e063      	b.n	8007f68 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d04f      	beq.n	8007f48 <UART_SetConfig+0xcc0>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d048      	beq.n	8007f42 <UART_SetConfig+0xcba>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	d041      	beq.n	8007f3c <UART_SetConfig+0xcb4>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ebc:	2b03      	cmp	r3, #3
 8007ebe:	d03a      	beq.n	8007f36 <UART_SetConfig+0xcae>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec4:	2b04      	cmp	r3, #4
 8007ec6:	d033      	beq.n	8007f30 <UART_SetConfig+0xca8>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ecc:	2b05      	cmp	r3, #5
 8007ece:	d02c      	beq.n	8007f2a <UART_SetConfig+0xca2>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed4:	2b06      	cmp	r3, #6
 8007ed6:	d025      	beq.n	8007f24 <UART_SetConfig+0xc9c>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007edc:	2b07      	cmp	r3, #7
 8007ede:	d01e      	beq.n	8007f1e <UART_SetConfig+0xc96>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee4:	2b08      	cmp	r3, #8
 8007ee6:	d017      	beq.n	8007f18 <UART_SetConfig+0xc90>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eec:	2b09      	cmp	r3, #9
 8007eee:	d010      	beq.n	8007f12 <UART_SetConfig+0xc8a>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef4:	2b0a      	cmp	r3, #10
 8007ef6:	d009      	beq.n	8007f0c <UART_SetConfig+0xc84>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efc:	2b0b      	cmp	r3, #11
 8007efe:	d102      	bne.n	8007f06 <UART_SetConfig+0xc7e>
 8007f00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f04:	e022      	b.n	8007f4c <UART_SetConfig+0xcc4>
 8007f06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f0a:	e01f      	b.n	8007f4c <UART_SetConfig+0xcc4>
 8007f0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f10:	e01c      	b.n	8007f4c <UART_SetConfig+0xcc4>
 8007f12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f16:	e019      	b.n	8007f4c <UART_SetConfig+0xcc4>
 8007f18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f1c:	e016      	b.n	8007f4c <UART_SetConfig+0xcc4>
 8007f1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f22:	e013      	b.n	8007f4c <UART_SetConfig+0xcc4>
 8007f24:	f241 5354 	movw	r3, #5460	; 0x1554
 8007f28:	e010      	b.n	8007f4c <UART_SetConfig+0xcc4>
 8007f2a:	f641 1398 	movw	r3, #6552	; 0x1998
 8007f2e:	e00d      	b.n	8007f4c <UART_SetConfig+0xcc4>
 8007f30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007f34:	e00a      	b.n	8007f4c <UART_SetConfig+0xcc4>
 8007f36:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8007f3a:	e007      	b.n	8007f4c <UART_SetConfig+0xcc4>
 8007f3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007f40:	e004      	b.n	8007f4c <UART_SetConfig+0xcc4>
 8007f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f46:	e001      	b.n	8007f4c <UART_SetConfig+0xcc4>
 8007f48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	6852      	ldr	r2, [r2, #4]
 8007f50:	0852      	lsrs	r2, r2, #1
 8007f52:	441a      	add	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	61fb      	str	r3, [r7, #28]
        break;
 8007f60:	e002      	b.n	8007f68 <UART_SetConfig+0xce0>
      default:
        ret = HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	76fb      	strb	r3, [r7, #27]
        break;
 8007f66:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	2b0f      	cmp	r3, #15
 8007f6c:	d916      	bls.n	8007f9c <UART_SetConfig+0xd14>
 8007f6e:	69fb      	ldr	r3, [r7, #28]
 8007f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f74:	d212      	bcs.n	8007f9c <UART_SetConfig+0xd14>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	f023 030f 	bic.w	r3, r3, #15
 8007f7e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	085b      	lsrs	r3, r3, #1
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	f003 0307 	and.w	r3, r3, #7
 8007f8a:	b29a      	uxth	r2, r3
 8007f8c:	89fb      	ldrh	r3, [r7, #14]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	89fa      	ldrh	r2, [r7, #14]
 8007f98:	60da      	str	r2, [r3, #12]
 8007f9a:	e1af      	b.n	80082fc <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	76fb      	strb	r3, [r7, #27]
 8007fa0:	e1ac      	b.n	80082fc <UART_SetConfig+0x1074>
    }
  }
  else
  {
    switch (clocksource)
 8007fa2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	2b07      	cmp	r3, #7
 8007faa:	f200 8196 	bhi.w	80082da <UART_SetConfig+0x1052>
 8007fae:	a201      	add	r2, pc, #4	; (adr r2, 8007fb4 <UART_SetConfig+0xd2c>)
 8007fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb4:	08008005 	.word	0x08008005
 8007fb8:	080080bb 	.word	0x080080bb
 8007fbc:	080082db 	.word	0x080082db
 8007fc0:	08008165 	.word	0x08008165
 8007fc4:	080082db 	.word	0x080082db
 8007fc8:	080082db 	.word	0x080082db
 8007fcc:	080082db 	.word	0x080082db
 8007fd0:	0800821b 	.word	0x0800821b
 8007fd4:	0001e848 	.word	0x0001e848
 8007fd8:	01e84800 	.word	0x01e84800
 8007fdc:	0003d090 	.word	0x0003d090
 8007fe0:	0007a120 	.word	0x0007a120
 8007fe4:	000f4240 	.word	0x000f4240
 8007fe8:	001e8480 	.word	0x001e8480
 8007fec:	0028b0aa 	.word	0x0028b0aa
 8007ff0:	0030d400 	.word	0x0030d400
 8007ff4:	003d0900 	.word	0x003d0900
 8007ff8:	00516154 	.word	0x00516154
 8007ffc:	007a1200 	.word	0x007a1200
 8008000:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008004:	f7fd f982 	bl	800530c <HAL_RCC_GetPCLK2Freq>
 8008008:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800e:	2b00      	cmp	r3, #0
 8008010:	d044      	beq.n	800809c <UART_SetConfig+0xe14>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008016:	2b01      	cmp	r3, #1
 8008018:	d03e      	beq.n	8008098 <UART_SetConfig+0xe10>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801e:	2b02      	cmp	r3, #2
 8008020:	d038      	beq.n	8008094 <UART_SetConfig+0xe0c>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008026:	2b03      	cmp	r3, #3
 8008028:	d032      	beq.n	8008090 <UART_SetConfig+0xe08>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802e:	2b04      	cmp	r3, #4
 8008030:	d02c      	beq.n	800808c <UART_SetConfig+0xe04>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008036:	2b05      	cmp	r3, #5
 8008038:	d026      	beq.n	8008088 <UART_SetConfig+0xe00>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800803e:	2b06      	cmp	r3, #6
 8008040:	d020      	beq.n	8008084 <UART_SetConfig+0xdfc>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008046:	2b07      	cmp	r3, #7
 8008048:	d01a      	beq.n	8008080 <UART_SetConfig+0xdf8>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804e:	2b08      	cmp	r3, #8
 8008050:	d014      	beq.n	800807c <UART_SetConfig+0xdf4>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008056:	2b09      	cmp	r3, #9
 8008058:	d00e      	beq.n	8008078 <UART_SetConfig+0xdf0>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805e:	2b0a      	cmp	r3, #10
 8008060:	d008      	beq.n	8008074 <UART_SetConfig+0xdec>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008066:	2b0b      	cmp	r3, #11
 8008068:	d102      	bne.n	8008070 <UART_SetConfig+0xde8>
 800806a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800806e:	e016      	b.n	800809e <UART_SetConfig+0xe16>
 8008070:	2301      	movs	r3, #1
 8008072:	e014      	b.n	800809e <UART_SetConfig+0xe16>
 8008074:	2380      	movs	r3, #128	; 0x80
 8008076:	e012      	b.n	800809e <UART_SetConfig+0xe16>
 8008078:	2340      	movs	r3, #64	; 0x40
 800807a:	e010      	b.n	800809e <UART_SetConfig+0xe16>
 800807c:	2320      	movs	r3, #32
 800807e:	e00e      	b.n	800809e <UART_SetConfig+0xe16>
 8008080:	2310      	movs	r3, #16
 8008082:	e00c      	b.n	800809e <UART_SetConfig+0xe16>
 8008084:	230c      	movs	r3, #12
 8008086:	e00a      	b.n	800809e <UART_SetConfig+0xe16>
 8008088:	230a      	movs	r3, #10
 800808a:	e008      	b.n	800809e <UART_SetConfig+0xe16>
 800808c:	2308      	movs	r3, #8
 800808e:	e006      	b.n	800809e <UART_SetConfig+0xe16>
 8008090:	2306      	movs	r3, #6
 8008092:	e004      	b.n	800809e <UART_SetConfig+0xe16>
 8008094:	2304      	movs	r3, #4
 8008096:	e002      	b.n	800809e <UART_SetConfig+0xe16>
 8008098:	2302      	movs	r3, #2
 800809a:	e000      	b.n	800809e <UART_SetConfig+0xe16>
 800809c:	2301      	movs	r3, #1
 800809e:	693a      	ldr	r2, [r7, #16]
 80080a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	085b      	lsrs	r3, r3, #1
 80080aa:	441a      	add	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	61fb      	str	r3, [r7, #28]
        break;
 80080b8:	e112      	b.n	80082e0 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d044      	beq.n	800814c <UART_SetConfig+0xec4>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d03e      	beq.n	8008148 <UART_SetConfig+0xec0>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d038      	beq.n	8008144 <UART_SetConfig+0xebc>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d6:	2b03      	cmp	r3, #3
 80080d8:	d032      	beq.n	8008140 <UART_SetConfig+0xeb8>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080de:	2b04      	cmp	r3, #4
 80080e0:	d02c      	beq.n	800813c <UART_SetConfig+0xeb4>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e6:	2b05      	cmp	r3, #5
 80080e8:	d026      	beq.n	8008138 <UART_SetConfig+0xeb0>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ee:	2b06      	cmp	r3, #6
 80080f0:	d020      	beq.n	8008134 <UART_SetConfig+0xeac>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f6:	2b07      	cmp	r3, #7
 80080f8:	d01a      	beq.n	8008130 <UART_SetConfig+0xea8>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fe:	2b08      	cmp	r3, #8
 8008100:	d014      	beq.n	800812c <UART_SetConfig+0xea4>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008106:	2b09      	cmp	r3, #9
 8008108:	d00e      	beq.n	8008128 <UART_SetConfig+0xea0>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810e:	2b0a      	cmp	r3, #10
 8008110:	d008      	beq.n	8008124 <UART_SetConfig+0xe9c>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008116:	2b0b      	cmp	r3, #11
 8008118:	d102      	bne.n	8008120 <UART_SetConfig+0xe98>
 800811a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800811e:	e016      	b.n	800814e <UART_SetConfig+0xec6>
 8008120:	4b80      	ldr	r3, [pc, #512]	; (8008324 <UART_SetConfig+0x109c>)
 8008122:	e014      	b.n	800814e <UART_SetConfig+0xec6>
 8008124:	4b80      	ldr	r3, [pc, #512]	; (8008328 <UART_SetConfig+0x10a0>)
 8008126:	e012      	b.n	800814e <UART_SetConfig+0xec6>
 8008128:	4b80      	ldr	r3, [pc, #512]	; (800832c <UART_SetConfig+0x10a4>)
 800812a:	e010      	b.n	800814e <UART_SetConfig+0xec6>
 800812c:	4b80      	ldr	r3, [pc, #512]	; (8008330 <UART_SetConfig+0x10a8>)
 800812e:	e00e      	b.n	800814e <UART_SetConfig+0xec6>
 8008130:	4b80      	ldr	r3, [pc, #512]	; (8008334 <UART_SetConfig+0x10ac>)
 8008132:	e00c      	b.n	800814e <UART_SetConfig+0xec6>
 8008134:	4b80      	ldr	r3, [pc, #512]	; (8008338 <UART_SetConfig+0x10b0>)
 8008136:	e00a      	b.n	800814e <UART_SetConfig+0xec6>
 8008138:	4b80      	ldr	r3, [pc, #512]	; (800833c <UART_SetConfig+0x10b4>)
 800813a:	e008      	b.n	800814e <UART_SetConfig+0xec6>
 800813c:	4b80      	ldr	r3, [pc, #512]	; (8008340 <UART_SetConfig+0x10b8>)
 800813e:	e006      	b.n	800814e <UART_SetConfig+0xec6>
 8008140:	4b80      	ldr	r3, [pc, #512]	; (8008344 <UART_SetConfig+0x10bc>)
 8008142:	e004      	b.n	800814e <UART_SetConfig+0xec6>
 8008144:	4b80      	ldr	r3, [pc, #512]	; (8008348 <UART_SetConfig+0x10c0>)
 8008146:	e002      	b.n	800814e <UART_SetConfig+0xec6>
 8008148:	4b80      	ldr	r3, [pc, #512]	; (800834c <UART_SetConfig+0x10c4>)
 800814a:	e000      	b.n	800814e <UART_SetConfig+0xec6>
 800814c:	4b75      	ldr	r3, [pc, #468]	; (8008324 <UART_SetConfig+0x109c>)
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	6852      	ldr	r2, [r2, #4]
 8008152:	0852      	lsrs	r2, r2, #1
 8008154:	441a      	add	r2, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	fbb2 f3f3 	udiv	r3, r2, r3
 800815e:	b29b      	uxth	r3, r3
 8008160:	61fb      	str	r3, [r7, #28]
        break;
 8008162:	e0bd      	b.n	80082e0 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008164:	f7fd f83e 	bl	80051e4 <HAL_RCC_GetSysClockFreq>
 8008168:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816e:	2b00      	cmp	r3, #0
 8008170:	d044      	beq.n	80081fc <UART_SetConfig+0xf74>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008176:	2b01      	cmp	r3, #1
 8008178:	d03e      	beq.n	80081f8 <UART_SetConfig+0xf70>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817e:	2b02      	cmp	r3, #2
 8008180:	d038      	beq.n	80081f4 <UART_SetConfig+0xf6c>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008186:	2b03      	cmp	r3, #3
 8008188:	d032      	beq.n	80081f0 <UART_SetConfig+0xf68>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818e:	2b04      	cmp	r3, #4
 8008190:	d02c      	beq.n	80081ec <UART_SetConfig+0xf64>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008196:	2b05      	cmp	r3, #5
 8008198:	d026      	beq.n	80081e8 <UART_SetConfig+0xf60>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819e:	2b06      	cmp	r3, #6
 80081a0:	d020      	beq.n	80081e4 <UART_SetConfig+0xf5c>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a6:	2b07      	cmp	r3, #7
 80081a8:	d01a      	beq.n	80081e0 <UART_SetConfig+0xf58>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ae:	2b08      	cmp	r3, #8
 80081b0:	d014      	beq.n	80081dc <UART_SetConfig+0xf54>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b6:	2b09      	cmp	r3, #9
 80081b8:	d00e      	beq.n	80081d8 <UART_SetConfig+0xf50>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081be:	2b0a      	cmp	r3, #10
 80081c0:	d008      	beq.n	80081d4 <UART_SetConfig+0xf4c>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c6:	2b0b      	cmp	r3, #11
 80081c8:	d102      	bne.n	80081d0 <UART_SetConfig+0xf48>
 80081ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081ce:	e016      	b.n	80081fe <UART_SetConfig+0xf76>
 80081d0:	2301      	movs	r3, #1
 80081d2:	e014      	b.n	80081fe <UART_SetConfig+0xf76>
 80081d4:	2380      	movs	r3, #128	; 0x80
 80081d6:	e012      	b.n	80081fe <UART_SetConfig+0xf76>
 80081d8:	2340      	movs	r3, #64	; 0x40
 80081da:	e010      	b.n	80081fe <UART_SetConfig+0xf76>
 80081dc:	2320      	movs	r3, #32
 80081de:	e00e      	b.n	80081fe <UART_SetConfig+0xf76>
 80081e0:	2310      	movs	r3, #16
 80081e2:	e00c      	b.n	80081fe <UART_SetConfig+0xf76>
 80081e4:	230c      	movs	r3, #12
 80081e6:	e00a      	b.n	80081fe <UART_SetConfig+0xf76>
 80081e8:	230a      	movs	r3, #10
 80081ea:	e008      	b.n	80081fe <UART_SetConfig+0xf76>
 80081ec:	2308      	movs	r3, #8
 80081ee:	e006      	b.n	80081fe <UART_SetConfig+0xf76>
 80081f0:	2306      	movs	r3, #6
 80081f2:	e004      	b.n	80081fe <UART_SetConfig+0xf76>
 80081f4:	2304      	movs	r3, #4
 80081f6:	e002      	b.n	80081fe <UART_SetConfig+0xf76>
 80081f8:	2302      	movs	r3, #2
 80081fa:	e000      	b.n	80081fe <UART_SetConfig+0xf76>
 80081fc:	2301      	movs	r3, #1
 80081fe:	693a      	ldr	r2, [r7, #16]
 8008200:	fbb2 f2f3 	udiv	r2, r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	085b      	lsrs	r3, r3, #1
 800820a:	441a      	add	r2, r3
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	fbb2 f3f3 	udiv	r3, r2, r3
 8008214:	b29b      	uxth	r3, r3
 8008216:	61fb      	str	r3, [r7, #28]
        break;
 8008218:	e062      	b.n	80082e0 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821e:	2b00      	cmp	r3, #0
 8008220:	d04e      	beq.n	80082c0 <UART_SetConfig+0x1038>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008226:	2b01      	cmp	r3, #1
 8008228:	d047      	beq.n	80082ba <UART_SetConfig+0x1032>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822e:	2b02      	cmp	r3, #2
 8008230:	d040      	beq.n	80082b4 <UART_SetConfig+0x102c>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008236:	2b03      	cmp	r3, #3
 8008238:	d039      	beq.n	80082ae <UART_SetConfig+0x1026>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823e:	2b04      	cmp	r3, #4
 8008240:	d032      	beq.n	80082a8 <UART_SetConfig+0x1020>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008246:	2b05      	cmp	r3, #5
 8008248:	d02b      	beq.n	80082a2 <UART_SetConfig+0x101a>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824e:	2b06      	cmp	r3, #6
 8008250:	d024      	beq.n	800829c <UART_SetConfig+0x1014>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008256:	2b07      	cmp	r3, #7
 8008258:	d01d      	beq.n	8008296 <UART_SetConfig+0x100e>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825e:	2b08      	cmp	r3, #8
 8008260:	d016      	beq.n	8008290 <UART_SetConfig+0x1008>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008266:	2b09      	cmp	r3, #9
 8008268:	d00f      	beq.n	800828a <UART_SetConfig+0x1002>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826e:	2b0a      	cmp	r3, #10
 8008270:	d008      	beq.n	8008284 <UART_SetConfig+0xffc>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008276:	2b0b      	cmp	r3, #11
 8008278:	d101      	bne.n	800827e <UART_SetConfig+0xff6>
 800827a:	2380      	movs	r3, #128	; 0x80
 800827c:	e022      	b.n	80082c4 <UART_SetConfig+0x103c>
 800827e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008282:	e01f      	b.n	80082c4 <UART_SetConfig+0x103c>
 8008284:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008288:	e01c      	b.n	80082c4 <UART_SetConfig+0x103c>
 800828a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800828e:	e019      	b.n	80082c4 <UART_SetConfig+0x103c>
 8008290:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008294:	e016      	b.n	80082c4 <UART_SetConfig+0x103c>
 8008296:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800829a:	e013      	b.n	80082c4 <UART_SetConfig+0x103c>
 800829c:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80082a0:	e010      	b.n	80082c4 <UART_SetConfig+0x103c>
 80082a2:	f640 43cc 	movw	r3, #3276	; 0xccc
 80082a6:	e00d      	b.n	80082c4 <UART_SetConfig+0x103c>
 80082a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082ac:	e00a      	b.n	80082c4 <UART_SetConfig+0x103c>
 80082ae:	f241 5355 	movw	r3, #5461	; 0x1555
 80082b2:	e007      	b.n	80082c4 <UART_SetConfig+0x103c>
 80082b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80082b8:	e004      	b.n	80082c4 <UART_SetConfig+0x103c>
 80082ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80082be:	e001      	b.n	80082c4 <UART_SetConfig+0x103c>
 80082c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	6852      	ldr	r2, [r2, #4]
 80082c8:	0852      	lsrs	r2, r2, #1
 80082ca:	441a      	add	r2, r3
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	61fb      	str	r3, [r7, #28]
        break;
 80082d8:	e002      	b.n	80082e0 <UART_SetConfig+0x1058>
      default:
        ret = HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	76fb      	strb	r3, [r7, #27]
        break;
 80082de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	2b0f      	cmp	r3, #15
 80082e4:	d908      	bls.n	80082f8 <UART_SetConfig+0x1070>
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082ec:	d204      	bcs.n	80082f8 <UART_SetConfig+0x1070>
    {
      huart->Instance->BRR = usartdiv;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	69fa      	ldr	r2, [r7, #28]
 80082f4:	60da      	str	r2, [r3, #12]
 80082f6:	e001      	b.n	80082fc <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2200      	movs	r2, #0
 8008316:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8008318:	7efb      	ldrb	r3, [r7, #27]
}
 800831a:	4618      	mov	r0, r3
 800831c:	3728      	adds	r7, #40	; 0x28
 800831e:	46bd      	mov	sp, r7
 8008320:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8008324:	00f42400 	.word	0x00f42400
 8008328:	0001e848 	.word	0x0001e848
 800832c:	0003d090 	.word	0x0003d090
 8008330:	0007a120 	.word	0x0007a120
 8008334:	000f4240 	.word	0x000f4240
 8008338:	00145855 	.word	0x00145855
 800833c:	00186a00 	.word	0x00186a00
 8008340:	001e8480 	.word	0x001e8480
 8008344:	0028b0aa 	.word	0x0028b0aa
 8008348:	003d0900 	.word	0x003d0900
 800834c:	007a1200 	.word	0x007a1200

08008350 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800835c:	f003 0301 	and.w	r3, r3, #1
 8008360:	2b00      	cmp	r3, #0
 8008362:	d00a      	beq.n	800837a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	430a      	orrs	r2, r1
 8008378:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800837e:	f003 0302 	and.w	r3, r3, #2
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00a      	beq.n	800839c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	430a      	orrs	r2, r1
 800839a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083a0:	f003 0304 	and.w	r3, r3, #4
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d00a      	beq.n	80083be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	430a      	orrs	r2, r1
 80083bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c2:	f003 0308 	and.w	r3, r3, #8
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00a      	beq.n	80083e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	430a      	orrs	r2, r1
 80083de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e4:	f003 0310 	and.w	r3, r3, #16
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d00a      	beq.n	8008402 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	430a      	orrs	r2, r1
 8008400:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008406:	f003 0320 	and.w	r3, r3, #32
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00a      	beq.n	8008424 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	430a      	orrs	r2, r1
 8008422:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800842c:	2b00      	cmp	r3, #0
 800842e:	d01a      	beq.n	8008466 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	430a      	orrs	r2, r1
 8008444:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800844a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800844e:	d10a      	bne.n	8008466 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	430a      	orrs	r2, r1
 8008464:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800846a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800846e:	2b00      	cmp	r3, #0
 8008470:	d00a      	beq.n	8008488 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	430a      	orrs	r2, r1
 8008486:	605a      	str	r2, [r3, #4]
  }
}
 8008488:	bf00      	nop
 800848a:	370c      	adds	r7, #12
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr

08008494 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b086      	sub	sp, #24
 8008498:	af02      	add	r7, sp, #8
 800849a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80084a4:	f7fa fcfe 	bl	8002ea4 <HAL_GetTick>
 80084a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f003 0308 	and.w	r3, r3, #8
 80084b4:	2b08      	cmp	r3, #8
 80084b6:	d10e      	bne.n	80084d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80084bc:	9300      	str	r3, [sp, #0]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2200      	movs	r2, #0
 80084c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 f82c 	bl	8008524 <UART_WaitOnFlagUntilTimeout>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d001      	beq.n	80084d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084d2:	2303      	movs	r3, #3
 80084d4:	e022      	b.n	800851c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f003 0304 	and.w	r3, r3, #4
 80084e0:	2b04      	cmp	r3, #4
 80084e2:	d10e      	bne.n	8008502 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80084e8:	9300      	str	r3, [sp, #0]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2200      	movs	r2, #0
 80084ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 f816 	bl	8008524 <UART_WaitOnFlagUntilTimeout>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d001      	beq.n	8008502 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084fe:	2303      	movs	r3, #3
 8008500:	e00c      	b.n	800851c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2220      	movs	r2, #32
 8008506:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2220      	movs	r2, #32
 800850e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800851a:	2300      	movs	r3, #0
}
 800851c:	4618      	mov	r0, r3
 800851e:	3710      	adds	r7, #16
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	603b      	str	r3, [r7, #0]
 8008530:	4613      	mov	r3, r2
 8008532:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008534:	e062      	b.n	80085fc <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008536:	69bb      	ldr	r3, [r7, #24]
 8008538:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800853c:	d05e      	beq.n	80085fc <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800853e:	f7fa fcb1 	bl	8002ea4 <HAL_GetTick>
 8008542:	4602      	mov	r2, r0
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	1ad3      	subs	r3, r2, r3
 8008548:	69ba      	ldr	r2, [r7, #24]
 800854a:	429a      	cmp	r2, r3
 800854c:	d302      	bcc.n	8008554 <UART_WaitOnFlagUntilTimeout+0x30>
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d11d      	bne.n	8008590 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008562:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	689a      	ldr	r2, [r3, #8]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f022 0201 	bic.w	r2, r2, #1
 8008572:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2220      	movs	r2, #32
 8008578:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2220      	movs	r2, #32
 8008580:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2200      	movs	r2, #0
 8008588:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800858c:	2303      	movs	r3, #3
 800858e:	e045      	b.n	800861c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f003 0304 	and.w	r3, r3, #4
 800859a:	2b00      	cmp	r3, #0
 800859c:	d02e      	beq.n	80085fc <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	69db      	ldr	r3, [r3, #28]
 80085a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085ac:	d126      	bne.n	80085fc <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085b6:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80085c6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	689a      	ldr	r2, [r3, #8]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f022 0201 	bic.w	r2, r2, #1
 80085d6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2220      	movs	r2, #32
 80085dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2220      	movs	r2, #32
 80085e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2220      	movs	r2, #32
 80085ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 80085f8:	2303      	movs	r3, #3
 80085fa:	e00f      	b.n	800861c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	69da      	ldr	r2, [r3, #28]
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	4013      	ands	r3, r2
 8008606:	68ba      	ldr	r2, [r7, #8]
 8008608:	429a      	cmp	r2, r3
 800860a:	bf0c      	ite	eq
 800860c:	2301      	moveq	r3, #1
 800860e:	2300      	movne	r3, #0
 8008610:	b2db      	uxtb	r3, r3
 8008612:	461a      	mov	r2, r3
 8008614:	79fb      	ldrb	r3, [r7, #7]
 8008616:	429a      	cmp	r2, r3
 8008618:	d08d      	beq.n	8008536 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800861a:	2300      	movs	r3, #0
}
 800861c:	4618      	mov	r0, r3
 800861e:	3710      	adds	r7, #16
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008624:	b480      	push	{r7}
 8008626:	b085      	sub	sp, #20
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008632:	2b01      	cmp	r3, #1
 8008634:	d101      	bne.n	800863a <HAL_UARTEx_DisableFifoMode+0x16>
 8008636:	2302      	movs	r3, #2
 8008638:	e027      	b.n	800868a <HAL_UARTEx_DisableFifoMode+0x66>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2201      	movs	r2, #1
 800863e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2224      	movs	r2, #36	; 0x24
 8008646:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f022 0201 	bic.w	r2, r2, #1
 8008660:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008668:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2220      	movs	r2, #32
 800867c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2200      	movs	r2, #0
 8008684:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	3714      	adds	r7, #20
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr

08008696 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b084      	sub	sp, #16
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
 800869e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d101      	bne.n	80086ae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80086aa:	2302      	movs	r3, #2
 80086ac:	e02d      	b.n	800870a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2201      	movs	r2, #1
 80086b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2224      	movs	r2, #36	; 0x24
 80086ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f022 0201 	bic.w	r2, r2, #1
 80086d4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	683a      	ldr	r2, [r7, #0]
 80086e6:	430a      	orrs	r2, r1
 80086e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 f850 	bl	8008790 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	68fa      	ldr	r2, [r7, #12]
 80086f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2220      	movs	r2, #32
 80086fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008708:	2300      	movs	r3, #0
}
 800870a:	4618      	mov	r0, r3
 800870c:	3710      	adds	r7, #16
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008712:	b580      	push	{r7, lr}
 8008714:	b084      	sub	sp, #16
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
 800871a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008722:	2b01      	cmp	r3, #1
 8008724:	d101      	bne.n	800872a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008726:	2302      	movs	r3, #2
 8008728:	e02d      	b.n	8008786 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2201      	movs	r2, #1
 800872e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2224      	movs	r2, #36	; 0x24
 8008736:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f022 0201 	bic.w	r2, r2, #1
 8008750:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	683a      	ldr	r2, [r7, #0]
 8008762:	430a      	orrs	r2, r1
 8008764:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f812 	bl	8008790 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	68fa      	ldr	r2, [r7, #12]
 8008772:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2220      	movs	r2, #32
 8008778:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
	...

08008790 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008790:	b480      	push	{r7}
 8008792:	b089      	sub	sp, #36	; 0x24
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008798:	4a2f      	ldr	r2, [pc, #188]	; (8008858 <UARTEx_SetNbDataToProcess+0xc8>)
 800879a:	f107 0314 	add.w	r3, r7, #20
 800879e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80087a2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80087a6:	4a2d      	ldr	r2, [pc, #180]	; (800885c <UARTEx_SetNbDataToProcess+0xcc>)
 80087a8:	f107 030c 	add.w	r3, r7, #12
 80087ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80087b0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d108      	bne.n	80087ce <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80087cc:	e03d      	b.n	800884a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80087ce:	2308      	movs	r3, #8
 80087d0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80087d2:	2308      	movs	r3, #8
 80087d4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	0e5b      	lsrs	r3, r3, #25
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	f003 0307 	and.w	r3, r3, #7
 80087e4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	0f5b      	lsrs	r3, r3, #29
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	f003 0307 	and.w	r3, r3, #7
 80087f4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80087f6:	7fbb      	ldrb	r3, [r7, #30]
 80087f8:	7f3a      	ldrb	r2, [r7, #28]
 80087fa:	f107 0120 	add.w	r1, r7, #32
 80087fe:	440a      	add	r2, r1
 8008800:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008804:	fb02 f303 	mul.w	r3, r2, r3
 8008808:	7f3a      	ldrb	r2, [r7, #28]
 800880a:	f107 0120 	add.w	r1, r7, #32
 800880e:	440a      	add	r2, r1
 8008810:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008814:	fb93 f3f2 	sdiv	r3, r3, r2
 8008818:	b29a      	uxth	r2, r3
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008820:	7ffb      	ldrb	r3, [r7, #31]
 8008822:	7f7a      	ldrb	r2, [r7, #29]
 8008824:	f107 0120 	add.w	r1, r7, #32
 8008828:	440a      	add	r2, r1
 800882a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800882e:	fb02 f303 	mul.w	r3, r2, r3
 8008832:	7f7a      	ldrb	r2, [r7, #29]
 8008834:	f107 0120 	add.w	r1, r7, #32
 8008838:	440a      	add	r2, r1
 800883a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800883e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008842:	b29a      	uxth	r2, r3
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800884a:	bf00      	nop
 800884c:	3724      	adds	r7, #36	; 0x24
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr
 8008856:	bf00      	nop
 8008858:	0800b540 	.word	0x0800b540
 800885c:	0800b548 	.word	0x0800b548

08008860 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008860:	b480      	push	{r7}
 8008862:	b085      	sub	sp, #20
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008868:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800886c:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008874:	b29a      	uxth	r2, r3
 8008876:	89fb      	ldrh	r3, [r7, #14]
 8008878:	4313      	orrs	r3, r2
 800887a:	b29a      	uxth	r2, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008882:	2300      	movs	r3, #0
}
 8008884:	4618      	mov	r0, r3
 8008886:	3714      	adds	r7, #20
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008890:	b480      	push	{r7}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008898:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800889c:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	b21a      	sxth	r2, r3
 80088a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80088ac:	43db      	mvns	r3, r3
 80088ae:	b21b      	sxth	r3, r3
 80088b0:	4013      	ands	r3, r2
 80088b2:	b21b      	sxth	r3, r3
 80088b4:	b29a      	uxth	r2, r3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3714      	adds	r7, #20
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr

080088ca <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80088ca:	b084      	sub	sp, #16
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	f107 0014 	add.w	r0, r7, #20
 80088d8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f7ff ffaf 	bl	8008860 <USB_EnableGlobalInt>

  return HAL_OK;
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	3708      	adds	r7, #8
 8008908:	46bd      	mov	sp, r7
 800890a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800890e:	b004      	add	sp, #16
 8008910:	4770      	bx	lr

08008912 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable(void)
{
 8008912:	b580      	push	{r7, lr}
 8008914:	b088      	sub	sp, #32
 8008916:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008918:	2300      	movs	r3, #0
 800891a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800891c:	f107 0308 	add.w	r3, r7, #8
 8008920:	2218      	movs	r2, #24
 8008922:	2100      	movs	r1, #0
 8008924:	4618      	mov	r0, r3
 8008926:	f001 f97f 	bl	8009c28 <Osal_MemSet>
  rq.ogf = 0x3f;
 800892a:	233f      	movs	r3, #63	; 0x3f
 800892c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800892e:	2381      	movs	r3, #129	; 0x81
 8008930:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008932:	1dfb      	adds	r3, r7, #7
 8008934:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008936:	2301      	movs	r3, #1
 8008938:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800893a:	f107 0308 	add.w	r3, r7, #8
 800893e:	2100      	movs	r1, #0
 8008940:	4618      	mov	r0, r3
 8008942:	f001 f835 	bl	80099b0 <hci_send_req>
 8008946:	4603      	mov	r3, r0
 8008948:	2b00      	cmp	r3, #0
 800894a:	da01      	bge.n	8008950 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800894c:	23ff      	movs	r3, #255	; 0xff
 800894e:	e005      	b.n	800895c <aci_gap_set_non_discoverable+0x4a>
  if (status) 
 8008950:	79fb      	ldrb	r3, [r7, #7]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d001      	beq.n	800895a <aci_gap_set_non_discoverable+0x48>
  {
    return status;
 8008956:	79fb      	ldrb	r3, [r7, #7]
 8008958:	e000      	b.n	800895c <aci_gap_set_non_discoverable+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3720      	adds	r7, #32
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 8008964:	b5b0      	push	{r4, r5, r7, lr}
 8008966:	b0ce      	sub	sp, #312	; 0x138
 8008968:	af00      	add	r7, sp, #0
 800896a:	4605      	mov	r5, r0
 800896c:	460c      	mov	r4, r1
 800896e:	4610      	mov	r0, r2
 8008970:	4619      	mov	r1, r3
 8008972:	1dfb      	adds	r3, r7, #7
 8008974:	462a      	mov	r2, r5
 8008976:	701a      	strb	r2, [r3, #0]
 8008978:	1d3b      	adds	r3, r7, #4
 800897a:	4622      	mov	r2, r4
 800897c:	801a      	strh	r2, [r3, #0]
 800897e:	1cbb      	adds	r3, r7, #2
 8008980:	4602      	mov	r2, r0
 8008982:	801a      	strh	r2, [r3, #0]
 8008984:	1dbb      	adds	r3, r7, #6
 8008986:	460a      	mov	r2, r1
 8008988:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800898a:	f107 0310 	add.w	r3, r7, #16
 800898e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8008992:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8008996:	3308      	adds	r3, #8
 8008998:	f107 0210 	add.w	r2, r7, #16
 800899c:	4413      	add	r3, r2
 800899e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80089a2:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80089a6:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80089aa:	4413      	add	r3, r2
 80089ac:	3309      	adds	r3, #9
 80089ae:	f107 0210 	add.w	r2, r7, #16
 80089b2:	4413      	add	r3, r2
 80089b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80089b8:	f107 030f 	add.w	r3, r7, #15
 80089bc:	2200      	movs	r2, #0
 80089be:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80089c0:	2300      	movs	r3, #0
 80089c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 80089c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80089ca:	1dfa      	adds	r2, r7, #7
 80089cc:	7812      	ldrb	r2, [r2, #0]
 80089ce:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80089d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089d4:	3301      	adds	r3, #1
 80089d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 80089da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80089de:	1d3a      	adds	r2, r7, #4
 80089e0:	8812      	ldrh	r2, [r2, #0]
 80089e2:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80089e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089ea:	3302      	adds	r3, #2
 80089ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 80089f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80089f4:	1cba      	adds	r2, r7, #2
 80089f6:	8812      	ldrh	r2, [r2, #0]
 80089f8:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80089fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a00:	3302      	adds	r3, #2
 8008a02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8008a06:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008a0a:	1dba      	adds	r2, r7, #6
 8008a0c:	7812      	ldrb	r2, [r2, #0]
 8008a0e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008a10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a14:	3301      	adds	r3, #1
 8008a16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8008a1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008a1e:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8008a22:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008a24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a28:	3301      	adds	r3, #1
 8008a2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 8008a2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008a32:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008a36:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8008a38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length);
 8008a42:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008a46:	3308      	adds	r3, #8
 8008a48:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008a4c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8008a50:	4618      	mov	r0, r3
 8008a52:	f001 f8d9 	bl	8009c08 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8008a56:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8008a5a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008a5e:	4413      	add	r3, r2
 8008a60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 8008a64:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008a68:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008a6c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008a6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a72:	3301      	adds	r3, #1
 8008a74:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length);
 8008a78:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008a82:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8008a86:	4618      	mov	r0, r3
 8008a88:	f001 f8be 	bl	8009c08 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8008a8c:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8008a90:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008a94:	4413      	add	r3, r2
 8008a96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 8008a9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a9e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8008aa2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008aa4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008aa8:	3302      	adds	r3, #2
 8008aaa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 8008aae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ab2:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8008ab6:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8008ab8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008abc:	3302      	adds	r3, #2
 8008abe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 8008ac2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ac6:	2218      	movs	r2, #24
 8008ac8:	2100      	movs	r1, #0
 8008aca:	4618      	mov	r0, r3
 8008acc:	f001 f8ac 	bl	8009c28 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008ad0:	233f      	movs	r3, #63	; 0x3f
 8008ad2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8008ad6:	2383      	movs	r3, #131	; 0x83
 8008ad8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008adc:	f107 0310 	add.w	r3, r7, #16
 8008ae0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008ae4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ae8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008aec:	f107 030f 	add.w	r3, r7, #15
 8008af0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008af4:	2301      	movs	r3, #1
 8008af6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008afa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008afe:	2100      	movs	r1, #0
 8008b00:	4618      	mov	r0, r3
 8008b02:	f000 ff55 	bl	80099b0 <hci_send_req>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	da01      	bge.n	8008b10 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8008b0c:	23ff      	movs	r3, #255	; 0xff
 8008b0e:	e009      	b.n	8008b24 <aci_gap_set_discoverable+0x1c0>
  if (status) 
 8008b10:	f107 030f 	add.w	r3, r7, #15
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d003      	beq.n	8008b22 <aci_gap_set_discoverable+0x1be>
  {
    return status;
 8008b1a:	f107 030f 	add.w	r3, r7, #15
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	e000      	b.n	8008b24 <aci_gap_set_discoverable+0x1c0>
  }
  return BLE_STATUS_SUCCESS;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bdb0      	pop	{r4, r5, r7, pc}

08008b2e <aci_gap_set_io_capability>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
 8008b2e:	b580      	push	{r7, lr}
 8008b30:	b0cc      	sub	sp, #304	; 0x130
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	4602      	mov	r2, r0
 8008b36:	1dfb      	adds	r3, r7, #7
 8008b38:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8008b3a:	f107 0310 	add.w	r3, r7, #16
 8008b3e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008b42:	f107 030f 	add.w	r3, r7, #15
 8008b46:	2200      	movs	r2, #0
 8008b48:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = htob(IO_Capability, 1);
 8008b50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b54:	1dfa      	adds	r2, r7, #7
 8008b56:	7812      	ldrb	r2, [r2, #0]
 8008b58:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008b5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b5e:	3301      	adds	r3, #1
 8008b60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8008b64:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b68:	2218      	movs	r2, #24
 8008b6a:	2100      	movs	r1, #0
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f001 f85b 	bl	8009c28 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008b72:	233f      	movs	r3, #63	; 0x3f
 8008b74:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8008b78:	2385      	movs	r3, #133	; 0x85
 8008b7a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008b7e:	f107 0310 	add.w	r3, r7, #16
 8008b82:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008b86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b8a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008b8e:	f107 030f 	add.w	r3, r7, #15
 8008b92:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008b96:	2301      	movs	r3, #1
 8008b98:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008b9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ba0:	2100      	movs	r1, #0
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f000 ff04 	bl	80099b0 <hci_send_req>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	da01      	bge.n	8008bb2 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 8008bae:	23ff      	movs	r3, #255	; 0xff
 8008bb0:	e009      	b.n	8008bc6 <aci_gap_set_io_capability+0x98>
  if (status) 
 8008bb2:	f107 030f 	add.w	r3, r7, #15
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d003      	beq.n	8008bc4 <aci_gap_set_io_capability+0x96>
  {
    return status;
 8008bbc:	f107 030f 	add.w	r3, r7, #15
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	e000      	b.n	8008bc6 <aci_gap_set_io_capability+0x98>
  }
  return BLE_STATUS_SUCCESS;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 8008bd0:	b5b0      	push	{r4, r5, r7, lr}
 8008bd2:	b0cc      	sub	sp, #304	; 0x130
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	4605      	mov	r5, r0
 8008bd8:	460c      	mov	r4, r1
 8008bda:	4610      	mov	r0, r2
 8008bdc:	4619      	mov	r1, r3
 8008bde:	1dfb      	adds	r3, r7, #7
 8008be0:	462a      	mov	r2, r5
 8008be2:	701a      	strb	r2, [r3, #0]
 8008be4:	1dbb      	adds	r3, r7, #6
 8008be6:	4622      	mov	r2, r4
 8008be8:	701a      	strb	r2, [r3, #0]
 8008bea:	1d7b      	adds	r3, r7, #5
 8008bec:	4602      	mov	r2, r0
 8008bee:	701a      	strb	r2, [r3, #0]
 8008bf0:	1d3b      	adds	r3, r7, #4
 8008bf2:	460a      	mov	r2, r1
 8008bf4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8008bf6:	f107 0310 	add.w	r3, r7, #16
 8008bfa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008bfe:	f107 030f 	add.w	r3, r7, #15
 8008c02:	2200      	movs	r2, #0
 8008c04:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008c06:	2300      	movs	r3, #0
 8008c08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 8008c0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c10:	1dfa      	adds	r2, r7, #7
 8008c12:	7812      	ldrb	r2, [r2, #0]
 8008c14:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008c16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 8008c20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c24:	1dba      	adds	r2, r7, #6
 8008c26:	7812      	ldrb	r2, [r2, #0]
 8008c28:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008c2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c2e:	3301      	adds	r3, #1
 8008c30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = htob(SC_Support, 1);
 8008c34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c38:	1d7a      	adds	r2, r7, #5
 8008c3a:	7812      	ldrb	r2, [r2, #0]
 8008c3c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008c3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c42:	3301      	adds	r3, #1
 8008c44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 8008c48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c4c:	1d3a      	adds	r2, r7, #4
 8008c4e:	7812      	ldrb	r2, [r2, #0]
 8008c50:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8008c52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c56:	3301      	adds	r3, #1
 8008c58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 8008c5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c60:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8008c64:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008c66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 8008c70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c74:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8008c78:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008c7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c7e:	3301      	adds	r3, #1
 8008c80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 8008c84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c88:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8008c8c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008c8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c92:	3301      	adds	r3, #1
 8008c94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 8008c98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c9c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8008ca0:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8008ca4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ca8:	3304      	adds	r3, #4
 8008caa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 8008cae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cb2:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8008cb6:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8008cb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8008cc2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008cc6:	2218      	movs	r2, #24
 8008cc8:	2100      	movs	r1, #0
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f000 ffac 	bl	8009c28 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008cd0:	233f      	movs	r3, #63	; 0x3f
 8008cd2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8008cd6:	2386      	movs	r3, #134	; 0x86
 8008cd8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008cdc:	f107 0310 	add.w	r3, r7, #16
 8008ce0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008ce4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ce8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008cec:	f107 030f 	add.w	r3, r7, #15
 8008cf0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008cfa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008cfe:	2100      	movs	r1, #0
 8008d00:	4618      	mov	r0, r3
 8008d02:	f000 fe55 	bl	80099b0 <hci_send_req>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	da01      	bge.n	8008d10 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 8008d0c:	23ff      	movs	r3, #255	; 0xff
 8008d0e:	e009      	b.n	8008d24 <aci_gap_set_authentication_requirement+0x154>
  if (status) 
 8008d10:	f107 030f 	add.w	r3, r7, #15
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d003      	beq.n	8008d22 <aci_gap_set_authentication_requirement+0x152>
  {
    return status;
 8008d1a:	f107 030f 	add.w	r3, r7, #15
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	e000      	b.n	8008d24 <aci_gap_set_authentication_requirement+0x154>
  }
  return BLE_STATUS_SUCCESS;
 8008d22:	2300      	movs	r3, #0
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bdb0      	pop	{r4, r5, r7, pc}

08008d2e <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 8008d2e:	b590      	push	{r4, r7, lr}
 8008d30:	b0cd      	sub	sp, #308	; 0x134
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	4604      	mov	r4, r0
 8008d36:	4608      	mov	r0, r1
 8008d38:	4611      	mov	r1, r2
 8008d3a:	463a      	mov	r2, r7
 8008d3c:	6013      	str	r3, [r2, #0]
 8008d3e:	1dfb      	adds	r3, r7, #7
 8008d40:	4622      	mov	r2, r4
 8008d42:	701a      	strb	r2, [r3, #0]
 8008d44:	1dbb      	adds	r3, r7, #6
 8008d46:	4602      	mov	r2, r0
 8008d48:	701a      	strb	r2, [r3, #0]
 8008d4a:	1d7b      	adds	r3, r7, #5
 8008d4c:	460a      	mov	r2, r1
 8008d4e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8008d50:	f107 0310 	add.w	r3, r7, #16
 8008d54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 8008d58:	f107 0308 	add.w	r3, r7, #8
 8008d5c:	2207      	movs	r2, #7
 8008d5e:	2100      	movs	r1, #0
 8008d60:	4618      	mov	r0, r3
 8008d62:	f000 ff61 	bl	8009c28 <Osal_MemSet>
  int index_input = 0;
 8008d66:	2300      	movs	r3, #0
 8008d68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = htob(Role, 1);
 8008d6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d70:	1dfa      	adds	r2, r7, #7
 8008d72:	7812      	ldrb	r2, [r2, #0]
 8008d74:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008d76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 8008d80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d84:	1dba      	adds	r2, r7, #6
 8008d86:	7812      	ldrb	r2, [r2, #0]
 8008d88:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008d8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d8e:	3301      	adds	r3, #1
 8008d90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 8008d94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d98:	1d7a      	adds	r2, r7, #5
 8008d9a:	7812      	ldrb	r2, [r2, #0]
 8008d9c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008d9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008da2:	3301      	adds	r3, #1
 8008da4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8008da8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008dac:	2218      	movs	r2, #24
 8008dae:	2100      	movs	r1, #0
 8008db0:	4618      	mov	r0, r3
 8008db2:	f000 ff39 	bl	8009c28 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008db6:	233f      	movs	r3, #63	; 0x3f
 8008db8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8008dbc:	238a      	movs	r3, #138	; 0x8a
 8008dbe:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008dc2:	f107 0310 	add.w	r3, r7, #16
 8008dc6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008dca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008dce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008dd2:	f107 0308 	add.w	r3, r7, #8
 8008dd6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008dda:	2307      	movs	r3, #7
 8008ddc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008de0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008de4:	2100      	movs	r1, #0
 8008de6:	4618      	mov	r0, r3
 8008de8:	f000 fde2 	bl	80099b0 <hci_send_req>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	da01      	bge.n	8008df6 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8008df2:	23ff      	movs	r3, #255	; 0xff
 8008df4:	e021      	b.n	8008e3a <aci_gap_init+0x10c>
  if (resp.Status) 
 8008df6:	f107 0308 	add.w	r3, r7, #8
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d003      	beq.n	8008e08 <aci_gap_init+0xda>
  {
    return resp.Status;
 8008e00:	f107 0308 	add.w	r3, r7, #8
 8008e04:	781b      	ldrb	r3, [r3, #0]
 8008e06:	e018      	b.n	8008e3a <aci_gap_init+0x10c>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8008e08:	f107 0308 	add.w	r3, r7, #8
 8008e0c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008e10:	b29a      	uxth	r2, r3
 8008e12:	463b      	mov	r3, r7
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8008e18:	f107 0308 	add.w	r3, r7, #8
 8008e1c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008e20:	b29a      	uxth	r2, r3
 8008e22:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008e26:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8008e28:	f107 0308 	add.w	r3, r7, #8
 8008e2c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8008e30:	b29a      	uxth	r2, r3
 8008e32:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008e36:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008e38:	2300      	movs	r3, #0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd90      	pop	{r4, r7, pc}

08008e44 <aci_gap_update_adv_data>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_update_adv_data(uint8_t AdvDataLen,
                                   uint8_t AdvData[])
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b0cc      	sub	sp, #304	; 0x130
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	463b      	mov	r3, r7
 8008e4e:	6019      	str	r1, [r3, #0]
 8008e50:	1dfb      	adds	r3, r7, #7
 8008e52:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8008e54:	f107 0310 	add.w	r3, r7, #16
 8008e58:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008e5c:	f107 030f 	add.w	r3, r7, #15
 8008e60:	2200      	movs	r2, #0
 8008e62:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008e64:	2300      	movs	r3, #0
 8008e66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 8008e6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e6e:	1dfa      	adds	r2, r7, #7
 8008e70:	7812      	ldrb	r2, [r2, #0]
 8008e72:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008e74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e78:	3301      	adds	r3, #1
 8008e7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen);
 8008e7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e82:	1c58      	adds	r0, r3, #1
 8008e84:	1dfb      	adds	r3, r7, #7
 8008e86:	781a      	ldrb	r2, [r3, #0]
 8008e88:	463b      	mov	r3, r7
 8008e8a:	6819      	ldr	r1, [r3, #0]
 8008e8c:	f000 febc 	bl	8009c08 <Osal_MemCpy>
  index_input += AdvDataLen;
 8008e90:	1dfb      	adds	r3, r7, #7
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008e98:	4413      	add	r3, r2
 8008e9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8008e9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ea2:	2218      	movs	r2, #24
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f000 febe 	bl	8009c28 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008eac:	233f      	movs	r3, #63	; 0x3f
 8008eae:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8008eb2:	238e      	movs	r3, #142	; 0x8e
 8008eb4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008eb8:	f107 0310 	add.w	r3, r7, #16
 8008ebc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008ec0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ec4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008ec8:	f107 030f 	add.w	r3, r7, #15
 8008ecc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008ed6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008eda:	2100      	movs	r1, #0
 8008edc:	4618      	mov	r0, r3
 8008ede:	f000 fd67 	bl	80099b0 <hci_send_req>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	da01      	bge.n	8008eec <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 8008ee8:	23ff      	movs	r3, #255	; 0xff
 8008eea:	e009      	b.n	8008f00 <aci_gap_update_adv_data+0xbc>
  if (status) 
 8008eec:	f107 030f 	add.w	r3, r7, #15
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d003      	beq.n	8008efe <aci_gap_update_adv_data+0xba>
  {
    return status;
 8008ef6:	f107 030f 	add.w	r3, r7, #15
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	e000      	b.n	8008f00 <aci_gap_update_adv_data+0xbc>
  }
  return BLE_STATUS_SUCCESS;
 8008efe:	2300      	movs	r3, #0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}

08008f0a <aci_gap_configure_whitelist>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_configure_whitelist(void)
{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b088      	sub	sp, #32
 8008f0e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008f10:	2300      	movs	r3, #0
 8008f12:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8008f14:	f107 0308 	add.w	r3, r7, #8
 8008f18:	2218      	movs	r2, #24
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f000 fe83 	bl	8009c28 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008f22:	233f      	movs	r3, #63	; 0x3f
 8008f24:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8008f26:	2392      	movs	r3, #146	; 0x92
 8008f28:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008f2a:	1dfb      	adds	r3, r7, #7
 8008f2c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8008f32:	f107 0308 	add.w	r3, r7, #8
 8008f36:	2100      	movs	r1, #0
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f000 fd39 	bl	80099b0 <hci_send_req>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	da01      	bge.n	8008f48 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008f44:	23ff      	movs	r3, #255	; 0xff
 8008f46:	e005      	b.n	8008f54 <aci_gap_configure_whitelist+0x4a>
  if (status) 
 8008f48:	79fb      	ldrb	r3, [r7, #7]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d001      	beq.n	8008f52 <aci_gap_configure_whitelist+0x48>
  {
    return status;
 8008f4e:	79fb      	ldrb	r3, [r7, #7]
 8008f50:	e000      	b.n	8008f54 <aci_gap_configure_whitelist+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8008f52:	2300      	movs	r3, #0
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3720      	adds	r7, #32
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init(void)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b088      	sub	sp, #32
 8008f60:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008f62:	2300      	movs	r3, #0
 8008f64:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 8008f66:	f107 0308 	add.w	r3, r7, #8
 8008f6a:	2218      	movs	r2, #24
 8008f6c:	2100      	movs	r1, #0
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f000 fe5a 	bl	8009c28 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008f74:	233f      	movs	r3, #63	; 0x3f
 8008f76:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8008f78:	f240 1301 	movw	r3, #257	; 0x101
 8008f7c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008f7e:	1dfb      	adds	r3, r7, #7
 8008f80:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008f82:	2301      	movs	r3, #1
 8008f84:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8008f86:	f107 0308 	add.w	r3, r7, #8
 8008f8a:	2100      	movs	r1, #0
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f000 fd0f 	bl	80099b0 <hci_send_req>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	da01      	bge.n	8008f9c <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8008f98:	23ff      	movs	r3, #255	; 0xff
 8008f9a:	e005      	b.n	8008fa8 <aci_gatt_init+0x4c>
  if (status) 
 8008f9c:	79fb      	ldrb	r3, [r7, #7]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d001      	beq.n	8008fa6 <aci_gatt_init+0x4a>
  {
    return status;
 8008fa2:	79fb      	ldrb	r3, [r7, #7]
 8008fa4:	e000      	b.n	8008fa8 <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 8008fa6:	2300      	movs	r3, #0
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3720      	adds	r7, #32
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 8008fb0:	b590      	push	{r4, r7, lr}
 8008fb2:	b0cf      	sub	sp, #316	; 0x13c
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	4604      	mov	r4, r0
 8008fb8:	4638      	mov	r0, r7
 8008fba:	6001      	str	r1, [r0, #0]
 8008fbc:	4610      	mov	r0, r2
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	1dfb      	adds	r3, r7, #7
 8008fc2:	4622      	mov	r2, r4
 8008fc4:	701a      	strb	r2, [r3, #0]
 8008fc6:	1dbb      	adds	r3, r7, #6
 8008fc8:	4602      	mov	r2, r0
 8008fca:	701a      	strb	r2, [r3, #0]
 8008fcc:	1d7b      	adds	r3, r7, #5
 8008fce:	460a      	mov	r2, r1
 8008fd0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8008fd2:	f107 0310 	add.w	r3, r7, #16
 8008fd6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8008fda:	1dfb      	adds	r3, r7, #7
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d007      	beq.n	8008ff2 <aci_gatt_add_service+0x42>
 8008fe2:	1dfb      	adds	r3, r7, #7
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d101      	bne.n	8008fee <aci_gatt_add_service+0x3e>
 8008fea:	2311      	movs	r3, #17
 8008fec:	e002      	b.n	8008ff4 <aci_gatt_add_service+0x44>
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e000      	b.n	8008ff4 <aci_gatt_add_service+0x44>
 8008ff2:	2303      	movs	r3, #3
 8008ff4:	f107 0210 	add.w	r2, r7, #16
 8008ff8:	4413      	add	r3, r2
 8008ffa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 8008ffe:	f107 030c 	add.w	r3, r7, #12
 8009002:	2203      	movs	r2, #3
 8009004:	2100      	movs	r1, #0
 8009006:	4618      	mov	r0, r3
 8009008:	f000 fe0e 	bl	8009c28 <Osal_MemSet>
  int index_input = 0;
 800900c:	2300      	movs	r3, #0
 800900e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8009012:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009016:	1dfa      	adds	r2, r7, #7
 8009018:	7812      	ldrb	r2, [r2, #0]
 800901a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800901c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009020:	3301      	adds	r3, #1
 8009022:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 8009026:	1dfb      	adds	r3, r7, #7
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	2b01      	cmp	r3, #1
 800902c:	d002      	beq.n	8009034 <aci_gatt_add_service+0x84>
 800902e:	2b02      	cmp	r3, #2
 8009030:	d004      	beq.n	800903c <aci_gatt_add_service+0x8c>
 8009032:	e007      	b.n	8009044 <aci_gatt_add_service+0x94>
      case 1: size = 2; break;
 8009034:	2302      	movs	r3, #2
 8009036:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800903a:	e005      	b.n	8009048 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 800903c:	2310      	movs	r3, #16
 800903e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8009042:	e001      	b.n	8009048 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 8009044:	2347      	movs	r3, #71	; 0x47
 8009046:	e05d      	b.n	8009104 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 8009048:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800904c:	1c58      	adds	r0, r3, #1
 800904e:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8009052:	463b      	mov	r3, r7
 8009054:	6819      	ldr	r1, [r3, #0]
 8009056:	f000 fdd7 	bl	8009c08 <Osal_MemCpy>
    index_input += size;
 800905a:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800905e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009062:	4413      	add	r3, r2
 8009064:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = htob(Service_Type, 1);
 8009068:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800906c:	1dba      	adds	r2, r7, #6
 800906e:	7812      	ldrb	r2, [r2, #0]
 8009070:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009072:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009076:	3301      	adds	r3, #1
 8009078:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 800907c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009080:	1d7a      	adds	r2, r7, #5
 8009082:	7812      	ldrb	r2, [r2, #0]
 8009084:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8009086:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800908a:	3301      	adds	r3, #1
 800908c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 8009090:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009094:	2218      	movs	r2, #24
 8009096:	2100      	movs	r1, #0
 8009098:	4618      	mov	r0, r3
 800909a:	f000 fdc5 	bl	8009c28 <Osal_MemSet>
  rq.ogf = 0x3f;
 800909e:	233f      	movs	r3, #63	; 0x3f
 80090a0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 80090a4:	f44f 7381 	mov.w	r3, #258	; 0x102
 80090a8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80090ac:	f107 0310 	add.w	r3, r7, #16
 80090b0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80090b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80090bc:	f107 030c 	add.w	r3, r7, #12
 80090c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80090c4:	2303      	movs	r3, #3
 80090c6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80090ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80090ce:	2100      	movs	r1, #0
 80090d0:	4618      	mov	r0, r3
 80090d2:	f000 fc6d 	bl	80099b0 <hci_send_req>
 80090d6:	4603      	mov	r3, r0
 80090d8:	2b00      	cmp	r3, #0
 80090da:	da01      	bge.n	80090e0 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 80090dc:	23ff      	movs	r3, #255	; 0xff
 80090de:	e011      	b.n	8009104 <aci_gatt_add_service+0x154>
  if (resp.Status) 
 80090e0:	f107 030c 	add.w	r3, r7, #12
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d003      	beq.n	80090f2 <aci_gatt_add_service+0x142>
  {
    return resp.Status;
 80090ea:	f107 030c 	add.w	r3, r7, #12
 80090ee:	781b      	ldrb	r3, [r3, #0]
 80090f0:	e008      	b.n	8009104 <aci_gatt_add_service+0x154>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 80090f2:	f107 030c 	add.w	r3, r7, #12
 80090f6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80090fa:	b29a      	uxth	r2, r3
 80090fc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009100:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009102:	2300      	movs	r3, #0
}
 8009104:	4618      	mov	r0, r3
 8009106:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800910a:	46bd      	mov	sp, r7
 800910c:	bd90      	pop	{r4, r7, pc}

0800910e <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 800910e:	b590      	push	{r4, r7, lr}
 8009110:	b0d1      	sub	sp, #324	; 0x144
 8009112:	af00      	add	r7, sp, #0
 8009114:	4604      	mov	r4, r0
 8009116:	4608      	mov	r0, r1
 8009118:	f107 0108 	add.w	r1, r7, #8
 800911c:	600a      	str	r2, [r1, #0]
 800911e:	4619      	mov	r1, r3
 8009120:	f107 030e 	add.w	r3, r7, #14
 8009124:	4622      	mov	r2, r4
 8009126:	801a      	strh	r2, [r3, #0]
 8009128:	f107 030d 	add.w	r3, r7, #13
 800912c:	4602      	mov	r2, r0
 800912e:	701a      	strb	r2, [r3, #0]
 8009130:	1dbb      	adds	r3, r7, #6
 8009132:	460a      	mov	r2, r1
 8009134:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8009136:	f107 0318 	add.w	r3, r7, #24
 800913a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800913e:	f107 030d 	add.w	r3, r7, #13
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	2b01      	cmp	r3, #1
 8009146:	d008      	beq.n	800915a <aci_gatt_add_char+0x4c>
 8009148:	f107 030d 	add.w	r3, r7, #13
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	2b02      	cmp	r3, #2
 8009150:	d101      	bne.n	8009156 <aci_gatt_add_char+0x48>
 8009152:	2313      	movs	r3, #19
 8009154:	e002      	b.n	800915c <aci_gatt_add_char+0x4e>
 8009156:	2303      	movs	r3, #3
 8009158:	e000      	b.n	800915c <aci_gatt_add_char+0x4e>
 800915a:	2305      	movs	r3, #5
 800915c:	f107 0218 	add.w	r2, r7, #24
 8009160:	4413      	add	r3, r2
 8009162:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 8009166:	f107 0314 	add.w	r3, r7, #20
 800916a:	2203      	movs	r2, #3
 800916c:	2100      	movs	r1, #0
 800916e:	4618      	mov	r0, r3
 8009170:	f000 fd5a 	bl	8009c28 <Osal_MemSet>
  int index_input = 0;
 8009174:	2300      	movs	r3, #0
 8009176:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = htob(Service_Handle, 2);
 800917a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800917e:	f107 020e 	add.w	r2, r7, #14
 8009182:	8812      	ldrh	r2, [r2, #0]
 8009184:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009186:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800918a:	3302      	adds	r3, #2
 800918c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 8009190:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009194:	f107 020d 	add.w	r2, r7, #13
 8009198:	7812      	ldrb	r2, [r2, #0]
 800919a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800919c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80091a0:	3301      	adds	r3, #1
 80091a2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 80091a6:	f107 030d 	add.w	r3, r7, #13
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d002      	beq.n	80091b6 <aci_gatt_add_char+0xa8>
 80091b0:	2b02      	cmp	r3, #2
 80091b2:	d004      	beq.n	80091be <aci_gatt_add_char+0xb0>
 80091b4:	e007      	b.n	80091c6 <aci_gatt_add_char+0xb8>
      case 1: size = 2; break;
 80091b6:	2302      	movs	r3, #2
 80091b8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80091bc:	e005      	b.n	80091ca <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 80091be:	2310      	movs	r3, #16
 80091c0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80091c4:	e001      	b.n	80091ca <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 80091c6:	2347      	movs	r3, #71	; 0x47
 80091c8:	e086      	b.n	80092d8 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 80091ca:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80091ce:	1cd8      	adds	r0, r3, #3
 80091d0:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80091d4:	f107 0308 	add.w	r3, r7, #8
 80091d8:	6819      	ldr	r1, [r3, #0]
 80091da:	f000 fd15 	bl	8009c08 <Osal_MemCpy>
    index_input += size;
 80091de:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80091e2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80091e6:	4413      	add	r3, r2
 80091e8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 80091ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80091f0:	1dba      	adds	r2, r7, #6
 80091f2:	8812      	ldrh	r2, [r2, #0]
 80091f4:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80091f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80091fa:	3302      	adds	r3, #2
 80091fc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 8009200:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009204:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8009208:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800920a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800920e:	3301      	adds	r3, #1
 8009210:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 8009214:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009218:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800921c:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800921e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009222:	3301      	adds	r3, #1
 8009224:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 8009228:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800922c:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8009230:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8009232:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009236:	3301      	adds	r3, #1
 8009238:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 800923c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009240:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8009244:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8009246:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800924a:	3301      	adds	r3, #1
 800924c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 8009250:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009254:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8009258:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800925a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800925e:	3301      	adds	r3, #1
 8009260:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 8009264:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009268:	2218      	movs	r2, #24
 800926a:	2100      	movs	r1, #0
 800926c:	4618      	mov	r0, r3
 800926e:	f000 fcdb 	bl	8009c28 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009272:	233f      	movs	r3, #63	; 0x3f
 8009274:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8009278:	f44f 7382 	mov.w	r3, #260	; 0x104
 800927c:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8009280:	f107 0318 	add.w	r3, r7, #24
 8009284:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8009288:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800928c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8009290:	f107 0314 	add.w	r3, r7, #20
 8009294:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8009298:	2303      	movs	r3, #3
 800929a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800929e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80092a2:	2100      	movs	r1, #0
 80092a4:	4618      	mov	r0, r3
 80092a6:	f000 fb83 	bl	80099b0 <hci_send_req>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	da01      	bge.n	80092b4 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 80092b0:	23ff      	movs	r3, #255	; 0xff
 80092b2:	e011      	b.n	80092d8 <aci_gatt_add_char+0x1ca>
  if (resp.Status) 
 80092b4:	f107 0314 	add.w	r3, r7, #20
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d003      	beq.n	80092c6 <aci_gatt_add_char+0x1b8>
  {
    return resp.Status;
 80092be:	f107 0314 	add.w	r3, r7, #20
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	e008      	b.n	80092d8 <aci_gatt_add_char+0x1ca>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 80092c6:	f107 0314 	add.w	r3, r7, #20
 80092ca:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80092ce:	b29a      	uxth	r2, r3
 80092d0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80092d4:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80092d6:	2300      	movs	r3, #0
}
 80092d8:	4618      	mov	r0, r3
 80092da:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd90      	pop	{r4, r7, pc}

080092e2 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 80092e2:	b5b0      	push	{r4, r5, r7, lr}
 80092e4:	b0cc      	sub	sp, #304	; 0x130
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	4605      	mov	r5, r0
 80092ea:	460c      	mov	r4, r1
 80092ec:	4610      	mov	r0, r2
 80092ee:	4619      	mov	r1, r3
 80092f0:	1dbb      	adds	r3, r7, #6
 80092f2:	462a      	mov	r2, r5
 80092f4:	801a      	strh	r2, [r3, #0]
 80092f6:	1d3b      	adds	r3, r7, #4
 80092f8:	4622      	mov	r2, r4
 80092fa:	801a      	strh	r2, [r3, #0]
 80092fc:	1cfb      	adds	r3, r7, #3
 80092fe:	4602      	mov	r2, r0
 8009300:	701a      	strb	r2, [r3, #0]
 8009302:	1cbb      	adds	r3, r7, #2
 8009304:	460a      	mov	r2, r1
 8009306:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8009308:	f107 0310 	add.w	r3, r7, #16
 800930c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009310:	f107 030f 	add.w	r3, r7, #15
 8009314:	2200      	movs	r2, #0
 8009316:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009318:	2300      	movs	r3, #0
 800931a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = htob(Service_Handle, 2);
 800931e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009322:	1dba      	adds	r2, r7, #6
 8009324:	8812      	ldrh	r2, [r2, #0]
 8009326:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009328:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800932c:	3302      	adds	r3, #2
 800932e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = htob(Char_Handle, 2);
 8009332:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009336:	1d3a      	adds	r2, r7, #4
 8009338:	8812      	ldrh	r2, [r2, #0]
 800933a:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800933c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009340:	3302      	adds	r3, #2
 8009342:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = htob(Val_Offset, 1);
 8009346:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800934a:	1cfa      	adds	r2, r7, #3
 800934c:	7812      	ldrb	r2, [r2, #0]
 800934e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009350:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009354:	3301      	adds	r3, #1
 8009356:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 800935a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800935e:	1cba      	adds	r2, r7, #2
 8009360:	7812      	ldrb	r2, [r2, #0]
 8009362:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009364:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009368:	3301      	adds	r3, #1
 800936a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 800936e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009372:	1d98      	adds	r0, r3, #6
 8009374:	1cbb      	adds	r3, r7, #2
 8009376:	781b      	ldrb	r3, [r3, #0]
 8009378:	461a      	mov	r2, r3
 800937a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800937e:	f000 fc43 	bl	8009c08 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8009382:	1cbb      	adds	r3, r7, #2
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800938a:	4413      	add	r3, r2
 800938c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8009390:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009394:	2218      	movs	r2, #24
 8009396:	2100      	movs	r1, #0
 8009398:	4618      	mov	r0, r3
 800939a:	f000 fc45 	bl	8009c28 <Osal_MemSet>
  rq.ogf = 0x3f;
 800939e:	233f      	movs	r3, #63	; 0x3f
 80093a0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 80093a4:	f44f 7383 	mov.w	r3, #262	; 0x106
 80093a8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80093ac:	f107 0310 	add.w	r3, r7, #16
 80093b0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80093b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80093bc:	f107 030f 	add.w	r3, r7, #15
 80093c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80093c4:	2301      	movs	r3, #1
 80093c6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80093ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80093ce:	2100      	movs	r1, #0
 80093d0:	4618      	mov	r0, r3
 80093d2:	f000 faed 	bl	80099b0 <hci_send_req>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	da01      	bge.n	80093e0 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 80093dc:	23ff      	movs	r3, #255	; 0xff
 80093de:	e009      	b.n	80093f4 <aci_gatt_update_char_value+0x112>
  if (status) 
 80093e0:	f107 030f 	add.w	r3, r7, #15
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d003      	beq.n	80093f2 <aci_gatt_update_char_value+0x110>
  {
    return status;
 80093ea:	f107 030f 	add.w	r3, r7, #15
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	e000      	b.n	80093f4 <aci_gatt_update_char_value+0x112>
  }
  return BLE_STATUS_SUCCESS;
 80093f2:	2300      	movs	r3, #0
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bdb0      	pop	{r4, r5, r7, pc}

080093fe <aci_gatt_exchange_config>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gatt_exchange_config(uint16_t Connection_Handle)
{
 80093fe:	b580      	push	{r7, lr}
 8009400:	b0cc      	sub	sp, #304	; 0x130
 8009402:	af00      	add	r7, sp, #0
 8009404:	4602      	mov	r2, r0
 8009406:	1dbb      	adds	r3, r7, #6
 8009408:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_exchange_config_cp0 *cp0 = (aci_gatt_exchange_config_cp0*)(cmd_buffer);
 800940a:	f107 0310 	add.w	r3, r7, #16
 800940e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009412:	f107 030f 	add.w	r3, r7, #15
 8009416:	2200      	movs	r2, #0
 8009418:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800941a:	2300      	movs	r3, #0
 800941c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 8009420:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009424:	1dba      	adds	r2, r7, #6
 8009426:	8812      	ldrh	r2, [r2, #0]
 8009428:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800942a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800942e:	3302      	adds	r3, #2
 8009430:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8009434:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009438:	2218      	movs	r2, #24
 800943a:	2100      	movs	r1, #0
 800943c:	4618      	mov	r0, r3
 800943e:	f000 fbf3 	bl	8009c28 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009442:	233f      	movs	r3, #63	; 0x3f
 8009444:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x10b;
 8009448:	f240 130b 	movw	r3, #267	; 0x10b
 800944c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8009450:	230f      	movs	r3, #15
 8009452:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8009456:	f107 0310 	add.w	r3, r7, #16
 800945a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800945e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009462:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009466:	f107 030f 	add.w	r3, r7, #15
 800946a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800946e:	2301      	movs	r3, #1
 8009470:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8009474:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009478:	2100      	movs	r1, #0
 800947a:	4618      	mov	r0, r3
 800947c:	f000 fa98 	bl	80099b0 <hci_send_req>
 8009480:	4603      	mov	r3, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	da01      	bge.n	800948a <aci_gatt_exchange_config+0x8c>
    return BLE_STATUS_TIMEOUT;
 8009486:	23ff      	movs	r3, #255	; 0xff
 8009488:	e009      	b.n	800949e <aci_gatt_exchange_config+0xa0>
  if (status) 
 800948a:	f107 030f 	add.w	r3, r7, #15
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d003      	beq.n	800949c <aci_gatt_exchange_config+0x9e>
  {
    return status;
 8009494:	f107 030f 	add.w	r3, r7, #15
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	e000      	b.n	800949e <aci_gatt_exchange_config+0xa0>
  }
  return BLE_STATUS_SUCCESS;
 800949c:	2300      	movs	r3, #0
}
 800949e:	4618      	mov	r0, r3
 80094a0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}

080094a8 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b0cc      	sub	sp, #304	; 0x130
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	463b      	mov	r3, r7
 80094b0:	601a      	str	r2, [r3, #0]
 80094b2:	1dfb      	adds	r3, r7, #7
 80094b4:	4602      	mov	r2, r0
 80094b6:	701a      	strb	r2, [r3, #0]
 80094b8:	1dbb      	adds	r3, r7, #6
 80094ba:	460a      	mov	r2, r1
 80094bc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80094be:	f107 0310 	add.w	r3, r7, #16
 80094c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80094c6:	f107 030f 	add.w	r3, r7, #15
 80094ca:	2200      	movs	r2, #0
 80094cc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80094ce:	2300      	movs	r3, #0
 80094d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = htob(Offset, 1);
 80094d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094d8:	1dfa      	adds	r2, r7, #7
 80094da:	7812      	ldrb	r2, [r2, #0]
 80094dc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80094de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094e2:	3301      	adds	r3, #1
 80094e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = htob(Length, 1);
 80094e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094ec:	1dba      	adds	r2, r7, #6
 80094ee:	7812      	ldrb	r2, [r2, #0]
 80094f0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80094f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094f6:	3301      	adds	r3, #1
 80094f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->Value, (const void *) Value, Length);
 80094fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009500:	1c98      	adds	r0, r3, #2
 8009502:	1dbb      	adds	r3, r7, #6
 8009504:	781a      	ldrb	r2, [r3, #0]
 8009506:	463b      	mov	r3, r7
 8009508:	6819      	ldr	r1, [r3, #0]
 800950a:	f000 fb7d 	bl	8009c08 <Osal_MemCpy>
  index_input += Length;
 800950e:	1dbb      	adds	r3, r7, #6
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009516:	4413      	add	r3, r2
 8009518:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800951c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009520:	2218      	movs	r2, #24
 8009522:	2100      	movs	r1, #0
 8009524:	4618      	mov	r0, r3
 8009526:	f000 fb7f 	bl	8009c28 <Osal_MemSet>
  rq.ogf = 0x3f;
 800952a:	233f      	movs	r3, #63	; 0x3f
 800952c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8009530:	230c      	movs	r3, #12
 8009532:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009536:	f107 0310 	add.w	r3, r7, #16
 800953a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800953e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009542:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009546:	f107 030f 	add.w	r3, r7, #15
 800954a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800954e:	2301      	movs	r3, #1
 8009550:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8009554:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009558:	2100      	movs	r1, #0
 800955a:	4618      	mov	r0, r3
 800955c:	f000 fa28 	bl	80099b0 <hci_send_req>
 8009560:	4603      	mov	r3, r0
 8009562:	2b00      	cmp	r3, #0
 8009564:	da01      	bge.n	800956a <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8009566:	23ff      	movs	r3, #255	; 0xff
 8009568:	e009      	b.n	800957e <aci_hal_write_config_data+0xd6>
  if (status) 
 800956a:	f107 030f 	add.w	r3, r7, #15
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d003      	beq.n	800957c <aci_hal_write_config_data+0xd4>
  {
    return status;
 8009574:	f107 030f 	add.w	r3, r7, #15
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	e000      	b.n	800957e <aci_hal_write_config_data+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 800957c:	2300      	movs	r3, #0
}
 800957e:	4618      	mov	r0, r3
 8009580:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b0cc      	sub	sp, #304	; 0x130
 800958c:	af00      	add	r7, sp, #0
 800958e:	4602      	mov	r2, r0
 8009590:	1dfb      	adds	r3, r7, #7
 8009592:	701a      	strb	r2, [r3, #0]
 8009594:	1dbb      	adds	r3, r7, #6
 8009596:	460a      	mov	r2, r1
 8009598:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800959a:	f107 0310 	add.w	r3, r7, #16
 800959e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80095a2:	f107 030f 	add.w	r3, r7, #15
 80095a6:	2200      	movs	r2, #0
 80095a8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80095aa:	2300      	movs	r3, #0
 80095ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = htob(En_High_Power, 1);
 80095b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095b4:	1dfa      	adds	r2, r7, #7
 80095b6:	7812      	ldrb	r2, [r2, #0]
 80095b8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80095ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095be:	3301      	adds	r3, #1
 80095c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = htob(PA_Level, 1);
 80095c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095c8:	1dba      	adds	r2, r7, #6
 80095ca:	7812      	ldrb	r2, [r2, #0]
 80095cc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80095ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095d2:	3301      	adds	r3, #1
 80095d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 80095d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80095dc:	2218      	movs	r2, #24
 80095de:	2100      	movs	r1, #0
 80095e0:	4618      	mov	r0, r3
 80095e2:	f000 fb21 	bl	8009c28 <Osal_MemSet>
  rq.ogf = 0x3f;
 80095e6:	233f      	movs	r3, #63	; 0x3f
 80095e8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 80095ec:	230f      	movs	r3, #15
 80095ee:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80095f2:	f107 0310 	add.w	r3, r7, #16
 80095f6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80095fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009602:	f107 030f 	add.w	r3, r7, #15
 8009606:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800960a:	2301      	movs	r3, #1
 800960c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8009610:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009614:	2100      	movs	r1, #0
 8009616:	4618      	mov	r0, r3
 8009618:	f000 f9ca 	bl	80099b0 <hci_send_req>
 800961c:	4603      	mov	r3, r0
 800961e:	2b00      	cmp	r3, #0
 8009620:	da01      	bge.n	8009626 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 8009622:	23ff      	movs	r3, #255	; 0xff
 8009624:	e009      	b.n	800963a <aci_hal_set_tx_power_level+0xb2>
  if (status) 
 8009626:	f107 030f 	add.w	r3, r7, #15
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d003      	beq.n	8009638 <aci_hal_set_tx_power_level+0xb0>
  {
    return status;
 8009630:	f107 030f 	add.w	r3, r7, #15
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	e000      	b.n	800963a <aci_hal_set_tx_power_level+0xb2>
  }
  return BLE_STATUS_SUCCESS;
 8009638:	2300      	movs	r3, #0
}
 800963a:	4618      	mov	r0, r3
 800963c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy((void *) Link_Connection_Handle, (const void *) resp.Link_Connection_Handle, 16);
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask(uint16_t Radio_Activity_Mask)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b0cc      	sub	sp, #304	; 0x130
 8009648:	af00      	add	r7, sp, #0
 800964a:	4602      	mov	r2, r0
 800964c:	1dbb      	adds	r3, r7, #6
 800964e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8009650:	f107 0310 	add.w	r3, r7, #16
 8009654:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009658:	f107 030f 	add.w	r3, r7, #15
 800965c:	2200      	movs	r2, #0
 800965e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009660:	2300      	movs	r3, #0
 8009662:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = htob(Radio_Activity_Mask, 2);
 8009666:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800966a:	1dba      	adds	r2, r7, #6
 800966c:	8812      	ldrh	r2, [r2, #0]
 800966e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009670:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009674:	3302      	adds	r3, #2
 8009676:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800967a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800967e:	2218      	movs	r2, #24
 8009680:	2100      	movs	r1, #0
 8009682:	4618      	mov	r0, r3
 8009684:	f000 fad0 	bl	8009c28 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009688:	233f      	movs	r3, #63	; 0x3f
 800968a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800968e:	2318      	movs	r3, #24
 8009690:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009694:	f107 0310 	add.w	r3, r7, #16
 8009698:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800969c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80096a4:	f107 030f 	add.w	r3, r7, #15
 80096a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80096ac:	2301      	movs	r3, #1
 80096ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80096b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80096b6:	2100      	movs	r1, #0
 80096b8:	4618      	mov	r0, r3
 80096ba:	f000 f979 	bl	80099b0 <hci_send_req>
 80096be:	4603      	mov	r3, r0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	da01      	bge.n	80096c8 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 80096c4:	23ff      	movs	r3, #255	; 0xff
 80096c6:	e009      	b.n	80096dc <aci_hal_set_radio_activity_mask+0x98>
  if (status) 
 80096c8:	f107 030f 	add.w	r3, r7, #15
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d003      	beq.n	80096da <aci_hal_set_radio_activity_mask+0x96>
  {
    return status;
 80096d2:	f107 030f 	add.w	r3, r7, #15
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	e000      	b.n	80096dc <aci_hal_set_radio_activity_mask+0x98>
  }
  return BLE_STATUS_SUCCESS;
 80096da:	2300      	movs	r3, #0
}
 80096dc:	4618      	mov	r0, r3
 80096de:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <hci_reset>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_reset(void)
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b088      	sub	sp, #32
 80096ea:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80096ec:	2300      	movs	r3, #0
 80096ee:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 80096f0:	f107 0308 	add.w	r3, r7, #8
 80096f4:	2218      	movs	r2, #24
 80096f6:	2100      	movs	r1, #0
 80096f8:	4618      	mov	r0, r3
 80096fa:	f000 fa95 	bl	8009c28 <Osal_MemSet>
  rq.ogf = 0x03;
 80096fe:	2303      	movs	r3, #3
 8009700:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8009702:	2303      	movs	r3, #3
 8009704:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009706:	1dfb      	adds	r3, r7, #7
 8009708:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800970a:	2301      	movs	r3, #1
 800970c:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800970e:	f107 0308 	add.w	r3, r7, #8
 8009712:	2100      	movs	r1, #0
 8009714:	4618      	mov	r0, r3
 8009716:	f000 f94b 	bl	80099b0 <hci_send_req>
 800971a:	4603      	mov	r3, r0
 800971c:	2b00      	cmp	r3, #0
 800971e:	da01      	bge.n	8009724 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009720:	23ff      	movs	r3, #255	; 0xff
 8009722:	e005      	b.n	8009730 <hci_reset+0x4a>
  if (status) 
 8009724:	79fb      	ldrb	r3, [r7, #7]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d001      	beq.n	800972e <hci_reset+0x48>
  {
    return status;
 800972a:	79fb      	ldrb	r3, [r7, #7]
 800972c:	e000      	b.n	8009730 <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800972e:	2300      	movs	r3, #0
}
 8009730:	4618      	mov	r0, r3
 8009732:	3720      	adds	r7, #32
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy(uint16_t Connection_Handle,
                           uint8_t *TX_PHY,
                           uint8_t *RX_PHY)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b0ce      	sub	sp, #312	; 0x138
 800973c:	af00      	add	r7, sp, #0
 800973e:	f107 0308 	add.w	r3, r7, #8
 8009742:	6019      	str	r1, [r3, #0]
 8009744:	1d3b      	adds	r3, r7, #4
 8009746:	601a      	str	r2, [r3, #0]
 8009748:	f107 030e 	add.w	r3, r7, #14
 800974c:	4602      	mov	r2, r0
 800974e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 8009750:	f107 0318 	add.w	r3, r7, #24
 8009754:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 8009758:	f107 0310 	add.w	r3, r7, #16
 800975c:	2205      	movs	r2, #5
 800975e:	2100      	movs	r1, #0
 8009760:	4618      	mov	r0, r3
 8009762:	f000 fa61 	bl	8009c28 <Osal_MemSet>
  int index_input = 0;
 8009766:	2300      	movs	r3, #0
 8009768:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800976c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009770:	f107 020e 	add.w	r2, r7, #14
 8009774:	8812      	ldrh	r2, [r2, #0]
 8009776:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009778:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800977c:	3302      	adds	r3, #2
 800977e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet(&rq, 0, sizeof(rq));
 8009782:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009786:	2218      	movs	r2, #24
 8009788:	2100      	movs	r1, #0
 800978a:	4618      	mov	r0, r3
 800978c:	f000 fa4c 	bl	8009c28 <Osal_MemSet>
  rq.ogf = 0x08;
 8009790:	2308      	movs	r3, #8
 8009792:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 8009796:	2330      	movs	r3, #48	; 0x30
 8009798:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800979c:	f107 0318 	add.w	r3, r7, #24
 80097a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80097a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80097a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 80097ac:	f107 0310 	add.w	r3, r7, #16
 80097b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 80097b4:	2305      	movs	r3, #5
 80097b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 80097ba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80097be:	2100      	movs	r1, #0
 80097c0:	4618      	mov	r0, r3
 80097c2:	f000 f8f5 	bl	80099b0 <hci_send_req>
 80097c6:	4603      	mov	r3, r0
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	da01      	bge.n	80097d0 <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 80097cc:	23ff      	movs	r3, #255	; 0xff
 80097ce:	e016      	b.n	80097fe <hci_le_read_phy+0xc6>
  if (resp.Status) 
 80097d0:	f107 0310 	add.w	r3, r7, #16
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d003      	beq.n	80097e2 <hci_le_read_phy+0xaa>
  {
    return resp.Status;
 80097da:	f107 0310 	add.w	r3, r7, #16
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	e00d      	b.n	80097fe <hci_le_read_phy+0xc6>
  }
  *TX_PHY = btoh(resp.TX_PHY, 1);
 80097e2:	f107 0310 	add.w	r3, r7, #16
 80097e6:	78da      	ldrb	r2, [r3, #3]
 80097e8:	f107 0308 	add.w	r3, r7, #8
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	701a      	strb	r2, [r3, #0]
  *RX_PHY = btoh(resp.RX_PHY, 1);
 80097f0:	f107 0310 	add.w	r3, r7, #16
 80097f4:	791a      	ldrb	r2, [r3, #4]
 80097f6:	1d3b      	adds	r3, r7, #4
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80097fc:	2300      	movs	r3, #0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy(uint8_t ALL_PHYS,
                                  uint8_t TX_PHYS,
                                  uint8_t RX_PHYS)
{
 8009808:	b590      	push	{r4, r7, lr}
 800980a:	b0cd      	sub	sp, #308	; 0x134
 800980c:	af00      	add	r7, sp, #0
 800980e:	4604      	mov	r4, r0
 8009810:	4608      	mov	r0, r1
 8009812:	4611      	mov	r1, r2
 8009814:	1dfb      	adds	r3, r7, #7
 8009816:	4622      	mov	r2, r4
 8009818:	701a      	strb	r2, [r3, #0]
 800981a:	1dbb      	adds	r3, r7, #6
 800981c:	4602      	mov	r2, r0
 800981e:	701a      	strb	r2, [r3, #0]
 8009820:	1d7b      	adds	r3, r7, #5
 8009822:	460a      	mov	r2, r1
 8009824:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8009826:	f107 0310 	add.w	r3, r7, #16
 800982a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800982e:	f107 030f 	add.w	r3, r7, #15
 8009832:	2200      	movs	r2, #0
 8009834:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009836:	2300      	movs	r3, #0
 8009838:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = htob(ALL_PHYS, 1);
 800983c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009840:	1dfa      	adds	r2, r7, #7
 8009842:	7812      	ldrb	r2, [r2, #0]
 8009844:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009846:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800984a:	3301      	adds	r3, #1
 800984c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = htob(TX_PHYS, 1);
 8009850:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009854:	1dba      	adds	r2, r7, #6
 8009856:	7812      	ldrb	r2, [r2, #0]
 8009858:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800985a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800985e:	3301      	adds	r3, #1
 8009860:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = htob(RX_PHYS, 1);
 8009864:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009868:	1d7a      	adds	r2, r7, #5
 800986a:	7812      	ldrb	r2, [r2, #0]
 800986c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800986e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009872:	3301      	adds	r3, #1
 8009874:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 8009878:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800987c:	2218      	movs	r2, #24
 800987e:	2100      	movs	r1, #0
 8009880:	4618      	mov	r0, r3
 8009882:	f000 f9d1 	bl	8009c28 <Osal_MemSet>
  rq.ogf = 0x08;
 8009886:	2308      	movs	r3, #8
 8009888:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800988c:	2331      	movs	r3, #49	; 0x31
 800988e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009892:	f107 0310 	add.w	r3, r7, #16
 8009896:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800989a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800989e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80098a2:	f107 030f 	add.w	r3, r7, #15
 80098a6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80098aa:	2301      	movs	r3, #1
 80098ac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80098b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80098b4:	2100      	movs	r1, #0
 80098b6:	4618      	mov	r0, r3
 80098b8:	f000 f87a 	bl	80099b0 <hci_send_req>
 80098bc:	4603      	mov	r3, r0
 80098be:	2b00      	cmp	r3, #0
 80098c0:	da01      	bge.n	80098c6 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 80098c2:	23ff      	movs	r3, #255	; 0xff
 80098c4:	e009      	b.n	80098da <hci_le_set_default_phy+0xd2>
  if (status) 
 80098c6:	f107 030f 	add.w	r3, r7, #15
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d003      	beq.n	80098d8 <hci_le_set_default_phy+0xd0>
  {
    return status;
 80098d0:	f107 030f 	add.w	r3, r7, #15
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	e000      	b.n	80098da <hci_le_set_default_phy+0xd2>
  }
  return BLE_STATUS_SUCCESS;
 80098d8:	2300      	movs	r3, #0
}
 80098da:	4618      	mov	r0, r3
 80098dc:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd90      	pop	{r4, r7, pc}

080098e4 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	4a08      	ldr	r2, [pc, #32]	; (8009914 <hci_init+0x30>)
 80098f4:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80098f6:	4a08      	ldr	r2, [pc, #32]	; (8009918 <hci_init+0x34>)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80098fc:	4806      	ldr	r0, [pc, #24]	; (8009918 <hci_init+0x34>)
 80098fe:	f000 f96f 	bl	8009be0 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4618      	mov	r0, r3
 8009908:	f000 f8d0 	bl	8009aac <TlInit>

  return;
 800990c:	bf00      	nop
}
 800990e:	3708      	adds	r7, #8
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}
 8009914:	200002f8 	.word	0x200002f8
 8009918:	200002d0 	.word	0x200002d0

0800991c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009922:	4820      	ldr	r0, [pc, #128]	; (80099a4 <hci_user_evt_proc+0x88>)
 8009924:	f000 fc34 	bl	800a190 <LST_is_empty>
 8009928:	4603      	mov	r3, r0
 800992a:	2b00      	cmp	r3, #0
 800992c:	d128      	bne.n	8009980 <hci_user_evt_proc+0x64>
 800992e:	4b1e      	ldr	r3, [pc, #120]	; (80099a8 <hci_user_evt_proc+0x8c>)
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d024      	beq.n	8009980 <hci_user_evt_proc+0x64>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009936:	f107 030c 	add.w	r3, r7, #12
 800993a:	4619      	mov	r1, r3
 800993c:	4819      	ldr	r0, [pc, #100]	; (80099a4 <hci_user_evt_proc+0x88>)
 800993e:	f000 fcae 	bl	800a29e <LST_remove_head>

    UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009942:	4b19      	ldr	r3, [pc, #100]	; (80099a8 <hci_user_evt_proc+0x8c>)
 8009944:	2201      	movs	r2, #1
 8009946:	701a      	strb	r2, [r3, #0]

    if (hciContext.UserEvtRx != NULL)
 8009948:	4b18      	ldr	r3, [pc, #96]	; (80099ac <hci_user_evt_proc+0x90>)
 800994a:	69db      	ldr	r3, [r3, #28]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d009      	beq.n	8009964 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	60bb      	str	r3, [r7, #8]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009954:	4b15      	ldr	r3, [pc, #84]	; (80099ac <hci_user_evt_proc+0x90>)
 8009956:	69db      	ldr	r3, [r3, #28]
 8009958:	1d3a      	adds	r2, r7, #4
 800995a:	4610      	mov	r0, r2
 800995c:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800995e:	793a      	ldrb	r2, [r7, #4]
 8009960:	4b11      	ldr	r3, [pc, #68]	; (80099a8 <hci_user_evt_proc+0x8c>)
 8009962:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8009964:	4b10      	ldr	r3, [pc, #64]	; (80099a8 <hci_user_evt_proc+0x8c>)
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d004      	beq.n	8009976 <hci_user_evt_proc+0x5a>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	4618      	mov	r0, r3
 8009970:	f000 ff0c 	bl	800a78c <TL_MM_EvtDone>
 8009974:	e004      	b.n	8009980 <hci_user_evt_proc+0x64>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	4619      	mov	r1, r3
 800997a:	480a      	ldr	r0, [pc, #40]	; (80099a4 <hci_user_evt_proc+0x88>)
 800997c:	f000 fc28 	bl	800a1d0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009980:	4808      	ldr	r0, [pc, #32]	; (80099a4 <hci_user_evt_proc+0x88>)
 8009982:	f000 fc05 	bl	800a190 <LST_is_empty>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	d107      	bne.n	800999c <hci_user_evt_proc+0x80>
 800998c:	4b06      	ldr	r3, [pc, #24]	; (80099a8 <hci_user_evt_proc+0x8c>)
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d003      	beq.n	800999c <hci_user_evt_proc+0x80>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8009994:	4803      	ldr	r0, [pc, #12]	; (80099a4 <hci_user_evt_proc+0x88>)
 8009996:	f001 fa8e 	bl	800aeb6 <hci_notify_asynch_evt>
  }


  return;
 800999a:	bf00      	nop
 800999c:	bf00      	nop
}
 800999e:	3710      	adds	r7, #16
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}
 80099a4:	200000cc 	.word	0x200000cc
 80099a8:	200000d8 	.word	0x200000d8
 80099ac:	200002d0 	.word	0x200002d0

080099b0 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b088      	sub	sp, #32
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	460b      	mov	r3, r1
 80099ba:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80099bc:	2000      	movs	r0, #0
 80099be:	f000 f8cb 	bl	8009b58 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80099c2:	2300      	movs	r3, #0
 80099c4:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	885b      	ldrh	r3, [r3, #2]
 80099ca:	b21b      	sxth	r3, r3
 80099cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80099d0:	b21a      	sxth	r2, r3
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	881b      	ldrh	r3, [r3, #0]
 80099d6:	029b      	lsls	r3, r3, #10
 80099d8:	b21b      	sxth	r3, r3
 80099da:	4313      	orrs	r3, r2
 80099dc:	b21b      	sxth	r3, r3
 80099de:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	68db      	ldr	r3, [r3, #12]
 80099e4:	b2d9      	uxtb	r1, r3
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	689a      	ldr	r2, [r3, #8]
 80099ea:	8bbb      	ldrh	r3, [r7, #28]
 80099ec:	4618      	mov	r0, r3
 80099ee:	f000 f88d 	bl	8009b0c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80099f2:	e04e      	b.n	8009a92 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80099f4:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80099f8:	f001 fa74 	bl	800aee4 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80099fc:	e043      	b.n	8009a86 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80099fe:	f107 030c 	add.w	r3, r7, #12
 8009a02:	4619      	mov	r1, r3
 8009a04:	4828      	ldr	r0, [pc, #160]	; (8009aa8 <hci_send_req+0xf8>)
 8009a06:	f000 fc4a 	bl	800a29e <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	7a5b      	ldrb	r3, [r3, #9]
 8009a0e:	2b0f      	cmp	r3, #15
 8009a10:	d114      	bne.n	8009a3c <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	330b      	adds	r3, #11
 8009a16:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	885b      	ldrh	r3, [r3, #2]
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	8bba      	ldrh	r2, [r7, #28]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d104      	bne.n	8009a2e <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	691b      	ldr	r3, [r3, #16]
 8009a28:	693a      	ldr	r2, [r7, #16]
 8009a2a:	7812      	ldrb	r2, [r2, #0]
 8009a2c:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	785b      	ldrb	r3, [r3, #1]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d027      	beq.n	8009a86 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009a36:	2301      	movs	r3, #1
 8009a38:	77fb      	strb	r3, [r7, #31]
 8009a3a:	e024      	b.n	8009a86 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	330b      	adds	r3, #11
 8009a40:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8009a42:	69bb      	ldr	r3, [r7, #24]
 8009a44:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009a48:	b29b      	uxth	r3, r3
 8009a4a:	8bba      	ldrh	r2, [r7, #28]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d114      	bne.n	8009a7a <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	7a9b      	ldrb	r3, [r3, #10]
 8009a54:	3b03      	subs	r3, #3
 8009a56:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	695a      	ldr	r2, [r3, #20]
 8009a5c:	7dfb      	ldrb	r3, [r7, #23]
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	bfa8      	it	ge
 8009a62:	461a      	movge	r2, r3
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6918      	ldr	r0, [r3, #16]
 8009a6c:	69bb      	ldr	r3, [r7, #24]
 8009a6e:	1cd9      	adds	r1, r3, #3
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	695b      	ldr	r3, [r3, #20]
 8009a74:	461a      	mov	r2, r3
 8009a76:	f001 fd2d 	bl	800b4d4 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8009a7a:	69bb      	ldr	r3, [r7, #24]
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d001      	beq.n	8009a86 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009a82:	2301      	movs	r3, #1
 8009a84:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009a86:	4808      	ldr	r0, [pc, #32]	; (8009aa8 <hci_send_req+0xf8>)
 8009a88:	f000 fb82 	bl	800a190 <LST_is_empty>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d0b5      	beq.n	80099fe <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8009a92:	7ffb      	ldrb	r3, [r7, #31]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d0ad      	beq.n	80099f4 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8009a98:	2001      	movs	r0, #1
 8009a9a:	f000 f85d 	bl	8009b58 <NotifyCmdStatus>

  return 0;
 8009a9e:	2300      	movs	r3, #0
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3720      	adds	r7, #32
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	200002f0 	.word	0x200002f0

08009aac <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b086      	sub	sp, #24
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8009ab4:	480f      	ldr	r0, [pc, #60]	; (8009af4 <TlInit+0x48>)
 8009ab6:	f000 fb5b 	bl	800a170 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8009aba:	4a0f      	ldr	r2, [pc, #60]	; (8009af8 <TlInit+0x4c>)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8009ac0:	480e      	ldr	r0, [pc, #56]	; (8009afc <TlInit+0x50>)
 8009ac2:	f000 fb55 	bl	800a170 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009ac6:	4b0e      	ldr	r3, [pc, #56]	; (8009b00 <TlInit+0x54>)
 8009ac8:	2201      	movs	r2, #1
 8009aca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8009acc:	4b0d      	ldr	r3, [pc, #52]	; (8009b04 <TlInit+0x58>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d00a      	beq.n	8009aea <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8009ad8:	4b0b      	ldr	r3, [pc, #44]	; (8009b08 <TlInit+0x5c>)
 8009ada:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8009adc:	4b09      	ldr	r3, [pc, #36]	; (8009b04 <TlInit+0x58>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f107 0208 	add.w	r2, r7, #8
 8009ae4:	4610      	mov	r0, r2
 8009ae6:	4798      	blx	r3
  }

  return;
 8009ae8:	bf00      	nop
 8009aea:	bf00      	nop
}
 8009aec:	3718      	adds	r7, #24
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
 8009af2:	bf00      	nop
 8009af4:	200002f0 	.word	0x200002f0
 8009af8:	200000d4 	.word	0x200000d4
 8009afc:	200000cc 	.word	0x200000cc
 8009b00:	200000d8 	.word	0x200000d8
 8009b04:	200002d0 	.word	0x200002d0
 8009b08:	08009b99 	.word	0x08009b99

08009b0c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b082      	sub	sp, #8
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	4603      	mov	r3, r0
 8009b14:	603a      	str	r2, [r7, #0]
 8009b16:	80fb      	strh	r3, [r7, #6]
 8009b18:	460b      	mov	r3, r1
 8009b1a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8009b1c:	4b0c      	ldr	r3, [pc, #48]	; (8009b50 <SendCmd+0x44>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	88fa      	ldrh	r2, [r7, #6]
 8009b22:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8009b26:	4b0a      	ldr	r3, [pc, #40]	; (8009b50 <SendCmd+0x44>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	797a      	ldrb	r2, [r7, #5]
 8009b2c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8009b2e:	4b08      	ldr	r3, [pc, #32]	; (8009b50 <SendCmd+0x44>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	330c      	adds	r3, #12
 8009b34:	797a      	ldrb	r2, [r7, #5]
 8009b36:	6839      	ldr	r1, [r7, #0]
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f001 fccb 	bl	800b4d4 <memcpy>

  hciContext.io.Send(0,0);
 8009b3e:	4b05      	ldr	r3, [pc, #20]	; (8009b54 <SendCmd+0x48>)
 8009b40:	691b      	ldr	r3, [r3, #16]
 8009b42:	2100      	movs	r1, #0
 8009b44:	2000      	movs	r0, #0
 8009b46:	4798      	blx	r3

  return;
 8009b48:	bf00      	nop
}
 8009b4a:	3708      	adds	r7, #8
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}
 8009b50:	200000d4 	.word	0x200000d4
 8009b54:	200002d0 	.word	0x200002d0

08009b58 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b082      	sub	sp, #8
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	4603      	mov	r3, r0
 8009b60:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8009b62:	79fb      	ldrb	r3, [r7, #7]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d108      	bne.n	8009b7a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8009b68:	4b0a      	ldr	r3, [pc, #40]	; (8009b94 <NotifyCmdStatus+0x3c>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d00d      	beq.n	8009b8c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8009b70:	4b08      	ldr	r3, [pc, #32]	; (8009b94 <NotifyCmdStatus+0x3c>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	2000      	movs	r0, #0
 8009b76:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8009b78:	e008      	b.n	8009b8c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8009b7a:	4b06      	ldr	r3, [pc, #24]	; (8009b94 <NotifyCmdStatus+0x3c>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d004      	beq.n	8009b8c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8009b82:	4b04      	ldr	r3, [pc, #16]	; (8009b94 <NotifyCmdStatus+0x3c>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	2001      	movs	r0, #1
 8009b88:	4798      	blx	r3
  return;
 8009b8a:	bf00      	nop
 8009b8c:	bf00      	nop
}
 8009b8e:	3708      	adds	r7, #8
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	200002f8 	.word	0x200002f8

08009b98 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	7a5b      	ldrb	r3, [r3, #9]
 8009ba4:	2b0f      	cmp	r3, #15
 8009ba6:	d003      	beq.n	8009bb0 <TlEvtReceived+0x18>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	7a5b      	ldrb	r3, [r3, #9]
 8009bac:	2b0e      	cmp	r3, #14
 8009bae:	d107      	bne.n	8009bc0 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8009bb0:	6879      	ldr	r1, [r7, #4]
 8009bb2:	4809      	ldr	r0, [pc, #36]	; (8009bd8 <TlEvtReceived+0x40>)
 8009bb4:	f000 fb30 	bl	800a218 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8009bb8:	2000      	movs	r0, #0
 8009bba:	f001 f988 	bl	800aece <hci_cmd_resp_release>
 8009bbe:	e006      	b.n	8009bce <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8009bc0:	6879      	ldr	r1, [r7, #4]
 8009bc2:	4806      	ldr	r0, [pc, #24]	; (8009bdc <TlEvtReceived+0x44>)
 8009bc4:	f000 fb28 	bl	800a218 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009bc8:	4804      	ldr	r0, [pc, #16]	; (8009bdc <TlEvtReceived+0x44>)
 8009bca:	f001 f974 	bl	800aeb6 <hci_notify_asynch_evt>
  }

  return;
 8009bce:	bf00      	nop
}
 8009bd0:	3708      	adds	r7, #8
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	200002f0 	.word	0x200002f0
 8009bdc:	200000cc 	.word	0x200000cc

08009be0 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b083      	sub	sp, #12
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	4a05      	ldr	r2, [pc, #20]	; (8009c00 <hci_register_io_bus+0x20>)
 8009bec:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	4a04      	ldr	r2, [pc, #16]	; (8009c04 <hci_register_io_bus+0x24>)
 8009bf2:	611a      	str	r2, [r3, #16]

  return;
 8009bf4:	bf00      	nop
}
 8009bf6:	370c      	adds	r7, #12
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr
 8009c00:	0800a565 	.word	0x0800a565
 8009c04:	0800a5cd 	.word	0x0800a5cd

08009c08 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b084      	sub	sp, #16
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	60b9      	str	r1, [r7, #8]
 8009c12:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	68b9      	ldr	r1, [r7, #8]
 8009c18:	68f8      	ldr	r0, [r7, #12]
 8009c1a:	f001 fc5b 	bl	800b4d4 <memcpy>
 8009c1e:	4603      	mov	r3, r0
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3710      	adds	r7, #16
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b084      	sub	sp, #16
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	68b9      	ldr	r1, [r7, #8]
 8009c38:	68f8      	ldr	r0, [r7, #12]
 8009c3a:	f001 fc56 	bl	800b4ea <memset>
 8009c3e:	4603      	mov	r3, r0
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3710      	adds	r7, #16
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b085      	sub	sp, #20
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	4603      	mov	r3, r0
 8009c50:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8009c52:	4b0f      	ldr	r3, [pc, #60]	; (8009c90 <OTP_Read+0x48>)
 8009c54:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009c56:	e002      	b.n	8009c5e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	3b08      	subs	r3, #8
 8009c5c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	3307      	adds	r3, #7
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	79fa      	ldrb	r2, [r7, #7]
 8009c66:	429a      	cmp	r2, r3
 8009c68:	d003      	beq.n	8009c72 <OTP_Read+0x2a>
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	4a09      	ldr	r2, [pc, #36]	; (8009c94 <OTP_Read+0x4c>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d1f2      	bne.n	8009c58 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	3307      	adds	r3, #7
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	79fa      	ldrb	r2, [r7, #7]
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d001      	beq.n	8009c82 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8009c82:	68fb      	ldr	r3, [r7, #12]
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3714      	adds	r7, #20
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr
 8009c90:	1fff73f8 	.word	0x1fff73f8
 8009c94:	1fff7000 	.word	0x1fff7000

08009c98 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b08a      	sub	sp, #40	; 0x28
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	3301      	adds	r3, #1
 8009caa:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8009cac:	6a3b      	ldr	r3, [r7, #32]
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	2bff      	cmp	r3, #255	; 0xff
 8009cb2:	d000      	beq.n	8009cb6 <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 8009cb4:	e04a      	b.n	8009d4c <PeerToPeer_Event_Handler+0xb4>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 8009cb6:	6a3b      	ldr	r3, [r7, #32]
 8009cb8:	3302      	adds	r3, #2
 8009cba:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 8009cbc:	69fb      	ldr	r3, [r7, #28]
 8009cbe:	881b      	ldrh	r3, [r3, #0]
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	f640 4301 	movw	r3, #3073	; 0xc01
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d000      	beq.n	8009cce <PeerToPeer_Event_Handler+0x36>
          break;
 8009ccc:	e03d      	b.n	8009d4a <PeerToPeer_Event_Handler+0xb2>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 8009cce:	69fb      	ldr	r3, [r7, #28]
 8009cd0:	3302      	adds	r3, #2
 8009cd2:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8009cd4:	69bb      	ldr	r3, [r7, #24]
 8009cd6:	885b      	ldrh	r3, [r3, #2]
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	461a      	mov	r2, r3
 8009cdc:	4b1e      	ldr	r3, [pc, #120]	; (8009d58 <PeerToPeer_Event_Handler+0xc0>)
 8009cde:	889b      	ldrh	r3, [r3, #4]
 8009ce0:	3302      	adds	r3, #2
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d118      	bne.n	8009d18 <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8009cec:	69bb      	ldr	r3, [r7, #24]
 8009cee:	7a1b      	ldrb	r3, [r3, #8]
 8009cf0:	f003 0301 	and.w	r3, r3, #1
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d007      	beq.n	8009d08 <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8009cfc:	f107 0308 	add.w	r3, r7, #8
 8009d00:	4618      	mov	r0, r3
 8009d02:	f001 f931 	bl	800af68 <P2PS_STM_App_Notification>
        break;
 8009d06:	e01f      	b.n	8009d48 <PeerToPeer_Event_Handler+0xb0>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8009d08:	2301      	movs	r3, #1
 8009d0a:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8009d0c:	f107 0308 	add.w	r3, r7, #8
 8009d10:	4618      	mov	r0, r3
 8009d12:	f001 f929 	bl	800af68 <P2PS_STM_App_Notification>
        break;
 8009d16:	e017      	b.n	8009d48 <PeerToPeer_Event_Handler+0xb0>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8009d18:	69bb      	ldr	r3, [r7, #24]
 8009d1a:	885b      	ldrh	r3, [r3, #2]
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	461a      	mov	r2, r3
 8009d20:	4b0d      	ldr	r3, [pc, #52]	; (8009d58 <PeerToPeer_Event_Handler+0xc0>)
 8009d22:	885b      	ldrh	r3, [r3, #2]
 8009d24:	3301      	adds	r3, #1
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d10e      	bne.n	8009d48 <PeerToPeer_Event_Handler+0xb0>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 8009d2a:	2303      	movs	r3, #3
 8009d2c:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8009d2e:	69bb      	ldr	r3, [r7, #24]
 8009d30:	88db      	ldrh	r3, [r3, #6]
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	b2db      	uxtb	r3, r3
 8009d36:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8009d38:	69bb      	ldr	r3, [r7, #24]
 8009d3a:	3308      	adds	r3, #8
 8009d3c:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 8009d3e:	f107 0308 	add.w	r3, r7, #8
 8009d42:	4618      	mov	r0, r3
 8009d44:	f001 f910 	bl	800af68 <P2PS_STM_App_Notification>
        break;
 8009d48:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 8009d4a:	bf00      	nop
  }

  return(return_value);
 8009d4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 8009d50:	4618      	mov	r0, r3
 8009d52:	3728      	adds	r7, #40	; 0x28
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}
 8009d58:	200000dc 	.word	0x200000dc

08009d5c <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b08a      	sub	sp, #40	; 0x28
 8009d60:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 8009d62:	484a      	ldr	r0, [pc, #296]	; (8009e8c <P2PS_STM_Init+0x130>)
 8009d64:	f000 fb56 	bl	800a414 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 8009d68:	238f      	movs	r3, #143	; 0x8f
 8009d6a:	703b      	strb	r3, [r7, #0]
 8009d6c:	23e5      	movs	r3, #229	; 0xe5
 8009d6e:	707b      	strb	r3, [r7, #1]
 8009d70:	23b3      	movs	r3, #179	; 0xb3
 8009d72:	70bb      	strb	r3, [r7, #2]
 8009d74:	23d5      	movs	r3, #213	; 0xd5
 8009d76:	70fb      	strb	r3, [r7, #3]
 8009d78:	232e      	movs	r3, #46	; 0x2e
 8009d7a:	713b      	strb	r3, [r7, #4]
 8009d7c:	237f      	movs	r3, #127	; 0x7f
 8009d7e:	717b      	strb	r3, [r7, #5]
 8009d80:	234a      	movs	r3, #74	; 0x4a
 8009d82:	71bb      	strb	r3, [r7, #6]
 8009d84:	2398      	movs	r3, #152	; 0x98
 8009d86:	71fb      	strb	r3, [r7, #7]
 8009d88:	232a      	movs	r3, #42	; 0x2a
 8009d8a:	723b      	strb	r3, [r7, #8]
 8009d8c:	2348      	movs	r3, #72	; 0x48
 8009d8e:	727b      	strb	r3, [r7, #9]
 8009d90:	237a      	movs	r3, #122	; 0x7a
 8009d92:	72bb      	strb	r3, [r7, #10]
 8009d94:	23cc      	movs	r3, #204	; 0xcc
 8009d96:	72fb      	strb	r3, [r7, #11]
 8009d98:	2340      	movs	r3, #64	; 0x40
 8009d9a:	733b      	strb	r3, [r7, #12]
 8009d9c:	23fe      	movs	r3, #254	; 0xfe
 8009d9e:	737b      	strb	r3, [r7, #13]
 8009da0:	2300      	movs	r3, #0
 8009da2:	73bb      	strb	r3, [r7, #14]
 8009da4:	2300      	movs	r3, #0
 8009da6:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8009da8:	4639      	mov	r1, r7
 8009daa:	4b39      	ldr	r3, [pc, #228]	; (8009e90 <P2PS_STM_Init+0x134>)
 8009dac:	9300      	str	r3, [sp, #0]
 8009dae:	2308      	movs	r3, #8
 8009db0:	2201      	movs	r2, #1
 8009db2:	2002      	movs	r0, #2
 8009db4:	f7ff f8fc 	bl	8008fb0 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 8009db8:	2319      	movs	r3, #25
 8009dba:	703b      	strb	r3, [r7, #0]
 8009dbc:	23ed      	movs	r3, #237	; 0xed
 8009dbe:	707b      	strb	r3, [r7, #1]
 8009dc0:	2382      	movs	r3, #130	; 0x82
 8009dc2:	70bb      	strb	r3, [r7, #2]
 8009dc4:	23ae      	movs	r3, #174	; 0xae
 8009dc6:	70fb      	strb	r3, [r7, #3]
 8009dc8:	23ed      	movs	r3, #237	; 0xed
 8009dca:	713b      	strb	r3, [r7, #4]
 8009dcc:	2321      	movs	r3, #33	; 0x21
 8009dce:	717b      	strb	r3, [r7, #5]
 8009dd0:	234c      	movs	r3, #76	; 0x4c
 8009dd2:	71bb      	strb	r3, [r7, #6]
 8009dd4:	239d      	movs	r3, #157	; 0x9d
 8009dd6:	71fb      	strb	r3, [r7, #7]
 8009dd8:	2341      	movs	r3, #65	; 0x41
 8009dda:	723b      	strb	r3, [r7, #8]
 8009ddc:	2345      	movs	r3, #69	; 0x45
 8009dde:	727b      	strb	r3, [r7, #9]
 8009de0:	2322      	movs	r3, #34	; 0x22
 8009de2:	72bb      	strb	r3, [r7, #10]
 8009de4:	238e      	movs	r3, #142	; 0x8e
 8009de6:	72fb      	strb	r3, [r7, #11]
 8009de8:	2341      	movs	r3, #65	; 0x41
 8009dea:	733b      	strb	r3, [r7, #12]
 8009dec:	23fe      	movs	r3, #254	; 0xfe
 8009dee:	737b      	strb	r3, [r7, #13]
 8009df0:	2300      	movs	r3, #0
 8009df2:	73bb      	strb	r3, [r7, #14]
 8009df4:	2300      	movs	r3, #0
 8009df6:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8009df8:	4b25      	ldr	r3, [pc, #148]	; (8009e90 <P2PS_STM_Init+0x134>)
 8009dfa:	8818      	ldrh	r0, [r3, #0]
 8009dfc:	463a      	mov	r2, r7
 8009dfe:	4b25      	ldr	r3, [pc, #148]	; (8009e94 <P2PS_STM_Init+0x138>)
 8009e00:	9305      	str	r3, [sp, #20]
 8009e02:	2301      	movs	r3, #1
 8009e04:	9304      	str	r3, [sp, #16]
 8009e06:	230a      	movs	r3, #10
 8009e08:	9303      	str	r3, [sp, #12]
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	9302      	str	r3, [sp, #8]
 8009e0e:	2300      	movs	r3, #0
 8009e10:	9301      	str	r3, [sp, #4]
 8009e12:	2306      	movs	r3, #6
 8009e14:	9300      	str	r3, [sp, #0]
 8009e16:	2328      	movs	r3, #40	; 0x28
 8009e18:	2102      	movs	r1, #2
 8009e1a:	f7ff f978 	bl	800910e <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 8009e1e:	2319      	movs	r3, #25
 8009e20:	703b      	strb	r3, [r7, #0]
 8009e22:	23ed      	movs	r3, #237	; 0xed
 8009e24:	707b      	strb	r3, [r7, #1]
 8009e26:	2382      	movs	r3, #130	; 0x82
 8009e28:	70bb      	strb	r3, [r7, #2]
 8009e2a:	23ae      	movs	r3, #174	; 0xae
 8009e2c:	70fb      	strb	r3, [r7, #3]
 8009e2e:	23ed      	movs	r3, #237	; 0xed
 8009e30:	713b      	strb	r3, [r7, #4]
 8009e32:	2321      	movs	r3, #33	; 0x21
 8009e34:	717b      	strb	r3, [r7, #5]
 8009e36:	234c      	movs	r3, #76	; 0x4c
 8009e38:	71bb      	strb	r3, [r7, #6]
 8009e3a:	239d      	movs	r3, #157	; 0x9d
 8009e3c:	71fb      	strb	r3, [r7, #7]
 8009e3e:	2341      	movs	r3, #65	; 0x41
 8009e40:	723b      	strb	r3, [r7, #8]
 8009e42:	2345      	movs	r3, #69	; 0x45
 8009e44:	727b      	strb	r3, [r7, #9]
 8009e46:	2322      	movs	r3, #34	; 0x22
 8009e48:	72bb      	strb	r3, [r7, #10]
 8009e4a:	238e      	movs	r3, #142	; 0x8e
 8009e4c:	72fb      	strb	r3, [r7, #11]
 8009e4e:	2342      	movs	r3, #66	; 0x42
 8009e50:	733b      	strb	r3, [r7, #12]
 8009e52:	23fe      	movs	r3, #254	; 0xfe
 8009e54:	737b      	strb	r3, [r7, #13]
 8009e56:	2300      	movs	r3, #0
 8009e58:	73bb      	strb	r3, [r7, #14]
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8009e5e:	4b0c      	ldr	r3, [pc, #48]	; (8009e90 <P2PS_STM_Init+0x134>)
 8009e60:	8818      	ldrh	r0, [r3, #0]
 8009e62:	463a      	mov	r2, r7
 8009e64:	4b0c      	ldr	r3, [pc, #48]	; (8009e98 <P2PS_STM_Init+0x13c>)
 8009e66:	9305      	str	r3, [sp, #20]
 8009e68:	2301      	movs	r3, #1
 8009e6a:	9304      	str	r3, [sp, #16]
 8009e6c:	230a      	movs	r3, #10
 8009e6e:	9303      	str	r3, [sp, #12]
 8009e70:	2301      	movs	r3, #1
 8009e72:	9302      	str	r3, [sp, #8]
 8009e74:	2300      	movs	r3, #0
 8009e76:	9301      	str	r3, [sp, #4]
 8009e78:	2310      	movs	r3, #16
 8009e7a:	9300      	str	r3, [sp, #0]
 8009e7c:	2328      	movs	r3, #40	; 0x28
 8009e7e:	2102      	movs	r1, #2
 8009e80:	f7ff f945 	bl	800910e <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 8009e84:	bf00      	nop
}
 8009e86:	3710      	adds	r7, #16
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}
 8009e8c:	08009c99 	.word	0x08009c99
 8009e90:	200000dc 	.word	0x200000dc
 8009e94:	200000de 	.word	0x200000de
 8009e98:	200000e0 	.word	0x200000e0

08009e9c <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b086      	sub	sp, #24
 8009ea0:	af02      	add	r7, sp, #8
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	6039      	str	r1, [r7, #0]
 8009ea6:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 8009ea8:	2342      	movs	r3, #66	; 0x42
 8009eaa:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 8009eac:	88fb      	ldrh	r3, [r7, #6]
 8009eae:	f64f 6242 	movw	r2, #65090	; 0xfe42
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d000      	beq.n	8009eb8 <P2PS_STM_App_Update_Char+0x1c>
                             (uint8_t *)  pPayload);
    
      break;

    default:
      break;
 8009eb6:	e00c      	b.n	8009ed2 <P2PS_STM_App_Update_Char+0x36>
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 8009eb8:	4b08      	ldr	r3, [pc, #32]	; (8009edc <P2PS_STM_App_Update_Char+0x40>)
 8009eba:	8818      	ldrh	r0, [r3, #0]
 8009ebc:	4b07      	ldr	r3, [pc, #28]	; (8009edc <P2PS_STM_App_Update_Char+0x40>)
 8009ebe:	8899      	ldrh	r1, [r3, #4]
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	9300      	str	r3, [sp, #0]
 8009ec4:	2328      	movs	r3, #40	; 0x28
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f7ff fa0b 	bl	80092e2 <aci_gatt_update_char_value>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	73fb      	strb	r3, [r7, #15]
      break;
 8009ed0:	bf00      	nop
  }

  return result;
 8009ed2:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3710      	adds	r7, #16
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	200000dc 	.word	0x200000dc

08009ee0 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b088      	sub	sp, #32
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009ee8:	f107 030c 	add.w	r3, r7, #12
 8009eec:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8009ef4:	69fb      	ldr	r3, [r7, #28]
 8009ef6:	2121      	movs	r1, #33	; 0x21
 8009ef8:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8009efc:	f000 f86e 	bl	8009fdc <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009f00:	69fb      	ldr	r3, [r7, #28]
 8009f02:	330b      	adds	r3, #11
 8009f04:	78db      	ldrb	r3, [r3, #3]
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3720      	adds	r7, #32
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
	...

08009f10 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b082      	sub	sp, #8
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	4a08      	ldr	r2, [pc, #32]	; (8009f40 <shci_init+0x30>)
 8009f20:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8009f22:	4a08      	ldr	r2, [pc, #32]	; (8009f44 <shci_init+0x34>)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8009f28:	4806      	ldr	r0, [pc, #24]	; (8009f44 <shci_init+0x34>)
 8009f2a:	f000 f90d 	bl	800a148 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4618      	mov	r0, r3
 8009f34:	f000 f890 	bl	800a058 <TlInit>

  return;
 8009f38:	bf00      	nop
}
 8009f3a:	3708      	adds	r7, #8
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}
 8009f40:	2000031c 	.word	0x2000031c
 8009f44:	200002fc 	.word	0x200002fc

08009f48 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009f4e:	4820      	ldr	r0, [pc, #128]	; (8009fd0 <shci_user_evt_proc+0x88>)
 8009f50:	f000 f91e 	bl	800a190 <LST_is_empty>
 8009f54:	4603      	mov	r3, r0
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d128      	bne.n	8009fac <shci_user_evt_proc+0x64>
 8009f5a:	4b1e      	ldr	r3, [pc, #120]	; (8009fd4 <shci_user_evt_proc+0x8c>)
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d024      	beq.n	8009fac <shci_user_evt_proc+0x64>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009f62:	f107 030c 	add.w	r3, r7, #12
 8009f66:	4619      	mov	r1, r3
 8009f68:	4819      	ldr	r0, [pc, #100]	; (8009fd0 <shci_user_evt_proc+0x88>)
 8009f6a:	f000 f998 	bl	800a29e <LST_remove_head>

    SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009f6e:	4b19      	ldr	r3, [pc, #100]	; (8009fd4 <shci_user_evt_proc+0x8c>)
 8009f70:	2201      	movs	r2, #1
 8009f72:	701a      	strb	r2, [r3, #0]

    if (shciContext.UserEvtRx != NULL)
 8009f74:	4b18      	ldr	r3, [pc, #96]	; (8009fd8 <shci_user_evt_proc+0x90>)
 8009f76:	69db      	ldr	r3, [r3, #28]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d009      	beq.n	8009f90 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	60bb      	str	r3, [r7, #8]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009f80:	4b15      	ldr	r3, [pc, #84]	; (8009fd8 <shci_user_evt_proc+0x90>)
 8009f82:	69db      	ldr	r3, [r3, #28]
 8009f84:	1d3a      	adds	r2, r7, #4
 8009f86:	4610      	mov	r0, r2
 8009f88:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8009f8a:	793a      	ldrb	r2, [r7, #4]
 8009f8c:	4b11      	ldr	r3, [pc, #68]	; (8009fd4 <shci_user_evt_proc+0x8c>)
 8009f8e:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8009f90:	4b10      	ldr	r3, [pc, #64]	; (8009fd4 <shci_user_evt_proc+0x8c>)
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d004      	beq.n	8009fa2 <shci_user_evt_proc+0x5a>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f000 fbf6 	bl	800a78c <TL_MM_EvtDone>
 8009fa0:	e004      	b.n	8009fac <shci_user_evt_proc+0x64>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	480a      	ldr	r0, [pc, #40]	; (8009fd0 <shci_user_evt_proc+0x88>)
 8009fa8:	f000 f912 	bl	800a1d0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009fac:	4808      	ldr	r0, [pc, #32]	; (8009fd0 <shci_user_evt_proc+0x88>)
 8009fae:	f000 f8ef 	bl	800a190 <LST_is_empty>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d107      	bne.n	8009fc8 <shci_user_evt_proc+0x80>
 8009fb8:	4b06      	ldr	r3, [pc, #24]	; (8009fd4 <shci_user_evt_proc+0x8c>)
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d003      	beq.n	8009fc8 <shci_user_evt_proc+0x80>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8009fc0:	4803      	ldr	r0, [pc, #12]	; (8009fd0 <shci_user_evt_proc+0x88>)
 8009fc2:	f7f6 fdab 	bl	8000b1c <shci_notify_asynch_evt>
  }


  return;
 8009fc6:	bf00      	nop
 8009fc8:	bf00      	nop
}
 8009fca:	3710      	adds	r7, #16
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}
 8009fd0:	20000108 	.word	0x20000108
 8009fd4:	20000118 	.word	0x20000118
 8009fd8:	200002fc 	.word	0x200002fc

08009fdc <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60ba      	str	r2, [r7, #8]
 8009fe4:	607b      	str	r3, [r7, #4]
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	81fb      	strh	r3, [r7, #14]
 8009fea:	460b      	mov	r3, r1
 8009fec:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8009fee:	2000      	movs	r0, #0
 8009ff0:	f000 f864 	bl	800a0bc <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8009ff4:	4b16      	ldr	r3, [pc, #88]	; (800a050 <shci_send+0x74>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	89fa      	ldrh	r2, [r7, #14]
 8009ffa:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8009ffe:	4b14      	ldr	r3, [pc, #80]	; (800a050 <shci_send+0x74>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	7b7a      	ldrb	r2, [r7, #13]
 800a004:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800a006:	4b12      	ldr	r3, [pc, #72]	; (800a050 <shci_send+0x74>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	330c      	adds	r3, #12
 800a00c:	7b7a      	ldrb	r2, [r7, #13]
 800a00e:	68b9      	ldr	r1, [r7, #8]
 800a010:	4618      	mov	r0, r3
 800a012:	f001 fa5f 	bl	800b4d4 <memcpy>

  shciContext.io.Send(0,0);
 800a016:	4b0f      	ldr	r3, [pc, #60]	; (800a054 <shci_send+0x78>)
 800a018:	691b      	ldr	r3, [r3, #16]
 800a01a:	2100      	movs	r1, #0
 800a01c:	2000      	movs	r0, #0
 800a01e:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800a020:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800a024:	f7f6 fd91 	bl	8000b4a <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f103 0008 	add.w	r0, r3, #8
 800a02e:	4b08      	ldr	r3, [pc, #32]	; (800a050 <shci_send+0x74>)
 800a030:	6819      	ldr	r1, [r3, #0]
 800a032:	4b07      	ldr	r3, [pc, #28]	; (800a050 <shci_send+0x74>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	789b      	ldrb	r3, [r3, #2]
 800a038:	3303      	adds	r3, #3
 800a03a:	461a      	mov	r2, r3
 800a03c:	f001 fa4a 	bl	800b4d4 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a040:	2001      	movs	r0, #1
 800a042:	f000 f83b 	bl	800a0bc <Cmd_SetStatus>

  return;
 800a046:	bf00      	nop
}
 800a048:	3710      	adds	r7, #16
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	20000114 	.word	0x20000114
 800a054:	200002fc 	.word	0x200002fc

0800a058 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b086      	sub	sp, #24
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800a060:	4a10      	ldr	r2, [pc, #64]	; (800a0a4 <TlInit+0x4c>)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800a066:	4810      	ldr	r0, [pc, #64]	; (800a0a8 <TlInit+0x50>)
 800a068:	f000 f882 	bl	800a170 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a06c:	2001      	movs	r0, #1
 800a06e:	f000 f825 	bl	800a0bc <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a072:	4b0e      	ldr	r3, [pc, #56]	; (800a0ac <TlInit+0x54>)
 800a074:	2201      	movs	r2, #1
 800a076:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800a078:	4b0d      	ldr	r3, [pc, #52]	; (800a0b0 <TlInit+0x58>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d00c      	beq.n	800a09a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800a084:	4b0b      	ldr	r3, [pc, #44]	; (800a0b4 <TlInit+0x5c>)
 800a086:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800a088:	4b0b      	ldr	r3, [pc, #44]	; (800a0b8 <TlInit+0x60>)
 800a08a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800a08c:	4b08      	ldr	r3, [pc, #32]	; (800a0b0 <TlInit+0x58>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f107 020c 	add.w	r2, r7, #12
 800a094:	4610      	mov	r0, r2
 800a096:	4798      	blx	r3
  }

  return;
 800a098:	bf00      	nop
 800a09a:	bf00      	nop
}
 800a09c:	3718      	adds	r7, #24
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}
 800a0a2:	bf00      	nop
 800a0a4:	20000114 	.word	0x20000114
 800a0a8:	20000108 	.word	0x20000108
 800a0ac:	20000118 	.word	0x20000118
 800a0b0:	200002fc 	.word	0x200002fc
 800a0b4:	0800a10d 	.word	0x0800a10d
 800a0b8:	0800a125 	.word	0x0800a125

0800a0bc <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800a0c6:	79fb      	ldrb	r3, [r7, #7]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d10b      	bne.n	800a0e4 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800a0cc:	4b0d      	ldr	r3, [pc, #52]	; (800a104 <Cmd_SetStatus+0x48>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d003      	beq.n	800a0dc <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800a0d4:	4b0b      	ldr	r3, [pc, #44]	; (800a104 <Cmd_SetStatus+0x48>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	2000      	movs	r0, #0
 800a0da:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800a0dc:	4b0a      	ldr	r3, [pc, #40]	; (800a108 <Cmd_SetStatus+0x4c>)
 800a0de:	2200      	movs	r2, #0
 800a0e0:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800a0e2:	e00b      	b.n	800a0fc <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800a0e4:	4b08      	ldr	r3, [pc, #32]	; (800a108 <Cmd_SetStatus+0x4c>)
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800a0ea:	4b06      	ldr	r3, [pc, #24]	; (800a104 <Cmd_SetStatus+0x48>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d004      	beq.n	800a0fc <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800a0f2:	4b04      	ldr	r3, [pc, #16]	; (800a104 <Cmd_SetStatus+0x48>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	2001      	movs	r0, #1
 800a0f8:	4798      	blx	r3
  return;
 800a0fa:	bf00      	nop
 800a0fc:	bf00      	nop
}
 800a0fe:	3708      	adds	r7, #8
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}
 800a104:	2000031c 	.word	0x2000031c
 800a108:	20000110 	.word	0x20000110

0800a10c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b082      	sub	sp, #8
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800a114:	2000      	movs	r0, #0
 800a116:	f7f6 fd0d 	bl	8000b34 <shci_cmd_resp_release>

  return;
 800a11a:	bf00      	nop
}
 800a11c:	3708      	adds	r7, #8
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
	...

0800a124 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800a12c:	6879      	ldr	r1, [r7, #4]
 800a12e:	4805      	ldr	r0, [pc, #20]	; (800a144 <TlUserEvtReceived+0x20>)
 800a130:	f000 f872 	bl	800a218 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a134:	4803      	ldr	r0, [pc, #12]	; (800a144 <TlUserEvtReceived+0x20>)
 800a136:	f7f6 fcf1 	bl	8000b1c <shci_notify_asynch_evt>

  return;
 800a13a:	bf00      	nop
}
 800a13c:	3708      	adds	r7, #8
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
 800a142:	bf00      	nop
 800a144:	20000108 	.word	0x20000108

0800a148 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800a148:	b480      	push	{r7}
 800a14a:	b083      	sub	sp, #12
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	4a05      	ldr	r2, [pc, #20]	; (800a168 <shci_register_io_bus+0x20>)
 800a154:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	4a04      	ldr	r2, [pc, #16]	; (800a16c <shci_register_io_bus+0x24>)
 800a15a:	611a      	str	r2, [r3, #16]

  return;
 800a15c:	bf00      	nop
}
 800a15e:	370c      	adds	r7, #12
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr
 800a168:	0800a641 	.word	0x0800a641
 800a16c:	0800a695 	.word	0x0800a695

0800a170 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800a170:	b480      	push	{r7}
 800a172:	b083      	sub	sp, #12
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	687a      	ldr	r2, [r7, #4]
 800a182:	605a      	str	r2, [r3, #4]
}
 800a184:	bf00      	nop
 800a186:	370c      	adds	r7, #12
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr

0800a190 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800a190:	b480      	push	{r7}
 800a192:	b087      	sub	sp, #28
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a198:	f3ef 8310 	mrs	r3, PRIMASK
 800a19c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a19e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a1a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1a2:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d102      	bne.n	800a1b4 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	75fb      	strb	r3, [r7, #23]
 800a1b2:	e001      	b.n	800a1b8 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	75fb      	strb	r3, [r7, #23]
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800a1c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	371c      	adds	r7, #28
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b087      	sub	sp, #28
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1da:	f3ef 8310 	mrs	r3, PRIMASK
 800a1de:	60fb      	str	r3, [r7, #12]
  return(result);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a1e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1e4:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681a      	ldr	r2, [r3, #0]
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	687a      	ldr	r2, [r7, #4]
 800a1f2:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	683a      	ldr	r2, [r7, #0]
 800a1f8:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	683a      	ldr	r2, [r7, #0]
 800a200:	605a      	str	r2, [r3, #4]
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a20c:	bf00      	nop
 800a20e:	371c      	adds	r7, #28
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr

0800a218 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800a218:	b480      	push	{r7}
 800a21a:	b087      	sub	sp, #28
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a222:	f3ef 8310 	mrs	r3, PRIMASK
 800a226:	60fb      	str	r3, [r7, #12]
  return(result);
 800a228:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a22a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a22c:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	685a      	ldr	r2, [r3, #4]
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	683a      	ldr	r2, [r7, #0]
 800a240:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	683a      	ldr	r2, [r7, #0]
 800a248:	601a      	str	r2, [r3, #0]
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a254:	bf00      	nop
 800a256:	371c      	adds	r7, #28
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr

0800a260 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800a260:	b480      	push	{r7}
 800a262:	b087      	sub	sp, #28
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a268:	f3ef 8310 	mrs	r3, PRIMASK
 800a26c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a26e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a270:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a272:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	687a      	ldr	r2, [r7, #4]
 800a27a:	6812      	ldr	r2, [r2, #0]
 800a27c:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	687a      	ldr	r2, [r7, #4]
 800a284:	6852      	ldr	r2, [r2, #4]
 800a286:	605a      	str	r2, [r3, #4]
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a292:	bf00      	nop
 800a294:	371c      	adds	r7, #28
 800a296:	46bd      	mov	sp, r7
 800a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29c:	4770      	bx	lr

0800a29e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b086      	sub	sp, #24
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
 800a2a6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2a8:	f3ef 8310 	mrs	r3, PRIMASK
 800a2ac:	60fb      	str	r3, [r7, #12]
  return(result);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a2b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a2b2:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681a      	ldr	r2, [r3, #0]
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f7ff ffcd 	bl	800a260 <LST_remove_node>
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a2d0:	bf00      	nop
 800a2d2:	3718      	adds	r7, #24
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 800a2d8:	b480      	push	{r7}
 800a2da:	af00      	add	r7, sp, #0
  return;
 800a2dc:	bf00      	nop
}
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr

0800a2e6 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 800a2e6:	b480      	push	{r7}
 800a2e8:	af00      	add	r7, sp, #0
  return;
 800a2ea:	bf00      	nop
}
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr

0800a2f4 <DIS_Init>:
__weak void DIS_Init( void )
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	af00      	add	r7, sp, #0
  return;
 800a2f8:	bf00      	nop
}
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr

0800a302 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 800a302:	b480      	push	{r7}
 800a304:	af00      	add	r7, sp, #0
  return;
 800a306:	bf00      	nop
}
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr

0800a310 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 800a310:	b480      	push	{r7}
 800a312:	af00      	add	r7, sp, #0
  return;
 800a314:	bf00      	nop
}
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr

0800a31e <HRS_Init>:
__weak void HRS_Init( void )
{
 800a31e:	b480      	push	{r7}
 800a320:	af00      	add	r7, sp, #0
  return;
 800a322:	bf00      	nop
}
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <HTS_Init>:
__weak void HTS_Init( void )
{
 800a32c:	b480      	push	{r7}
 800a32e:	af00      	add	r7, sp, #0
  return;
 800a330:	bf00      	nop
}
 800a332:	46bd      	mov	sp, r7
 800a334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a338:	4770      	bx	lr

0800a33a <IAS_Init>:
__weak void IAS_Init( void )
{
 800a33a:	b480      	push	{r7}
 800a33c:	af00      	add	r7, sp, #0
  return;
 800a33e:	bf00      	nop
}
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <LLS_Init>:
__weak void LLS_Init( void )
{
 800a348:	b480      	push	{r7}
 800a34a:	af00      	add	r7, sp, #0
  return;
 800a34c:	bf00      	nop
}
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr

0800a356 <TPS_Init>:
__weak void TPS_Init( void )
{
 800a356:	b480      	push	{r7}
 800a358:	af00      	add	r7, sp, #0
  return;
 800a35a:	bf00      	nop
}
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr

0800a364 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 800a364:	b480      	push	{r7}
 800a366:	af00      	add	r7, sp, #0
  return;
 800a368:	bf00      	nop
}
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr

0800a372 <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 800a372:	b480      	push	{r7}
 800a374:	af00      	add	r7, sp, #0
  return;
 800a376:	bf00      	nop
}
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr

0800a380 <MESH_Init>:
__weak void MESH_Init( void )
{
 800a380:	b480      	push	{r7}
 800a382:	af00      	add	r7, sp, #0
  return;
 800a384:	bf00      	nop
}
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr

0800a38e <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 800a38e:	b480      	push	{r7}
 800a390:	af00      	add	r7, sp, #0
  return;
 800a392:	bf00      	nop
}
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 800a39c:	b480      	push	{r7}
 800a39e:	af00      	add	r7, sp, #0
  return;
 800a3a0:	bf00      	nop
}
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr
	...

0800a3ac <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800a3b0:	4b04      	ldr	r3, [pc, #16]	; (800a3c4 <SVCCTL_Init+0x18>)
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800a3b6:	4b04      	ldr	r3, [pc, #16]	; (800a3c8 <SVCCTL_Init+0x1c>)
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800a3bc:	f000 f806 	bl	800a3cc <SVCCTL_SvcInit>

  return;
 800a3c0:	bf00      	nop
}
 800a3c2:	bd80      	pop	{r7, pc}
 800a3c4:	200000e4 	.word	0x200000e4
 800a3c8:	20000104 	.word	0x20000104

0800a3cc <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	af00      	add	r7, sp, #0
  BLS_Init();
 800a3d0:	f7ff ff82 	bl	800a2d8 <BLS_Init>

  CRS_STM_Init();
 800a3d4:	f7ff ff87 	bl	800a2e6 <CRS_STM_Init>

  DIS_Init();
 800a3d8:	f7ff ff8c 	bl	800a2f4 <DIS_Init>

  EDS_STM_Init();
 800a3dc:	f7ff ff91 	bl	800a302 <EDS_STM_Init>

  HIDS_Init();
 800a3e0:	f7ff ff96 	bl	800a310 <HIDS_Init>

  HRS_Init();
 800a3e4:	f7ff ff9b 	bl	800a31e <HRS_Init>

  HTS_Init();
 800a3e8:	f7ff ffa0 	bl	800a32c <HTS_Init>

  IAS_Init();
 800a3ec:	f7ff ffa5 	bl	800a33a <IAS_Init>

  LLS_Init();
 800a3f0:	f7ff ffaa 	bl	800a348 <LLS_Init>

  TPS_Init();
 800a3f4:	f7ff ffaf 	bl	800a356 <TPS_Init>

  MOTENV_STM_Init();
 800a3f8:	f7ff ffb4 	bl	800a364 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800a3fc:	f7ff fcae 	bl	8009d5c <P2PS_STM_Init>

  OTAS_STM_Init();
 800a400:	f7ff ffb7 	bl	800a372 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800a404:	f7ff ffc3 	bl	800a38e <BVOPUS_STM_Init>

  MESH_Init();
 800a408:	f7ff ffba 	bl	800a380 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800a40c:	f7ff ffc6 	bl	800a39c <SVCCTL_InitCustomSvc>
  
  return;
 800a410:	bf00      	nop
}
 800a412:	bd80      	pop	{r7, pc}

0800a414 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800a414:	b480      	push	{r7}
 800a416:	b083      	sub	sp, #12
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800a41c:	4b09      	ldr	r3, [pc, #36]	; (800a444 <SVCCTL_RegisterSvcHandler+0x30>)
 800a41e:	7f1b      	ldrb	r3, [r3, #28]
 800a420:	4619      	mov	r1, r3
 800a422:	4a08      	ldr	r2, [pc, #32]	; (800a444 <SVCCTL_RegisterSvcHandler+0x30>)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800a42a:	4b06      	ldr	r3, [pc, #24]	; (800a444 <SVCCTL_RegisterSvcHandler+0x30>)
 800a42c:	7f1b      	ldrb	r3, [r3, #28]
 800a42e:	3301      	adds	r3, #1
 800a430:	b2da      	uxtb	r2, r3
 800a432:	4b04      	ldr	r3, [pc, #16]	; (800a444 <SVCCTL_RegisterSvcHandler+0x30>)
 800a434:	771a      	strb	r2, [r3, #28]

  return;
 800a436:	bf00      	nop
}
 800a438:	370c      	adds	r7, #12
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr
 800a442:	bf00      	nop
 800a444:	200000e4 	.word	0x200000e4

0800a448 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b086      	sub	sp, #24
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	3301      	adds	r3, #1
 800a454:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800a456:	2300      	movs	r3, #0
 800a458:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	2bff      	cmp	r3, #255	; 0xff
 800a460:	d000      	beq.n	800a464 <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800a462:	e025      	b.n	800a4b0 <SVCCTL_UserEvtRx+0x68>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	3302      	adds	r3, #2
 800a468:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	881b      	ldrh	r3, [r3, #0]
 800a46e:	b29b      	uxth	r3, r3
 800a470:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a474:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a478:	d000      	beq.n	800a47c <SVCCTL_UserEvtRx+0x34>
          break;
 800a47a:	e018      	b.n	800a4ae <SVCCTL_UserEvtRx+0x66>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a47c:	2300      	movs	r3, #0
 800a47e:	757b      	strb	r3, [r7, #21]
 800a480:	e00d      	b.n	800a49e <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800a482:	7d7b      	ldrb	r3, [r7, #21]
 800a484:	4a18      	ldr	r2, [pc, #96]	; (800a4e8 <SVCCTL_UserEvtRx+0xa0>)
 800a486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	4798      	blx	r3
 800a48e:	4603      	mov	r3, r0
 800a490:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 800a492:	7dfb      	ldrb	r3, [r7, #23]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d108      	bne.n	800a4aa <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a498:	7d7b      	ldrb	r3, [r7, #21]
 800a49a:	3301      	adds	r3, #1
 800a49c:	757b      	strb	r3, [r7, #21]
 800a49e:	4b12      	ldr	r3, [pc, #72]	; (800a4e8 <SVCCTL_UserEvtRx+0xa0>)
 800a4a0:	7f1b      	ldrb	r3, [r3, #28]
 800a4a2:	7d7a      	ldrb	r2, [r7, #21]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d3ec      	bcc.n	800a482 <SVCCTL_UserEvtRx+0x3a>
          break;
 800a4a8:	e000      	b.n	800a4ac <SVCCTL_UserEvtRx+0x64>
              break;
 800a4aa:	bf00      	nop
          break;
 800a4ac:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 800a4ae:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800a4b0:	7dfb      	ldrb	r3, [r7, #23]
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	d009      	beq.n	800a4ca <SVCCTL_UserEvtRx+0x82>
 800a4b6:	2b02      	cmp	r3, #2
 800a4b8:	d00a      	beq.n	800a4d0 <SVCCTL_UserEvtRx+0x88>
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d10b      	bne.n	800a4d6 <SVCCTL_UserEvtRx+0x8e>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 fa62 	bl	800a988 <SVCCTL_App_Notification>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	75bb      	strb	r3, [r7, #22]
      break;
 800a4c8:	e008      	b.n	800a4dc <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	75bb      	strb	r3, [r7, #22]
      break;
 800a4ce:	e005      	b.n	800a4dc <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	75bb      	strb	r3, [r7, #22]
      break;
 800a4d4:	e002      	b.n	800a4dc <SVCCTL_UserEvtRx+0x94>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	75bb      	strb	r3, [r7, #22]
      break;
 800a4da:	bf00      	nop
  }

  return (return_status);
 800a4dc:	7dbb      	ldrb	r3, [r7, #22]
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3718      	adds	r7, #24
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
 800a4e6:	bf00      	nop
 800a4e8:	200000e4 	.word	0x200000e4

0800a4ec <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800a4f0:	f000 ff06 	bl	800b300 <HW_IPCC_Enable>

  return;
 800a4f4:	bf00      	nop
}
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <TL_Init>:


void TL_Init( void )
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800a4fc:	4b0f      	ldr	r3, [pc, #60]	; (800a53c <TL_Init+0x44>)
 800a4fe:	4a10      	ldr	r2, [pc, #64]	; (800a540 <TL_Init+0x48>)
 800a500:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800a502:	4b0e      	ldr	r3, [pc, #56]	; (800a53c <TL_Init+0x44>)
 800a504:	4a0f      	ldr	r2, [pc, #60]	; (800a544 <TL_Init+0x4c>)
 800a506:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800a508:	4b0c      	ldr	r3, [pc, #48]	; (800a53c <TL_Init+0x44>)
 800a50a:	4a0f      	ldr	r2, [pc, #60]	; (800a548 <TL_Init+0x50>)
 800a50c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800a50e:	4b0b      	ldr	r3, [pc, #44]	; (800a53c <TL_Init+0x44>)
 800a510:	4a0e      	ldr	r2, [pc, #56]	; (800a54c <TL_Init+0x54>)
 800a512:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_sys_table = &TL_SysTable;
 800a514:	4b09      	ldr	r3, [pc, #36]	; (800a53c <TL_Init+0x44>)
 800a516:	4a0e      	ldr	r2, [pc, #56]	; (800a550 <TL_Init+0x58>)
 800a518:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800a51a:	4b08      	ldr	r3, [pc, #32]	; (800a53c <TL_Init+0x44>)
 800a51c:	4a0d      	ldr	r2, [pc, #52]	; (800a554 <TL_Init+0x5c>)
 800a51e:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800a520:	4b06      	ldr	r3, [pc, #24]	; (800a53c <TL_Init+0x44>)
 800a522:	4a0d      	ldr	r2, [pc, #52]	; (800a558 <TL_Init+0x60>)
 800a524:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800a526:	4b05      	ldr	r3, [pc, #20]	; (800a53c <TL_Init+0x44>)
 800a528:	4a0c      	ldr	r2, [pc, #48]	; (800a55c <TL_Init+0x64>)
 800a52a:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800a52c:	4b03      	ldr	r3, [pc, #12]	; (800a53c <TL_Init+0x44>)
 800a52e:	4a0c      	ldr	r2, [pc, #48]	; (800a560 <TL_Init+0x68>)
 800a530:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800a532:	f000 feed 	bl	800b310 <HW_IPCC_Init>

  return;
 800a536:	bf00      	nop
}
 800a538:	bd80      	pop	{r7, pc}
 800a53a:	bf00      	nop
 800a53c:	20030000 	.word	0x20030000
 800a540:	20030024 	.word	0x20030024
 800a544:	20030044 	.word	0x20030044
 800a548:	20030054 	.word	0x20030054
 800a54c:	20030060 	.word	0x20030060
 800a550:	20030068 	.word	0x20030068
 800a554:	20030070 	.word	0x20030070
 800a558:	2003008c 	.word	0x2003008c
 800a55c:	20030090 	.word	0x20030090
 800a560:	2003009c 	.word	0x2003009c

0800a564 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800a570:	4811      	ldr	r0, [pc, #68]	; (800a5b8 <TL_BLE_Init+0x54>)
 800a572:	f7ff fdfd 	bl	800a170 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800a576:	4b11      	ldr	r3, [pc, #68]	; (800a5bc <TL_BLE_Init+0x58>)
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	689a      	ldr	r2, [r3, #8]
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	68da      	ldr	r2, [r3, #12]
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	4a0c      	ldr	r2, [pc, #48]	; (800a5c0 <TL_BLE_Init+0x5c>)
 800a590:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	4a08      	ldr	r2, [pc, #32]	; (800a5b8 <TL_BLE_Init+0x54>)
 800a596:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800a598:	f000 fed0 	bl	800b33c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a08      	ldr	r2, [pc, #32]	; (800a5c4 <TL_BLE_Init+0x60>)
 800a5a2:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	685b      	ldr	r3, [r3, #4]
 800a5a8:	4a07      	ldr	r2, [pc, #28]	; (800a5c8 <TL_BLE_Init+0x64>)
 800a5aa:	6013      	str	r3, [r2, #0]

  return 0;
 800a5ac:	2300      	movs	r3, #0
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3710      	adds	r7, #16
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
 800a5b6:	bf00      	nop
 800a5b8:	20030a34 	.word	0x20030a34
 800a5bc:	20030000 	.word	0x20030000
 800a5c0:	20030a24 	.word	0x20030a24
 800a5c4:	20000328 	.word	0x20000328
 800a5c8:	2000032c 	.word	0x2000032c

0800a5cc <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b082      	sub	sp, #8
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	807b      	strh	r3, [r7, #2]
  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800a5d8:	4b05      	ldr	r3, [pc, #20]	; (800a5f0 <TL_BLE_SendCmd+0x24>)
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	721a      	strb	r2, [r3, #8]

  HW_IPCC_BLE_SendCmd();
 800a5e2:	f000 feb5 	bl	800b350 <HW_IPCC_BLE_SendCmd>

  return 0;
 800a5e6:	2300      	movs	r3, #0
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3708      	adds	r7, #8
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}
 800a5f0:	20030000 	.word	0x20030000

0800a5f4 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b082      	sub	sp, #8
 800a5f8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800a5fa:	e009      	b.n	800a610 <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800a5fc:	1d3b      	adds	r3, r7, #4
 800a5fe:	4619      	mov	r1, r3
 800a600:	4808      	ldr	r0, [pc, #32]	; (800a624 <HW_IPCC_BLE_RxEvtNot+0x30>)
 800a602:	f7ff fe4c 	bl	800a29e <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 800a606:	4b08      	ldr	r3, [pc, #32]	; (800a628 <HW_IPCC_BLE_RxEvtNot+0x34>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	687a      	ldr	r2, [r7, #4]
 800a60c:	4610      	mov	r0, r2
 800a60e:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800a610:	4804      	ldr	r0, [pc, #16]	; (800a624 <HW_IPCC_BLE_RxEvtNot+0x30>)
 800a612:	f7ff fdbd 	bl	800a190 <LST_is_empty>
 800a616:	4603      	mov	r3, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d0ef      	beq.n	800a5fc <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800a61c:	bf00      	nop
}
 800a61e:	3708      	adds	r7, #8
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}
 800a624:	20030a34 	.word	0x20030a34
 800a628:	20000328 	.word	0x20000328

0800a62c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800a630:	4b02      	ldr	r3, [pc, #8]	; (800a63c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4798      	blx	r3

  return;
 800a636:	bf00      	nop
}
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	2000032c 	.word	0x2000032c

0800a640 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b084      	sub	sp, #16
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800a64c:	480d      	ldr	r0, [pc, #52]	; (800a684 <TL_SYS_Init+0x44>)
 800a64e:	f7ff fd8f 	bl	800a170 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800a652:	4b0d      	ldr	r3, [pc, #52]	; (800a688 <TL_SYS_Init+0x48>)
 800a654:	68db      	ldr	r3, [r3, #12]
 800a656:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	689a      	ldr	r2, [r3, #8]
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	4a08      	ldr	r2, [pc, #32]	; (800a684 <TL_SYS_Init+0x44>)
 800a664:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800a666:	f000 fe95 	bl	800b394 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4a07      	ldr	r2, [pc, #28]	; (800a68c <TL_SYS_Init+0x4c>)
 800a670:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	4a06      	ldr	r2, [pc, #24]	; (800a690 <TL_SYS_Init+0x50>)
 800a678:	6013      	str	r3, [r2, #0]

  return 0;
 800a67a:	2300      	movs	r3, #0
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3710      	adds	r7, #16
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}
 800a684:	20030a3c 	.word	0x20030a3c
 800a688:	20030000 	.word	0x20030000
 800a68c:	20000330 	.word	0x20000330
 800a690:	20000334 	.word	0x20000334

0800a694 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	460b      	mov	r3, r1
 800a69e:	807b      	strh	r3, [r7, #2]
  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800a6a0:	4b05      	ldr	r3, [pc, #20]	; (800a6b8 <TL_SYS_SendCmd+0x24>)
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	2210      	movs	r2, #16
 800a6a8:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 800a6aa:	f000 fe7d 	bl	800b3a8 <HW_IPCC_SYS_SendCmd>

  return 0;
 800a6ae:	2300      	movs	r3, #0
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3708      	adds	r7, #8
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}
 800a6b8:	20030000 	.word	0x20030000

0800a6bc <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a6c0:	4b04      	ldr	r3, [pc, #16]	; (800a6d4 <HW_IPCC_SYS_CmdEvtNot+0x18>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4a04      	ldr	r2, [pc, #16]	; (800a6d8 <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 800a6c6:	68d2      	ldr	r2, [r2, #12]
 800a6c8:	6812      	ldr	r2, [r2, #0]
 800a6ca:	4610      	mov	r0, r2
 800a6cc:	4798      	blx	r3

  return;
 800a6ce:	bf00      	nop
}
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	20000330 	.word	0x20000330
 800a6d8:	20030000 	.word	0x20030000

0800a6dc <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b082      	sub	sp, #8
 800a6e0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a6e2:	e009      	b.n	800a6f8 <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800a6e4:	1d3b      	adds	r3, r7, #4
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	4808      	ldr	r0, [pc, #32]	; (800a70c <HW_IPCC_SYS_EvtNot+0x30>)
 800a6ea:	f7ff fdd8 	bl	800a29e <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 800a6ee:	4b08      	ldr	r3, [pc, #32]	; (800a710 <HW_IPCC_SYS_EvtNot+0x34>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	687a      	ldr	r2, [r7, #4]
 800a6f4:	4610      	mov	r0, r2
 800a6f6:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a6f8:	4804      	ldr	r0, [pc, #16]	; (800a70c <HW_IPCC_SYS_EvtNot+0x30>)
 800a6fa:	f7ff fd49 	bl	800a190 <LST_is_empty>
 800a6fe:	4603      	mov	r3, r0
 800a700:	2b00      	cmp	r3, #0
 800a702:	d0ef      	beq.n	800a6e4 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800a704:	bf00      	nop
}
 800a706:	3708      	adds	r7, #8
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}
 800a70c:	20030a3c 	.word	0x20030a3c
 800a710:	20000334 	.word	0x20000334

0800a714 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800a71c:	4817      	ldr	r0, [pc, #92]	; (800a77c <TL_MM_Init+0x68>)
 800a71e:	f7ff fd27 	bl	800a170 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800a722:	4817      	ldr	r0, [pc, #92]	; (800a780 <TL_MM_Init+0x6c>)
 800a724:	f7ff fd24 	bl	800a170 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800a728:	4b16      	ldr	r3, [pc, #88]	; (800a784 <TL_MM_Init+0x70>)
 800a72a:	691b      	ldr	r3, [r3, #16]
 800a72c:	4a16      	ldr	r2, [pc, #88]	; (800a788 <TL_MM_Init+0x74>)
 800a72e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800a730:	4b15      	ldr	r3, [pc, #84]	; (800a788 <TL_MM_Init+0x74>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	6892      	ldr	r2, [r2, #8]
 800a738:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800a73a:	4b13      	ldr	r3, [pc, #76]	; (800a788 <TL_MM_Init+0x74>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	68d2      	ldr	r2, [r2, #12]
 800a742:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800a744:	4b10      	ldr	r3, [pc, #64]	; (800a788 <TL_MM_Init+0x74>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a0c      	ldr	r2, [pc, #48]	; (800a77c <TL_MM_Init+0x68>)
 800a74a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800a74c:	4b0e      	ldr	r3, [pc, #56]	; (800a788 <TL_MM_Init+0x74>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	687a      	ldr	r2, [r7, #4]
 800a752:	6812      	ldr	r2, [r2, #0]
 800a754:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800a756:	4b0c      	ldr	r3, [pc, #48]	; (800a788 <TL_MM_Init+0x74>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	687a      	ldr	r2, [r7, #4]
 800a75c:	6852      	ldr	r2, [r2, #4]
 800a75e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800a760:	4b09      	ldr	r3, [pc, #36]	; (800a788 <TL_MM_Init+0x74>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	687a      	ldr	r2, [r7, #4]
 800a766:	6912      	ldr	r2, [r2, #16]
 800a768:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800a76a:	4b07      	ldr	r3, [pc, #28]	; (800a788 <TL_MM_Init+0x74>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	6952      	ldr	r2, [r2, #20]
 800a772:	619a      	str	r2, [r3, #24]

  return;
 800a774:	bf00      	nop
}
 800a776:	3708      	adds	r7, #8
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	200300a8 	.word	0x200300a8
 800a780:	20000320 	.word	0x20000320
 800a784:	20030000 	.word	0x20030000
 800a788:	20000338 	.word	0x20000338

0800a78c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b082      	sub	sp, #8
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800a794:	6879      	ldr	r1, [r7, #4]
 800a796:	4805      	ldr	r0, [pc, #20]	; (800a7ac <TL_MM_EvtDone+0x20>)
 800a798:	f7ff fd3e 	bl	800a218 <LST_insert_tail>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800a79c:	4804      	ldr	r0, [pc, #16]	; (800a7b0 <TL_MM_EvtDone+0x24>)
 800a79e:	f000 fe29 	bl	800b3f4 <HW_IPCC_MM_SendFreeBuf>

  return;
 800a7a2:	bf00      	nop
}
 800a7a4:	3708      	adds	r7, #8
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
 800a7aa:	bf00      	nop
 800a7ac:	20000320 	.word	0x20000320
 800a7b0:	0800a7b5 	.word	0x0800a7b5

0800a7b4 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b082      	sub	sp, #8
 800a7b8:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a7ba:	e00c      	b.n	800a7d6 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800a7bc:	1d3b      	adds	r3, r7, #4
 800a7be:	4619      	mov	r1, r3
 800a7c0:	480a      	ldr	r0, [pc, #40]	; (800a7ec <SendFreeBuf+0x38>)
 800a7c2:	f7ff fd6c 	bl	800a29e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800a7c6:	4b0a      	ldr	r3, [pc, #40]	; (800a7f0 <SendFreeBuf+0x3c>)
 800a7c8:	691b      	ldr	r3, [r3, #16]
 800a7ca:	691b      	ldr	r3, [r3, #16]
 800a7cc:	687a      	ldr	r2, [r7, #4]
 800a7ce:	4611      	mov	r1, r2
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f7ff fd21 	bl	800a218 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a7d6:	4805      	ldr	r0, [pc, #20]	; (800a7ec <SendFreeBuf+0x38>)
 800a7d8:	f7ff fcda 	bl	800a190 <LST_is_empty>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d0ec      	beq.n	800a7bc <SendFreeBuf+0x8>
  }

  return;
 800a7e2:	bf00      	nop
}
 800a7e4:	3708      	adds	r7, #8
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
 800a7ea:	bf00      	nop
 800a7ec:	20000320 	.word	0x20000320
 800a7f0:	20030000 	.word	0x20030000

0800a7f4 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800a7f8:	4805      	ldr	r0, [pc, #20]	; (800a810 <TL_TRACES_Init+0x1c>)
 800a7fa:	f7ff fcb9 	bl	800a170 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800a7fe:	4b05      	ldr	r3, [pc, #20]	; (800a814 <TL_TRACES_Init+0x20>)
 800a800:	695b      	ldr	r3, [r3, #20]
 800a802:	4a03      	ldr	r2, [pc, #12]	; (800a810 <TL_TRACES_Init+0x1c>)
 800a804:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800a806:	f000 fe2b 	bl	800b460 <HW_IPCC_TRACES_Init>

  return;
 800a80a:	bf00      	nop
}
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	bf00      	nop
 800a810:	200300b0 	.word	0x200300b0
 800a814:	20030000 	.word	0x20030000

0800a818 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b082      	sub	sp, #8
 800a81c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a81e:	e008      	b.n	800a832 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800a820:	1d3b      	adds	r3, r7, #4
 800a822:	4619      	mov	r1, r3
 800a824:	4808      	ldr	r0, [pc, #32]	; (800a848 <HW_IPCC_TRACES_EvtNot+0x30>)
 800a826:	f7ff fd3a 	bl	800a29e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	4618      	mov	r0, r3
 800a82e:	f000 f80d 	bl	800a84c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a832:	4805      	ldr	r0, [pc, #20]	; (800a848 <HW_IPCC_TRACES_EvtNot+0x30>)
 800a834:	f7ff fcac 	bl	800a190 <LST_is_empty>
 800a838:	4603      	mov	r3, r0
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d0f0      	beq.n	800a820 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800a83e:	bf00      	nop
}
 800a840:	3708      	adds	r7, #8
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop
 800a848:	200300b0 	.word	0x200300b0

0800a84c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt ){};
 800a84c:	b480      	push	{r7}
 800a84e:	b083      	sub	sp, #12
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	bf00      	nop
 800a856:	370c      	adds	r7, #12
 800a858:	46bd      	mov	sp, r7
 800a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85e:	4770      	bx	lr

0800a860 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800a860:	b480      	push	{r7}
 800a862:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800a864:	4b03      	ldr	r3, [pc, #12]	; (800a874 <LL_FLASH_GetUDN+0x14>)
 800a866:	681b      	ldr	r3, [r3, #0]
}
 800a868:	4618      	mov	r0, r3
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr
 800a872:	bf00      	nop
 800a874:	1fff7580 	.word	0x1fff7580

0800a878 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800a878:	b480      	push	{r7}
 800a87a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800a87c:	4b03      	ldr	r3, [pc, #12]	; (800a88c <LL_FLASH_GetDeviceID+0x14>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	b2db      	uxtb	r3, r3
}
 800a882:	4618      	mov	r0, r3
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr
 800a88c:	1fff7584 	.word	0x1fff7584

0800a890 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800a890:	b480      	push	{r7}
 800a892:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800a894:	4b03      	ldr	r3, [pc, #12]	; (800a8a4 <LL_FLASH_GetSTCompanyID+0x14>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	0a1b      	lsrs	r3, r3, #8
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr
 800a8a4:	1fff7584 	.word	0x1fff7584

0800a8a8 <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 800a8a8:	b5b0      	push	{r4, r5, r7, lr}
 800a8aa:	b08c      	sub	sp, #48	; 0x30
 800a8ac:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800a8ae:	4b2b      	ldr	r3, [pc, #172]	; (800a95c <APP_BLE_Init+0xb4>)
 800a8b0:	463c      	mov	r4, r7
 800a8b2:	461d      	mov	r5, r3
 800a8b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a8b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a8b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a8ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a8bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a8c0:	c407      	stmia	r4!, {r0, r1, r2}
 800a8c2:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 800a8c4:	f000 f928 	bl	800ab18 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800a8c8:	2101      	movs	r1, #1
 800a8ca:	2002      	movs	r0, #2
 800a8cc:	f7f7 fc8a 	bl	80021e4 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800a8d0:	4a23      	ldr	r2, [pc, #140]	; (800a960 <APP_BLE_Init+0xb8>)
 800a8d2:	2100      	movs	r1, #0
 800a8d4:	2004      	movs	r0, #4
 800a8d6:	f7f7 fded 	bl	80024b4 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 800a8da:	463b      	mov	r3, r7
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f7ff faff 	bl	8009ee0 <SHCI_C2_BLE_Init>

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800a8e2:	f000 f92f 	bl	800ab44 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800a8e6:	f7ff fd61 	bl	800a3ac <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800a8ea:	4b1e      	ldr	r3, [pc, #120]	; (800a964 <APP_BLE_Init+0xbc>)
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;  
 800a8f2:	4b1c      	ldr	r3, [pc, #112]	; (800a964 <APP_BLE_Init+0xbc>)
 800a8f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a8f8:	84da      	strh	r2, [r3, #38]	; 0x26
  /**
   * From here, all initialization are BLE application specific
   */
    UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800a8fa:	4a1b      	ldr	r2, [pc, #108]	; (800a968 <APP_BLE_Init+0xc0>)
 800a8fc:	2100      	movs	r1, #0
 800a8fe:	2001      	movs	r0, #1
 800a900:	f7f7 fdd8 	bl	80024b4 <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)  
    manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)  
  aci_hal_set_radio_activity_mask(0x0006);
 800a904:	2006      	movs	r0, #6
 800a906:	f7fe fe9d 	bl	8009644 <aci_hal_set_radio_activity_mask>
  mutex = 1; 
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 800a90a:	f000 fb63 	bl	800afd4 <P2PS_APP_Init>

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 800a90e:	4b17      	ldr	r3, [pc, #92]	; (800a96c <APP_BLE_Init+0xc4>)
 800a910:	2200      	movs	r2, #0
 800a912:	4917      	ldr	r1, [pc, #92]	; (800a970 <APP_BLE_Init+0xc8>)
 800a914:	2000      	movs	r0, #0
 800a916:	f7f6 fee5 	bl	80016e4 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800a91a:	4b16      	ldr	r3, [pc, #88]	; (800a974 <APP_BLE_Init+0xcc>)
 800a91c:	2200      	movs	r2, #0
 800a91e:	4916      	ldr	r1, [pc, #88]	; (800a978 <APP_BLE_Init+0xd0>)
 800a920:	2000      	movs	r0, #0
 800a922:	f7f6 fedf 	bl	80016e4 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800a926:	4b0f      	ldr	r3, [pc, #60]	; (800a964 <APP_BLE_Init+0xbc>)
 800a928:	2200      	movs	r2, #0
 800a92a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800a92e:	4b0d      	ldr	r3, [pc, #52]	; (800a964 <APP_BLE_Init+0xbc>)
 800a930:	2200      	movs	r2, #0
 800a932:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800a936:	4b11      	ldr	r3, [pc, #68]	; (800a97c <APP_BLE_Init+0xd4>)
 800a938:	2280      	movs	r2, #128	; 0x80
 800a93a:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800a93c:	4b10      	ldr	r3, [pc, #64]	; (800a980 <APP_BLE_Init+0xd8>)
 800a93e:	22a0      	movs	r2, #160	; 0xa0
 800a940:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 800a942:	2001      	movs	r0, #1
 800a944:	f000 f9d8 	bl	800acf8 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */
   HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 800a948:	2201      	movs	r2, #1
 800a94a:	2120      	movs	r1, #32
 800a94c:	480d      	ldr	r0, [pc, #52]	; (800a984 <APP_BLE_Init+0xdc>)
 800a94e:	f7f8 fdeb 	bl	8003528 <HAL_GPIO_WritePin>
/* USER CODE END APP_BLE_Init_2 */
  return;
 800a952:	bf00      	nop
}
 800a954:	3730      	adds	r7, #48	; 0x30
 800a956:	46bd      	mov	sp, r7
 800a958:	bdb0      	pop	{r4, r5, r7, pc}
 800a95a:	bf00      	nop
 800a95c:	0800b550 	.word	0x0800b550
 800a960:	0800991d 	.word	0x0800991d
 800a964:	2000011c 	.word	0x2000011c
 800a968:	0800ae65 	.word	0x0800ae65
 800a96c:	0800ae99 	.word	0x0800ae99
 800a970:	200001ad 	.word	0x200001ad
 800a974:	0800aea9 	.word	0x0800aea9
 800a978:	200001ae 	.word	0x200001ae
 800a97c:	200001b0 	.word	0x200001b0
 800a980:	200001b2 	.word	0x200001b2
 800a984:	48000400 	.word	0x48000400

0800a988 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b08a      	sub	sp, #40	; 0x28
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blue_aci *blue_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete; 
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800a990:	2342      	movs	r3, #66	; 0x42
 800a992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	3301      	adds	r3, #1
 800a99a:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 800a99c:	6a3b      	ldr	r3, [r7, #32]
 800a99e:	781b      	ldrb	r3, [r3, #0]
 800a9a0:	2b3e      	cmp	r3, #62	; 0x3e
 800a9a2:	d02f      	beq.n	800aa04 <SVCCTL_App_Notification+0x7c>
 800a9a4:	2bff      	cmp	r3, #255	; 0xff
 800a9a6:	f000 808c 	beq.w	800aac2 <SVCCTL_App_Notification+0x13a>
 800a9aa:	2b05      	cmp	r3, #5
 800a9ac:	d000      	beq.n	800a9b0 <SVCCTL_App_Notification+0x28>

        default:
        /* USER CODE BEGIN ECODE_DEFAULT*/

        /* USER CODE END ECODE_DEFAULT*/
          break;
 800a9ae:	e09b      	b.n	800aae8 <SVCCTL_App_Notification+0x160>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 800a9b0:	6a3b      	ldr	r3, [r7, #32]
 800a9b2:	3302      	adds	r3, #2
 800a9b4:	60fb      	str	r3, [r7, #12]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a9bc:	b29a      	uxth	r2, r3
 800a9be:	4b4d      	ldr	r3, [pc, #308]	; (800aaf4 <SVCCTL_App_Notification+0x16c>)
 800a9c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d106      	bne.n	800a9d4 <SVCCTL_App_Notification+0x4c>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800a9c6:	4b4b      	ldr	r3, [pc, #300]	; (800aaf4 <SVCCTL_App_Notification+0x16c>)
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	84da      	strh	r2, [r3, #38]	; 0x26
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800a9cc:	4b49      	ldr	r3, [pc, #292]	; (800aaf4 <SVCCTL_App_Notification+0x16c>)
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      Adv_Request(APP_BLE_FAST_ADV);
 800a9d4:	2001      	movs	r0, #1
 800a9d6:	f000 f98f 	bl	800acf8 <Adv_Request>
        handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800a9da:	4b47      	ldr	r3, [pc, #284]	; (800aaf8 <SVCCTL_App_Notification+0x170>)
 800a9dc:	2201      	movs	r2, #1
 800a9de:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800a9e0:	4b44      	ldr	r3, [pc, #272]	; (800aaf4 <SVCCTL_App_Notification+0x16c>)
 800a9e2:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800a9e4:	4b44      	ldr	r3, [pc, #272]	; (800aaf8 <SVCCTL_App_Notification+0x170>)
 800a9e6:	805a      	strh	r2, [r3, #2]
        P2PS_APP_Notification(&handleNotification);
 800a9e8:	4843      	ldr	r0, [pc, #268]	; (800aaf8 <SVCCTL_App_Notification+0x170>)
 800a9ea:	f000 fadf 	bl	800afac <P2PS_APP_Notification>
        HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	2101      	movs	r1, #1
 800a9f2:	4842      	ldr	r0, [pc, #264]	; (800aafc <SVCCTL_App_Notification+0x174>)
 800a9f4:	f7f8 fd98 	bl	8003528 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	2120      	movs	r1, #32
 800a9fc:	483f      	ldr	r0, [pc, #252]	; (800aafc <SVCCTL_App_Notification+0x174>)
 800a9fe:	f7f8 fd93 	bl	8003528 <HAL_GPIO_WritePin>
    break; /* EVT_DISCONN_COMPLETE */
 800aa02:	e071      	b.n	800aae8 <SVCCTL_App_Notification+0x160>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 800aa04:	6a3b      	ldr	r3, [r7, #32]
 800aa06:	3302      	adds	r3, #2
 800aa08:	61bb      	str	r3, [r7, #24]
      switch (meta_evt->subevent)
 800aa0a:	69bb      	ldr	r3, [r7, #24]
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	2b03      	cmp	r3, #3
 800aa10:	d053      	beq.n	800aaba <SVCCTL_App_Notification+0x132>
 800aa12:	2b0c      	cmp	r3, #12
 800aa14:	d002      	beq.n	800aa1c <SVCCTL_App_Notification+0x94>
 800aa16:	2b01      	cmp	r3, #1
 800aa18:	d016      	beq.n	800aa48 <SVCCTL_App_Notification+0xc0>
          break;
 800aa1a:	e051      	b.n	800aac0 <SVCCTL_App_Notification+0x138>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 800aa1c:	69bb      	ldr	r3, [r7, #24]
 800aa1e:	3301      	adds	r3, #1
 800aa20:	617b      	str	r3, [r7, #20]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 800aa22:	4b34      	ldr	r3, [pc, #208]	; (800aaf4 <SVCCTL_App_Notification+0x16c>)
 800aa24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aa26:	f107 020a 	add.w	r2, r7, #10
 800aa2a:	f107 010b 	add.w	r1, r7, #11
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f7fe fe82 	bl	8009738 <hci_le_read_phy>
 800aa34:	4603      	mov	r3, r0
 800aa36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret == BLE_STATUS_SUCCESS)
 800aa3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d13d      	bne.n	800aabe <SVCCTL_App_Notification+0x136>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 800aa42:	7afb      	ldrb	r3, [r7, #11]
 800aa44:	2b02      	cmp	r3, #2
          break;
 800aa46:	e03a      	b.n	800aabe <SVCCTL_App_Notification+0x136>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 800aa48:	69bb      	ldr	r3, [r7, #24]
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800aa4e:	4b29      	ldr	r3, [pc, #164]	; (800aaf4 <SVCCTL_App_Notification+0x16c>)
 800aa50:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800aa54:	4618      	mov	r0, r3
 800aa56:	f7f6 febb 	bl	80017d0 <HW_TS_Stop>
            if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800aa5a:	4b26      	ldr	r3, [pc, #152]	; (800aaf4 <SVCCTL_App_Notification+0x16c>)
 800aa5c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800aa60:	2b04      	cmp	r3, #4
 800aa62:	d104      	bne.n	800aa6e <SVCCTL_App_Notification+0xe6>
              BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800aa64:	4b23      	ldr	r3, [pc, #140]	; (800aaf4 <SVCCTL_App_Notification+0x16c>)
 800aa66:	2206      	movs	r2, #6
 800aa68:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 800aa6c:	e003      	b.n	800aa76 <SVCCTL_App_Notification+0xee>
              BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800aa6e:	4b21      	ldr	r3, [pc, #132]	; (800aaf4 <SVCCTL_App_Notification+0x16c>)
 800aa70:	2205      	movs	r2, #5
 800aa72:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
                connection_complete_event->Connection_Handle;
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800aa7c:	b29a      	uxth	r2, r3
            BleApplicationContext.BleApplicationContext_legacy.connectionHandle =
 800aa7e:	4b1d      	ldr	r3, [pc, #116]	; (800aaf4 <SVCCTL_App_Notification+0x16c>)
 800aa80:	84da      	strh	r2, [r3, #38]	; 0x26
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800aa82:	4b1d      	ldr	r3, [pc, #116]	; (800aaf8 <SVCCTL_App_Notification+0x170>)
 800aa84:	2200      	movs	r2, #0
 800aa86:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800aa88:	4b1a      	ldr	r3, [pc, #104]	; (800aaf4 <SVCCTL_App_Notification+0x16c>)
 800aa8a:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800aa8c:	4b1a      	ldr	r3, [pc, #104]	; (800aaf8 <SVCCTL_App_Notification+0x170>)
 800aa8e:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 800aa90:	4819      	ldr	r0, [pc, #100]	; (800aaf8 <SVCCTL_App_Notification+0x170>)
 800aa92:	f000 fa8b 	bl	800afac <P2PS_APP_Notification>
          HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800aa96:	2201      	movs	r2, #1
 800aa98:	2101      	movs	r1, #1
 800aa9a:	4818      	ldr	r0, [pc, #96]	; (800aafc <SVCCTL_App_Notification+0x174>)
 800aa9c:	f7f8 fd44 	bl	8003528 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	2120      	movs	r1, #32
 800aaa4:	4815      	ldr	r0, [pc, #84]	; (800aafc <SVCCTL_App_Notification+0x174>)
 800aaa6:	f7f8 fd3f 	bl	8003528 <HAL_GPIO_WritePin>
          aci_gatt_exchange_config(connection_complete_event->Connection_Handle);
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	4618      	mov	r0, r3
 800aab4:	f7fe fca3 	bl	80093fe <aci_gatt_exchange_config>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 800aab8:	e002      	b.n	800aac0 <SVCCTL_App_Notification+0x138>
          break;
 800aaba:	bf00      	nop
 800aabc:	e014      	b.n	800aae8 <SVCCTL_App_Notification+0x160>
          break;
 800aabe:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 800aac0:	e012      	b.n	800aae8 <SVCCTL_App_Notification+0x160>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800aac2:	6a3b      	ldr	r3, [r7, #32]
 800aac4:	3302      	adds	r3, #2
 800aac6:	61fb      	str	r3, [r7, #28]
      switch (blue_evt->ecode)
 800aac8:	69fb      	ldr	r3, [r7, #28]
 800aaca:	881b      	ldrh	r3, [r3, #0]
 800aacc:	b29b      	uxth	r3, r3
 800aace:	f240 4207 	movw	r2, #1031	; 0x407
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d004      	beq.n	800aae0 <SVCCTL_App_Notification+0x158>
 800aad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aada:	d003      	beq.n	800aae4 <SVCCTL_App_Notification+0x15c>
 800aadc:	2b04      	cmp	r3, #4
        break; /* RADIO_ACTIVITY_EVENT */
 800aade:	e002      	b.n	800aae6 <SVCCTL_App_Notification+0x15e>
        break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 800aae0:	bf00      	nop
 800aae2:	e000      	b.n	800aae6 <SVCCTL_App_Notification+0x15e>
      break;
 800aae4:	bf00      	nop
      break; /* EVT_VENDOR */
 800aae6:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800aae8:	2301      	movs	r3, #1
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3728      	adds	r7, #40	; 0x28
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	bf00      	nop
 800aaf4:	2000011c 	.word	0x2000011c
 800aaf8:	200007c4 	.word	0x200007c4
 800aafc:	48000400 	.word	0x48000400

0800ab00 <APP_BLE_Get_Server_Connection_Status>:

APP_BLE_ConnStatus_t APP_BLE_Get_Server_Connection_Status(void)
{
 800ab00:	b480      	push	{r7}
 800ab02:	af00      	add	r7, sp, #0
    return BleApplicationContext.Device_Connection_Status;
 800ab04:	4b03      	ldr	r3, [pc, #12]	; (800ab14 <APP_BLE_Get_Server_Connection_Status+0x14>)
 800ab06:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr
 800ab14:	2000011c 	.word	0x2000011c

0800ab18 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800ab1e:	4b06      	ldr	r3, [pc, #24]	; (800ab38 <Ble_Tl_Init+0x20>)
 800ab20:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800ab22:	4b06      	ldr	r3, [pc, #24]	; (800ab3c <Ble_Tl_Init+0x24>)
 800ab24:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800ab26:	463b      	mov	r3, r7
 800ab28:	4619      	mov	r1, r3
 800ab2a:	4805      	ldr	r0, [pc, #20]	; (800ab40 <Ble_Tl_Init+0x28>)
 800ab2c:	f7fe feda 	bl	80098e4 <hci_init>

  return;
 800ab30:	bf00      	nop
}
 800ab32:	3708      	adds	r7, #8
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}
 800ab38:	200300b8 	.word	0x200300b8
 800ab3c:	0800af33 	.word	0x0800af33
 800ab40:	0800aefb 	.word	0x0800aefb

0800ab44 <Ble_Hci_Gap_Gatt_Init>:

 static void Ble_Hci_Gap_Gatt_Init(void){
 800ab44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab46:	b091      	sub	sp, #68	; 0x44
 800ab48:	af06      	add	r7, sp, #24
  uint8_t role;
  uint8_t index;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE }; 
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 800ab4e:	f7fe fdca 	bl	80096e6 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 800ab52:	f000 f943 	bl	800addc <BleGetBdAddress>
 800ab56:	6238      	str	r0, [r7, #32]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800ab58:	6a3a      	ldr	r2, [r7, #32]
 800ab5a:	2106      	movs	r1, #6
 800ab5c:	2000      	movs	r0, #0
 800ab5e:	f7fe fca3 	bl	80094a8 <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 800ab62:	6a3b      	ldr	r3, [r7, #32]
 800ab64:	795a      	ldrb	r2, [r3, #5]
 800ab66:	4b5e      	ldr	r3, [pc, #376]	; (800ace0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ab68:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 800ab6a:	6a3b      	ldr	r3, [r7, #32]
 800ab6c:	791a      	ldrb	r2, [r3, #4]
 800ab6e:	4b5c      	ldr	r3, [pc, #368]	; (800ace0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ab70:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 800ab72:	6a3b      	ldr	r3, [r7, #32]
 800ab74:	78da      	ldrb	r2, [r3, #3]
 800ab76:	4b5a      	ldr	r3, [pc, #360]	; (800ace0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ab78:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 800ab7a:	6a3b      	ldr	r3, [r7, #32]
 800ab7c:	789a      	ldrb	r2, [r3, #2]
 800ab7e:	4b58      	ldr	r3, [pc, #352]	; (800ace0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ab80:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 800ab82:	6a3b      	ldr	r3, [r7, #32]
 800ab84:	785a      	ldrb	r2, [r3, #1]
 800ab86:	4b56      	ldr	r3, [pc, #344]	; (800ace0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ab88:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 800ab8a:	6a3b      	ldr	r3, [r7, #32]
 800ab8c:	781a      	ldrb	r2, [r3, #0]
 800ab8e:	4b54      	ldr	r3, [pc, #336]	; (800ace0 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ab90:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 800ab92:	f64e 536e 	movw	r3, #60782	; 0xed6e
 800ab96:	60fb      	str	r3, [r7, #12]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 800ab98:	f7ff fe62 	bl	800a860 <LL_FLASH_GetUDN>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	60bb      	str	r3, [r7, #8]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 800aba0:	f107 0308 	add.w	r3, r7, #8
 800aba4:	461a      	mov	r2, r3
 800aba6:	2106      	movs	r1, #6
 800aba8:	202e      	movs	r0, #46	; 0x2e
 800abaa:	f7fe fc7d 	bl	80094a8 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK 
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800abae:	4a4d      	ldr	r2, [pc, #308]	; (800ace4 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 800abb0:	2110      	movs	r1, #16
 800abb2:	2018      	movs	r0, #24
 800abb4:	f7fe fc78 	bl	80094a8 <aci_hal_write_config_data>
    
   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 800abb8:	4a4b      	ldr	r2, [pc, #300]	; (800ace8 <Ble_Hci_Gap_Gatt_Init+0x1a4>)
 800abba:	2110      	movs	r1, #16
 800abbc:	2008      	movs	r0, #8
 800abbe:	f7fe fc73 	bl	80094a8 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800abc2:	2118      	movs	r1, #24
 800abc4:	2001      	movs	r0, #1
 800abc6:	f7fe fcdf 	bl	8009588 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 800abca:	f7fe f9c7 	bl	8008f5c <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 800abce:	2300      	movs	r3, #0
 800abd0:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800abd2:	7ffb      	ldrb	r3, [r7, #31]
 800abd4:	f043 0301 	orr.w	r3, r3, #1
 800abd8:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 800abda:	7ffb      	ldrb	r3, [r7, #31]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d01e      	beq.n	800ac1e <Ble_Hci_Gap_Gatt_Init+0xda>
  {
    const char *name = "STM32WB";
 800abe0:	4b42      	ldr	r3, [pc, #264]	; (800acec <Ble_Hci_Gap_Gatt_Init+0x1a8>)
 800abe2:	61bb      	str	r3, [r7, #24]
    aci_gap_init(role, 0,
 800abe4:	f107 0216 	add.w	r2, r7, #22
 800abe8:	7ff8      	ldrb	r0, [r7, #31]
 800abea:	f107 0312 	add.w	r3, r7, #18
 800abee:	9301      	str	r3, [sp, #4]
 800abf0:	f107 0314 	add.w	r3, r7, #20
 800abf4:	9300      	str	r3, [sp, #0]
 800abf6:	4613      	mov	r3, r2
 800abf8:	2207      	movs	r2, #7
 800abfa:	2100      	movs	r1, #0
 800abfc:	f7fe f897 	bl	8008d2e <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800ac00:	8afc      	ldrh	r4, [r7, #22]
 800ac02:	8abd      	ldrh	r5, [r7, #20]
 800ac04:	69b8      	ldr	r0, [r7, #24]
 800ac06:	f7f5 fabb 	bl	8000180 <strlen>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	b2da      	uxtb	r2, r3
 800ac0e:	69bb      	ldr	r3, [r7, #24]
 800ac10:	9300      	str	r3, [sp, #0]
 800ac12:	4613      	mov	r3, r2
 800ac14:	2200      	movs	r2, #0
 800ac16:	4629      	mov	r1, r5
 800ac18:	4620      	mov	r0, r4
 800ac1a:	f7fe fb62 	bl	80092e2 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 800ac1e:	8af8      	ldrh	r0, [r7, #22]
 800ac20:	8a79      	ldrh	r1, [r7, #18]
 800ac22:	1d3b      	adds	r3, r7, #4
 800ac24:	9300      	str	r3, [sp, #0]
 800ac26:	2302      	movs	r3, #2
 800ac28:	2200      	movs	r2, #0
 800ac2a:	f7fe fb5a 	bl	80092e2 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
/**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED); 
 800ac2e:	2202      	movs	r2, #2
 800ac30:	2102      	movs	r1, #2
 800ac32:	2000      	movs	r0, #0
 800ac34:	f7fe fde8 	bl	8009808 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800ac38:	4b2d      	ldr	r3, [pc, #180]	; (800acf0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800ac3e:	4b2c      	ldr	r3, [pc, #176]	; (800acf0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800ac40:	781b      	ldrb	r3, [r3, #0]
 800ac42:	4618      	mov	r0, r3
 800ac44:	f7fd ff73 	bl	8008b2e <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800ac48:	4b29      	ldr	r3, [pc, #164]	; (800acf0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 800ac4e:	4b28      	ldr	r3, [pc, #160]	; (800acf0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800ac50:	2200      	movs	r2, #0
 800ac52:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = 8;
 800ac54:	4b26      	ldr	r3, [pc, #152]	; (800acf0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800ac56:	2208      	movs	r2, #8
 800ac58:	755a      	strb	r2, [r3, #21]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
 800ac5a:	4b25      	ldr	r3, [pc, #148]	; (800acf0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800ac5c:	2210      	movs	r2, #16
 800ac5e:	759a      	strb	r2, [r3, #22]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = 1;
 800ac60:	4b23      	ldr	r3, [pc, #140]	; (800acf0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800ac62:	2201      	movs	r2, #1
 800ac64:	751a      	strb	r2, [r3, #20]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
 800ac66:	4b22      	ldr	r3, [pc, #136]	; (800acf0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800ac68:	4a22      	ldr	r2, [pc, #136]	; (800acf4 <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800ac6a:	619a      	str	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = 1;
 800ac6c:	4b20      	ldr	r3, [pc, #128]	; (800acf0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800ac6e:	2201      	movs	r2, #1
 800ac70:	709a      	strb	r2, [r3, #2]
  for (index = 0; index < 16; index++)
 800ac72:	2300      	movs	r3, #0
 800ac74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ac78:	e00b      	b.n	800ac92 <Ble_Hci_Gap_Gatt_Init+0x14e>
  {
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 800ac7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac7e:	4a1c      	ldr	r2, [pc, #112]	; (800acf0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800ac80:	4413      	add	r3, r2
 800ac82:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ac86:	711a      	strb	r2, [r3, #4]
  for (index = 0; index < 16; index++)
 800ac88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac8c:	3301      	adds	r3, #1
 800ac8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ac92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac96:	2b0f      	cmp	r3, #15
 800ac98:	d9ef      	bls.n	800ac7a <Ble_Hci_Gap_Gatt_Init+0x136>
  }

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800ac9a:	4b15      	ldr	r3, [pc, #84]	; (800acf0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800ac9c:	789d      	ldrb	r5, [r3, #2]
 800ac9e:	4b14      	ldr	r3, [pc, #80]	; (800acf0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800aca0:	785e      	ldrb	r6, [r3, #1]
 800aca2:	4b13      	ldr	r3, [pc, #76]	; (800acf0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800aca4:	7d5b      	ldrb	r3, [r3, #21]
 800aca6:	4a12      	ldr	r2, [pc, #72]	; (800acf0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800aca8:	7d92      	ldrb	r2, [r2, #22]
 800acaa:	4911      	ldr	r1, [pc, #68]	; (800acf0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800acac:	7d09      	ldrb	r1, [r1, #20]
 800acae:	4810      	ldr	r0, [pc, #64]	; (800acf0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800acb0:	6980      	ldr	r0, [r0, #24]
 800acb2:	2400      	movs	r4, #0
 800acb4:	9404      	str	r4, [sp, #16]
 800acb6:	9003      	str	r0, [sp, #12]
 800acb8:	9102      	str	r1, [sp, #8]
 800acba:	9201      	str	r2, [sp, #4]
 800acbc:	9300      	str	r3, [sp, #0]
 800acbe:	2300      	movs	r3, #0
 800acc0:	2201      	movs	r2, #1
 800acc2:	4631      	mov	r1, r6
 800acc4:	4628      	mov	r0, r5
 800acc6:	f7fd ff83 	bl	8008bd0 <aci_gap_set_authentication_requirement>
                                        );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800acca:	4b09      	ldr	r3, [pc, #36]	; (800acf0 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800accc:	789b      	ldrb	r3, [r3, #2]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d001      	beq.n	800acd6 <Ble_Hci_Gap_Gatt_Init+0x192>
   {
     aci_gap_configure_whitelist();
 800acd2:	f7fe f91a 	bl	8008f0a <aci_gap_configure_whitelist>
   }
}
 800acd6:	bf00      	nop
 800acd8:	372c      	adds	r7, #44	; 0x2c
 800acda:	46bd      	mov	sp, r7
 800acdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acde:	bf00      	nop
 800ace0:	2000001c 	.word	0x2000001c
 800ace4:	0800b658 	.word	0x0800b658
 800ace8:	0800b668 	.word	0x0800b668
 800acec:	0800b580 	.word	0x0800b580
 800acf0:	2000011c 	.word	0x2000011c
 800acf4:	0001b207 	.word	0x0001b207

0800acf8 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b08c      	sub	sp, #48	; 0x30
 800acfc:	af08      	add	r7, sp, #32
 800acfe:	4603      	mov	r3, r0
 800ad00:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ad02:	2342      	movs	r3, #66	; 0x42
 800ad04:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;
 
  if (New_Status == APP_BLE_FAST_ADV)
 800ad06:	79fb      	ldrb	r3, [r7, #7]
 800ad08:	2b01      	cmp	r3, #1
 800ad0a:	d106      	bne.n	800ad1a <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800ad0c:	4b2c      	ldr	r3, [pc, #176]	; (800adc0 <Adv_Request+0xc8>)
 800ad0e:	881b      	ldrh	r3, [r3, #0]
 800ad10:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800ad12:	4b2c      	ldr	r3, [pc, #176]	; (800adc4 <Adv_Request+0xcc>)
 800ad14:	881b      	ldrh	r3, [r3, #0]
 800ad16:	81bb      	strh	r3, [r7, #12]
 800ad18:	e005      	b.n	800ad26 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800ad1a:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800ad1e:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800ad20:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800ad24:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800ad26:	4b28      	ldr	r3, [pc, #160]	; (800adc8 <Adv_Request+0xd0>)
 800ad28:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f7f6 fd4f 	bl	80017d0 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);
    if ((New_Status == APP_BLE_LP_ADV)
 800ad32:	79fb      	ldrb	r3, [r7, #7]
 800ad34:	2b02      	cmp	r3, #2
 800ad36:	d10d      	bne.n	800ad54 <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800ad38:	4b23      	ldr	r3, [pc, #140]	; (800adc8 <Adv_Request+0xd0>)
 800ad3a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800ad3e:	2b01      	cmp	r3, #1
 800ad40:	d004      	beq.n	800ad4c <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800ad42:	4b21      	ldr	r3, [pc, #132]	; (800adc8 <Adv_Request+0xd0>)
 800ad44:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800ad48:	2b02      	cmp	r3, #2
 800ad4a:	d103      	bne.n	800ad54 <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 800ad4c:	f7fd fde1 	bl	8008912 <aci_gap_set_non_discoverable>
 800ad50:	4603      	mov	r3, r0
 800ad52:	72fb      	strb	r3, [r7, #11]
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 800ad54:	4a1c      	ldr	r2, [pc, #112]	; (800adc8 <Adv_Request+0xd0>)
 800ad56:	79fb      	ldrb	r3, [r7, #7]
 800ad58:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 800ad5c:	4b1a      	ldr	r3, [pc, #104]	; (800adc8 <Adv_Request+0xd0>)
 800ad5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad62:	89b8      	ldrh	r0, [r7, #12]
 800ad64:	89f9      	ldrh	r1, [r7, #14]
 800ad66:	2200      	movs	r2, #0
 800ad68:	9206      	str	r2, [sp, #24]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	9205      	str	r2, [sp, #20]
 800ad6e:	4a17      	ldr	r2, [pc, #92]	; (800adcc <Adv_Request+0xd4>)
 800ad70:	9204      	str	r2, [sp, #16]
 800ad72:	9303      	str	r3, [sp, #12]
 800ad74:	4b16      	ldr	r3, [pc, #88]	; (800add0 <Adv_Request+0xd8>)
 800ad76:	9302      	str	r3, [sp, #8]
 800ad78:	2308      	movs	r3, #8
 800ad7a:	9301      	str	r3, [sp, #4]
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	9300      	str	r3, [sp, #0]
 800ad80:	2300      	movs	r3, #0
 800ad82:	4602      	mov	r2, r0
 800ad84:	2000      	movs	r0, #0
 800ad86:	f7fd fded 	bl	8008964 <aci_gap_set_discoverable>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);
    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 800ad8e:	4911      	ldr	r1, [pc, #68]	; (800add4 <Adv_Request+0xdc>)
 800ad90:	200e      	movs	r0, #14
 800ad92:	f7fe f857 	bl	8008e44 <aci_gap_update_adv_data>
 800ad96:	4603      	mov	r3, r0
 800ad98:	72fb      	strb	r3, [r7, #11]

     if (ret == BLE_STATUS_SUCCESS)
 800ad9a:	7afb      	ldrb	r3, [r7, #11]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d10a      	bne.n	800adb6 <Adv_Request+0xbe>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 800ada0:	79fb      	ldrb	r3, [r7, #7]
 800ada2:	2b01      	cmp	r3, #1
 800ada4:	d107      	bne.n	800adb6 <Adv_Request+0xbe>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800ada6:	4b08      	ldr	r3, [pc, #32]	; (800adc8 <Adv_Request+0xd0>)
 800ada8:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800adac:	490a      	ldr	r1, [pc, #40]	; (800add8 <Adv_Request+0xe0>)
 800adae:	4618      	mov	r0, r3
 800adb0:	f7f6 fd98 	bl	80018e4 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 800adb4:	bf00      	nop
 800adb6:	bf00      	nop
}
 800adb8:	3710      	adds	r7, #16
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
 800adbe:	bf00      	nop
 800adc0:	200001b0 	.word	0x200001b0
 800adc4:	200001b2 	.word	0x200001b2
 800adc8:	2000011c 	.word	0x2000011c
 800adcc:	20000145 	.word	0x20000145
 800add0:	0800b678 	.word	0x0800b678
 800add4:	2000001c 	.word	0x2000001c
 800add8:	0001e046 	.word	0x0001e046

0800addc <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b086      	sub	sp, #24
 800ade0:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800ade2:	f7ff fd3d 	bl	800a860 <LL_FLASH_GetUDN>
 800ade6:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adee:	d023      	beq.n	800ae38 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800adf0:	f7ff fd4e 	bl	800a890 <LL_FLASH_GetSTCompanyID>
 800adf4:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800adf6:	f7ff fd3f 	bl	800a878 <LL_FLASH_GetDeviceID>
 800adfa:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	b2da      	uxtb	r2, r3
 800ae00:	4b16      	ldr	r3, [pc, #88]	; (800ae5c <BleGetBdAddress+0x80>)
 800ae02:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	0a1b      	lsrs	r3, r3, #8
 800ae08:	b2da      	uxtb	r2, r3
 800ae0a:	4b14      	ldr	r3, [pc, #80]	; (800ae5c <BleGetBdAddress+0x80>)
 800ae0c:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	0c1b      	lsrs	r3, r3, #16
 800ae12:	b2da      	uxtb	r2, r3
 800ae14:	4b11      	ldr	r3, [pc, #68]	; (800ae5c <BleGetBdAddress+0x80>)
 800ae16:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	b2da      	uxtb	r2, r3
 800ae1c:	4b0f      	ldr	r3, [pc, #60]	; (800ae5c <BleGetBdAddress+0x80>)
 800ae1e:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	b2da      	uxtb	r2, r3
 800ae24:	4b0d      	ldr	r3, [pc, #52]	; (800ae5c <BleGetBdAddress+0x80>)
 800ae26:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	0a1b      	lsrs	r3, r3, #8
 800ae2c:	b2da      	uxtb	r2, r3
 800ae2e:	4b0b      	ldr	r3, [pc, #44]	; (800ae5c <BleGetBdAddress+0x80>)
 800ae30:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 800ae32:	4b0a      	ldr	r3, [pc, #40]	; (800ae5c <BleGetBdAddress+0x80>)
 800ae34:	617b      	str	r3, [r7, #20]
 800ae36:	e00b      	b.n	800ae50 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800ae38:	2000      	movs	r0, #0
 800ae3a:	f7fe ff05 	bl	8009c48 <OTP_Read>
 800ae3e:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d002      	beq.n	800ae4c <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	617b      	str	r3, [r7, #20]
 800ae4a:	e001      	b.n	800ae50 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 800ae4c:	4b04      	ldr	r3, [pc, #16]	; (800ae60 <BleGetBdAddress+0x84>)
 800ae4e:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 800ae50:	697b      	ldr	r3, [r7, #20]
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3718      	adds	r7, #24
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
 800ae5a:	bf00      	nop
 800ae5c:	2000033c 	.word	0x2000033c
 800ae60:	0800b650 	.word	0x0800b650

0800ae64 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b082      	sub	sp, #8
 800ae68:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800ae6a:	4b0a      	ldr	r3, [pc, #40]	; (800ae94 <Adv_Cancel+0x30>)
 800ae6c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800ae70:	2b05      	cmp	r3, #5
 800ae72:	d00a      	beq.n	800ae8a <Adv_Cancel+0x26>

  {

    tBleStatus result = 0x00;
 800ae74:	2300      	movs	r3, #0
 800ae76:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 800ae78:	f7fd fd4b 	bl	8008912 <aci_gap_set_non_discoverable>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800ae80:	4b04      	ldr	r3, [pc, #16]	; (800ae94 <Adv_Cancel+0x30>)
 800ae82:	2200      	movs	r2, #0
 800ae84:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 800ae88:	bf00      	nop
 800ae8a:	bf00      	nop
}
 800ae8c:	3708      	adds	r7, #8
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop
 800ae94:	2000011c 	.word	0x2000011c

0800ae98 <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 800ae9c:	2100      	movs	r1, #0
 800ae9e:	2001      	movs	r0, #1
 800aea0:	f7f7 fb28 	bl	80024f4 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 800aea4:	bf00      	nop
}
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 800aea8:	b480      	push	{r7}
 800aeaa:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */

/* USER CODE END Switch_OFF_GPIO */
}
 800aeac:	bf00      	nop
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb4:	4770      	bx	lr

0800aeb6 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800aeb6:	b580      	push	{r7, lr}
 800aeb8:	b082      	sub	sp, #8
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800aebe:	2100      	movs	r1, #0
 800aec0:	2004      	movs	r0, #4
 800aec2:	f7f7 fb17 	bl	80024f4 <UTIL_SEQ_SetTask>
  return;
 800aec6:	bf00      	nop
}
 800aec8:	3708      	adds	r7, #8
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}

0800aece <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800aece:	b580      	push	{r7, lr}
 800aed0:	b082      	sub	sp, #8
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800aed6:	2001      	movs	r0, #1
 800aed8:	f7f7 fb72 	bl	80025c0 <UTIL_SEQ_SetEvt>
  return;
 800aedc:	bf00      	nop
}
 800aede:	3708      	adds	r7, #8
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b082      	sub	sp, #8
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800aeec:	2001      	movs	r0, #1
 800aeee:	f7f7 fb85 	bl	80025fc <UTIL_SEQ_WaitEvt>
  return;
 800aef2:	bf00      	nop
}
 800aef4:	3708      	adds	r7, #8
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}

0800aefa <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 800aefa:	b580      	push	{r7, lr}
 800aefc:	b084      	sub	sp, #16
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload; 
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	3308      	adds	r3, #8
 800af0c:	4618      	mov	r0, r3
 800af0e:	f7ff fa9b 	bl	800a448 <SVCCTL_UserEvtRx>
 800af12:	4603      	mov	r3, r0
 800af14:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800af16:	7afb      	ldrb	r3, [r7, #11]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d003      	beq.n	800af24 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	2201      	movs	r2, #1
 800af20:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 800af22:	e002      	b.n	800af2a <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	2200      	movs	r2, #0
 800af28:	701a      	strb	r2, [r3, #0]
}
 800af2a:	bf00      	nop
 800af2c:	3710      	adds	r7, #16
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}

0800af32 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 800af32:	b580      	push	{r7, lr}
 800af34:	b084      	sub	sp, #16
 800af36:	af00      	add	r7, sp, #0
 800af38:	4603      	mov	r3, r0
 800af3a:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 800af3c:	79fb      	ldrb	r3, [r7, #7]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d002      	beq.n	800af48 <BLE_StatusNot+0x16>
 800af42:	2b01      	cmp	r3, #1
 800af44:	d006      	beq.n	800af54 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 800af46:	e00b      	b.n	800af60 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800af48:	237f      	movs	r3, #127	; 0x7f
 800af4a:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800af4c:	68f8      	ldr	r0, [r7, #12]
 800af4e:	f7f7 fafb 	bl	8002548 <UTIL_SEQ_PauseTask>
      break;
 800af52:	e005      	b.n	800af60 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800af54:	237f      	movs	r3, #127	; 0x7f
 800af56:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800af58:	68f8      	ldr	r0, [r7, #12]
 800af5a:	f7f7 fb13 	bl	8002584 <UTIL_SEQ_ResumeTask>
      break;
 800af5e:	bf00      	nop
  }
  return;
 800af60:	bf00      	nop
}
 800af62:	3710      	adds	r7, #16
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}

0800af68 <P2PS_STM_App_Notification>:
static void P2PS_DataChange_Timer_Callback(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	781b      	ldrb	r3, [r3, #0]
 800af74:	2b01      	cmp	r3, #1
 800af76:	d00b      	beq.n	800af90 <P2PS_STM_App_Notification+0x28>
 800af78:	2b03      	cmp	r3, #3
 800af7a:	d00d      	beq.n	800af98 <P2PS_STM_App_Notification+0x30>
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d000      	beq.n	800af82 <P2PS_STM_App_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 800af80:	e00b      	b.n	800af9a <P2PS_STM_App_Notification+0x32>
    	P2P_Server_App_Context.NotificationStatus = 1;
 800af82:	4b08      	ldr	r3, [pc, #32]	; (800afa4 <P2PS_STM_App_Notification+0x3c>)
 800af84:	2201      	movs	r2, #1
 800af86:	701a      	strb	r2, [r3, #0]
    	HAL_TIM_Base_Start_IT(&htim16);
 800af88:	4807      	ldr	r0, [pc, #28]	; (800afa8 <P2PS_STM_App_Notification+0x40>)
 800af8a:	f7fb ff19 	bl	8006dc0 <HAL_TIM_Base_Start_IT>
      break;
 800af8e:	e004      	b.n	800af9a <P2PS_STM_App_Notification+0x32>
    	P2P_Server_App_Context.NotificationStatus = 0;
 800af90:	4b04      	ldr	r3, [pc, #16]	; (800afa4 <P2PS_STM_App_Notification+0x3c>)
 800af92:	2200      	movs	r2, #0
 800af94:	701a      	strb	r2, [r3, #0]
      break;
 800af96:	e000      	b.n	800af9a <P2PS_STM_App_Notification+0x32>
      break;
 800af98:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800af9a:	bf00      	nop
}
 800af9c:	3708      	adds	r7, #8
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}
 800afa2:	bf00      	nop
 800afa4:	200001b4 	.word	0x200001b4
 800afa8:	20000480 	.word	0x20000480

0800afac <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 800afac:	b480      	push	{r7}
 800afae:	b083      	sub	sp, #12
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d002      	beq.n	800afc2 <P2PS_APP_Notification+0x16>
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d002      	beq.n	800afc6 <P2PS_APP_Notification+0x1a>
    
    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800afc0:	e002      	b.n	800afc8 <P2PS_APP_Notification+0x1c>
    break;
 800afc2:	bf00      	nop
 800afc4:	e000      	b.n	800afc8 <P2PS_APP_Notification+0x1c>
    break;
 800afc6:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 800afc8:	bf00      	nop
}
 800afca:	370c      	adds	r7, #12
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr

0800afd4 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */
	/* Register task used to update the characteristic (send the notification) */
		UTIL_SEQ_RegTask(1 << CFG_MY_TASK_NOTIFY_DATA ,UTIL_SEQ_RFU, P2PS_Send_Notification_Task);
 800afd8:	4a05      	ldr	r2, [pc, #20]	; (800aff0 <P2PS_APP_Init+0x1c>)
 800afda:	2100      	movs	r1, #0
 800afdc:	2008      	movs	r0, #8
 800afde:	f7f7 fa69 	bl	80024b4 <UTIL_SEQ_RegTask>
//				P2PS_DataChange_Timer_Callback);

	  /**
	   * Initialize Template application context
	   */
	  P2P_Server_App_Context.NotificationStatus=0;
 800afe2:	4b04      	ldr	r3, [pc, #16]	; (800aff4 <P2PS_APP_Init+0x20>)
 800afe4:	2200      	movs	r2, #0
 800afe6:	701a      	strb	r2, [r3, #0]
	  P2PS_APP_context_Init();
 800afe8:	f000 f824 	bl	800b034 <P2PS_APP_context_Init>
/* USER CODE END P2PS_APP_Init */
  return;
 800afec:	bf00      	nop
}
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	0800aff9 	.word	0x0800aff9
 800aff4:	200001b4 	.word	0x200001b4

0800aff8 <P2PS_Send_Notification_Task>:

/* USER CODE BEGIN FD */

static void P2PS_Send_Notification_Task(void)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b08a      	sub	sp, #40	; 0x28
 800affc:	af00      	add	r7, sp, #0
  /* Update P2P_NOTIFY characteristic */
	uint8_t value[40] = {0};
 800affe:	463b      	mov	r3, r7
 800b000:	2228      	movs	r2, #40	; 0x28
 800b002:	2100      	movs	r1, #0
 800b004:	4618      	mov	r0, r3
 800b006:	f000 fa70 	bl	800b4ea <memset>

	if(P2P_Server_App_Context.NotificationStatus)
 800b00a:	4b09      	ldr	r3, [pc, #36]	; (800b030 <P2PS_Send_Notification_Task+0x38>)
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d00a      	beq.n	800b028 <P2PS_Send_Notification_Task+0x30>
	{
		get_buffer_values(&value[0]);
 800b012:	463b      	mov	r3, r7
 800b014:	4618      	mov	r0, r3
 800b016:	f7f6 ff27 	bl	8001e68 <get_buffer_values>
//		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
		P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID,&value[0]);
 800b01a:	463b      	mov	r3, r7
 800b01c:	4619      	mov	r1, r3
 800b01e:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800b022:	f7fe ff3b 	bl	8009e9c <P2PS_STM_App_Update_Char>
	else
	{

	}

  return;
 800b026:	bf00      	nop
 800b028:	bf00      	nop
}
 800b02a:	3728      	adds	r7, #40	; 0x28
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}
 800b030:	200001b4 	.word	0x200001b4

0800b034 <P2PS_APP_context_Init>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
static void P2PS_APP_context_Init(void)
{
 800b034:	b480      	push	{r7}
 800b036:	af00      	add	r7, sp, #0
  P2P_Server_App_Context.Parameter = 0;
 800b038:	4b0b      	ldr	r3, [pc, #44]	; (800b068 <P2PS_APP_context_Init+0x34>)
 800b03a:	2200      	movs	r2, #0
 800b03c:	805a      	strh	r2, [r3, #2]
  P2P_Server_App_Context.ACC.X = 0;
 800b03e:	4b0a      	ldr	r3, [pc, #40]	; (800b068 <P2PS_APP_context_Init+0x34>)
 800b040:	2200      	movs	r2, #0
 800b042:	809a      	strh	r2, [r3, #4]
  P2P_Server_App_Context.ACC.Y = 0;
 800b044:	4b08      	ldr	r3, [pc, #32]	; (800b068 <P2PS_APP_context_Init+0x34>)
 800b046:	2200      	movs	r2, #0
 800b048:	80da      	strh	r2, [r3, #6]
  P2P_Server_App_Context.ACC.Z = 0;
 800b04a:	4b07      	ldr	r3, [pc, #28]	; (800b068 <P2PS_APP_context_Init+0x34>)
 800b04c:	2200      	movs	r2, #0
 800b04e:	811a      	strh	r2, [r3, #8]
  P2P_Server_App_Context.ECG.ecg_value = 0;
 800b050:	4b05      	ldr	r3, [pc, #20]	; (800b068 <P2PS_APP_context_Init+0x34>)
 800b052:	2200      	movs	r2, #0
 800b054:	815a      	strh	r2, [r3, #10]
  P2P_Server_App_Context.PPG.ppg_value = 0;
 800b056:	4b04      	ldr	r3, [pc, #16]	; (800b068 <P2PS_APP_context_Init+0x34>)
 800b058:	2200      	movs	r2, #0
 800b05a:	819a      	strh	r2, [r3, #12]
}
 800b05c:	bf00      	nop
 800b05e:	46bd      	mov	sp, r7
 800b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b064:	4770      	bx	lr
 800b066:	bf00      	nop
 800b068:	200001b4 	.word	0x200001b4

0800b06c <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 800b06c:	b480      	push	{r7}
 800b06e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800b070:	4b05      	ldr	r3, [pc, #20]	; (800b088 <LL_PWR_EnableBootC2+0x1c>)
 800b072:	68db      	ldr	r3, [r3, #12]
 800b074:	4a04      	ldr	r2, [pc, #16]	; (800b088 <LL_PWR_EnableBootC2+0x1c>)
 800b076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b07a:	60d3      	str	r3, [r2, #12]
}
 800b07c:	bf00      	nop
 800b07e:	46bd      	mov	sp, r7
 800b080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b084:	4770      	bx	lr
 800b086:	bf00      	nop
 800b088:	58000400 	.word	0x58000400

0800b08c <LL_AHB3_GRP1_EnableClock>:
{
 800b08c:	b480      	push	{r7}
 800b08e:	b085      	sub	sp, #20
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800b094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b098:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b09a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	4313      	orrs	r3, r2
 800b0a2:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800b0a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b0a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	4013      	ands	r3, r2
 800b0ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
}
 800b0b2:	bf00      	nop
 800b0b4:	3714      	adds	r7, #20
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0bc:	4770      	bx	lr

0800b0be <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800b0be:	b480      	push	{r7}
 800b0c0:	b083      	sub	sp, #12
 800b0c2:	af00      	add	r7, sp, #0
 800b0c4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	601a      	str	r2, [r3, #0]
}
 800b0d2:	bf00      	nop
 800b0d4:	370c      	adds	r7, #12
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0dc:	4770      	bx	lr

0800b0de <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800b0de:	b480      	push	{r7}
 800b0e0:	b083      	sub	sp, #12
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f043 0201 	orr.w	r2, r3, #1
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	601a      	str	r2, [r3, #0]
}
 800b0f2:	bf00      	nop
 800b0f4:	370c      	adds	r7, #12
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fc:	4770      	bx	lr

0800b0fe <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b0fe:	b480      	push	{r7}
 800b100:	b083      	sub	sp, #12
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]
 800b106:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	685a      	ldr	r2, [r3, #4]
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	041b      	lsls	r3, r3, #16
 800b110:	43db      	mvns	r3, r3
 800b112:	401a      	ands	r2, r3
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	605a      	str	r2, [r3, #4]
}
 800b118:	bf00      	nop
 800b11a:	370c      	adds	r7, #12
 800b11c:	46bd      	mov	sp, r7
 800b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b122:	4770      	bx	lr

0800b124 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b124:	b480      	push	{r7}
 800b126:	b083      	sub	sp, #12
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	685a      	ldr	r2, [r3, #4]
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	041b      	lsls	r3, r3, #16
 800b136:	431a      	orrs	r2, r3
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	605a      	str	r2, [r3, #4]
}
 800b13c:	bf00      	nop
 800b13e:	370c      	adds	r7, #12
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr

0800b148 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b148:	b480      	push	{r7}
 800b14a:	b083      	sub	sp, #12
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	685a      	ldr	r2, [r3, #4]
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	43db      	mvns	r3, r3
 800b15a:	401a      	ands	r2, r3
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	605a      	str	r2, [r3, #4]
}
 800b160:	bf00      	nop
 800b162:	370c      	adds	r7, #12
 800b164:	46bd      	mov	sp, r7
 800b166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16a:	4770      	bx	lr

0800b16c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b083      	sub	sp, #12
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	683a      	ldr	r2, [r7, #0]
 800b17a:	609a      	str	r2, [r3, #8]
}
 800b17c:	bf00      	nop
 800b17e:	370c      	adds	r7, #12
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr

0800b188 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b188:	b480      	push	{r7}
 800b18a:	b083      	sub	sp, #12
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	041a      	lsls	r2, r3, #16
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	609a      	str	r2, [r3, #8]
}
 800b19a:	bf00      	nop
 800b19c:	370c      	adds	r7, #12
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a4:	4770      	bx	lr

0800b1a6 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800b1a6:	b480      	push	{r7}
 800b1a8:	b083      	sub	sp, #12
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
 800b1ae:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	68da      	ldr	r2, [r3, #12]
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	4013      	ands	r3, r2
 800b1b8:	683a      	ldr	r2, [r7, #0]
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d101      	bne.n	800b1c2 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800b1be:	2301      	movs	r3, #1
 800b1c0:	e000      	b.n	800b1c4 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800b1c2:	2300      	movs	r3, #0
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	370c      	adds	r7, #12
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr

0800b1d0 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b083      	sub	sp, #12
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	69da      	ldr	r2, [r3, #28]
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	4013      	ands	r3, r2
 800b1e2:	683a      	ldr	r2, [r7, #0]
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d101      	bne.n	800b1ec <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	e000      	b.n	800b1ee <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800b1ec:	2300      	movs	r3, #0
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	370c      	adds	r7, #12
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f8:	4770      	bx	lr
	...

0800b1fc <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800b200:	2102      	movs	r1, #2
 800b202:	4819      	ldr	r0, [pc, #100]	; (800b268 <HW_IPCC_Rx_Handler+0x6c>)
 800b204:	f7ff ffe4 	bl	800b1d0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800b208:	4603      	mov	r3, r0
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d009      	beq.n	800b222 <HW_IPCC_Rx_Handler+0x26>
 800b20e:	4b16      	ldr	r3, [pc, #88]	; (800b268 <HW_IPCC_Rx_Handler+0x6c>)
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	43db      	mvns	r3, r3
 800b214:	f003 0302 	and.w	r3, r3, #2
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d002      	beq.n	800b222 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800b21c:	f000 f8de 	bl	800b3dc <HW_IPCC_SYS_EvtHandler>
 800b220:	e01f      	b.n	800b262 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CliNotifEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800b222:	2101      	movs	r1, #1
 800b224:	4810      	ldr	r0, [pc, #64]	; (800b268 <HW_IPCC_Rx_Handler+0x6c>)
 800b226:	f7ff ffd3 	bl	800b1d0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800b22a:	4603      	mov	r3, r0
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d008      	beq.n	800b242 <HW_IPCC_Rx_Handler+0x46>
 800b230:	4b0d      	ldr	r3, [pc, #52]	; (800b268 <HW_IPCC_Rx_Handler+0x6c>)
 800b232:	685b      	ldr	r3, [r3, #4]
 800b234:	f003 0301 	and.w	r3, r3, #1
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d102      	bne.n	800b242 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800b23c:	f000 f892 	bl	800b364 <HW_IPCC_BLE_EvtHandler>
 800b240:	e00f      	b.n	800b262 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800b242:	2108      	movs	r1, #8
 800b244:	4808      	ldr	r0, [pc, #32]	; (800b268 <HW_IPCC_Rx_Handler+0x6c>)
 800b246:	f7ff ffc3 	bl	800b1d0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800b24a:	4603      	mov	r3, r0
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d009      	beq.n	800b264 <HW_IPCC_Rx_Handler+0x68>
 800b250:	4b05      	ldr	r3, [pc, #20]	; (800b268 <HW_IPCC_Rx_Handler+0x6c>)
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	43db      	mvns	r3, r3
 800b256:	f003 0308 	and.w	r3, r3, #8
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d002      	beq.n	800b264 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800b25e:	f000 f909 	bl	800b474 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800b262:	bf00      	nop
 800b264:	bf00      	nop
}
 800b266:	bd80      	pop	{r7, pc}
 800b268:	58000c00 	.word	0x58000c00

0800b26c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800b270:	2102      	movs	r1, #2
 800b272:	4822      	ldr	r0, [pc, #136]	; (800b2fc <HW_IPCC_Tx_Handler+0x90>)
 800b274:	f7ff ff97 	bl	800b1a6 <LL_C1_IPCC_IsActiveFlag_CHx>
 800b278:	4603      	mov	r3, r0
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d109      	bne.n	800b292 <HW_IPCC_Tx_Handler+0x26>
 800b27e:	4b1f      	ldr	r3, [pc, #124]	; (800b2fc <HW_IPCC_Tx_Handler+0x90>)
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	43db      	mvns	r3, r3
 800b284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d002      	beq.n	800b292 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800b28c:	f000 f89a 	bl	800b3c4 <HW_IPCC_SYS_CmdEvtHandler>
 800b290:	e031      	b.n	800b2f6 <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800b292:	2102      	movs	r1, #2
 800b294:	4819      	ldr	r0, [pc, #100]	; (800b2fc <HW_IPCC_Tx_Handler+0x90>)
 800b296:	f7ff ff86 	bl	800b1a6 <LL_C1_IPCC_IsActiveFlag_CHx>
 800b29a:	4603      	mov	r3, r0
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d109      	bne.n	800b2b4 <HW_IPCC_Tx_Handler+0x48>
 800b2a0:	4b16      	ldr	r3, [pc, #88]	; (800b2fc <HW_IPCC_Tx_Handler+0x90>)
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	43db      	mvns	r3, r3
 800b2a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d002      	beq.n	800b2b4 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800b2ae:	f000 f889 	bl	800b3c4 <HW_IPCC_SYS_CmdEvtHandler>
 800b2b2:	e020      	b.n	800b2f6 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800b2b4:	2108      	movs	r1, #8
 800b2b6:	4811      	ldr	r0, [pc, #68]	; (800b2fc <HW_IPCC_Tx_Handler+0x90>)
 800b2b8:	f7ff ff75 	bl	800b1a6 <LL_C1_IPCC_IsActiveFlag_CHx>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d109      	bne.n	800b2d6 <HW_IPCC_Tx_Handler+0x6a>
 800b2c2:	4b0e      	ldr	r3, [pc, #56]	; (800b2fc <HW_IPCC_Tx_Handler+0x90>)
 800b2c4:	685b      	ldr	r3, [r3, #4]
 800b2c6:	43db      	mvns	r3, r3
 800b2c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d002      	beq.n	800b2d6 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 800b2d0:	f000 f8b2 	bl	800b438 <HW_IPCC_MM_FreeBufHandler>
 800b2d4:	e00f      	b.n	800b2f6 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800b2d6:	2120      	movs	r1, #32
 800b2d8:	4808      	ldr	r0, [pc, #32]	; (800b2fc <HW_IPCC_Tx_Handler+0x90>)
 800b2da:	f7ff ff64 	bl	800b1a6 <LL_C1_IPCC_IsActiveFlag_CHx>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d109      	bne.n	800b2f8 <HW_IPCC_Tx_Handler+0x8c>
 800b2e4:	4b05      	ldr	r3, [pc, #20]	; (800b2fc <HW_IPCC_Tx_Handler+0x90>)
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	43db      	mvns	r3, r3
 800b2ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d002      	beq.n	800b2f8 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800b2f2:	f000 f843 	bl	800b37c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800b2f6:	bf00      	nop
 800b2f8:	bf00      	nop
}
 800b2fa:	bd80      	pop	{r7, pc}
 800b2fc:	58000c00 	.word	0x58000c00

0800b300 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800b300:	b580      	push	{r7, lr}
 800b302:	af00      	add	r7, sp, #0
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800b304:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800b306:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800b308:	f7ff feb0 	bl	800b06c <LL_PWR_EnableBootC2>

  return;
 800b30c:	bf00      	nop
}
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800b310:	b580      	push	{r7, lr}
 800b312:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800b314:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b318:	f7ff feb8 	bl	800b08c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800b31c:	4806      	ldr	r0, [pc, #24]	; (800b338 <HW_IPCC_Init+0x28>)
 800b31e:	f7ff fede 	bl	800b0de <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800b322:	4805      	ldr	r0, [pc, #20]	; (800b338 <HW_IPCC_Init+0x28>)
 800b324:	f7ff fecb 	bl	800b0be <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800b328:	202c      	movs	r0, #44	; 0x2c
 800b32a:	f7f7 ff48 	bl	80031be <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800b32e:	202d      	movs	r0, #45	; 0x2d
 800b330:	f7f7 ff45 	bl	80031be <HAL_NVIC_EnableIRQ>

  return;
 800b334:	bf00      	nop
}
 800b336:	bd80      	pop	{r7, pc}
 800b338:	58000c00 	.word	0x58000c00

0800b33c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800b340:	2101      	movs	r1, #1
 800b342:	4802      	ldr	r0, [pc, #8]	; (800b34c <HW_IPCC_BLE_Init+0x10>)
 800b344:	f7ff ff00 	bl	800b148 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b348:	bf00      	nop
}
 800b34a:	bd80      	pop	{r7, pc}
 800b34c:	58000c00 	.word	0x58000c00

0800b350 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800b350:	b580      	push	{r7, lr}
 800b352:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800b354:	2101      	movs	r1, #1
 800b356:	4802      	ldr	r0, [pc, #8]	; (800b360 <HW_IPCC_BLE_SendCmd+0x10>)
 800b358:	f7ff ff16 	bl	800b188 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800b35c:	bf00      	nop
}
 800b35e:	bd80      	pop	{r7, pc}
 800b360:	58000c00 	.word	0x58000c00

0800b364 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800b364:	b580      	push	{r7, lr}
 800b366:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800b368:	f7ff f944 	bl	800a5f4 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800b36c:	2101      	movs	r1, #1
 800b36e:	4802      	ldr	r0, [pc, #8]	; (800b378 <HW_IPCC_BLE_EvtHandler+0x14>)
 800b370:	f7ff fefc 	bl	800b16c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800b374:	bf00      	nop
}
 800b376:	bd80      	pop	{r7, pc}
 800b378:	58000c00 	.word	0x58000c00

0800b37c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800b380:	2120      	movs	r1, #32
 800b382:	4803      	ldr	r0, [pc, #12]	; (800b390 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800b384:	f7ff fece 	bl	800b124 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800b388:	f7ff f950 	bl	800a62c <HW_IPCC_BLE_AclDataAckNot>

  return;
 800b38c:	bf00      	nop
}
 800b38e:	bd80      	pop	{r7, pc}
 800b390:	58000c00 	.word	0x58000c00

0800b394 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800b394:	b580      	push	{r7, lr}
 800b396:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800b398:	2102      	movs	r1, #2
 800b39a:	4802      	ldr	r0, [pc, #8]	; (800b3a4 <HW_IPCC_SYS_Init+0x10>)
 800b39c:	f7ff fed4 	bl	800b148 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b3a0:	bf00      	nop
}
 800b3a2:	bd80      	pop	{r7, pc}
 800b3a4:	58000c00 	.word	0x58000c00

0800b3a8 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b3ac:	2102      	movs	r1, #2
 800b3ae:	4804      	ldr	r0, [pc, #16]	; (800b3c0 <HW_IPCC_SYS_SendCmd+0x18>)
 800b3b0:	f7ff feea 	bl	800b188 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b3b4:	2102      	movs	r1, #2
 800b3b6:	4802      	ldr	r0, [pc, #8]	; (800b3c0 <HW_IPCC_SYS_SendCmd+0x18>)
 800b3b8:	f7ff fea1 	bl	800b0fe <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800b3bc:	bf00      	nop
}
 800b3be:	bd80      	pop	{r7, pc}
 800b3c0:	58000c00 	.word	0x58000c00

0800b3c4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b3c8:	2102      	movs	r1, #2
 800b3ca:	4803      	ldr	r0, [pc, #12]	; (800b3d8 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800b3cc:	f7ff feaa 	bl	800b124 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800b3d0:	f7ff f974 	bl	800a6bc <HW_IPCC_SYS_CmdEvtNot>

  return;
 800b3d4:	bf00      	nop
}
 800b3d6:	bd80      	pop	{r7, pc}
 800b3d8:	58000c00 	.word	0x58000c00

0800b3dc <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800b3e0:	f7ff f97c 	bl	800a6dc <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800b3e4:	2102      	movs	r1, #2
 800b3e6:	4802      	ldr	r0, [pc, #8]	; (800b3f0 <HW_IPCC_SYS_EvtHandler+0x14>)
 800b3e8:	f7ff fec0 	bl	800b16c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800b3ec:	bf00      	nop
}
 800b3ee:	bd80      	pop	{r7, pc}
 800b3f0:	58000c00 	.word	0x58000c00

0800b3f4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b082      	sub	sp, #8
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800b3fc:	2108      	movs	r1, #8
 800b3fe:	480c      	ldr	r0, [pc, #48]	; (800b430 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b400:	f7ff fed1 	bl	800b1a6 <LL_C1_IPCC_IsActiveFlag_CHx>
 800b404:	4603      	mov	r3, r0
 800b406:	2b00      	cmp	r3, #0
 800b408:	d007      	beq.n	800b41a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800b40a:	4a0a      	ldr	r2, [pc, #40]	; (800b434 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b410:	2108      	movs	r1, #8
 800b412:	4807      	ldr	r0, [pc, #28]	; (800b430 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b414:	f7ff fe73 	bl	800b0fe <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800b418:	e006      	b.n	800b428 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b41e:	2108      	movs	r1, #8
 800b420:	4803      	ldr	r0, [pc, #12]	; (800b430 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b422:	f7ff feb1 	bl	800b188 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800b426:	bf00      	nop
}
 800b428:	3708      	adds	r7, #8
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
 800b42e:	bf00      	nop
 800b430:	58000c00 	.word	0x58000c00
 800b434:	20000344 	.word	0x20000344

0800b438 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b43c:	2108      	movs	r1, #8
 800b43e:	4806      	ldr	r0, [pc, #24]	; (800b458 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800b440:	f7ff fe70 	bl	800b124 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800b444:	4b05      	ldr	r3, [pc, #20]	; (800b45c <HW_IPCC_MM_FreeBufHandler+0x24>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b44a:	2108      	movs	r1, #8
 800b44c:	4802      	ldr	r0, [pc, #8]	; (800b458 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800b44e:	f7ff fe9b 	bl	800b188 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800b452:	bf00      	nop
}
 800b454:	bd80      	pop	{r7, pc}
 800b456:	bf00      	nop
 800b458:	58000c00 	.word	0x58000c00
 800b45c:	20000344 	.word	0x20000344

0800b460 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800b460:	b580      	push	{r7, lr}
 800b462:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800b464:	2108      	movs	r1, #8
 800b466:	4802      	ldr	r0, [pc, #8]	; (800b470 <HW_IPCC_TRACES_Init+0x10>)
 800b468:	f7ff fe6e 	bl	800b148 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b46c:	bf00      	nop
}
 800b46e:	bd80      	pop	{r7, pc}
 800b470:	58000c00 	.word	0x58000c00

0800b474 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800b474:	b580      	push	{r7, lr}
 800b476:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800b478:	f7ff f9ce 	bl	800a818 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800b47c:	2108      	movs	r1, #8
 800b47e:	4802      	ldr	r0, [pc, #8]	; (800b488 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800b480:	f7ff fe74 	bl	800b16c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800b484:	bf00      	nop
}
 800b486:	bd80      	pop	{r7, pc}
 800b488:	58000c00 	.word	0x58000c00

0800b48c <__libc_init_array>:
 800b48c:	b570      	push	{r4, r5, r6, lr}
 800b48e:	4e0d      	ldr	r6, [pc, #52]	; (800b4c4 <__libc_init_array+0x38>)
 800b490:	4c0d      	ldr	r4, [pc, #52]	; (800b4c8 <__libc_init_array+0x3c>)
 800b492:	1ba4      	subs	r4, r4, r6
 800b494:	10a4      	asrs	r4, r4, #2
 800b496:	2500      	movs	r5, #0
 800b498:	42a5      	cmp	r5, r4
 800b49a:	d109      	bne.n	800b4b0 <__libc_init_array+0x24>
 800b49c:	4e0b      	ldr	r6, [pc, #44]	; (800b4cc <__libc_init_array+0x40>)
 800b49e:	4c0c      	ldr	r4, [pc, #48]	; (800b4d0 <__libc_init_array+0x44>)
 800b4a0:	f000 f82c 	bl	800b4fc <_init>
 800b4a4:	1ba4      	subs	r4, r4, r6
 800b4a6:	10a4      	asrs	r4, r4, #2
 800b4a8:	2500      	movs	r5, #0
 800b4aa:	42a5      	cmp	r5, r4
 800b4ac:	d105      	bne.n	800b4ba <__libc_init_array+0x2e>
 800b4ae:	bd70      	pop	{r4, r5, r6, pc}
 800b4b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b4b4:	4798      	blx	r3
 800b4b6:	3501      	adds	r5, #1
 800b4b8:	e7ee      	b.n	800b498 <__libc_init_array+0xc>
 800b4ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b4be:	4798      	blx	r3
 800b4c0:	3501      	adds	r5, #1
 800b4c2:	e7f2      	b.n	800b4aa <__libc_init_array+0x1e>
 800b4c4:	0800b688 	.word	0x0800b688
 800b4c8:	0800b688 	.word	0x0800b688
 800b4cc:	0800b688 	.word	0x0800b688
 800b4d0:	0800b68c 	.word	0x0800b68c

0800b4d4 <memcpy>:
 800b4d4:	b510      	push	{r4, lr}
 800b4d6:	1e43      	subs	r3, r0, #1
 800b4d8:	440a      	add	r2, r1
 800b4da:	4291      	cmp	r1, r2
 800b4dc:	d100      	bne.n	800b4e0 <memcpy+0xc>
 800b4de:	bd10      	pop	{r4, pc}
 800b4e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4e8:	e7f7      	b.n	800b4da <memcpy+0x6>

0800b4ea <memset>:
 800b4ea:	4402      	add	r2, r0
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d100      	bne.n	800b4f4 <memset+0xa>
 800b4f2:	4770      	bx	lr
 800b4f4:	f803 1b01 	strb.w	r1, [r3], #1
 800b4f8:	e7f9      	b.n	800b4ee <memset+0x4>
	...

0800b4fc <_init>:
 800b4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4fe:	bf00      	nop
 800b500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b502:	bc08      	pop	{r3}
 800b504:	469e      	mov	lr, r3
 800b506:	4770      	bx	lr

0800b508 <_fini>:
 800b508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b50a:	bf00      	nop
 800b50c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b50e:	bc08      	pop	{r3}
 800b510:	469e      	mov	lr, r3
 800b512:	4770      	bx	lr
